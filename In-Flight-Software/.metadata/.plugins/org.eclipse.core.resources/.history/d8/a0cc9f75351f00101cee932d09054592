/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "stm32f4xx_hal.h"
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdint.h>

#include "MadgwickAHRS.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

typedef uint8_t bool;
#define false 0
#define true 1

// MMC5603 (Magnometer)
#define MMC5603_ADDRESS (0x30 << 1)  // MMC5603 I2C address
#define MMC5603_REG_CONTROL    0x1A          // Control Register 1
#define MMC5603_REG_CONTROL_2  0x1C          // Control Register 2
#define MMC5603_CONTINUOUS_MODE 0x80         // Enable continuous measurement mode
#define MMC5603_ODR_SETTING     0x08         // Set Output Data Rate (ODR) to a reasonable default

// MPL3115A2 (Temp/ Pressure)
#define MPL3115A2_ADDRESS  (0x60 << 1)  // 7-bit address, shifted left for HAL
#define MPL3115A2_WHO_AM_I 0x0C
#define MPL3115A2_CTRL_REG1 0x26
#define MPL3115A2_OUT_P_MSB 0x01

// MPU6050 (Accel/ Tilt)
#define MPU6050_ADDRESS (0x68 << 1)

// PA1010D (GPS)
#define PA1010D_ADDRESS (0x10 << 1)
#define PA_BFR_SIZE 255

//INA219 (Voltage)
#define INA219_ADDRESS (0x40 << 1)

// LM393 (Auto Gyro Speed)
#define PULSES_PER_ROTATION 60
#define AUTO_GYRO_TIME_INTERVAL_MS 1000

// Flash Memory
#define SECTOR 11
#define FLASH_ALTITUDE_OFFSET_ADDRESS 0x080E0000
#define FLASH_MAG_X_OFFSET_ADDRESS 0x080E0004
#define FLASH_MAG_Y_OFFSET_ADDRESS 0x080E0008
#define FLASH_MAG_Z_OFFSET_ADDRESS 0x080E000C
#define FLASH_TIME_DIF_ADDRESS 0x080E0010
#define FLASH_APOGEE_ALT_ADDRESS 0x080E0014
#define FLASH_PAYLOAD_RELEASED_ADDRESS 0x080E0018
#define FLASH_STATE_ADDRESS 0x080E001C

// Stepper Motor
#define IN1_PIN GPIO_PIN_6
#define IN1_PORT GPIOC
#define IN2_PIN GPIO_PIN_7
#define IN2_PORT GPIOC
#define IN3_PIN GPIO_PIN_8
#define IN3_PORT GPIOC
#define IN4_PIN GPIO_PIN_9
#define IN4_PORT GPIOC
#define STEPS_PER_REV 4096

// Servo
#define SERVO_MIN_PULSE_WIDTH 700   // 0° (0.5 ms)
#define SERVO_MAX_PULSE_WIDTH 2500  // 180° (2.5 ms)
#define SERVO_FREQUENCY 50
#define SERVO_ANGLE_CLOSED 128 // 128
#define SERVO_ANGLE_OPEN 85 // 90> >80

#define PI 3.141592

#define RX_BFR_SIZE 255
#define TX_BFR_SIZE 255
#define TEAM_ID "3141"

#define I2C_SCL_PIN GPIO_PIN_6
#define I2C_SDA_PIN GPIO_PIN_7
#define I2C_PORT GPIOB

#define DELTA_BUFFER_SIZE 5

#define MIN_STATE_MAINTAINED_ALT 10
#define DEFAULT_APOGEE_ALT 1000

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

// XBee
uint8_t rx_packet[RX_BFR_SIZE];
uint8_t tx_data[TX_BFR_SIZE-18];
uint8_t tx_packet[TX_BFR_SIZE];
uint8_t tx_count;
volatile bool command_ready = false;
char command_buffer[RX_BFR_SIZE-1];

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Variables TEAM_ID, MISSION_TIME, PACKET_COUNT, MODE, STATE, ALTITUDE,
TEMPERATURE, PRESSURE, VOLTAGE, GYRO_R, GYRO_P, GYRO_Y, ACCEL_R,
ACCEL_P, ACCEL_Y, MAG_R, MAG_P, MAG_Y, AUTO_GYRO_ROTATION_RATE,
GPS_TIME, GPS_ALTITUDE, GPS_LATITUDE, GPS_LONGITUDE, GPS_SATS,
CMD_ECHO [,,OPTIONAL_DATA] */


// Variables
int8_t mission_time_hr;
int8_t mission_time_min;
int8_t mission_time_sec;
int16_t packet_count = 0;
char mode = 'F';
char state[14] = "LAUNCH_PAD";
float altitude;
float temperature;
float pressure;
float voltage; // Not implemented yet
float gyro_x;
float gyro_y;
float gyro_z;
float accel_x;
float accel_y;
float accel_z;
float mag_x, mag_y, mag_z;
float auto_gyro_rotation_rate; // Not implemented yet
uint8_t gps_time_hr;
uint8_t gps_time_min;
uint8_t gps_time_sec;
float gps_altitude;
float gps_latitude;
float gps_longitude;
uint8_t gps_sats;
char cmd_echo[64] = "N/A";

// PA1010D DATA
uint8_t PA1010D_RATE[] = "$PMTK220,1000*1F\r\n";
//uint8_t PA1010D_SAT[] = "$PMTK313,1*2E\r\n";
uint8_t PA1010D_SAT[] = "$PMTK353,1,0,0,0,0*2A\r\n";
uint8_t PA1010D_INIT[] = "$PMTK225,0*2B\r\n";
uint8_t PA1010D_CFG[] = "$PMTK353,1,0,0,0,0*2A\r\n";
uint8_t PA1010D_MODE[] = "$PMTK314,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
uint8_t PA1010D_SEPERATOR = '$';
HAL_StatusTypeDef pa_ret;
uint8_t pa_buf[PA_BFR_SIZE];
HAL_StatusTypeDef pa_init_ret[5];
uint8_t prev_time = 0;
uint8_t i2cret[128];
char parse_buf[255];
char gps_lat_dir;
char gps_long_dir;
uint32_t time_dif;

// INA219 DATA (VOLTAGE/CURRENT)
HAL_StatusTypeDef ina_ret;
uint8_t ina_buf[8];
int16_t raw_shunt_voltage;
int16_t raw_bus_voltage;
int16_t raw_power;
int16_t raw_current;
float shunt_voltage;
float bus_voltage;
float power;
float current;

// LM393 (Auto Gyro Rotation Rate)
volatile uint32_t pulse_count = 0;

// Stepper Variables
double direction = 0;
double stepper_direction = 0;
int stepIndex = 1;
bool north_cam_on = false;
MadgwickAHRS ahrs;
uint32_t lastStepperUpdate = 0;
extern uint32_t SystemCoreClock;

// Commands
char sim_command[14];
char simp_command[15];
char set_time_command[13];
char cal_alt_command[14];
char set_camera_north_command[14];
char activate_north_cam_command[21];
char deactivate_north_cam_command[22];
char bcn_on_command[16];
char bcn_off_command[17];
char tel_on_command[15];
char tel_off_command[16];
char cal_comp_on_command[15];
char cal_comp_off_command[16];
char release_payload_command[25];
char reset_release_payload_command[26];
char reset_state_command[14];

// State Variables
float prev_alt = 0;
float delta_buffer[DELTA_BUFFER_SIZE] = {0};
int delta_index = 0;

// Other Variables
//float mag_x_offset = 0.173406959;
//float mag_y_offset = 0.0170800537;
//float mag_z_offset = -0.435796857;
float mag_x_offset = 0;
float mag_y_offset = 0;
float mag_z_offset = 0;
float mag_x_min = 0;
float mag_y_min = 0;
float mag_z_min = 0;
float mag_x_max = 0;
float mag_y_max = -1;
float mag_z_max = -1;
float altitude_offset = 0;
int telemetry_status = 1;
bool sim_enabled = false;
char rx_data[255];
HAL_StatusTypeDef uart_received;
bool calibrating_compass = 0;
float apogee_altitude = 0;
bool payload_released = false;
int alt_increasing_count = 0;
int alt_decreasing_count = 0;
int alt_non_increasing_count = 0;

volatile uint32_t msCounter = 0;

uint8_t steps[8][4] = {
    {1, 0, 0, 0},
    {1, 1, 0, 0},
    {0, 1, 0, 0},
    {0, 1, 1, 0},
    {0, 0, 1, 0},
    {0, 0, 1, 1},
    {0, 0, 0, 1},
    {1, 0, 0, 1}
};

HAL_StatusTypeDef result;
HAL_StatusTypeDef result2;
HAL_I2C_StateTypeDef state_result;
HAL_I2C_StateTypeDef state_result2;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART1_IRQHandler(void) {
	HAL_UART_IRQHandler(&huart1);
}

// Auto Gyro Rotation Sensor ------------------------------------------------------------

// Speed calculation function
void calculate_auto_gyro_speed(void)
{
    auto_gyro_rotation_rate = (pulse_count * 360) / PULSES_PER_ROTATION;
    pulse_count = 0;
}

// Servo Motor Functions -------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t angle) {
    // Limit the angle between 0° and 180°
    if (angle > 180) {
        angle = 180;
    }

    // Map the angle to the pulse width
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
                           ((SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH) * angle) / 180;

    // Calculate the duty cycle for the given pulse width
    uint32_t tim_period = htim2.Init.Period + 1;   // Get the timer period
    uint32_t pulse = (tim_period * pulse_width) / (1000000 / SERVO_FREQUENCY);

    // Set the pulse width to TIM2 Channel 3
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulse);
}

void Servo_Open(){
//	Set_Servo_Angle(SERVO_ANGLE_OPEN);
	unsigned char num_partitions = 20;
	for (int i = 1; i <= num_partitions; ++i){
		Set_Servo_Angle(SERVO_ANGLE_CLOSED + i * (SERVO_ANGLE_OPEN - SERVO_ANGLE_CLOSED) / num_partitions);
		HAL_Delay(25);
	}
}

void Servo_Close(){
//	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
	unsigned char num_partitions = 20;
	for (int i = 1; i <= num_partitions; ++i){
		Set_Servo_Angle(SERVO_ANGLE_OPEN + i * (SERVO_ANGLE_CLOSED - SERVO_ANGLE_OPEN) / num_partitions);
		HAL_Delay(25);
	}
}

void Servo_Init() {
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Start PWM signal on TIM2 Channel 3
}

// Flash Data Functions ---------------------------------------------------------------------------------
uint32_t time_seconds(uint8_t hr, uint8_t min, uint8_t sec){
	return 3600 * hr + 60 * min + sec;
}

int32_t get_time_dif(){
	return time_seconds(mission_time_hr, mission_time_min, mission_time_sec) - time_seconds(gps_time_hr, gps_time_min, gps_time_sec);
}

void get_mission_time(){
	int32_t mission_time = (time_seconds(gps_time_hr, gps_time_min, gps_time_sec) + time_dif) % 86400;
	if (mission_time < 0) mission_time += 86400;
	mission_time_sec = mission_time % 60;
	mission_time -= mission_time_sec;
	mission_time_min = (mission_time % 3600) / 60;
	mission_time -= mission_time_min;
	mission_time_hr = mission_time / 3600;
}

void store_flash_data(){
	// Store altitude offset, magnetic offsets, mission time
	HAL_FLASH_Unlock();

	FLASH_Erase_Sector(SECTOR, FLASH_VOLTAGE_RANGE_2);
	HAL_Delay(100);

	uint32_t altitude_offset_bits, mag_x_offset_bits, mag_y_offset_bits, mag_z_offset_bits, apogee_altitude_bits;
	uint32_t payload_released_bits = payload_released ? 1 : 0;

	// Copy the float data into the 32-bit unsigned integer variables
	if (!isnan(altitude_offset)){
		memcpy(&altitude_offset_bits, &altitude_offset, sizeof(altitude_offset));
	}
	if (!isnan(mag_x_offset)){
		memcpy(&mag_x_offset_bits, &mag_x_offset, sizeof(mag_x_offset));
	}
	if (!isnan(mag_y_offset)){
		memcpy(&mag_y_offset_bits, &mag_y_offset, sizeof(mag_y_offset));
	}
	if (!isnan(mag_z_offset)){
		memcpy(&mag_z_offset_bits, &mag_z_offset, sizeof(mag_z_offset));
	}
	memcpy(&apogee_altitude_bits, &apogee_altitude, sizeof(apogee_altitude));

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ALTITUDE_OFFSET_ADDRESS, altitude_offset_bits);
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_X_OFFSET_ADDRESS, mag_x_offset_bits);
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Y_OFFSET_ADDRESS, mag_y_offset_bits);
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Z_OFFSET_ADDRESS, mag_z_offset_bits);
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_TIME_DIF_ADDRESS, get_time_dif());
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_APOGEE_ALT_ADDRESS, apogee_altitude_bits);
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_PAYLOAD_RELEASED_ADDRESS, payload_released_bits);

	for (uint16_t i = 0; i < 14; i++) {
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_STATE_ADDRESS + i, state[i]);
	}
	HAL_Delay(100);

	HAL_FLASH_Lock();
}

void load_flash_data(){
	HAL_FLASH_Unlock();

//	altitude_offset = * (__IO uint32_t*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = * (__IO uint32_t*) FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (__IO uint32_t*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (__IO uint32_t*) FLASH_MAG_Z_OFFSET_ADDRESS;

//	altitude_offset = * (float*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = *(float*)FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (float*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (float*) FLASH_MAG_Z_OFFSET_ADDRESS;
	memcpy(&altitude_offset, (float*)FLASH_ALTITUDE_OFFSET_ADDRESS, sizeof(float));
	memcpy(&mag_x_offset, (float*)FLASH_MAG_X_OFFSET_ADDRESS, sizeof(float));
	memcpy(&mag_y_offset, (float*)FLASH_MAG_Y_OFFSET_ADDRESS, sizeof(float));
	memcpy(&mag_z_offset, (float*)FLASH_MAG_Z_OFFSET_ADDRESS, sizeof(float));
	memcpy(&time_dif, (int32_t*)FLASH_TIME_DIF_ADDRESS, sizeof(int32_t));
	memcpy(&apogee_altitude, (float*)FLASH_APOGEE_ALT_ADDRESS, sizeof(float));

	uint32_t readWord;
	memcpy(&readWord, (uint32_t*)FLASH_PAYLOAD_RELEASED_ADDRESS, sizeof(uint32_t));
	payload_released = (readWord != 0);

	memcpy(state, (uint8_t*)FLASH_STATE_ADDRESS, 14);

	HAL_FLASH_Lock();
}

// Sensor Read Functions -----------------------------------------------------------------------------
uint8_t set_gps(char* buf, uint8_t order){
	char tmp[2];

	if(strlen(buf)==0)
		return 0;

	switch(order) {
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
			return 1;
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
		gps_time_hr = atoi(tmp);
		memcpy(tmp, &buf[2], 2);
		gps_time_min = atoi(tmp);
		memcpy(tmp, &buf[4], 2);
		gps_time_sec = atoi(tmp);

		break;
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
		break;
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
		if (gps_lat_dir == 'S') {
			gps_latitude*= -1;
		}
		break;
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
		break;
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
		if (gps_long_dir == 'W') {
			gps_longitude*= -1;
		}
		break;
	case 7: //SATS
		gps_sats = atoi(buf);
		break;
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
		break;
	default:
		break;
	}

	return 0;
}

bool parse_nmea(char *buf){
	uint8_t i;
	uint8_t last = 0;
	uint8_t order = 0;

	for(i=0; i<255;i++){
		if ( buf[i] == 44 ){
			if (last != i){
				memset(parse_buf, '\000', sizeof parse_buf);
				memcpy(parse_buf, &buf[last], i-last);
				if(set_gps(parse_buf, order)){
					return false;
				}
			}
			last = i + 1;
			order = order + 1;
		} else if (buf[i] == 42) {
			break;
		}
	}

	return true;
}

float calculate_altitude(float pressure) {
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
}

void read_MMC5603(void) {
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	HAL_I2C_Master_Transmit(&hi2c1, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY);
	if (result != HAL_OK) {
		// Handle transmission error
		return;
	}

//	HAL_Delay(10);

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c1, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);

	// Fix center offsets

	raw_x -= (1 << 19);
	raw_y -= (1 << 19);
	raw_z -= (1 << 19);

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625 - mag_x_offset;
	mag_y = (float)raw_y * 0.0000625 - mag_y_offset;
	mag_z = (float)raw_z * 0.0000625 - mag_z_offset;

	direction = atan2(mag_y, mag_x) * 180 / PI;
	if (direction < 0){
		direction += 360;
	}
}

void read_MPL3115A2(void)
{
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_StatusTypeDef mpl_ret = HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);

    if (mpl_ret == HAL_OK){
    	// Combine pressure bytes into a 20-bit integer
		uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
		p_raw >>= 4; // Pressure is stored in the upper 20 bits

		// Convert raw pressure to Pascals
		pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals

		// Combine temperature bytes into a 12-bit integer
		int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
		t_raw >>= 4; // Temperature is stored in the upper 12 bits

		// Convert raw temperature to degrees Celsius
		temperature = t_raw / 16.0; // Temperature in Celsius

		altitude = calculate_altitude(pressure);
    }
}

void calibrate_altitude(void)
{
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
    p_raw >>= 4; // Pressure is stored in the upper 20 bits

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
    t_raw >>= 4; // Temperature is stored in the upper 12 bits

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius

    altitude_offset = 0;
    altitude = calculate_altitude(pressure);
    altitude_offset = -altitude;
}

void read_MPU6050(void) {
	uint8_t imu_addr = 0x3B;
	uint8_t gyro_addr = 0x43;
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
	int16_t raw_gyro_y = 0;
	int16_t raw_gyro_z = 0;

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDRESS, 3, 5);
	if (mpu_ret == HAL_OK){
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &imu_addr, 1, 100);
		if ( mpu_ret == HAL_OK ) {
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
			if ( mpu_ret == HAL_OK ) {
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);

				// get float values in g
				accel_x = raw_accel_x/16384.0;
				accel_y = raw_accel_y/16384.0;
				accel_z = raw_accel_z/16384.0;
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &gyro_addr, 1, 100);
		if ( mpu_ret == HAL_OK ) {
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
			if ( mpu_ret == HAL_OK ) {
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
				gyro_y = raw_gyro_y/131.0;
				gyro_z = raw_gyro_z/131.0;
			}
		}
    }
}

bool read_PA1010D()
{
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return false;

	uint8_t pa_buf_index = 0;
	uint8_t pa_bytebuf = 0;
    bool ret = false;

	/* PA1010D (GPS) */
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, HAL_MAX_DELAY) == HAL_OK){
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa_bytebuf, 1, HAL_MAX_DELAY);
			if (pa_bytebuf == '$'){
				ret = true;
				break; // Idea: take away break statement and see what the whole sentence looks like
			}
			pa_buf[pa_buf_index] = pa_bytebuf;
		}
		parse_nmea(pa_buf);
	}
	return ret;
}

void flush_PA1010D(){
	while(read_PA1010D());
}

void read_INA219(void) {
	/* INA219 (CURRENT/VOLTAGE) */

	// OLD CODE --------------------------------------------------------------------------
//	uint8_t bus_add = 0x02; // need to use separate registers for everything
//
//	ina_ret = HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS, 3, 5);
//	if (ina_ret == HAL_OK) {
//		ina_ret = HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, &bus_add, 1, 100);
//		if (ina_ret == HAL_OK) {
//			HAL_I2C_Master_Receive(&hi2c1, INA219_ADDRESS, ina_buf, 2, 10);
//
//			//raw_shunt_voltage = abs((int16_t)(ina_buf[0] << 8 | ina_buf[1]));
//			raw_bus_voltage = (int16_t)(ina_buf[0] << 8 | ina_buf [1]);
//			//raw_power = (int16_t)(ina_buf[4] << 8 | ina_buf [5]);
//			//raw_current = (int16_t)(ina_buf[6] << 8 | ina_buf [7]);
//
//			//shunt_voltage = raw_shunt_voltage*10.0;
//			bus_voltage = raw_bus_voltage/1600.0;
//			//power = raw_power*20/32768.0;
//			//current = raw_current/32768.0;
//
//			voltage = bus_voltage;
//		}
//
//	}


	// NEW CODE ----------------------------------------------------------------------------
	uint8_t reg = 0x02;  // Bus voltage register
	uint8_t ina_buf[2];

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS, 3, 5);
	if (ina_ret == HAL_OK) {
		// Write the register address
		ina_ret = HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, &reg, 1, 100);
		if (ina_ret == HAL_OK) {
			// Read 2 bytes from that register
			ina_ret = HAL_I2C_Master_Receive(&hi2c1, INA219_ADDRESS, ina_buf, 2, 10);
			if (ina_ret == HAL_OK) {
				uint16_t raw_bus_voltage = (ina_buf[0] << 8) | ina_buf[1];
				raw_bus_voltage >>= 3;  // per datasheet, remove unused bits

				float bus_voltage = raw_bus_voltage * 0.004;  // each bit = 4mV
				voltage = bus_voltage;

				// For debug:
				// printf("Bus voltage: %.3f V\n", voltage);
			}
		}
	}
}

void calibrate_mmc(){
	read_MMC5603();
	if (mag_x < mag_x_min){
		mag_x_min = mag_x;
	}
	if (mag_x > mag_x_max){
		mag_x_max = mag_x;
	}
	if (mag_y < mag_y_min){
		mag_y_min = mag_y;
	}
	if (mag_y > mag_y_max){
		mag_y_max = mag_y;
	}
	if (mag_z < mag_z_min){
		mag_z_min = mag_z;
	}
	if (mag_z > mag_z_max){
		mag_z_max = mag_z;
	}
}

// Sensor Init Functions -------------------------------------------------------------------
void init_MMC5603(void) {
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
	HAL_Delay(20);
	uint8_t set_bit = 0b00001000;
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
	HAL_Delay(1);
	uint8_t reset_bit = 0b00010000;
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
	HAL_Delay(1);

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
	HAL_Delay(10);

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
	HAL_Delay(10);

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
}

void init_MPL3115A2(void)
{
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
	HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
	if (who_am_i == 0xC4)
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
		HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
	}
	else
	{
		// Handle error
	}
}

void init_MPU6050(void)
{
	uint8_t mpu_config = 0x00;
	uint8_t mpu_set_sample_rate = 0x07;
	uint8_t mpu_set_fs_range = 0x00;
	uint8_t clockSource = 0x01;

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, I2C_MEMADD_SIZE_8BIT, &clockSource, 1, 1000);
}

void init_PA1010D(void)
{
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return;
	uint8_t pa1010d_bytebuf;

	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
//	pa_init_ret[1] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_INIT, strlen( (char *)PA1010D_INIT), 1000);
//	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);

//	HAL_Delay(10000);
	//Wait for stabilization
	for(int j=0; j<10; j++){
		for(int i=0; i<255; i++){
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
			if (pa1010d_bytebuf == '$'){
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
		}
		if (j>5){
			parse_nmea(pa_buf);
		}
		HAL_Delay(500);
	}
}

void init_INA219(void)
{
	// OLD CODE --------------------------------------------------------------------------
//	uint8_t ina_config[2] = {0b00000001, 0b00011101};
//	result2 = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);

	// NEW CODE --------------------------------------------------------------------------
	// This is writing to the CALIBRATION register (0x05), not the CONFIG register (0x00)!
	uint8_t ina_calib[2] = {0x20, 0x00};  // Example calibration value
	result2 = HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x05, 1, ina_calib, 2, 1000);

	// Now write to the CONFIG register (0x00)
	uint8_t ina_config[2] = {0x01, 0x9F};  // Example: 32V, 2A, 12-bit ADCs
	result2 = HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x00, 1, ina_config, 2, 1000);
}

void read_sensors(void)
{
	read_MPU6050(); // Accel/ tilt
	read_MPL3115A2(); // Temperature/ Pressure
	if (!north_cam_on) read_MMC5603(); // Magnetic Field
	read_PA1010D();
//	for (int i = 0; i < 10; ++i){
//		read_PA1010D(); // GPS
//	}
	calculate_auto_gyro_speed();
//	read_INA219(); // Voltage
}

void reset_MPU6050(void) {
    uint8_t reset_command = 0x80;  // Set the reset bit in PWR_MGMT_1
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1, &reset_command, 1, HAL_MAX_DELAY);
    HAL_Delay(100); // Wait for reset to complete
}

void init_sensors(void)
{
	if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
		reset_MPU6050();
	}

	init_MPU6050(); // Must be first
	init_MPL3115A2();
	init_MMC5603();
	init_PA1010D();
//	init_INA219();

	read_PA1010D();
	get_mission_time();

	flush_PA1010D();
}

void init_commands(void)
{
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL", TEAM_ID);
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
	snprintf(cal_comp_on_command, sizeof(cal_comp_on_command), "CMD,%s,CC,ON", TEAM_ID);
	snprintf(cal_comp_off_command, sizeof(cal_comp_off_command), "CMD,%s,CC,OFF", TEAM_ID);
	snprintf(set_camera_north_command, sizeof(set_camera_north_command), "CMD,%s,SCN", TEAM_ID);
	snprintf(activate_north_cam_command, sizeof(activate_north_cam_command), "CMD,%s,MEC,CAM,ON", TEAM_ID);
	snprintf(deactivate_north_cam_command, sizeof(deactivate_north_cam_command), "CMD,%s,MEC,CAM,OFF", TEAM_ID);
	snprintf(release_payload_command, sizeof(release_payload_command), "CMD,%s,MEC,PAYLOAD,ON", TEAM_ID);
	snprintf(reset_release_payload_command, sizeof(reset_release_payload_command), "CMD,%s,MEC,PAYLOAD,OFF", TEAM_ID);
	snprintf(reset_state_command, sizeof(reset_state_command), "CMD,%s,RST", TEAM_ID);
}

// Stepper Motor Functions ---------------------------------------------------------------------------
void Stepper_SetStep(uint8_t i) {
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, steps[i][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, steps[i][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, steps[i][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, steps[i][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

// Rotate the motor a specified number of steps
void Stepper_Rotate(int stepsCount, int delayMs) {
    int direction = (stepsCount > 0) ? 1 : -1;
    stepsCount = abs(stepsCount);

    for (int i = 0; i < stepsCount; i++) {
        Stepper_SetStep(stepIndex);
        HAL_Delay(delayMs);

        stepIndex += direction;
        if (stepIndex >= 8) stepIndex = 0;
        else if (stepIndex < 0) stepIndex = 7;
    }
}

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable TRC
    DWT->CYCCNT = 0;                                // Reset counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable counter
}

// Rotate the motor to correct its direction to all way to the North
void Stepper_Correction(){
//	read_MMC5603();
//	float dir_change = stepper_direction - direction;
//	if (dir_change > 180) dir_change -= 360;
//	else if (dir_change < -180) dir_change += 360;
//
//	int num_steps = round(dir_change * STEPS_PER_REV / 360);
//
//	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
//	if (stepper_direction > 360) stepper_direction -= 360;
//	else if (stepper_direction < 0) stepper_direction += 360;
//
//	Stepper_Rotate(num_steps, 0);


	// Read sensor data (gyroscope, accelerometer, magnetometer)
	read_MPU6050();
	read_MMC5603();

	float gx = gyro_x;
	float gy = gyro_y;
	float gz = gyro_z;
	float ax = accel_x;
	float ay = accel_y;
	float az = accel_z;
	float mx = mag_x;
	float my = mag_y;
	float mz = mag_z;

	uint32_t now = DWT->CYCCNT;
	float dt = (now - lastStepperUpdate) / (float)SystemCoreClock;
	lastStepperUpdate = now;

	if (dt > 0) {
	    ahrs.invSampleFreq = dt * 1.01;
	}
	Madgwick_update(&ahrs, gx, -gy, -gz, ax, -ay, -az, mx, my, mz);

	// Get the current yaw from the Madgwick filter (assumed to represent the direction of the system)
	float current_yaw = Madgwick_getYaw(&ahrs);

	float dir_change = stepper_direction - current_yaw;
	if (dir_change > 180) dir_change -= 360;
	else if (dir_change < -180) dir_change += 360;

	int num_steps = round(dir_change * STEPS_PER_REV / 360);

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
	if (stepper_direction > 360) stepper_direction -= 360;
	else if (stepper_direction < 0) stepper_direction += 360;

	Stepper_Rotate(-num_steps, 0);
}

void set_stepper_north(){
	stepper_direction = direction;
}

void turn_stepper_north(){
	read_MMC5603();
	float dir_change = stepper_direction - direction;
	if (dir_change > 180) dir_change -= 360;
	else if (dir_change < -180) dir_change += 360;

	int num_steps = round(dir_change * STEPS_PER_REV / 360);

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
	if (stepper_direction > 360) stepper_direction -= 360;
	else if (stepper_direction < 0) stepper_direction += 360;

	Stepper_Rotate(num_steps, 0);

	// Prepare for madgwick filter to take over stepper
	stepper_direction = Madgwick_getYaw(&ahrs);
	lastStepperUpdate = DWT->CYCCNT;
}

// Xbee and Command Functions ----------------------------------------------------------------
uint8_t calculate_checksum(const char *data) {
	uint8_t checksum = 0;
	while (*data) {
		checksum += *data++;
	}
	return checksum % 256;
}

void send_packet(){

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	packet_count += 1;

	snprintf(data, sizeof(data),
		"%s,%02d:%02d:%02d,%d,%c,%s,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%02d:%02d:%02d,%.1f,%.1f,%.1f,%u,%s,%d",
		 TEAM_ID, mission_time_hr, mission_time_min, mission_time_sec, packet_count,
		 mode, state, altitude, temperature, pressure, voltage,
		 -gyro_z, gyro_x, -gyro_y, -accel_z, accel_x, -accel_y, mag_z, mag_x, mag_y,
		 auto_gyro_rotation_rate, gps_time_hr, gps_time_min, gps_time_sec,
		 gps_altitude, gps_latitude, gps_longitude, gps_sats, cmd_echo, (int)direction);

	uint8_t checksum = calculate_checksum(data);
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
}

void send_mmc_plot_packet(){

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	snprintf(data, sizeof(data),
		"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d",
		 mag_x, mag_y, (mag_x_min + mag_x_max) / 2, (mag_y_min + mag_y_max) / 2, mag_x_min, mag_x_max, mag_y_min, mag_y_max, (int)direction);

	uint8_t checksum = calculate_checksum(data);
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
}

void reset_delta_buffer(){
	for(int i = 0; i < DELTA_BUFFER_SIZE; ++i){
		delta_buffer[i] = 0;
	}
}

void handle_state(){
	// States: ‘LAUNCH_PAD’,‘ASCENT’, ‘APOGEE’, ‘DESCENT’, ‘PROBE_RELEASE’, ‘LANDED’
	float noise_threshold = 0.75;
	float landing_threshold = 0.2;

	float delta = altitude - prev_alt;

	// Update delta buffer
	delta_buffer[delta_index] = delta;
	delta_index = (delta_index + 1) % DELTA_BUFFER_SIZE;  // Circular buffer index

	// Compute rolling average of deltas
	float avg_delta = 0;
	for (int i = 0; i < DELTA_BUFFER_SIZE; i++) {
		avg_delta += delta_buffer[i];
	}
	avg_delta /= DELTA_BUFFER_SIZE;  // Take the average

	if (strncmp(state, "LAUNCH_PAD", strlen("LAUNCH_PAD")) == 0){
		if (avg_delta > noise_threshold){
			memset(state, 0, sizeof(state));
			strncpy(state, "ASCENDING", strlen("ASCENDING"));
			store_flash_data();
		}
	}
	else if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
		if (avg_delta < -noise_threshold){
			memset(state, 0, sizeof(state));
			strncpy(state, "APOGEE", strlen("APOGEE"));
			store_flash_data();
		}
	}
	else if (strncmp(state, "APOGEE", strlen("APOGEE")) == 0){
		memset(state, 0, sizeof(state));
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
		apogee_altitude = altitude;
		store_flash_data();
	}
	else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
		if (altitude <= apogee_altitude * 0.75 && !payload_released){
			memset(state, 0, sizeof(state));
			strncpy(state, "PROBE_RELEASE", strlen("PROBE_RELEASE"));
			// Deploy Auto Gyro
			Servo_Open();
			payload_released = true;
			north_cam_on = true;

			turn_stepper_north();
		}
		if (abs(avg_delta) < landing_threshold){
			memset(state, 0, sizeof(state));
			strncpy(state, "LANDED", strlen("LANDED"));
			store_flash_data();
		}
	}
	else if (strncmp(state, "PROBE_RELEASE", strlen("PROBE_RELEASE")) == 0){
		memset(state, 0, sizeof(state));
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
	}
	else if (strncmp(state, "LANDED", strlen("LANDED")) == 0){
		// stop telemetry transmission
//		telemetry_status = 0;
		// Turn off north cam
		north_cam_on = false;
	}

	prev_alt = altitude;
}

void read_transmit_telemetry (){
	if (mode == 'F') {
		read_sensors();
	}

	send_packet();
}

void set_cmd_echo(const char *cmd)
{
	memset(cmd_echo, '\0', sizeof(cmd_echo));
	strncpy(cmd_echo, cmd, strlen(cmd));
}

void handle_command(const char *cmd) {

	// SIM command
	if (strncmp(cmd, sim_command, strlen(sim_command)) == 0) {

		// disable
		if (cmd[13] == 'D'){
			set_cmd_echo("SIMDISABLE");
			mode = 'F';
			sim_enabled = false;
		}

		// enable
		if (cmd[13] == 'E'){
			set_cmd_echo("SIMENABLE");
			sim_enabled = true;
		}

		// activate
		if (cmd[13] == 'A' && sim_enabled == true){
			mode = 'S';
			set_cmd_echo("SIMACTIVATE");
		}

	}

	// SIMP command
	else if (strncmp(cmd, simp_command, strlen(simp_command)) == 0) {
		if (mode == 'S') {
			char pressure_str[7];

			strncpy(pressure_str, &cmd[14], 6);
			pressure_str[6] = '\0';

			// Read sensors, then update the pressure and altitude
			read_sensors();
			pressure = atof(pressure_str)/1000;
			altitude = calculate_altitude(pressure);

			char temp[12] = "SIMP";
			strcat(temp, pressure_str);
			set_cmd_echo(temp);
			memset(pressure_str, '\0', sizeof(pressure_str));
		}
		sim_enabled = false;
	}

	// set time command
	else if (strncmp(cmd, set_time_command, strlen(set_time_command)) == 0) {
		if (cmd[12]=='G') {
			mission_time_hr = (int16_t)gps_time_hr;
			mission_time_min = (int16_t)gps_time_min;
			mission_time_sec = (int16_t)gps_time_sec;
			set_cmd_echo("STGPS");
		}
		else {
			char temp[3];
			memset(temp, 0, sizeof(temp));
			temp[0] = cmd[12];
			temp[1] = cmd[13];
			mission_time_hr = atoi(temp);
			memset(temp, 0, sizeof(temp));
			temp[0] = cmd[15];
			temp[1] = cmd[16];
			mission_time_min = atoi(temp);
			memset(temp, 0, sizeof(temp));
			temp[0] = cmd[18];
			temp[1] = cmd[19];
			mission_time_sec = atoi(temp);
			memset(cmd_echo, '\0', sizeof(cmd_echo));
			snprintf(cmd_echo, 11, "ST%02d:%02d:%02d", mission_time_hr, mission_time_min, mission_time_sec);
		}
		store_flash_data();

	}

	// Calibrate Altitude
	else if (strncmp(cmd, cal_alt_command, strlen(cal_alt_command)) == 0) {
//		altitude_offset -= altitude;
		calibrate_altitude();
		store_flash_data();
		set_cmd_echo("CAL");
		if (strncmp(state, "PRE-LAUNCH", strlen("PRE-LAUNCH")) == 0) {
			memset(state, 0, sizeof(state));
			strncpy(state, "LAUNCH-READY", strlen("LAUNCH-READY"));
		}

		prev_alt = 0;
		reset_delta_buffer();
		read_MPL3115A2();

		sim_enabled = false;
	}

	// Telemetry On
	else if (strncmp(cmd, tel_on_command, strlen(tel_on_command)) == 0) {
		telemetry_status = 1;
		set_cmd_echo("CXON");
		sim_enabled = false;
		flush_PA1010D();
	}

	// Telemetry Off
	else if (strncmp(cmd, tel_off_command, strlen(tel_off_command)) == 0) {
		telemetry_status = 0;
		set_cmd_echo("CXOFF");
		sim_enabled = false;
	}

	// Calibrate compass On
	else if (strncmp(cmd, cal_comp_on_command, strlen(cal_comp_on_command)) == 0) {
		mag_x_offset = 0;
		mag_y_offset = 0;
		mag_z_offset = 0;
		read_MMC5603();

		mag_x_min = mag_x;
		mag_x_max = mag_x;
		mag_y_min = mag_y;
		mag_y_max = mag_y;
		mag_z_min = mag_z;
		mag_z_max = mag_z;
		calibrating_compass = 1;
		set_cmd_echo("CCON");
		sim_enabled = false;
	}

	// Calibrate compass Off
	else if (strncmp(cmd, cal_comp_off_command, strlen(cal_comp_off_command)) == 0) {
		calibrating_compass = 0;

		mag_x_offset = (mag_x_min + mag_x_max) / 2;
		mag_y_offset = (mag_y_min + mag_y_max) / 2;
		mag_z_offset = (mag_z_min + mag_z_max) / 2;

		store_flash_data();
		set_cmd_echo("CCOFF");
		sim_enabled = false;
	}

	// Set Camera North
	else if (strncmp(cmd, set_camera_north_command, strlen(set_camera_north_command)) == 0) {
		// Update variable
		set_cmd_echo("SCN");
		set_stepper_north();
		sim_enabled = false;
	}

	// Activate North Camera
	else if (strncmp(cmd, activate_north_cam_command, strlen(activate_north_cam_command)) == 0) {
		// Update variable
		set_cmd_echo("MECCAMON");
		north_cam_on = true;
		sim_enabled = false;
	}

	// Activate North Camera
	else if (strncmp(cmd, deactivate_north_cam_command, strlen(deactivate_north_cam_command)) == 0) {
		// Update variable
		set_cmd_echo("MECCAMOFF");
		north_cam_on = false;
		sim_enabled = false;
	}

	// Release Payload
	else if (strncmp(cmd, release_payload_command, strlen(release_payload_command)) == 0) {
		// Update variable
		set_cmd_echo("MECPAYLOADON");
		Servo_Open();
		payload_released = true;
		sim_enabled = false;
	}

	// Reset Payload Release
	else if (strncmp(cmd, reset_release_payload_command, strlen(reset_release_payload_command)) == 0) {
		// Update variable
		set_cmd_echo("MECPAYLOADOFF");
		Servo_Close();
		payload_released = false;
		sim_enabled = false;
	}

	// Reset State
	else if (strncmp(cmd, reset_state_command, strlen(reset_state_command)) == 0) {
		// Update variable
		set_cmd_echo("RST");
		reset_state();
		sim_enabled = false;
	}
}

void reset_state(){
	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
	payload_released = false;
	north_cam_on = true;
	prev_alt = altitude;
	reset_delta_buffer();
	telemetry_status = 1;
	memset(state, 0, sizeof(state));
	strncpy(state, "LAUNCH_PAD", strlen("LAUNCH_PAD"));
	apogee_altitude = DEFAULT_APOGEE_ALT;
	store_flash_data();
	msCounter = 0;
}

void initial_state_reset(){
	read_MPL3115A2();
	prev_alt = altitude;
	reset_delta_buffer();

	// Set North Direction Offset
	read_MMC5603();
	set_stepper_north();

	if (altitude > MIN_STATE_MAINTAINED_ALT){
		// Assume there was a power reset during flight. Use configurations from flash
		if (payload_released)
			Servo_Open();
		else
			Servo_Close();

		// Lost Power during flight. Reseting to previous state
		if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
			Servo_Close();
			north_cam_on = false;
		}
		else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
			Servo_Open();
		}

		prev_alt = altitude;
		reset_delta_buffer();
		telemetry_status = 1;
		store_flash_data();
	}
	else{
		reset_state();
	}
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);

	memset(rx_data, 0, sizeof(rx_data));

	if (rx_packet[0] == '~') {
		// Calculate where the comma and checksum should be
		char *comma_pos = &rx_packet[Size - 3];  // Comma is 3 characters from the end (2 for checksum, 1 for comma)

		// Ensure the expected comma is at the right position
		if (*comma_pos == ',') {
			// Null-terminate the data part (exclude comma and checksum)
			*comma_pos = '\0';

			// Extract and convert the received checksum (2 characters after the comma)
			uint8_t received_checksum = (uint8_t)strtol(&rx_packet[Size - 2], NULL, 16);  // Convert checksum to integer
			// Calculate checksum of the data part (after '~' and before comma)
			uint8_t calculated_checksum = calculate_checksum(&rx_packet[1]);
			// Compare calculated checksum with the received one
			if (calculated_checksum == received_checksum && command_ready == false) {
				// Checksum is valid, process the command
				strcpy(command_buffer, &rx_packet[1]);
				command_ready = true;
			}
		}
	}

	// Call function for next packet
	uart_received = HAL_UARTEx_ReceiveToIdle_IT(huart, rx_data, RX_BFR_SIZE);

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C3_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);

  load_flash_data();

  HAL_Delay(100);
  init_sensors();
  HAL_Delay(100);

  init_commands();
  Servo_Init();

  // Initialize Xbee receiving
  HAL_NVIC_EnableIRQ(USART1_IRQn);
  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_data, RX_BFR_SIZE);

  if (isnan(mag_x_offset)){
	  mag_x_offset = -0.1;
	  mag_y_offset = -0.1;
	  mag_z_offset = 0;
	  read_MMC5603();
	}
	if (isnan(altitude_offset)){
	  calibrate_altitude();
	}

  DWT_Init();
  Madgwick_init(&ahrs, 200);

  initial_state_reset();

  north_cam_on = 1;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready){
		  handle_command(command_buffer);
		  command_ready = false;
	  }

	  // Correction of Camera Angle
	  if (north_cam_on){
		  Stepper_Correction();
	  }

	  if (calibrating_compass){
		  calibrate_mmc();
		  if (msCounter >= 250){
			  send_mmc_plot_packet();
			  msCounter -= 250;
		  }
	  }

	  // Happens 1 time per second
	  if (msCounter >= 1000){
		  msCounter -= 1000;

		  if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
			  init_sensors();
		  }

		  // Handle Mission Time
		  mission_time_sec++;
		  if ( mission_time_sec >= 60 ){
			  mission_time_sec -= 60;
			  mission_time_min += 1;
		  }
		  if ( mission_time_min >= 60 ){
			  mission_time_min -= 60;
			  mission_time_hr += 1;
		  }
		  if ( mission_time_hr >= 24 ){
			  mission_time_hr -= 24;
		  }

		  handle_state();

		  // Control Telemetry
		  if (telemetry_status == 1){
			  read_transmit_telemetry();
		  }
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{

  /* USER CODE BEGIN I2C3_Init 0 */

  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
  hi2c3.Init.ClockSpeed = 100000;
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 15;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20000-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Step1_Pin Step2_Pin Step3_Pin Step4_Pin */
  GPIO_InitStruct.Pin = Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : IR_Sensor_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IR_Sensor_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
