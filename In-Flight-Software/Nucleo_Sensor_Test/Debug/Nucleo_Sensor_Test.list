
Nucleo_Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009348  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009518  08009518  0000a518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009900  08009900  0000b228  2**0
                  CONTENTS
  4 .ARM          00000008  08009900  08009900  0000a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009908  08009908  0000b228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009908  08009908  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000228  20000000  08009910  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000228  08009b38  0000b228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08009b38  0000bb7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa5e  00000000  00000000  0000b258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231b  00000000  00000000  0001acb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad5  00000000  00000000  0001ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c20  00000000  00000000  0001e895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ca8  00000000  00000000  0003f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1f83  00000000  00000000  0005115d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001130e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ed0  00000000  00000000  00113124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00117ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009500 	.word	0x08009500

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	08009500 	.word	0x08009500

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <set_gps>:
float shunt_voltage;
float bus_voltage;
float power;
float current;

uint8_t set_gps(char* buf, uint8_t order){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <set_gps+0x18>
		return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e0c8      	b.n	8001152 <set_gps+0x1aa>

	switch(order) {
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b09      	cmp	r3, #9
 8000fc4:	f200 80bd 	bhi.w	8001142 <set_gps+0x19a>
 8000fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd0 <set_gps+0x28>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	08001031 	.word	0x08001031
 8000fd8:	08001085 	.word	0x08001085
 8000fdc:	080010ad 	.word	0x080010ad
 8000fe0:	080010cf 	.word	0x080010cf
 8000fe4:	080010f7 	.word	0x080010f7
 8000fe8:	08001143 	.word	0x08001143
 8000fec:	08001119 	.word	0x08001119
 8000ff0:	08001143 	.word	0x08001143
 8000ff4:	08001129 	.word	0x08001129
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f909 	bl	8000210 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b04      	cmp	r3, #4
 8001002:	d913      	bls.n	800102c <set_gps+0x84>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b47      	cmp	r3, #71	@ 0x47
 800100a:	d10f      	bne.n	800102c <set_gps+0x84>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3302      	adds	r3, #2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b47      	cmp	r3, #71	@ 0x47
 8001014:	d10a      	bne.n	800102c <set_gps+0x84>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3303      	adds	r3, #3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b47      	cmp	r3, #71	@ 0x47
 800101e:	d105      	bne.n	800102c <set_gps+0x84>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3304      	adds	r3, #4
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b41      	cmp	r3, #65	@ 0x41
 8001028:	f000 808d 	beq.w	8001146 <set_gps+0x19e>
			return 1;
 800102c:	2301      	movs	r3, #1
 800102e:	e090      	b.n	8001152 <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f005 f813 	bl	8006068 <atoi>
 8001042:	4603      	mov	r3, r0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b45      	ldr	r3, [pc, #276]	@ (800115c <set_gps+0x1b4>)
 8001048:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3302      	adds	r3, #2
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	b29b      	uxth	r3, r3
 8001052:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f005 f805 	bl	8006068 <atoi>
 800105e:	4603      	mov	r3, r0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b3f      	ldr	r3, [pc, #252]	@ (8001160 <set_gps+0x1b8>)
 8001064:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3304      	adds	r3, #4
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fff7 	bl	8006068 <atoi>
 800107a:	4603      	mov	r3, r0
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <set_gps+0x1bc>)
 8001080:	701a      	strb	r2, [r3, #0]

		break;
 8001082:	e065      	b.n	8001150 <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f004 ffec 	bl	8006062 <atof>
 800108a:	ec51 0b10 	vmov	r0, r1, d0
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <set_gps+0x1c0>)
 8001094:	f7ff fbfa 	bl	800088c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fd84 	bl	8000bac <__aeabi_d2f>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a31      	ldr	r2, [pc, #196]	@ (800116c <set_gps+0x1c4>)
 80010a8:	6013      	str	r3, [r2, #0]
		break;
 80010aa:	e051      	b.n	8001150 <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <set_gps+0x1c8>)
 80010b2:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 80010b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <set_gps+0x1c8>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b53      	cmp	r3, #83	@ 0x53
 80010ba:	d146      	bne.n	800114a <set_gps+0x1a2>
			gps_latitude*= -1;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	@ (800116c <set_gps+0x1c4>)
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	eef1 7a67 	vneg.f32	s15, s15
 80010c6:	4b29      	ldr	r3, [pc, #164]	@ (800116c <set_gps+0x1c4>)
 80010c8:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80010cc:	e03d      	b.n	800114a <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f004 ffc7 	bl	8006062 <atof>
 80010d4:	ec51 0b10 	vmov	r0, r1, d0
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <set_gps+0x1c0>)
 80010de:	f7ff fbd5 	bl	800088c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd5f 	bl	8000bac <__aeabi_d2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a20      	ldr	r2, [pc, #128]	@ (8001174 <set_gps+0x1cc>)
 80010f2:	6013      	str	r3, [r2, #0]
		break;
 80010f4:	e02c      	b.n	8001150 <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <set_gps+0x1d0>)
 80010fc:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 80010fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001178 <set_gps+0x1d0>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b57      	cmp	r3, #87	@ 0x57
 8001104:	d123      	bne.n	800114e <set_gps+0x1a6>
			gps_longitude*= -1;
 8001106:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <set_gps+0x1cc>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eef1 7a67 	vneg.f32	s15, s15
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <set_gps+0x1cc>)
 8001112:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001116:	e01a      	b.n	800114e <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f004 ffa5 	bl	8006068 <atoi>
 800111e:	4603      	mov	r3, r0
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b16      	ldr	r3, [pc, #88]	@ (800117c <set_gps+0x1d4>)
 8001124:	701a      	strb	r2, [r3, #0]
		break;
 8001126:	e013      	b.n	8001150 <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f004 ff9a 	bl	8006062 <atof>
 800112e:	ec53 2b10 	vmov	r2, r3, d0
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd39 	bl	8000bac <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <set_gps+0x1d8>)
 800113e:	6013      	str	r3, [r2, #0]
		break;
 8001140:	e006      	b.n	8001150 <set_gps+0x1a8>
	default:
		break;
 8001142:	bf00      	nop
 8001144:	e004      	b.n	8001150 <set_gps+0x1a8>
		break;
 8001146:	bf00      	nop
 8001148:	e002      	b.n	8001150 <set_gps+0x1a8>
		break;
 800114a:	bf00      	nop
 800114c:	e000      	b.n	8001150 <set_gps+0x1a8>
		break;
 800114e:	bf00      	nop
	}

	return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200007f8 	.word	0x200007f8
 8001160:	200007f9 	.word	0x200007f9
 8001164:	200007fa 	.word	0x200007fa
 8001168:	40590000 	.word	0x40590000
 800116c:	20000800 	.word	0x20000800
 8001170:	20000a13 	.word	0x20000a13
 8001174:	20000804 	.word	0x20000804
 8001178:	20000a14 	.word	0x20000a14
 800117c:	20000808 	.word	0x20000808
 8001180:	200007fc 	.word	0x200007fc

08001184 <parse_nmea>:

bool parse_nmea(char *buf){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e032      	b.n	8001200 <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80011a4:	d123      	bne.n	80011ee <parse_nmea+0x6a>
			if (last != i){
 80011a6:	7bba      	ldrb	r2, [r7, #14]
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d018      	beq.n	80011e0 <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 80011ae:	22ff      	movs	r2, #255	@ 0xff
 80011b0:	2100      	movs	r1, #0
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <parse_nmea+0x90>)
 80011b4:	f005 fef5 	bl	8006fa2 <memset>
				memcpy(parse_buf, &buf[last], i-last);
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	18d1      	adds	r1, r2, r3
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	461a      	mov	r2, r3
 80011c6:	4813      	ldr	r0, [pc, #76]	@ (8001214 <parse_nmea+0x90>)
 80011c8:	f005 ff79 	bl	80070be <memcpy>
				if(set_gps(parse_buf, order)){
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4810      	ldr	r0, [pc, #64]	@ (8001214 <parse_nmea+0x90>)
 80011d2:	f7ff fee9 	bl	8000fa8 <set_gps>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <parse_nmea+0x5c>
					return false;
 80011dc:	2300      	movs	r3, #0
 80011de:	e015      	b.n	800120c <parse_nmea+0x88>
				}
			}
			last = i + 1;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	3301      	adds	r3, #1
 80011e4:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 80011e6:	7b7b      	ldrb	r3, [r7, #13]
 80011e8:	3301      	adds	r3, #1
 80011ea:	737b      	strb	r3, [r7, #13]
 80011ec:	e005      	b.n	80011fa <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80011f8:	d006      	beq.n	8001208 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	d1c9      	bne.n	800119a <parse_nmea+0x16>
 8001206:	e000      	b.n	800120a <parse_nmea+0x86>
			break;
 8001208:	bf00      	nop
		}
	}

	return true;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000914 	.word	0x20000914

08001218 <calculate_altitude>:

float calculate_altitude(float pressure) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + ALTITUDE_OFFSET;
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f9b0 	bl	8000588 <__aeabi_f2d>
 8001228:	a320      	add	r3, pc, #128	@ (adr r3, 80012ac <calculate_altitude+0x94>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fb2d 	bl	800088c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcb7 	bl	8000bac <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80012a8 <calculate_altitude+0x90>
 8001244:	ee00 3a10 	vmov	s0, r3
 8001248:	f007 fd90 	bl	8008d6c <powf>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001258:	ee17 0a90 	vmov	r0, s15
 800125c:	f7ff f994 	bl	8000588 <__aeabi_f2d>
 8001260:	a30f      	add	r3, pc, #60	@ (adr r3, 80012a0 <calculate_altitude+0x88>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9e7 	bl	8000638 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f7ff f827 	bl	80002cc <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fc91 	bl	8000bac <__aeabi_d2f>
 800128a:	4603      	mov	r3, r0
 800128c:	ee07 3a90 	vmov	s15, r3
}
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	f3af 8000 	nop.w
 80012a0:	a3d70a3d 	.word	0xa3d70a3d
 80012a4:	40e5a558 	.word	0x40e5a558
 80012a8:	3e42d45b 	.word	0x3e42d45b
 80012ac:	2f1a9fbe 	.word	0x2f1a9fbe
 80012b0:	405954dd 	.word	0x405954dd
 80012b4:	00000000 	.word	0x00000000

080012b8 <read_MMC5603>:

void read_MMC5603(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	if (HAL_I2C_Master_Transmit(&hi2c2, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2301      	movs	r3, #1
 80012cc:	2160      	movs	r1, #96	@ 0x60
 80012ce:	4848      	ldr	r0, [pc, #288]	@ (80013f0 <read_MMC5603+0x138>)
 80012d0:	f001 fcd0 	bl	8002c74 <HAL_I2C_Master_Transmit>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d17f      	bne.n	80013da <read_MMC5603+0x122>
		// Handle transmission error
		return;
	}

	HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 f8ce 	bl	800247c <HAL_Delay>

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c2, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 80012e0:	f107 0208 	add.w	r2, r7, #8
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2309      	movs	r3, #9
 80012ec:	2160      	movs	r1, #96	@ 0x60
 80012ee:	4840      	ldr	r0, [pc, #256]	@ (80013f0 <read_MMC5603+0x138>)
 80012f0:	f001 fdbe 	bl	8002e70 <HAL_I2C_Master_Receive>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d171      	bne.n	80013de <read_MMC5603+0x126>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 80012fa:	7a3b      	ldrb	r3, [r7, #8]
 80012fc:	031a      	lsls	r2, r3, #12
 80012fe:	7a7b      	ldrb	r3, [r7, #9]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	4313      	orrs	r3, r2
 8001304:	7bba      	ldrb	r2, [r7, #14]
 8001306:	0912      	lsrs	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	4313      	orrs	r3, r2
 800130c:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 800130e:	7abb      	ldrb	r3, [r7, #10]
 8001310:	031a      	lsls	r2, r3, #12
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4313      	orrs	r3, r2
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	0912      	lsrs	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	031a      	lsls	r2, r3, #12
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4313      	orrs	r3, r2
 800132c:	7c3a      	ldrb	r2, [r7, #16]
 800132e:	0912      	lsrs	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4313      	orrs	r3, r2
 8001334:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 800133c:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8001344:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 800134c:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001358:	ee17 0a90 	vmov	r0, s15
 800135c:	f7ff f914 	bl	8000588 <__aeabi_f2d>
 8001360:	a321      	add	r3, pc, #132	@ (adr r3, 80013e8 <read_MMC5603+0x130>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f967 	bl	8000638 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc1b 	bl	8000bac <__aeabi_d2f>
 8001376:	4603      	mov	r3, r0
 8001378:	4a1e      	ldr	r2, [pc, #120]	@ (80013f4 <read_MMC5603+0x13c>)
 800137a:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001386:	ee17 0a90 	vmov	r0, s15
 800138a:	f7ff f8fd 	bl	8000588 <__aeabi_f2d>
 800138e:	a316      	add	r3, pc, #88	@ (adr r3, 80013e8 <read_MMC5603+0x130>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7ff f950 	bl	8000638 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fc04 	bl	8000bac <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a14      	ldr	r2, [pc, #80]	@ (80013f8 <read_MMC5603+0x140>)
 80013a8:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f8e6 	bl	8000588 <__aeabi_f2d>
 80013bc:	a30a      	add	r3, pc, #40	@ (adr r3, 80013e8 <read_MMC5603+0x130>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f939 	bl	8000638 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fbed 	bl	8000bac <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <read_MMC5603+0x144>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e002      	b.n	80013e0 <read_MMC5603+0x128>
		return;
 80013da:	bf00      	nop
 80013dc:	e000      	b.n	80013e0 <read_MMC5603+0x128>
		return;
 80013de:	bf00      	nop
}
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013ec:	3f10624d 	.word	0x3f10624d
 80013f0:	20000244 	.word	0x20000244
 80013f4:	200007ec 	.word	0x200007ec
 80013f8:	200007f0 	.word	0x200007f0
 80013fc:	200007f4 	.word	0x200007f4

08001400 <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2309      	movs	r3, #9
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2201      	movs	r2, #1
 8001418:	21c0      	movs	r1, #192	@ 0xc0
 800141a:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <read_MPL3115A2+0xc8>)
 800141c:	f002 f854 	bl	80034c8 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8001420:	793b      	ldrb	r3, [r7, #4]
 8001422:	041a      	lsls	r2, r3, #16
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	4313      	orrs	r3, r2
 800142a:	79ba      	ldrb	r2, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff f884 	bl	8000544 <__aeabi_ui2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <read_MPL3115A2+0xcc>)
 8001442:	f7ff fa23 	bl	800088c <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <read_MPL3115A2+0xd0>)
 8001454:	f7ff fa1a 	bl	800088c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f7ff fba4 	bl	8000bac <__aeabi_d2f>
 8001464:	4603      	mov	r3, r0
 8001466:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <read_MPL3115A2+0xd4>)
 8001468:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	7a3b      	ldrb	r3, [r7, #8]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8001478:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800147c:	111b      	asrs	r3, r3, #4
 800147e:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8001480:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f86d 	bl	8000564 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <read_MPL3115A2+0xd8>)
 8001490:	f7ff f9fc 	bl	800088c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb86 	bl	8000bac <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <read_MPL3115A2+0xdc>)
 80014a4:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <read_MPL3115A2+0xd4>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eeb0 0a67 	vmov.f32	s0, s15
 80014b0:	f7ff feb2 	bl	8001218 <calculate_altitude>
 80014b4:	eef0 7a40 	vmov.f32	s15, s0
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <read_MPL3115A2+0xe0>)
 80014ba:	edc3 7a00 	vstr	s15, [r3]
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000244 	.word	0x20000244
 80014cc:	40100000 	.word	0x40100000
 80014d0:	408f4000 	.word	0x408f4000
 80014d4:	200007cc 	.word	0x200007cc
 80014d8:	40300000 	.word	0x40300000
 80014dc:	200007c8 	.word	0x200007c8
 80014e0:	200007c4 	.word	0x200007c4
 80014e4:	00000000 	.word	0x00000000

080014e8 <read_MPU6050>:

void read_MPU6050(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 80014ee:	233b      	movs	r3, #59	@ 0x3b
 80014f0:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 80014f2:	2343      	movs	r3, #67	@ 0x43
 80014f4:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDRESS, 3, 5);
 8001502:	2305      	movs	r3, #5
 8001504:	2203      	movs	r2, #3
 8001506:	21d0      	movs	r1, #208	@ 0xd0
 8001508:	4871      	ldr	r0, [pc, #452]	@ (80016d0 <read_MPU6050+0x1e8>)
 800150a:	f002 fa0f 	bl	800392c <HAL_I2C_IsDeviceReady>
 800150e:	4603      	mov	r3, r0
 8001510:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 8001512:	7c7b      	ldrb	r3, [r7, #17]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 80d2 	bne.w	80016be <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &imu_addr, 1, 100);
 800151a:	f107 0209 	add.w	r2, r7, #9
 800151e:	2364      	movs	r3, #100	@ 0x64
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	2301      	movs	r3, #1
 8001524:	21d0      	movs	r1, #208	@ 0xd0
 8001526:	486a      	ldr	r0, [pc, #424]	@ (80016d0 <read_MPU6050+0x1e8>)
 8001528:	f001 fba4 	bl	8002c74 <HAL_I2C_Master_Transmit>
 800152c:	4603      	mov	r3, r0
 800152e:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8001530:	7c7b      	ldrb	r3, [r7, #17]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d15a      	bne.n	80015ec <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8001536:	463a      	mov	r2, r7
 8001538:	2364      	movs	r3, #100	@ 0x64
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2306      	movs	r3, #6
 800153e:	21d0      	movs	r1, #208	@ 0xd0
 8001540:	4863      	ldr	r0, [pc, #396]	@ (80016d0 <read_MPU6050+0x1e8>)
 8001542:	f001 fc95 	bl	8002e70 <HAL_I2C_Master_Receive>
 8001546:	4603      	mov	r3, r0
 8001548:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800154a:	7c7b      	ldrb	r3, [r7, #17]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d14d      	bne.n	80015ec <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 8001550:	783b      	ldrb	r3, [r7, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	b21b      	sxth	r3, r3
 8001568:	4313      	orrs	r3, r2
 800156a:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 800156c:	793b      	ldrb	r3, [r7, #4]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	797b      	ldrb	r3, [r7, #5]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fff0 	bl	8000564 <__aeabi_i2d>
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b52      	ldr	r3, [pc, #328]	@ (80016d4 <read_MPU6050+0x1ec>)
 800158a:	f7ff f97f 	bl	800088c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fb09 	bl	8000bac <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4a4e      	ldr	r2, [pc, #312]	@ (80016d8 <read_MPU6050+0x1f0>)
 800159e:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 80015a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffdd 	bl	8000564 <__aeabi_i2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <read_MPU6050+0x1ec>)
 80015b0:	f7ff f96c 	bl	800088c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faf6 	bl	8000bac <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a46      	ldr	r2, [pc, #280]	@ (80016dc <read_MPU6050+0x1f4>)
 80015c4:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 80015c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffca 	bl	8000564 <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b3f      	ldr	r3, [pc, #252]	@ (80016d4 <read_MPU6050+0x1ec>)
 80015d6:	f7ff f959 	bl	800088c <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fae3 	bl	8000bac <__aeabi_d2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a3d      	ldr	r2, [pc, #244]	@ (80016e0 <read_MPU6050+0x1f8>)
 80015ea:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	21d0      	movs	r1, #208	@ 0xd0
 80015f8:	4835      	ldr	r0, [pc, #212]	@ (80016d0 <read_MPU6050+0x1e8>)
 80015fa:	f001 fb3b 	bl	8002c74 <HAL_I2C_Master_Transmit>
 80015fe:	4603      	mov	r3, r0
 8001600:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8001602:	7c7b      	ldrb	r3, [r7, #17]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d15a      	bne.n	80016be <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8001608:	463a      	mov	r2, r7
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2306      	movs	r3, #6
 8001610:	21d0      	movs	r1, #208	@ 0xd0
 8001612:	482f      	ldr	r0, [pc, #188]	@ (80016d0 <read_MPU6050+0x1e8>)
 8001614:	f001 fc2c 	bl	8002e70 <HAL_I2C_Master_Receive>
 8001618:	4603      	mov	r3, r0
 800161a:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800161c:	7c7b      	ldrb	r3, [r7, #17]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d14d      	bne.n	80016be <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 8001622:	783b      	ldrb	r3, [r7, #0]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 800163e:	793b      	ldrb	r3, [r7, #4]
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	797b      	ldrb	r3, [r7, #5]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 800164c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff87 	bl	8000564 <__aeabi_i2d>
 8001656:	a31c      	add	r3, pc, #112	@ (adr r3, 80016c8 <read_MPU6050+0x1e0>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f916 	bl	800088c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff faa0 	bl	8000bac <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <read_MPU6050+0x1fc>)
 8001670:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 8001672:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff74 	bl	8000564 <__aeabi_i2d>
 800167c:	a312      	add	r3, pc, #72	@ (adr r3, 80016c8 <read_MPU6050+0x1e0>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7ff f903 	bl	800088c <__aeabi_ddiv>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa8d 	bl	8000bac <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <read_MPU6050+0x200>)
 8001696:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff61 	bl	8000564 <__aeabi_i2d>
 80016a2:	a309      	add	r3, pc, #36	@ (adr r3, 80016c8 <read_MPU6050+0x1e0>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7ff f8f0 	bl	800088c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa7a 	bl	8000bac <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a0c      	ldr	r2, [pc, #48]	@ (80016ec <read_MPU6050+0x204>)
 80016bc:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40606000 	.word	0x40606000
 80016d0:	20000244 	.word	0x20000244
 80016d4:	40d00000 	.word	0x40d00000
 80016d8:	200007e0 	.word	0x200007e0
 80016dc:	200007e4 	.word	0x200007e4
 80016e0:	200007e8 	.word	0x200007e8
 80016e4:	200007d4 	.word	0x200007d4
 80016e8:	200007d8 	.word	0x200007d8
 80016ec:	200007dc 	.word	0x200007dc

080016f0 <read_PA1010D>:

void read_PA1010D(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af02      	add	r7, sp, #8
	uint8_t pa1010d_i;
	uint8_t pa1010d_bytebuf;

	/* PA1010D (GPS) */
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	e015      	b.n	8001728 <read_PA1010D+0x38>
		pa_ret = HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 100);
 80016fc:	1dba      	adds	r2, r7, #6
 80016fe:	2364      	movs	r3, #100	@ 0x64
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2301      	movs	r3, #1
 8001704:	2120      	movs	r1, #32
 8001706:	480e      	ldr	r0, [pc, #56]	@ (8001740 <read_PA1010D+0x50>)
 8001708:	f001 fbb2 	bl	8002e70 <HAL_I2C_Master_Receive>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <read_PA1010D+0x54>)
 8001712:	701a      	strb	r2, [r3, #0]
		if (pa1010d_bytebuf == '$'){
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	2b24      	cmp	r3, #36	@ 0x24
 8001718:	d00a      	beq.n	8001730 <read_PA1010D+0x40>
			break;
		}
		pa_buf[pa1010d_i] = pa1010d_bytebuf;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	79b9      	ldrb	r1, [r7, #6]
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <read_PA1010D+0x58>)
 8001720:	54d1      	strb	r1, [r2, r3]
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2bff      	cmp	r3, #255	@ 0xff
 800172c:	d1e6      	bne.n	80016fc <read_PA1010D+0xc>
 800172e:	e000      	b.n	8001732 <read_PA1010D+0x42>
			break;
 8001730:	bf00      	nop
	}
	parse_nmea(pa_buf);
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <read_PA1010D+0x58>)
 8001734:	f7ff fd26 	bl	8001184 <parse_nmea>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000244 	.word	0x20000244
 8001744:	20000809 	.word	0x20000809
 8001748:	2000080c 	.word	0x2000080c

0800174c <read_INA219>:

void read_INA219(void) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af02      	add	r7, sp, #8
	/* INA219 (CURRENT/VOLTAGE) */
	uint8_t bus_add = 0x02; // need to use separate registers for everything
 8001752:	2302      	movs	r3, #2
 8001754:	71fb      	strb	r3, [r7, #7]

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c2, INA219_ADDRESS, 3, 5);
 8001756:	2305      	movs	r3, #5
 8001758:	2203      	movs	r2, #3
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4824      	ldr	r0, [pc, #144]	@ (80017f0 <read_INA219+0xa4>)
 800175e:	f002 f8e5 	bl	800392c <HAL_I2C_IsDeviceReady>
 8001762:	4603      	mov	r3, r0
 8001764:	461a      	mov	r2, r3
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <read_INA219+0xa8>)
 8001768:	701a      	strb	r2, [r3, #0]
	if (ina_ret == HAL_OK) {
 800176a:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <read_INA219+0xa8>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13a      	bne.n	80017e8 <read_INA219+0x9c>
		ina_ret = HAL_I2C_Master_Transmit(&hi2c2, INA219_ADDRESS, &bus_add, 1, 100);
 8001772:	1dfa      	adds	r2, r7, #7
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2301      	movs	r3, #1
 800177a:	2180      	movs	r1, #128	@ 0x80
 800177c:	481c      	ldr	r0, [pc, #112]	@ (80017f0 <read_INA219+0xa4>)
 800177e:	f001 fa79 	bl	8002c74 <HAL_I2C_Master_Transmit>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <read_INA219+0xa8>)
 8001788:	701a      	strb	r2, [r3, #0]
		if (ina_ret == HAL_OK) {
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <read_INA219+0xa8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d12a      	bne.n	80017e8 <read_INA219+0x9c>
			HAL_I2C_Master_Receive(&hi2c2, INA219_ADDRESS, ina_buf, 2, 10);
 8001792:	230a      	movs	r3, #10
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2302      	movs	r3, #2
 8001798:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <read_INA219+0xac>)
 800179a:	2180      	movs	r1, #128	@ 0x80
 800179c:	4814      	ldr	r0, [pc, #80]	@ (80017f0 <read_INA219+0xa4>)
 800179e:	f001 fb67 	bl	8002e70 <HAL_I2C_Master_Receive>

			//raw_shunt_voltage = abs((int16_t)(ina_buf[0] << 8 | ina_buf[1]));
			raw_bus_voltage = (int16_t)(ina_buf[0] << 8 | ina_buf [1]);
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <read_INA219+0xac>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	b21a      	sxth	r2, r3
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <read_INA219+0xac>)
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <read_INA219+0xb0>)
 80017b6:	801a      	strh	r2, [r3, #0]
			//raw_power = (int16_t)(ina_buf[4] << 8 | ina_buf [5]);
			//raw_current = (int16_t)(ina_buf[6] << 8 | ina_buf [7]);

			//shunt_voltage = raw_shunt_voltage*10.0;
			bus_voltage = raw_bus_voltage/1600.0;
 80017b8:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <read_INA219+0xb0>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fed0 	bl	8000564 <__aeabi_i2d>
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <read_INA219+0xb4>)
 80017ca:	f7ff f85f 	bl	800088c <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9e9 	bl	8000bac <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <read_INA219+0xb8>)
 80017de:	6013      	str	r3, [r2, #0]
			//power = raw_power*20/32768.0;
			//current = raw_current/32768.0;

			voltage = bus_voltage;
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <read_INA219+0xb8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <read_INA219+0xbc>)
 80017e6:	6013      	str	r3, [r2, #0]
		}

	}

}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000244 	.word	0x20000244
 80017f4:	20000a15 	.word	0x20000a15
 80017f8:	20000a18 	.word	0x20000a18
 80017fc:	20000a20 	.word	0x20000a20
 8001800:	40990000 	.word	0x40990000
 8001804:	20000a24 	.word	0x20000a24
 8001808:	200007d0 	.word	0x200007d0

0800180c <init_MMC5603>:

void init_MMC5603(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 8001812:	2364      	movs	r3, #100	@ 0x64
 8001814:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 8001816:	2380      	movs	r3, #128	@ 0x80
 8001818:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 800181e:	2310      	movs	r3, #16
 8001820:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2301      	movs	r3, #1
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	1d7b      	adds	r3, r7, #5
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2301      	movs	r3, #1
 8001832:	221c      	movs	r2, #28
 8001834:	2160      	movs	r1, #96	@ 0x60
 8001836:	482f      	ldr	r0, [pc, #188]	@ (80018f4 <init_MMC5603+0xe8>)
 8001838:	f001 fd4c 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 800183c:	2014      	movs	r0, #20
 800183e:	f000 fe1d 	bl	800247c <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 8001842:	2308      	movs	r3, #8
 8001844:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2301      	movs	r3, #1
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	1cfb      	adds	r3, r7, #3
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2301      	movs	r3, #1
 8001856:	221b      	movs	r2, #27
 8001858:	2160      	movs	r1, #96	@ 0x60
 800185a:	4826      	ldr	r0, [pc, #152]	@ (80018f4 <init_MMC5603+0xe8>)
 800185c:	f001 fd3a 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001860:	2001      	movs	r0, #1
 8001862:	f000 fe0b 	bl	800247c <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 8001866:	2310      	movs	r3, #16
 8001868:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	2301      	movs	r3, #1
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	1cbb      	adds	r3, r7, #2
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	221b      	movs	r2, #27
 800187c:	2160      	movs	r1, #96	@ 0x60
 800187e:	481d      	ldr	r0, [pc, #116]	@ (80018f4 <init_MMC5603+0xe8>)
 8001880:	f001 fd28 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fdf9 	bl	800247c <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2301      	movs	r3, #1
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	221a      	movs	r2, #26
 800189c:	2160      	movs	r1, #96	@ 0x60
 800189e:	4815      	ldr	r0, [pc, #84]	@ (80018f4 <init_MMC5603+0xe8>)
 80018a0:	f001 fd18 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80018a4:	200a      	movs	r0, #10
 80018a6:	f000 fde9 	bl	800247c <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	221b      	movs	r2, #27
 80018bc:	2160      	movs	r1, #96	@ 0x60
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <init_MMC5603+0xe8>)
 80018c0:	f001 fd08 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80018c4:	200a      	movs	r0, #10
 80018c6:	f000 fdd9 	bl	800247c <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	2301      	movs	r3, #1
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	221d      	movs	r2, #29
 80018dc:	2160      	movs	r1, #96	@ 0x60
 80018de:	4805      	ldr	r0, [pc, #20]	@ (80018f4 <init_MMC5603+0xe8>)
 80018e0:	f001 fcf8 	bl	80032d4 <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 80018e4:	200a      	movs	r0, #10
 80018e6:	f000 fdc9 	bl	800247c <HAL_Delay>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000244 	.word	0x20000244

080018f8 <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2301      	movs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	220c      	movs	r2, #12
 8001914:	21c0      	movs	r1, #192	@ 0xc0
 8001916:	480c      	ldr	r0, [pc, #48]	@ (8001948 <init_MPL3115A2+0x50>)
 8001918:	f001 fdd6 	bl	80034c8 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2bc4      	cmp	r3, #196	@ 0xc4
 8001920:	d10e      	bne.n	8001940 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 8001922:	2339      	movs	r3, #57	@ 0x39
 8001924:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	9302      	str	r3, [sp, #8]
 800192c:	2301      	movs	r3, #1
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	2226      	movs	r2, #38	@ 0x26
 8001938:	21c0      	movs	r1, #192	@ 0xc0
 800193a:	4803      	ldr	r0, [pc, #12]	@ (8001948 <init_MPL3115A2+0x50>)
 800193c:	f001 fcca 	bl	80032d4 <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000244 	.word	0x20000244

0800194c <init_MPU6050>:

void init_MPU6050(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 8001956:	2307      	movs	r3, #7
 8001958:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 800195a:	2300      	movs	r3, #0
 800195c:	717b      	strb	r3, [r7, #5]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 800195e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2301      	movs	r3, #1
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2301      	movs	r3, #1
 800196e:	226b      	movs	r2, #107	@ 0x6b
 8001970:	21d0      	movs	r1, #208	@ 0xd0
 8001972:	4817      	ldr	r0, [pc, #92]	@ (80019d0 <init_MPU6050+0x84>)
 8001974:	f001 fcae 	bl	80032d4 <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 8001978:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	1dbb      	adds	r3, r7, #6
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	2219      	movs	r2, #25
 800198a:	21d0      	movs	r1, #208	@ 0xd0
 800198c:	4810      	ldr	r0, [pc, #64]	@ (80019d0 <init_MPU6050+0x84>)
 800198e:	f001 fca1 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	2301      	movs	r3, #1
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	1d7b      	adds	r3, r7, #5
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2301      	movs	r3, #1
 80019a2:	221b      	movs	r2, #27
 80019a4:	21d0      	movs	r1, #208	@ 0xd0
 80019a6:	480a      	ldr	r0, [pc, #40]	@ (80019d0 <init_MPU6050+0x84>)
 80019a8:	f001 fc94 	bl	80032d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 80019ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2301      	movs	r3, #1
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	1d7b      	adds	r3, r7, #5
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	221c      	movs	r2, #28
 80019be:	21d0      	movs	r1, #208	@ 0xd0
 80019c0:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <init_MPU6050+0x84>)
 80019c2:	f001 fc87 	bl	80032d4 <HAL_I2C_Mem_Write>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000244 	.word	0x20000244

080019d4 <init_PA1010D>:

void init_PA1010D(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
	uint8_t pa1010d_bytebuf;

//	pa_init_ret[0] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
	pa_init_ret[1] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_INIT, strlen( (char *)PA1010D_INIT), 1000);
 80019da:	4833      	ldr	r0, [pc, #204]	@ (8001aa8 <init_PA1010D+0xd4>)
 80019dc:	f7fe fc18 	bl	8000210 <strlen>
 80019e0:	4603      	mov	r3, r0
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <init_PA1010D+0xd4>)
 80019ec:	2120      	movs	r1, #32
 80019ee:	482f      	ldr	r0, [pc, #188]	@ (8001aac <init_PA1010D+0xd8>)
 80019f0:	f001 f940 	bl	8002c74 <HAL_I2C_Master_Transmit>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <init_PA1010D+0xdc>)
 80019fa:	705a      	strb	r2, [r3, #1]
	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
 80019fc:	482d      	ldr	r0, [pc, #180]	@ (8001ab4 <init_PA1010D+0xe0>)
 80019fe:	f7fe fc07 	bl	8000210 <strlen>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	4a29      	ldr	r2, [pc, #164]	@ (8001ab4 <init_PA1010D+0xe0>)
 8001a0e:	2120      	movs	r1, #32
 8001a10:	4826      	ldr	r0, [pc, #152]	@ (8001aac <init_PA1010D+0xd8>)
 8001a12:	f001 f92f 	bl	8002c74 <HAL_I2C_Master_Transmit>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <init_PA1010D+0xdc>)
 8001a1c:	709a      	strb	r2, [r3, #2]
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);
	pa_init_ret[4] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 8001a1e:	4826      	ldr	r0, [pc, #152]	@ (8001ab8 <init_PA1010D+0xe4>)
 8001a20:	f7fe fbf6 	bl	8000210 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	4a22      	ldr	r2, [pc, #136]	@ (8001ab8 <init_PA1010D+0xe4>)
 8001a30:	2120      	movs	r1, #32
 8001a32:	481e      	ldr	r0, [pc, #120]	@ (8001aac <init_PA1010D+0xd8>)
 8001a34:	f001 f91e 	bl	8002c74 <HAL_I2C_Master_Transmit>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <init_PA1010D+0xdc>)
 8001a3e:	711a      	strb	r2, [r3, #4]

	//Wait for stabilization
	for(int j=0; j<10; j++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e028      	b.n	8001a98 <init_PA1010D+0xc4>
		for(int i=0; i<255; i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	e013      	b.n	8001a74 <init_PA1010D+0xa0>
			HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 10);
 8001a4c:	1dfa      	adds	r2, r7, #7
 8001a4e:	230a      	movs	r3, #10
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	2120      	movs	r1, #32
 8001a56:	4815      	ldr	r0, [pc, #84]	@ (8001aac <init_PA1010D+0xd8>)
 8001a58:	f001 fa0a 	bl	8002e70 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b24      	cmp	r3, #36	@ 0x24
 8001a60:	d00c      	beq.n	8001a7c <init_PA1010D+0xa8>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 8001a62:	79f9      	ldrb	r1, [r7, #7]
 8001a64:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <init_PA1010D+0xe8>)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2bfe      	cmp	r3, #254	@ 0xfe
 8001a78:	dde8      	ble.n	8001a4c <init_PA1010D+0x78>
 8001a7a:	e000      	b.n	8001a7e <init_PA1010D+0xaa>
				break;
 8001a7c:	bf00      	nop
		}
		if (j>5){
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b05      	cmp	r3, #5
 8001a82:	dd02      	ble.n	8001a8a <init_PA1010D+0xb6>
			parse_nmea(pa_buf);
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <init_PA1010D+0xe8>)
 8001a86:	f7ff fb7d 	bl	8001184 <parse_nmea>
		}
		HAL_Delay(500);
 8001a8a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a8e:	f000 fcf5 	bl	800247c <HAL_Delay>
	for(int j=0; j<10; j++){
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b09      	cmp	r3, #9
 8001a9c:	ddd3      	ble.n	8001a46 <init_PA1010D+0x72>
	}
}
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000010 	.word	0x20000010
 8001aac:	20000244 	.word	0x20000244
 8001ab0:	2000090c 	.word	0x2000090c
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000020 	.word	0x20000020
 8001abc:	2000080c 	.word	0x2000080c

08001ac0 <init_INA219>:

void init_INA219(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af04      	add	r7, sp, #16
	uint8_t ina_config[2] = {0b00000001, 0b00011101};
 8001ac6:	f641 5301 	movw	r3, #7425	@ 0x1d01
 8001aca:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);
 8001acc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad0:	9302      	str	r3, [sp, #8]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	2205      	movs	r2, #5
 8001ade:	2180      	movs	r1, #128	@ 0x80
 8001ae0:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <init_INA219+0x30>)
 8001ae2:	f001 fbf7 	bl	80032d4 <HAL_I2C_Mem_Write>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000244 	.word	0x20000244

08001af4 <read_sensors>:

void read_sensors(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	read_MPL3115A2(); // Temperature/ Pressure
 8001af8:	f7ff fc82 	bl	8001400 <read_MPL3115A2>
	read_MMC5603(); // Magnetic Field
 8001afc:	f7ff fbdc 	bl	80012b8 <read_MMC5603>
	read_MPU6050(); // Accel/ tilt
 8001b00:	f7ff fcf2 	bl	80014e8 <read_MPU6050>
	read_PA1010D(); // GPS
 8001b04:	f7ff fdf4 	bl	80016f0 <read_PA1010D>
	read_INA219(); // Voltage
 8001b08:	f7ff fe20 	bl	800174c <read_INA219>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <init_sensors>:

void init_sensors()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	init_MPL3115A2();
 8001b14:	f7ff fef0 	bl	80018f8 <init_MPL3115A2>
	init_MMC5603();
 8001b18:	f7ff fe78 	bl	800180c <init_MMC5603>
	init_MPU6050();
 8001b1c:	f7ff ff16 	bl	800194c <init_MPU6050>
	init_PA1010D();
 8001b20:	f7ff ff58 	bl	80019d4 <init_PA1010D>
	init_INA219();
 8001b24:	f7ff ffcc 	bl	8001ac0 <init_INA219>
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f000 fc32 	bl	8002398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b34:	f000 f812 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b38:	f000 f904 	bl	8001d44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b3c:	f000 f8a8 	bl	8001c90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b40:	f000 f8d0 	bl	8001ce4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8001b44:	f000 f876 	bl	8001c34 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 8001b48:	f7ff ffe2 	bl	8001b10 <init_sensors>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  read_sensors();
 8001b4c:	f7ff ffd2 	bl	8001af4 <read_sensors>

	  HAL_Delay(1000);
 8001b50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b54:	f000 fc92 	bl	800247c <HAL_Delay>
	  read_sensors();
 8001b58:	bf00      	nop
 8001b5a:	e7f7      	b.n	8001b4c <main+0x20>

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b094      	sub	sp, #80	@ 0x50
 8001b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	2234      	movs	r2, #52	@ 0x34
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f005 fa19 	bl	8006fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <SystemClock_Config+0xd0>)
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <SystemClock_Config+0xd4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bbc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001bc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8001bd0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001bda:	2308      	movs	r3, #8
 8001bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 f9fa 	bl	8004fe0 <HAL_RCC_OscConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bf2:	f000 f973 	bl	8001edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	2103      	movs	r1, #3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fdf6 	bl	8004804 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c1e:	f000 f95d 	bl	8001edc <Error_Handler>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3750      	adds	r7, #80	@ 0x50
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40007000 	.word	0x40007000

08001c34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c3a:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <MX_I2C2_Init+0x54>)
 8001c3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c40:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <MX_I2C2_Init+0x58>)
 8001c42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <MX_I2C2_Init+0x50>)
 8001c72:	f000 febb 	bl	80029ec <HAL_I2C_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c7c:	f000 f92e 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000244 	.word	0x20000244
 8001c88:	40005800 	.word	0x40005800
 8001c8c:	000186a0 	.word	0x000186a0

08001c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	@ (8001ce0 <MX_USART3_UART_Init+0x50>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <MX_USART3_UART_Init+0x4c>)
 8001cc8:	f003 fc0e 	bl	80054e8 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cd2:	f000 f903 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000298 	.word	0x20000298
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ce8:	4b15      	ldr	r3, [pc, #84]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cf2:	2206      	movs	r2, #6
 8001cf4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d04:	2202      	movs	r2, #2
 8001d06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001d2e:	f002 fc2f 	bl	8004590 <HAL_PCD_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001d38:	f000 f8d0 	bl	8001edc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200002e0 	.word	0x200002e0

08001d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	@ 0x30
 8001d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
 8001d58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a5a      	ldr	r2, [pc, #360]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b58      	ldr	r3, [pc, #352]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a53      	ldr	r2, [pc, #332]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d80:	f043 0320 	orr.w	r3, r3, #32
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b51      	ldr	r3, [pc, #324]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0320 	and.w	r3, r3, #32
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b4d      	ldr	r3, [pc, #308]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b46      	ldr	r3, [pc, #280]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a45      	ldr	r2, [pc, #276]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b3f      	ldr	r3, [pc, #252]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b38      	ldr	r3, [pc, #224]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a37      	ldr	r2, [pc, #220]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b35      	ldr	r3, [pc, #212]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b31      	ldr	r3, [pc, #196]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a30      	ldr	r2, [pc, #192]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b2e      	ldr	r3, [pc, #184]	@ (8001ecc <MX_GPIO_Init+0x188>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001e24:	482a      	ldr	r0, [pc, #168]	@ (8001ed0 <MX_GPIO_Init+0x18c>)
 8001e26:	f000 fdc7 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2140      	movs	r1, #64	@ 0x40
 8001e2e:	4829      	ldr	r0, [pc, #164]	@ (8001ed4 <MX_GPIO_Init+0x190>)
 8001e30:	f000 fdc2 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4823      	ldr	r0, [pc, #140]	@ (8001ed8 <MX_GPIO_Init+0x194>)
 8001e4c:	f000 fc20 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB7 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7;
 8001e50:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	4819      	ldr	r0, [pc, #100]	@ (8001ed0 <MX_GPIO_Init+0x18c>)
 8001e6a:	f000 fc11 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e6e:	2340      	movs	r3, #64	@ 0x40
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	4813      	ldr	r0, [pc, #76]	@ (8001ed4 <MX_GPIO_Init+0x190>)
 8001e86:	f000 fc03 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <MX_GPIO_Init+0x190>)
 8001e9e:	f000 fbf7 	bl	8002690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4804      	ldr	r0, [pc, #16]	@ (8001ed0 <MX_GPIO_Init+0x18c>)
 8001ec0:	f000 fbe6 	bl	8002690 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec4:	bf00      	nop
 8001ec6:	3730      	adds	r7, #48	@ 0x30
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40020800 	.word	0x40020800

08001edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <Error_Handler+0x8>

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b0d      	ldr	r3, [pc, #52]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	4a08      	ldr	r2, [pc, #32]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_MspInit+0x4c>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	@ (8001fbc <HAL_I2C_MspInit+0x84>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d12b      	bne.n	8001fb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f64:	f043 0320 	orr.w	r3, r3, #32
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f76:	2303      	movs	r3, #3
 8001f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f7a:	2312      	movs	r3, #18
 8001f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f86:	2304      	movs	r3, #4
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480c      	ldr	r0, [pc, #48]	@ (8001fc4 <HAL_I2C_MspInit+0x8c>)
 8001f92:	f000 fb7d 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b09      	ldr	r3, [pc, #36]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_I2C_MspInit+0x88>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40005800 	.word	0x40005800
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40021400 	.word	0x40021400

08001fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_UART_MspInit+0x84>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12c      	bne.n	8002044 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <HAL_UART_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a10      	ldr	r2, [pc, #64]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <HAL_UART_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002022:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002034:	2307      	movs	r3, #7
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <HAL_UART_MspInit+0x8c>)
 8002040:	f000 fb26 	bl	8002690 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	@ 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40004800 	.word	0x40004800
 8002050:	40023800 	.word	0x40023800
 8002054:	40020c00 	.word	0x40020c00

08002058 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b098      	sub	sp, #96	@ 0x60
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	223c      	movs	r2, #60	@ 0x3c
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f004 ff92 	bl	8006fa2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002086:	d14d      	bne.n	8002124 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002088:	2320      	movs	r3, #32
 800208a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800208c:	2300      	movs	r3, #0
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fdd5 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80020a0:	f7ff ff1c 	bl	8001edc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	4a1f      	ldr	r2, [pc, #124]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80020c0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80020c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020d2:	230a      	movs	r3, #10
 80020d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020da:	4619      	mov	r1, r3
 80020dc:	4814      	ldr	r0, [pc, #80]	@ (8002130 <HAL_PCD_MspInit+0xd8>)
 80020de:	f000 fad7 	bl	8002690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e8:	2300      	movs	r3, #0
 80020ea:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80020f4:	4619      	mov	r1, r3
 80020f6:	480e      	ldr	r0, [pc, #56]	@ (8002130 <HAL_PCD_MspInit+0xd8>)
 80020f8:	f000 faca 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 80020fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002100:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 8002102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002106:	6353      	str	r3, [r2, #52]	@ 0x34
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	4a06      	ldr	r2, [pc, #24]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 8002112:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002116:	6453      	str	r3, [r2, #68]	@ 0x44
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <HAL_PCD_MspInit+0xd4>)
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002124:	bf00      	nop
 8002126:	3760      	adds	r7, #96	@ 0x60
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000

08002134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <NMI_Handler+0x4>

0800213c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <MemManage_Handler+0x4>

0800214c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <BusFault_Handler+0x4>

08002154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <UsageFault_Handler+0x4>

0800215c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218a:	f000 f957 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}

08002192 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  return 1;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <_kill>:

int _kill(int pid, int sig)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ac:	f004 ff5a 	bl	8007064 <__errno>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2216      	movs	r2, #22
 80021b4:	601a      	str	r2, [r3, #0]
  return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_exit>:

void _exit (int status)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ca:	f04f 31ff 	mov.w	r1, #4294967295
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffe7 	bl	80021a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <_exit+0x12>

080021d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e00a      	b.n	8002200 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ea:	f3af 8000 	nop.w
 80021ee:	4601      	mov	r1, r0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	60ba      	str	r2, [r7, #8]
 80021f6:	b2ca      	uxtb	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbf0      	blt.n	80021ea <_read+0x12>
  }

  return len;
 8002208:	687b      	ldr	r3, [r7, #4]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e009      	b.n	8002238 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	60ba      	str	r2, [r7, #8]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	429a      	cmp	r2, r3
 800223e:	dbf1      	blt.n	8002224 <_write+0x12>
  }
  return len;
 8002240:	687b      	ldr	r3, [r7, #4]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <_close>:

int _close(int file)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002272:	605a      	str	r2, [r3, #4]
  return 0;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <_isatty>:

int _isatty(int file)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f004 febe 	bl	8007064 <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20040000 	.word	0x20040000
 8002314:	00000400 	.word	0x00000400
 8002318:	20000a28 	.word	0x20000a28
 800231c:	20000b80 	.word	0x20000b80

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800237c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002348:	f7ff ffea 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	@ (8002390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002372:	f004 fe7d 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002376:	f7ff fbd9 	bl	8001b2c <main>
  bx  lr    
 800237a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800237c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8002388:	08009910 	.word	0x08009910
  ldr r2, =_sbss
 800238c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8002390:	20000b7c 	.word	0x20000b7c

08002394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC_IRQHandler>
	...

08002398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800239c:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0d      	ldr	r2, [pc, #52]	@ (80023d8 <HAL_Init+0x40>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_Init+0x40>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <HAL_Init+0x40>)
 80023ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b4:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <HAL_Init+0x40>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <HAL_Init+0x40>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 f931 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 f808 	bl	80023dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023cc:	f7ff fd8c 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023c00 	.word	0x40023c00

080023dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e4:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <HAL_InitTick+0x54>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_InitTick+0x58>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f93b 	bl	8002676 <HAL_SYSTICK_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00e      	b.n	8002428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0f      	cmp	r3, #15
 800240e:	d80a      	bhi.n	8002426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002410:	2200      	movs	r2, #0
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f000 f911 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800241c:	4a06      	ldr	r2, [pc, #24]	@ (8002438 <HAL_InitTick+0x5c>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000054 	.word	0x20000054
 8002434:	2000005c 	.word	0x2000005c
 8002438:	20000058 	.word	0x20000058

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	@ (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000005c 	.word	0x2000005c
 8002460:	20000a2c 	.word	0x20000a2c

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000a2c 	.word	0x20000a2c

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff ffee 	bl	8002464 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_Delay+0x44>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffde 	bl	8002464 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000005c 	.word	0x2000005c

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	@ (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	@ (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff8e 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff47 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff5c 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff8e 	bl	800257c <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5d 	bl	8002528 <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffb0 	bl	80025e4 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e165      	b.n	8002978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8154 	bne.w	8002972 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80ae 	beq.w	8002972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_GPIO_Init+0x300>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a5c      	ldr	r2, [pc, #368]	@ (8002990 <HAL_GPIO_Init+0x300>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b5a      	ldr	r3, [pc, #360]	@ (8002990 <HAL_GPIO_Init+0x300>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4f      	ldr	r2, [pc, #316]	@ (8002998 <HAL_GPIO_Init+0x308>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x21a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4e      	ldr	r2, [pc, #312]	@ (800299c <HAL_GPIO_Init+0x30c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x216>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4d      	ldr	r2, [pc, #308]	@ (80029a0 <HAL_GPIO_Init+0x310>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x212>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4c      	ldr	r2, [pc, #304]	@ (80029a4 <HAL_GPIO_Init+0x314>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x20e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4b      	ldr	r2, [pc, #300]	@ (80029a8 <HAL_GPIO_Init+0x318>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x20a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4a      	ldr	r2, [pc, #296]	@ (80029ac <HAL_GPIO_Init+0x31c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x206>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a49      	ldr	r2, [pc, #292]	@ (80029b0 <HAL_GPIO_Init+0x320>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x202>
 800288e:	2306      	movs	r3, #6
 8002890:	e00c      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 8002892:	2307      	movs	r3, #7
 8002894:	e00a      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 8002896:	2305      	movs	r3, #5
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 800289a:	2304      	movs	r3, #4
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x21c>
 80028aa:	2300      	movs	r3, #0
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028bc:	4935      	ldr	r1, [pc, #212]	@ (8002994 <HAL_GPIO_Init+0x304>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ca:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ee:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f4:	4b2f      	ldr	r3, [pc, #188]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800291e:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002948:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800296c:	4a11      	ldr	r2, [pc, #68]	@ (80029b4 <HAL_GPIO_Init+0x324>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	3301      	adds	r3, #1
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b0f      	cmp	r3, #15
 800297c:	f67f ae96 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	40013800 	.word	0x40013800
 8002998:	40020000 	.word	0x40020000
 800299c:	40020400 	.word	0x40020400
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40021400 	.word	0x40021400
 80029b0:	40021800 	.word	0x40021800
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d4:	e003      	b.n	80029de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d6:	887b      	ldrh	r3, [r7, #2]
 80029d8:	041a      	lsls	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e12b      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fa90 	bl	8001f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	@ 0x24
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a50:	f002 f8d0 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8002a54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a81      	ldr	r2, [pc, #516]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d807      	bhi.n	8002a70 <HAL_I2C_Init+0x84>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4a80      	ldr	r2, [pc, #512]	@ (8002c64 <HAL_I2C_Init+0x278>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	bf94      	ite	ls
 8002a68:	2301      	movls	r3, #1
 8002a6a:	2300      	movhi	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e006      	b.n	8002a7e <HAL_I2C_Init+0x92>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a7d      	ldr	r2, [pc, #500]	@ (8002c68 <HAL_I2C_Init+0x27c>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bf94      	ite	ls
 8002a78:	2301      	movls	r3, #1
 8002a7a:	2300      	movhi	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0e7      	b.n	8002c56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a78      	ldr	r2, [pc, #480]	@ (8002c6c <HAL_I2C_Init+0x280>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0c9b      	lsrs	r3, r3, #18
 8002a90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d802      	bhi.n	8002ac0 <HAL_I2C_Init+0xd4>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3301      	adds	r3, #1
 8002abe:	e009      	b.n	8002ad4 <HAL_I2C_Init+0xe8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	4a69      	ldr	r2, [pc, #420]	@ (8002c70 <HAL_I2C_Init+0x284>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ae6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	495c      	ldr	r1, [pc, #368]	@ (8002c60 <HAL_I2C_Init+0x274>)
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d819      	bhi.n	8002b28 <HAL_I2C_Init+0x13c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1e59      	subs	r1, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b02:	1c59      	adds	r1, r3, #1
 8002b04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b08:	400b      	ands	r3, r1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_I2C_Init+0x138>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1e59      	subs	r1, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b22:	e051      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b24:	2304      	movs	r3, #4
 8002b26:	e04f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_I2C_Init+0x168>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1e58      	subs	r0, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6859      	ldr	r1, [r3, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	e012      	b.n	8002b7a <HAL_I2C_Init+0x18e>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Init+0x196>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e022      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10e      	bne.n	8002ba8 <HAL_I2C_Init+0x1bc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1e58      	subs	r0, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	440b      	add	r3, r1
 8002b98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba6:	e00f      	b.n	8002bc8 <HAL_I2C_Init+0x1dc>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1e58      	subs	r0, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	0099      	lsls	r1, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	6809      	ldr	r1, [r1, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69da      	ldr	r2, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6911      	ldr	r1, [r2, #16]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68d2      	ldr	r2, [r2, #12]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	000186a0 	.word	0x000186a0
 8002c64:	001e847f 	.word	0x001e847f
 8002c68:	003d08ff 	.word	0x003d08ff
 8002c6c:	431bde83 	.word	0x431bde83
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	460b      	mov	r3, r1
 8002c82:	817b      	strh	r3, [r7, #10]
 8002c84:	4613      	mov	r3, r2
 8002c86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fbec 	bl	8002464 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80e0 	bne.w	8002e5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2319      	movs	r3, #25
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4970      	ldr	r1, [pc, #448]	@ (8002e68 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f001 fa3c 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0d3      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_I2C_Master_Transmit+0x50>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e0cc      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d007      	beq.n	8002cea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	@ 0x21
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2210      	movs	r2, #16
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	893a      	ldrh	r2, [r7, #8]
 8002d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4a50      	ldr	r2, [pc, #320]	@ (8002e6c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d2c:	8979      	ldrh	r1, [r7, #10]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	6a3a      	ldr	r2, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 ff28 	bl	8003b88 <I2C_MasterRequestWrite>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08d      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d58:	e066      	b.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6a39      	ldr	r1, [r7, #32]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f001 fafa 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d107      	bne.n	8002d82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06b      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11b      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	6a39      	ldr	r1, [r7, #32]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f001 faf1 	bl	80043e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e01a      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d194      	bne.n	8002d5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e000      	b.n	8002e5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e5c:	2302      	movs	r3, #2
  }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	00100002 	.word	0x00100002
 8002e6c:	ffff0000 	.word	0xffff0000

08002e70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	817b      	strh	r3, [r7, #10]
 8002e80:	4613      	mov	r3, r2
 8002e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff faee 	bl	8002464 <HAL_GetTick>
 8002e88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 8217 	bne.w	80032c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	497c      	ldr	r1, [pc, #496]	@ (8003094 <HAL_I2C_Master_Receive+0x224>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f001 f93e 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e20a      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_Master_Receive+0x50>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e203      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d007      	beq.n	8002ee6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2222      	movs	r2, #34	@ 0x22
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2210      	movs	r2, #16
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	893a      	ldrh	r2, [r7, #8]
 8002f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a5c      	ldr	r2, [pc, #368]	@ (8003098 <HAL_I2C_Master_Receive+0x228>)
 8002f26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 feac 	bl	8003c8c <I2C_MasterRequestRead>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e1c4      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d113      	bne.n	8002f6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e198      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d11b      	bne.n	8002fae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e178      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d11b      	bne.n	8002fee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	e158      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003014:	e144      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	2b03      	cmp	r3, #3
 800301c:	f200 80f1 	bhi.w	8003202 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	2b01      	cmp	r3, #1
 8003026:	d123      	bne.n	8003070 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f001 fa23 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e145      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800306e:	e117      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b02      	cmp	r3, #2
 8003076:	d14e      	bne.n	8003116 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	2200      	movs	r2, #0
 8003080:	4906      	ldr	r1, [pc, #24]	@ (800309c <HAL_I2C_Master_Receive+0x22c>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f001 f84e 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e11a      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
 8003092:	bf00      	nop
 8003094:	00100002 	.word	0x00100002
 8003098:	ffff0000 	.word	0xffff0000
 800309c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003114:	e0c4      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	2200      	movs	r2, #0
 800311e:	496c      	ldr	r1, [pc, #432]	@ (80032d0 <HAL_I2C_Master_Receive+0x460>)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 ffff 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cb      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2200      	movs	r2, #0
 800317a:	4955      	ldr	r1, [pc, #340]	@ (80032d0 <HAL_I2C_Master_Receive+0x460>)
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 ffd1 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09d      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003200:	e04e      	b.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f001 f936 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e058      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b04      	cmp	r3, #4
 8003254:	d124      	bne.n	80032a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	2b03      	cmp	r3, #3
 800325c:	d107      	bne.n	800326e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f47f aeb6 	bne.w	8003016 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
  }
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3728      	adds	r7, #40	@ 0x28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	00010004 	.word	0x00010004

080032d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	461a      	mov	r2, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	460b      	mov	r3, r1
 80032e8:	813b      	strh	r3, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032ee:	f7ff f8b9 	bl	8002464 <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	f040 80d9 	bne.w	80034b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	2319      	movs	r3, #25
 8003308:	2201      	movs	r2, #1
 800330a:	496d      	ldr	r1, [pc, #436]	@ (80034c0 <HAL_I2C_Mem_Write+0x1ec>)
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 ff09 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003318:	2302      	movs	r3, #2
 800331a:	e0cc      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2C_Mem_Write+0x56>
 8003326:	2302      	movs	r3, #2
 8003328:	e0c5      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d007      	beq.n	8003350 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800335e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2221      	movs	r2, #33	@ 0x21
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	@ 0x40
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a4d      	ldr	r2, [pc, #308]	@ (80034c4 <HAL_I2C_Mem_Write+0x1f0>)
 8003390:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003392:	88f8      	ldrh	r0, [r7, #6]
 8003394:	893a      	ldrh	r2, [r7, #8]
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	4603      	mov	r3, r0
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fd40 	bl	8003e28 <I2C_RequestMemoryWrite>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d052      	beq.n	8003454 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e081      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 ffce 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d107      	bne.n	80033da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06b      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d11b      	bne.n	8003454 <HAL_I2C_Mem_Write+0x180>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d017      	beq.n	8003454 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1aa      	bne.n	80033b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 ffc1 	bl	80043e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	2b04      	cmp	r3, #4
 8003472:	d107      	bne.n	8003484 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003482:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e016      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	00100002 	.word	0x00100002
 80034c4:	ffff0000 	.word	0xffff0000

080034c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	@ 0x30
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	460b      	mov	r3, r1
 80034dc:	813b      	strh	r3, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7fe ffbf 	bl	8002464 <HAL_GetTick>
 80034e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 8214 	bne.w	800391e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	497b      	ldr	r1, [pc, #492]	@ (80036ec <HAL_I2C_Mem_Read+0x224>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fe0f 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	e207      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Mem_Read+0x56>
 800351a:	2302      	movs	r3, #2
 800351c:	e200      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d007      	beq.n	8003544 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2222      	movs	r2, #34	@ 0x22
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2240      	movs	r2, #64	@ 0x40
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003574:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a5b      	ldr	r2, [pc, #364]	@ (80036f0 <HAL_I2C_Mem_Read+0x228>)
 8003584:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003586:	88f8      	ldrh	r0, [r7, #6]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	4603      	mov	r3, r0
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fcdc 	bl	8003f54 <I2C_RequestMemoryRead>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e1bc      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d113      	bne.n	80035d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	623b      	str	r3, [r7, #32]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e190      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d11b      	bne.n	8003616 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e170      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800361a:	2b02      	cmp	r3, #2
 800361c:	d11b      	bne.n	8003656 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800362c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800363c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	e150      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800366c:	e144      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003672:	2b03      	cmp	r3, #3
 8003674:	f200 80f1 	bhi.w	800385a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b01      	cmp	r3, #1
 800367e:	d123      	bne.n	80036c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003682:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fef7 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e145      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036c6:	e117      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d14e      	bne.n	800376e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	2200      	movs	r2, #0
 80036d8:	4906      	ldr	r1, [pc, #24]	@ (80036f4 <HAL_I2C_Mem_Read+0x22c>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fd22 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e11a      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
 80036ea:	bf00      	nop
 80036ec:	00100002 	.word	0x00100002
 80036f0:	ffff0000 	.word	0xffff0000
 80036f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800376c:	e0c4      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003774:	2200      	movs	r2, #0
 8003776:	496c      	ldr	r1, [pc, #432]	@ (8003928 <HAL_I2C_Mem_Read+0x460>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fcd3 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cb      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	2200      	movs	r2, #0
 80037d2:	4955      	ldr	r1, [pc, #340]	@ (8003928 <HAL_I2C_Mem_Read+0x460>)
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fca5 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e09d      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003858:	e04e      	b.n	80038f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800385c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fe0a 	bl	8004478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e058      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d124      	bne.n	80038f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f aeb6 	bne.w	800366e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800391e:	2302      	movs	r3, #2
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	@ 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010004 	.word	0x00010004

0800392c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	@ 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	460b      	mov	r3, r1
 800393a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7fe fd92 	bl	8002464 <HAL_GetTick>
 8003940:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	f040 8111 	bne.w	8003b76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	2319      	movs	r3, #25
 800395a:	2201      	movs	r2, #1
 800395c:	4988      	ldr	r1, [pc, #544]	@ (8003b80 <HAL_I2C_IsDeviceReady+0x254>)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fbe0 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	e104      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_I2C_IsDeviceReady+0x50>
 8003978:	2302      	movs	r3, #2
 800397a:	e0fd      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b01      	cmp	r3, #1
 8003990:	d007      	beq.n	80039a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f042 0201 	orr.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2224      	movs	r2, #36	@ 0x24
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a70      	ldr	r2, [pc, #448]	@ (8003b84 <HAL_I2C_IsDeviceReady+0x258>)
 80039c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2200      	movs	r2, #0
 80039de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb9e 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039fc:	d103      	bne.n	8003a06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0b6      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a0a:	897b      	ldrh	r3, [r7, #10]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fe fd23 	bl	8002464 <HAL_GetTick>
 8003a1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a4e:	e025      	b.n	8003a9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fe fd08 	bl	8002464 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <HAL_I2C_IsDeviceReady+0x13a>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	22a0      	movs	r2, #160	@ 0xa0
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a92:	bf0c      	ite	eq
 8003a94:	2301      	moveq	r3, #1
 8003a96:	2300      	movne	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2ba0      	cmp	r3, #160	@ 0xa0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_I2C_IsDeviceReady+0x188>
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_I2C_IsDeviceReady+0x188>
 8003aae:	7dbb      	ldrb	r3, [r7, #22]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0cd      	beq.n	8003a50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d129      	bne.n	8003b1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2319      	movs	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	4921      	ldr	r1, [pc, #132]	@ (8003b80 <HAL_I2C_IsDeviceReady+0x254>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fb12 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e036      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e02c      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2319      	movs	r3, #25
 8003b3e:	2201      	movs	r2, #1
 8003b40:	490f      	ldr	r1, [pc, #60]	@ (8003b80 <HAL_I2C_IsDeviceReady+0x254>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 faee 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e012      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	f4ff af32 	bcc.w	80039c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	00100002 	.word	0x00100002
 8003b84:	ffff0000 	.word	0xffff0000

08003b88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607a      	str	r2, [r7, #4]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	460b      	mov	r3, r1
 8003b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d006      	beq.n	8003bb2 <I2C_MasterRequestWrite+0x2a>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d003      	beq.n	8003bb2 <I2C_MasterRequestWrite+0x2a>
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bb0:	d108      	bne.n	8003bc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e00b      	b.n	8003bdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc8:	2b12      	cmp	r3, #18
 8003bca:	d107      	bne.n	8003bdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fa9b 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c02:	d103      	bne.n	8003c0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e035      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c18:	d108      	bne.n	8003c2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c1a:	897b      	ldrh	r3, [r7, #10]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e01b      	b.n	8003c64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	11db      	asrs	r3, r3, #7
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0306 	and.w	r3, r3, #6
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f063 030f 	orn	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	490e      	ldr	r1, [pc, #56]	@ (8003c84 <I2C_MasterRequestWrite+0xfc>)
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fae4 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e010      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c5a:	897b      	ldrh	r3, [r7, #10]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4907      	ldr	r1, [pc, #28]	@ (8003c88 <I2C_MasterRequestWrite+0x100>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fad4 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00010008 	.word	0x00010008
 8003c88:	00010002 	.word	0x00010002

08003c8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d006      	beq.n	8003cc6 <I2C_MasterRequestRead+0x3a>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d003      	beq.n	8003cc6 <I2C_MasterRequestRead+0x3a>
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cc4:	d108      	bne.n	8003cd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e00b      	b.n	8003cf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	2b11      	cmp	r3, #17
 8003cde:	d107      	bne.n	8003cf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fa11 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00d      	beq.n	8003d24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d16:	d103      	bne.n	8003d20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e079      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]
 8003d3e:	e05f      	b.n	8003e00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	11db      	asrs	r3, r3, #7
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 0306 	and.w	r3, r3, #6
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f063 030f 	orn	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4930      	ldr	r1, [pc, #192]	@ (8003e20 <I2C_MasterRequestRead+0x194>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa5a 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e054      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4929      	ldr	r1, [pc, #164]	@ (8003e24 <I2C_MasterRequestRead+0x198>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa4a 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e044      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f9af 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dda:	d103      	bne.n	8003de4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e017      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003de8:	897b      	ldrh	r3, [r7, #10]
 8003dea:	11db      	asrs	r3, r3, #7
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0306 	and.w	r3, r3, #6
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f063 030e 	orn	r3, r3, #14
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4907      	ldr	r1, [pc, #28]	@ (8003e24 <I2C_MasterRequestRead+0x198>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 fa06 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	00010008 	.word	0x00010008
 8003e24:	00010002 	.word	0x00010002

08003e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	817b      	strh	r3, [r7, #10]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	813b      	strh	r3, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f960 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e78:	d103      	bne.n	8003e82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e05f      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	492d      	ldr	r1, [pc, #180]	@ (8003f50 <I2C_RequestMemoryWrite+0x128>)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f9bb 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04c      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec4:	6a39      	ldr	r1, [r7, #32]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 fa46 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d107      	bne.n	8003eea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02b      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	611a      	str	r2, [r3, #16]
 8003efe:	e021      	b.n	8003f44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f00:	893b      	ldrh	r3, [r7, #8]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f10:	6a39      	ldr	r1, [r7, #32]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa20 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00d      	beq.n	8003f3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d107      	bne.n	8003f36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e005      	b.n	8003f46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	461a      	mov	r2, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	817b      	strh	r3, [r7, #10]
 8003f66:	460b      	mov	r3, r1
 8003f68:	813b      	strh	r3, [r7, #8]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f8c2 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb4:	d103      	bne.n	8003fbe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fbc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0aa      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fc2:	897b      	ldrh	r3, [r7, #10]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	4952      	ldr	r1, [pc, #328]	@ (8004120 <I2C_RequestMemoryRead+0x1cc>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 f91d 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e097      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	6a39      	ldr	r1, [r7, #32]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f9a8 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	2b04      	cmp	r3, #4
 8004014:	d107      	bne.n	8004026 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e076      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004030:	893b      	ldrh	r3, [r7, #8]
 8004032:	b2da      	uxtb	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
 800403a:	e021      	b.n	8004080 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f982 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b04      	cmp	r3, #4
 8004060:	d107      	bne.n	8004072 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004070:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e050      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004076:	893b      	ldrh	r3, [r7, #8]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004082:	6a39      	ldr	r1, [r7, #32]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f967 	bl	8004358 <I2C_WaitOnTXEFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	2b04      	cmp	r3, #4
 8004096:	d107      	bne.n	80040a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e035      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f82b 	bl	8004124 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e013      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	4906      	ldr	r1, [pc, #24]	@ (8004120 <I2C_RequestMemoryRead+0x1cc>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f886 	bl	8004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	00010002 	.word	0x00010002

08004124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004134:	e048      	b.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413c:	d044      	beq.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe f991 	bl	8002464 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnFlagUntilTimeout+0x30>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d139      	bne.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10d      	bne.n	800417a <I2C_WaitOnFlagUntilTimeout+0x56>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	43da      	mvns	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	4013      	ands	r3, r2
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	e00c      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0x70>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	43da      	mvns	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4013      	ands	r3, r2
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	429a      	cmp	r2, r3
 8004198:	d116      	bne.n	80041c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e023      	b.n	8004210 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10d      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	43da      	mvns	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	4013      	ands	r3, r2
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	e00c      	b.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	43da      	mvns	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4013      	ands	r3, r2
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf0c      	ite	eq
 8004200:	2301      	moveq	r3, #1
 8004202:	2300      	movne	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	429a      	cmp	r2, r3
 800420c:	d093      	beq.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004226:	e071      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d123      	bne.n	8004280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e067      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d041      	beq.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fe f8ec 	bl	8002464 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d136      	bne.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	0c1b      	lsrs	r3, r3, #16
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10c      	bne.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e00b      	b.n	80042da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	43da      	mvns	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d016      	beq.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e021      	b.n	8004350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10c      	bne.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e00b      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4013      	ands	r3, r2
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f af6d 	bne.w	8004228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004364:	e034      	b.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f8e3 	bl	8004532 <I2C_IsAcknowledgeFailed>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e034      	b.n	80043e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d028      	beq.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437e:	f7fe f871 	bl	8002464 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d302      	bcc.n	8004394 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d11d      	bne.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b80      	cmp	r3, #128	@ 0x80
 80043a0:	d016      	beq.n	80043d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e007      	b.n	80043e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043da:	2b80      	cmp	r3, #128	@ 0x80
 80043dc:	d1c3      	bne.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043f4:	e034      	b.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f89b 	bl	8004532 <I2C_IsAcknowledgeFailed>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e034      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d028      	beq.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440e:	f7fe f829 	bl	8002464 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	429a      	cmp	r2, r3
 800441c:	d302      	bcc.n	8004424 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11d      	bne.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b04      	cmp	r3, #4
 8004430:	d016      	beq.n	8004460 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e007      	b.n	8004470 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d1c3      	bne.n	80043f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004484:	e049      	b.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b10      	cmp	r3, #16
 8004492:	d119      	bne.n	80044c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0210 	mvn.w	r2, #16
 800449c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e030      	b.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c8:	f7fd ffcc 	bl	8002464 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d302      	bcc.n	80044de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11d      	bne.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d016      	beq.n	800451a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e007      	b.n	800452a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004524:	2b40      	cmp	r3, #64	@ 0x40
 8004526:	d1ae      	bne.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004548:	d11b      	bne.n	8004582 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004552:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af02      	add	r7, sp, #8
 8004596:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e108      	b.n	80047b4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fd fd4b 	bl	8002058 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2203      	movs	r2, #3
 80045c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d0:	d102      	bne.n	80045d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 faab 	bl	8005b38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	7c1a      	ldrb	r2, [r3, #16]
 80045ea:	f88d 2000 	strb.w	r2, [sp]
 80045ee:	3304      	adds	r3, #4
 80045f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f2:	f001 fa3d 	bl	8005a70 <USB_CoreInit>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0d5      	b.n	80047b4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 faa3 	bl	8005b5a <USB_SetCurrentMode>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0c6      	b.n	80047b4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
 800462a:	e04a      	b.n	80046c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800462c:	7bfa      	ldrb	r2, [r7, #15]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	3315      	adds	r3, #21
 800463c:	2201      	movs	r2, #1
 800463e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3314      	adds	r3, #20
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	b298      	uxth	r0, r3
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	332e      	adds	r3, #46	@ 0x2e
 8004668:	4602      	mov	r2, r0
 800466a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3318      	adds	r3, #24
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004680:	7bfa      	ldrb	r2, [r7, #15]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	331c      	adds	r3, #28
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004694:	7bfa      	ldrb	r2, [r7, #15]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3320      	adds	r3, #32
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	3324      	adds	r3, #36	@ 0x24
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3301      	adds	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	791b      	ldrb	r3, [r3, #4]
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3af      	bcc.n	800462c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	e044      	b.n	800475c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	3301      	adds	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	791b      	ldrb	r3, [r3, #4]
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3b5      	bcc.n	80046d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7c1a      	ldrb	r2, [r3, #16]
 800476e:	f88d 2000 	strb.w	r2, [sp]
 8004772:	3304      	adds	r3, #4
 8004774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004776:	f001 fa3d 	bl	8005bf4 <USB_DevInit>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e013      	b.n	80047b4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7b1b      	ldrb	r3, [r3, #12]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d102      	bne.n	80047a8 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f80a 	bl	80047bc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fbf8 	bl	8005fa2 <USB_DevDisconnect>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	f043 0303 	orr.w	r3, r3, #3
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cc      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b68      	ldr	r3, [pc, #416]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d90c      	bls.n	8004840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b65      	ldr	r3, [pc, #404]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0b8      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d020      	beq.n	800488e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004858:	4b59      	ldr	r3, [pc, #356]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4a58      	ldr	r2, [pc, #352]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004862:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004870:	4b53      	ldr	r3, [pc, #332]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a52      	ldr	r2, [pc, #328]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800487a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487c:	4b50      	ldr	r3, [pc, #320]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	494d      	ldr	r1, [pc, #308]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d044      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b47      	ldr	r3, [pc, #284]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e07f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e06f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e067      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b37      	ldr	r3, [pc, #220]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4934      	ldr	r1, [pc, #208]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fdb6 	bl	8002464 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fdb2 	bl	8002464 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e04f      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d20c      	bcs.n	800494c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b22      	ldr	r3, [pc, #136]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e032      	b.n	80049b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4916      	ldr	r1, [pc, #88]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d009      	beq.n	800498a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	490e      	ldr	r1, [pc, #56]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498a:	f000 f821 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498e:	4602      	mov	r2, r0
 8004990:	4b0b      	ldr	r3, [pc, #44]	@ (80049c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	091b      	lsrs	r3, r3, #4
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	490a      	ldr	r1, [pc, #40]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	5ccb      	ldrb	r3, [r1, r3]
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	4a09      	ldr	r2, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049a6:	4b09      	ldr	r3, [pc, #36]	@ (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fd fd16 	bl	80023dc <HAL_InitTick>

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	08009518 	.word	0x08009518
 80049c8:	20000054 	.word	0x20000054
 80049cc:	20000058 	.word	0x20000058

080049d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b094      	sub	sp, #80	@ 0x50
 80049d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e8:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d00d      	beq.n	8004a10 <HAL_RCC_GetSysClockFreq+0x40>
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	f200 80e1 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a02:	e0db      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a04:	4b73      	ldr	r3, [pc, #460]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a08:	e0db      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a0a:	4b73      	ldr	r3, [pc, #460]	@ (8004bd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a10:	4b6f      	ldr	r3, [pc, #444]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a26:	4b6a      	ldr	r3, [pc, #424]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	099b      	lsrs	r3, r3, #6
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a42:	4622      	mov	r2, r4
 8004a44:	462b      	mov	r3, r5
 8004a46:	f04f 0000 	mov.w	r0, #0
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	0159      	lsls	r1, r3, #5
 8004a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a54:	0150      	lsls	r0, r2, #5
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	1a51      	subs	r1, r2, r1
 8004a5e:	6139      	str	r1, [r7, #16]
 8004a60:	4629      	mov	r1, r5
 8004a62:	eb63 0301 	sbc.w	r3, r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	018b      	lsls	r3, r1, #6
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7e:	4651      	mov	r1, sl
 8004a80:	018a      	lsls	r2, r1, #6
 8004a82:	4651      	mov	r1, sl
 8004a84:	ebb2 0801 	subs.w	r8, r2, r1
 8004a88:	4659      	mov	r1, fp
 8004a8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa2:	4690      	mov	r8, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	4623      	mov	r3, r4
 8004aa8:	eb18 0303 	adds.w	r3, r8, r3
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	462b      	mov	r3, r5
 8004ab0:	eb49 0303 	adc.w	r3, r9, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	024b      	lsls	r3, r1, #9
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004acc:	4621      	mov	r1, r4
 8004ace:	024a      	lsls	r2, r1, #9
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004adc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ae0:	f7fc f8b4 	bl	8000c4c <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004aec:	e058      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aee:	4b38      	ldr	r3, [pc, #224]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	2200      	movs	r2, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	4611      	mov	r1, r2
 8004afa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004afe:	623b      	str	r3, [r7, #32]
 8004b00:	2300      	movs	r3, #0
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	f04f 0000 	mov.w	r0, #0
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	0159      	lsls	r1, r3, #5
 8004b16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b1a:	0150      	lsls	r0, r2, #5
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4641      	mov	r1, r8
 8004b22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b26:	4649      	mov	r1, r9
 8004b28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b40:	ebb2 040a 	subs.w	r4, r2, sl
 8004b44:	eb63 050b 	sbc.w	r5, r3, fp
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	00eb      	lsls	r3, r5, #3
 8004b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b56:	00e2      	lsls	r2, r4, #3
 8004b58:	4614      	mov	r4, r2
 8004b5a:	461d      	mov	r5, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	18e3      	adds	r3, r4, r3
 8004b60:	603b      	str	r3, [r7, #0]
 8004b62:	464b      	mov	r3, r9
 8004b64:	eb45 0303 	adc.w	r3, r5, r3
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b76:	4629      	mov	r1, r5
 8004b78:	028b      	lsls	r3, r1, #10
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b80:	4621      	mov	r1, r4
 8004b82:	028a      	lsls	r2, r1, #10
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	61fa      	str	r2, [r7, #28]
 8004b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b94:	f7fc f85a 	bl	8000c4c <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3750      	adds	r7, #80	@ 0x50
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	007a1200 	.word	0x007a1200

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	@ (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000054 	.word	0x20000054

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	@ (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	08009528 	.word	0x08009528

08004c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c20:	f7ff ffdc 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0b5b      	lsrs	r3, r3, #13
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	@ (8004c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	08009528 	.word	0x08009528

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d010      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004c64:	4b87      	ldr	r3, [pc, #540]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c6a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	4984      	ldr	r1, [pc, #528]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d010      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004c92:	4b7c      	ldr	r3, [pc, #496]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c98:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	4978      	ldr	r1, [pc, #480]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8083 	beq.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	4a6e      	ldr	r2, [pc, #440]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cde:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a69      	ldr	r2, [pc, #420]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fd fbbb 	bl	8002464 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf2:	f7fd fbb7 	bl	8002464 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e162      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d04:	4b60      	ldr	r3, [pc, #384]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d10:	4b5c      	ldr	r3, [pc, #368]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d02f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d028      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2e:	4b55      	ldr	r3, [pc, #340]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d36:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	4b54      	ldr	r3, [pc, #336]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3e:	4b53      	ldr	r3, [pc, #332]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d44:	4a4f      	ldr	r2, [pc, #316]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d114      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d56:	f7fd fb85 	bl	8002464 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fb81 	bl	8002464 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e12a      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d74:	4b43      	ldr	r3, [pc, #268]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ee      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d8c:	d10d      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da2:	4938      	ldr	r1, [pc, #224]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
 8004da8:	e005      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004daa:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4a35      	ldr	r2, [pc, #212]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004db0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004db4:	6093      	str	r3, [r2, #8]
 8004db6:	4b33      	ldr	r3, [pc, #204]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004db8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc2:	4930      	ldr	r1, [pc, #192]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8004dda:	4b2d      	ldr	r3, [pc, #180]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004ddc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004dea:	4b26      	ldr	r3, [pc, #152]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	4922      	ldr	r1, [pc, #136]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e12:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	491a      	ldr	r1, [pc, #104]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004e3c:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	490e      	ldr	r1, [pc, #56]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d004      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b80      	cmp	r3, #128	@ 0x80
 8004e5e:	f040 8091 	bne.w	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e62:	4b0c      	ldr	r3, [pc, #48]	@ (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e68:	f7fd fafc 	bl	8002464 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e6e:	e013      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e70:	f7fd faf8 	bl	8002464 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d90c      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0a3      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x386>
 8004e82:	bf00      	nop
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470e40 	.word	0x42470e40
 8004e90:	424711e0 	.word	0x424711e0
 8004e94:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e98:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e5      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eaa:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d023      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d004      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ee8:	d00e      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d019      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d115      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f06:	d110      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	019b      	lsls	r3, r3, #6
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	061b      	lsls	r3, r3, #24
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	492c      	ldr	r1, [pc, #176]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	019b      	lsls	r3, r3, #6
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	071b      	lsls	r3, r3, #28
 8004f50:	4920      	ldr	r1, [pc, #128]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f58:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5e:	f7fd fa81 	bl	8002464 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f66:	f7fd fa7d 	bl	8002464 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e028      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f78:	4b16      	ldr	r3, [pc, #88]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f90:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f96:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	490d      	ldr	r1, [pc, #52]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004fb2:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc0:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	424710d8 	.word	0x424710d8
 8004fdc:	42470068 	.word	0x42470068

08004fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e273      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d075      	beq.n	80050ea <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ffe:	4b88      	ldr	r3, [pc, #544]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00c      	beq.n	8005024 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500a:	4b85      	ldr	r3, [pc, #532]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005012:	2b08      	cmp	r3, #8
 8005014:	d112      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b82      	ldr	r3, [pc, #520]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b7e      	ldr	r3, [pc, #504]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05b      	beq.n	80050e8 <HAL_RCC_OscConfig+0x108>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d157      	bne.n	80050e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e24e      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x74>
 8005046:	4b76      	ldr	r3, [pc, #472]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a75      	ldr	r2, [pc, #468]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01d      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x98>
 800505e:	4b70      	ldr	r3, [pc, #448]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6f      	ldr	r2, [pc, #444]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b6d      	ldr	r3, [pc, #436]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6c      	ldr	r2, [pc, #432]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005078:	4b69      	ldr	r3, [pc, #420]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800507e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800508a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800508e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd f9e4 	bl	8002464 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fd f9e0 	bl	8002464 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	@ 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e213      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0xc0>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd f9d0 	bl	8002464 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fd f9cc 	bl	8002464 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	@ 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1ff      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	4b51      	ldr	r3, [pc, #324]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0xe8>
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005102:	4b47      	ldr	r3, [pc, #284]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
        || \
 800510a:	2b08      	cmp	r3, #8
 800510c:	d11c      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510e:	4b44      	ldr	r3, [pc, #272]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	4b41      	ldr	r3, [pc, #260]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1d3      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b3b      	ldr	r3, [pc, #236]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4937      	ldr	r1, [pc, #220]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	e03a      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005150:	4b34      	ldr	r3, [pc, #208]	@ (8005224 <HAL_RCC_OscConfig+0x244>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fd f985 	bl	8002464 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800515e:	f7fd f981 	bl	8002464 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1b4      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517c:	4b28      	ldr	r3, [pc, #160]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4925      	ldr	r1, [pc, #148]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	e015      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005192:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_RCC_OscConfig+0x244>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd f964 	bl	8002464 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fd f960 	bl	8002464 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e193      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d036      	beq.n	8005238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d2:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <HAL_RCC_OscConfig+0x248>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd f944 	bl	8002464 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fd f940 	bl	8002464 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e173      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCC_OscConfig+0x240>)
 80051f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x200>
 80051fe:	e01b      	b.n	8005238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005200:	4b09      	ldr	r3, [pc, #36]	@ (8005228 <HAL_RCC_OscConfig+0x248>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005206:	f7fd f92d 	bl	8002464 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	e00e      	b.n	800522c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520e:	f7fd f929 	bl	8002464 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d907      	bls.n	800522c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e15c      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
 8005220:	40023800 	.word	0x40023800
 8005224:	42470000 	.word	0x42470000
 8005228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b8a      	ldr	r3, [pc, #552]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800522e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ea      	bne.n	800520e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8097 	beq.w	8005374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b83      	ldr	r3, [pc, #524]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	4b7f      	ldr	r3, [pc, #508]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	4a7e      	ldr	r2, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005264:	6413      	str	r3, [r2, #64]	@ 0x40
 8005266:	4b7c      	ldr	r3, [pc, #496]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005276:	4b79      	ldr	r3, [pc, #484]	@ (800545c <HAL_RCC_OscConfig+0x47c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d118      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005282:	4b76      	ldr	r3, [pc, #472]	@ (800545c <HAL_RCC_OscConfig+0x47c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a75      	ldr	r2, [pc, #468]	@ (800545c <HAL_RCC_OscConfig+0x47c>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800528c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528e:	f7fd f8e9 	bl	8002464 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fd f8e5 	bl	8002464 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e118      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b6c      	ldr	r3, [pc, #432]	@ (800545c <HAL_RCC_OscConfig+0x47c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x2ea>
 80052bc:	4b66      	ldr	r3, [pc, #408]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x30c>
 80052d2:	4b61      	ldr	r3, [pc, #388]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d6:	4a60      	ldr	r2, [pc, #384]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052de:	4b5e      	ldr	r3, [pc, #376]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	4a59      	ldr	r2, [pc, #356]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f8:	4b57      	ldr	r3, [pc, #348]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a56      	ldr	r2, [pc, #344]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fd f8aa 	bl	8002464 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd f8a6 	bl	8002464 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e0d7      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	4b4b      	ldr	r3, [pc, #300]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ee      	beq.n	8005314 <HAL_RCC_OscConfig+0x334>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd f894 	bl	8002464 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd f890 	bl	8002464 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0c1      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005356:	4b40      	ldr	r3, [pc, #256]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ee      	bne.n	8005340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d105      	bne.n	8005374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005368:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	4a3a      	ldr	r2, [pc, #232]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 800536e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80ad 	beq.w	80054d8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800537e:	4b36      	ldr	r3, [pc, #216]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b08      	cmp	r3, #8
 8005388:	d060      	beq.n	800544c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d145      	bne.n	800541e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b33      	ldr	r3, [pc, #204]	@ (8005460 <HAL_RCC_OscConfig+0x480>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fd f864 	bl	8002464 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd f860 	bl	8002464 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e093      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b29      	ldr	r3, [pc, #164]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	3b01      	subs	r3, #1
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e8:	071b      	lsls	r3, r3, #28
 80053ea:	491b      	ldr	r1, [pc, #108]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005460 <HAL_RCC_OscConfig+0x480>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fd f835 	bl	8002464 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fd f831 	bl	8002464 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e064      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005410:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x41e>
 800541c:	e05c      	b.n	80054d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541e:	4b10      	ldr	r3, [pc, #64]	@ (8005460 <HAL_RCC_OscConfig+0x480>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fd f81e 	bl	8002464 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542c:	f7fd f81a 	bl	8002464 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e04d      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <HAL_RCC_OscConfig+0x478>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x44c>
 800544a:	e045      	b.n	80054d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d107      	bne.n	8005464 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e040      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
 8005458:	40023800 	.word	0x40023800
 800545c:	40007000 	.word	0x40007000
 8005460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005464:	4b1f      	ldr	r3, [pc, #124]	@ (80054e4 <HAL_RCC_OscConfig+0x504>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d030      	beq.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d129      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d122      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005494:	4013      	ands	r3, r2
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800549a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800549c:	4293      	cmp	r3, r2
 800549e:	d119      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	3b01      	subs	r3, #1
 80054ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d10f      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d107      	bne.n	80054d4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e000      	b.n	80054da <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800

080054e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e042      	b.n	8005580 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fc fd5a 	bl	8001fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	@ 0x24
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800552a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f82b 	bl	8005588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800558c:	b0c0      	sub	sp, #256	@ 0x100
 800558e:	af00      	add	r7, sp, #0
 8005590:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	68d9      	ldr	r1, [r3, #12]
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	ea40 0301 	orr.w	r3, r0, r1
 80055b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	431a      	orrs	r2, r3
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055e0:	f021 010c 	bic.w	r1, r1, #12
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ee:	430b      	orrs	r3, r1
 80055f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	6999      	ldr	r1, [r3, #24]
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	ea40 0301 	orr.w	r3, r0, r1
 800560e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b8f      	ldr	r3, [pc, #572]	@ (8005854 <UART_SetConfig+0x2cc>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d005      	beq.n	8005628 <UART_SetConfig+0xa0>
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b8d      	ldr	r3, [pc, #564]	@ (8005858 <UART_SetConfig+0x2d0>)
 8005624:	429a      	cmp	r2, r3
 8005626:	d104      	bne.n	8005632 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005628:	f7ff faf8 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 800562c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005630:	e003      	b.n	800563a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005632:	f7ff fadf 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8005636:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005644:	f040 810c 	bne.w	8005860 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564c:	2200      	movs	r2, #0
 800564e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005652:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005656:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800565a:	4622      	mov	r2, r4
 800565c:	462b      	mov	r3, r5
 800565e:	1891      	adds	r1, r2, r2
 8005660:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005662:	415b      	adcs	r3, r3
 8005664:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005666:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800566a:	4621      	mov	r1, r4
 800566c:	eb12 0801 	adds.w	r8, r2, r1
 8005670:	4629      	mov	r1, r5
 8005672:	eb43 0901 	adc.w	r9, r3, r1
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568a:	4690      	mov	r8, r2
 800568c:	4699      	mov	r9, r3
 800568e:	4623      	mov	r3, r4
 8005690:	eb18 0303 	adds.w	r3, r8, r3
 8005694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005698:	462b      	mov	r3, r5
 800569a:	eb49 0303 	adc.w	r3, r9, r3
 800569e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056b6:	460b      	mov	r3, r1
 80056b8:	18db      	adds	r3, r3, r3
 80056ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80056bc:	4613      	mov	r3, r2
 80056be:	eb42 0303 	adc.w	r3, r2, r3
 80056c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056cc:	f7fb fabe 	bl	8000c4c <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4b61      	ldr	r3, [pc, #388]	@ (800585c <UART_SetConfig+0x2d4>)
 80056d6:	fba3 2302 	umull	r2, r3, r3, r2
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	011c      	lsls	r4, r3, #4
 80056de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056f0:	4642      	mov	r2, r8
 80056f2:	464b      	mov	r3, r9
 80056f4:	1891      	adds	r1, r2, r2
 80056f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056f8:	415b      	adcs	r3, r3
 80056fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005700:	4641      	mov	r1, r8
 8005702:	eb12 0a01 	adds.w	sl, r2, r1
 8005706:	4649      	mov	r1, r9
 8005708:	eb43 0b01 	adc.w	fp, r3, r1
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005718:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800571c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005720:	4692      	mov	sl, r2
 8005722:	469b      	mov	fp, r3
 8005724:	4643      	mov	r3, r8
 8005726:	eb1a 0303 	adds.w	r3, sl, r3
 800572a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800572e:	464b      	mov	r3, r9
 8005730:	eb4b 0303 	adc.w	r3, fp, r3
 8005734:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005744:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005748:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800574c:	460b      	mov	r3, r1
 800574e:	18db      	adds	r3, r3, r3
 8005750:	643b      	str	r3, [r7, #64]	@ 0x40
 8005752:	4613      	mov	r3, r2
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	647b      	str	r3, [r7, #68]	@ 0x44
 800575a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800575e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005762:	f7fb fa73 	bl	8000c4c <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4611      	mov	r1, r2
 800576c:	4b3b      	ldr	r3, [pc, #236]	@ (800585c <UART_SetConfig+0x2d4>)
 800576e:	fba3 2301 	umull	r2, r3, r3, r1
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	2264      	movs	r2, #100	@ 0x64
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	1acb      	subs	r3, r1, r3
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005782:	4b36      	ldr	r3, [pc, #216]	@ (800585c <UART_SetConfig+0x2d4>)
 8005784:	fba3 2302 	umull	r2, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005790:	441c      	add	r4, r3
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800579c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	1891      	adds	r1, r2, r2
 80057aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057ac:	415b      	adcs	r3, r3
 80057ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057b4:	4641      	mov	r1, r8
 80057b6:	1851      	adds	r1, r2, r1
 80057b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ba:	4649      	mov	r1, r9
 80057bc:	414b      	adcs	r3, r1
 80057be:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057cc:	4659      	mov	r1, fp
 80057ce:	00cb      	lsls	r3, r1, #3
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d6:	4651      	mov	r1, sl
 80057d8:	00ca      	lsls	r2, r1, #3
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	4642      	mov	r2, r8
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e8:	464b      	mov	r3, r9
 80057ea:	460a      	mov	r2, r1
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005800:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005804:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005808:	460b      	mov	r3, r1
 800580a:	18db      	adds	r3, r3, r3
 800580c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580e:	4613      	mov	r3, r2
 8005810:	eb42 0303 	adc.w	r3, r2, r3
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800581a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800581e:	f7fb fa15 	bl	8000c4c <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <UART_SetConfig+0x2d4>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	@ 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	3332      	adds	r3, #50	@ 0x32
 800583a:	4a08      	ldr	r2, [pc, #32]	@ (800585c <UART_SetConfig+0x2d4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 0207 	and.w	r2, r3, #7
 8005846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4422      	add	r2, r4
 800584e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005850:	e106      	b.n	8005a60 <UART_SetConfig+0x4d8>
 8005852:	bf00      	nop
 8005854:	40011000 	.word	0x40011000
 8005858:	40011400 	.word	0x40011400
 800585c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005864:	2200      	movs	r2, #0
 8005866:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800586a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800586e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005872:	4642      	mov	r2, r8
 8005874:	464b      	mov	r3, r9
 8005876:	1891      	adds	r1, r2, r2
 8005878:	6239      	str	r1, [r7, #32]
 800587a:	415b      	adcs	r3, r3
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
 800587e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005882:	4641      	mov	r1, r8
 8005884:	1854      	adds	r4, r2, r1
 8005886:	4649      	mov	r1, r9
 8005888:	eb43 0501 	adc.w	r5, r3, r1
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	00eb      	lsls	r3, r5, #3
 8005896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800589a:	00e2      	lsls	r2, r4, #3
 800589c:	4614      	mov	r4, r2
 800589e:	461d      	mov	r5, r3
 80058a0:	4643      	mov	r3, r8
 80058a2:	18e3      	adds	r3, r4, r3
 80058a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058a8:	464b      	mov	r3, r9
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058ce:	4629      	mov	r1, r5
 80058d0:	008b      	lsls	r3, r1, #2
 80058d2:	4621      	mov	r1, r4
 80058d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058d8:	4621      	mov	r1, r4
 80058da:	008a      	lsls	r2, r1, #2
 80058dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058e0:	f7fb f9b4 	bl	8000c4c <__aeabi_uldivmod>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4b60      	ldr	r3, [pc, #384]	@ (8005a6c <UART_SetConfig+0x4e4>)
 80058ea:	fba3 2302 	umull	r2, r3, r3, r2
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	011c      	lsls	r4, r3, #4
 80058f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005900:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005904:	4642      	mov	r2, r8
 8005906:	464b      	mov	r3, r9
 8005908:	1891      	adds	r1, r2, r2
 800590a:	61b9      	str	r1, [r7, #24]
 800590c:	415b      	adcs	r3, r3
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005914:	4641      	mov	r1, r8
 8005916:	1851      	adds	r1, r2, r1
 8005918:	6139      	str	r1, [r7, #16]
 800591a:	4649      	mov	r1, r9
 800591c:	414b      	adcs	r3, r1
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800592c:	4659      	mov	r1, fp
 800592e:	00cb      	lsls	r3, r1, #3
 8005930:	4651      	mov	r1, sl
 8005932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005936:	4651      	mov	r1, sl
 8005938:	00ca      	lsls	r2, r1, #3
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	4603      	mov	r3, r0
 8005940:	4642      	mov	r2, r8
 8005942:	189b      	adds	r3, r3, r2
 8005944:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005948:	464b      	mov	r3, r9
 800594a:	460a      	mov	r2, r1
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800595e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800596c:	4649      	mov	r1, r9
 800596e:	008b      	lsls	r3, r1, #2
 8005970:	4641      	mov	r1, r8
 8005972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005976:	4641      	mov	r1, r8
 8005978:	008a      	lsls	r2, r1, #2
 800597a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800597e:	f7fb f965 	bl	8000c4c <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4611      	mov	r1, r2
 8005988:	4b38      	ldr	r3, [pc, #224]	@ (8005a6c <UART_SetConfig+0x4e4>)
 800598a:	fba3 2301 	umull	r2, r3, r3, r1
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2264      	movs	r2, #100	@ 0x64
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	1acb      	subs	r3, r1, r3
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	3332      	adds	r3, #50	@ 0x32
 800599c:	4a33      	ldr	r2, [pc, #204]	@ (8005a6c <UART_SetConfig+0x4e4>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059a8:	441c      	add	r4, r3
 80059aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ae:	2200      	movs	r2, #0
 80059b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80059b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059b8:	4642      	mov	r2, r8
 80059ba:	464b      	mov	r3, r9
 80059bc:	1891      	adds	r1, r2, r2
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	415b      	adcs	r3, r3
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059c8:	4641      	mov	r1, r8
 80059ca:	1851      	adds	r1, r2, r1
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	4649      	mov	r1, r9
 80059d0:	414b      	adcs	r3, r1
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e0:	4659      	mov	r1, fp
 80059e2:	00cb      	lsls	r3, r1, #3
 80059e4:	4651      	mov	r1, sl
 80059e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ea:	4651      	mov	r1, sl
 80059ec:	00ca      	lsls	r2, r1, #3
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	4642      	mov	r2, r8
 80059f6:	189b      	adds	r3, r3, r2
 80059f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fa:	464b      	mov	r3, r9
 80059fc:	460a      	mov	r2, r1
 80059fe:	eb42 0303 	adc.w	r3, r2, r3
 8005a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	f04f 0300 	mov.w	r3, #0
 8005a18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	008b      	lsls	r3, r1, #2
 8005a20:	4641      	mov	r1, r8
 8005a22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a26:	4641      	mov	r1, r8
 8005a28:	008a      	lsls	r2, r1, #2
 8005a2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a2e:	f7fb f90d 	bl	8000c4c <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <UART_SetConfig+0x4e4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	@ 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	3332      	adds	r3, #50	@ 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	@ (8005a6c <UART_SetConfig+0x4e4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a66:	46bd      	mov	sp, r7
 8005a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6c:	51eb851f 	.word	0x51eb851f

08005a70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 001c 	add.w	r0, r7, #28
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d123      	bne.n	8005ad2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d105      	bne.n	8005ac6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa9a 	bl	8006000 <USB_CoreReset>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]
 8005ad0:	e01b      	b.n	8005b0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa8e 	bl	8006000 <USB_CoreReset>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ae8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	@ 0x38
 8005afc:	e005      	b.n	8005b0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b0a:	7fbb      	ldrb	r3, [r7, #30]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10b      	bne.n	8005b28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f043 0206 	orr.w	r2, r3, #6
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b34:	b004      	add	sp, #16
 8005b36:	4770      	bx	lr

08005b38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 0201 	bic.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d115      	bne.n	8005ba8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b88:	200a      	movs	r0, #10
 8005b8a:	f7fc fc77 	bl	800247c <HAL_Delay>
      ms += 10U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	330a      	adds	r3, #10
 8005b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fa25 	bl	8005fe4 <USB_GetMode>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d01e      	beq.n	8005bde <USB_SetCurrentMode+0x84>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ba4:	d9f0      	bls.n	8005b88 <USB_SetCurrentMode+0x2e>
 8005ba6:	e01a      	b.n	8005bde <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d115      	bne.n	8005bda <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bba:	200a      	movs	r0, #10
 8005bbc:	f7fc fc5e 	bl	800247c <HAL_Delay>
      ms += 10U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	330a      	adds	r3, #10
 8005bc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa0c 	bl	8005fe4 <USB_GetMode>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <USB_SetCurrentMode+0x84>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bd6:	d9f0      	bls.n	8005bba <USB_SetCurrentMode+0x60>
 8005bd8:	e001      	b.n	8005bde <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e005      	b.n	8005bea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2bc8      	cmp	r3, #200	@ 0xc8
 8005be2:	d101      	bne.n	8005be8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b086      	sub	sp, #24
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	e009      	b.n	8005c28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3340      	adds	r3, #64	@ 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	3301      	adds	r3, #1
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b0e      	cmp	r3, #14
 8005c2c:	d9f2      	bls.n	8005c14 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11c      	bne.n	8005c70 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e005      	b.n	8005c7c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c74:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c82:	461a      	mov	r2, r3
 8005c84:	2300      	movs	r3, #0
 8005c86:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c88:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10d      	bne.n	8005cac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f968 	bl	8005f70 <USB_SetDevSpeed>
 8005ca0:	e008      	b.n	8005cb4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f963 	bl	8005f70 <USB_SetDevSpeed>
 8005caa:	e003      	b.n	8005cb4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cac:	2103      	movs	r1, #3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f95e 	bl	8005f70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cb4:	2110      	movs	r1, #16
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8fa 	bl	8005eb0 <USB_FlushTxFifo>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f924 	bl	8005f14 <USB_FlushRxFifo>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	e043      	b.n	8005d88 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d16:	d118      	bne.n	8005d4a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e013      	b.n	8005d5c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d40:	461a      	mov	r2, r3
 8005d42:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e008      	b.n	8005d5c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d56:	461a      	mov	r2, r3
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3301      	adds	r3, #1
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d3b5      	bcc.n	8005d00 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d94:	2300      	movs	r3, #0
 8005d96:	613b      	str	r3, [r7, #16]
 8005d98:	e043      	b.n	8005e22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db0:	d118      	bne.n	8005de4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e013      	b.n	8005df6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e008      	b.n	8005df6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df0:	461a      	mov	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e02:	461a      	mov	r2, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e14:	461a      	mov	r2, r3
 8005e16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e26:	461a      	mov	r2, r3
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d3b5      	bcc.n	8005d9a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	f043 0210 	orr.w	r2, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699a      	ldr	r2, [r3, #24]
 8005e68:	4b10      	ldr	r3, [pc, #64]	@ (8005eac <USB_DevInit+0x2b8>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f043 0208 	orr.w	r2, r3, #8
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d107      	bne.n	8005e9c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e94:	f043 0304 	orr.w	r3, r3, #4
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ea8:	b004      	add	sp, #16
 8005eaa:	4770      	bx	lr
 8005eac:	803c3800 	.word	0x803c3800

08005eb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005eca:	d901      	bls.n	8005ed0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e01b      	b.n	8005f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	daf2      	bge.n	8005ebe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	019b      	lsls	r3, r3, #6
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ef4:	d901      	bls.n	8005efa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e006      	b.n	8005f08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d0f0      	beq.n	8005ee8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f2c:	d901      	bls.n	8005f32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e018      	b.n	8005f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	daf2      	bge.n	8005f20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2210      	movs	r2, #16
 8005f42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f50:	d901      	bls.n	8005f56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e006      	b.n	8005f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d0f0      	beq.n	8005f44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f90:	4313      	orrs	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	3301      	adds	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006018:	d901      	bls.n	800601e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e01b      	b.n	8006056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	daf2      	bge.n	800600c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f043 0201 	orr.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3301      	adds	r3, #1
 800603a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006042:	d901      	bls.n	8006048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e006      	b.n	8006056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d0f0      	beq.n	8006036 <USB_CoreReset+0x36>

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr

08006062 <atof>:
 8006062:	2100      	movs	r1, #0
 8006064:	f000 be08 	b.w	8006c78 <strtod>

08006068 <atoi>:
 8006068:	220a      	movs	r2, #10
 800606a:	2100      	movs	r1, #0
 800606c:	f000 be8a 	b.w	8006d84 <strtol>

08006070 <sulp>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	460d      	mov	r5, r1
 8006076:	ec45 4b10 	vmov	d0, r4, r5
 800607a:	4616      	mov	r6, r2
 800607c:	f001 fff0 	bl	8008060 <__ulp>
 8006080:	ec51 0b10 	vmov	r0, r1, d0
 8006084:	b17e      	cbz	r6, 80060a6 <sulp+0x36>
 8006086:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800608a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd09      	ble.n	80060a6 <sulp+0x36>
 8006092:	051b      	lsls	r3, r3, #20
 8006094:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006098:	2400      	movs	r4, #0
 800609a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800609e:	4622      	mov	r2, r4
 80060a0:	462b      	mov	r3, r5
 80060a2:	f7fa fac9 	bl	8000638 <__aeabi_dmul>
 80060a6:	ec41 0b10 	vmov	d0, r0, r1
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	0000      	movs	r0, r0
	...

080060b0 <_strtod_l>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	b09f      	sub	sp, #124	@ 0x7c
 80060b6:	460c      	mov	r4, r1
 80060b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80060ba:	2200      	movs	r2, #0
 80060bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80060be:	9005      	str	r0, [sp, #20]
 80060c0:	f04f 0a00 	mov.w	sl, #0
 80060c4:	f04f 0b00 	mov.w	fp, #0
 80060c8:	460a      	mov	r2, r1
 80060ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80060cc:	7811      	ldrb	r1, [r2, #0]
 80060ce:	292b      	cmp	r1, #43	@ 0x2b
 80060d0:	d04a      	beq.n	8006168 <_strtod_l+0xb8>
 80060d2:	d838      	bhi.n	8006146 <_strtod_l+0x96>
 80060d4:	290d      	cmp	r1, #13
 80060d6:	d832      	bhi.n	800613e <_strtod_l+0x8e>
 80060d8:	2908      	cmp	r1, #8
 80060da:	d832      	bhi.n	8006142 <_strtod_l+0x92>
 80060dc:	2900      	cmp	r1, #0
 80060de:	d03b      	beq.n	8006158 <_strtod_l+0xa8>
 80060e0:	2200      	movs	r2, #0
 80060e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80060e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80060e6:	782a      	ldrb	r2, [r5, #0]
 80060e8:	2a30      	cmp	r2, #48	@ 0x30
 80060ea:	f040 80b3 	bne.w	8006254 <_strtod_l+0x1a4>
 80060ee:	786a      	ldrb	r2, [r5, #1]
 80060f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80060f4:	2a58      	cmp	r2, #88	@ 0x58
 80060f6:	d16e      	bne.n	80061d6 <_strtod_l+0x126>
 80060f8:	9302      	str	r3, [sp, #8]
 80060fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	4a8e      	ldr	r2, [pc, #568]	@ (800633c <_strtod_l+0x28c>)
 8006104:	9805      	ldr	r0, [sp, #20]
 8006106:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006108:	a919      	add	r1, sp, #100	@ 0x64
 800610a:	f001 f8a3 	bl	8007254 <__gethex>
 800610e:	f010 060f 	ands.w	r6, r0, #15
 8006112:	4604      	mov	r4, r0
 8006114:	d005      	beq.n	8006122 <_strtod_l+0x72>
 8006116:	2e06      	cmp	r6, #6
 8006118:	d128      	bne.n	800616c <_strtod_l+0xbc>
 800611a:	3501      	adds	r5, #1
 800611c:	2300      	movs	r3, #0
 800611e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006124:	2b00      	cmp	r3, #0
 8006126:	f040 858e 	bne.w	8006c46 <_strtod_l+0xb96>
 800612a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800612c:	b1cb      	cbz	r3, 8006162 <_strtod_l+0xb2>
 800612e:	4652      	mov	r2, sl
 8006130:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006134:	ec43 2b10 	vmov	d0, r2, r3
 8006138:	b01f      	add	sp, #124	@ 0x7c
 800613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613e:	2920      	cmp	r1, #32
 8006140:	d1ce      	bne.n	80060e0 <_strtod_l+0x30>
 8006142:	3201      	adds	r2, #1
 8006144:	e7c1      	b.n	80060ca <_strtod_l+0x1a>
 8006146:	292d      	cmp	r1, #45	@ 0x2d
 8006148:	d1ca      	bne.n	80060e0 <_strtod_l+0x30>
 800614a:	2101      	movs	r1, #1
 800614c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800614e:	1c51      	adds	r1, r2, #1
 8006150:	9119      	str	r1, [sp, #100]	@ 0x64
 8006152:	7852      	ldrb	r2, [r2, #1]
 8006154:	2a00      	cmp	r2, #0
 8006156:	d1c5      	bne.n	80060e4 <_strtod_l+0x34>
 8006158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800615a:	9419      	str	r4, [sp, #100]	@ 0x64
 800615c:	2b00      	cmp	r3, #0
 800615e:	f040 8570 	bne.w	8006c42 <_strtod_l+0xb92>
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	e7e5      	b.n	8006134 <_strtod_l+0x84>
 8006168:	2100      	movs	r1, #0
 800616a:	e7ef      	b.n	800614c <_strtod_l+0x9c>
 800616c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800616e:	b13a      	cbz	r2, 8006180 <_strtod_l+0xd0>
 8006170:	2135      	movs	r1, #53	@ 0x35
 8006172:	a81c      	add	r0, sp, #112	@ 0x70
 8006174:	f002 f86e 	bl	8008254 <__copybits>
 8006178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800617a:	9805      	ldr	r0, [sp, #20]
 800617c:	f001 fc3c 	bl	80079f8 <_Bfree>
 8006180:	3e01      	subs	r6, #1
 8006182:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006184:	2e04      	cmp	r6, #4
 8006186:	d806      	bhi.n	8006196 <_strtod_l+0xe6>
 8006188:	e8df f006 	tbb	[pc, r6]
 800618c:	201d0314 	.word	0x201d0314
 8006190:	14          	.byte	0x14
 8006191:	00          	.byte	0x00
 8006192:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006196:	05e1      	lsls	r1, r4, #23
 8006198:	bf48      	it	mi
 800619a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800619e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061a2:	0d1b      	lsrs	r3, r3, #20
 80061a4:	051b      	lsls	r3, r3, #20
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1bb      	bne.n	8006122 <_strtod_l+0x72>
 80061aa:	f000 ff5b 	bl	8007064 <__errno>
 80061ae:	2322      	movs	r3, #34	@ 0x22
 80061b0:	6003      	str	r3, [r0, #0]
 80061b2:	e7b6      	b.n	8006122 <_strtod_l+0x72>
 80061b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80061b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80061bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80061c4:	e7e7      	b.n	8006196 <_strtod_l+0xe6>
 80061c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006344 <_strtod_l+0x294>
 80061ca:	e7e4      	b.n	8006196 <_strtod_l+0xe6>
 80061cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80061d0:	f04f 3aff 	mov.w	sl, #4294967295
 80061d4:	e7df      	b.n	8006196 <_strtod_l+0xe6>
 80061d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	9219      	str	r2, [sp, #100]	@ 0x64
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b30      	cmp	r3, #48	@ 0x30
 80061e0:	d0f9      	beq.n	80061d6 <_strtod_l+0x126>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d09d      	beq.n	8006122 <_strtod_l+0x72>
 80061e6:	2301      	movs	r3, #1
 80061e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80061ee:	2300      	movs	r3, #0
 80061f0:	9308      	str	r3, [sp, #32]
 80061f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80061f4:	461f      	mov	r7, r3
 80061f6:	220a      	movs	r2, #10
 80061f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80061fa:	7805      	ldrb	r5, [r0, #0]
 80061fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006200:	b2d9      	uxtb	r1, r3
 8006202:	2909      	cmp	r1, #9
 8006204:	d928      	bls.n	8006258 <_strtod_l+0x1a8>
 8006206:	494e      	ldr	r1, [pc, #312]	@ (8006340 <_strtod_l+0x290>)
 8006208:	2201      	movs	r2, #1
 800620a:	f000 fed2 	bl	8006fb2 <strncmp>
 800620e:	2800      	cmp	r0, #0
 8006210:	d032      	beq.n	8006278 <_strtod_l+0x1c8>
 8006212:	2000      	movs	r0, #0
 8006214:	462a      	mov	r2, r5
 8006216:	4681      	mov	r9, r0
 8006218:	463d      	mov	r5, r7
 800621a:	4603      	mov	r3, r0
 800621c:	2a65      	cmp	r2, #101	@ 0x65
 800621e:	d001      	beq.n	8006224 <_strtod_l+0x174>
 8006220:	2a45      	cmp	r2, #69	@ 0x45
 8006222:	d114      	bne.n	800624e <_strtod_l+0x19e>
 8006224:	b91d      	cbnz	r5, 800622e <_strtod_l+0x17e>
 8006226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006228:	4302      	orrs	r2, r0
 800622a:	d095      	beq.n	8006158 <_strtod_l+0xa8>
 800622c:	2500      	movs	r5, #0
 800622e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006230:	1c62      	adds	r2, r4, #1
 8006232:	9219      	str	r2, [sp, #100]	@ 0x64
 8006234:	7862      	ldrb	r2, [r4, #1]
 8006236:	2a2b      	cmp	r2, #43	@ 0x2b
 8006238:	d077      	beq.n	800632a <_strtod_l+0x27a>
 800623a:	2a2d      	cmp	r2, #45	@ 0x2d
 800623c:	d07b      	beq.n	8006336 <_strtod_l+0x286>
 800623e:	f04f 0c00 	mov.w	ip, #0
 8006242:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006246:	2909      	cmp	r1, #9
 8006248:	f240 8082 	bls.w	8006350 <_strtod_l+0x2a0>
 800624c:	9419      	str	r4, [sp, #100]	@ 0x64
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	e0a2      	b.n	800639a <_strtod_l+0x2ea>
 8006254:	2300      	movs	r3, #0
 8006256:	e7c7      	b.n	80061e8 <_strtod_l+0x138>
 8006258:	2f08      	cmp	r7, #8
 800625a:	bfd5      	itete	le
 800625c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800625e:	9908      	ldrgt	r1, [sp, #32]
 8006260:	fb02 3301 	mlale	r3, r2, r1, r3
 8006264:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006268:	f100 0001 	add.w	r0, r0, #1
 800626c:	bfd4      	ite	le
 800626e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006270:	9308      	strgt	r3, [sp, #32]
 8006272:	3701      	adds	r7, #1
 8006274:	9019      	str	r0, [sp, #100]	@ 0x64
 8006276:	e7bf      	b.n	80061f8 <_strtod_l+0x148>
 8006278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	9219      	str	r2, [sp, #100]	@ 0x64
 800627e:	785a      	ldrb	r2, [r3, #1]
 8006280:	b37f      	cbz	r7, 80062e2 <_strtod_l+0x232>
 8006282:	4681      	mov	r9, r0
 8006284:	463d      	mov	r5, r7
 8006286:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800628a:	2b09      	cmp	r3, #9
 800628c:	d912      	bls.n	80062b4 <_strtod_l+0x204>
 800628e:	2301      	movs	r3, #1
 8006290:	e7c4      	b.n	800621c <_strtod_l+0x16c>
 8006292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	9219      	str	r2, [sp, #100]	@ 0x64
 8006298:	785a      	ldrb	r2, [r3, #1]
 800629a:	3001      	adds	r0, #1
 800629c:	2a30      	cmp	r2, #48	@ 0x30
 800629e:	d0f8      	beq.n	8006292 <_strtod_l+0x1e2>
 80062a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	f200 84d3 	bhi.w	8006c50 <_strtod_l+0xba0>
 80062aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80062ae:	4681      	mov	r9, r0
 80062b0:	2000      	movs	r0, #0
 80062b2:	4605      	mov	r5, r0
 80062b4:	3a30      	subs	r2, #48	@ 0x30
 80062b6:	f100 0301 	add.w	r3, r0, #1
 80062ba:	d02a      	beq.n	8006312 <_strtod_l+0x262>
 80062bc:	4499      	add	r9, r3
 80062be:	eb00 0c05 	add.w	ip, r0, r5
 80062c2:	462b      	mov	r3, r5
 80062c4:	210a      	movs	r1, #10
 80062c6:	4563      	cmp	r3, ip
 80062c8:	d10d      	bne.n	80062e6 <_strtod_l+0x236>
 80062ca:	1c69      	adds	r1, r5, #1
 80062cc:	4401      	add	r1, r0
 80062ce:	4428      	add	r0, r5
 80062d0:	2808      	cmp	r0, #8
 80062d2:	dc16      	bgt.n	8006302 <_strtod_l+0x252>
 80062d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062d6:	230a      	movs	r3, #10
 80062d8:	fb03 2300 	mla	r3, r3, r0, r2
 80062dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80062de:	2300      	movs	r3, #0
 80062e0:	e018      	b.n	8006314 <_strtod_l+0x264>
 80062e2:	4638      	mov	r0, r7
 80062e4:	e7da      	b.n	800629c <_strtod_l+0x1ec>
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	f103 0301 	add.w	r3, r3, #1
 80062ec:	dc03      	bgt.n	80062f6 <_strtod_l+0x246>
 80062ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80062f0:	434e      	muls	r6, r1
 80062f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80062f4:	e7e7      	b.n	80062c6 <_strtod_l+0x216>
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	bfde      	ittt	le
 80062fa:	9e08      	ldrle	r6, [sp, #32]
 80062fc:	434e      	mulle	r6, r1
 80062fe:	9608      	strle	r6, [sp, #32]
 8006300:	e7e1      	b.n	80062c6 <_strtod_l+0x216>
 8006302:	280f      	cmp	r0, #15
 8006304:	dceb      	bgt.n	80062de <_strtod_l+0x22e>
 8006306:	9808      	ldr	r0, [sp, #32]
 8006308:	230a      	movs	r3, #10
 800630a:	fb03 2300 	mla	r3, r3, r0, r2
 800630e:	9308      	str	r3, [sp, #32]
 8006310:	e7e5      	b.n	80062de <_strtod_l+0x22e>
 8006312:	4629      	mov	r1, r5
 8006314:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006316:	1c50      	adds	r0, r2, #1
 8006318:	9019      	str	r0, [sp, #100]	@ 0x64
 800631a:	7852      	ldrb	r2, [r2, #1]
 800631c:	4618      	mov	r0, r3
 800631e:	460d      	mov	r5, r1
 8006320:	e7b1      	b.n	8006286 <_strtod_l+0x1d6>
 8006322:	f04f 0900 	mov.w	r9, #0
 8006326:	2301      	movs	r3, #1
 8006328:	e77d      	b.n	8006226 <_strtod_l+0x176>
 800632a:	f04f 0c00 	mov.w	ip, #0
 800632e:	1ca2      	adds	r2, r4, #2
 8006330:	9219      	str	r2, [sp, #100]	@ 0x64
 8006332:	78a2      	ldrb	r2, [r4, #2]
 8006334:	e785      	b.n	8006242 <_strtod_l+0x192>
 8006336:	f04f 0c01 	mov.w	ip, #1
 800633a:	e7f8      	b.n	800632e <_strtod_l+0x27e>
 800633c:	08009554 	.word	0x08009554
 8006340:	08009530 	.word	0x08009530
 8006344:	7ff00000 	.word	0x7ff00000
 8006348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800634a:	1c51      	adds	r1, r2, #1
 800634c:	9119      	str	r1, [sp, #100]	@ 0x64
 800634e:	7852      	ldrb	r2, [r2, #1]
 8006350:	2a30      	cmp	r2, #48	@ 0x30
 8006352:	d0f9      	beq.n	8006348 <_strtod_l+0x298>
 8006354:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006358:	2908      	cmp	r1, #8
 800635a:	f63f af78 	bhi.w	800624e <_strtod_l+0x19e>
 800635e:	3a30      	subs	r2, #48	@ 0x30
 8006360:	920e      	str	r2, [sp, #56]	@ 0x38
 8006362:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006364:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006366:	f04f 080a 	mov.w	r8, #10
 800636a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800636c:	1c56      	adds	r6, r2, #1
 800636e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006370:	7852      	ldrb	r2, [r2, #1]
 8006372:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006376:	f1be 0f09 	cmp.w	lr, #9
 800637a:	d939      	bls.n	80063f0 <_strtod_l+0x340>
 800637c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800637e:	1a76      	subs	r6, r6, r1
 8006380:	2e08      	cmp	r6, #8
 8006382:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006386:	dc03      	bgt.n	8006390 <_strtod_l+0x2e0>
 8006388:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800638a:	4588      	cmp	r8, r1
 800638c:	bfa8      	it	ge
 800638e:	4688      	movge	r8, r1
 8006390:	f1bc 0f00 	cmp.w	ip, #0
 8006394:	d001      	beq.n	800639a <_strtod_l+0x2ea>
 8006396:	f1c8 0800 	rsb	r8, r8, #0
 800639a:	2d00      	cmp	r5, #0
 800639c:	d14e      	bne.n	800643c <_strtod_l+0x38c>
 800639e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063a0:	4308      	orrs	r0, r1
 80063a2:	f47f aebe 	bne.w	8006122 <_strtod_l+0x72>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f47f aed6 	bne.w	8006158 <_strtod_l+0xa8>
 80063ac:	2a69      	cmp	r2, #105	@ 0x69
 80063ae:	d028      	beq.n	8006402 <_strtod_l+0x352>
 80063b0:	dc25      	bgt.n	80063fe <_strtod_l+0x34e>
 80063b2:	2a49      	cmp	r2, #73	@ 0x49
 80063b4:	d025      	beq.n	8006402 <_strtod_l+0x352>
 80063b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80063b8:	f47f aece 	bne.w	8006158 <_strtod_l+0xa8>
 80063bc:	499b      	ldr	r1, [pc, #620]	@ (800662c <_strtod_l+0x57c>)
 80063be:	a819      	add	r0, sp, #100	@ 0x64
 80063c0:	f001 f96a 	bl	8007698 <__match>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f43f aec7 	beq.w	8006158 <_strtod_l+0xa8>
 80063ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b28      	cmp	r3, #40	@ 0x28
 80063d0:	d12e      	bne.n	8006430 <_strtod_l+0x380>
 80063d2:	4997      	ldr	r1, [pc, #604]	@ (8006630 <_strtod_l+0x580>)
 80063d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80063d6:	a819      	add	r0, sp, #100	@ 0x64
 80063d8:	f001 f972 	bl	80076c0 <__hexnan>
 80063dc:	2805      	cmp	r0, #5
 80063de:	d127      	bne.n	8006430 <_strtod_l+0x380>
 80063e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80063e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80063e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80063ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80063ee:	e698      	b.n	8006122 <_strtod_l+0x72>
 80063f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80063f2:	fb08 2101 	mla	r1, r8, r1, r2
 80063f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80063fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80063fc:	e7b5      	b.n	800636a <_strtod_l+0x2ba>
 80063fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8006400:	e7da      	b.n	80063b8 <_strtod_l+0x308>
 8006402:	498c      	ldr	r1, [pc, #560]	@ (8006634 <_strtod_l+0x584>)
 8006404:	a819      	add	r0, sp, #100	@ 0x64
 8006406:	f001 f947 	bl	8007698 <__match>
 800640a:	2800      	cmp	r0, #0
 800640c:	f43f aea4 	beq.w	8006158 <_strtod_l+0xa8>
 8006410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006412:	4989      	ldr	r1, [pc, #548]	@ (8006638 <_strtod_l+0x588>)
 8006414:	3b01      	subs	r3, #1
 8006416:	a819      	add	r0, sp, #100	@ 0x64
 8006418:	9319      	str	r3, [sp, #100]	@ 0x64
 800641a:	f001 f93d 	bl	8007698 <__match>
 800641e:	b910      	cbnz	r0, 8006426 <_strtod_l+0x376>
 8006420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006422:	3301      	adds	r3, #1
 8006424:	9319      	str	r3, [sp, #100]	@ 0x64
 8006426:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006648 <_strtod_l+0x598>
 800642a:	f04f 0a00 	mov.w	sl, #0
 800642e:	e678      	b.n	8006122 <_strtod_l+0x72>
 8006430:	4882      	ldr	r0, [pc, #520]	@ (800663c <_strtod_l+0x58c>)
 8006432:	f000 fe55 	bl	80070e0 <nan>
 8006436:	ec5b ab10 	vmov	sl, fp, d0
 800643a:	e672      	b.n	8006122 <_strtod_l+0x72>
 800643c:	eba8 0309 	sub.w	r3, r8, r9
 8006440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006442:	9309      	str	r3, [sp, #36]	@ 0x24
 8006444:	2f00      	cmp	r7, #0
 8006446:	bf08      	it	eq
 8006448:	462f      	moveq	r7, r5
 800644a:	2d10      	cmp	r5, #16
 800644c:	462c      	mov	r4, r5
 800644e:	bfa8      	it	ge
 8006450:	2410      	movge	r4, #16
 8006452:	f7fa f877 	bl	8000544 <__aeabi_ui2d>
 8006456:	2d09      	cmp	r5, #9
 8006458:	4682      	mov	sl, r0
 800645a:	468b      	mov	fp, r1
 800645c:	dc13      	bgt.n	8006486 <_strtod_l+0x3d6>
 800645e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	f43f ae5e 	beq.w	8006122 <_strtod_l+0x72>
 8006466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006468:	dd78      	ble.n	800655c <_strtod_l+0x4ac>
 800646a:	2b16      	cmp	r3, #22
 800646c:	dc5f      	bgt.n	800652e <_strtod_l+0x47e>
 800646e:	4974      	ldr	r1, [pc, #464]	@ (8006640 <_strtod_l+0x590>)
 8006470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006478:	4652      	mov	r2, sl
 800647a:	465b      	mov	r3, fp
 800647c:	f7fa f8dc 	bl	8000638 <__aeabi_dmul>
 8006480:	4682      	mov	sl, r0
 8006482:	468b      	mov	fp, r1
 8006484:	e64d      	b.n	8006122 <_strtod_l+0x72>
 8006486:	4b6e      	ldr	r3, [pc, #440]	@ (8006640 <_strtod_l+0x590>)
 8006488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800648c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006490:	f7fa f8d2 	bl	8000638 <__aeabi_dmul>
 8006494:	4682      	mov	sl, r0
 8006496:	9808      	ldr	r0, [sp, #32]
 8006498:	468b      	mov	fp, r1
 800649a:	f7fa f853 	bl	8000544 <__aeabi_ui2d>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4650      	mov	r0, sl
 80064a4:	4659      	mov	r1, fp
 80064a6:	f7f9 ff11 	bl	80002cc <__adddf3>
 80064aa:	2d0f      	cmp	r5, #15
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	ddd5      	ble.n	800645e <_strtod_l+0x3ae>
 80064b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b4:	1b2c      	subs	r4, r5, r4
 80064b6:	441c      	add	r4, r3
 80064b8:	2c00      	cmp	r4, #0
 80064ba:	f340 8096 	ble.w	80065ea <_strtod_l+0x53a>
 80064be:	f014 030f 	ands.w	r3, r4, #15
 80064c2:	d00a      	beq.n	80064da <_strtod_l+0x42a>
 80064c4:	495e      	ldr	r1, [pc, #376]	@ (8006640 <_strtod_l+0x590>)
 80064c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80064ca:	4652      	mov	r2, sl
 80064cc:	465b      	mov	r3, fp
 80064ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d2:	f7fa f8b1 	bl	8000638 <__aeabi_dmul>
 80064d6:	4682      	mov	sl, r0
 80064d8:	468b      	mov	fp, r1
 80064da:	f034 040f 	bics.w	r4, r4, #15
 80064de:	d073      	beq.n	80065c8 <_strtod_l+0x518>
 80064e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80064e4:	dd48      	ble.n	8006578 <_strtod_l+0x4c8>
 80064e6:	2400      	movs	r4, #0
 80064e8:	46a0      	mov	r8, r4
 80064ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80064ec:	46a1      	mov	r9, r4
 80064ee:	9a05      	ldr	r2, [sp, #20]
 80064f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006648 <_strtod_l+0x598>
 80064f4:	2322      	movs	r3, #34	@ 0x22
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	f04f 0a00 	mov.w	sl, #0
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f43f ae0f 	beq.w	8006122 <_strtod_l+0x72>
 8006504:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006506:	9805      	ldr	r0, [sp, #20]
 8006508:	f001 fa76 	bl	80079f8 <_Bfree>
 800650c:	9805      	ldr	r0, [sp, #20]
 800650e:	4649      	mov	r1, r9
 8006510:	f001 fa72 	bl	80079f8 <_Bfree>
 8006514:	9805      	ldr	r0, [sp, #20]
 8006516:	4641      	mov	r1, r8
 8006518:	f001 fa6e 	bl	80079f8 <_Bfree>
 800651c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800651e:	9805      	ldr	r0, [sp, #20]
 8006520:	f001 fa6a 	bl	80079f8 <_Bfree>
 8006524:	9805      	ldr	r0, [sp, #20]
 8006526:	4621      	mov	r1, r4
 8006528:	f001 fa66 	bl	80079f8 <_Bfree>
 800652c:	e5f9      	b.n	8006122 <_strtod_l+0x72>
 800652e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006530:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006534:	4293      	cmp	r3, r2
 8006536:	dbbc      	blt.n	80064b2 <_strtod_l+0x402>
 8006538:	4c41      	ldr	r4, [pc, #260]	@ (8006640 <_strtod_l+0x590>)
 800653a:	f1c5 050f 	rsb	r5, r5, #15
 800653e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006542:	4652      	mov	r2, sl
 8006544:	465b      	mov	r3, fp
 8006546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800654a:	f7fa f875 	bl	8000638 <__aeabi_dmul>
 800654e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006550:	1b5d      	subs	r5, r3, r5
 8006552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006556:	e9d4 2300 	ldrd	r2, r3, [r4]
 800655a:	e78f      	b.n	800647c <_strtod_l+0x3cc>
 800655c:	3316      	adds	r3, #22
 800655e:	dba8      	blt.n	80064b2 <_strtod_l+0x402>
 8006560:	4b37      	ldr	r3, [pc, #220]	@ (8006640 <_strtod_l+0x590>)
 8006562:	eba9 0808 	sub.w	r8, r9, r8
 8006566:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800656a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800656e:	4650      	mov	r0, sl
 8006570:	4659      	mov	r1, fp
 8006572:	f7fa f98b 	bl	800088c <__aeabi_ddiv>
 8006576:	e783      	b.n	8006480 <_strtod_l+0x3d0>
 8006578:	4b32      	ldr	r3, [pc, #200]	@ (8006644 <_strtod_l+0x594>)
 800657a:	9308      	str	r3, [sp, #32]
 800657c:	2300      	movs	r3, #0
 800657e:	1124      	asrs	r4, r4, #4
 8006580:	4650      	mov	r0, sl
 8006582:	4659      	mov	r1, fp
 8006584:	461e      	mov	r6, r3
 8006586:	2c01      	cmp	r4, #1
 8006588:	dc21      	bgt.n	80065ce <_strtod_l+0x51e>
 800658a:	b10b      	cbz	r3, 8006590 <_strtod_l+0x4e0>
 800658c:	4682      	mov	sl, r0
 800658e:	468b      	mov	fp, r1
 8006590:	492c      	ldr	r1, [pc, #176]	@ (8006644 <_strtod_l+0x594>)
 8006592:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006596:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800659a:	4652      	mov	r2, sl
 800659c:	465b      	mov	r3, fp
 800659e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a2:	f7fa f849 	bl	8000638 <__aeabi_dmul>
 80065a6:	4b28      	ldr	r3, [pc, #160]	@ (8006648 <_strtod_l+0x598>)
 80065a8:	460a      	mov	r2, r1
 80065aa:	400b      	ands	r3, r1
 80065ac:	4927      	ldr	r1, [pc, #156]	@ (800664c <_strtod_l+0x59c>)
 80065ae:	428b      	cmp	r3, r1
 80065b0:	4682      	mov	sl, r0
 80065b2:	d898      	bhi.n	80064e6 <_strtod_l+0x436>
 80065b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf86      	itte	hi
 80065bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006650 <_strtod_l+0x5a0>
 80065c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80065c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80065c8:	2300      	movs	r3, #0
 80065ca:	9308      	str	r3, [sp, #32]
 80065cc:	e07a      	b.n	80066c4 <_strtod_l+0x614>
 80065ce:	07e2      	lsls	r2, r4, #31
 80065d0:	d505      	bpl.n	80065de <_strtod_l+0x52e>
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f7fa f82e 	bl	8000638 <__aeabi_dmul>
 80065dc:	2301      	movs	r3, #1
 80065de:	9a08      	ldr	r2, [sp, #32]
 80065e0:	3208      	adds	r2, #8
 80065e2:	3601      	adds	r6, #1
 80065e4:	1064      	asrs	r4, r4, #1
 80065e6:	9208      	str	r2, [sp, #32]
 80065e8:	e7cd      	b.n	8006586 <_strtod_l+0x4d6>
 80065ea:	d0ed      	beq.n	80065c8 <_strtod_l+0x518>
 80065ec:	4264      	negs	r4, r4
 80065ee:	f014 020f 	ands.w	r2, r4, #15
 80065f2:	d00a      	beq.n	800660a <_strtod_l+0x55a>
 80065f4:	4b12      	ldr	r3, [pc, #72]	@ (8006640 <_strtod_l+0x590>)
 80065f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065fa:	4650      	mov	r0, sl
 80065fc:	4659      	mov	r1, fp
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7fa f943 	bl	800088c <__aeabi_ddiv>
 8006606:	4682      	mov	sl, r0
 8006608:	468b      	mov	fp, r1
 800660a:	1124      	asrs	r4, r4, #4
 800660c:	d0dc      	beq.n	80065c8 <_strtod_l+0x518>
 800660e:	2c1f      	cmp	r4, #31
 8006610:	dd20      	ble.n	8006654 <_strtod_l+0x5a4>
 8006612:	2400      	movs	r4, #0
 8006614:	46a0      	mov	r8, r4
 8006616:	940a      	str	r4, [sp, #40]	@ 0x28
 8006618:	46a1      	mov	r9, r4
 800661a:	9a05      	ldr	r2, [sp, #20]
 800661c:	2322      	movs	r3, #34	@ 0x22
 800661e:	f04f 0a00 	mov.w	sl, #0
 8006622:	f04f 0b00 	mov.w	fp, #0
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	e768      	b.n	80064fc <_strtod_l+0x44c>
 800662a:	bf00      	nop
 800662c:	0800953b 	.word	0x0800953b
 8006630:	08009540 	.word	0x08009540
 8006634:	08009532 	.word	0x08009532
 8006638:	08009535 	.word	0x08009535
 800663c:	080098b3 	.word	0x080098b3
 8006640:	080097b0 	.word	0x080097b0
 8006644:	08009788 	.word	0x08009788
 8006648:	7ff00000 	.word	0x7ff00000
 800664c:	7ca00000 	.word	0x7ca00000
 8006650:	7fefffff 	.word	0x7fefffff
 8006654:	f014 0310 	ands.w	r3, r4, #16
 8006658:	bf18      	it	ne
 800665a:	236a      	movne	r3, #106	@ 0x6a
 800665c:	4ea9      	ldr	r6, [pc, #676]	@ (8006904 <_strtod_l+0x854>)
 800665e:	9308      	str	r3, [sp, #32]
 8006660:	4650      	mov	r0, sl
 8006662:	4659      	mov	r1, fp
 8006664:	2300      	movs	r3, #0
 8006666:	07e2      	lsls	r2, r4, #31
 8006668:	d504      	bpl.n	8006674 <_strtod_l+0x5c4>
 800666a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800666e:	f7f9 ffe3 	bl	8000638 <__aeabi_dmul>
 8006672:	2301      	movs	r3, #1
 8006674:	1064      	asrs	r4, r4, #1
 8006676:	f106 0608 	add.w	r6, r6, #8
 800667a:	d1f4      	bne.n	8006666 <_strtod_l+0x5b6>
 800667c:	b10b      	cbz	r3, 8006682 <_strtod_l+0x5d2>
 800667e:	4682      	mov	sl, r0
 8006680:	468b      	mov	fp, r1
 8006682:	9b08      	ldr	r3, [sp, #32]
 8006684:	b1b3      	cbz	r3, 80066b4 <_strtod_l+0x604>
 8006686:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800668a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800668e:	2b00      	cmp	r3, #0
 8006690:	4659      	mov	r1, fp
 8006692:	dd0f      	ble.n	80066b4 <_strtod_l+0x604>
 8006694:	2b1f      	cmp	r3, #31
 8006696:	dd55      	ble.n	8006744 <_strtod_l+0x694>
 8006698:	2b34      	cmp	r3, #52	@ 0x34
 800669a:	bfde      	ittt	le
 800669c:	f04f 33ff 	movle.w	r3, #4294967295
 80066a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80066a4:	4093      	lslle	r3, r2
 80066a6:	f04f 0a00 	mov.w	sl, #0
 80066aa:	bfcc      	ite	gt
 80066ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80066b0:	ea03 0b01 	andle.w	fp, r3, r1
 80066b4:	2200      	movs	r2, #0
 80066b6:	2300      	movs	r3, #0
 80066b8:	4650      	mov	r0, sl
 80066ba:	4659      	mov	r1, fp
 80066bc:	f7fa fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d1a6      	bne.n	8006612 <_strtod_l+0x562>
 80066c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80066ca:	9805      	ldr	r0, [sp, #20]
 80066cc:	462b      	mov	r3, r5
 80066ce:	463a      	mov	r2, r7
 80066d0:	f001 f9fa 	bl	8007ac8 <__s2b>
 80066d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f43f af05 	beq.w	80064e6 <_strtod_l+0x436>
 80066dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066de:	2a00      	cmp	r2, #0
 80066e0:	eba9 0308 	sub.w	r3, r9, r8
 80066e4:	bfa8      	it	ge
 80066e6:	2300      	movge	r3, #0
 80066e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80066ea:	2400      	movs	r4, #0
 80066ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80066f2:	46a0      	mov	r8, r4
 80066f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066f6:	9805      	ldr	r0, [sp, #20]
 80066f8:	6859      	ldr	r1, [r3, #4]
 80066fa:	f001 f93d 	bl	8007978 <_Balloc>
 80066fe:	4681      	mov	r9, r0
 8006700:	2800      	cmp	r0, #0
 8006702:	f43f aef4 	beq.w	80064ee <_strtod_l+0x43e>
 8006706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	3202      	adds	r2, #2
 800670c:	f103 010c 	add.w	r1, r3, #12
 8006710:	0092      	lsls	r2, r2, #2
 8006712:	300c      	adds	r0, #12
 8006714:	f000 fcd3 	bl	80070be <memcpy>
 8006718:	ec4b ab10 	vmov	d0, sl, fp
 800671c:	9805      	ldr	r0, [sp, #20]
 800671e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006720:	a91b      	add	r1, sp, #108	@ 0x6c
 8006722:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006726:	f001 fd0b 	bl	8008140 <__d2b>
 800672a:	901a      	str	r0, [sp, #104]	@ 0x68
 800672c:	2800      	cmp	r0, #0
 800672e:	f43f aede 	beq.w	80064ee <_strtod_l+0x43e>
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	2101      	movs	r1, #1
 8006736:	f001 fa5d 	bl	8007bf4 <__i2b>
 800673a:	4680      	mov	r8, r0
 800673c:	b948      	cbnz	r0, 8006752 <_strtod_l+0x6a2>
 800673e:	f04f 0800 	mov.w	r8, #0
 8006742:	e6d4      	b.n	80064ee <_strtod_l+0x43e>
 8006744:	f04f 32ff 	mov.w	r2, #4294967295
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	ea03 0a0a 	and.w	sl, r3, sl
 8006750:	e7b0      	b.n	80066b4 <_strtod_l+0x604>
 8006752:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006754:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006756:	2d00      	cmp	r5, #0
 8006758:	bfab      	itete	ge
 800675a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800675c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800675e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006760:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006762:	bfac      	ite	ge
 8006764:	18ef      	addge	r7, r5, r3
 8006766:	1b5e      	sublt	r6, r3, r5
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	1aed      	subs	r5, r5, r3
 800676c:	4415      	add	r5, r2
 800676e:	4b66      	ldr	r3, [pc, #408]	@ (8006908 <_strtod_l+0x858>)
 8006770:	3d01      	subs	r5, #1
 8006772:	429d      	cmp	r5, r3
 8006774:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006778:	da50      	bge.n	800681c <_strtod_l+0x76c>
 800677a:	1b5b      	subs	r3, r3, r5
 800677c:	2b1f      	cmp	r3, #31
 800677e:	eba2 0203 	sub.w	r2, r2, r3
 8006782:	f04f 0101 	mov.w	r1, #1
 8006786:	dc3d      	bgt.n	8006804 <_strtod_l+0x754>
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800678e:	2300      	movs	r3, #0
 8006790:	9310      	str	r3, [sp, #64]	@ 0x40
 8006792:	18bd      	adds	r5, r7, r2
 8006794:	9b08      	ldr	r3, [sp, #32]
 8006796:	42af      	cmp	r7, r5
 8006798:	4416      	add	r6, r2
 800679a:	441e      	add	r6, r3
 800679c:	463b      	mov	r3, r7
 800679e:	bfa8      	it	ge
 80067a0:	462b      	movge	r3, r5
 80067a2:	42b3      	cmp	r3, r6
 80067a4:	bfa8      	it	ge
 80067a6:	4633      	movge	r3, r6
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfc2      	ittt	gt
 80067ac:	1aed      	subgt	r5, r5, r3
 80067ae:	1af6      	subgt	r6, r6, r3
 80067b0:	1aff      	subgt	r7, r7, r3
 80067b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dd16      	ble.n	80067e6 <_strtod_l+0x736>
 80067b8:	4641      	mov	r1, r8
 80067ba:	9805      	ldr	r0, [sp, #20]
 80067bc:	461a      	mov	r2, r3
 80067be:	f001 fad9 	bl	8007d74 <__pow5mult>
 80067c2:	4680      	mov	r8, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d0ba      	beq.n	800673e <_strtod_l+0x68e>
 80067c8:	4601      	mov	r1, r0
 80067ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067cc:	9805      	ldr	r0, [sp, #20]
 80067ce:	f001 fa27 	bl	8007c20 <__multiply>
 80067d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f ae8a 	beq.w	80064ee <_strtod_l+0x43e>
 80067da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067dc:	9805      	ldr	r0, [sp, #20]
 80067de:	f001 f90b 	bl	80079f8 <_Bfree>
 80067e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	dc1d      	bgt.n	8006826 <_strtod_l+0x776>
 80067ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	dd23      	ble.n	8006838 <_strtod_l+0x788>
 80067f0:	4649      	mov	r1, r9
 80067f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80067f4:	9805      	ldr	r0, [sp, #20]
 80067f6:	f001 fabd 	bl	8007d74 <__pow5mult>
 80067fa:	4681      	mov	r9, r0
 80067fc:	b9e0      	cbnz	r0, 8006838 <_strtod_l+0x788>
 80067fe:	f04f 0900 	mov.w	r9, #0
 8006802:	e674      	b.n	80064ee <_strtod_l+0x43e>
 8006804:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006808:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800680c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006810:	35e2      	adds	r5, #226	@ 0xe2
 8006812:	fa01 f305 	lsl.w	r3, r1, r5
 8006816:	9310      	str	r3, [sp, #64]	@ 0x40
 8006818:	9113      	str	r1, [sp, #76]	@ 0x4c
 800681a:	e7ba      	b.n	8006792 <_strtod_l+0x6e2>
 800681c:	2300      	movs	r3, #0
 800681e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006820:	2301      	movs	r3, #1
 8006822:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006824:	e7b5      	b.n	8006792 <_strtod_l+0x6e2>
 8006826:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006828:	9805      	ldr	r0, [sp, #20]
 800682a:	462a      	mov	r2, r5
 800682c:	f001 fafc 	bl	8007e28 <__lshift>
 8006830:	901a      	str	r0, [sp, #104]	@ 0x68
 8006832:	2800      	cmp	r0, #0
 8006834:	d1d9      	bne.n	80067ea <_strtod_l+0x73a>
 8006836:	e65a      	b.n	80064ee <_strtod_l+0x43e>
 8006838:	2e00      	cmp	r6, #0
 800683a:	dd07      	ble.n	800684c <_strtod_l+0x79c>
 800683c:	4649      	mov	r1, r9
 800683e:	9805      	ldr	r0, [sp, #20]
 8006840:	4632      	mov	r2, r6
 8006842:	f001 faf1 	bl	8007e28 <__lshift>
 8006846:	4681      	mov	r9, r0
 8006848:	2800      	cmp	r0, #0
 800684a:	d0d8      	beq.n	80067fe <_strtod_l+0x74e>
 800684c:	2f00      	cmp	r7, #0
 800684e:	dd08      	ble.n	8006862 <_strtod_l+0x7b2>
 8006850:	4641      	mov	r1, r8
 8006852:	9805      	ldr	r0, [sp, #20]
 8006854:	463a      	mov	r2, r7
 8006856:	f001 fae7 	bl	8007e28 <__lshift>
 800685a:	4680      	mov	r8, r0
 800685c:	2800      	cmp	r0, #0
 800685e:	f43f ae46 	beq.w	80064ee <_strtod_l+0x43e>
 8006862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006864:	9805      	ldr	r0, [sp, #20]
 8006866:	464a      	mov	r2, r9
 8006868:	f001 fb66 	bl	8007f38 <__mdiff>
 800686c:	4604      	mov	r4, r0
 800686e:	2800      	cmp	r0, #0
 8006870:	f43f ae3d 	beq.w	80064ee <_strtod_l+0x43e>
 8006874:	68c3      	ldr	r3, [r0, #12]
 8006876:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006878:	2300      	movs	r3, #0
 800687a:	60c3      	str	r3, [r0, #12]
 800687c:	4641      	mov	r1, r8
 800687e:	f001 fb3f 	bl	8007f00 <__mcmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	da46      	bge.n	8006914 <_strtod_l+0x864>
 8006886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006888:	ea53 030a 	orrs.w	r3, r3, sl
 800688c:	d16c      	bne.n	8006968 <_strtod_l+0x8b8>
 800688e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006892:	2b00      	cmp	r3, #0
 8006894:	d168      	bne.n	8006968 <_strtod_l+0x8b8>
 8006896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800689a:	0d1b      	lsrs	r3, r3, #20
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80068a2:	d961      	bls.n	8006968 <_strtod_l+0x8b8>
 80068a4:	6963      	ldr	r3, [r4, #20]
 80068a6:	b913      	cbnz	r3, 80068ae <_strtod_l+0x7fe>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	dd5c      	ble.n	8006968 <_strtod_l+0x8b8>
 80068ae:	4621      	mov	r1, r4
 80068b0:	2201      	movs	r2, #1
 80068b2:	9805      	ldr	r0, [sp, #20]
 80068b4:	f001 fab8 	bl	8007e28 <__lshift>
 80068b8:	4641      	mov	r1, r8
 80068ba:	4604      	mov	r4, r0
 80068bc:	f001 fb20 	bl	8007f00 <__mcmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	dd51      	ble.n	8006968 <_strtod_l+0x8b8>
 80068c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068c8:	9a08      	ldr	r2, [sp, #32]
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	d06b      	beq.n	80069aa <_strtod_l+0x8fa>
 80068d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80068d6:	d868      	bhi.n	80069aa <_strtod_l+0x8fa>
 80068d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80068dc:	f67f ae9d 	bls.w	800661a <_strtod_l+0x56a>
 80068e0:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <_strtod_l+0x85c>)
 80068e2:	4650      	mov	r0, sl
 80068e4:	4659      	mov	r1, fp
 80068e6:	2200      	movs	r2, #0
 80068e8:	f7f9 fea6 	bl	8000638 <__aeabi_dmul>
 80068ec:	4b08      	ldr	r3, [pc, #32]	@ (8006910 <_strtod_l+0x860>)
 80068ee:	400b      	ands	r3, r1
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f47f ae05 	bne.w	8006504 <_strtod_l+0x454>
 80068fa:	9a05      	ldr	r2, [sp, #20]
 80068fc:	2322      	movs	r3, #34	@ 0x22
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e600      	b.n	8006504 <_strtod_l+0x454>
 8006902:	bf00      	nop
 8006904:	08009568 	.word	0x08009568
 8006908:	fffffc02 	.word	0xfffffc02
 800690c:	39500000 	.word	0x39500000
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006918:	d165      	bne.n	80069e6 <_strtod_l+0x936>
 800691a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800691c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006920:	b35a      	cbz	r2, 800697a <_strtod_l+0x8ca>
 8006922:	4a9f      	ldr	r2, [pc, #636]	@ (8006ba0 <_strtod_l+0xaf0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d12b      	bne.n	8006980 <_strtod_l+0x8d0>
 8006928:	9b08      	ldr	r3, [sp, #32]
 800692a:	4651      	mov	r1, sl
 800692c:	b303      	cbz	r3, 8006970 <_strtod_l+0x8c0>
 800692e:	4b9d      	ldr	r3, [pc, #628]	@ (8006ba4 <_strtod_l+0xaf4>)
 8006930:	465a      	mov	r2, fp
 8006932:	4013      	ands	r3, r2
 8006934:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	d81b      	bhi.n	8006976 <_strtod_l+0x8c6>
 800693e:	0d1b      	lsrs	r3, r3, #20
 8006940:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006944:	fa02 f303 	lsl.w	r3, r2, r3
 8006948:	4299      	cmp	r1, r3
 800694a:	d119      	bne.n	8006980 <_strtod_l+0x8d0>
 800694c:	4b96      	ldr	r3, [pc, #600]	@ (8006ba8 <_strtod_l+0xaf8>)
 800694e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006950:	429a      	cmp	r2, r3
 8006952:	d102      	bne.n	800695a <_strtod_l+0x8aa>
 8006954:	3101      	adds	r1, #1
 8006956:	f43f adca 	beq.w	80064ee <_strtod_l+0x43e>
 800695a:	4b92      	ldr	r3, [pc, #584]	@ (8006ba4 <_strtod_l+0xaf4>)
 800695c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800695e:	401a      	ands	r2, r3
 8006960:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006964:	f04f 0a00 	mov.w	sl, #0
 8006968:	9b08      	ldr	r3, [sp, #32]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1b8      	bne.n	80068e0 <_strtod_l+0x830>
 800696e:	e5c9      	b.n	8006504 <_strtod_l+0x454>
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	e7e8      	b.n	8006948 <_strtod_l+0x898>
 8006976:	4613      	mov	r3, r2
 8006978:	e7e6      	b.n	8006948 <_strtod_l+0x898>
 800697a:	ea53 030a 	orrs.w	r3, r3, sl
 800697e:	d0a1      	beq.n	80068c4 <_strtod_l+0x814>
 8006980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006982:	b1db      	cbz	r3, 80069bc <_strtod_l+0x90c>
 8006984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006986:	4213      	tst	r3, r2
 8006988:	d0ee      	beq.n	8006968 <_strtod_l+0x8b8>
 800698a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800698c:	9a08      	ldr	r2, [sp, #32]
 800698e:	4650      	mov	r0, sl
 8006990:	4659      	mov	r1, fp
 8006992:	b1bb      	cbz	r3, 80069c4 <_strtod_l+0x914>
 8006994:	f7ff fb6c 	bl	8006070 <sulp>
 8006998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800699c:	ec53 2b10 	vmov	r2, r3, d0
 80069a0:	f7f9 fc94 	bl	80002cc <__adddf3>
 80069a4:	4682      	mov	sl, r0
 80069a6:	468b      	mov	fp, r1
 80069a8:	e7de      	b.n	8006968 <_strtod_l+0x8b8>
 80069aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80069ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80069b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80069b6:	f04f 3aff 	mov.w	sl, #4294967295
 80069ba:	e7d5      	b.n	8006968 <_strtod_l+0x8b8>
 80069bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80069be:	ea13 0f0a 	tst.w	r3, sl
 80069c2:	e7e1      	b.n	8006988 <_strtod_l+0x8d8>
 80069c4:	f7ff fb54 	bl	8006070 <sulp>
 80069c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069cc:	ec53 2b10 	vmov	r2, r3, d0
 80069d0:	f7f9 fc7a 	bl	80002c8 <__aeabi_dsub>
 80069d4:	2200      	movs	r2, #0
 80069d6:	2300      	movs	r3, #0
 80069d8:	4682      	mov	sl, r0
 80069da:	468b      	mov	fp, r1
 80069dc:	f7fa f894 	bl	8000b08 <__aeabi_dcmpeq>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0c1      	beq.n	8006968 <_strtod_l+0x8b8>
 80069e4:	e619      	b.n	800661a <_strtod_l+0x56a>
 80069e6:	4641      	mov	r1, r8
 80069e8:	4620      	mov	r0, r4
 80069ea:	f001 fc01 	bl	80081f0 <__ratio>
 80069ee:	ec57 6b10 	vmov	r6, r7, d0
 80069f2:	2200      	movs	r2, #0
 80069f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80069f8:	4630      	mov	r0, r6
 80069fa:	4639      	mov	r1, r7
 80069fc:	f7fa f898 	bl	8000b30 <__aeabi_dcmple>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d06f      	beq.n	8006ae4 <_strtod_l+0xa34>
 8006a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d17a      	bne.n	8006b00 <_strtod_l+0xa50>
 8006a0a:	f1ba 0f00 	cmp.w	sl, #0
 8006a0e:	d158      	bne.n	8006ac2 <_strtod_l+0xa12>
 8006a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d15a      	bne.n	8006ad0 <_strtod_l+0xa20>
 8006a1a:	4b64      	ldr	r3, [pc, #400]	@ (8006bac <_strtod_l+0xafc>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7fa f87b 	bl	8000b1c <__aeabi_dcmplt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d159      	bne.n	8006ade <_strtod_l+0xa2e>
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4b60      	ldr	r3, [pc, #384]	@ (8006bb0 <_strtod_l+0xb00>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	f7f9 fe01 	bl	8000638 <__aeabi_dmul>
 8006a36:	4606      	mov	r6, r0
 8006a38:	460f      	mov	r7, r1
 8006a3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006a3e:	9606      	str	r6, [sp, #24]
 8006a40:	9307      	str	r3, [sp, #28]
 8006a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a46:	4d57      	ldr	r5, [pc, #348]	@ (8006ba4 <_strtod_l+0xaf4>)
 8006a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a4e:	401d      	ands	r5, r3
 8006a50:	4b58      	ldr	r3, [pc, #352]	@ (8006bb4 <_strtod_l+0xb04>)
 8006a52:	429d      	cmp	r5, r3
 8006a54:	f040 80b2 	bne.w	8006bbc <_strtod_l+0xb0c>
 8006a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006a5e:	ec4b ab10 	vmov	d0, sl, fp
 8006a62:	f001 fafd 	bl	8008060 <__ulp>
 8006a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a6a:	ec51 0b10 	vmov	r0, r1, d0
 8006a6e:	f7f9 fde3 	bl	8000638 <__aeabi_dmul>
 8006a72:	4652      	mov	r2, sl
 8006a74:	465b      	mov	r3, fp
 8006a76:	f7f9 fc29 	bl	80002cc <__adddf3>
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4949      	ldr	r1, [pc, #292]	@ (8006ba4 <_strtod_l+0xaf4>)
 8006a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8006bb8 <_strtod_l+0xb08>)
 8006a80:	4019      	ands	r1, r3
 8006a82:	4291      	cmp	r1, r2
 8006a84:	4682      	mov	sl, r0
 8006a86:	d942      	bls.n	8006b0e <_strtod_l+0xa5e>
 8006a88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a8a:	4b47      	ldr	r3, [pc, #284]	@ (8006ba8 <_strtod_l+0xaf8>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d103      	bne.n	8006a98 <_strtod_l+0x9e8>
 8006a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a92:	3301      	adds	r3, #1
 8006a94:	f43f ad2b 	beq.w	80064ee <_strtod_l+0x43e>
 8006a98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006ba8 <_strtod_l+0xaf8>
 8006a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8006aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006aa2:	9805      	ldr	r0, [sp, #20]
 8006aa4:	f000 ffa8 	bl	80079f8 <_Bfree>
 8006aa8:	9805      	ldr	r0, [sp, #20]
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f000 ffa4 	bl	80079f8 <_Bfree>
 8006ab0:	9805      	ldr	r0, [sp, #20]
 8006ab2:	4641      	mov	r1, r8
 8006ab4:	f000 ffa0 	bl	80079f8 <_Bfree>
 8006ab8:	9805      	ldr	r0, [sp, #20]
 8006aba:	4621      	mov	r1, r4
 8006abc:	f000 ff9c 	bl	80079f8 <_Bfree>
 8006ac0:	e618      	b.n	80066f4 <_strtod_l+0x644>
 8006ac2:	f1ba 0f01 	cmp.w	sl, #1
 8006ac6:	d103      	bne.n	8006ad0 <_strtod_l+0xa20>
 8006ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f43f ada5 	beq.w	800661a <_strtod_l+0x56a>
 8006ad0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006b80 <_strtod_l+0xad0>
 8006ad4:	4f35      	ldr	r7, [pc, #212]	@ (8006bac <_strtod_l+0xafc>)
 8006ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006ada:	2600      	movs	r6, #0
 8006adc:	e7b1      	b.n	8006a42 <_strtod_l+0x992>
 8006ade:	4f34      	ldr	r7, [pc, #208]	@ (8006bb0 <_strtod_l+0xb00>)
 8006ae0:	2600      	movs	r6, #0
 8006ae2:	e7aa      	b.n	8006a3a <_strtod_l+0x98a>
 8006ae4:	4b32      	ldr	r3, [pc, #200]	@ (8006bb0 <_strtod_l+0xb00>)
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	2200      	movs	r2, #0
 8006aec:	f7f9 fda4 	bl	8000638 <__aeabi_dmul>
 8006af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d09f      	beq.n	8006a3a <_strtod_l+0x98a>
 8006afa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006afe:	e7a0      	b.n	8006a42 <_strtod_l+0x992>
 8006b00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006b88 <_strtod_l+0xad8>
 8006b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006b08:	ec57 6b17 	vmov	r6, r7, d7
 8006b0c:	e799      	b.n	8006a42 <_strtod_l+0x992>
 8006b0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1c1      	bne.n	8006aa0 <_strtod_l+0x9f0>
 8006b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b20:	0d1b      	lsrs	r3, r3, #20
 8006b22:	051b      	lsls	r3, r3, #20
 8006b24:	429d      	cmp	r5, r3
 8006b26:	d1bb      	bne.n	8006aa0 <_strtod_l+0x9f0>
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7fa f8a6 	bl	8000c7c <__aeabi_d2lz>
 8006b30:	f7f9 fd54 	bl	80005dc <__aeabi_l2d>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 fbc4 	bl	80002c8 <__aeabi_dsub>
 8006b40:	460b      	mov	r3, r1
 8006b42:	4602      	mov	r2, r0
 8006b44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4e:	ea46 060a 	orr.w	r6, r6, sl
 8006b52:	431e      	orrs	r6, r3
 8006b54:	d06f      	beq.n	8006c36 <_strtod_l+0xb86>
 8006b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b90 <_strtod_l+0xae0>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 ffde 	bl	8000b1c <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f47f accf 	bne.w	8006504 <_strtod_l+0x454>
 8006b66:	a30c      	add	r3, pc, #48	@ (adr r3, 8006b98 <_strtod_l+0xae8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b70:	f7f9 fff2 	bl	8000b58 <__aeabi_dcmpgt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d093      	beq.n	8006aa0 <_strtod_l+0x9f0>
 8006b78:	e4c4      	b.n	8006504 <_strtod_l+0x454>
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w
 8006b80:	00000000 	.word	0x00000000
 8006b84:	bff00000 	.word	0xbff00000
 8006b88:	00000000 	.word	0x00000000
 8006b8c:	3ff00000 	.word	0x3ff00000
 8006b90:	94a03595 	.word	0x94a03595
 8006b94:	3fdfffff 	.word	0x3fdfffff
 8006b98:	35afe535 	.word	0x35afe535
 8006b9c:	3fe00000 	.word	0x3fe00000
 8006ba0:	000fffff 	.word	0x000fffff
 8006ba4:	7ff00000 	.word	0x7ff00000
 8006ba8:	7fefffff 	.word	0x7fefffff
 8006bac:	3ff00000 	.word	0x3ff00000
 8006bb0:	3fe00000 	.word	0x3fe00000
 8006bb4:	7fe00000 	.word	0x7fe00000
 8006bb8:	7c9fffff 	.word	0x7c9fffff
 8006bbc:	9b08      	ldr	r3, [sp, #32]
 8006bbe:	b323      	cbz	r3, 8006c0a <_strtod_l+0xb5a>
 8006bc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006bc4:	d821      	bhi.n	8006c0a <_strtod_l+0xb5a>
 8006bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8006c68 <_strtod_l+0xbb8>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 ffae 	bl	8000b30 <__aeabi_dcmple>
 8006bd4:	b1a0      	cbz	r0, 8006c00 <_strtod_l+0xb50>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f7f9 ffc7 	bl	8000b6c <__aeabi_d2uiz>
 8006bde:	2801      	cmp	r0, #1
 8006be0:	bf38      	it	cc
 8006be2:	2001      	movcc	r0, #1
 8006be4:	f7f9 fcae 	bl	8000544 <__aeabi_ui2d>
 8006be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	b9fb      	cbnz	r3, 8006c30 <_strtod_l+0xb80>
 8006bf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006bf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8006bf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8006bf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006bfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006c00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006c06:	1b5b      	subs	r3, r3, r5
 8006c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8006c0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006c0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006c12:	f001 fa25 	bl	8008060 <__ulp>
 8006c16:	4650      	mov	r0, sl
 8006c18:	ec53 2b10 	vmov	r2, r3, d0
 8006c1c:	4659      	mov	r1, fp
 8006c1e:	f7f9 fd0b 	bl	8000638 <__aeabi_dmul>
 8006c22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c26:	f7f9 fb51 	bl	80002cc <__adddf3>
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	468b      	mov	fp, r1
 8006c2e:	e770      	b.n	8006b12 <_strtod_l+0xa62>
 8006c30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006c34:	e7e0      	b.n	8006bf8 <_strtod_l+0xb48>
 8006c36:	a30e      	add	r3, pc, #56	@ (adr r3, 8006c70 <_strtod_l+0xbc0>)
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 ff6e 	bl	8000b1c <__aeabi_dcmplt>
 8006c40:	e798      	b.n	8006b74 <_strtod_l+0xac4>
 8006c42:	2300      	movs	r3, #0
 8006c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	f7ff ba6d 	b.w	800612a <_strtod_l+0x7a>
 8006c50:	2a65      	cmp	r2, #101	@ 0x65
 8006c52:	f43f ab66 	beq.w	8006322 <_strtod_l+0x272>
 8006c56:	2a45      	cmp	r2, #69	@ 0x45
 8006c58:	f43f ab63 	beq.w	8006322 <_strtod_l+0x272>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f7ff bb9e 	b.w	800639e <_strtod_l+0x2ee>
 8006c62:	bf00      	nop
 8006c64:	f3af 8000 	nop.w
 8006c68:	ffc00000 	.word	0xffc00000
 8006c6c:	41dfffff 	.word	0x41dfffff
 8006c70:	94a03595 	.word	0x94a03595
 8006c74:	3fcfffff 	.word	0x3fcfffff

08006c78 <strtod>:
 8006c78:	460a      	mov	r2, r1
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4802      	ldr	r0, [pc, #8]	@ (8006c88 <strtod+0x10>)
 8006c7e:	4b03      	ldr	r3, [pc, #12]	@ (8006c8c <strtod+0x14>)
 8006c80:	6800      	ldr	r0, [r0, #0]
 8006c82:	f7ff ba15 	b.w	80060b0 <_strtod_l>
 8006c86:	bf00      	nop
 8006c88:	200001d8 	.word	0x200001d8
 8006c8c:	2000006c 	.word	0x2000006c

08006c90 <_strtol_l.constprop.0>:
 8006c90:	2b24      	cmp	r3, #36	@ 0x24
 8006c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c96:	4686      	mov	lr, r0
 8006c98:	4690      	mov	r8, r2
 8006c9a:	d801      	bhi.n	8006ca0 <_strtol_l.constprop.0+0x10>
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d106      	bne.n	8006cae <_strtol_l.constprop.0+0x1e>
 8006ca0:	f000 f9e0 	bl	8007064 <__errno>
 8006ca4:	2316      	movs	r3, #22
 8006ca6:	6003      	str	r3, [r0, #0]
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cae:	4834      	ldr	r0, [pc, #208]	@ (8006d80 <_strtol_l.constprop.0+0xf0>)
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cb8:	5d06      	ldrb	r6, [r0, r4]
 8006cba:	f016 0608 	ands.w	r6, r6, #8
 8006cbe:	d1f8      	bne.n	8006cb2 <_strtol_l.constprop.0+0x22>
 8006cc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006cc2:	d12d      	bne.n	8006d20 <_strtol_l.constprop.0+0x90>
 8006cc4:	782c      	ldrb	r4, [r5, #0]
 8006cc6:	2601      	movs	r6, #1
 8006cc8:	1c95      	adds	r5, r2, #2
 8006cca:	f033 0210 	bics.w	r2, r3, #16
 8006cce:	d109      	bne.n	8006ce4 <_strtol_l.constprop.0+0x54>
 8006cd0:	2c30      	cmp	r4, #48	@ 0x30
 8006cd2:	d12a      	bne.n	8006d2a <_strtol_l.constprop.0+0x9a>
 8006cd4:	782a      	ldrb	r2, [r5, #0]
 8006cd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006cda:	2a58      	cmp	r2, #88	@ 0x58
 8006cdc:	d125      	bne.n	8006d2a <_strtol_l.constprop.0+0x9a>
 8006cde:	786c      	ldrb	r4, [r5, #1]
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	3502      	adds	r5, #2
 8006ce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cec:	2200      	movs	r2, #0
 8006cee:	fbbc f9f3 	udiv	r9, ip, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	fb03 ca19 	mls	sl, r3, r9, ip
 8006cf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006cfc:	2f09      	cmp	r7, #9
 8006cfe:	d81b      	bhi.n	8006d38 <_strtol_l.constprop.0+0xa8>
 8006d00:	463c      	mov	r4, r7
 8006d02:	42a3      	cmp	r3, r4
 8006d04:	dd27      	ble.n	8006d56 <_strtol_l.constprop.0+0xc6>
 8006d06:	1c57      	adds	r7, r2, #1
 8006d08:	d007      	beq.n	8006d1a <_strtol_l.constprop.0+0x8a>
 8006d0a:	4581      	cmp	r9, r0
 8006d0c:	d320      	bcc.n	8006d50 <_strtol_l.constprop.0+0xc0>
 8006d0e:	d101      	bne.n	8006d14 <_strtol_l.constprop.0+0x84>
 8006d10:	45a2      	cmp	sl, r4
 8006d12:	db1d      	blt.n	8006d50 <_strtol_l.constprop.0+0xc0>
 8006d14:	fb00 4003 	mla	r0, r0, r3, r4
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d1e:	e7eb      	b.n	8006cf8 <_strtol_l.constprop.0+0x68>
 8006d20:	2c2b      	cmp	r4, #43	@ 0x2b
 8006d22:	bf04      	itt	eq
 8006d24:	782c      	ldrbeq	r4, [r5, #0]
 8006d26:	1c95      	addeq	r5, r2, #2
 8006d28:	e7cf      	b.n	8006cca <_strtol_l.constprop.0+0x3a>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1da      	bne.n	8006ce4 <_strtol_l.constprop.0+0x54>
 8006d2e:	2c30      	cmp	r4, #48	@ 0x30
 8006d30:	bf0c      	ite	eq
 8006d32:	2308      	moveq	r3, #8
 8006d34:	230a      	movne	r3, #10
 8006d36:	e7d5      	b.n	8006ce4 <_strtol_l.constprop.0+0x54>
 8006d38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006d3c:	2f19      	cmp	r7, #25
 8006d3e:	d801      	bhi.n	8006d44 <_strtol_l.constprop.0+0xb4>
 8006d40:	3c37      	subs	r4, #55	@ 0x37
 8006d42:	e7de      	b.n	8006d02 <_strtol_l.constprop.0+0x72>
 8006d44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006d48:	2f19      	cmp	r7, #25
 8006d4a:	d804      	bhi.n	8006d56 <_strtol_l.constprop.0+0xc6>
 8006d4c:	3c57      	subs	r4, #87	@ 0x57
 8006d4e:	e7d8      	b.n	8006d02 <_strtol_l.constprop.0+0x72>
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295
 8006d54:	e7e1      	b.n	8006d1a <_strtol_l.constprop.0+0x8a>
 8006d56:	1c53      	adds	r3, r2, #1
 8006d58:	d108      	bne.n	8006d6c <_strtol_l.constprop.0+0xdc>
 8006d5a:	2322      	movs	r3, #34	@ 0x22
 8006d5c:	f8ce 3000 	str.w	r3, [lr]
 8006d60:	4660      	mov	r0, ip
 8006d62:	f1b8 0f00 	cmp.w	r8, #0
 8006d66:	d0a0      	beq.n	8006caa <_strtol_l.constprop.0+0x1a>
 8006d68:	1e69      	subs	r1, r5, #1
 8006d6a:	e006      	b.n	8006d7a <_strtol_l.constprop.0+0xea>
 8006d6c:	b106      	cbz	r6, 8006d70 <_strtol_l.constprop.0+0xe0>
 8006d6e:	4240      	negs	r0, r0
 8006d70:	f1b8 0f00 	cmp.w	r8, #0
 8006d74:	d099      	beq.n	8006caa <_strtol_l.constprop.0+0x1a>
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	d1f6      	bne.n	8006d68 <_strtol_l.constprop.0+0xd8>
 8006d7a:	f8c8 1000 	str.w	r1, [r8]
 8006d7e:	e794      	b.n	8006caa <_strtol_l.constprop.0+0x1a>
 8006d80:	08009591 	.word	0x08009591

08006d84 <strtol>:
 8006d84:	4613      	mov	r3, r2
 8006d86:	460a      	mov	r2, r1
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4802      	ldr	r0, [pc, #8]	@ (8006d94 <strtol+0x10>)
 8006d8c:	6800      	ldr	r0, [r0, #0]
 8006d8e:	f7ff bf7f 	b.w	8006c90 <_strtol_l.constprop.0>
 8006d92:	bf00      	nop
 8006d94:	200001d8 	.word	0x200001d8

08006d98 <std>:
 8006d98:	2300      	movs	r3, #0
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8006da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006da6:	6083      	str	r3, [r0, #8]
 8006da8:	8181      	strh	r1, [r0, #12]
 8006daa:	6643      	str	r3, [r0, #100]	@ 0x64
 8006dac:	81c2      	strh	r2, [r0, #14]
 8006dae:	6183      	str	r3, [r0, #24]
 8006db0:	4619      	mov	r1, r3
 8006db2:	2208      	movs	r2, #8
 8006db4:	305c      	adds	r0, #92	@ 0x5c
 8006db6:	f000 f8f4 	bl	8006fa2 <memset>
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x58>)
 8006dbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x5c>)
 8006dc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006df8 <std+0x60>)
 8006dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dfc <std+0x64>)
 8006dc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dca:	4b0d      	ldr	r3, [pc, #52]	@ (8006e00 <std+0x68>)
 8006dcc:	6224      	str	r4, [r4, #32]
 8006dce:	429c      	cmp	r4, r3
 8006dd0:	d006      	beq.n	8006de0 <std+0x48>
 8006dd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dd6:	4294      	cmp	r4, r2
 8006dd8:	d002      	beq.n	8006de0 <std+0x48>
 8006dda:	33d0      	adds	r3, #208	@ 0xd0
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	d105      	bne.n	8006dec <std+0x54>
 8006de0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f000 b966 	b.w	80070b8 <__retarget_lock_init_recursive>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	08006f1d 	.word	0x08006f1d
 8006df4:	08006f3f 	.word	0x08006f3f
 8006df8:	08006f77 	.word	0x08006f77
 8006dfc:	08006f9b 	.word	0x08006f9b
 8006e00:	20000a30 	.word	0x20000a30

08006e04 <stdio_exit_handler>:
 8006e04:	4a02      	ldr	r2, [pc, #8]	@ (8006e10 <stdio_exit_handler+0xc>)
 8006e06:	4903      	ldr	r1, [pc, #12]	@ (8006e14 <stdio_exit_handler+0x10>)
 8006e08:	4803      	ldr	r0, [pc, #12]	@ (8006e18 <stdio_exit_handler+0x14>)
 8006e0a:	f000 b869 	b.w	8006ee0 <_fwalk_sglue>
 8006e0e:	bf00      	nop
 8006e10:	20000060 	.word	0x20000060
 8006e14:	08008401 	.word	0x08008401
 8006e18:	200001dc 	.word	0x200001dc

08006e1c <cleanup_stdio>:
 8006e1c:	6841      	ldr	r1, [r0, #4]
 8006e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e50 <cleanup_stdio+0x34>)
 8006e20:	4299      	cmp	r1, r3
 8006e22:	b510      	push	{r4, lr}
 8006e24:	4604      	mov	r4, r0
 8006e26:	d001      	beq.n	8006e2c <cleanup_stdio+0x10>
 8006e28:	f001 faea 	bl	8008400 <_fflush_r>
 8006e2c:	68a1      	ldr	r1, [r4, #8]
 8006e2e:	4b09      	ldr	r3, [pc, #36]	@ (8006e54 <cleanup_stdio+0x38>)
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d002      	beq.n	8006e3a <cleanup_stdio+0x1e>
 8006e34:	4620      	mov	r0, r4
 8006e36:	f001 fae3 	bl	8008400 <_fflush_r>
 8006e3a:	68e1      	ldr	r1, [r4, #12]
 8006e3c:	4b06      	ldr	r3, [pc, #24]	@ (8006e58 <cleanup_stdio+0x3c>)
 8006e3e:	4299      	cmp	r1, r3
 8006e40:	d004      	beq.n	8006e4c <cleanup_stdio+0x30>
 8006e42:	4620      	mov	r0, r4
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f001 bada 	b.w	8008400 <_fflush_r>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000a30 	.word	0x20000a30
 8006e54:	20000a98 	.word	0x20000a98
 8006e58:	20000b00 	.word	0x20000b00

08006e5c <global_stdio_init.part.0>:
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <global_stdio_init.part.0+0x30>)
 8006e60:	4c0b      	ldr	r4, [pc, #44]	@ (8006e90 <global_stdio_init.part.0+0x34>)
 8006e62:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <global_stdio_init.part.0+0x38>)
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	4620      	mov	r0, r4
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2104      	movs	r1, #4
 8006e6c:	f7ff ff94 	bl	8006d98 <std>
 8006e70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e74:	2201      	movs	r2, #1
 8006e76:	2109      	movs	r1, #9
 8006e78:	f7ff ff8e 	bl	8006d98 <std>
 8006e7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e80:	2202      	movs	r2, #2
 8006e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e86:	2112      	movs	r1, #18
 8006e88:	f7ff bf86 	b.w	8006d98 <std>
 8006e8c:	20000b68 	.word	0x20000b68
 8006e90:	20000a30 	.word	0x20000a30
 8006e94:	08006e05 	.word	0x08006e05

08006e98 <__sfp_lock_acquire>:
 8006e98:	4801      	ldr	r0, [pc, #4]	@ (8006ea0 <__sfp_lock_acquire+0x8>)
 8006e9a:	f000 b90e 	b.w	80070ba <__retarget_lock_acquire_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	20000b71 	.word	0x20000b71

08006ea4 <__sfp_lock_release>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	@ (8006eac <__sfp_lock_release+0x8>)
 8006ea6:	f000 b909 	b.w	80070bc <__retarget_lock_release_recursive>
 8006eaa:	bf00      	nop
 8006eac:	20000b71 	.word	0x20000b71

08006eb0 <__sinit>:
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	f7ff fff0 	bl	8006e98 <__sfp_lock_acquire>
 8006eb8:	6a23      	ldr	r3, [r4, #32]
 8006eba:	b11b      	cbz	r3, 8006ec4 <__sinit+0x14>
 8006ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec0:	f7ff bff0 	b.w	8006ea4 <__sfp_lock_release>
 8006ec4:	4b04      	ldr	r3, [pc, #16]	@ (8006ed8 <__sinit+0x28>)
 8006ec6:	6223      	str	r3, [r4, #32]
 8006ec8:	4b04      	ldr	r3, [pc, #16]	@ (8006edc <__sinit+0x2c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1f5      	bne.n	8006ebc <__sinit+0xc>
 8006ed0:	f7ff ffc4 	bl	8006e5c <global_stdio_init.part.0>
 8006ed4:	e7f2      	b.n	8006ebc <__sinit+0xc>
 8006ed6:	bf00      	nop
 8006ed8:	08006e1d 	.word	0x08006e1d
 8006edc:	20000b68 	.word	0x20000b68

08006ee0 <_fwalk_sglue>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	4688      	mov	r8, r1
 8006ee8:	4614      	mov	r4, r2
 8006eea:	2600      	movs	r6, #0
 8006eec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ef0:	f1b9 0901 	subs.w	r9, r9, #1
 8006ef4:	d505      	bpl.n	8006f02 <_fwalk_sglue+0x22>
 8006ef6:	6824      	ldr	r4, [r4, #0]
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	d1f7      	bne.n	8006eec <_fwalk_sglue+0xc>
 8006efc:	4630      	mov	r0, r6
 8006efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d907      	bls.n	8006f18 <_fwalk_sglue+0x38>
 8006f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	d003      	beq.n	8006f18 <_fwalk_sglue+0x38>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c0      	blx	r8
 8006f16:	4306      	orrs	r6, r0
 8006f18:	3568      	adds	r5, #104	@ 0x68
 8006f1a:	e7e9      	b.n	8006ef0 <_fwalk_sglue+0x10>

08006f1c <__sread>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f000 f87a 	bl	800701c <_read_r>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f30:	181b      	addge	r3, r3, r0
 8006f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f36:	bfac      	ite	ge
 8006f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f3a:	81a3      	strhlt	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__swrite>:
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	461f      	mov	r7, r3
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	05db      	lsls	r3, r3, #23
 8006f48:	4605      	mov	r5, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	d505      	bpl.n	8006f5c <__swrite+0x1e>
 8006f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f54:	2302      	movs	r3, #2
 8006f56:	2200      	movs	r2, #0
 8006f58:	f000 f84e 	bl	8006ff8 <_lseek_r>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	4632      	mov	r2, r6
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f000 b865 	b.w	8007040 <_write_r>

08006f76 <__sseek>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 f83b 	bl	8006ff8 <_lseek_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	bf15      	itete	ne
 8006f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f92:	81a3      	strheq	r3, [r4, #12]
 8006f94:	bf18      	it	ne
 8006f96:	81a3      	strhne	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__sclose>:
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 b81b 	b.w	8006fd8 <_close_r>

08006fa2 <memset>:
 8006fa2:	4402      	add	r2, r0
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d100      	bne.n	8006fac <memset+0xa>
 8006faa:	4770      	bx	lr
 8006fac:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb0:	e7f9      	b.n	8006fa6 <memset+0x4>

08006fb2 <strncmp>:
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	b16a      	cbz	r2, 8006fd2 <strncmp+0x20>
 8006fb6:	3901      	subs	r1, #1
 8006fb8:	1884      	adds	r4, r0, r2
 8006fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fbe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d103      	bne.n	8006fce <strncmp+0x1c>
 8006fc6:	42a0      	cmp	r0, r4
 8006fc8:	d001      	beq.n	8006fce <strncmp+0x1c>
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	d1f5      	bne.n	8006fba <strncmp+0x8>
 8006fce:	1ad0      	subs	r0, r2, r3
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	e7fc      	b.n	8006fd0 <strncmp+0x1e>
	...

08006fd8 <_close_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	@ (8006ff4 <_close_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fb f931 	bl	800224a <_close>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_close_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_close_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20000b6c 	.word	0x20000b6c

08006ff8 <_lseek_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	@ (8007018 <_lseek_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fb f946 	bl	8002298 <_lseek>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_lseek_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_lseek_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20000b6c 	.word	0x20000b6c

0800701c <_read_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	@ (800703c <_read_r+0x20>)
 8007020:	4604      	mov	r4, r0
 8007022:	4608      	mov	r0, r1
 8007024:	4611      	mov	r1, r2
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7fb f8d4 	bl	80021d8 <_read>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_read_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_read_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	20000b6c 	.word	0x20000b6c

08007040 <_write_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d07      	ldr	r5, [pc, #28]	@ (8007060 <_write_r+0x20>)
 8007044:	4604      	mov	r4, r0
 8007046:	4608      	mov	r0, r1
 8007048:	4611      	mov	r1, r2
 800704a:	2200      	movs	r2, #0
 800704c:	602a      	str	r2, [r5, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	f7fb f8df 	bl	8002212 <_write>
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d102      	bne.n	800705e <_write_r+0x1e>
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	b103      	cbz	r3, 800705e <_write_r+0x1e>
 800705c:	6023      	str	r3, [r4, #0]
 800705e:	bd38      	pop	{r3, r4, r5, pc}
 8007060:	20000b6c 	.word	0x20000b6c

08007064 <__errno>:
 8007064:	4b01      	ldr	r3, [pc, #4]	@ (800706c <__errno+0x8>)
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	200001d8 	.word	0x200001d8

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	@ (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	@ (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	@ (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	@ (80070b4 <__libc_init_array+0x44>)
 8007084:	f002 fa3c 	bl	8009500 <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08009908 	.word	0x08009908
 80070ac:	08009908 	.word	0x08009908
 80070b0:	08009908 	.word	0x08009908
 80070b4:	0800990c 	.word	0x0800990c

080070b8 <__retarget_lock_init_recursive>:
 80070b8:	4770      	bx	lr

080070ba <__retarget_lock_acquire_recursive>:
 80070ba:	4770      	bx	lr

080070bc <__retarget_lock_release_recursive>:
 80070bc:	4770      	bx	lr

080070be <memcpy>:
 80070be:	440a      	add	r2, r1
 80070c0:	4291      	cmp	r1, r2
 80070c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c6:	d100      	bne.n	80070ca <memcpy+0xc>
 80070c8:	4770      	bx	lr
 80070ca:	b510      	push	{r4, lr}
 80070cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d4:	4291      	cmp	r1, r2
 80070d6:	d1f9      	bne.n	80070cc <memcpy+0xe>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	0000      	movs	r0, r0
 80070dc:	0000      	movs	r0, r0
	...

080070e0 <nan>:
 80070e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80070e8 <nan+0x8>
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	00000000 	.word	0x00000000
 80070ec:	7ff80000 	.word	0x7ff80000

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d041      	beq.n	800717c <_free_r+0x8c>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f000 fc2c 	bl	8007960 <__malloc_lock>
 8007108:	4a1d      	ldr	r2, [pc, #116]	@ (8007180 <_free_r+0x90>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x2c>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007118:	f000 bc28 	b.w	800796c <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x42>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x1e>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x4c>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x42>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1850      	adds	r0, r2, r1
 8007140:	42a0      	cmp	r0, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x6c>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	4401      	add	r1, r0
 8007148:	1850      	adds	r0, r2, r1
 800714a:	4283      	cmp	r3, r0
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x22>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	6053      	str	r3, [r2, #4]
 8007156:	4408      	add	r0, r1
 8007158:	6010      	str	r0, [r2, #0]
 800715a:	e7da      	b.n	8007112 <_free_r+0x22>
 800715c:	d902      	bls.n	8007164 <_free_r+0x74>
 800715e:	230c      	movs	r3, #12
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x22>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf04      	itt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	bf04      	itt	eq
 8007174:	1809      	addeq	r1, r1, r0
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	e7ca      	b.n	8007112 <_free_r+0x22>
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	20000b78 	.word	0x20000b78

08007184 <rshift>:
 8007184:	6903      	ldr	r3, [r0, #16]
 8007186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800718a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800718e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007192:	f100 0414 	add.w	r4, r0, #20
 8007196:	dd45      	ble.n	8007224 <rshift+0xa0>
 8007198:	f011 011f 	ands.w	r1, r1, #31
 800719c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80071a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80071a4:	d10c      	bne.n	80071c0 <rshift+0x3c>
 80071a6:	f100 0710 	add.w	r7, r0, #16
 80071aa:	4629      	mov	r1, r5
 80071ac:	42b1      	cmp	r1, r6
 80071ae:	d334      	bcc.n	800721a <rshift+0x96>
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	1eea      	subs	r2, r5, #3
 80071b6:	4296      	cmp	r6, r2
 80071b8:	bf38      	it	cc
 80071ba:	2300      	movcc	r3, #0
 80071bc:	4423      	add	r3, r4
 80071be:	e015      	b.n	80071ec <rshift+0x68>
 80071c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071c4:	f1c1 0820 	rsb	r8, r1, #32
 80071c8:	40cf      	lsrs	r7, r1
 80071ca:	f105 0e04 	add.w	lr, r5, #4
 80071ce:	46a1      	mov	r9, r4
 80071d0:	4576      	cmp	r6, lr
 80071d2:	46f4      	mov	ip, lr
 80071d4:	d815      	bhi.n	8007202 <rshift+0x7e>
 80071d6:	1a9a      	subs	r2, r3, r2
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	3a04      	subs	r2, #4
 80071dc:	3501      	adds	r5, #1
 80071de:	42ae      	cmp	r6, r5
 80071e0:	bf38      	it	cc
 80071e2:	2200      	movcc	r2, #0
 80071e4:	18a3      	adds	r3, r4, r2
 80071e6:	50a7      	str	r7, [r4, r2]
 80071e8:	b107      	cbz	r7, 80071ec <rshift+0x68>
 80071ea:	3304      	adds	r3, #4
 80071ec:	1b1a      	subs	r2, r3, r4
 80071ee:	42a3      	cmp	r3, r4
 80071f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071f4:	bf08      	it	eq
 80071f6:	2300      	moveq	r3, #0
 80071f8:	6102      	str	r2, [r0, #16]
 80071fa:	bf08      	it	eq
 80071fc:	6143      	streq	r3, [r0, #20]
 80071fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007202:	f8dc c000 	ldr.w	ip, [ip]
 8007206:	fa0c fc08 	lsl.w	ip, ip, r8
 800720a:	ea4c 0707 	orr.w	r7, ip, r7
 800720e:	f849 7b04 	str.w	r7, [r9], #4
 8007212:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007216:	40cf      	lsrs	r7, r1
 8007218:	e7da      	b.n	80071d0 <rshift+0x4c>
 800721a:	f851 cb04 	ldr.w	ip, [r1], #4
 800721e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007222:	e7c3      	b.n	80071ac <rshift+0x28>
 8007224:	4623      	mov	r3, r4
 8007226:	e7e1      	b.n	80071ec <rshift+0x68>

08007228 <__hexdig_fun>:
 8007228:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800722c:	2b09      	cmp	r3, #9
 800722e:	d802      	bhi.n	8007236 <__hexdig_fun+0xe>
 8007230:	3820      	subs	r0, #32
 8007232:	b2c0      	uxtb	r0, r0
 8007234:	4770      	bx	lr
 8007236:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800723a:	2b05      	cmp	r3, #5
 800723c:	d801      	bhi.n	8007242 <__hexdig_fun+0x1a>
 800723e:	3847      	subs	r0, #71	@ 0x47
 8007240:	e7f7      	b.n	8007232 <__hexdig_fun+0xa>
 8007242:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007246:	2b05      	cmp	r3, #5
 8007248:	d801      	bhi.n	800724e <__hexdig_fun+0x26>
 800724a:	3827      	subs	r0, #39	@ 0x27
 800724c:	e7f1      	b.n	8007232 <__hexdig_fun+0xa>
 800724e:	2000      	movs	r0, #0
 8007250:	4770      	bx	lr
	...

08007254 <__gethex>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	b085      	sub	sp, #20
 800725a:	468a      	mov	sl, r1
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	680b      	ldr	r3, [r1, #0]
 8007260:	9001      	str	r0, [sp, #4]
 8007262:	4690      	mov	r8, r2
 8007264:	1c9c      	adds	r4, r3, #2
 8007266:	46a1      	mov	r9, r4
 8007268:	f814 0b01 	ldrb.w	r0, [r4], #1
 800726c:	2830      	cmp	r0, #48	@ 0x30
 800726e:	d0fa      	beq.n	8007266 <__gethex+0x12>
 8007270:	eba9 0303 	sub.w	r3, r9, r3
 8007274:	f1a3 0b02 	sub.w	fp, r3, #2
 8007278:	f7ff ffd6 	bl	8007228 <__hexdig_fun>
 800727c:	4605      	mov	r5, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	d168      	bne.n	8007354 <__gethex+0x100>
 8007282:	49a0      	ldr	r1, [pc, #640]	@ (8007504 <__gethex+0x2b0>)
 8007284:	2201      	movs	r2, #1
 8007286:	4648      	mov	r0, r9
 8007288:	f7ff fe93 	bl	8006fb2 <strncmp>
 800728c:	4607      	mov	r7, r0
 800728e:	2800      	cmp	r0, #0
 8007290:	d167      	bne.n	8007362 <__gethex+0x10e>
 8007292:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007296:	4626      	mov	r6, r4
 8007298:	f7ff ffc6 	bl	8007228 <__hexdig_fun>
 800729c:	2800      	cmp	r0, #0
 800729e:	d062      	beq.n	8007366 <__gethex+0x112>
 80072a0:	4623      	mov	r3, r4
 80072a2:	7818      	ldrb	r0, [r3, #0]
 80072a4:	2830      	cmp	r0, #48	@ 0x30
 80072a6:	4699      	mov	r9, r3
 80072a8:	f103 0301 	add.w	r3, r3, #1
 80072ac:	d0f9      	beq.n	80072a2 <__gethex+0x4e>
 80072ae:	f7ff ffbb 	bl	8007228 <__hexdig_fun>
 80072b2:	fab0 f580 	clz	r5, r0
 80072b6:	096d      	lsrs	r5, r5, #5
 80072b8:	f04f 0b01 	mov.w	fp, #1
 80072bc:	464a      	mov	r2, r9
 80072be:	4616      	mov	r6, r2
 80072c0:	3201      	adds	r2, #1
 80072c2:	7830      	ldrb	r0, [r6, #0]
 80072c4:	f7ff ffb0 	bl	8007228 <__hexdig_fun>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d1f8      	bne.n	80072be <__gethex+0x6a>
 80072cc:	498d      	ldr	r1, [pc, #564]	@ (8007504 <__gethex+0x2b0>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	4630      	mov	r0, r6
 80072d2:	f7ff fe6e 	bl	8006fb2 <strncmp>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d13f      	bne.n	800735a <__gethex+0x106>
 80072da:	b944      	cbnz	r4, 80072ee <__gethex+0x9a>
 80072dc:	1c74      	adds	r4, r6, #1
 80072de:	4622      	mov	r2, r4
 80072e0:	4616      	mov	r6, r2
 80072e2:	3201      	adds	r2, #1
 80072e4:	7830      	ldrb	r0, [r6, #0]
 80072e6:	f7ff ff9f 	bl	8007228 <__hexdig_fun>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d1f8      	bne.n	80072e0 <__gethex+0x8c>
 80072ee:	1ba4      	subs	r4, r4, r6
 80072f0:	00a7      	lsls	r7, r4, #2
 80072f2:	7833      	ldrb	r3, [r6, #0]
 80072f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80072f8:	2b50      	cmp	r3, #80	@ 0x50
 80072fa:	d13e      	bne.n	800737a <__gethex+0x126>
 80072fc:	7873      	ldrb	r3, [r6, #1]
 80072fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8007300:	d033      	beq.n	800736a <__gethex+0x116>
 8007302:	2b2d      	cmp	r3, #45	@ 0x2d
 8007304:	d034      	beq.n	8007370 <__gethex+0x11c>
 8007306:	1c71      	adds	r1, r6, #1
 8007308:	2400      	movs	r4, #0
 800730a:	7808      	ldrb	r0, [r1, #0]
 800730c:	f7ff ff8c 	bl	8007228 <__hexdig_fun>
 8007310:	1e43      	subs	r3, r0, #1
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b18      	cmp	r3, #24
 8007316:	d830      	bhi.n	800737a <__gethex+0x126>
 8007318:	f1a0 0210 	sub.w	r2, r0, #16
 800731c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007320:	f7ff ff82 	bl	8007228 <__hexdig_fun>
 8007324:	f100 3cff 	add.w	ip, r0, #4294967295
 8007328:	fa5f fc8c 	uxtb.w	ip, ip
 800732c:	f1bc 0f18 	cmp.w	ip, #24
 8007330:	f04f 030a 	mov.w	r3, #10
 8007334:	d91e      	bls.n	8007374 <__gethex+0x120>
 8007336:	b104      	cbz	r4, 800733a <__gethex+0xe6>
 8007338:	4252      	negs	r2, r2
 800733a:	4417      	add	r7, r2
 800733c:	f8ca 1000 	str.w	r1, [sl]
 8007340:	b1ed      	cbz	r5, 800737e <__gethex+0x12a>
 8007342:	f1bb 0f00 	cmp.w	fp, #0
 8007346:	bf0c      	ite	eq
 8007348:	2506      	moveq	r5, #6
 800734a:	2500      	movne	r5, #0
 800734c:	4628      	mov	r0, r5
 800734e:	b005      	add	sp, #20
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	2500      	movs	r5, #0
 8007356:	462c      	mov	r4, r5
 8007358:	e7b0      	b.n	80072bc <__gethex+0x68>
 800735a:	2c00      	cmp	r4, #0
 800735c:	d1c7      	bne.n	80072ee <__gethex+0x9a>
 800735e:	4627      	mov	r7, r4
 8007360:	e7c7      	b.n	80072f2 <__gethex+0x9e>
 8007362:	464e      	mov	r6, r9
 8007364:	462f      	mov	r7, r5
 8007366:	2501      	movs	r5, #1
 8007368:	e7c3      	b.n	80072f2 <__gethex+0x9e>
 800736a:	2400      	movs	r4, #0
 800736c:	1cb1      	adds	r1, r6, #2
 800736e:	e7cc      	b.n	800730a <__gethex+0xb6>
 8007370:	2401      	movs	r4, #1
 8007372:	e7fb      	b.n	800736c <__gethex+0x118>
 8007374:	fb03 0002 	mla	r0, r3, r2, r0
 8007378:	e7ce      	b.n	8007318 <__gethex+0xc4>
 800737a:	4631      	mov	r1, r6
 800737c:	e7de      	b.n	800733c <__gethex+0xe8>
 800737e:	eba6 0309 	sub.w	r3, r6, r9
 8007382:	3b01      	subs	r3, #1
 8007384:	4629      	mov	r1, r5
 8007386:	2b07      	cmp	r3, #7
 8007388:	dc0a      	bgt.n	80073a0 <__gethex+0x14c>
 800738a:	9801      	ldr	r0, [sp, #4]
 800738c:	f000 faf4 	bl	8007978 <_Balloc>
 8007390:	4604      	mov	r4, r0
 8007392:	b940      	cbnz	r0, 80073a6 <__gethex+0x152>
 8007394:	4b5c      	ldr	r3, [pc, #368]	@ (8007508 <__gethex+0x2b4>)
 8007396:	4602      	mov	r2, r0
 8007398:	21e4      	movs	r1, #228	@ 0xe4
 800739a:	485c      	ldr	r0, [pc, #368]	@ (800750c <__gethex+0x2b8>)
 800739c:	f001 f868 	bl	8008470 <__assert_func>
 80073a0:	3101      	adds	r1, #1
 80073a2:	105b      	asrs	r3, r3, #1
 80073a4:	e7ef      	b.n	8007386 <__gethex+0x132>
 80073a6:	f100 0a14 	add.w	sl, r0, #20
 80073aa:	2300      	movs	r3, #0
 80073ac:	4655      	mov	r5, sl
 80073ae:	469b      	mov	fp, r3
 80073b0:	45b1      	cmp	r9, r6
 80073b2:	d337      	bcc.n	8007424 <__gethex+0x1d0>
 80073b4:	f845 bb04 	str.w	fp, [r5], #4
 80073b8:	eba5 050a 	sub.w	r5, r5, sl
 80073bc:	10ad      	asrs	r5, r5, #2
 80073be:	6125      	str	r5, [r4, #16]
 80073c0:	4658      	mov	r0, fp
 80073c2:	f000 fbcb 	bl	8007b5c <__hi0bits>
 80073c6:	016d      	lsls	r5, r5, #5
 80073c8:	f8d8 6000 	ldr.w	r6, [r8]
 80073cc:	1a2d      	subs	r5, r5, r0
 80073ce:	42b5      	cmp	r5, r6
 80073d0:	dd54      	ble.n	800747c <__gethex+0x228>
 80073d2:	1bad      	subs	r5, r5, r6
 80073d4:	4629      	mov	r1, r5
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 ff5f 	bl	800829a <__any_on>
 80073dc:	4681      	mov	r9, r0
 80073de:	b178      	cbz	r0, 8007400 <__gethex+0x1ac>
 80073e0:	1e6b      	subs	r3, r5, #1
 80073e2:	1159      	asrs	r1, r3, #5
 80073e4:	f003 021f 	and.w	r2, r3, #31
 80073e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80073ec:	f04f 0901 	mov.w	r9, #1
 80073f0:	fa09 f202 	lsl.w	r2, r9, r2
 80073f4:	420a      	tst	r2, r1
 80073f6:	d003      	beq.n	8007400 <__gethex+0x1ac>
 80073f8:	454b      	cmp	r3, r9
 80073fa:	dc36      	bgt.n	800746a <__gethex+0x216>
 80073fc:	f04f 0902 	mov.w	r9, #2
 8007400:	4629      	mov	r1, r5
 8007402:	4620      	mov	r0, r4
 8007404:	f7ff febe 	bl	8007184 <rshift>
 8007408:	442f      	add	r7, r5
 800740a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800740e:	42bb      	cmp	r3, r7
 8007410:	da42      	bge.n	8007498 <__gethex+0x244>
 8007412:	9801      	ldr	r0, [sp, #4]
 8007414:	4621      	mov	r1, r4
 8007416:	f000 faef 	bl	80079f8 <_Bfree>
 800741a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800741c:	2300      	movs	r3, #0
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	25a3      	movs	r5, #163	@ 0xa3
 8007422:	e793      	b.n	800734c <__gethex+0xf8>
 8007424:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007428:	2a2e      	cmp	r2, #46	@ 0x2e
 800742a:	d012      	beq.n	8007452 <__gethex+0x1fe>
 800742c:	2b20      	cmp	r3, #32
 800742e:	d104      	bne.n	800743a <__gethex+0x1e6>
 8007430:	f845 bb04 	str.w	fp, [r5], #4
 8007434:	f04f 0b00 	mov.w	fp, #0
 8007438:	465b      	mov	r3, fp
 800743a:	7830      	ldrb	r0, [r6, #0]
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	f7ff fef3 	bl	8007228 <__hexdig_fun>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	f000 000f 	and.w	r0, r0, #15
 8007448:	4098      	lsls	r0, r3
 800744a:	ea4b 0b00 	orr.w	fp, fp, r0
 800744e:	3304      	adds	r3, #4
 8007450:	e7ae      	b.n	80073b0 <__gethex+0x15c>
 8007452:	45b1      	cmp	r9, r6
 8007454:	d8ea      	bhi.n	800742c <__gethex+0x1d8>
 8007456:	492b      	ldr	r1, [pc, #172]	@ (8007504 <__gethex+0x2b0>)
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	4630      	mov	r0, r6
 800745e:	f7ff fda8 	bl	8006fb2 <strncmp>
 8007462:	9b03      	ldr	r3, [sp, #12]
 8007464:	2800      	cmp	r0, #0
 8007466:	d1e1      	bne.n	800742c <__gethex+0x1d8>
 8007468:	e7a2      	b.n	80073b0 <__gethex+0x15c>
 800746a:	1ea9      	subs	r1, r5, #2
 800746c:	4620      	mov	r0, r4
 800746e:	f000 ff14 	bl	800829a <__any_on>
 8007472:	2800      	cmp	r0, #0
 8007474:	d0c2      	beq.n	80073fc <__gethex+0x1a8>
 8007476:	f04f 0903 	mov.w	r9, #3
 800747a:	e7c1      	b.n	8007400 <__gethex+0x1ac>
 800747c:	da09      	bge.n	8007492 <__gethex+0x23e>
 800747e:	1b75      	subs	r5, r6, r5
 8007480:	4621      	mov	r1, r4
 8007482:	9801      	ldr	r0, [sp, #4]
 8007484:	462a      	mov	r2, r5
 8007486:	f000 fccf 	bl	8007e28 <__lshift>
 800748a:	1b7f      	subs	r7, r7, r5
 800748c:	4604      	mov	r4, r0
 800748e:	f100 0a14 	add.w	sl, r0, #20
 8007492:	f04f 0900 	mov.w	r9, #0
 8007496:	e7b8      	b.n	800740a <__gethex+0x1b6>
 8007498:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800749c:	42bd      	cmp	r5, r7
 800749e:	dd6f      	ble.n	8007580 <__gethex+0x32c>
 80074a0:	1bed      	subs	r5, r5, r7
 80074a2:	42ae      	cmp	r6, r5
 80074a4:	dc34      	bgt.n	8007510 <__gethex+0x2bc>
 80074a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d022      	beq.n	80074f4 <__gethex+0x2a0>
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d024      	beq.n	80074fc <__gethex+0x2a8>
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d115      	bne.n	80074e2 <__gethex+0x28e>
 80074b6:	42ae      	cmp	r6, r5
 80074b8:	d113      	bne.n	80074e2 <__gethex+0x28e>
 80074ba:	2e01      	cmp	r6, #1
 80074bc:	d10b      	bne.n	80074d6 <__gethex+0x282>
 80074be:	9a02      	ldr	r2, [sp, #8]
 80074c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	2301      	movs	r3, #1
 80074c8:	6123      	str	r3, [r4, #16]
 80074ca:	f8ca 3000 	str.w	r3, [sl]
 80074ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d0:	2562      	movs	r5, #98	@ 0x62
 80074d2:	601c      	str	r4, [r3, #0]
 80074d4:	e73a      	b.n	800734c <__gethex+0xf8>
 80074d6:	1e71      	subs	r1, r6, #1
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 fede 	bl	800829a <__any_on>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d1ed      	bne.n	80074be <__gethex+0x26a>
 80074e2:	9801      	ldr	r0, [sp, #4]
 80074e4:	4621      	mov	r1, r4
 80074e6:	f000 fa87 	bl	80079f8 <_Bfree>
 80074ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074ec:	2300      	movs	r3, #0
 80074ee:	6013      	str	r3, [r2, #0]
 80074f0:	2550      	movs	r5, #80	@ 0x50
 80074f2:	e72b      	b.n	800734c <__gethex+0xf8>
 80074f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f3      	bne.n	80074e2 <__gethex+0x28e>
 80074fa:	e7e0      	b.n	80074be <__gethex+0x26a>
 80074fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1dd      	bne.n	80074be <__gethex+0x26a>
 8007502:	e7ee      	b.n	80074e2 <__gethex+0x28e>
 8007504:	08009530 	.word	0x08009530
 8007508:	08009699 	.word	0x08009699
 800750c:	080096aa 	.word	0x080096aa
 8007510:	1e6f      	subs	r7, r5, #1
 8007512:	f1b9 0f00 	cmp.w	r9, #0
 8007516:	d130      	bne.n	800757a <__gethex+0x326>
 8007518:	b127      	cbz	r7, 8007524 <__gethex+0x2d0>
 800751a:	4639      	mov	r1, r7
 800751c:	4620      	mov	r0, r4
 800751e:	f000 febc 	bl	800829a <__any_on>
 8007522:	4681      	mov	r9, r0
 8007524:	117a      	asrs	r2, r7, #5
 8007526:	2301      	movs	r3, #1
 8007528:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800752c:	f007 071f 	and.w	r7, r7, #31
 8007530:	40bb      	lsls	r3, r7
 8007532:	4213      	tst	r3, r2
 8007534:	4629      	mov	r1, r5
 8007536:	4620      	mov	r0, r4
 8007538:	bf18      	it	ne
 800753a:	f049 0902 	orrne.w	r9, r9, #2
 800753e:	f7ff fe21 	bl	8007184 <rshift>
 8007542:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007546:	1b76      	subs	r6, r6, r5
 8007548:	2502      	movs	r5, #2
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	d047      	beq.n	80075e0 <__gethex+0x38c>
 8007550:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d015      	beq.n	8007584 <__gethex+0x330>
 8007558:	2b03      	cmp	r3, #3
 800755a:	d017      	beq.n	800758c <__gethex+0x338>
 800755c:	2b01      	cmp	r3, #1
 800755e:	d109      	bne.n	8007574 <__gethex+0x320>
 8007560:	f019 0f02 	tst.w	r9, #2
 8007564:	d006      	beq.n	8007574 <__gethex+0x320>
 8007566:	f8da 3000 	ldr.w	r3, [sl]
 800756a:	ea49 0903 	orr.w	r9, r9, r3
 800756e:	f019 0f01 	tst.w	r9, #1
 8007572:	d10e      	bne.n	8007592 <__gethex+0x33e>
 8007574:	f045 0510 	orr.w	r5, r5, #16
 8007578:	e032      	b.n	80075e0 <__gethex+0x38c>
 800757a:	f04f 0901 	mov.w	r9, #1
 800757e:	e7d1      	b.n	8007524 <__gethex+0x2d0>
 8007580:	2501      	movs	r5, #1
 8007582:	e7e2      	b.n	800754a <__gethex+0x2f6>
 8007584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007586:	f1c3 0301 	rsb	r3, r3, #1
 800758a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800758c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d0f0      	beq.n	8007574 <__gethex+0x320>
 8007592:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007596:	f104 0314 	add.w	r3, r4, #20
 800759a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800759e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075a2:	f04f 0c00 	mov.w	ip, #0
 80075a6:	4618      	mov	r0, r3
 80075a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075b0:	d01b      	beq.n	80075ea <__gethex+0x396>
 80075b2:	3201      	adds	r2, #1
 80075b4:	6002      	str	r2, [r0, #0]
 80075b6:	2d02      	cmp	r5, #2
 80075b8:	f104 0314 	add.w	r3, r4, #20
 80075bc:	d13c      	bne.n	8007638 <__gethex+0x3e4>
 80075be:	f8d8 2000 	ldr.w	r2, [r8]
 80075c2:	3a01      	subs	r2, #1
 80075c4:	42b2      	cmp	r2, r6
 80075c6:	d109      	bne.n	80075dc <__gethex+0x388>
 80075c8:	1171      	asrs	r1, r6, #5
 80075ca:	2201      	movs	r2, #1
 80075cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075d0:	f006 061f 	and.w	r6, r6, #31
 80075d4:	fa02 f606 	lsl.w	r6, r2, r6
 80075d8:	421e      	tst	r6, r3
 80075da:	d13a      	bne.n	8007652 <__gethex+0x3fe>
 80075dc:	f045 0520 	orr.w	r5, r5, #32
 80075e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075e2:	601c      	str	r4, [r3, #0]
 80075e4:	9b02      	ldr	r3, [sp, #8]
 80075e6:	601f      	str	r7, [r3, #0]
 80075e8:	e6b0      	b.n	800734c <__gethex+0xf8>
 80075ea:	4299      	cmp	r1, r3
 80075ec:	f843 cc04 	str.w	ip, [r3, #-4]
 80075f0:	d8d9      	bhi.n	80075a6 <__gethex+0x352>
 80075f2:	68a3      	ldr	r3, [r4, #8]
 80075f4:	459b      	cmp	fp, r3
 80075f6:	db17      	blt.n	8007628 <__gethex+0x3d4>
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	9801      	ldr	r0, [sp, #4]
 80075fc:	3101      	adds	r1, #1
 80075fe:	f000 f9bb 	bl	8007978 <_Balloc>
 8007602:	4681      	mov	r9, r0
 8007604:	b918      	cbnz	r0, 800760e <__gethex+0x3ba>
 8007606:	4b1a      	ldr	r3, [pc, #104]	@ (8007670 <__gethex+0x41c>)
 8007608:	4602      	mov	r2, r0
 800760a:	2184      	movs	r1, #132	@ 0x84
 800760c:	e6c5      	b.n	800739a <__gethex+0x146>
 800760e:	6922      	ldr	r2, [r4, #16]
 8007610:	3202      	adds	r2, #2
 8007612:	f104 010c 	add.w	r1, r4, #12
 8007616:	0092      	lsls	r2, r2, #2
 8007618:	300c      	adds	r0, #12
 800761a:	f7ff fd50 	bl	80070be <memcpy>
 800761e:	4621      	mov	r1, r4
 8007620:	9801      	ldr	r0, [sp, #4]
 8007622:	f000 f9e9 	bl	80079f8 <_Bfree>
 8007626:	464c      	mov	r4, r9
 8007628:	6923      	ldr	r3, [r4, #16]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007630:	6122      	str	r2, [r4, #16]
 8007632:	2201      	movs	r2, #1
 8007634:	615a      	str	r2, [r3, #20]
 8007636:	e7be      	b.n	80075b6 <__gethex+0x362>
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	455a      	cmp	r2, fp
 800763c:	dd0b      	ble.n	8007656 <__gethex+0x402>
 800763e:	2101      	movs	r1, #1
 8007640:	4620      	mov	r0, r4
 8007642:	f7ff fd9f 	bl	8007184 <rshift>
 8007646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800764a:	3701      	adds	r7, #1
 800764c:	42bb      	cmp	r3, r7
 800764e:	f6ff aee0 	blt.w	8007412 <__gethex+0x1be>
 8007652:	2501      	movs	r5, #1
 8007654:	e7c2      	b.n	80075dc <__gethex+0x388>
 8007656:	f016 061f 	ands.w	r6, r6, #31
 800765a:	d0fa      	beq.n	8007652 <__gethex+0x3fe>
 800765c:	4453      	add	r3, sl
 800765e:	f1c6 0620 	rsb	r6, r6, #32
 8007662:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007666:	f000 fa79 	bl	8007b5c <__hi0bits>
 800766a:	42b0      	cmp	r0, r6
 800766c:	dbe7      	blt.n	800763e <__gethex+0x3ea>
 800766e:	e7f0      	b.n	8007652 <__gethex+0x3fe>
 8007670:	08009699 	.word	0x08009699

08007674 <L_shift>:
 8007674:	f1c2 0208 	rsb	r2, r2, #8
 8007678:	0092      	lsls	r2, r2, #2
 800767a:	b570      	push	{r4, r5, r6, lr}
 800767c:	f1c2 0620 	rsb	r6, r2, #32
 8007680:	6843      	ldr	r3, [r0, #4]
 8007682:	6804      	ldr	r4, [r0, #0]
 8007684:	fa03 f506 	lsl.w	r5, r3, r6
 8007688:	432c      	orrs	r4, r5
 800768a:	40d3      	lsrs	r3, r2
 800768c:	6004      	str	r4, [r0, #0]
 800768e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007692:	4288      	cmp	r0, r1
 8007694:	d3f4      	bcc.n	8007680 <L_shift+0xc>
 8007696:	bd70      	pop	{r4, r5, r6, pc}

08007698 <__match>:
 8007698:	b530      	push	{r4, r5, lr}
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	3301      	adds	r3, #1
 800769e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076a2:	b914      	cbnz	r4, 80076aa <__match+0x12>
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	2001      	movs	r0, #1
 80076a8:	bd30      	pop	{r4, r5, pc}
 80076aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80076b2:	2d19      	cmp	r5, #25
 80076b4:	bf98      	it	ls
 80076b6:	3220      	addls	r2, #32
 80076b8:	42a2      	cmp	r2, r4
 80076ba:	d0f0      	beq.n	800769e <__match+0x6>
 80076bc:	2000      	movs	r0, #0
 80076be:	e7f3      	b.n	80076a8 <__match+0x10>

080076c0 <__hexnan>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	680b      	ldr	r3, [r1, #0]
 80076c6:	6801      	ldr	r1, [r0, #0]
 80076c8:	115e      	asrs	r6, r3, #5
 80076ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076ce:	f013 031f 	ands.w	r3, r3, #31
 80076d2:	b087      	sub	sp, #28
 80076d4:	bf18      	it	ne
 80076d6:	3604      	addne	r6, #4
 80076d8:	2500      	movs	r5, #0
 80076da:	1f37      	subs	r7, r6, #4
 80076dc:	4682      	mov	sl, r0
 80076de:	4690      	mov	r8, r2
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80076e6:	46b9      	mov	r9, r7
 80076e8:	463c      	mov	r4, r7
 80076ea:	9502      	str	r5, [sp, #8]
 80076ec:	46ab      	mov	fp, r5
 80076ee:	784a      	ldrb	r2, [r1, #1]
 80076f0:	1c4b      	adds	r3, r1, #1
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	b342      	cbz	r2, 8007748 <__hexnan+0x88>
 80076f6:	4610      	mov	r0, r2
 80076f8:	9105      	str	r1, [sp, #20]
 80076fa:	9204      	str	r2, [sp, #16]
 80076fc:	f7ff fd94 	bl	8007228 <__hexdig_fun>
 8007700:	2800      	cmp	r0, #0
 8007702:	d151      	bne.n	80077a8 <__hexnan+0xe8>
 8007704:	9a04      	ldr	r2, [sp, #16]
 8007706:	9905      	ldr	r1, [sp, #20]
 8007708:	2a20      	cmp	r2, #32
 800770a:	d818      	bhi.n	800773e <__hexnan+0x7e>
 800770c:	9b02      	ldr	r3, [sp, #8]
 800770e:	459b      	cmp	fp, r3
 8007710:	dd13      	ble.n	800773a <__hexnan+0x7a>
 8007712:	454c      	cmp	r4, r9
 8007714:	d206      	bcs.n	8007724 <__hexnan+0x64>
 8007716:	2d07      	cmp	r5, #7
 8007718:	dc04      	bgt.n	8007724 <__hexnan+0x64>
 800771a:	462a      	mov	r2, r5
 800771c:	4649      	mov	r1, r9
 800771e:	4620      	mov	r0, r4
 8007720:	f7ff ffa8 	bl	8007674 <L_shift>
 8007724:	4544      	cmp	r4, r8
 8007726:	d952      	bls.n	80077ce <__hexnan+0x10e>
 8007728:	2300      	movs	r3, #0
 800772a:	f1a4 0904 	sub.w	r9, r4, #4
 800772e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007732:	f8cd b008 	str.w	fp, [sp, #8]
 8007736:	464c      	mov	r4, r9
 8007738:	461d      	mov	r5, r3
 800773a:	9903      	ldr	r1, [sp, #12]
 800773c:	e7d7      	b.n	80076ee <__hexnan+0x2e>
 800773e:	2a29      	cmp	r2, #41	@ 0x29
 8007740:	d157      	bne.n	80077f2 <__hexnan+0x132>
 8007742:	3102      	adds	r1, #2
 8007744:	f8ca 1000 	str.w	r1, [sl]
 8007748:	f1bb 0f00 	cmp.w	fp, #0
 800774c:	d051      	beq.n	80077f2 <__hexnan+0x132>
 800774e:	454c      	cmp	r4, r9
 8007750:	d206      	bcs.n	8007760 <__hexnan+0xa0>
 8007752:	2d07      	cmp	r5, #7
 8007754:	dc04      	bgt.n	8007760 <__hexnan+0xa0>
 8007756:	462a      	mov	r2, r5
 8007758:	4649      	mov	r1, r9
 800775a:	4620      	mov	r0, r4
 800775c:	f7ff ff8a 	bl	8007674 <L_shift>
 8007760:	4544      	cmp	r4, r8
 8007762:	d936      	bls.n	80077d2 <__hexnan+0x112>
 8007764:	f1a8 0204 	sub.w	r2, r8, #4
 8007768:	4623      	mov	r3, r4
 800776a:	f853 1b04 	ldr.w	r1, [r3], #4
 800776e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007772:	429f      	cmp	r7, r3
 8007774:	d2f9      	bcs.n	800776a <__hexnan+0xaa>
 8007776:	1b3b      	subs	r3, r7, r4
 8007778:	f023 0303 	bic.w	r3, r3, #3
 800777c:	3304      	adds	r3, #4
 800777e:	3401      	adds	r4, #1
 8007780:	3e03      	subs	r6, #3
 8007782:	42b4      	cmp	r4, r6
 8007784:	bf88      	it	hi
 8007786:	2304      	movhi	r3, #4
 8007788:	4443      	add	r3, r8
 800778a:	2200      	movs	r2, #0
 800778c:	f843 2b04 	str.w	r2, [r3], #4
 8007790:	429f      	cmp	r7, r3
 8007792:	d2fb      	bcs.n	800778c <__hexnan+0xcc>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	b91b      	cbnz	r3, 80077a0 <__hexnan+0xe0>
 8007798:	4547      	cmp	r7, r8
 800779a:	d128      	bne.n	80077ee <__hexnan+0x12e>
 800779c:	2301      	movs	r3, #1
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	2005      	movs	r0, #5
 80077a2:	b007      	add	sp, #28
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	3501      	adds	r5, #1
 80077aa:	2d08      	cmp	r5, #8
 80077ac:	f10b 0b01 	add.w	fp, fp, #1
 80077b0:	dd06      	ble.n	80077c0 <__hexnan+0x100>
 80077b2:	4544      	cmp	r4, r8
 80077b4:	d9c1      	bls.n	800773a <__hexnan+0x7a>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80077bc:	2501      	movs	r5, #1
 80077be:	3c04      	subs	r4, #4
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	f000 000f 	and.w	r0, r0, #15
 80077c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80077ca:	6020      	str	r0, [r4, #0]
 80077cc:	e7b5      	b.n	800773a <__hexnan+0x7a>
 80077ce:	2508      	movs	r5, #8
 80077d0:	e7b3      	b.n	800773a <__hexnan+0x7a>
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0dd      	beq.n	8007794 <__hexnan+0xd4>
 80077d8:	f1c3 0320 	rsb	r3, r3, #32
 80077dc:	f04f 32ff 	mov.w	r2, #4294967295
 80077e0:	40da      	lsrs	r2, r3
 80077e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80077e6:	4013      	ands	r3, r2
 80077e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80077ec:	e7d2      	b.n	8007794 <__hexnan+0xd4>
 80077ee:	3f04      	subs	r7, #4
 80077f0:	e7d0      	b.n	8007794 <__hexnan+0xd4>
 80077f2:	2004      	movs	r0, #4
 80077f4:	e7d5      	b.n	80077a2 <__hexnan+0xe2>
	...

080077f8 <sbrk_aligned>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	4e0f      	ldr	r6, [pc, #60]	@ (8007838 <sbrk_aligned+0x40>)
 80077fc:	460c      	mov	r4, r1
 80077fe:	6831      	ldr	r1, [r6, #0]
 8007800:	4605      	mov	r5, r0
 8007802:	b911      	cbnz	r1, 800780a <sbrk_aligned+0x12>
 8007804:	f000 fe24 	bl	8008450 <_sbrk_r>
 8007808:	6030      	str	r0, [r6, #0]
 800780a:	4621      	mov	r1, r4
 800780c:	4628      	mov	r0, r5
 800780e:	f000 fe1f 	bl	8008450 <_sbrk_r>
 8007812:	1c43      	adds	r3, r0, #1
 8007814:	d103      	bne.n	800781e <sbrk_aligned+0x26>
 8007816:	f04f 34ff 	mov.w	r4, #4294967295
 800781a:	4620      	mov	r0, r4
 800781c:	bd70      	pop	{r4, r5, r6, pc}
 800781e:	1cc4      	adds	r4, r0, #3
 8007820:	f024 0403 	bic.w	r4, r4, #3
 8007824:	42a0      	cmp	r0, r4
 8007826:	d0f8      	beq.n	800781a <sbrk_aligned+0x22>
 8007828:	1a21      	subs	r1, r4, r0
 800782a:	4628      	mov	r0, r5
 800782c:	f000 fe10 	bl	8008450 <_sbrk_r>
 8007830:	3001      	adds	r0, #1
 8007832:	d1f2      	bne.n	800781a <sbrk_aligned+0x22>
 8007834:	e7ef      	b.n	8007816 <sbrk_aligned+0x1e>
 8007836:	bf00      	nop
 8007838:	20000b74 	.word	0x20000b74

0800783c <_malloc_r>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	1ccd      	adds	r5, r1, #3
 8007842:	f025 0503 	bic.w	r5, r5, #3
 8007846:	3508      	adds	r5, #8
 8007848:	2d0c      	cmp	r5, #12
 800784a:	bf38      	it	cc
 800784c:	250c      	movcc	r5, #12
 800784e:	2d00      	cmp	r5, #0
 8007850:	4606      	mov	r6, r0
 8007852:	db01      	blt.n	8007858 <_malloc_r+0x1c>
 8007854:	42a9      	cmp	r1, r5
 8007856:	d904      	bls.n	8007862 <_malloc_r+0x26>
 8007858:	230c      	movs	r3, #12
 800785a:	6033      	str	r3, [r6, #0]
 800785c:	2000      	movs	r0, #0
 800785e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007938 <_malloc_r+0xfc>
 8007866:	f000 f87b 	bl	8007960 <__malloc_lock>
 800786a:	f8d8 3000 	ldr.w	r3, [r8]
 800786e:	461c      	mov	r4, r3
 8007870:	bb44      	cbnz	r4, 80078c4 <_malloc_r+0x88>
 8007872:	4629      	mov	r1, r5
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff ffbf 	bl	80077f8 <sbrk_aligned>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	4604      	mov	r4, r0
 800787e:	d158      	bne.n	8007932 <_malloc_r+0xf6>
 8007880:	f8d8 4000 	ldr.w	r4, [r8]
 8007884:	4627      	mov	r7, r4
 8007886:	2f00      	cmp	r7, #0
 8007888:	d143      	bne.n	8007912 <_malloc_r+0xd6>
 800788a:	2c00      	cmp	r4, #0
 800788c:	d04b      	beq.n	8007926 <_malloc_r+0xea>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	4639      	mov	r1, r7
 8007892:	4630      	mov	r0, r6
 8007894:	eb04 0903 	add.w	r9, r4, r3
 8007898:	f000 fdda 	bl	8008450 <_sbrk_r>
 800789c:	4581      	cmp	r9, r0
 800789e:	d142      	bne.n	8007926 <_malloc_r+0xea>
 80078a0:	6821      	ldr	r1, [r4, #0]
 80078a2:	1a6d      	subs	r5, r5, r1
 80078a4:	4629      	mov	r1, r5
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7ff ffa6 	bl	80077f8 <sbrk_aligned>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d03a      	beq.n	8007926 <_malloc_r+0xea>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	442b      	add	r3, r5
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	bb62      	cbnz	r2, 8007918 <_malloc_r+0xdc>
 80078be:	f8c8 7000 	str.w	r7, [r8]
 80078c2:	e00f      	b.n	80078e4 <_malloc_r+0xa8>
 80078c4:	6822      	ldr	r2, [r4, #0]
 80078c6:	1b52      	subs	r2, r2, r5
 80078c8:	d420      	bmi.n	800790c <_malloc_r+0xd0>
 80078ca:	2a0b      	cmp	r2, #11
 80078cc:	d917      	bls.n	80078fe <_malloc_r+0xc2>
 80078ce:	1961      	adds	r1, r4, r5
 80078d0:	42a3      	cmp	r3, r4
 80078d2:	6025      	str	r5, [r4, #0]
 80078d4:	bf18      	it	ne
 80078d6:	6059      	strne	r1, [r3, #4]
 80078d8:	6863      	ldr	r3, [r4, #4]
 80078da:	bf08      	it	eq
 80078dc:	f8c8 1000 	streq.w	r1, [r8]
 80078e0:	5162      	str	r2, [r4, r5]
 80078e2:	604b      	str	r3, [r1, #4]
 80078e4:	4630      	mov	r0, r6
 80078e6:	f000 f841 	bl	800796c <__malloc_unlock>
 80078ea:	f104 000b 	add.w	r0, r4, #11
 80078ee:	1d23      	adds	r3, r4, #4
 80078f0:	f020 0007 	bic.w	r0, r0, #7
 80078f4:	1ac2      	subs	r2, r0, r3
 80078f6:	bf1c      	itt	ne
 80078f8:	1a1b      	subne	r3, r3, r0
 80078fa:	50a3      	strne	r3, [r4, r2]
 80078fc:	e7af      	b.n	800785e <_malloc_r+0x22>
 80078fe:	6862      	ldr	r2, [r4, #4]
 8007900:	42a3      	cmp	r3, r4
 8007902:	bf0c      	ite	eq
 8007904:	f8c8 2000 	streq.w	r2, [r8]
 8007908:	605a      	strne	r2, [r3, #4]
 800790a:	e7eb      	b.n	80078e4 <_malloc_r+0xa8>
 800790c:	4623      	mov	r3, r4
 800790e:	6864      	ldr	r4, [r4, #4]
 8007910:	e7ae      	b.n	8007870 <_malloc_r+0x34>
 8007912:	463c      	mov	r4, r7
 8007914:	687f      	ldr	r7, [r7, #4]
 8007916:	e7b6      	b.n	8007886 <_malloc_r+0x4a>
 8007918:	461a      	mov	r2, r3
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	42a3      	cmp	r3, r4
 800791e:	d1fb      	bne.n	8007918 <_malloc_r+0xdc>
 8007920:	2300      	movs	r3, #0
 8007922:	6053      	str	r3, [r2, #4]
 8007924:	e7de      	b.n	80078e4 <_malloc_r+0xa8>
 8007926:	230c      	movs	r3, #12
 8007928:	6033      	str	r3, [r6, #0]
 800792a:	4630      	mov	r0, r6
 800792c:	f000 f81e 	bl	800796c <__malloc_unlock>
 8007930:	e794      	b.n	800785c <_malloc_r+0x20>
 8007932:	6005      	str	r5, [r0, #0]
 8007934:	e7d6      	b.n	80078e4 <_malloc_r+0xa8>
 8007936:	bf00      	nop
 8007938:	20000b78 	.word	0x20000b78

0800793c <__ascii_mbtowc>:
 800793c:	b082      	sub	sp, #8
 800793e:	b901      	cbnz	r1, 8007942 <__ascii_mbtowc+0x6>
 8007940:	a901      	add	r1, sp, #4
 8007942:	b142      	cbz	r2, 8007956 <__ascii_mbtowc+0x1a>
 8007944:	b14b      	cbz	r3, 800795a <__ascii_mbtowc+0x1e>
 8007946:	7813      	ldrb	r3, [r2, #0]
 8007948:	600b      	str	r3, [r1, #0]
 800794a:	7812      	ldrb	r2, [r2, #0]
 800794c:	1e10      	subs	r0, r2, #0
 800794e:	bf18      	it	ne
 8007950:	2001      	movne	r0, #1
 8007952:	b002      	add	sp, #8
 8007954:	4770      	bx	lr
 8007956:	4610      	mov	r0, r2
 8007958:	e7fb      	b.n	8007952 <__ascii_mbtowc+0x16>
 800795a:	f06f 0001 	mvn.w	r0, #1
 800795e:	e7f8      	b.n	8007952 <__ascii_mbtowc+0x16>

08007960 <__malloc_lock>:
 8007960:	4801      	ldr	r0, [pc, #4]	@ (8007968 <__malloc_lock+0x8>)
 8007962:	f7ff bbaa 	b.w	80070ba <__retarget_lock_acquire_recursive>
 8007966:	bf00      	nop
 8007968:	20000b70 	.word	0x20000b70

0800796c <__malloc_unlock>:
 800796c:	4801      	ldr	r0, [pc, #4]	@ (8007974 <__malloc_unlock+0x8>)
 800796e:	f7ff bba5 	b.w	80070bc <__retarget_lock_release_recursive>
 8007972:	bf00      	nop
 8007974:	20000b70 	.word	0x20000b70

08007978 <_Balloc>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	69c6      	ldr	r6, [r0, #28]
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	b976      	cbnz	r6, 80079a0 <_Balloc+0x28>
 8007982:	2010      	movs	r0, #16
 8007984:	f000 fda6 	bl	80084d4 <malloc>
 8007988:	4602      	mov	r2, r0
 800798a:	61e0      	str	r0, [r4, #28]
 800798c:	b920      	cbnz	r0, 8007998 <_Balloc+0x20>
 800798e:	4b18      	ldr	r3, [pc, #96]	@ (80079f0 <_Balloc+0x78>)
 8007990:	4818      	ldr	r0, [pc, #96]	@ (80079f4 <_Balloc+0x7c>)
 8007992:	216b      	movs	r1, #107	@ 0x6b
 8007994:	f000 fd6c 	bl	8008470 <__assert_func>
 8007998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800799c:	6006      	str	r6, [r0, #0]
 800799e:	60c6      	str	r6, [r0, #12]
 80079a0:	69e6      	ldr	r6, [r4, #28]
 80079a2:	68f3      	ldr	r3, [r6, #12]
 80079a4:	b183      	cbz	r3, 80079c8 <_Balloc+0x50>
 80079a6:	69e3      	ldr	r3, [r4, #28]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ae:	b9b8      	cbnz	r0, 80079e0 <_Balloc+0x68>
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f605 	lsl.w	r6, r1, r5
 80079b6:	1d72      	adds	r2, r6, #5
 80079b8:	0092      	lsls	r2, r2, #2
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 fd76 	bl	80084ac <_calloc_r>
 80079c0:	b160      	cbz	r0, 80079dc <_Balloc+0x64>
 80079c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079c6:	e00e      	b.n	80079e6 <_Balloc+0x6e>
 80079c8:	2221      	movs	r2, #33	@ 0x21
 80079ca:	2104      	movs	r1, #4
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fd6d 	bl	80084ac <_calloc_r>
 80079d2:	69e3      	ldr	r3, [r4, #28]
 80079d4:	60f0      	str	r0, [r6, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e4      	bne.n	80079a6 <_Balloc+0x2e>
 80079dc:	2000      	movs	r0, #0
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	6802      	ldr	r2, [r0, #0]
 80079e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079e6:	2300      	movs	r3, #0
 80079e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079ec:	e7f7      	b.n	80079de <_Balloc+0x66>
 80079ee:	bf00      	nop
 80079f0:	0800970a 	.word	0x0800970a
 80079f4:	08009721 	.word	0x08009721

080079f8 <_Bfree>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	69c6      	ldr	r6, [r0, #28]
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	b976      	cbnz	r6, 8007a20 <_Bfree+0x28>
 8007a02:	2010      	movs	r0, #16
 8007a04:	f000 fd66 	bl	80084d4 <malloc>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	61e8      	str	r0, [r5, #28]
 8007a0c:	b920      	cbnz	r0, 8007a18 <_Bfree+0x20>
 8007a0e:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <_Bfree+0x3c>)
 8007a10:	4809      	ldr	r0, [pc, #36]	@ (8007a38 <_Bfree+0x40>)
 8007a12:	218f      	movs	r1, #143	@ 0x8f
 8007a14:	f000 fd2c 	bl	8008470 <__assert_func>
 8007a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a1c:	6006      	str	r6, [r0, #0]
 8007a1e:	60c6      	str	r6, [r0, #12]
 8007a20:	b13c      	cbz	r4, 8007a32 <_Bfree+0x3a>
 8007a22:	69eb      	ldr	r3, [r5, #28]
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a2c:	6021      	str	r1, [r4, #0]
 8007a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
 8007a34:	0800970a 	.word	0x0800970a
 8007a38:	08009721 	.word	0x08009721

08007a3c <__multadd>:
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	690d      	ldr	r5, [r1, #16]
 8007a42:	4607      	mov	r7, r0
 8007a44:	460c      	mov	r4, r1
 8007a46:	461e      	mov	r6, r3
 8007a48:	f101 0c14 	add.w	ip, r1, #20
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8007a52:	b299      	uxth	r1, r3
 8007a54:	fb02 6101 	mla	r1, r2, r1, r6
 8007a58:	0c1e      	lsrs	r6, r3, #16
 8007a5a:	0c0b      	lsrs	r3, r1, #16
 8007a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8007a60:	b289      	uxth	r1, r1
 8007a62:	3001      	adds	r0, #1
 8007a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a68:	4285      	cmp	r5, r0
 8007a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a72:	dcec      	bgt.n	8007a4e <__multadd+0x12>
 8007a74:	b30e      	cbz	r6, 8007aba <__multadd+0x7e>
 8007a76:	68a3      	ldr	r3, [r4, #8]
 8007a78:	42ab      	cmp	r3, r5
 8007a7a:	dc19      	bgt.n	8007ab0 <__multadd+0x74>
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	4638      	mov	r0, r7
 8007a80:	3101      	adds	r1, #1
 8007a82:	f7ff ff79 	bl	8007978 <_Balloc>
 8007a86:	4680      	mov	r8, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <__multadd+0x5a>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac0 <__multadd+0x84>)
 8007a8e:	480d      	ldr	r0, [pc, #52]	@ (8007ac4 <__multadd+0x88>)
 8007a90:	21ba      	movs	r1, #186	@ 0xba
 8007a92:	f000 fced 	bl	8008470 <__assert_func>
 8007a96:	6922      	ldr	r2, [r4, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	f104 010c 	add.w	r1, r4, #12
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7ff fb0c 	bl	80070be <memcpy>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7ff ffa5 	bl	80079f8 <_Bfree>
 8007aae:	4644      	mov	r4, r8
 8007ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	615e      	str	r6, [r3, #20]
 8007ab8:	6125      	str	r5, [r4, #16]
 8007aba:	4620      	mov	r0, r4
 8007abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac0:	08009699 	.word	0x08009699
 8007ac4:	08009721 	.word	0x08009721

08007ac8 <__s2b>:
 8007ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007acc:	460c      	mov	r4, r1
 8007ace:	4615      	mov	r5, r2
 8007ad0:	461f      	mov	r7, r3
 8007ad2:	2209      	movs	r2, #9
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007adc:	2100      	movs	r1, #0
 8007ade:	2201      	movs	r2, #1
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	db09      	blt.n	8007af8 <__s2b+0x30>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff ff47 	bl	8007978 <_Balloc>
 8007aea:	b940      	cbnz	r0, 8007afe <__s2b+0x36>
 8007aec:	4602      	mov	r2, r0
 8007aee:	4b19      	ldr	r3, [pc, #100]	@ (8007b54 <__s2b+0x8c>)
 8007af0:	4819      	ldr	r0, [pc, #100]	@ (8007b58 <__s2b+0x90>)
 8007af2:	21d3      	movs	r1, #211	@ 0xd3
 8007af4:	f000 fcbc 	bl	8008470 <__assert_func>
 8007af8:	0052      	lsls	r2, r2, #1
 8007afa:	3101      	adds	r1, #1
 8007afc:	e7f0      	b.n	8007ae0 <__s2b+0x18>
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	6143      	str	r3, [r0, #20]
 8007b02:	2d09      	cmp	r5, #9
 8007b04:	f04f 0301 	mov.w	r3, #1
 8007b08:	6103      	str	r3, [r0, #16]
 8007b0a:	dd16      	ble.n	8007b3a <__s2b+0x72>
 8007b0c:	f104 0909 	add.w	r9, r4, #9
 8007b10:	46c8      	mov	r8, r9
 8007b12:	442c      	add	r4, r5
 8007b14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b18:	4601      	mov	r1, r0
 8007b1a:	3b30      	subs	r3, #48	@ 0x30
 8007b1c:	220a      	movs	r2, #10
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ff8c 	bl	8007a3c <__multadd>
 8007b24:	45a0      	cmp	r8, r4
 8007b26:	d1f5      	bne.n	8007b14 <__s2b+0x4c>
 8007b28:	f1a5 0408 	sub.w	r4, r5, #8
 8007b2c:	444c      	add	r4, r9
 8007b2e:	1b2d      	subs	r5, r5, r4
 8007b30:	1963      	adds	r3, r4, r5
 8007b32:	42bb      	cmp	r3, r7
 8007b34:	db04      	blt.n	8007b40 <__s2b+0x78>
 8007b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3a:	340a      	adds	r4, #10
 8007b3c:	2509      	movs	r5, #9
 8007b3e:	e7f6      	b.n	8007b2e <__s2b+0x66>
 8007b40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b44:	4601      	mov	r1, r0
 8007b46:	3b30      	subs	r3, #48	@ 0x30
 8007b48:	220a      	movs	r2, #10
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ff76 	bl	8007a3c <__multadd>
 8007b50:	e7ee      	b.n	8007b30 <__s2b+0x68>
 8007b52:	bf00      	nop
 8007b54:	08009699 	.word	0x08009699
 8007b58:	08009721 	.word	0x08009721

08007b5c <__hi0bits>:
 8007b5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b60:	4603      	mov	r3, r0
 8007b62:	bf36      	itet	cc
 8007b64:	0403      	lslcc	r3, r0, #16
 8007b66:	2000      	movcs	r0, #0
 8007b68:	2010      	movcc	r0, #16
 8007b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6e:	bf3c      	itt	cc
 8007b70:	021b      	lslcc	r3, r3, #8
 8007b72:	3008      	addcc	r0, #8
 8007b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b78:	bf3c      	itt	cc
 8007b7a:	011b      	lslcc	r3, r3, #4
 8007b7c:	3004      	addcc	r0, #4
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b82:	bf3c      	itt	cc
 8007b84:	009b      	lslcc	r3, r3, #2
 8007b86:	3002      	addcc	r0, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db05      	blt.n	8007b98 <__hi0bits+0x3c>
 8007b8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b90:	f100 0001 	add.w	r0, r0, #1
 8007b94:	bf08      	it	eq
 8007b96:	2020      	moveq	r0, #32
 8007b98:	4770      	bx	lr

08007b9a <__lo0bits>:
 8007b9a:	6803      	ldr	r3, [r0, #0]
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	f013 0007 	ands.w	r0, r3, #7
 8007ba2:	d00b      	beq.n	8007bbc <__lo0bits+0x22>
 8007ba4:	07d9      	lsls	r1, r3, #31
 8007ba6:	d421      	bmi.n	8007bec <__lo0bits+0x52>
 8007ba8:	0798      	lsls	r0, r3, #30
 8007baa:	bf49      	itett	mi
 8007bac:	085b      	lsrmi	r3, r3, #1
 8007bae:	089b      	lsrpl	r3, r3, #2
 8007bb0:	2001      	movmi	r0, #1
 8007bb2:	6013      	strmi	r3, [r2, #0]
 8007bb4:	bf5c      	itt	pl
 8007bb6:	6013      	strpl	r3, [r2, #0]
 8007bb8:	2002      	movpl	r0, #2
 8007bba:	4770      	bx	lr
 8007bbc:	b299      	uxth	r1, r3
 8007bbe:	b909      	cbnz	r1, 8007bc4 <__lo0bits+0x2a>
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	2010      	movs	r0, #16
 8007bc4:	b2d9      	uxtb	r1, r3
 8007bc6:	b909      	cbnz	r1, 8007bcc <__lo0bits+0x32>
 8007bc8:	3008      	adds	r0, #8
 8007bca:	0a1b      	lsrs	r3, r3, #8
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	bf04      	itt	eq
 8007bd0:	091b      	lsreq	r3, r3, #4
 8007bd2:	3004      	addeq	r0, #4
 8007bd4:	0799      	lsls	r1, r3, #30
 8007bd6:	bf04      	itt	eq
 8007bd8:	089b      	lsreq	r3, r3, #2
 8007bda:	3002      	addeq	r0, #2
 8007bdc:	07d9      	lsls	r1, r3, #31
 8007bde:	d403      	bmi.n	8007be8 <__lo0bits+0x4e>
 8007be0:	085b      	lsrs	r3, r3, #1
 8007be2:	f100 0001 	add.w	r0, r0, #1
 8007be6:	d003      	beq.n	8007bf0 <__lo0bits+0x56>
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4770      	bx	lr
 8007bec:	2000      	movs	r0, #0
 8007bee:	4770      	bx	lr
 8007bf0:	2020      	movs	r0, #32
 8007bf2:	4770      	bx	lr

08007bf4 <__i2b>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	f7ff febd 	bl	8007978 <_Balloc>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	b928      	cbnz	r0, 8007c0e <__i2b+0x1a>
 8007c02:	4b05      	ldr	r3, [pc, #20]	@ (8007c18 <__i2b+0x24>)
 8007c04:	4805      	ldr	r0, [pc, #20]	@ (8007c1c <__i2b+0x28>)
 8007c06:	f240 1145 	movw	r1, #325	@ 0x145
 8007c0a:	f000 fc31 	bl	8008470 <__assert_func>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	6144      	str	r4, [r0, #20]
 8007c12:	6103      	str	r3, [r0, #16]
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	08009699 	.word	0x08009699
 8007c1c:	08009721 	.word	0x08009721

08007c20 <__multiply>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4614      	mov	r4, r2
 8007c26:	690a      	ldr	r2, [r1, #16]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	bfa8      	it	ge
 8007c2e:	4623      	movge	r3, r4
 8007c30:	460f      	mov	r7, r1
 8007c32:	bfa4      	itt	ge
 8007c34:	460c      	movge	r4, r1
 8007c36:	461f      	movge	r7, r3
 8007c38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c40:	68a3      	ldr	r3, [r4, #8]
 8007c42:	6861      	ldr	r1, [r4, #4]
 8007c44:	eb0a 0609 	add.w	r6, sl, r9
 8007c48:	42b3      	cmp	r3, r6
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	bfb8      	it	lt
 8007c4e:	3101      	addlt	r1, #1
 8007c50:	f7ff fe92 	bl	8007978 <_Balloc>
 8007c54:	b930      	cbnz	r0, 8007c64 <__multiply+0x44>
 8007c56:	4602      	mov	r2, r0
 8007c58:	4b44      	ldr	r3, [pc, #272]	@ (8007d6c <__multiply+0x14c>)
 8007c5a:	4845      	ldr	r0, [pc, #276]	@ (8007d70 <__multiply+0x150>)
 8007c5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c60:	f000 fc06 	bl	8008470 <__assert_func>
 8007c64:	f100 0514 	add.w	r5, r0, #20
 8007c68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	2200      	movs	r2, #0
 8007c70:	4543      	cmp	r3, r8
 8007c72:	d321      	bcc.n	8007cb8 <__multiply+0x98>
 8007c74:	f107 0114 	add.w	r1, r7, #20
 8007c78:	f104 0214 	add.w	r2, r4, #20
 8007c7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c84:	9302      	str	r3, [sp, #8]
 8007c86:	1b13      	subs	r3, r2, r4
 8007c88:	3b15      	subs	r3, #21
 8007c8a:	f023 0303 	bic.w	r3, r3, #3
 8007c8e:	3304      	adds	r3, #4
 8007c90:	f104 0715 	add.w	r7, r4, #21
 8007c94:	42ba      	cmp	r2, r7
 8007c96:	bf38      	it	cc
 8007c98:	2304      	movcc	r3, #4
 8007c9a:	9301      	str	r3, [sp, #4]
 8007c9c:	9b02      	ldr	r3, [sp, #8]
 8007c9e:	9103      	str	r1, [sp, #12]
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	d80c      	bhi.n	8007cbe <__multiply+0x9e>
 8007ca4:	2e00      	cmp	r6, #0
 8007ca6:	dd03      	ble.n	8007cb0 <__multiply+0x90>
 8007ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d05b      	beq.n	8007d68 <__multiply+0x148>
 8007cb0:	6106      	str	r6, [r0, #16]
 8007cb2:	b005      	add	sp, #20
 8007cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb8:	f843 2b04 	str.w	r2, [r3], #4
 8007cbc:	e7d8      	b.n	8007c70 <__multiply+0x50>
 8007cbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cc2:	f1ba 0f00 	cmp.w	sl, #0
 8007cc6:	d024      	beq.n	8007d12 <__multiply+0xf2>
 8007cc8:	f104 0e14 	add.w	lr, r4, #20
 8007ccc:	46a9      	mov	r9, r5
 8007cce:	f04f 0c00 	mov.w	ip, #0
 8007cd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cd6:	f8d9 3000 	ldr.w	r3, [r9]
 8007cda:	fa1f fb87 	uxth.w	fp, r7
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ce4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ce8:	f8d9 7000 	ldr.w	r7, [r9]
 8007cec:	4463      	add	r3, ip
 8007cee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cf2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d00:	4572      	cmp	r2, lr
 8007d02:	f849 3b04 	str.w	r3, [r9], #4
 8007d06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d0a:	d8e2      	bhi.n	8007cd2 <__multiply+0xb2>
 8007d0c:	9b01      	ldr	r3, [sp, #4]
 8007d0e:	f845 c003 	str.w	ip, [r5, r3]
 8007d12:	9b03      	ldr	r3, [sp, #12]
 8007d14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d18:	3104      	adds	r1, #4
 8007d1a:	f1b9 0f00 	cmp.w	r9, #0
 8007d1e:	d021      	beq.n	8007d64 <__multiply+0x144>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	f104 0c14 	add.w	ip, r4, #20
 8007d26:	46ae      	mov	lr, r5
 8007d28:	f04f 0a00 	mov.w	sl, #0
 8007d2c:	f8bc b000 	ldrh.w	fp, [ip]
 8007d30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d34:	fb09 770b 	mla	r7, r9, fp, r7
 8007d38:	4457      	add	r7, sl
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d40:	f84e 3b04 	str.w	r3, [lr], #4
 8007d44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d4c:	f8be 3000 	ldrh.w	r3, [lr]
 8007d50:	fb09 330a 	mla	r3, r9, sl, r3
 8007d54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d58:	4562      	cmp	r2, ip
 8007d5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d5e:	d8e5      	bhi.n	8007d2c <__multiply+0x10c>
 8007d60:	9f01      	ldr	r7, [sp, #4]
 8007d62:	51eb      	str	r3, [r5, r7]
 8007d64:	3504      	adds	r5, #4
 8007d66:	e799      	b.n	8007c9c <__multiply+0x7c>
 8007d68:	3e01      	subs	r6, #1
 8007d6a:	e79b      	b.n	8007ca4 <__multiply+0x84>
 8007d6c:	08009699 	.word	0x08009699
 8007d70:	08009721 	.word	0x08009721

08007d74 <__pow5mult>:
 8007d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d78:	4615      	mov	r5, r2
 8007d7a:	f012 0203 	ands.w	r2, r2, #3
 8007d7e:	4607      	mov	r7, r0
 8007d80:	460e      	mov	r6, r1
 8007d82:	d007      	beq.n	8007d94 <__pow5mult+0x20>
 8007d84:	4c25      	ldr	r4, [pc, #148]	@ (8007e1c <__pow5mult+0xa8>)
 8007d86:	3a01      	subs	r2, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d8e:	f7ff fe55 	bl	8007a3c <__multadd>
 8007d92:	4606      	mov	r6, r0
 8007d94:	10ad      	asrs	r5, r5, #2
 8007d96:	d03d      	beq.n	8007e14 <__pow5mult+0xa0>
 8007d98:	69fc      	ldr	r4, [r7, #28]
 8007d9a:	b97c      	cbnz	r4, 8007dbc <__pow5mult+0x48>
 8007d9c:	2010      	movs	r0, #16
 8007d9e:	f000 fb99 	bl	80084d4 <malloc>
 8007da2:	4602      	mov	r2, r0
 8007da4:	61f8      	str	r0, [r7, #28]
 8007da6:	b928      	cbnz	r0, 8007db4 <__pow5mult+0x40>
 8007da8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e20 <__pow5mult+0xac>)
 8007daa:	481e      	ldr	r0, [pc, #120]	@ (8007e24 <__pow5mult+0xb0>)
 8007dac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007db0:	f000 fb5e 	bl	8008470 <__assert_func>
 8007db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007db8:	6004      	str	r4, [r0, #0]
 8007dba:	60c4      	str	r4, [r0, #12]
 8007dbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dc4:	b94c      	cbnz	r4, 8007dda <__pow5mult+0x66>
 8007dc6:	f240 2171 	movw	r1, #625	@ 0x271
 8007dca:	4638      	mov	r0, r7
 8007dcc:	f7ff ff12 	bl	8007bf4 <__i2b>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	6003      	str	r3, [r0, #0]
 8007dda:	f04f 0900 	mov.w	r9, #0
 8007dde:	07eb      	lsls	r3, r5, #31
 8007de0:	d50a      	bpl.n	8007df8 <__pow5mult+0x84>
 8007de2:	4631      	mov	r1, r6
 8007de4:	4622      	mov	r2, r4
 8007de6:	4638      	mov	r0, r7
 8007de8:	f7ff ff1a 	bl	8007c20 <__multiply>
 8007dec:	4631      	mov	r1, r6
 8007dee:	4680      	mov	r8, r0
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff fe01 	bl	80079f8 <_Bfree>
 8007df6:	4646      	mov	r6, r8
 8007df8:	106d      	asrs	r5, r5, #1
 8007dfa:	d00b      	beq.n	8007e14 <__pow5mult+0xa0>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	b938      	cbnz	r0, 8007e10 <__pow5mult+0x9c>
 8007e00:	4622      	mov	r2, r4
 8007e02:	4621      	mov	r1, r4
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff ff0b 	bl	8007c20 <__multiply>
 8007e0a:	6020      	str	r0, [r4, #0]
 8007e0c:	f8c0 9000 	str.w	r9, [r0]
 8007e10:	4604      	mov	r4, r0
 8007e12:	e7e4      	b.n	8007dde <__pow5mult+0x6a>
 8007e14:	4630      	mov	r0, r6
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	bf00      	nop
 8007e1c:	0800977c 	.word	0x0800977c
 8007e20:	0800970a 	.word	0x0800970a
 8007e24:	08009721 	.word	0x08009721

08007e28 <__lshift>:
 8007e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e2c:	460c      	mov	r4, r1
 8007e2e:	6849      	ldr	r1, [r1, #4]
 8007e30:	6923      	ldr	r3, [r4, #16]
 8007e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	4607      	mov	r7, r0
 8007e3a:	4691      	mov	r9, r2
 8007e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e40:	f108 0601 	add.w	r6, r8, #1
 8007e44:	42b3      	cmp	r3, r6
 8007e46:	db0b      	blt.n	8007e60 <__lshift+0x38>
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff fd95 	bl	8007978 <_Balloc>
 8007e4e:	4605      	mov	r5, r0
 8007e50:	b948      	cbnz	r0, 8007e66 <__lshift+0x3e>
 8007e52:	4602      	mov	r2, r0
 8007e54:	4b28      	ldr	r3, [pc, #160]	@ (8007ef8 <__lshift+0xd0>)
 8007e56:	4829      	ldr	r0, [pc, #164]	@ (8007efc <__lshift+0xd4>)
 8007e58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e5c:	f000 fb08 	bl	8008470 <__assert_func>
 8007e60:	3101      	adds	r1, #1
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	e7ee      	b.n	8007e44 <__lshift+0x1c>
 8007e66:	2300      	movs	r3, #0
 8007e68:	f100 0114 	add.w	r1, r0, #20
 8007e6c:	f100 0210 	add.w	r2, r0, #16
 8007e70:	4618      	mov	r0, r3
 8007e72:	4553      	cmp	r3, sl
 8007e74:	db33      	blt.n	8007ede <__lshift+0xb6>
 8007e76:	6920      	ldr	r0, [r4, #16]
 8007e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e7c:	f104 0314 	add.w	r3, r4, #20
 8007e80:	f019 091f 	ands.w	r9, r9, #31
 8007e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e8c:	d02b      	beq.n	8007ee6 <__lshift+0xbe>
 8007e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e92:	468a      	mov	sl, r1
 8007e94:	2200      	movs	r2, #0
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	fa00 f009 	lsl.w	r0, r0, r9
 8007e9c:	4310      	orrs	r0, r2
 8007e9e:	f84a 0b04 	str.w	r0, [sl], #4
 8007ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea6:	459c      	cmp	ip, r3
 8007ea8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eac:	d8f3      	bhi.n	8007e96 <__lshift+0x6e>
 8007eae:	ebac 0304 	sub.w	r3, ip, r4
 8007eb2:	3b15      	subs	r3, #21
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	3304      	adds	r3, #4
 8007eba:	f104 0015 	add.w	r0, r4, #21
 8007ebe:	4584      	cmp	ip, r0
 8007ec0:	bf38      	it	cc
 8007ec2:	2304      	movcc	r3, #4
 8007ec4:	50ca      	str	r2, [r1, r3]
 8007ec6:	b10a      	cbz	r2, 8007ecc <__lshift+0xa4>
 8007ec8:	f108 0602 	add.w	r6, r8, #2
 8007ecc:	3e01      	subs	r6, #1
 8007ece:	4638      	mov	r0, r7
 8007ed0:	612e      	str	r6, [r5, #16]
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	f7ff fd90 	bl	80079f8 <_Bfree>
 8007ed8:	4628      	mov	r0, r5
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	e7c5      	b.n	8007e72 <__lshift+0x4a>
 8007ee6:	3904      	subs	r1, #4
 8007ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eec:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ef0:	459c      	cmp	ip, r3
 8007ef2:	d8f9      	bhi.n	8007ee8 <__lshift+0xc0>
 8007ef4:	e7ea      	b.n	8007ecc <__lshift+0xa4>
 8007ef6:	bf00      	nop
 8007ef8:	08009699 	.word	0x08009699
 8007efc:	08009721 	.word	0x08009721

08007f00 <__mcmp>:
 8007f00:	690a      	ldr	r2, [r1, #16]
 8007f02:	4603      	mov	r3, r0
 8007f04:	6900      	ldr	r0, [r0, #16]
 8007f06:	1a80      	subs	r0, r0, r2
 8007f08:	b530      	push	{r4, r5, lr}
 8007f0a:	d10e      	bne.n	8007f2a <__mcmp+0x2a>
 8007f0c:	3314      	adds	r3, #20
 8007f0e:	3114      	adds	r1, #20
 8007f10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f20:	4295      	cmp	r5, r2
 8007f22:	d003      	beq.n	8007f2c <__mcmp+0x2c>
 8007f24:	d205      	bcs.n	8007f32 <__mcmp+0x32>
 8007f26:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2a:	bd30      	pop	{r4, r5, pc}
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d3f3      	bcc.n	8007f18 <__mcmp+0x18>
 8007f30:	e7fb      	b.n	8007f2a <__mcmp+0x2a>
 8007f32:	2001      	movs	r0, #1
 8007f34:	e7f9      	b.n	8007f2a <__mcmp+0x2a>
	...

08007f38 <__mdiff>:
 8007f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	4689      	mov	r9, r1
 8007f3e:	4606      	mov	r6, r0
 8007f40:	4611      	mov	r1, r2
 8007f42:	4648      	mov	r0, r9
 8007f44:	4614      	mov	r4, r2
 8007f46:	f7ff ffdb 	bl	8007f00 <__mcmp>
 8007f4a:	1e05      	subs	r5, r0, #0
 8007f4c:	d112      	bne.n	8007f74 <__mdiff+0x3c>
 8007f4e:	4629      	mov	r1, r5
 8007f50:	4630      	mov	r0, r6
 8007f52:	f7ff fd11 	bl	8007978 <_Balloc>
 8007f56:	4602      	mov	r2, r0
 8007f58:	b928      	cbnz	r0, 8007f66 <__mdiff+0x2e>
 8007f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8008058 <__mdiff+0x120>)
 8007f5c:	f240 2137 	movw	r1, #567	@ 0x237
 8007f60:	483e      	ldr	r0, [pc, #248]	@ (800805c <__mdiff+0x124>)
 8007f62:	f000 fa85 	bl	8008470 <__assert_func>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	b003      	add	sp, #12
 8007f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f74:	bfbc      	itt	lt
 8007f76:	464b      	movlt	r3, r9
 8007f78:	46a1      	movlt	r9, r4
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f80:	bfba      	itte	lt
 8007f82:	461c      	movlt	r4, r3
 8007f84:	2501      	movlt	r5, #1
 8007f86:	2500      	movge	r5, #0
 8007f88:	f7ff fcf6 	bl	8007978 <_Balloc>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	b918      	cbnz	r0, 8007f98 <__mdiff+0x60>
 8007f90:	4b31      	ldr	r3, [pc, #196]	@ (8008058 <__mdiff+0x120>)
 8007f92:	f240 2145 	movw	r1, #581	@ 0x245
 8007f96:	e7e3      	b.n	8007f60 <__mdiff+0x28>
 8007f98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f9c:	6926      	ldr	r6, [r4, #16]
 8007f9e:	60c5      	str	r5, [r0, #12]
 8007fa0:	f109 0310 	add.w	r3, r9, #16
 8007fa4:	f109 0514 	add.w	r5, r9, #20
 8007fa8:	f104 0e14 	add.w	lr, r4, #20
 8007fac:	f100 0b14 	add.w	fp, r0, #20
 8007fb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	46d9      	mov	r9, fp
 8007fbc:	f04f 0c00 	mov.w	ip, #0
 8007fc0:	9b01      	ldr	r3, [sp, #4]
 8007fc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fca:	9301      	str	r3, [sp, #4]
 8007fcc:	fa1f f38a 	uxth.w	r3, sl
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	b283      	uxth	r3, r0
 8007fd4:	1acb      	subs	r3, r1, r3
 8007fd6:	0c00      	lsrs	r0, r0, #16
 8007fd8:	4463      	add	r3, ip
 8007fda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fe8:	4576      	cmp	r6, lr
 8007fea:	f849 3b04 	str.w	r3, [r9], #4
 8007fee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ff2:	d8e5      	bhi.n	8007fc0 <__mdiff+0x88>
 8007ff4:	1b33      	subs	r3, r6, r4
 8007ff6:	3b15      	subs	r3, #21
 8007ff8:	f023 0303 	bic.w	r3, r3, #3
 8007ffc:	3415      	adds	r4, #21
 8007ffe:	3304      	adds	r3, #4
 8008000:	42a6      	cmp	r6, r4
 8008002:	bf38      	it	cc
 8008004:	2304      	movcc	r3, #4
 8008006:	441d      	add	r5, r3
 8008008:	445b      	add	r3, fp
 800800a:	461e      	mov	r6, r3
 800800c:	462c      	mov	r4, r5
 800800e:	4544      	cmp	r4, r8
 8008010:	d30e      	bcc.n	8008030 <__mdiff+0xf8>
 8008012:	f108 0103 	add.w	r1, r8, #3
 8008016:	1b49      	subs	r1, r1, r5
 8008018:	f021 0103 	bic.w	r1, r1, #3
 800801c:	3d03      	subs	r5, #3
 800801e:	45a8      	cmp	r8, r5
 8008020:	bf38      	it	cc
 8008022:	2100      	movcc	r1, #0
 8008024:	440b      	add	r3, r1
 8008026:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800802a:	b191      	cbz	r1, 8008052 <__mdiff+0x11a>
 800802c:	6117      	str	r7, [r2, #16]
 800802e:	e79d      	b.n	8007f6c <__mdiff+0x34>
 8008030:	f854 1b04 	ldr.w	r1, [r4], #4
 8008034:	46e6      	mov	lr, ip
 8008036:	0c08      	lsrs	r0, r1, #16
 8008038:	fa1c fc81 	uxtah	ip, ip, r1
 800803c:	4471      	add	r1, lr
 800803e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008042:	b289      	uxth	r1, r1
 8008044:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008048:	f846 1b04 	str.w	r1, [r6], #4
 800804c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008050:	e7dd      	b.n	800800e <__mdiff+0xd6>
 8008052:	3f01      	subs	r7, #1
 8008054:	e7e7      	b.n	8008026 <__mdiff+0xee>
 8008056:	bf00      	nop
 8008058:	08009699 	.word	0x08009699
 800805c:	08009721 	.word	0x08009721

08008060 <__ulp>:
 8008060:	b082      	sub	sp, #8
 8008062:	ed8d 0b00 	vstr	d0, [sp]
 8008066:	9a01      	ldr	r2, [sp, #4]
 8008068:	4b0f      	ldr	r3, [pc, #60]	@ (80080a8 <__ulp+0x48>)
 800806a:	4013      	ands	r3, r2
 800806c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc08      	bgt.n	8008086 <__ulp+0x26>
 8008074:	425b      	negs	r3, r3
 8008076:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800807a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800807e:	da04      	bge.n	800808a <__ulp+0x2a>
 8008080:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008084:	4113      	asrs	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	e008      	b.n	800809c <__ulp+0x3c>
 800808a:	f1a2 0314 	sub.w	r3, r2, #20
 800808e:	2b1e      	cmp	r3, #30
 8008090:	bfda      	itte	le
 8008092:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008096:	40da      	lsrle	r2, r3
 8008098:	2201      	movgt	r2, #1
 800809a:	2300      	movs	r3, #0
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	ec41 0b10 	vmov	d0, r0, r1
 80080a4:	b002      	add	sp, #8
 80080a6:	4770      	bx	lr
 80080a8:	7ff00000 	.word	0x7ff00000

080080ac <__b2d>:
 80080ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b0:	6906      	ldr	r6, [r0, #16]
 80080b2:	f100 0814 	add.w	r8, r0, #20
 80080b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080ba:	1f37      	subs	r7, r6, #4
 80080bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7ff fd4b 	bl	8007b5c <__hi0bits>
 80080c6:	f1c0 0320 	rsb	r3, r0, #32
 80080ca:	280a      	cmp	r0, #10
 80080cc:	600b      	str	r3, [r1, #0]
 80080ce:	491b      	ldr	r1, [pc, #108]	@ (800813c <__b2d+0x90>)
 80080d0:	dc15      	bgt.n	80080fe <__b2d+0x52>
 80080d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80080d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80080da:	45b8      	cmp	r8, r7
 80080dc:	ea43 0501 	orr.w	r5, r3, r1
 80080e0:	bf34      	ite	cc
 80080e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080e6:	2300      	movcs	r3, #0
 80080e8:	3015      	adds	r0, #21
 80080ea:	fa02 f000 	lsl.w	r0, r2, r0
 80080ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80080f2:	4303      	orrs	r3, r0
 80080f4:	461c      	mov	r4, r3
 80080f6:	ec45 4b10 	vmov	d0, r4, r5
 80080fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fe:	45b8      	cmp	r8, r7
 8008100:	bf3a      	itte	cc
 8008102:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008106:	f1a6 0708 	subcc.w	r7, r6, #8
 800810a:	2300      	movcs	r3, #0
 800810c:	380b      	subs	r0, #11
 800810e:	d012      	beq.n	8008136 <__b2d+0x8a>
 8008110:	f1c0 0120 	rsb	r1, r0, #32
 8008114:	fa23 f401 	lsr.w	r4, r3, r1
 8008118:	4082      	lsls	r2, r0
 800811a:	4322      	orrs	r2, r4
 800811c:	4547      	cmp	r7, r8
 800811e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008122:	bf8c      	ite	hi
 8008124:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008128:	2200      	movls	r2, #0
 800812a:	4083      	lsls	r3, r0
 800812c:	40ca      	lsrs	r2, r1
 800812e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008132:	4313      	orrs	r3, r2
 8008134:	e7de      	b.n	80080f4 <__b2d+0x48>
 8008136:	ea42 0501 	orr.w	r5, r2, r1
 800813a:	e7db      	b.n	80080f4 <__b2d+0x48>
 800813c:	3ff00000 	.word	0x3ff00000

08008140 <__d2b>:
 8008140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008144:	460f      	mov	r7, r1
 8008146:	2101      	movs	r1, #1
 8008148:	ec59 8b10 	vmov	r8, r9, d0
 800814c:	4616      	mov	r6, r2
 800814e:	f7ff fc13 	bl	8007978 <_Balloc>
 8008152:	4604      	mov	r4, r0
 8008154:	b930      	cbnz	r0, 8008164 <__d2b+0x24>
 8008156:	4602      	mov	r2, r0
 8008158:	4b23      	ldr	r3, [pc, #140]	@ (80081e8 <__d2b+0xa8>)
 800815a:	4824      	ldr	r0, [pc, #144]	@ (80081ec <__d2b+0xac>)
 800815c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008160:	f000 f986 	bl	8008470 <__assert_func>
 8008164:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800816c:	b10d      	cbz	r5, 8008172 <__d2b+0x32>
 800816e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	f1b8 0300 	subs.w	r3, r8, #0
 8008178:	d023      	beq.n	80081c2 <__d2b+0x82>
 800817a:	4668      	mov	r0, sp
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f7ff fd0c 	bl	8007b9a <__lo0bits>
 8008182:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008186:	b1d0      	cbz	r0, 80081be <__d2b+0x7e>
 8008188:	f1c0 0320 	rsb	r3, r0, #32
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	430b      	orrs	r3, r1
 8008192:	40c2      	lsrs	r2, r0
 8008194:	6163      	str	r3, [r4, #20]
 8008196:	9201      	str	r2, [sp, #4]
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	61a3      	str	r3, [r4, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	bf0c      	ite	eq
 80081a0:	2201      	moveq	r2, #1
 80081a2:	2202      	movne	r2, #2
 80081a4:	6122      	str	r2, [r4, #16]
 80081a6:	b1a5      	cbz	r5, 80081d2 <__d2b+0x92>
 80081a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081ac:	4405      	add	r5, r0
 80081ae:	603d      	str	r5, [r7, #0]
 80081b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081b4:	6030      	str	r0, [r6, #0]
 80081b6:	4620      	mov	r0, r4
 80081b8:	b003      	add	sp, #12
 80081ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081be:	6161      	str	r1, [r4, #20]
 80081c0:	e7ea      	b.n	8008198 <__d2b+0x58>
 80081c2:	a801      	add	r0, sp, #4
 80081c4:	f7ff fce9 	bl	8007b9a <__lo0bits>
 80081c8:	9b01      	ldr	r3, [sp, #4]
 80081ca:	6163      	str	r3, [r4, #20]
 80081cc:	3020      	adds	r0, #32
 80081ce:	2201      	movs	r2, #1
 80081d0:	e7e8      	b.n	80081a4 <__d2b+0x64>
 80081d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081da:	6038      	str	r0, [r7, #0]
 80081dc:	6918      	ldr	r0, [r3, #16]
 80081de:	f7ff fcbd 	bl	8007b5c <__hi0bits>
 80081e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081e6:	e7e5      	b.n	80081b4 <__d2b+0x74>
 80081e8:	08009699 	.word	0x08009699
 80081ec:	08009721 	.word	0x08009721

080081f0 <__ratio>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	b085      	sub	sp, #20
 80081f6:	e9cd 1000 	strd	r1, r0, [sp]
 80081fa:	a902      	add	r1, sp, #8
 80081fc:	f7ff ff56 	bl	80080ac <__b2d>
 8008200:	9800      	ldr	r0, [sp, #0]
 8008202:	a903      	add	r1, sp, #12
 8008204:	ec55 4b10 	vmov	r4, r5, d0
 8008208:	f7ff ff50 	bl	80080ac <__b2d>
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	6919      	ldr	r1, [r3, #16]
 8008210:	9b00      	ldr	r3, [sp, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	1ac9      	subs	r1, r1, r3
 8008216:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	ec5b ab10 	vmov	sl, fp, d0
 8008220:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008224:	2b00      	cmp	r3, #0
 8008226:	bfce      	itee	gt
 8008228:	462a      	movgt	r2, r5
 800822a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800822e:	465a      	movle	r2, fp
 8008230:	462f      	mov	r7, r5
 8008232:	46d9      	mov	r9, fp
 8008234:	bfcc      	ite	gt
 8008236:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800823a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800823e:	464b      	mov	r3, r9
 8008240:	4652      	mov	r2, sl
 8008242:	4620      	mov	r0, r4
 8008244:	4639      	mov	r1, r7
 8008246:	f7f8 fb21 	bl	800088c <__aeabi_ddiv>
 800824a:	ec41 0b10 	vmov	d0, r0, r1
 800824e:	b005      	add	sp, #20
 8008250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008254 <__copybits>:
 8008254:	3901      	subs	r1, #1
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	1149      	asrs	r1, r1, #5
 800825a:	6914      	ldr	r4, [r2, #16]
 800825c:	3101      	adds	r1, #1
 800825e:	f102 0314 	add.w	r3, r2, #20
 8008262:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008266:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800826a:	1f05      	subs	r5, r0, #4
 800826c:	42a3      	cmp	r3, r4
 800826e:	d30c      	bcc.n	800828a <__copybits+0x36>
 8008270:	1aa3      	subs	r3, r4, r2
 8008272:	3b11      	subs	r3, #17
 8008274:	f023 0303 	bic.w	r3, r3, #3
 8008278:	3211      	adds	r2, #17
 800827a:	42a2      	cmp	r2, r4
 800827c:	bf88      	it	hi
 800827e:	2300      	movhi	r3, #0
 8008280:	4418      	add	r0, r3
 8008282:	2300      	movs	r3, #0
 8008284:	4288      	cmp	r0, r1
 8008286:	d305      	bcc.n	8008294 <__copybits+0x40>
 8008288:	bd70      	pop	{r4, r5, r6, pc}
 800828a:	f853 6b04 	ldr.w	r6, [r3], #4
 800828e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008292:	e7eb      	b.n	800826c <__copybits+0x18>
 8008294:	f840 3b04 	str.w	r3, [r0], #4
 8008298:	e7f4      	b.n	8008284 <__copybits+0x30>

0800829a <__any_on>:
 800829a:	f100 0214 	add.w	r2, r0, #20
 800829e:	6900      	ldr	r0, [r0, #16]
 80082a0:	114b      	asrs	r3, r1, #5
 80082a2:	4298      	cmp	r0, r3
 80082a4:	b510      	push	{r4, lr}
 80082a6:	db11      	blt.n	80082cc <__any_on+0x32>
 80082a8:	dd0a      	ble.n	80082c0 <__any_on+0x26>
 80082aa:	f011 011f 	ands.w	r1, r1, #31
 80082ae:	d007      	beq.n	80082c0 <__any_on+0x26>
 80082b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082b4:	fa24 f001 	lsr.w	r0, r4, r1
 80082b8:	fa00 f101 	lsl.w	r1, r0, r1
 80082bc:	428c      	cmp	r4, r1
 80082be:	d10b      	bne.n	80082d8 <__any_on+0x3e>
 80082c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d803      	bhi.n	80082d0 <__any_on+0x36>
 80082c8:	2000      	movs	r0, #0
 80082ca:	bd10      	pop	{r4, pc}
 80082cc:	4603      	mov	r3, r0
 80082ce:	e7f7      	b.n	80082c0 <__any_on+0x26>
 80082d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d0f5      	beq.n	80082c4 <__any_on+0x2a>
 80082d8:	2001      	movs	r0, #1
 80082da:	e7f6      	b.n	80082ca <__any_on+0x30>

080082dc <__ascii_wctomb>:
 80082dc:	4603      	mov	r3, r0
 80082de:	4608      	mov	r0, r1
 80082e0:	b141      	cbz	r1, 80082f4 <__ascii_wctomb+0x18>
 80082e2:	2aff      	cmp	r2, #255	@ 0xff
 80082e4:	d904      	bls.n	80082f0 <__ascii_wctomb+0x14>
 80082e6:	228a      	movs	r2, #138	@ 0x8a
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	4770      	bx	lr
 80082f0:	700a      	strb	r2, [r1, #0]
 80082f2:	2001      	movs	r0, #1
 80082f4:	4770      	bx	lr
	...

080082f8 <__sflush_r>:
 80082f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	0716      	lsls	r6, r2, #28
 8008302:	4605      	mov	r5, r0
 8008304:	460c      	mov	r4, r1
 8008306:	d454      	bmi.n	80083b2 <__sflush_r+0xba>
 8008308:	684b      	ldr	r3, [r1, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc02      	bgt.n	8008314 <__sflush_r+0x1c>
 800830e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	dd48      	ble.n	80083a6 <__sflush_r+0xae>
 8008314:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008316:	2e00      	cmp	r6, #0
 8008318:	d045      	beq.n	80083a6 <__sflush_r+0xae>
 800831a:	2300      	movs	r3, #0
 800831c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008320:	682f      	ldr	r7, [r5, #0]
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	d030      	beq.n	800838a <__sflush_r+0x92>
 8008328:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	0759      	lsls	r1, r3, #29
 800832e:	d505      	bpl.n	800833c <__sflush_r+0x44>
 8008330:	6863      	ldr	r3, [r4, #4]
 8008332:	1ad2      	subs	r2, r2, r3
 8008334:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008336:	b10b      	cbz	r3, 800833c <__sflush_r+0x44>
 8008338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800833a:	1ad2      	subs	r2, r2, r3
 800833c:	2300      	movs	r3, #0
 800833e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008340:	6a21      	ldr	r1, [r4, #32]
 8008342:	4628      	mov	r0, r5
 8008344:	47b0      	blx	r6
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	d106      	bne.n	800835a <__sflush_r+0x62>
 800834c:	6829      	ldr	r1, [r5, #0]
 800834e:	291d      	cmp	r1, #29
 8008350:	d82b      	bhi.n	80083aa <__sflush_r+0xb2>
 8008352:	4a2a      	ldr	r2, [pc, #168]	@ (80083fc <__sflush_r+0x104>)
 8008354:	410a      	asrs	r2, r1
 8008356:	07d6      	lsls	r6, r2, #31
 8008358:	d427      	bmi.n	80083aa <__sflush_r+0xb2>
 800835a:	2200      	movs	r2, #0
 800835c:	6062      	str	r2, [r4, #4]
 800835e:	04d9      	lsls	r1, r3, #19
 8008360:	6922      	ldr	r2, [r4, #16]
 8008362:	6022      	str	r2, [r4, #0]
 8008364:	d504      	bpl.n	8008370 <__sflush_r+0x78>
 8008366:	1c42      	adds	r2, r0, #1
 8008368:	d101      	bne.n	800836e <__sflush_r+0x76>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b903      	cbnz	r3, 8008370 <__sflush_r+0x78>
 800836e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008372:	602f      	str	r7, [r5, #0]
 8008374:	b1b9      	cbz	r1, 80083a6 <__sflush_r+0xae>
 8008376:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800837a:	4299      	cmp	r1, r3
 800837c:	d002      	beq.n	8008384 <__sflush_r+0x8c>
 800837e:	4628      	mov	r0, r5
 8008380:	f7fe feb6 	bl	80070f0 <_free_r>
 8008384:	2300      	movs	r3, #0
 8008386:	6363      	str	r3, [r4, #52]	@ 0x34
 8008388:	e00d      	b.n	80083a6 <__sflush_r+0xae>
 800838a:	2301      	movs	r3, #1
 800838c:	4628      	mov	r0, r5
 800838e:	47b0      	blx	r6
 8008390:	4602      	mov	r2, r0
 8008392:	1c50      	adds	r0, r2, #1
 8008394:	d1c9      	bne.n	800832a <__sflush_r+0x32>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0c6      	beq.n	800832a <__sflush_r+0x32>
 800839c:	2b1d      	cmp	r3, #29
 800839e:	d001      	beq.n	80083a4 <__sflush_r+0xac>
 80083a0:	2b16      	cmp	r3, #22
 80083a2:	d11e      	bne.n	80083e2 <__sflush_r+0xea>
 80083a4:	602f      	str	r7, [r5, #0]
 80083a6:	2000      	movs	r0, #0
 80083a8:	e022      	b.n	80083f0 <__sflush_r+0xf8>
 80083aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ae:	b21b      	sxth	r3, r3
 80083b0:	e01b      	b.n	80083ea <__sflush_r+0xf2>
 80083b2:	690f      	ldr	r7, [r1, #16]
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	d0f6      	beq.n	80083a6 <__sflush_r+0xae>
 80083b8:	0793      	lsls	r3, r2, #30
 80083ba:	680e      	ldr	r6, [r1, #0]
 80083bc:	bf08      	it	eq
 80083be:	694b      	ldreq	r3, [r1, #20]
 80083c0:	600f      	str	r7, [r1, #0]
 80083c2:	bf18      	it	ne
 80083c4:	2300      	movne	r3, #0
 80083c6:	eba6 0807 	sub.w	r8, r6, r7
 80083ca:	608b      	str	r3, [r1, #8]
 80083cc:	f1b8 0f00 	cmp.w	r8, #0
 80083d0:	dde9      	ble.n	80083a6 <__sflush_r+0xae>
 80083d2:	6a21      	ldr	r1, [r4, #32]
 80083d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083d6:	4643      	mov	r3, r8
 80083d8:	463a      	mov	r2, r7
 80083da:	4628      	mov	r0, r5
 80083dc:	47b0      	blx	r6
 80083de:	2800      	cmp	r0, #0
 80083e0:	dc08      	bgt.n	80083f4 <__sflush_r+0xfc>
 80083e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f4:	4407      	add	r7, r0
 80083f6:	eba8 0800 	sub.w	r8, r8, r0
 80083fa:	e7e7      	b.n	80083cc <__sflush_r+0xd4>
 80083fc:	dfbffffe 	.word	0xdfbffffe

08008400 <_fflush_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b913      	cbnz	r3, 8008410 <_fflush_r+0x10>
 800840a:	2500      	movs	r5, #0
 800840c:	4628      	mov	r0, r5
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	b118      	cbz	r0, 800841a <_fflush_r+0x1a>
 8008412:	6a03      	ldr	r3, [r0, #32]
 8008414:	b90b      	cbnz	r3, 800841a <_fflush_r+0x1a>
 8008416:	f7fe fd4b 	bl	8006eb0 <__sinit>
 800841a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f3      	beq.n	800840a <_fflush_r+0xa>
 8008422:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008424:	07d0      	lsls	r0, r2, #31
 8008426:	d404      	bmi.n	8008432 <_fflush_r+0x32>
 8008428:	0599      	lsls	r1, r3, #22
 800842a:	d402      	bmi.n	8008432 <_fflush_r+0x32>
 800842c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800842e:	f7fe fe44 	bl	80070ba <__retarget_lock_acquire_recursive>
 8008432:	4628      	mov	r0, r5
 8008434:	4621      	mov	r1, r4
 8008436:	f7ff ff5f 	bl	80082f8 <__sflush_r>
 800843a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800843c:	07da      	lsls	r2, r3, #31
 800843e:	4605      	mov	r5, r0
 8008440:	d4e4      	bmi.n	800840c <_fflush_r+0xc>
 8008442:	89a3      	ldrh	r3, [r4, #12]
 8008444:	059b      	lsls	r3, r3, #22
 8008446:	d4e1      	bmi.n	800840c <_fflush_r+0xc>
 8008448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800844a:	f7fe fe37 	bl	80070bc <__retarget_lock_release_recursive>
 800844e:	e7dd      	b.n	800840c <_fflush_r+0xc>

08008450 <_sbrk_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d06      	ldr	r5, [pc, #24]	@ (800846c <_sbrk_r+0x1c>)
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	602b      	str	r3, [r5, #0]
 800845c:	f7f9 ff2a 	bl	80022b4 <_sbrk>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_sbrk_r+0x1a>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_sbrk_r+0x1a>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000b6c 	.word	0x20000b6c

08008470 <__assert_func>:
 8008470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008472:	4614      	mov	r4, r2
 8008474:	461a      	mov	r2, r3
 8008476:	4b09      	ldr	r3, [pc, #36]	@ (800849c <__assert_func+0x2c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4605      	mov	r5, r0
 800847c:	68d8      	ldr	r0, [r3, #12]
 800847e:	b954      	cbnz	r4, 8008496 <__assert_func+0x26>
 8008480:	4b07      	ldr	r3, [pc, #28]	@ (80084a0 <__assert_func+0x30>)
 8008482:	461c      	mov	r4, r3
 8008484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008488:	9100      	str	r1, [sp, #0]
 800848a:	462b      	mov	r3, r5
 800848c:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <__assert_func+0x34>)
 800848e:	f000 f829 	bl	80084e4 <fiprintf>
 8008492:	f000 f839 	bl	8008508 <abort>
 8008496:	4b04      	ldr	r3, [pc, #16]	@ (80084a8 <__assert_func+0x38>)
 8008498:	e7f4      	b.n	8008484 <__assert_func+0x14>
 800849a:	bf00      	nop
 800849c:	200001d8 	.word	0x200001d8
 80084a0:	080098b3 	.word	0x080098b3
 80084a4:	08009885 	.word	0x08009885
 80084a8:	08009878 	.word	0x08009878

080084ac <_calloc_r>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	fba1 5402 	umull	r5, r4, r1, r2
 80084b2:	b93c      	cbnz	r4, 80084c4 <_calloc_r+0x18>
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7ff f9c1 	bl	800783c <_malloc_r>
 80084ba:	4606      	mov	r6, r0
 80084bc:	b928      	cbnz	r0, 80084ca <_calloc_r+0x1e>
 80084be:	2600      	movs	r6, #0
 80084c0:	4630      	mov	r0, r6
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	220c      	movs	r2, #12
 80084c6:	6002      	str	r2, [r0, #0]
 80084c8:	e7f9      	b.n	80084be <_calloc_r+0x12>
 80084ca:	462a      	mov	r2, r5
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7fe fd68 	bl	8006fa2 <memset>
 80084d2:	e7f5      	b.n	80084c0 <_calloc_r+0x14>

080084d4 <malloc>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <malloc+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f7ff b9af 	b.w	800783c <_malloc_r>
 80084de:	bf00      	nop
 80084e0:	200001d8 	.word	0x200001d8

080084e4 <fiprintf>:
 80084e4:	b40e      	push	{r1, r2, r3}
 80084e6:	b503      	push	{r0, r1, lr}
 80084e8:	4601      	mov	r1, r0
 80084ea:	ab03      	add	r3, sp, #12
 80084ec:	4805      	ldr	r0, [pc, #20]	@ (8008504 <fiprintf+0x20>)
 80084ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f2:	6800      	ldr	r0, [r0, #0]
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	f000 f837 	bl	8008568 <_vfiprintf_r>
 80084fa:	b002      	add	sp, #8
 80084fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008500:	b003      	add	sp, #12
 8008502:	4770      	bx	lr
 8008504:	200001d8 	.word	0x200001d8

08008508 <abort>:
 8008508:	b508      	push	{r3, lr}
 800850a:	2006      	movs	r0, #6
 800850c:	f000 fb8e 	bl	8008c2c <raise>
 8008510:	2001      	movs	r0, #1
 8008512:	f7f9 fe56 	bl	80021c2 <_exit>

08008516 <__sfputc_r>:
 8008516:	6893      	ldr	r3, [r2, #8]
 8008518:	3b01      	subs	r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	b410      	push	{r4}
 800851e:	6093      	str	r3, [r2, #8]
 8008520:	da08      	bge.n	8008534 <__sfputc_r+0x1e>
 8008522:	6994      	ldr	r4, [r2, #24]
 8008524:	42a3      	cmp	r3, r4
 8008526:	db01      	blt.n	800852c <__sfputc_r+0x16>
 8008528:	290a      	cmp	r1, #10
 800852a:	d103      	bne.n	8008534 <__sfputc_r+0x1e>
 800852c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008530:	f000 bac0 	b.w	8008ab4 <__swbuf_r>
 8008534:	6813      	ldr	r3, [r2, #0]
 8008536:	1c58      	adds	r0, r3, #1
 8008538:	6010      	str	r0, [r2, #0]
 800853a:	7019      	strb	r1, [r3, #0]
 800853c:	4608      	mov	r0, r1
 800853e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008542:	4770      	bx	lr

08008544 <__sfputs_r>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	4606      	mov	r6, r0
 8008548:	460f      	mov	r7, r1
 800854a:	4614      	mov	r4, r2
 800854c:	18d5      	adds	r5, r2, r3
 800854e:	42ac      	cmp	r4, r5
 8008550:	d101      	bne.n	8008556 <__sfputs_r+0x12>
 8008552:	2000      	movs	r0, #0
 8008554:	e007      	b.n	8008566 <__sfputs_r+0x22>
 8008556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855a:	463a      	mov	r2, r7
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff ffda 	bl	8008516 <__sfputc_r>
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	d1f3      	bne.n	800854e <__sfputs_r+0xa>
 8008566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008568 <_vfiprintf_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	460d      	mov	r5, r1
 800856e:	b09d      	sub	sp, #116	@ 0x74
 8008570:	4614      	mov	r4, r2
 8008572:	4698      	mov	r8, r3
 8008574:	4606      	mov	r6, r0
 8008576:	b118      	cbz	r0, 8008580 <_vfiprintf_r+0x18>
 8008578:	6a03      	ldr	r3, [r0, #32]
 800857a:	b90b      	cbnz	r3, 8008580 <_vfiprintf_r+0x18>
 800857c:	f7fe fc98 	bl	8006eb0 <__sinit>
 8008580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008582:	07d9      	lsls	r1, r3, #31
 8008584:	d405      	bmi.n	8008592 <_vfiprintf_r+0x2a>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	059a      	lsls	r2, r3, #22
 800858a:	d402      	bmi.n	8008592 <_vfiprintf_r+0x2a>
 800858c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800858e:	f7fe fd94 	bl	80070ba <__retarget_lock_acquire_recursive>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	071b      	lsls	r3, r3, #28
 8008596:	d501      	bpl.n	800859c <_vfiprintf_r+0x34>
 8008598:	692b      	ldr	r3, [r5, #16]
 800859a:	b99b      	cbnz	r3, 80085c4 <_vfiprintf_r+0x5c>
 800859c:	4629      	mov	r1, r5
 800859e:	4630      	mov	r0, r6
 80085a0:	f000 fac6 	bl	8008b30 <__swsetup_r>
 80085a4:	b170      	cbz	r0, 80085c4 <_vfiprintf_r+0x5c>
 80085a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085a8:	07dc      	lsls	r4, r3, #31
 80085aa:	d504      	bpl.n	80085b6 <_vfiprintf_r+0x4e>
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295
 80085b0:	b01d      	add	sp, #116	@ 0x74
 80085b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b6:	89ab      	ldrh	r3, [r5, #12]
 80085b8:	0598      	lsls	r0, r3, #22
 80085ba:	d4f7      	bmi.n	80085ac <_vfiprintf_r+0x44>
 80085bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085be:	f7fe fd7d 	bl	80070bc <__retarget_lock_release_recursive>
 80085c2:	e7f3      	b.n	80085ac <_vfiprintf_r+0x44>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c8:	2320      	movs	r3, #32
 80085ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d2:	2330      	movs	r3, #48	@ 0x30
 80085d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008784 <_vfiprintf_r+0x21c>
 80085d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085dc:	f04f 0901 	mov.w	r9, #1
 80085e0:	4623      	mov	r3, r4
 80085e2:	469a      	mov	sl, r3
 80085e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e8:	b10a      	cbz	r2, 80085ee <_vfiprintf_r+0x86>
 80085ea:	2a25      	cmp	r2, #37	@ 0x25
 80085ec:	d1f9      	bne.n	80085e2 <_vfiprintf_r+0x7a>
 80085ee:	ebba 0b04 	subs.w	fp, sl, r4
 80085f2:	d00b      	beq.n	800860c <_vfiprintf_r+0xa4>
 80085f4:	465b      	mov	r3, fp
 80085f6:	4622      	mov	r2, r4
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff ffa2 	bl	8008544 <__sfputs_r>
 8008600:	3001      	adds	r0, #1
 8008602:	f000 80a7 	beq.w	8008754 <_vfiprintf_r+0x1ec>
 8008606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008608:	445a      	add	r2, fp
 800860a:	9209      	str	r2, [sp, #36]	@ 0x24
 800860c:	f89a 3000 	ldrb.w	r3, [sl]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 809f 	beq.w	8008754 <_vfiprintf_r+0x1ec>
 8008616:	2300      	movs	r3, #0
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008620:	f10a 0a01 	add.w	sl, sl, #1
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800862c:	931a      	str	r3, [sp, #104]	@ 0x68
 800862e:	4654      	mov	r4, sl
 8008630:	2205      	movs	r2, #5
 8008632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008636:	4853      	ldr	r0, [pc, #332]	@ (8008784 <_vfiprintf_r+0x21c>)
 8008638:	f7f7 fdf2 	bl	8000220 <memchr>
 800863c:	9a04      	ldr	r2, [sp, #16]
 800863e:	b9d8      	cbnz	r0, 8008678 <_vfiprintf_r+0x110>
 8008640:	06d1      	lsls	r1, r2, #27
 8008642:	bf44      	itt	mi
 8008644:	2320      	movmi	r3, #32
 8008646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800864a:	0713      	lsls	r3, r2, #28
 800864c:	bf44      	itt	mi
 800864e:	232b      	movmi	r3, #43	@ 0x2b
 8008650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008654:	f89a 3000 	ldrb.w	r3, [sl]
 8008658:	2b2a      	cmp	r3, #42	@ 0x2a
 800865a:	d015      	beq.n	8008688 <_vfiprintf_r+0x120>
 800865c:	9a07      	ldr	r2, [sp, #28]
 800865e:	4654      	mov	r4, sl
 8008660:	2000      	movs	r0, #0
 8008662:	f04f 0c0a 	mov.w	ip, #10
 8008666:	4621      	mov	r1, r4
 8008668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866c:	3b30      	subs	r3, #48	@ 0x30
 800866e:	2b09      	cmp	r3, #9
 8008670:	d94b      	bls.n	800870a <_vfiprintf_r+0x1a2>
 8008672:	b1b0      	cbz	r0, 80086a2 <_vfiprintf_r+0x13a>
 8008674:	9207      	str	r2, [sp, #28]
 8008676:	e014      	b.n	80086a2 <_vfiprintf_r+0x13a>
 8008678:	eba0 0308 	sub.w	r3, r0, r8
 800867c:	fa09 f303 	lsl.w	r3, r9, r3
 8008680:	4313      	orrs	r3, r2
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	46a2      	mov	sl, r4
 8008686:	e7d2      	b.n	800862e <_vfiprintf_r+0xc6>
 8008688:	9b03      	ldr	r3, [sp, #12]
 800868a:	1d19      	adds	r1, r3, #4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	9103      	str	r1, [sp, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfbb      	ittet	lt
 8008694:	425b      	neglt	r3, r3
 8008696:	f042 0202 	orrlt.w	r2, r2, #2
 800869a:	9307      	strge	r3, [sp, #28]
 800869c:	9307      	strlt	r3, [sp, #28]
 800869e:	bfb8      	it	lt
 80086a0:	9204      	strlt	r2, [sp, #16]
 80086a2:	7823      	ldrb	r3, [r4, #0]
 80086a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a6:	d10a      	bne.n	80086be <_vfiprintf_r+0x156>
 80086a8:	7863      	ldrb	r3, [r4, #1]
 80086aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80086ac:	d132      	bne.n	8008714 <_vfiprintf_r+0x1ac>
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	9203      	str	r2, [sp, #12]
 80086b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ba:	3402      	adds	r4, #2
 80086bc:	9305      	str	r3, [sp, #20]
 80086be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008794 <_vfiprintf_r+0x22c>
 80086c2:	7821      	ldrb	r1, [r4, #0]
 80086c4:	2203      	movs	r2, #3
 80086c6:	4650      	mov	r0, sl
 80086c8:	f7f7 fdaa 	bl	8000220 <memchr>
 80086cc:	b138      	cbz	r0, 80086de <_vfiprintf_r+0x176>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	eba0 000a 	sub.w	r0, r0, sl
 80086d4:	2240      	movs	r2, #64	@ 0x40
 80086d6:	4082      	lsls	r2, r0
 80086d8:	4313      	orrs	r3, r2
 80086da:	3401      	adds	r4, #1
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e2:	4829      	ldr	r0, [pc, #164]	@ (8008788 <_vfiprintf_r+0x220>)
 80086e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086e8:	2206      	movs	r2, #6
 80086ea:	f7f7 fd99 	bl	8000220 <memchr>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d03f      	beq.n	8008772 <_vfiprintf_r+0x20a>
 80086f2:	4b26      	ldr	r3, [pc, #152]	@ (800878c <_vfiprintf_r+0x224>)
 80086f4:	bb1b      	cbnz	r3, 800873e <_vfiprintf_r+0x1d6>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	3307      	adds	r3, #7
 80086fa:	f023 0307 	bic.w	r3, r3, #7
 80086fe:	3308      	adds	r3, #8
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008704:	443b      	add	r3, r7
 8008706:	9309      	str	r3, [sp, #36]	@ 0x24
 8008708:	e76a      	b.n	80085e0 <_vfiprintf_r+0x78>
 800870a:	fb0c 3202 	mla	r2, ip, r2, r3
 800870e:	460c      	mov	r4, r1
 8008710:	2001      	movs	r0, #1
 8008712:	e7a8      	b.n	8008666 <_vfiprintf_r+0xfe>
 8008714:	2300      	movs	r3, #0
 8008716:	3401      	adds	r4, #1
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	4619      	mov	r1, r3
 800871c:	f04f 0c0a 	mov.w	ip, #10
 8008720:	4620      	mov	r0, r4
 8008722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008726:	3a30      	subs	r2, #48	@ 0x30
 8008728:	2a09      	cmp	r2, #9
 800872a:	d903      	bls.n	8008734 <_vfiprintf_r+0x1cc>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0c6      	beq.n	80086be <_vfiprintf_r+0x156>
 8008730:	9105      	str	r1, [sp, #20]
 8008732:	e7c4      	b.n	80086be <_vfiprintf_r+0x156>
 8008734:	fb0c 2101 	mla	r1, ip, r1, r2
 8008738:	4604      	mov	r4, r0
 800873a:	2301      	movs	r3, #1
 800873c:	e7f0      	b.n	8008720 <_vfiprintf_r+0x1b8>
 800873e:	ab03      	add	r3, sp, #12
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	462a      	mov	r2, r5
 8008744:	4b12      	ldr	r3, [pc, #72]	@ (8008790 <_vfiprintf_r+0x228>)
 8008746:	a904      	add	r1, sp, #16
 8008748:	4630      	mov	r0, r6
 800874a:	f3af 8000 	nop.w
 800874e:	4607      	mov	r7, r0
 8008750:	1c78      	adds	r0, r7, #1
 8008752:	d1d6      	bne.n	8008702 <_vfiprintf_r+0x19a>
 8008754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008756:	07d9      	lsls	r1, r3, #31
 8008758:	d405      	bmi.n	8008766 <_vfiprintf_r+0x1fe>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	059a      	lsls	r2, r3, #22
 800875e:	d402      	bmi.n	8008766 <_vfiprintf_r+0x1fe>
 8008760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008762:	f7fe fcab 	bl	80070bc <__retarget_lock_release_recursive>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	065b      	lsls	r3, r3, #25
 800876a:	f53f af1f 	bmi.w	80085ac <_vfiprintf_r+0x44>
 800876e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008770:	e71e      	b.n	80085b0 <_vfiprintf_r+0x48>
 8008772:	ab03      	add	r3, sp, #12
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	462a      	mov	r2, r5
 8008778:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <_vfiprintf_r+0x228>)
 800877a:	a904      	add	r1, sp, #16
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f879 	bl	8008874 <_printf_i>
 8008782:	e7e4      	b.n	800874e <_vfiprintf_r+0x1e6>
 8008784:	080098b4 	.word	0x080098b4
 8008788:	080098be 	.word	0x080098be
 800878c:	00000000 	.word	0x00000000
 8008790:	08008545 	.word	0x08008545
 8008794:	080098ba 	.word	0x080098ba

08008798 <_printf_common>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	4616      	mov	r6, r2
 800879e:	4698      	mov	r8, r3
 80087a0:	688a      	ldr	r2, [r1, #8]
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bfb8      	it	lt
 80087ac:	4613      	movlt	r3, r2
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087b4:	4607      	mov	r7, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b10a      	cbz	r2, 80087be <_printf_common+0x26>
 80087ba:	3301      	adds	r3, #1
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	0699      	lsls	r1, r3, #26
 80087c2:	bf42      	ittt	mi
 80087c4:	6833      	ldrmi	r3, [r6, #0]
 80087c6:	3302      	addmi	r3, #2
 80087c8:	6033      	strmi	r3, [r6, #0]
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	f015 0506 	ands.w	r5, r5, #6
 80087d0:	d106      	bne.n	80087e0 <_printf_common+0x48>
 80087d2:	f104 0a19 	add.w	sl, r4, #25
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	6832      	ldr	r2, [r6, #0]
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dc26      	bgt.n	800882e <_printf_common+0x96>
 80087e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	3b00      	subs	r3, #0
 80087e8:	bf18      	it	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	0692      	lsls	r2, r2, #26
 80087ee:	d42b      	bmi.n	8008848 <_printf_common+0xb0>
 80087f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087f4:	4641      	mov	r1, r8
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c8      	blx	r9
 80087fa:	3001      	adds	r0, #1
 80087fc:	d01e      	beq.n	800883c <_printf_common+0xa4>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	f003 0306 	and.w	r3, r3, #6
 8008806:	2b04      	cmp	r3, #4
 8008808:	bf02      	ittt	eq
 800880a:	68e5      	ldreq	r5, [r4, #12]
 800880c:	6833      	ldreq	r3, [r6, #0]
 800880e:	1aed      	subeq	r5, r5, r3
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	bf0c      	ite	eq
 8008814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008818:	2500      	movne	r5, #0
 800881a:	4293      	cmp	r3, r2
 800881c:	bfc4      	itt	gt
 800881e:	1a9b      	subgt	r3, r3, r2
 8008820:	18ed      	addgt	r5, r5, r3
 8008822:	2600      	movs	r6, #0
 8008824:	341a      	adds	r4, #26
 8008826:	42b5      	cmp	r5, r6
 8008828:	d11a      	bne.n	8008860 <_printf_common+0xc8>
 800882a:	2000      	movs	r0, #0
 800882c:	e008      	b.n	8008840 <_printf_common+0xa8>
 800882e:	2301      	movs	r3, #1
 8008830:	4652      	mov	r2, sl
 8008832:	4641      	mov	r1, r8
 8008834:	4638      	mov	r0, r7
 8008836:	47c8      	blx	r9
 8008838:	3001      	adds	r0, #1
 800883a:	d103      	bne.n	8008844 <_printf_common+0xac>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	3501      	adds	r5, #1
 8008846:	e7c6      	b.n	80087d6 <_printf_common+0x3e>
 8008848:	18e1      	adds	r1, r4, r3
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	2030      	movs	r0, #48	@ 0x30
 800884e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008852:	4422      	add	r2, r4
 8008854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800885c:	3302      	adds	r3, #2
 800885e:	e7c7      	b.n	80087f0 <_printf_common+0x58>
 8008860:	2301      	movs	r3, #1
 8008862:	4622      	mov	r2, r4
 8008864:	4641      	mov	r1, r8
 8008866:	4638      	mov	r0, r7
 8008868:	47c8      	blx	r9
 800886a:	3001      	adds	r0, #1
 800886c:	d0e6      	beq.n	800883c <_printf_common+0xa4>
 800886e:	3601      	adds	r6, #1
 8008870:	e7d9      	b.n	8008826 <_printf_common+0x8e>
	...

08008874 <_printf_i>:
 8008874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	7e0f      	ldrb	r7, [r1, #24]
 800887a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800887c:	2f78      	cmp	r7, #120	@ 0x78
 800887e:	4691      	mov	r9, r2
 8008880:	4680      	mov	r8, r0
 8008882:	460c      	mov	r4, r1
 8008884:	469a      	mov	sl, r3
 8008886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800888a:	d807      	bhi.n	800889c <_printf_i+0x28>
 800888c:	2f62      	cmp	r7, #98	@ 0x62
 800888e:	d80a      	bhi.n	80088a6 <_printf_i+0x32>
 8008890:	2f00      	cmp	r7, #0
 8008892:	f000 80d2 	beq.w	8008a3a <_printf_i+0x1c6>
 8008896:	2f58      	cmp	r7, #88	@ 0x58
 8008898:	f000 80b9 	beq.w	8008a0e <_printf_i+0x19a>
 800889c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088a4:	e03a      	b.n	800891c <_printf_i+0xa8>
 80088a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088aa:	2b15      	cmp	r3, #21
 80088ac:	d8f6      	bhi.n	800889c <_printf_i+0x28>
 80088ae:	a101      	add	r1, pc, #4	@ (adr r1, 80088b4 <_printf_i+0x40>)
 80088b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b4:	0800890d 	.word	0x0800890d
 80088b8:	08008921 	.word	0x08008921
 80088bc:	0800889d 	.word	0x0800889d
 80088c0:	0800889d 	.word	0x0800889d
 80088c4:	0800889d 	.word	0x0800889d
 80088c8:	0800889d 	.word	0x0800889d
 80088cc:	08008921 	.word	0x08008921
 80088d0:	0800889d 	.word	0x0800889d
 80088d4:	0800889d 	.word	0x0800889d
 80088d8:	0800889d 	.word	0x0800889d
 80088dc:	0800889d 	.word	0x0800889d
 80088e0:	08008a21 	.word	0x08008a21
 80088e4:	0800894b 	.word	0x0800894b
 80088e8:	080089db 	.word	0x080089db
 80088ec:	0800889d 	.word	0x0800889d
 80088f0:	0800889d 	.word	0x0800889d
 80088f4:	08008a43 	.word	0x08008a43
 80088f8:	0800889d 	.word	0x0800889d
 80088fc:	0800894b 	.word	0x0800894b
 8008900:	0800889d 	.word	0x0800889d
 8008904:	0800889d 	.word	0x0800889d
 8008908:	080089e3 	.word	0x080089e3
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6032      	str	r2, [r6, #0]
 8008914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800891c:	2301      	movs	r3, #1
 800891e:	e09d      	b.n	8008a5c <_printf_i+0x1e8>
 8008920:	6833      	ldr	r3, [r6, #0]
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	1d19      	adds	r1, r3, #4
 8008926:	6031      	str	r1, [r6, #0]
 8008928:	0606      	lsls	r6, r0, #24
 800892a:	d501      	bpl.n	8008930 <_printf_i+0xbc>
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	e003      	b.n	8008938 <_printf_i+0xc4>
 8008930:	0645      	lsls	r5, r0, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0xb8>
 8008934:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008938:	2d00      	cmp	r5, #0
 800893a:	da03      	bge.n	8008944 <_printf_i+0xd0>
 800893c:	232d      	movs	r3, #45	@ 0x2d
 800893e:	426d      	negs	r5, r5
 8008940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008944:	4859      	ldr	r0, [pc, #356]	@ (8008aac <_printf_i+0x238>)
 8008946:	230a      	movs	r3, #10
 8008948:	e011      	b.n	800896e <_printf_i+0xfa>
 800894a:	6821      	ldr	r1, [r4, #0]
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	0608      	lsls	r0, r1, #24
 8008950:	f853 5b04 	ldr.w	r5, [r3], #4
 8008954:	d402      	bmi.n	800895c <_printf_i+0xe8>
 8008956:	0649      	lsls	r1, r1, #25
 8008958:	bf48      	it	mi
 800895a:	b2ad      	uxthmi	r5, r5
 800895c:	2f6f      	cmp	r7, #111	@ 0x6f
 800895e:	4853      	ldr	r0, [pc, #332]	@ (8008aac <_printf_i+0x238>)
 8008960:	6033      	str	r3, [r6, #0]
 8008962:	bf14      	ite	ne
 8008964:	230a      	movne	r3, #10
 8008966:	2308      	moveq	r3, #8
 8008968:	2100      	movs	r1, #0
 800896a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800896e:	6866      	ldr	r6, [r4, #4]
 8008970:	60a6      	str	r6, [r4, #8]
 8008972:	2e00      	cmp	r6, #0
 8008974:	bfa2      	ittt	ge
 8008976:	6821      	ldrge	r1, [r4, #0]
 8008978:	f021 0104 	bicge.w	r1, r1, #4
 800897c:	6021      	strge	r1, [r4, #0]
 800897e:	b90d      	cbnz	r5, 8008984 <_printf_i+0x110>
 8008980:	2e00      	cmp	r6, #0
 8008982:	d04b      	beq.n	8008a1c <_printf_i+0x1a8>
 8008984:	4616      	mov	r6, r2
 8008986:	fbb5 f1f3 	udiv	r1, r5, r3
 800898a:	fb03 5711 	mls	r7, r3, r1, r5
 800898e:	5dc7      	ldrb	r7, [r0, r7]
 8008990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008994:	462f      	mov	r7, r5
 8008996:	42bb      	cmp	r3, r7
 8008998:	460d      	mov	r5, r1
 800899a:	d9f4      	bls.n	8008986 <_printf_i+0x112>
 800899c:	2b08      	cmp	r3, #8
 800899e:	d10b      	bne.n	80089b8 <_printf_i+0x144>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07df      	lsls	r7, r3, #31
 80089a4:	d508      	bpl.n	80089b8 <_printf_i+0x144>
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	4299      	cmp	r1, r3
 80089ac:	bfde      	ittt	le
 80089ae:	2330      	movle	r3, #48	@ 0x30
 80089b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089b8:	1b92      	subs	r2, r2, r6
 80089ba:	6122      	str	r2, [r4, #16]
 80089bc:	f8cd a000 	str.w	sl, [sp]
 80089c0:	464b      	mov	r3, r9
 80089c2:	aa03      	add	r2, sp, #12
 80089c4:	4621      	mov	r1, r4
 80089c6:	4640      	mov	r0, r8
 80089c8:	f7ff fee6 	bl	8008798 <_printf_common>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d14a      	bne.n	8008a66 <_printf_i+0x1f2>
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295
 80089d4:	b004      	add	sp, #16
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f043 0320 	orr.w	r3, r3, #32
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	4833      	ldr	r0, [pc, #204]	@ (8008ab0 <_printf_i+0x23c>)
 80089e4:	2778      	movs	r7, #120	@ 0x78
 80089e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	6831      	ldr	r1, [r6, #0]
 80089ee:	061f      	lsls	r7, r3, #24
 80089f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089f4:	d402      	bmi.n	80089fc <_printf_i+0x188>
 80089f6:	065f      	lsls	r7, r3, #25
 80089f8:	bf48      	it	mi
 80089fa:	b2ad      	uxthmi	r5, r5
 80089fc:	6031      	str	r1, [r6, #0]
 80089fe:	07d9      	lsls	r1, r3, #31
 8008a00:	bf44      	itt	mi
 8008a02:	f043 0320 	orrmi.w	r3, r3, #32
 8008a06:	6023      	strmi	r3, [r4, #0]
 8008a08:	b11d      	cbz	r5, 8008a12 <_printf_i+0x19e>
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	e7ac      	b.n	8008968 <_printf_i+0xf4>
 8008a0e:	4827      	ldr	r0, [pc, #156]	@ (8008aac <_printf_i+0x238>)
 8008a10:	e7e9      	b.n	80089e6 <_printf_i+0x172>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	e7f6      	b.n	8008a0a <_printf_i+0x196>
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	e7bd      	b.n	800899c <_printf_i+0x128>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	6961      	ldr	r1, [r4, #20]
 8008a26:	1d18      	adds	r0, r3, #4
 8008a28:	6030      	str	r0, [r6, #0]
 8008a2a:	062e      	lsls	r6, r5, #24
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	d501      	bpl.n	8008a34 <_printf_i+0x1c0>
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <_printf_i+0x1c6>
 8008a34:	0668      	lsls	r0, r5, #25
 8008a36:	d5fb      	bpl.n	8008a30 <_printf_i+0x1bc>
 8008a38:	8019      	strh	r1, [r3, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	4616      	mov	r6, r2
 8008a40:	e7bc      	b.n	80089bc <_printf_i+0x148>
 8008a42:	6833      	ldr	r3, [r6, #0]
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	6032      	str	r2, [r6, #0]
 8008a48:	681e      	ldr	r6, [r3, #0]
 8008a4a:	6862      	ldr	r2, [r4, #4]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7f7 fbe6 	bl	8000220 <memchr>
 8008a54:	b108      	cbz	r0, 8008a5a <_printf_i+0x1e6>
 8008a56:	1b80      	subs	r0, r0, r6
 8008a58:	6060      	str	r0, [r4, #4]
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a64:	e7aa      	b.n	80089bc <_printf_i+0x148>
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d0ad      	beq.n	80089d0 <_printf_i+0x15c>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	079b      	lsls	r3, r3, #30
 8008a78:	d413      	bmi.n	8008aa2 <_printf_i+0x22e>
 8008a7a:	68e0      	ldr	r0, [r4, #12]
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	4298      	cmp	r0, r3
 8008a80:	bfb8      	it	lt
 8008a82:	4618      	movlt	r0, r3
 8008a84:	e7a6      	b.n	80089d4 <_printf_i+0x160>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	47d0      	blx	sl
 8008a90:	3001      	adds	r0, #1
 8008a92:	d09d      	beq.n	80089d0 <_printf_i+0x15c>
 8008a94:	3501      	adds	r5, #1
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	9903      	ldr	r1, [sp, #12]
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	dcf2      	bgt.n	8008a86 <_printf_i+0x212>
 8008aa0:	e7eb      	b.n	8008a7a <_printf_i+0x206>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	f104 0619 	add.w	r6, r4, #25
 8008aa8:	e7f5      	b.n	8008a96 <_printf_i+0x222>
 8008aaa:	bf00      	nop
 8008aac:	080098c5 	.word	0x080098c5
 8008ab0:	080098d6 	.word	0x080098d6

08008ab4 <__swbuf_r>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	460e      	mov	r6, r1
 8008ab8:	4614      	mov	r4, r2
 8008aba:	4605      	mov	r5, r0
 8008abc:	b118      	cbz	r0, 8008ac6 <__swbuf_r+0x12>
 8008abe:	6a03      	ldr	r3, [r0, #32]
 8008ac0:	b90b      	cbnz	r3, 8008ac6 <__swbuf_r+0x12>
 8008ac2:	f7fe f9f5 	bl	8006eb0 <__sinit>
 8008ac6:	69a3      	ldr	r3, [r4, #24]
 8008ac8:	60a3      	str	r3, [r4, #8]
 8008aca:	89a3      	ldrh	r3, [r4, #12]
 8008acc:	071a      	lsls	r2, r3, #28
 8008ace:	d501      	bpl.n	8008ad4 <__swbuf_r+0x20>
 8008ad0:	6923      	ldr	r3, [r4, #16]
 8008ad2:	b943      	cbnz	r3, 8008ae6 <__swbuf_r+0x32>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f000 f82a 	bl	8008b30 <__swsetup_r>
 8008adc:	b118      	cbz	r0, 8008ae6 <__swbuf_r+0x32>
 8008ade:	f04f 37ff 	mov.w	r7, #4294967295
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	6922      	ldr	r2, [r4, #16]
 8008aea:	1a98      	subs	r0, r3, r2
 8008aec:	6963      	ldr	r3, [r4, #20]
 8008aee:	b2f6      	uxtb	r6, r6
 8008af0:	4283      	cmp	r3, r0
 8008af2:	4637      	mov	r7, r6
 8008af4:	dc05      	bgt.n	8008b02 <__swbuf_r+0x4e>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4628      	mov	r0, r5
 8008afa:	f7ff fc81 	bl	8008400 <_fflush_r>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1ed      	bne.n	8008ade <__swbuf_r+0x2a>
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	60a3      	str	r3, [r4, #8]
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	6022      	str	r2, [r4, #0]
 8008b0e:	701e      	strb	r6, [r3, #0]
 8008b10:	6962      	ldr	r2, [r4, #20]
 8008b12:	1c43      	adds	r3, r0, #1
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d004      	beq.n	8008b22 <__swbuf_r+0x6e>
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	07db      	lsls	r3, r3, #31
 8008b1c:	d5e1      	bpl.n	8008ae2 <__swbuf_r+0x2e>
 8008b1e:	2e0a      	cmp	r6, #10
 8008b20:	d1df      	bne.n	8008ae2 <__swbuf_r+0x2e>
 8008b22:	4621      	mov	r1, r4
 8008b24:	4628      	mov	r0, r5
 8008b26:	f7ff fc6b 	bl	8008400 <_fflush_r>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	d0d9      	beq.n	8008ae2 <__swbuf_r+0x2e>
 8008b2e:	e7d6      	b.n	8008ade <__swbuf_r+0x2a>

08008b30 <__swsetup_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4b29      	ldr	r3, [pc, #164]	@ (8008bd8 <__swsetup_r+0xa8>)
 8008b34:	4605      	mov	r5, r0
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	460c      	mov	r4, r1
 8008b3a:	b118      	cbz	r0, 8008b44 <__swsetup_r+0x14>
 8008b3c:	6a03      	ldr	r3, [r0, #32]
 8008b3e:	b90b      	cbnz	r3, 8008b44 <__swsetup_r+0x14>
 8008b40:	f7fe f9b6 	bl	8006eb0 <__sinit>
 8008b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b48:	0719      	lsls	r1, r3, #28
 8008b4a:	d422      	bmi.n	8008b92 <__swsetup_r+0x62>
 8008b4c:	06da      	lsls	r2, r3, #27
 8008b4e:	d407      	bmi.n	8008b60 <__swsetup_r+0x30>
 8008b50:	2209      	movs	r2, #9
 8008b52:	602a      	str	r2, [r5, #0]
 8008b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5e:	e033      	b.n	8008bc8 <__swsetup_r+0x98>
 8008b60:	0758      	lsls	r0, r3, #29
 8008b62:	d512      	bpl.n	8008b8a <__swsetup_r+0x5a>
 8008b64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b66:	b141      	cbz	r1, 8008b7a <__swsetup_r+0x4a>
 8008b68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d002      	beq.n	8008b76 <__swsetup_r+0x46>
 8008b70:	4628      	mov	r0, r5
 8008b72:	f7fe fabd 	bl	80070f0 <_free_r>
 8008b76:	2300      	movs	r3, #0
 8008b78:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	2300      	movs	r3, #0
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	f043 0308 	orr.w	r3, r3, #8
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	b94b      	cbnz	r3, 8008baa <__swsetup_r+0x7a>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ba0:	d003      	beq.n	8008baa <__swsetup_r+0x7a>
 8008ba2:	4621      	mov	r1, r4
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	f000 f883 	bl	8008cb0 <__smakebuf_r>
 8008baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bae:	f013 0201 	ands.w	r2, r3, #1
 8008bb2:	d00a      	beq.n	8008bca <__swsetup_r+0x9a>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	60a2      	str	r2, [r4, #8]
 8008bb8:	6962      	ldr	r2, [r4, #20]
 8008bba:	4252      	negs	r2, r2
 8008bbc:	61a2      	str	r2, [r4, #24]
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	b942      	cbnz	r2, 8008bd4 <__swsetup_r+0xa4>
 8008bc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bc6:	d1c5      	bne.n	8008b54 <__swsetup_r+0x24>
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	0799      	lsls	r1, r3, #30
 8008bcc:	bf58      	it	pl
 8008bce:	6962      	ldrpl	r2, [r4, #20]
 8008bd0:	60a2      	str	r2, [r4, #8]
 8008bd2:	e7f4      	b.n	8008bbe <__swsetup_r+0x8e>
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e7f7      	b.n	8008bc8 <__swsetup_r+0x98>
 8008bd8:	200001d8 	.word	0x200001d8

08008bdc <_raise_r>:
 8008bdc:	291f      	cmp	r1, #31
 8008bde:	b538      	push	{r3, r4, r5, lr}
 8008be0:	4605      	mov	r5, r0
 8008be2:	460c      	mov	r4, r1
 8008be4:	d904      	bls.n	8008bf0 <_raise_r+0x14>
 8008be6:	2316      	movs	r3, #22
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	f04f 30ff 	mov.w	r0, #4294967295
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bf2:	b112      	cbz	r2, 8008bfa <_raise_r+0x1e>
 8008bf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bf8:	b94b      	cbnz	r3, 8008c0e <_raise_r+0x32>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 f830 	bl	8008c60 <_getpid_r>
 8008c00:	4622      	mov	r2, r4
 8008c02:	4601      	mov	r1, r0
 8008c04:	4628      	mov	r0, r5
 8008c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0a:	f000 b817 	b.w	8008c3c <_kill_r>
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d00a      	beq.n	8008c28 <_raise_r+0x4c>
 8008c12:	1c59      	adds	r1, r3, #1
 8008c14:	d103      	bne.n	8008c1e <_raise_r+0x42>
 8008c16:	2316      	movs	r3, #22
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	e7e7      	b.n	8008bee <_raise_r+0x12>
 8008c1e:	2100      	movs	r1, #0
 8008c20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c24:	4620      	mov	r0, r4
 8008c26:	4798      	blx	r3
 8008c28:	2000      	movs	r0, #0
 8008c2a:	e7e0      	b.n	8008bee <_raise_r+0x12>

08008c2c <raise>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	@ (8008c38 <raise+0xc>)
 8008c2e:	4601      	mov	r1, r0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f7ff bfd3 	b.w	8008bdc <_raise_r>
 8008c36:	bf00      	nop
 8008c38:	200001d8 	.word	0x200001d8

08008c3c <_kill_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	4d07      	ldr	r5, [pc, #28]	@ (8008c5c <_kill_r+0x20>)
 8008c40:	2300      	movs	r3, #0
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f7f9 faaa 	bl	80021a2 <_kill>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_kill_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_kill_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000b6c 	.word	0x20000b6c

08008c60 <_getpid_r>:
 8008c60:	f7f9 ba97 	b.w	8002192 <_getpid>

08008c64 <__swhatbuf_r>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	460c      	mov	r4, r1
 8008c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	b096      	sub	sp, #88	@ 0x58
 8008c70:	4615      	mov	r5, r2
 8008c72:	461e      	mov	r6, r3
 8008c74:	da0d      	bge.n	8008c92 <__swhatbuf_r+0x2e>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c7c:	f04f 0100 	mov.w	r1, #0
 8008c80:	bf14      	ite	ne
 8008c82:	2340      	movne	r3, #64	@ 0x40
 8008c84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c88:	2000      	movs	r0, #0
 8008c8a:	6031      	str	r1, [r6, #0]
 8008c8c:	602b      	str	r3, [r5, #0]
 8008c8e:	b016      	add	sp, #88	@ 0x58
 8008c90:	bd70      	pop	{r4, r5, r6, pc}
 8008c92:	466a      	mov	r2, sp
 8008c94:	f000 f848 	bl	8008d28 <_fstat_r>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	dbec      	blt.n	8008c76 <__swhatbuf_r+0x12>
 8008c9c:	9901      	ldr	r1, [sp, #4]
 8008c9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ca2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ca6:	4259      	negs	r1, r3
 8008ca8:	4159      	adcs	r1, r3
 8008caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cae:	e7eb      	b.n	8008c88 <__swhatbuf_r+0x24>

08008cb0 <__smakebuf_r>:
 8008cb0:	898b      	ldrh	r3, [r1, #12]
 8008cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cb4:	079d      	lsls	r5, r3, #30
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	460c      	mov	r4, r1
 8008cba:	d507      	bpl.n	8008ccc <__smakebuf_r+0x1c>
 8008cbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	6163      	str	r3, [r4, #20]
 8008cc8:	b003      	add	sp, #12
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ccc:	ab01      	add	r3, sp, #4
 8008cce:	466a      	mov	r2, sp
 8008cd0:	f7ff ffc8 	bl	8008c64 <__swhatbuf_r>
 8008cd4:	9f00      	ldr	r7, [sp, #0]
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	4639      	mov	r1, r7
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7fe fdae 	bl	800783c <_malloc_r>
 8008ce0:	b948      	cbnz	r0, 8008cf6 <__smakebuf_r+0x46>
 8008ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce6:	059a      	lsls	r2, r3, #22
 8008ce8:	d4ee      	bmi.n	8008cc8 <__smakebuf_r+0x18>
 8008cea:	f023 0303 	bic.w	r3, r3, #3
 8008cee:	f043 0302 	orr.w	r3, r3, #2
 8008cf2:	81a3      	strh	r3, [r4, #12]
 8008cf4:	e7e2      	b.n	8008cbc <__smakebuf_r+0xc>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	6020      	str	r0, [r4, #0]
 8008cfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	9b01      	ldr	r3, [sp, #4]
 8008d02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d06:	b15b      	cbz	r3, 8008d20 <__smakebuf_r+0x70>
 8008d08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f000 f81d 	bl	8008d4c <_isatty_r>
 8008d12:	b128      	cbz	r0, 8008d20 <__smakebuf_r+0x70>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f023 0303 	bic.w	r3, r3, #3
 8008d1a:	f043 0301 	orr.w	r3, r3, #1
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	431d      	orrs	r5, r3
 8008d24:	81a5      	strh	r5, [r4, #12]
 8008d26:	e7cf      	b.n	8008cc8 <__smakebuf_r+0x18>

08008d28 <_fstat_r>:
 8008d28:	b538      	push	{r3, r4, r5, lr}
 8008d2a:	4d07      	ldr	r5, [pc, #28]	@ (8008d48 <_fstat_r+0x20>)
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4608      	mov	r0, r1
 8008d32:	4611      	mov	r1, r2
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	f7f9 fa94 	bl	8002262 <_fstat>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d102      	bne.n	8008d44 <_fstat_r+0x1c>
 8008d3e:	682b      	ldr	r3, [r5, #0]
 8008d40:	b103      	cbz	r3, 8008d44 <_fstat_r+0x1c>
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	bd38      	pop	{r3, r4, r5, pc}
 8008d46:	bf00      	nop
 8008d48:	20000b6c 	.word	0x20000b6c

08008d4c <_isatty_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d06      	ldr	r5, [pc, #24]	@ (8008d68 <_isatty_r+0x1c>)
 8008d50:	2300      	movs	r3, #0
 8008d52:	4604      	mov	r4, r0
 8008d54:	4608      	mov	r0, r1
 8008d56:	602b      	str	r3, [r5, #0]
 8008d58:	f7f9 fa93 	bl	8002282 <_isatty>
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	d102      	bne.n	8008d66 <_isatty_r+0x1a>
 8008d60:	682b      	ldr	r3, [r5, #0]
 8008d62:	b103      	cbz	r3, 8008d66 <_isatty_r+0x1a>
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	bd38      	pop	{r3, r4, r5, pc}
 8008d68:	20000b6c 	.word	0x20000b6c

08008d6c <powf>:
 8008d6c:	b508      	push	{r3, lr}
 8008d6e:	ed2d 8b04 	vpush	{d8-d9}
 8008d72:	eeb0 8a60 	vmov.f32	s16, s1
 8008d76:	eeb0 9a40 	vmov.f32	s18, s0
 8008d7a:	f000 f859 	bl	8008e30 <__ieee754_powf>
 8008d7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d86:	eef0 8a40 	vmov.f32	s17, s0
 8008d8a:	d63e      	bvs.n	8008e0a <powf+0x9e>
 8008d8c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8008d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d94:	d112      	bne.n	8008dbc <powf+0x50>
 8008d96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9e:	d039      	beq.n	8008e14 <powf+0xa8>
 8008da0:	eeb0 0a48 	vmov.f32	s0, s16
 8008da4:	f000 f839 	bl	8008e1a <finitef>
 8008da8:	b378      	cbz	r0, 8008e0a <powf+0x9e>
 8008daa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db2:	d52a      	bpl.n	8008e0a <powf+0x9e>
 8008db4:	f7fe f956 	bl	8007064 <__errno>
 8008db8:	2322      	movs	r3, #34	@ 0x22
 8008dba:	e014      	b.n	8008de6 <powf+0x7a>
 8008dbc:	f000 f82d 	bl	8008e1a <finitef>
 8008dc0:	b998      	cbnz	r0, 8008dea <powf+0x7e>
 8008dc2:	eeb0 0a49 	vmov.f32	s0, s18
 8008dc6:	f000 f828 	bl	8008e1a <finitef>
 8008dca:	b170      	cbz	r0, 8008dea <powf+0x7e>
 8008dcc:	eeb0 0a48 	vmov.f32	s0, s16
 8008dd0:	f000 f823 	bl	8008e1a <finitef>
 8008dd4:	b148      	cbz	r0, 8008dea <powf+0x7e>
 8008dd6:	eef4 8a68 	vcmp.f32	s17, s17
 8008dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dde:	d7e9      	bvc.n	8008db4 <powf+0x48>
 8008de0:	f7fe f940 	bl	8007064 <__errno>
 8008de4:	2321      	movs	r3, #33	@ 0x21
 8008de6:	6003      	str	r3, [r0, #0]
 8008de8:	e00f      	b.n	8008e0a <powf+0x9e>
 8008dea:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df2:	d10a      	bne.n	8008e0a <powf+0x9e>
 8008df4:	eeb0 0a49 	vmov.f32	s0, s18
 8008df8:	f000 f80f 	bl	8008e1a <finitef>
 8008dfc:	b128      	cbz	r0, 8008e0a <powf+0x9e>
 8008dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8008e02:	f000 f80a 	bl	8008e1a <finitef>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d1d4      	bne.n	8008db4 <powf+0x48>
 8008e0a:	eeb0 0a68 	vmov.f32	s0, s17
 8008e0e:	ecbd 8b04 	vpop	{d8-d9}
 8008e12:	bd08      	pop	{r3, pc}
 8008e14:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8008e18:	e7f7      	b.n	8008e0a <powf+0x9e>

08008e1a <finitef>:
 8008e1a:	ee10 3a10 	vmov	r3, s0
 8008e1e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008e22:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008e26:	bfac      	ite	ge
 8008e28:	2000      	movge	r0, #0
 8008e2a:	2001      	movlt	r0, #1
 8008e2c:	4770      	bx	lr
	...

08008e30 <__ieee754_powf>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	ee10 4a90 	vmov	r4, s1
 8008e38:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8008e3c:	ed2d 8b02 	vpush	{d8}
 8008e40:	ee10 6a10 	vmov	r6, s0
 8008e44:	eeb0 8a40 	vmov.f32	s16, s0
 8008e48:	eef0 8a60 	vmov.f32	s17, s1
 8008e4c:	d10c      	bne.n	8008e68 <__ieee754_powf+0x38>
 8008e4e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8008e52:	0076      	lsls	r6, r6, #1
 8008e54:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008e58:	f240 829c 	bls.w	8009394 <__ieee754_powf+0x564>
 8008e5c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8008e60:	ecbd 8b02 	vpop	{d8}
 8008e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e68:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8008e6c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008e70:	d802      	bhi.n	8008e78 <__ieee754_powf+0x48>
 8008e72:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008e76:	d908      	bls.n	8008e8a <__ieee754_powf+0x5a>
 8008e78:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008e7c:	d1ee      	bne.n	8008e5c <__ieee754_powf+0x2c>
 8008e7e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008e82:	0064      	lsls	r4, r4, #1
 8008e84:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008e88:	e7e6      	b.n	8008e58 <__ieee754_powf+0x28>
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	da1e      	bge.n	8008ecc <__ieee754_powf+0x9c>
 8008e8e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8008e92:	d22b      	bcs.n	8008eec <__ieee754_powf+0xbc>
 8008e94:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008e98:	d332      	bcc.n	8008f00 <__ieee754_powf+0xd0>
 8008e9a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8008e9e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008ea2:	fa49 f503 	asr.w	r5, r9, r3
 8008ea6:	fa05 f303 	lsl.w	r3, r5, r3
 8008eaa:	454b      	cmp	r3, r9
 8008eac:	d126      	bne.n	8008efc <__ieee754_powf+0xcc>
 8008eae:	f005 0501 	and.w	r5, r5, #1
 8008eb2:	f1c5 0502 	rsb	r5, r5, #2
 8008eb6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8008eba:	d122      	bne.n	8008f02 <__ieee754_powf+0xd2>
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	f280 826f 	bge.w	80093a0 <__ieee754_powf+0x570>
 8008ec2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008ec6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8008eca:	e7c9      	b.n	8008e60 <__ieee754_powf+0x30>
 8008ecc:	2500      	movs	r5, #0
 8008ece:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8008ed2:	d1f0      	bne.n	8008eb6 <__ieee754_powf+0x86>
 8008ed4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008ed8:	f000 825c 	beq.w	8009394 <__ieee754_powf+0x564>
 8008edc:	d908      	bls.n	8008ef0 <__ieee754_powf+0xc0>
 8008ede:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8009240 <__ieee754_powf+0x410>
 8008ee2:	2c00      	cmp	r4, #0
 8008ee4:	bfa8      	it	ge
 8008ee6:	eeb0 0a68 	vmovge.f32	s0, s17
 8008eea:	e7b9      	b.n	8008e60 <__ieee754_powf+0x30>
 8008eec:	2502      	movs	r5, #2
 8008eee:	e7ee      	b.n	8008ece <__ieee754_powf+0x9e>
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	f280 8252 	bge.w	800939a <__ieee754_powf+0x56a>
 8008ef6:	eeb1 0a68 	vneg.f32	s0, s17
 8008efa:	e7b1      	b.n	8008e60 <__ieee754_powf+0x30>
 8008efc:	2500      	movs	r5, #0
 8008efe:	e7da      	b.n	8008eb6 <__ieee754_powf+0x86>
 8008f00:	2500      	movs	r5, #0
 8008f02:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8008f06:	d102      	bne.n	8008f0e <__ieee754_powf+0xde>
 8008f08:	ee28 0a08 	vmul.f32	s0, s16, s16
 8008f0c:	e7a8      	b.n	8008e60 <__ieee754_powf+0x30>
 8008f0e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8008f12:	d109      	bne.n	8008f28 <__ieee754_powf+0xf8>
 8008f14:	2e00      	cmp	r6, #0
 8008f16:	db07      	blt.n	8008f28 <__ieee754_powf+0xf8>
 8008f18:	eeb0 0a48 	vmov.f32	s0, s16
 8008f1c:	ecbd 8b02 	vpop	{d8}
 8008f20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	f000 bae8 	b.w	80094f8 <__ieee754_sqrtf>
 8008f28:	eeb0 0a48 	vmov.f32	s0, s16
 8008f2c:	f000 fa50 	bl	80093d0 <fabsf>
 8008f30:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008f34:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008f38:	4647      	mov	r7, r8
 8008f3a:	d002      	beq.n	8008f42 <__ieee754_powf+0x112>
 8008f3c:	f1b8 0f00 	cmp.w	r8, #0
 8008f40:	d117      	bne.n	8008f72 <__ieee754_powf+0x142>
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	bfbc      	itt	lt
 8008f46:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8008f4a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	da86      	bge.n	8008e60 <__ieee754_powf+0x30>
 8008f52:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008f56:	ea58 0805 	orrs.w	r8, r8, r5
 8008f5a:	d104      	bne.n	8008f66 <__ieee754_powf+0x136>
 8008f5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008f60:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008f64:	e77c      	b.n	8008e60 <__ieee754_powf+0x30>
 8008f66:	2d01      	cmp	r5, #1
 8008f68:	f47f af7a 	bne.w	8008e60 <__ieee754_powf+0x30>
 8008f6c:	eeb1 0a40 	vneg.f32	s0, s0
 8008f70:	e776      	b.n	8008e60 <__ieee754_powf+0x30>
 8008f72:	0ff0      	lsrs	r0, r6, #31
 8008f74:	3801      	subs	r0, #1
 8008f76:	ea55 0300 	orrs.w	r3, r5, r0
 8008f7a:	d104      	bne.n	8008f86 <__ieee754_powf+0x156>
 8008f7c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008f80:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8008f84:	e76c      	b.n	8008e60 <__ieee754_powf+0x30>
 8008f86:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8008f8a:	d973      	bls.n	8009074 <__ieee754_powf+0x244>
 8008f8c:	4bad      	ldr	r3, [pc, #692]	@ (8009244 <__ieee754_powf+0x414>)
 8008f8e:	4598      	cmp	r8, r3
 8008f90:	d808      	bhi.n	8008fa4 <__ieee754_powf+0x174>
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	da0b      	bge.n	8008fae <__ieee754_powf+0x17e>
 8008f96:	2000      	movs	r0, #0
 8008f98:	ecbd 8b02 	vpop	{d8}
 8008f9c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fa0:	f000 baa4 	b.w	80094ec <__math_oflowf>
 8008fa4:	4ba8      	ldr	r3, [pc, #672]	@ (8009248 <__ieee754_powf+0x418>)
 8008fa6:	4598      	cmp	r8, r3
 8008fa8:	d908      	bls.n	8008fbc <__ieee754_powf+0x18c>
 8008faa:	2c00      	cmp	r4, #0
 8008fac:	dcf3      	bgt.n	8008f96 <__ieee754_powf+0x166>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	ecbd 8b02 	vpop	{d8}
 8008fb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	f000 ba92 	b.w	80094e0 <__math_uflowf>
 8008fbc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008fc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008fc4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800924c <__ieee754_powf+0x41c>
 8008fc8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8008fcc:	eee0 6a67 	vfms.f32	s13, s0, s15
 8008fd0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008fd4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8008fd8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fe0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8009250 <__ieee754_powf+0x420>
 8008fe4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008fe8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8009254 <__ieee754_powf+0x424>
 8008fec:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008ff0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8009258 <__ieee754_powf+0x428>
 8008ff4:	eef0 6a67 	vmov.f32	s13, s15
 8008ff8:	eee0 6a07 	vfma.f32	s13, s0, s14
 8008ffc:	ee16 3a90 	vmov	r3, s13
 8009000:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009004:	f023 030f 	bic.w	r3, r3, #15
 8009008:	ee06 3a90 	vmov	s13, r3
 800900c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8009010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009014:	3d01      	subs	r5, #1
 8009016:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800901a:	4305      	orrs	r5, r0
 800901c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009020:	f024 040f 	bic.w	r4, r4, #15
 8009024:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009028:	bf18      	it	ne
 800902a:	eeb0 8a47 	vmovne.f32	s16, s14
 800902e:	ee07 4a10 	vmov	s14, r4
 8009032:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009036:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8009042:	ee07 4a10 	vmov	s14, r4
 8009046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800904a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800904e:	ee17 1a10 	vmov	r1, s14
 8009052:	2900      	cmp	r1, #0
 8009054:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009058:	f340 80dd 	ble.w	8009216 <__ieee754_powf+0x3e6>
 800905c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009060:	f240 80ca 	bls.w	80091f8 <__ieee754_powf+0x3c8>
 8009064:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906c:	bf4c      	ite	mi
 800906e:	2001      	movmi	r0, #1
 8009070:	2000      	movpl	r0, #0
 8009072:	e791      	b.n	8008f98 <__ieee754_powf+0x168>
 8009074:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009078:	bf01      	itttt	eq
 800907a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800925c <__ieee754_powf+0x42c>
 800907e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009082:	f06f 0317 	mvneq.w	r3, #23
 8009086:	ee17 7a90 	vmoveq	r7, s15
 800908a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800908e:	bf18      	it	ne
 8009090:	2300      	movne	r3, #0
 8009092:	3a7f      	subs	r2, #127	@ 0x7f
 8009094:	441a      	add	r2, r3
 8009096:	4b72      	ldr	r3, [pc, #456]	@ (8009260 <__ieee754_powf+0x430>)
 8009098:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800909c:	429f      	cmp	r7, r3
 800909e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80090a2:	dd06      	ble.n	80090b2 <__ieee754_powf+0x282>
 80090a4:	4b6f      	ldr	r3, [pc, #444]	@ (8009264 <__ieee754_powf+0x434>)
 80090a6:	429f      	cmp	r7, r3
 80090a8:	f340 80a4 	ble.w	80091f4 <__ieee754_powf+0x3c4>
 80090ac:	3201      	adds	r2, #1
 80090ae:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80090b2:	2600      	movs	r6, #0
 80090b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009268 <__ieee754_powf+0x438>)
 80090b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80090ba:	ee07 1a10 	vmov	s14, r1
 80090be:	edd3 5a00 	vldr	s11, [r3]
 80090c2:	4b6a      	ldr	r3, [pc, #424]	@ (800926c <__ieee754_powf+0x43c>)
 80090c4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80090c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090cc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80090d0:	1049      	asrs	r1, r1, #1
 80090d2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80090d6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80090da:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80090de:	ee37 6a65 	vsub.f32	s12, s14, s11
 80090e2:	ee07 1a90 	vmov	s15, r1
 80090e6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80090ea:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80090ee:	ee15 7a10 	vmov	r7, s10
 80090f2:	401f      	ands	r7, r3
 80090f4:	ee06 7a90 	vmov	s13, r7
 80090f8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80090fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009100:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009104:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009108:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009270 <__ieee754_powf+0x440>
 800910c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009274 <__ieee754_powf+0x444>
 8009110:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009114:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8009278 <__ieee754_powf+0x448>
 8009118:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800911c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800924c <__ieee754_powf+0x41c>
 8009120:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009124:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800927c <__ieee754_powf+0x44c>
 8009128:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800912c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8009280 <__ieee754_powf+0x450>
 8009130:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009134:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009138:	ee35 7a26 	vadd.f32	s14, s10, s13
 800913c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009140:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009144:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009148:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800914c:	eef0 5a67 	vmov.f32	s11, s15
 8009150:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009154:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009158:	ee15 1a90 	vmov	r1, s11
 800915c:	4019      	ands	r1, r3
 800915e:	ee05 1a90 	vmov	s11, r1
 8009162:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009166:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800916a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800916e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009172:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009176:	eeb0 6a67 	vmov.f32	s12, s15
 800917a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800917e:	ee16 1a10 	vmov	r1, s12
 8009182:	4019      	ands	r1, r3
 8009184:	ee06 1a10 	vmov	s12, r1
 8009188:	eeb0 7a46 	vmov.f32	s14, s12
 800918c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009190:	493c      	ldr	r1, [pc, #240]	@ (8009284 <__ieee754_powf+0x454>)
 8009192:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009196:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800919a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8009288 <__ieee754_powf+0x458>
 800919e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800928c <__ieee754_powf+0x45c>
 80091a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80091a6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8009290 <__ieee754_powf+0x460>
 80091aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80091ae:	ed91 7a00 	vldr	s14, [r1]
 80091b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091b6:	ee07 2a10 	vmov	s14, r2
 80091ba:	eef0 6a67 	vmov.f32	s13, s15
 80091be:	4a35      	ldr	r2, [pc, #212]	@ (8009294 <__ieee754_powf+0x464>)
 80091c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80091c4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80091c8:	ed92 5a00 	vldr	s10, [r2]
 80091cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80091d4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80091d8:	ee16 2a90 	vmov	r2, s13
 80091dc:	4013      	ands	r3, r2
 80091de:	ee06 3a90 	vmov	s13, r3
 80091e2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80091e6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80091ea:	eea6 7a65 	vfms.f32	s14, s12, s11
 80091ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091f2:	e70f      	b.n	8009014 <__ieee754_powf+0x1e4>
 80091f4:	2601      	movs	r6, #1
 80091f6:	e75d      	b.n	80090b4 <__ieee754_powf+0x284>
 80091f8:	d152      	bne.n	80092a0 <__ieee754_powf+0x470>
 80091fa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8009298 <__ieee754_powf+0x468>
 80091fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009202:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009206:	eef4 6ac7 	vcmpe.f32	s13, s14
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	f73f af29 	bgt.w	8009064 <__ieee754_powf+0x234>
 8009212:	2386      	movs	r3, #134	@ 0x86
 8009214:	e048      	b.n	80092a8 <__ieee754_powf+0x478>
 8009216:	4a21      	ldr	r2, [pc, #132]	@ (800929c <__ieee754_powf+0x46c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d907      	bls.n	800922c <__ieee754_powf+0x3fc>
 800921c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	bf4c      	ite	mi
 8009226:	2001      	movmi	r0, #1
 8009228:	2000      	movpl	r0, #0
 800922a:	e6c1      	b.n	8008fb0 <__ieee754_powf+0x180>
 800922c:	d138      	bne.n	80092a0 <__ieee754_powf+0x470>
 800922e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009232:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923a:	dbea      	blt.n	8009212 <__ieee754_powf+0x3e2>
 800923c:	e7ee      	b.n	800921c <__ieee754_powf+0x3ec>
 800923e:	bf00      	nop
 8009240:	00000000 	.word	0x00000000
 8009244:	3f7ffff3 	.word	0x3f7ffff3
 8009248:	3f800007 	.word	0x3f800007
 800924c:	3eaaaaab 	.word	0x3eaaaaab
 8009250:	3fb8aa3b 	.word	0x3fb8aa3b
 8009254:	36eca570 	.word	0x36eca570
 8009258:	3fb8aa00 	.word	0x3fb8aa00
 800925c:	4b800000 	.word	0x4b800000
 8009260:	001cc471 	.word	0x001cc471
 8009264:	005db3d6 	.word	0x005db3d6
 8009268:	080098f8 	.word	0x080098f8
 800926c:	fffff000 	.word	0xfffff000
 8009270:	3e6c3255 	.word	0x3e6c3255
 8009274:	3e53f142 	.word	0x3e53f142
 8009278:	3e8ba305 	.word	0x3e8ba305
 800927c:	3edb6db7 	.word	0x3edb6db7
 8009280:	3f19999a 	.word	0x3f19999a
 8009284:	080098e8 	.word	0x080098e8
 8009288:	3f76384f 	.word	0x3f76384f
 800928c:	3f763800 	.word	0x3f763800
 8009290:	369dc3a0 	.word	0x369dc3a0
 8009294:	080098f0 	.word	0x080098f0
 8009298:	3338aa3c 	.word	0x3338aa3c
 800929c:	43160000 	.word	0x43160000
 80092a0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80092a4:	d971      	bls.n	800938a <__ieee754_powf+0x55a>
 80092a6:	15db      	asrs	r3, r3, #23
 80092a8:	3b7e      	subs	r3, #126	@ 0x7e
 80092aa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80092ae:	4118      	asrs	r0, r3
 80092b0:	4408      	add	r0, r1
 80092b2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80092b6:	4a3c      	ldr	r2, [pc, #240]	@ (80093a8 <__ieee754_powf+0x578>)
 80092b8:	3b7f      	subs	r3, #127	@ 0x7f
 80092ba:	411a      	asrs	r2, r3
 80092bc:	4002      	ands	r2, r0
 80092be:	ee07 2a10 	vmov	s14, r2
 80092c2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80092c6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80092ca:	f1c3 0317 	rsb	r3, r3, #23
 80092ce:	4118      	asrs	r0, r3
 80092d0:	2900      	cmp	r1, #0
 80092d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092d6:	bfb8      	it	lt
 80092d8:	4240      	neglt	r0, r0
 80092da:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80092de:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80093ac <__ieee754_powf+0x57c>
 80092e2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80093b0 <__ieee754_powf+0x580>
 80092e6:	ee17 3a10 	vmov	r3, s14
 80092ea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80092ee:	f023 030f 	bic.w	r3, r3, #15
 80092f2:	ee07 3a10 	vmov	s14, r3
 80092f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092fa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80092fe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009302:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80093b4 <__ieee754_powf+0x584>
 8009306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800930a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800930e:	eef0 6a67 	vmov.f32	s13, s15
 8009312:	eee7 6a06 	vfma.f32	s13, s14, s12
 8009316:	eef0 5a66 	vmov.f32	s11, s13
 800931a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800931e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009322:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009326:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80093b8 <__ieee754_powf+0x588>
 800932a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80093bc <__ieee754_powf+0x58c>
 800932e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009332:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80093c0 <__ieee754_powf+0x590>
 8009336:	eee6 5a07 	vfma.f32	s11, s12, s14
 800933a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80093c4 <__ieee754_powf+0x594>
 800933e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009342:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80093c8 <__ieee754_powf+0x598>
 8009346:	eee6 5a07 	vfma.f32	s11, s12, s14
 800934a:	eeb0 6a66 	vmov.f32	s12, s13
 800934e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8009352:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8009356:	ee66 5a86 	vmul.f32	s11, s13, s12
 800935a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800935e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8009362:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8009366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800936a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800936e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009372:	ee10 3a10 	vmov	r3, s0
 8009376:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800937a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800937e:	da06      	bge.n	800938e <__ieee754_powf+0x55e>
 8009380:	f000 f82e 	bl	80093e0 <scalbnf>
 8009384:	ee20 0a08 	vmul.f32	s0, s0, s16
 8009388:	e56a      	b.n	8008e60 <__ieee754_powf+0x30>
 800938a:	2000      	movs	r0, #0
 800938c:	e7a5      	b.n	80092da <__ieee754_powf+0x4aa>
 800938e:	ee00 3a10 	vmov	s0, r3
 8009392:	e7f7      	b.n	8009384 <__ieee754_powf+0x554>
 8009394:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009398:	e562      	b.n	8008e60 <__ieee754_powf+0x30>
 800939a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80093cc <__ieee754_powf+0x59c>
 800939e:	e55f      	b.n	8008e60 <__ieee754_powf+0x30>
 80093a0:	eeb0 0a48 	vmov.f32	s0, s16
 80093a4:	e55c      	b.n	8008e60 <__ieee754_powf+0x30>
 80093a6:	bf00      	nop
 80093a8:	ff800000 	.word	0xff800000
 80093ac:	3f317218 	.word	0x3f317218
 80093b0:	3f317200 	.word	0x3f317200
 80093b4:	35bfbe8c 	.word	0x35bfbe8c
 80093b8:	b5ddea0e 	.word	0xb5ddea0e
 80093bc:	3331bb4c 	.word	0x3331bb4c
 80093c0:	388ab355 	.word	0x388ab355
 80093c4:	bb360b61 	.word	0xbb360b61
 80093c8:	3e2aaaab 	.word	0x3e2aaaab
 80093cc:	00000000 	.word	0x00000000

080093d0 <fabsf>:
 80093d0:	ee10 3a10 	vmov	r3, s0
 80093d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093d8:	ee00 3a10 	vmov	s0, r3
 80093dc:	4770      	bx	lr
	...

080093e0 <scalbnf>:
 80093e0:	ee10 3a10 	vmov	r3, s0
 80093e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80093e8:	d02b      	beq.n	8009442 <scalbnf+0x62>
 80093ea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80093ee:	d302      	bcc.n	80093f6 <scalbnf+0x16>
 80093f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093f4:	4770      	bx	lr
 80093f6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80093fa:	d123      	bne.n	8009444 <scalbnf+0x64>
 80093fc:	4b24      	ldr	r3, [pc, #144]	@ (8009490 <scalbnf+0xb0>)
 80093fe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009494 <scalbnf+0xb4>
 8009402:	4298      	cmp	r0, r3
 8009404:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009408:	db17      	blt.n	800943a <scalbnf+0x5a>
 800940a:	ee10 3a10 	vmov	r3, s0
 800940e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009412:	3a19      	subs	r2, #25
 8009414:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009418:	4288      	cmp	r0, r1
 800941a:	dd15      	ble.n	8009448 <scalbnf+0x68>
 800941c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009498 <scalbnf+0xb8>
 8009420:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800949c <scalbnf+0xbc>
 8009424:	ee10 3a10 	vmov	r3, s0
 8009428:	eeb0 7a67 	vmov.f32	s14, s15
 800942c:	2b00      	cmp	r3, #0
 800942e:	bfb8      	it	lt
 8009430:	eef0 7a66 	vmovlt.f32	s15, s13
 8009434:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009438:	4770      	bx	lr
 800943a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80094a0 <scalbnf+0xc0>
 800943e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009442:	4770      	bx	lr
 8009444:	0dd2      	lsrs	r2, r2, #23
 8009446:	e7e5      	b.n	8009414 <scalbnf+0x34>
 8009448:	4410      	add	r0, r2
 800944a:	28fe      	cmp	r0, #254	@ 0xfe
 800944c:	dce6      	bgt.n	800941c <scalbnf+0x3c>
 800944e:	2800      	cmp	r0, #0
 8009450:	dd06      	ble.n	8009460 <scalbnf+0x80>
 8009452:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009456:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800945a:	ee00 3a10 	vmov	s0, r3
 800945e:	4770      	bx	lr
 8009460:	f110 0f16 	cmn.w	r0, #22
 8009464:	da09      	bge.n	800947a <scalbnf+0x9a>
 8009466:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80094a0 <scalbnf+0xc0>
 800946a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80094a4 <scalbnf+0xc4>
 800946e:	ee10 3a10 	vmov	r3, s0
 8009472:	eeb0 7a67 	vmov.f32	s14, s15
 8009476:	2b00      	cmp	r3, #0
 8009478:	e7d9      	b.n	800942e <scalbnf+0x4e>
 800947a:	3019      	adds	r0, #25
 800947c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009480:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009484:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80094a8 <scalbnf+0xc8>
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	e7d7      	b.n	800943e <scalbnf+0x5e>
 800948e:	bf00      	nop
 8009490:	ffff3cb0 	.word	0xffff3cb0
 8009494:	4c000000 	.word	0x4c000000
 8009498:	7149f2ca 	.word	0x7149f2ca
 800949c:	f149f2ca 	.word	0xf149f2ca
 80094a0:	0da24260 	.word	0x0da24260
 80094a4:	8da24260 	.word	0x8da24260
 80094a8:	33000000 	.word	0x33000000

080094ac <with_errnof>:
 80094ac:	b510      	push	{r4, lr}
 80094ae:	ed2d 8b02 	vpush	{d8}
 80094b2:	eeb0 8a40 	vmov.f32	s16, s0
 80094b6:	4604      	mov	r4, r0
 80094b8:	f7fd fdd4 	bl	8007064 <__errno>
 80094bc:	eeb0 0a48 	vmov.f32	s0, s16
 80094c0:	ecbd 8b02 	vpop	{d8}
 80094c4:	6004      	str	r4, [r0, #0]
 80094c6:	bd10      	pop	{r4, pc}

080094c8 <xflowf>:
 80094c8:	b130      	cbz	r0, 80094d8 <xflowf+0x10>
 80094ca:	eef1 7a40 	vneg.f32	s15, s0
 80094ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80094d2:	2022      	movs	r0, #34	@ 0x22
 80094d4:	f7ff bfea 	b.w	80094ac <with_errnof>
 80094d8:	eef0 7a40 	vmov.f32	s15, s0
 80094dc:	e7f7      	b.n	80094ce <xflowf+0x6>
	...

080094e0 <__math_uflowf>:
 80094e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094e8 <__math_uflowf+0x8>
 80094e4:	f7ff bff0 	b.w	80094c8 <xflowf>
 80094e8:	10000000 	.word	0x10000000

080094ec <__math_oflowf>:
 80094ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094f4 <__math_oflowf+0x8>
 80094f0:	f7ff bfea 	b.w	80094c8 <xflowf>
 80094f4:	70000000 	.word	0x70000000

080094f8 <__ieee754_sqrtf>:
 80094f8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80094fc:	4770      	bx	lr
	...

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
