
Nucleo_Xbee_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed4  08004ed4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ed8  08004ed8  00005ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004edc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000068  08004f44  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08004f44  00006904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff2f  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002542  00000000  00000000  00015fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00018510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aff  00000000  00000000  00019338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c0f  00000000  00000000  00019e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012213  00000000  00000000  0003aa46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c16b2  00000000  00000000  0004cc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  0010e350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00112688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e44 	.word	0x08004e44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004e44 	.word	0x08004e44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <USART2_IRQHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART2_IRQHandler(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2); // Call the HAL interrupt handler
 80005a4:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <USART2_IRQHandler+0x10>)
 80005a6:	f002 fad1 	bl	8002b4c <HAL_UART_IRQHandler>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200001d8 	.word	0x200001d8

080005b4 <HAL_UARTEx_RxEventCallback>:

char rxBuffer[100];



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
//

//
//	uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rxBuffer, RX_BFR_SIZE);

    HAL_UART_Transmit(&huart2, rx_data, Size, 100);
 80005c0:	887a      	ldrh	r2, [r7, #2]
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	4908      	ldr	r1, [pc, #32]	@ (80005e8 <HAL_UARTEx_RxEventCallback+0x34>)
 80005c6:	4809      	ldr	r0, [pc, #36]	@ (80005ec <HAL_UARTEx_RxEventCallback+0x38>)
 80005c8:	f002 f9d8 	bl	800297c <HAL_UART_Transmit>

    // Optionally, you can print it (if using printf with UART)
    printf("Received data: %s\r\n", rxBuffer);
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <HAL_UARTEx_RxEventCallback+0x3c>)
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <HAL_UARTEx_RxEventCallback+0x40>)
 80005d0:	f003 fdcc 	bl	800416c <iprintf>

//	memset(rxBuffer, 1, sizeof(rxBuffer));

    // Re-initialize the UART to receive more data after the previous one
    HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 80005d4:	2232      	movs	r2, #50	@ 0x32
 80005d6:	4904      	ldr	r1, [pc, #16]	@ (80005e8 <HAL_UARTEx_RxEventCallback+0x34>)
 80005d8:	4804      	ldr	r0, [pc, #16]	@ (80005ec <HAL_UARTEx_RxEventCallback+0x38>)
 80005da:	f002 fa5a 	bl	8002a92 <HAL_UARTEx_ReceiveToIdle_IT>


}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000084 	.word	0x20000084
 80005ec:	200001d8 	.word	0x200001d8
 80005f0:	2000074c 	.word	0x2000074c
 80005f4:	08004e6c 	.word	0x08004e6c

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fc96 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f822 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f946 	bl	8000894 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000608:	f000 f8ea 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060c:	f000 f912 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8b4 	bl	800077c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000614:	f000 f884 	bl	8000720 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	memset(rx_data, 0, sizeof(rx_data));
 8000618:	22ff      	movs	r2, #255	@ 0xff
 800061a:	2100      	movs	r1, #0
 800061c:	4807      	ldr	r0, [pc, #28]	@ (800063c <main+0x44>)
 800061e:	f003 fdb7 	bl	8004190 <memset>

//	uart_received = HAL_UART_Receive(&huart2, rxBuffer, RX_BFR_SIZE, HAL_MAX_DELAY);

  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 8000622:	2232      	movs	r2, #50	@ 0x32
 8000624:	4905      	ldr	r1, [pc, #20]	@ (800063c <main+0x44>)
 8000626:	4806      	ldr	r0, [pc, #24]	@ (8000640 <main+0x48>)
 8000628:	f002 fa33 	bl	8002a92 <HAL_UARTEx_ReceiveToIdle_IT>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <main+0x4c>)
 8000632:	701a      	strb	r2, [r3, #0]
//		// Handle error case
//		printf("Error receiving data\r\n");
//	}

	// Add some delay between loops if needed
	HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	@ 0x64
 8000636:	f000 fceb 	bl	8001010 <HAL_Delay>
 800063a:	e7fb      	b.n	8000634 <main+0x3c>
 800063c:	20000084 	.word	0x20000084
 8000640:	200001d8 	.word	0x200001d8
 8000644:	20000183 	.word	0x20000183

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fd9a 	bl	8004190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a22      	ldr	r2, [pc, #136]	@ (800071c <SystemClock_Config+0xd4>)
 8000692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b20      	ldr	r3, [pc, #128]	@ (800071c <SystemClock_Config+0xd4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b8:	2308      	movs	r3, #8
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 80006bc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006c6:	2308      	movs	r3, #8
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fe7e 	bl	80023d4 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f9b7 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2103      	movs	r1, #3
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fa7a 	bl	8001bf8 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 f9a1 	bl	8000a50 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C2_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C2_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C2_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C2_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C2_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C2_Init+0x50>)
 800075e:	f000 ffcd 	bl	80016fc <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f972 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000184 	.word	0x20000184
 8000774:	40005800 	.word	0x40005800
 8000778:	000186a0 	.word	0x000186a0

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2026      	movs	r0, #38	@ 0x26
 8000786:	f000 fd42 	bl	800120e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800078a:	2026      	movs	r0, #38	@ 0x26
 800078c:	f000 fd5b 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 8000792:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <MX_USART2_UART_Init+0x60>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USART2_UART_Init+0x5c>)
 80007c4:	f002 f88a 	bl	80028dc <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80007ce:	f000 f93f 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200001d8 	.word	0x200001d8
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART3_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000818:	f002 f860 	bl	80028dc <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f915 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000220 	.word	0x20000220
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000842:	2206      	movs	r2, #6
 8000844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000848:	2202      	movs	r2, #2
 800084a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	2201      	movs	r2, #1
 800085c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086c:	2201      	movs	r2, #1
 800086e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000872:	2201      	movs	r2, #1
 8000874:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087e:	f001 f881 	bl	8001984 <HAL_PCD_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000888:	f000 f8e2 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000268 	.word	0x20000268

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b64      	ldr	r3, [pc, #400]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a63      	ldr	r2, [pc, #396]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b61      	ldr	r3, [pc, #388]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a5c      	ldr	r2, [pc, #368]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b56      	ldr	r3, [pc, #344]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a55      	ldr	r2, [pc, #340]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b53      	ldr	r3, [pc, #332]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b4f      	ldr	r3, [pc, #316]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a4e      	ldr	r2, [pc, #312]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a47      	ldr	r2, [pc, #284]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b45      	ldr	r3, [pc, #276]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b41      	ldr	r3, [pc, #260]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a40      	ldr	r2, [pc, #256]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b3e      	ldr	r3, [pc, #248]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a39      	ldr	r2, [pc, #228]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b37      	ldr	r3, [pc, #220]	@ (8000a40 <MX_GPIO_Init+0x1ac>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000974:	4833      	ldr	r0, [pc, #204]	@ (8000a44 <MX_GPIO_Init+0x1b0>)
 8000976:	f000 fea7 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	4832      	ldr	r0, [pc, #200]	@ (8000a48 <MX_GPIO_Init+0x1b4>)
 8000980:	f000 fea2 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800098a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	482c      	ldr	r0, [pc, #176]	@ (8000a4c <MX_GPIO_Init+0x1b8>)
 800099c:	f000 fd00 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009a0:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4822      	ldr	r0, [pc, #136]	@ (8000a44 <MX_GPIO_Init+0x1b0>)
 80009ba:	f000 fcf1 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	481c      	ldr	r0, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0x1b4>)
 80009d6:	f000 fce3 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009da:	2380      	movs	r3, #128	@ 0x80
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <MX_GPIO_Init+0x1b4>)
 80009ee:	f000 fcd7 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80009f2:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a04:	2308      	movs	r3, #8
 8000a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480e      	ldr	r0, [pc, #56]	@ (8000a48 <MX_GPIO_Init+0x1b4>)
 8000a10:	f000 fcc6 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1a:	2312      	movs	r3, #18
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a26:	2304      	movs	r3, #4
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_GPIO_Init+0x1b0>)
 8000a32:	f000 fcb5 	bl	80013a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	@ 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40021800 	.word	0x40021800
 8000a4c:	40020800 	.word	0x40020800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_I2C_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12b      	bne.n	8000b26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aee:	2312      	movs	r3, #18
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000afa:	2304      	movs	r3, #4
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <HAL_I2C_MspInit+0x8c>)
 8000b06:	f000 fc4b 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_I2C_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021400 	.word	0x40021400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	@ 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a32      	ldr	r2, [pc, #200]	@ (8000c24 <HAL_UART_MspInit+0xe8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	4b31      	ldr	r3, [pc, #196]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a30      	ldr	r2, [pc, #192]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a29      	ldr	r2, [pc, #164]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b84:	f043 0308 	orr.w	r3, r3, #8
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b27      	ldr	r3, [pc, #156]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b96:	2360      	movs	r3, #96	@ 0x60
 8000b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481e      	ldr	r0, [pc, #120]	@ (8000c2c <HAL_UART_MspInit+0xf0>)
 8000bb2:	f000 fbf5 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb6:	e031      	b.n	8000c1c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <HAL_UART_MspInit+0xf4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12c      	bne.n	8000c1c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <HAL_UART_MspInit+0xec>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_UART_MspInit+0xf0>)
 8000c18:	f000 fbc2 	bl	80013a0 <HAL_GPIO_Init>
}
 8000c1c:	bf00      	nop
 8000c1e:	3730      	adds	r7, #48	@ 0x30
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40004400 	.word	0x40004400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	40004800 	.word	0x40004800

08000c34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b098      	sub	sp, #96	@ 0x60
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	223c      	movs	r2, #60	@ 0x3c
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fa9b 	bl	8004190 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c62:	d14d      	bne.n	8000d00 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c64:	2320      	movs	r3, #32
 8000c66:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f9e1 	bl	8002038 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff fee8 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c88:	4a1f      	ldr	r2, [pc, #124]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c90:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4814      	ldr	r0, [pc, #80]	@ (8000d0c <HAL_PCD_MspInit+0xd8>)
 8000cba:	f000 fb71 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480e      	ldr	r0, [pc, #56]	@ (8000d0c <HAL_PCD_MspInit+0xd8>)
 8000cd4:	f000 fb64 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cec:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <HAL_PCD_MspInit+0xd4>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3760      	adds	r7, #96	@ 0x60
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f933 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_read>:
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e00a      	b.n	8000d96 <_read+0x28>
 8000d80:	f3af 8000 	nop.w
 8000d84:	4601      	mov	r1, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	60ba      	str	r2, [r7, #8]
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dbf0      	blt.n	8000d80 <_read+0x12>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_write>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e009      	b.n	8000dce <_write+0x26>
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dbf1      	blt.n	8000dba <_write+0x12>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_close>:
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_fstat>:
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_isatty>:
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	2301      	movs	r3, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <_lseek>:
 8000e2e:	b480      	push	{r7}
 8000e30:	b085      	sub	sp, #20
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_sbrk>:
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	4b13      	ldr	r3, [pc, #76]	@ (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	@ (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
 8000e78:	f003 f992 	bl	80041a0 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20040000 	.word	0x20040000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	200007b0 	.word	0x200007b0
 8000eb0:	20000908 	.word	0x20000908

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000edc:	f7ff ffea 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ee2:	490d      	ldr	r1, [pc, #52]	@ (8000f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8000f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f06:	f003 f951 	bl	80041ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb75 	bl	80005f8 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f10:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f1c:	08004edc 	.word	0x08004edc
  ldr r2, =_sbss
 8000f20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f24:	20000904 	.word	0x20000904

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f30:	4b0e      	ldr	r3, [pc, #56]	@ (8000f6c <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <HAL_Init+0x40>)
 8000f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f6c <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <HAL_Init+0x40>)
 8000f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <HAL_Init+0x40>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f94f 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fd7c 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023c00 	.word	0x40023c00

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f967 	bl	8001262 <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fac:	f000 f92f 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	@ (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200007b4 	.word	0x200007b4

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200007b4 	.word	0x200007b4

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	@ (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d8:	f7ff ff8e 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff29 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff3e 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff8e 	bl	800114c <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5d 	bl	80010f8 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff31 	bl	80010bc <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001286:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff feb6 	bl	8000ff8 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d008      	beq.n	80012ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e052      	b.n	8001352 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0216 	bic.w	r2, r2, #22
 80012ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <HAL_DMA_Abort+0x62>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0208 	bic.w	r2, r2, #8
 80012ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fc:	e013      	b.n	8001326 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012fe:	f7ff fe7b 	bl	8000ff8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b05      	cmp	r3, #5
 800130a:	d90c      	bls.n	8001326 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2220      	movs	r2, #32
 8001310:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2203      	movs	r2, #3
 8001316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e015      	b.n	8001352 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1e4      	bne.n	80012fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001338:	223f      	movs	r2, #63	@ 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d004      	beq.n	8001378 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2280      	movs	r2, #128	@ 0x80
 8001372:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e00c      	b.n	8001392 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e165      	b.n	8001688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 8154 	bne.w	8001682 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80ae 	beq.w	8001682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <HAL_GPIO_Init+0x300>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a5c      	ldr	r2, [pc, #368]	@ (80016a0 <HAL_GPIO_Init+0x300>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b5a      	ldr	r3, [pc, #360]	@ (80016a0 <HAL_GPIO_Init+0x300>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a58      	ldr	r2, [pc, #352]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4f      	ldr	r2, [pc, #316]	@ (80016a8 <HAL_GPIO_Init+0x308>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4e      	ldr	r2, [pc, #312]	@ (80016ac <HAL_GPIO_Init+0x30c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4d      	ldr	r2, [pc, #308]	@ (80016b0 <HAL_GPIO_Init+0x310>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4c      	ldr	r2, [pc, #304]	@ (80016b4 <HAL_GPIO_Init+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4b      	ldr	r2, [pc, #300]	@ (80016b8 <HAL_GPIO_Init+0x318>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x20a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4a      	ldr	r2, [pc, #296]	@ (80016bc <HAL_GPIO_Init+0x31c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x206>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a49      	ldr	r2, [pc, #292]	@ (80016c0 <HAL_GPIO_Init+0x320>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x202>
 800159e:	2306      	movs	r3, #6
 80015a0:	e00c      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a2:	2307      	movs	r3, #7
 80015a4:	e00a      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e008      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e006      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e004      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_GPIO_Init+0x21c>
 80015ba:	2300      	movs	r3, #0
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	f002 0203 	and.w	r2, r2, #3
 80015c2:	0092      	lsls	r2, r2, #2
 80015c4:	4093      	lsls	r3, r2
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015cc:	4935      	ldr	r1, [pc, #212]	@ (80016a4 <HAL_GPIO_Init+0x304>)
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	089b      	lsrs	r3, r3, #2
 80015d2:	3302      	adds	r3, #2
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b3a      	ldr	r3, [pc, #232]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a26      	ldr	r2, [pc, #152]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162e:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001652:	4a1c      	ldr	r2, [pc, #112]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001658:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800167c:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_GPIO_Init+0x324>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b0f      	cmp	r3, #15
 800168c:	f67f ae96 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40013c00 	.word	0x40013c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e12b      	b.n	8001966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff f9c2 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2224      	movs	r2, #36	@ 0x24
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800174e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800175e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001760:	f000 fc42 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 8001764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a81      	ldr	r2, [pc, #516]	@ (8001970 <HAL_I2C_Init+0x274>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d807      	bhi.n	8001780 <HAL_I2C_Init+0x84>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a80      	ldr	r2, [pc, #512]	@ (8001974 <HAL_I2C_Init+0x278>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	e006      	b.n	800178e <HAL_I2C_Init+0x92>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a7d      	ldr	r2, [pc, #500]	@ (8001978 <HAL_I2C_Init+0x27c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0e7      	b.n	8001966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4a78      	ldr	r2, [pc, #480]	@ (800197c <HAL_I2C_Init+0x280>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	0c9b      	lsrs	r3, r3, #18
 80017a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001970 <HAL_I2C_Init+0x274>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d802      	bhi.n	80017d0 <HAL_I2C_Init+0xd4>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	e009      	b.n	80017e4 <HAL_I2C_Init+0xe8>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017d6:	fb02 f303 	mul.w	r3, r2, r3
 80017da:	4a69      	ldr	r2, [pc, #420]	@ (8001980 <HAL_I2C_Init+0x284>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	3301      	adds	r3, #1
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	495c      	ldr	r1, [pc, #368]	@ (8001970 <HAL_I2C_Init+0x274>)
 8001800:	428b      	cmp	r3, r1
 8001802:	d819      	bhi.n	8001838 <HAL_I2C_Init+0x13c>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e59      	subs	r1, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001818:	400b      	ands	r3, r1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00a      	beq.n	8001834 <HAL_I2C_Init+0x138>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1e59      	subs	r1, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fbb1 f3f3 	udiv	r3, r1, r3
 800182c:	3301      	adds	r3, #1
 800182e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001832:	e051      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001834:	2304      	movs	r3, #4
 8001836:	e04f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d111      	bne.n	8001864 <HAL_I2C_Init+0x168>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1e58      	subs	r0, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	e012      	b.n	800188a <HAL_I2C_Init+0x18e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e58      	subs	r0, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	0099      	lsls	r1, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	fbb0 f3f3 	udiv	r3, r0, r3
 800187a:	3301      	adds	r3, #1
 800187c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_Init+0x196>
 800188e:	2301      	movs	r3, #1
 8001890:	e022      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10e      	bne.n	80018b8 <HAL_I2C_Init+0x1bc>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e58      	subs	r0, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	440b      	add	r3, r1
 80018a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ac:	3301      	adds	r3, #1
 80018ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018b6:	e00f      	b.n	80018d8 <HAL_I2C_Init+0x1dc>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1e58      	subs	r0, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	0099      	lsls	r1, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	6809      	ldr	r1, [r1, #0]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6911      	ldr	r1, [r2, #16]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68d2      	ldr	r2, [r2, #12]
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2220      	movs	r2, #32
 8001952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	000186a0 	.word	0x000186a0
 8001974:	001e847f 	.word	0x001e847f
 8001978:	003d08ff 	.word	0x003d08ff
 800197c:	431bde83 	.word	0x431bde83
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e108      	b.n	8001ba8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff f93f 	bl	8000c34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2203      	movs	r2, #3
 80019ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019c4:	d102      	bne.n	80019cc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 f873 	bl	8003abc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7c1a      	ldrb	r2, [r3, #16]
 80019de:	f88d 2000 	strb.w	r2, [sp]
 80019e2:	3304      	adds	r3, #4
 80019e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e6:	f002 f805 	bl	80039f4 <USB_CoreInit>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d5      	b.n	8001ba8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 f86b 	bl	8003ade <USB_SetCurrentMode>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2202      	movs	r2, #2
 8001a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0c6      	b.n	8001ba8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e04a      	b.n	8001ab6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3315      	adds	r3, #21
 8001a30:	2201      	movs	r2, #1
 8001a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3314      	adds	r3, #20
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	332e      	adds	r3, #46	@ 0x2e
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3318      	adds	r3, #24
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	331c      	adds	r3, #28
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	3320      	adds	r3, #32
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3324      	adds	r3, #36	@ 0x24
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	791b      	ldrb	r3, [r3, #4]
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d3af      	bcc.n	8001a20 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e044      	b.n	8001b50 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b1e:	7bfa      	ldrb	r2, [r7, #15]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3b5      	bcc.n	8001ac6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7c1a      	ldrb	r2, [r3, #16]
 8001b62:	f88d 2000 	strb.w	r2, [sp]
 8001b66:	3304      	adds	r3, #4
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	f002 f805 	bl	8003b78 <USB_DevInit>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e013      	b.n	8001ba8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7b1b      	ldrb	r3, [r3, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f80a 	bl	8001bb0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 f9c0 	bl	8003f26 <USB_DevDisconnect>

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be2:	f043 0303 	orr.w	r3, r3, #3
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cc      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b68      	ldr	r3, [pc, #416]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b65      	ldr	r3, [pc, #404]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a58      	ldr	r2, [pc, #352]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a52      	ldr	r2, [pc, #328]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d044      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4934      	ldr	r1, [pc, #208]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f986 	bl	8000ff8 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff f982 	bl	8000ff8 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b25      	ldr	r3, [pc, #148]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d20c      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	490a      	ldr	r1, [pc, #40]	@ (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	5ccb      	ldrb	r3, [r1, r3]
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f8e6 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08004e80 	.word	0x08004e80
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dc8:	b094      	sub	sp, #80	@ 0x50
 8001dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ddc:	4b79      	ldr	r3, [pc, #484]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d00d      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x40>
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	f200 80e1 	bhi.w	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x34>
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001df6:	e0db      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfc:	e0db      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfe:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e02:	e0d8      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e04:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	099b      	lsrs	r3, r3, #6
 8001e20:	2200      	movs	r2, #0
 8001e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e36:	4622      	mov	r2, r4
 8001e38:	462b      	mov	r3, r5
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	0159      	lsls	r1, r3, #5
 8001e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e48:	0150      	lsls	r0, r2, #5
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4621      	mov	r1, r4
 8001e50:	1a51      	subs	r1, r2, r1
 8001e52:	6139      	str	r1, [r7, #16]
 8001e54:	4629      	mov	r1, r5
 8001e56:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e68:	4659      	mov	r1, fp
 8001e6a:	018b      	lsls	r3, r1, #6
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e72:	4651      	mov	r1, sl
 8001e74:	018a      	lsls	r2, r1, #6
 8001e76:	4651      	mov	r1, sl
 8001e78:	ebb2 0801 	subs.w	r8, r2, r1
 8001e7c:	4659      	mov	r1, fp
 8001e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e96:	4690      	mov	r8, r2
 8001e98:	4699      	mov	r9, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	eb49 0303 	adc.w	r3, r9, r3
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	024b      	lsls	r3, r1, #9
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	024a      	lsls	r2, r1, #9
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed4:	f7fe f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee0:	e058      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee2:	4b38      	ldr	r3, [pc, #224]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	099b      	lsrs	r3, r3, #6
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	4611      	mov	r1, r2
 8001eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001efc:	4642      	mov	r2, r8
 8001efe:	464b      	mov	r3, r9
 8001f00:	f04f 0000 	mov.w	r0, #0
 8001f04:	f04f 0100 	mov.w	r1, #0
 8001f08:	0159      	lsls	r1, r3, #5
 8001f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0e:	0150      	lsls	r0, r2, #5
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4641      	mov	r1, r8
 8001f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f34:	ebb2 040a 	subs.w	r4, r2, sl
 8001f38:	eb63 050b 	sbc.w	r5, r3, fp
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	00eb      	lsls	r3, r5, #3
 8001f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	4614      	mov	r4, r2
 8001f4e:	461d      	mov	r5, r3
 8001f50:	4643      	mov	r3, r8
 8001f52:	18e3      	adds	r3, r4, r3
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	464b      	mov	r3, r9
 8001f58:	eb45 0303 	adc.w	r3, r5, r3
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	028b      	lsls	r3, r1, #10
 8001f6e:	4621      	mov	r1, r4
 8001f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f74:	4621      	mov	r1, r4
 8001f76:	028a      	lsls	r2, r1, #10
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	61fa      	str	r2, [r7, #28]
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	f7fe f992 	bl	80002b0 <__aeabi_uldivmod>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4613      	mov	r3, r2
 8001f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3750      	adds	r7, #80	@ 0x50
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	00f42400 	.word	0x00f42400
 8001fcc:	007a1200 	.word	0x007a1200

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	0a9b      	lsrs	r3, r3, #10
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	4903      	ldr	r1, [pc, #12]	@ (800200c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffe:	5ccb      	ldrb	r3, [r1, r3]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	08004e90 	.word	0x08004e90

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002014:	f7ff ffdc 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0b5b      	lsrs	r3, r3, #13
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	@ (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	08004e90 	.word	0x08004e90

08002038 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002058:	4b87      	ldr	r3, [pc, #540]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800205a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800205e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	4984      	ldr	r1, [pc, #528]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002076:	2301      	movs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002086:	4b7c      	ldr	r3, [pc, #496]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4978      	ldr	r1, [pc, #480]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80020a4:	2301      	movs	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8083 	beq.w	80021bc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	4a6e      	ldr	r2, [pc, #440]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80020d2:	4b6a      	ldr	r3, [pc, #424]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a69      	ldr	r2, [pc, #420]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020de:	f7fe ff8b 	bl	8000ff8 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe ff87 	bl	8000ff8 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e162      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80020f8:	4b60      	ldr	r3, [pc, #384]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002104:	4b5c      	ldr	r3, [pc, #368]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d02f      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	429a      	cmp	r2, r3
 8002120:	d028      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002122:	4b55      	ldr	r3, [pc, #340]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800212a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800212c:	4b54      	ldr	r3, [pc, #336]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002132:	4b53      	ldr	r3, [pc, #332]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002138:	4a4f      	ldr	r2, [pc, #316]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800213e:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d114      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe ff55 	bl	8000ff8 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7fe ff51 	bl	8000ff8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e12a      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800217c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002180:	d10d      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002182:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002196:	4938      	ldr	r1, [pc, #224]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002198:	4313      	orrs	r3, r2
 800219a:	608b      	str	r3, [r1, #8]
 800219c:	e005      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800219e:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4a35      	ldr	r2, [pc, #212]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021a4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80021a8:	6093      	str	r3, [r2, #8]
 80021aa:	4b33      	ldr	r3, [pc, #204]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	4930      	ldr	r1, [pc, #192]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021d0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80021de:	4b26      	ldr	r3, [pc, #152]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	4922      	ldr	r1, [pc, #136]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d011      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002200:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002206:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	491a      	ldr	r1, [pc, #104]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800221e:	d101      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002230:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002232:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002236:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	490e      	ldr	r1, [pc, #56]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d004      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b80      	cmp	r3, #128	@ 0x80
 8002252:	f040 8091 	bne.w	8002378 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800225c:	f7fe fecc 	bl	8000ff8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002262:	e013      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002264:	f7fe fec8 	bl	8000ff8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d90c      	bls.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0a3      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	42470e40 	.word	0x42470e40
 8002284:	424711e0 	.word	0x424711e0
 8002288:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800228c:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e5      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002298:	4a4c      	ldr	r2, [pc, #304]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d019      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022dc:	d00e      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d019      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022fa:	d110      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	019b      	lsls	r3, r3, #6
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	492c      	ldr	r1, [pc, #176]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	019b      	lsls	r3, r3, #6
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	061b      	lsls	r3, r3, #24
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	071b      	lsls	r3, r3, #28
 8002344:	4920      	ldr	r1, [pc, #128]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800234c:	4b20      	ldr	r3, [pc, #128]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002352:	f7fe fe51 	bl	8000ff8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002358:	e008      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800235a:	f7fe fe4d 	bl	8000ff8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e028      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002384:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002392:	490d      	ldr	r1, [pc, #52]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80023a6:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80023a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4904      	ldr	r1, [pc, #16]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	424710d8 	.word	0x424710d8
 80023d0:	42470068 	.word	0x42470068

080023d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e273      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f2:	4b88      	ldr	r3, [pc, #544]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4b85      	ldr	r3, [pc, #532]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
        || \
 8002406:	2b08      	cmp	r3, #8
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b82      	ldr	r3, [pc, #520]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b7e      	ldr	r3, [pc, #504]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e24e      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x74>
 800243a:	4b76      	ldr	r3, [pc, #472]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a75      	ldr	r2, [pc, #468]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b70      	ldr	r3, [pc, #448]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a6f      	ldr	r2, [pc, #444]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6c      	ldr	r2, [pc, #432]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 800246c:	4b69      	ldr	r3, [pc, #420]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a68      	ldr	r2, [pc, #416]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b66      	ldr	r3, [pc, #408]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a65      	ldr	r2, [pc, #404]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fdb4 	bl	8000ff8 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fdb0 	bl	8000ff8 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e213      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xc0>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fda0 	bl	8000ff8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fd9c 	bl	8000ff8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1ff      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b51      	ldr	r3, [pc, #324]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b47      	ldr	r3, [pc, #284]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b44      	ldr	r3, [pc, #272]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b41      	ldr	r3, [pc, #260]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1d3      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b3b      	ldr	r3, [pc, #236]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4937      	ldr	r1, [pc, #220]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <HAL_RCC_OscConfig+0x244>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fd55 	bl	8000ff8 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fd51 	bl	8000ff8 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1b4      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4925      	ldr	r1, [pc, #148]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <HAL_RCC_OscConfig+0x244>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd34 	bl	8000ff8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7fe fd30 	bl	8000ff8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e193      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d036      	beq.n	800262c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_RCC_OscConfig+0x248>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fd14 	bl	8000ff8 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe fd10 	bl	8000ff8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e173      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_OscConfig+0x240>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x200>
 80025f2:	e01b      	b.n	800262c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <HAL_RCC_OscConfig+0x248>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fa:	f7fe fcfd 	bl	8000ff8 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e00e      	b.n	8002620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002602:	f7fe fcf9 	bl	8000ff8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d907      	bls.n	8002620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e15c      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
 8002614:	40023800 	.word	0x40023800
 8002618:	42470000 	.word	0x42470000
 800261c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	4b8a      	ldr	r3, [pc, #552]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1ea      	bne.n	8002602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8097 	beq.w	8002768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263e:	4b83      	ldr	r3, [pc, #524]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10f      	bne.n	800266a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b7f      	ldr	r3, [pc, #508]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	4a7e      	ldr	r2, [pc, #504]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002658:	6413      	str	r3, [r2, #64]	@ 0x40
 800265a:	4b7c      	ldr	r3, [pc, #496]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002666:	2301      	movs	r3, #1
 8002668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266a:	4b79      	ldr	r3, [pc, #484]	@ (8002850 <HAL_RCC_OscConfig+0x47c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002676:	4b76      	ldr	r3, [pc, #472]	@ (8002850 <HAL_RCC_OscConfig+0x47c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	@ (8002850 <HAL_RCC_OscConfig+0x47c>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002682:	f7fe fcb9 	bl	8000ff8 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe fcb5 	bl	8000ff8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e118      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4b6c      	ldr	r3, [pc, #432]	@ (8002850 <HAL_RCC_OscConfig+0x47c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x2ea>
 80026b0:	4b66      	ldr	r3, [pc, #408]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b4:	4a65      	ldr	r2, [pc, #404]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80026bc:	e01c      	b.n	80026f8 <HAL_RCC_OscConfig+0x324>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x30c>
 80026c6:	4b61      	ldr	r3, [pc, #388]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ca:	4a60      	ldr	r2, [pc, #384]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d2:	4b5e      	ldr	r3, [pc, #376]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	4a5d      	ldr	r2, [pc, #372]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0x324>
 80026e0:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	4a59      	ldr	r2, [pc, #356]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026e6:	f023 0301 	bic.w	r3, r3, #1
 80026ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ec:	4b57      	ldr	r3, [pc, #348]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a56      	ldr	r2, [pc, #344]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80026f2:	f023 0304 	bic.w	r3, r3, #4
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d015      	beq.n	800272c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7fe fc7a 	bl	8000ff8 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	e00a      	b.n	800271e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002708:	f7fe fc76 	bl	8000ff8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0d7      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271e:	4b4b      	ldr	r3, [pc, #300]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ee      	beq.n	8002708 <HAL_RCC_OscConfig+0x334>
 800272a:	e014      	b.n	8002756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272c:	f7fe fc64 	bl	8000ff8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	e00a      	b.n	800274a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe fc60 	bl	8000ff8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0c1      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274a:	4b40      	ldr	r3, [pc, #256]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ee      	bne.n	8002734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002756:	7dfb      	ldrb	r3, [r7, #23]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b3b      	ldr	r3, [pc, #236]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	4a3a      	ldr	r2, [pc, #232]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80ad 	beq.w	80028cc <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002772:	4b36      	ldr	r3, [pc, #216]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b08      	cmp	r3, #8
 800277c:	d060      	beq.n	8002840 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d145      	bne.n	8002812 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	4b33      	ldr	r3, [pc, #204]	@ (8002854 <HAL_RCC_OscConfig+0x480>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fc34 	bl	8000ff8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002794:	f7fe fc30 	bl	8000ff8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e093      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	4b29      	ldr	r3, [pc, #164]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	019b      	lsls	r3, r3, #6
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	491b      	ldr	r1, [pc, #108]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x480>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fc05 	bl	8000ff8 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fc01 	bl	8000ff8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e064      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002804:	4b11      	ldr	r3, [pc, #68]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x41e>
 8002810:	e05c      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b10      	ldr	r3, [pc, #64]	@ (8002854 <HAL_RCC_OscConfig+0x480>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fbee 	bl	8000ff8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fbea 	bl	8000ff8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e04d      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_RCC_OscConfig+0x478>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x44c>
 800283e:	e045      	b.n	80028cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d107      	bne.n	8002858 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e040      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
 800284c:	40023800 	.word	0x40023800
 8002850:	40007000 	.word	0x40007000
 8002854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002858:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <HAL_RCC_OscConfig+0x504>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d030      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d129      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d122      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002888:	4013      	ands	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800288e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	4293      	cmp	r3, r2
 8002892:	d119      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	085b      	lsrs	r3, r3, #1
 80028a0:	3b01      	subs	r3, #1
 80028a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d10f      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e042      	b.n	8002974 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f91a 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fdf3 	bl	800350c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d175      	bne.n	8002a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Transmit+0x2c>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e06e      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2221      	movs	r2, #33	@ 0x21
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fb1d 	bl	8000ff8 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029f0:	e02e      	b.n	8002a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fb55 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e03a      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e007      	b.n	8002a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1cb      	bne.n	80029f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	@ 0x40
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fb21 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e006      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b08c      	sub	sp, #48	@ 0x30
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d14a      	bne.n	8002b42 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e043      	b.n	8002b44 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb45 	bl	800315e <UART_Start_Receive_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d12c      	bne.n	8002b3c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d125      	bne.n	8002b36 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f043 0310 	orr.w	r3, r3, #16
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	e841 2300 	strex	r3, r2, [r1]
 8002b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e5      	bne.n	8002b00 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002b34:	e002      	b.n	8002b3c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b40:	e000      	b.n	8002b44 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
  }
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	@ 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0ba      	sub	sp, #232	@ 0xe8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10f      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x66>
 8002b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fbf0 	bl	8003390 <UART_Receive_IT>
      return;
 8002bb0:	e25b      	b.n	800306a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80de 	beq.w	8002d78 <HAL_UART_IRQHandler+0x22c>
 8002bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d106      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80d1 	beq.w	8002d78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_UART_IRQHandler+0xae>
 8002be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_UART_IRQHandler+0xd2>
 8002c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0202 	orr.w	r2, r3, #2
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <HAL_UART_IRQHandler+0xf6>
 8002c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d011      	beq.n	8002c72 <HAL_UART_IRQHandler+0x126>
 8002c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f043 0208 	orr.w	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 81f2 	beq.w	8003060 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_UART_IRQHandler+0x14e>
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fb7b 	bl	8003390 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca4:	2b40      	cmp	r3, #64	@ 0x40
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x17a>
 8002cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d04f      	beq.n	8002d66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fa83 	bl	80031d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d141      	bne.n	8002d5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002d06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1d9      	bne.n	8002cda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d013      	beq.n	8002d56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d32:	4a7e      	ldr	r2, [pc, #504]	@ (8002f2c <HAL_UART_IRQHandler+0x3e0>)
 8002d34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe fb0d 	bl	800135a <HAL_DMA_Abort_IT>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d50:	4610      	mov	r0, r2
 8002d52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	e00e      	b.n	8002d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f99e 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	e00a      	b.n	8002d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f99a 	bl	8003098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e006      	b.n	8002d74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f996 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d72:	e175      	b.n	8003060 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	bf00      	nop
    return;
 8002d76:	e173      	b.n	8003060 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f040 814f 	bne.w	8003020 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8148 	beq.w	8003020 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8141 	beq.w	8003020 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	f040 80b6 	bne.w	8002f30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8145 	beq.w	8003064 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002de2:	429a      	cmp	r2, r3
 8002de4:	f080 813e 	bcs.w	8003064 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dfa:	f000 8088 	beq.w	8002f0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1d9      	bne.n	8002dfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3314      	adds	r3, #20
 8002e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e1      	bne.n	8002e4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3314      	adds	r3, #20
 8002e8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3314      	adds	r3, #20
 8002ea6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002eaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002eac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002eb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002eb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e3      	bne.n	8002e86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002edc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ede:	f023 0310 	bic.w	r3, r3, #16
 8002ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002ef0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ef2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ef6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e3      	bne.n	8002ecc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe f9b6 	bl	800127a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fd fb45 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f2a:	e09b      	b.n	8003064 <HAL_UART_IRQHandler+0x518>
 8002f2c:	08003299 	.word	0x08003299
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 808e 	beq.w	8003068 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8089 	beq.w	8003068 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002fb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fba:	e841 2300 	strex	r3, r2, [r1]
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1e3      	bne.n	8002f8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0310 	bic.w	r3, r3, #16
 8002fea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ff8:	61fa      	str	r2, [r7, #28]
 8002ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	69b9      	ldr	r1, [r7, #24]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	617b      	str	r3, [r7, #20]
   return(result);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e3      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd facb 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800301e:	e023      	b.n	8003068 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_UART_IRQHandler+0x4f4>
 800302c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f941 	bl	80032c0 <UART_Transmit_IT>
    return;
 800303e:	e014      	b.n	800306a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <HAL_UART_IRQHandler+0x51e>
 800304c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f981 	bl	8003360 <UART_EndTransmit_IT>
    return;
 800305e:	e004      	b.n	800306a <HAL_UART_IRQHandler+0x51e>
    return;
 8003060:	bf00      	nop
 8003062:	e002      	b.n	800306a <HAL_UART_IRQHandler+0x51e>
      return;
 8003064:	bf00      	nop
 8003066:	e000      	b.n	800306a <HAL_UART_IRQHandler+0x51e>
      return;
 8003068:	bf00      	nop
  }
}
 800306a:	37e8      	adds	r7, #232	@ 0xe8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030bc:	e03b      	b.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030c4:	d037      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fd ff97 	bl	8000ff8 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	6a3a      	ldr	r2, [r7, #32]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <UART_WaitOnFlagUntilTimeout+0x30>
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e03a      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d023      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b80      	cmp	r3, #128	@ 0x80
 80030f2:	d020      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b40      	cmp	r3, #64	@ 0x40
 80030f8:	d01d      	beq.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d116      	bne.n	8003136 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f857 	bl	80031d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2208      	movs	r2, #8
 8003128:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e00f      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	429a      	cmp	r2, r3
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	429a      	cmp	r2, r3
 8003152:	d0b4      	beq.n	80030be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	4613      	mov	r3, r2
 800316a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	88fa      	ldrh	r2, [r7, #6]
 800317c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2222      	movs	r2, #34	@ 0x22
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b095      	sub	sp, #84	@ 0x54
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	330c      	adds	r3, #12
 80031e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e4:	e853 3f00 	ldrex	r3, [r3]
 80031e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	330c      	adds	r3, #12
 80031f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80031fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003200:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e5      	bne.n	80031da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	61fb      	str	r3, [r7, #28]
   return(result);
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3314      	adds	r3, #20
 800322c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800322e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003234:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e5      	bne.n	800320e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	2b01      	cmp	r3, #1
 8003248:	d119      	bne.n	800327e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	330c      	adds	r3, #12
 8003250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	60bb      	str	r3, [r7, #8]
   return(result);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	f023 0310 	bic.w	r3, r3, #16
 8003260:	647b      	str	r3, [r7, #68]	@ 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800326a:	61ba      	str	r2, [r7, #24]
 800326c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	6979      	ldr	r1, [r7, #20]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1e5      	bne.n	800324a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800328c:	bf00      	nop
 800328e:	3754      	adds	r7, #84	@ 0x54
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff fef0 	bl	8003098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b21      	cmp	r3, #33	@ 0x21
 80032d2:	d13e      	bne.n	8003352 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d114      	bne.n	8003308 <UART_Transmit_IT+0x48>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d110      	bne.n	8003308 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]
 8003306:	e008      	b.n	800331a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6211      	str	r1, [r2, #32]
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29b      	uxth	r3, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4619      	mov	r1, r3
 8003328:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10f      	bne.n	800334e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800333c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800334c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003376:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fe75 	bl	8003070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	@ 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b22      	cmp	r3, #34	@ 0x22
 80033a2:	f040 80ae 	bne.w	8003502 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	d117      	bne.n	80033e0 <UART_Receive_IT+0x50>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	1c9a      	adds	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80033de:	e026      	b.n	800342e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f2:	d007      	beq.n	8003404 <UART_Receive_IT+0x74>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <UART_Receive_IT+0x82>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340e:	701a      	strb	r2, [r3, #0]
 8003410:	e008      	b.n	8003424 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800341e:	b2da      	uxtb	r2, r3
 8003420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003422:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	4619      	mov	r1, r3
 800343c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800343e:	2b00      	cmp	r3, #0
 8003440:	d15d      	bne.n	80034fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0220 	bic.w	r2, r2, #32
 8003450:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003460:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	d135      	bne.n	80034f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	613b      	str	r3, [r7, #16]
   return(result);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f023 0310 	bic.w	r3, r3, #16
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	330c      	adds	r3, #12
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	623a      	str	r2, [r7, #32]
 80034b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	69f9      	ldr	r1, [r7, #28]
 80034b4:	6a3a      	ldr	r2, [r7, #32]
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e5      	bne.n	800348e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d10a      	bne.n	80034e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fd f861 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
 80034f2:	e002      	b.n	80034fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff fdc5 	bl	8003084 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e002      	b.n	8003504 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e000      	b.n	8003504 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
  }
}
 8003504:	4618      	mov	r0, r3
 8003506:	3730      	adds	r7, #48	@ 0x30
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800350c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003510:	b0c0      	sub	sp, #256	@ 0x100
 8003512:	af00      	add	r7, sp, #0
 8003514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	ea40 0301 	orr.w	r3, r0, r1
 8003534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	431a      	orrs	r2, r3
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003564:	f021 010c 	bic.w	r1, r1, #12
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003572:	430b      	orrs	r3, r1
 8003574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003586:	6999      	ldr	r1, [r3, #24]
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	ea40 0301 	orr.w	r3, r0, r1
 8003592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b8f      	ldr	r3, [pc, #572]	@ (80037d8 <UART_SetConfig+0x2cc>)
 800359c:	429a      	cmp	r2, r3
 800359e:	d005      	beq.n	80035ac <UART_SetConfig+0xa0>
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b8d      	ldr	r3, [pc, #564]	@ (80037dc <UART_SetConfig+0x2d0>)
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d104      	bne.n	80035b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7fe fd30 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 80035b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80035b4:	e003      	b.n	80035be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b6:	f7fe fd17 	bl	8001fe8 <HAL_RCC_GetPCLK1Freq>
 80035ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c8:	f040 810c 	bne.w	80037e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035d0:	2200      	movs	r2, #0
 80035d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035de:	4622      	mov	r2, r4
 80035e0:	462b      	mov	r3, r5
 80035e2:	1891      	adds	r1, r2, r2
 80035e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035e6:	415b      	adcs	r3, r3
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ee:	4621      	mov	r1, r4
 80035f0:	eb12 0801 	adds.w	r8, r2, r1
 80035f4:	4629      	mov	r1, r5
 80035f6:	eb43 0901 	adc.w	r9, r3, r1
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	4690      	mov	r8, r2
 8003610:	4699      	mov	r9, r3
 8003612:	4623      	mov	r3, r4
 8003614:	eb18 0303 	adds.w	r3, r8, r3
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800361c:	462b      	mov	r3, r5
 800361e:	eb49 0303 	adc.w	r3, r9, r3
 8003622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800363a:	460b      	mov	r3, r1
 800363c:	18db      	adds	r3, r3, r3
 800363e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003640:	4613      	mov	r3, r2
 8003642:	eb42 0303 	adc.w	r3, r2, r3
 8003646:	657b      	str	r3, [r7, #84]	@ 0x54
 8003648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800364c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003650:	f7fc fe2e 	bl	80002b0 <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4b61      	ldr	r3, [pc, #388]	@ (80037e0 <UART_SetConfig+0x2d4>)
 800365a:	fba3 2302 	umull	r2, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	011c      	lsls	r4, r3, #4
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800366c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800367c:	415b      	adcs	r3, r3
 800367e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003684:	4641      	mov	r1, r8
 8003686:	eb12 0a01 	adds.w	sl, r2, r1
 800368a:	4649      	mov	r1, r9
 800368c:	eb43 0b01 	adc.w	fp, r3, r1
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800369c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a4:	4692      	mov	sl, r2
 80036a6:	469b      	mov	fp, r3
 80036a8:	4643      	mov	r3, r8
 80036aa:	eb1a 0303 	adds.w	r3, sl, r3
 80036ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036b2:	464b      	mov	r3, r9
 80036b4:	eb4b 0303 	adc.w	r3, fp, r3
 80036b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036d0:	460b      	mov	r3, r1
 80036d2:	18db      	adds	r3, r3, r3
 80036d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036d6:	4613      	mov	r3, r2
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036e6:	f7fc fde3 	bl	80002b0 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80036f2:	fba3 2301 	umull	r2, r3, r3, r1
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2264      	movs	r2, #100	@ 0x64
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003706:	4b36      	ldr	r3, [pc, #216]	@ (80037e0 <UART_SetConfig+0x2d4>)
 8003708:	fba3 2302 	umull	r2, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003714:	441c      	add	r4, r3
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003730:	415b      	adcs	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003738:	4641      	mov	r1, r8
 800373a:	1851      	adds	r1, r2, r1
 800373c:	6339      	str	r1, [r7, #48]	@ 0x30
 800373e:	4649      	mov	r1, r9
 8003740:	414b      	adcs	r3, r1
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003750:	4659      	mov	r1, fp
 8003752:	00cb      	lsls	r3, r1, #3
 8003754:	4651      	mov	r1, sl
 8003756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800375a:	4651      	mov	r1, sl
 800375c:	00ca      	lsls	r2, r1, #3
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	4603      	mov	r3, r0
 8003764:	4642      	mov	r2, r8
 8003766:	189b      	adds	r3, r3, r2
 8003768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800376c:	464b      	mov	r3, r9
 800376e:	460a      	mov	r2, r1
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800378c:	460b      	mov	r3, r1
 800378e:	18db      	adds	r3, r3, r3
 8003790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003792:	4613      	mov	r3, r2
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800379a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800379e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80037a2:	f7fc fd85 	bl	80002b0 <__aeabi_uldivmod>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80037ac:	fba3 1302 	umull	r1, r3, r3, r2
 80037b0:	095b      	lsrs	r3, r3, #5
 80037b2:	2164      	movs	r1, #100	@ 0x64
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3332      	adds	r3, #50	@ 0x32
 80037be:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <UART_SetConfig+0x2d4>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	f003 0207 	and.w	r2, r3, #7
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4422      	add	r2, r4
 80037d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037d4:	e106      	b.n	80039e4 <UART_SetConfig+0x4d8>
 80037d6:	bf00      	nop
 80037d8:	40011000 	.word	0x40011000
 80037dc:	40011400 	.word	0x40011400
 80037e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037f6:	4642      	mov	r2, r8
 80037f8:	464b      	mov	r3, r9
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	6239      	str	r1, [r7, #32]
 80037fe:	415b      	adcs	r3, r3
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
 8003802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003806:	4641      	mov	r1, r8
 8003808:	1854      	adds	r4, r2, r1
 800380a:	4649      	mov	r1, r9
 800380c:	eb43 0501 	adc.w	r5, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800382c:	464b      	mov	r3, r9
 800382e:	eb45 0303 	adc.w	r3, r5, r3
 8003832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003852:	4629      	mov	r1, r5
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800385c:	4621      	mov	r1, r4
 800385e:	008a      	lsls	r2, r1, #2
 8003860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003864:	f7fc fd24 	bl	80002b0 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4b60      	ldr	r3, [pc, #384]	@ (80039f0 <UART_SetConfig+0x4e4>)
 800386e:	fba3 2302 	umull	r2, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	011c      	lsls	r4, r3, #4
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003888:	4642      	mov	r2, r8
 800388a:	464b      	mov	r3, r9
 800388c:	1891      	adds	r1, r2, r2
 800388e:	61b9      	str	r1, [r7, #24]
 8003890:	415b      	adcs	r3, r3
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003898:	4641      	mov	r1, r8
 800389a:	1851      	adds	r1, r2, r1
 800389c:	6139      	str	r1, [r7, #16]
 800389e:	4649      	mov	r1, r9
 80038a0:	414b      	adcs	r3, r1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b0:	4659      	mov	r1, fp
 80038b2:	00cb      	lsls	r3, r1, #3
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ba:	4651      	mov	r1, sl
 80038bc:	00ca      	lsls	r2, r1, #3
 80038be:	4610      	mov	r0, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	4642      	mov	r2, r8
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038cc:	464b      	mov	r3, r9
 80038ce:	460a      	mov	r2, r1
 80038d0:	eb42 0303 	adc.w	r3, r2, r3
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038f0:	4649      	mov	r1, r9
 80038f2:	008b      	lsls	r3, r1, #2
 80038f4:	4641      	mov	r1, r8
 80038f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fa:	4641      	mov	r1, r8
 80038fc:	008a      	lsls	r2, r1, #2
 80038fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003902:	f7fc fcd5 	bl	80002b0 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4611      	mov	r1, r2
 800390c:	4b38      	ldr	r3, [pc, #224]	@ (80039f0 <UART_SetConfig+0x4e4>)
 800390e:	fba3 2301 	umull	r2, r3, r3, r1
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2264      	movs	r2, #100	@ 0x64
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	1acb      	subs	r3, r1, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	@ 0x32
 8003920:	4a33      	ldr	r2, [pc, #204]	@ (80039f0 <UART_SetConfig+0x4e4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800392c:	441c      	add	r4, r3
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003932:	2200      	movs	r2, #0
 8003934:	673b      	str	r3, [r7, #112]	@ 0x70
 8003936:	677a      	str	r2, [r7, #116]	@ 0x74
 8003938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	415b      	adcs	r3, r3
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800397e:	464b      	mov	r3, r9
 8003980:	460a      	mov	r2, r1
 8003982:	eb42 0303 	adc.w	r3, r2, r3
 8003986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	663b      	str	r3, [r7, #96]	@ 0x60
 8003992:	667a      	str	r2, [r7, #100]	@ 0x64
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	f04f 0300 	mov.w	r3, #0
 800399c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80039a0:	4649      	mov	r1, r9
 80039a2:	008b      	lsls	r3, r1, #2
 80039a4:	4641      	mov	r1, r8
 80039a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039aa:	4641      	mov	r1, r8
 80039ac:	008a      	lsls	r2, r1, #2
 80039ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80039b2:	f7fc fc7d 	bl	80002b0 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <UART_SetConfig+0x4e4>)
 80039bc:	fba3 1302 	umull	r1, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2164      	movs	r1, #100	@ 0x64
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3332      	adds	r3, #50	@ 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	@ (80039f0 <UART_SetConfig+0x4e4>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4422      	add	r2, r4
 80039e2:	609a      	str	r2, [r3, #8]
}
 80039e4:	bf00      	nop
 80039e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039ea:	46bd      	mov	sp, r7
 80039ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f4:	b084      	sub	sp, #16
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	f107 001c 	add.w	r0, r7, #28
 8003a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d123      	bne.n	8003a56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d105      	bne.n	8003a4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa9a 	bl	8003f84 <USB_CoreReset>
 8003a50:	4603      	mov	r3, r0
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e01b      	b.n	8003a8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fa8e 	bl	8003f84 <USB_CoreReset>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a80:	e005      	b.n	8003a8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a8e:	7fbb      	ldrb	r3, [r7, #30]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d10b      	bne.n	8003aac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f043 0206 	orr.w	r2, r3, #6
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f043 0220 	orr.w	r2, r3, #32
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ab8:	b004      	add	sp, #16
 8003aba:	4770      	bx	lr

08003abc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f023 0201 	bic.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d115      	bne.n	8003b2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7fd fa7f 	bl	8001010 <HAL_Delay>
      ms += 10U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	330a      	adds	r3, #10
 8003b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fa25 	bl	8003f68 <USB_GetMode>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d01e      	beq.n	8003b62 <USB_SetCurrentMode+0x84>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b28:	d9f0      	bls.n	8003b0c <USB_SetCurrentMode+0x2e>
 8003b2a:	e01a      	b.n	8003b62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b3e:	200a      	movs	r0, #10
 8003b40:	f7fd fa66 	bl	8001010 <HAL_Delay>
      ms += 10U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	330a      	adds	r3, #10
 8003b48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa0c 	bl	8003f68 <USB_GetMode>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <USB_SetCurrentMode+0x84>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2bc7      	cmp	r3, #199	@ 0xc7
 8003b5a:	d9f0      	bls.n	8003b3e <USB_SetCurrentMode+0x60>
 8003b5c:	e001      	b.n	8003b62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e005      	b.n	8003b6e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2bc8      	cmp	r3, #200	@ 0xc8
 8003b66:	d101      	bne.n	8003b6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b78:	b084      	sub	sp, #16
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e009      	b.n	8003bac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3340      	adds	r3, #64	@ 0x40
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b0e      	cmp	r3, #14
 8003bb0:	d9f2      	bls.n	8003b98 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11c      	bne.n	8003bf4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e005      	b.n	8003c00 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c0c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d104      	bne.n	8003c26 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f968 	bl	8003ef4 <USB_SetDevSpeed>
 8003c24:	e008      	b.n	8003c38 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c26:	2101      	movs	r1, #1
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f963 	bl	8003ef4 <USB_SetDevSpeed>
 8003c2e:	e003      	b.n	8003c38 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c30:	2103      	movs	r1, #3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f95e 	bl	8003ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c38:	2110      	movs	r1, #16
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8fa 	bl	8003e34 <USB_FlushTxFifo>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f924 	bl	8003e98 <USB_FlushRxFifo>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	461a      	mov	r2, r3
 8003c62:	2300      	movs	r3, #0
 8003c64:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2300      	movs	r3, #0
 8003c70:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	e043      	b.n	8003d0c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c9a:	d118      	bne.n	8003cce <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e013      	b.n	8003ce0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e008      	b.n	8003ce0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cec:	461a      	mov	r2, r3
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d10:	461a      	mov	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d3b5      	bcc.n	8003c84 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	e043      	b.n	8003da6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d34:	d118      	bne.n	8003d68 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e013      	b.n	8003d7a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e008      	b.n	8003d7a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2300      	movs	r3, #0
 8003d78:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d86:	461a      	mov	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003daa:	461a      	mov	r2, r3
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d3b5      	bcc.n	8003d1e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003dd2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f043 0210 	orr.w	r2, r3, #16
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <USB_DevInit+0x2b8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003df4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	f043 0208 	orr.w	r2, r3, #8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d107      	bne.n	8003e20 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e2c:	b004      	add	sp, #16
 8003e2e:	4770      	bx	lr
 8003e30:	803c3800 	.word	0x803c3800

08003e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3301      	adds	r3, #1
 8003e46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e4e:	d901      	bls.n	8003e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e01b      	b.n	8003e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	daf2      	bge.n	8003e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	019b      	lsls	r3, r3, #6
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e78:	d901      	bls.n	8003e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e006      	b.n	8003e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0320 	and.w	r3, r3, #32
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d0f0      	beq.n	8003e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eb0:	d901      	bls.n	8003eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e018      	b.n	8003ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	daf2      	bge.n	8003ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2210      	movs	r2, #16
 8003ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ed4:	d901      	bls.n	8003eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e006      	b.n	8003ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0310 	and.w	r3, r3, #16
 8003ee2:	2b10      	cmp	r3, #16
 8003ee4:	d0f0      	beq.n	8003ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f14:	4313      	orrs	r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003f40:	f023 0303 	bic.w	r3, r3, #3
 8003f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0301 	and.w	r3, r3, #1
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f9c:	d901      	bls.n	8003fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e01b      	b.n	8003fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	daf2      	bge.n	8003f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003fc6:	d901      	bls.n	8003fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d0f0      	beq.n	8003fba <USB_CoreReset+0x36>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <std>:
 8003fe8:	2300      	movs	r3, #0
 8003fea:	b510      	push	{r4, lr}
 8003fec:	4604      	mov	r4, r0
 8003fee:	e9c0 3300 	strd	r3, r3, [r0]
 8003ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ff6:	6083      	str	r3, [r0, #8]
 8003ff8:	8181      	strh	r1, [r0, #12]
 8003ffa:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ffc:	81c2      	strh	r2, [r0, #14]
 8003ffe:	6183      	str	r3, [r0, #24]
 8004000:	4619      	mov	r1, r3
 8004002:	2208      	movs	r2, #8
 8004004:	305c      	adds	r0, #92	@ 0x5c
 8004006:	f000 f8c3 	bl	8004190 <memset>
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <std+0x58>)
 800400c:	6263      	str	r3, [r4, #36]	@ 0x24
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <std+0x5c>)
 8004010:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <std+0x60>)
 8004014:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <std+0x64>)
 8004018:	6323      	str	r3, [r4, #48]	@ 0x30
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <std+0x68>)
 800401c:	6224      	str	r4, [r4, #32]
 800401e:	429c      	cmp	r4, r3
 8004020:	d006      	beq.n	8004030 <std+0x48>
 8004022:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004026:	4294      	cmp	r4, r2
 8004028:	d002      	beq.n	8004030 <std+0x48>
 800402a:	33d0      	adds	r3, #208	@ 0xd0
 800402c:	429c      	cmp	r4, r3
 800402e:	d105      	bne.n	800403c <std+0x54>
 8004030:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004038:	f000 b8dc 	b.w	80041f4 <__retarget_lock_init_recursive>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	bf00      	nop
 8004040:	08004a4d 	.word	0x08004a4d
 8004044:	08004a6f 	.word	0x08004a6f
 8004048:	08004aa7 	.word	0x08004aa7
 800404c:	08004acb 	.word	0x08004acb
 8004050:	200007b8 	.word	0x200007b8

08004054 <stdio_exit_handler>:
 8004054:	4a02      	ldr	r2, [pc, #8]	@ (8004060 <stdio_exit_handler+0xc>)
 8004056:	4903      	ldr	r1, [pc, #12]	@ (8004064 <stdio_exit_handler+0x10>)
 8004058:	4803      	ldr	r0, [pc, #12]	@ (8004068 <stdio_exit_handler+0x14>)
 800405a:	f000 b869 	b.w	8004130 <_fwalk_sglue>
 800405e:	bf00      	nop
 8004060:	2000000c 	.word	0x2000000c
 8004064:	080049e5 	.word	0x080049e5
 8004068:	2000001c 	.word	0x2000001c

0800406c <cleanup_stdio>:
 800406c:	6841      	ldr	r1, [r0, #4]
 800406e:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <cleanup_stdio+0x34>)
 8004070:	4299      	cmp	r1, r3
 8004072:	b510      	push	{r4, lr}
 8004074:	4604      	mov	r4, r0
 8004076:	d001      	beq.n	800407c <cleanup_stdio+0x10>
 8004078:	f000 fcb4 	bl	80049e4 <_fflush_r>
 800407c:	68a1      	ldr	r1, [r4, #8]
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <cleanup_stdio+0x38>)
 8004080:	4299      	cmp	r1, r3
 8004082:	d002      	beq.n	800408a <cleanup_stdio+0x1e>
 8004084:	4620      	mov	r0, r4
 8004086:	f000 fcad 	bl	80049e4 <_fflush_r>
 800408a:	68e1      	ldr	r1, [r4, #12]
 800408c:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <cleanup_stdio+0x3c>)
 800408e:	4299      	cmp	r1, r3
 8004090:	d004      	beq.n	800409c <cleanup_stdio+0x30>
 8004092:	4620      	mov	r0, r4
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004098:	f000 bca4 	b.w	80049e4 <_fflush_r>
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	200007b8 	.word	0x200007b8
 80040a4:	20000820 	.word	0x20000820
 80040a8:	20000888 	.word	0x20000888

080040ac <global_stdio_init.part.0>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <global_stdio_init.part.0+0x30>)
 80040b0:	4c0b      	ldr	r4, [pc, #44]	@ (80040e0 <global_stdio_init.part.0+0x34>)
 80040b2:	4a0c      	ldr	r2, [pc, #48]	@ (80040e4 <global_stdio_init.part.0+0x38>)
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4620      	mov	r0, r4
 80040b8:	2200      	movs	r2, #0
 80040ba:	2104      	movs	r1, #4
 80040bc:	f7ff ff94 	bl	8003fe8 <std>
 80040c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040c4:	2201      	movs	r2, #1
 80040c6:	2109      	movs	r1, #9
 80040c8:	f7ff ff8e 	bl	8003fe8 <std>
 80040cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040d0:	2202      	movs	r2, #2
 80040d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d6:	2112      	movs	r1, #18
 80040d8:	f7ff bf86 	b.w	8003fe8 <std>
 80040dc:	200008f0 	.word	0x200008f0
 80040e0:	200007b8 	.word	0x200007b8
 80040e4:	08004055 	.word	0x08004055

080040e8 <__sfp_lock_acquire>:
 80040e8:	4801      	ldr	r0, [pc, #4]	@ (80040f0 <__sfp_lock_acquire+0x8>)
 80040ea:	f000 b884 	b.w	80041f6 <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	200008f5 	.word	0x200008f5

080040f4 <__sfp_lock_release>:
 80040f4:	4801      	ldr	r0, [pc, #4]	@ (80040fc <__sfp_lock_release+0x8>)
 80040f6:	f000 b87f 	b.w	80041f8 <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	200008f5 	.word	0x200008f5

08004100 <__sinit>:
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	f7ff fff0 	bl	80040e8 <__sfp_lock_acquire>
 8004108:	6a23      	ldr	r3, [r4, #32]
 800410a:	b11b      	cbz	r3, 8004114 <__sinit+0x14>
 800410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004110:	f7ff bff0 	b.w	80040f4 <__sfp_lock_release>
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__sinit+0x28>)
 8004116:	6223      	str	r3, [r4, #32]
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__sinit+0x2c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f5      	bne.n	800410c <__sinit+0xc>
 8004120:	f7ff ffc4 	bl	80040ac <global_stdio_init.part.0>
 8004124:	e7f2      	b.n	800410c <__sinit+0xc>
 8004126:	bf00      	nop
 8004128:	0800406d 	.word	0x0800406d
 800412c:	200008f0 	.word	0x200008f0

08004130 <_fwalk_sglue>:
 8004130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004134:	4607      	mov	r7, r0
 8004136:	4688      	mov	r8, r1
 8004138:	4614      	mov	r4, r2
 800413a:	2600      	movs	r6, #0
 800413c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004140:	f1b9 0901 	subs.w	r9, r9, #1
 8004144:	d505      	bpl.n	8004152 <_fwalk_sglue+0x22>
 8004146:	6824      	ldr	r4, [r4, #0]
 8004148:	2c00      	cmp	r4, #0
 800414a:	d1f7      	bne.n	800413c <_fwalk_sglue+0xc>
 800414c:	4630      	mov	r0, r6
 800414e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004152:	89ab      	ldrh	r3, [r5, #12]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d907      	bls.n	8004168 <_fwalk_sglue+0x38>
 8004158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800415c:	3301      	adds	r3, #1
 800415e:	d003      	beq.n	8004168 <_fwalk_sglue+0x38>
 8004160:	4629      	mov	r1, r5
 8004162:	4638      	mov	r0, r7
 8004164:	47c0      	blx	r8
 8004166:	4306      	orrs	r6, r0
 8004168:	3568      	adds	r5, #104	@ 0x68
 800416a:	e7e9      	b.n	8004140 <_fwalk_sglue+0x10>

0800416c <iprintf>:
 800416c:	b40f      	push	{r0, r1, r2, r3}
 800416e:	b507      	push	{r0, r1, r2, lr}
 8004170:	4906      	ldr	r1, [pc, #24]	@ (800418c <iprintf+0x20>)
 8004172:	ab04      	add	r3, sp, #16
 8004174:	6808      	ldr	r0, [r1, #0]
 8004176:	f853 2b04 	ldr.w	r2, [r3], #4
 800417a:	6881      	ldr	r1, [r0, #8]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	f000 f865 	bl	800424c <_vfiprintf_r>
 8004182:	b003      	add	sp, #12
 8004184:	f85d eb04 	ldr.w	lr, [sp], #4
 8004188:	b004      	add	sp, #16
 800418a:	4770      	bx	lr
 800418c:	20000018 	.word	0x20000018

08004190 <memset>:
 8004190:	4402      	add	r2, r0
 8004192:	4603      	mov	r3, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	d100      	bne.n	800419a <memset+0xa>
 8004198:	4770      	bx	lr
 800419a:	f803 1b01 	strb.w	r1, [r3], #1
 800419e:	e7f9      	b.n	8004194 <memset+0x4>

080041a0 <__errno>:
 80041a0:	4b01      	ldr	r3, [pc, #4]	@ (80041a8 <__errno+0x8>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000018 	.word	0x20000018

080041ac <__libc_init_array>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4d0d      	ldr	r5, [pc, #52]	@ (80041e4 <__libc_init_array+0x38>)
 80041b0:	4c0d      	ldr	r4, [pc, #52]	@ (80041e8 <__libc_init_array+0x3c>)
 80041b2:	1b64      	subs	r4, r4, r5
 80041b4:	10a4      	asrs	r4, r4, #2
 80041b6:	2600      	movs	r6, #0
 80041b8:	42a6      	cmp	r6, r4
 80041ba:	d109      	bne.n	80041d0 <__libc_init_array+0x24>
 80041bc:	4d0b      	ldr	r5, [pc, #44]	@ (80041ec <__libc_init_array+0x40>)
 80041be:	4c0c      	ldr	r4, [pc, #48]	@ (80041f0 <__libc_init_array+0x44>)
 80041c0:	f000 fe40 	bl	8004e44 <_init>
 80041c4:	1b64      	subs	r4, r4, r5
 80041c6:	10a4      	asrs	r4, r4, #2
 80041c8:	2600      	movs	r6, #0
 80041ca:	42a6      	cmp	r6, r4
 80041cc:	d105      	bne.n	80041da <__libc_init_array+0x2e>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d4:	4798      	blx	r3
 80041d6:	3601      	adds	r6, #1
 80041d8:	e7ee      	b.n	80041b8 <__libc_init_array+0xc>
 80041da:	f855 3b04 	ldr.w	r3, [r5], #4
 80041de:	4798      	blx	r3
 80041e0:	3601      	adds	r6, #1
 80041e2:	e7f2      	b.n	80041ca <__libc_init_array+0x1e>
 80041e4:	08004ed4 	.word	0x08004ed4
 80041e8:	08004ed4 	.word	0x08004ed4
 80041ec:	08004ed4 	.word	0x08004ed4
 80041f0:	08004ed8 	.word	0x08004ed8

080041f4 <__retarget_lock_init_recursive>:
 80041f4:	4770      	bx	lr

080041f6 <__retarget_lock_acquire_recursive>:
 80041f6:	4770      	bx	lr

080041f8 <__retarget_lock_release_recursive>:
 80041f8:	4770      	bx	lr

080041fa <__sfputc_r>:
 80041fa:	6893      	ldr	r3, [r2, #8]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	b410      	push	{r4}
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	da08      	bge.n	8004218 <__sfputc_r+0x1e>
 8004206:	6994      	ldr	r4, [r2, #24]
 8004208:	42a3      	cmp	r3, r4
 800420a:	db01      	blt.n	8004210 <__sfputc_r+0x16>
 800420c:	290a      	cmp	r1, #10
 800420e:	d103      	bne.n	8004218 <__sfputc_r+0x1e>
 8004210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004214:	f000 bc5d 	b.w	8004ad2 <__swbuf_r>
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	1c58      	adds	r0, r3, #1
 800421c:	6010      	str	r0, [r2, #0]
 800421e:	7019      	strb	r1, [r3, #0]
 8004220:	4608      	mov	r0, r1
 8004222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004226:	4770      	bx	lr

08004228 <__sfputs_r>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	4606      	mov	r6, r0
 800422c:	460f      	mov	r7, r1
 800422e:	4614      	mov	r4, r2
 8004230:	18d5      	adds	r5, r2, r3
 8004232:	42ac      	cmp	r4, r5
 8004234:	d101      	bne.n	800423a <__sfputs_r+0x12>
 8004236:	2000      	movs	r0, #0
 8004238:	e007      	b.n	800424a <__sfputs_r+0x22>
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	463a      	mov	r2, r7
 8004240:	4630      	mov	r0, r6
 8004242:	f7ff ffda 	bl	80041fa <__sfputc_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d1f3      	bne.n	8004232 <__sfputs_r+0xa>
 800424a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800424c <_vfiprintf_r>:
 800424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004250:	460d      	mov	r5, r1
 8004252:	b09d      	sub	sp, #116	@ 0x74
 8004254:	4614      	mov	r4, r2
 8004256:	4698      	mov	r8, r3
 8004258:	4606      	mov	r6, r0
 800425a:	b118      	cbz	r0, 8004264 <_vfiprintf_r+0x18>
 800425c:	6a03      	ldr	r3, [r0, #32]
 800425e:	b90b      	cbnz	r3, 8004264 <_vfiprintf_r+0x18>
 8004260:	f7ff ff4e 	bl	8004100 <__sinit>
 8004264:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004266:	07d9      	lsls	r1, r3, #31
 8004268:	d405      	bmi.n	8004276 <_vfiprintf_r+0x2a>
 800426a:	89ab      	ldrh	r3, [r5, #12]
 800426c:	059a      	lsls	r2, r3, #22
 800426e:	d402      	bmi.n	8004276 <_vfiprintf_r+0x2a>
 8004270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004272:	f7ff ffc0 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	d501      	bpl.n	8004280 <_vfiprintf_r+0x34>
 800427c:	692b      	ldr	r3, [r5, #16]
 800427e:	b99b      	cbnz	r3, 80042a8 <_vfiprintf_r+0x5c>
 8004280:	4629      	mov	r1, r5
 8004282:	4630      	mov	r0, r6
 8004284:	f000 fc64 	bl	8004b50 <__swsetup_r>
 8004288:	b170      	cbz	r0, 80042a8 <_vfiprintf_r+0x5c>
 800428a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800428c:	07dc      	lsls	r4, r3, #31
 800428e:	d504      	bpl.n	800429a <_vfiprintf_r+0x4e>
 8004290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004294:	b01d      	add	sp, #116	@ 0x74
 8004296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	0598      	lsls	r0, r3, #22
 800429e:	d4f7      	bmi.n	8004290 <_vfiprintf_r+0x44>
 80042a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042a2:	f7ff ffa9 	bl	80041f8 <__retarget_lock_release_recursive>
 80042a6:	e7f3      	b.n	8004290 <_vfiprintf_r+0x44>
 80042a8:	2300      	movs	r3, #0
 80042aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ac:	2320      	movs	r3, #32
 80042ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b6:	2330      	movs	r3, #48	@ 0x30
 80042b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004468 <_vfiprintf_r+0x21c>
 80042bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042c0:	f04f 0901 	mov.w	r9, #1
 80042c4:	4623      	mov	r3, r4
 80042c6:	469a      	mov	sl, r3
 80042c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042cc:	b10a      	cbz	r2, 80042d2 <_vfiprintf_r+0x86>
 80042ce:	2a25      	cmp	r2, #37	@ 0x25
 80042d0:	d1f9      	bne.n	80042c6 <_vfiprintf_r+0x7a>
 80042d2:	ebba 0b04 	subs.w	fp, sl, r4
 80042d6:	d00b      	beq.n	80042f0 <_vfiprintf_r+0xa4>
 80042d8:	465b      	mov	r3, fp
 80042da:	4622      	mov	r2, r4
 80042dc:	4629      	mov	r1, r5
 80042de:	4630      	mov	r0, r6
 80042e0:	f7ff ffa2 	bl	8004228 <__sfputs_r>
 80042e4:	3001      	adds	r0, #1
 80042e6:	f000 80a7 	beq.w	8004438 <_vfiprintf_r+0x1ec>
 80042ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ec:	445a      	add	r2, fp
 80042ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80042f0:	f89a 3000 	ldrb.w	r3, [sl]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 809f 	beq.w	8004438 <_vfiprintf_r+0x1ec>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004300:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004304:	f10a 0a01 	add.w	sl, sl, #1
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	9307      	str	r3, [sp, #28]
 800430c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004310:	931a      	str	r3, [sp, #104]	@ 0x68
 8004312:	4654      	mov	r4, sl
 8004314:	2205      	movs	r2, #5
 8004316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800431a:	4853      	ldr	r0, [pc, #332]	@ (8004468 <_vfiprintf_r+0x21c>)
 800431c:	f7fb ff78 	bl	8000210 <memchr>
 8004320:	9a04      	ldr	r2, [sp, #16]
 8004322:	b9d8      	cbnz	r0, 800435c <_vfiprintf_r+0x110>
 8004324:	06d1      	lsls	r1, r2, #27
 8004326:	bf44      	itt	mi
 8004328:	2320      	movmi	r3, #32
 800432a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800432e:	0713      	lsls	r3, r2, #28
 8004330:	bf44      	itt	mi
 8004332:	232b      	movmi	r3, #43	@ 0x2b
 8004334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004338:	f89a 3000 	ldrb.w	r3, [sl]
 800433c:	2b2a      	cmp	r3, #42	@ 0x2a
 800433e:	d015      	beq.n	800436c <_vfiprintf_r+0x120>
 8004340:	9a07      	ldr	r2, [sp, #28]
 8004342:	4654      	mov	r4, sl
 8004344:	2000      	movs	r0, #0
 8004346:	f04f 0c0a 	mov.w	ip, #10
 800434a:	4621      	mov	r1, r4
 800434c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004350:	3b30      	subs	r3, #48	@ 0x30
 8004352:	2b09      	cmp	r3, #9
 8004354:	d94b      	bls.n	80043ee <_vfiprintf_r+0x1a2>
 8004356:	b1b0      	cbz	r0, 8004386 <_vfiprintf_r+0x13a>
 8004358:	9207      	str	r2, [sp, #28]
 800435a:	e014      	b.n	8004386 <_vfiprintf_r+0x13a>
 800435c:	eba0 0308 	sub.w	r3, r0, r8
 8004360:	fa09 f303 	lsl.w	r3, r9, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	9304      	str	r3, [sp, #16]
 8004368:	46a2      	mov	sl, r4
 800436a:	e7d2      	b.n	8004312 <_vfiprintf_r+0xc6>
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	1d19      	adds	r1, r3, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	9103      	str	r1, [sp, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	bfbb      	ittet	lt
 8004378:	425b      	neglt	r3, r3
 800437a:	f042 0202 	orrlt.w	r2, r2, #2
 800437e:	9307      	strge	r3, [sp, #28]
 8004380:	9307      	strlt	r3, [sp, #28]
 8004382:	bfb8      	it	lt
 8004384:	9204      	strlt	r2, [sp, #16]
 8004386:	7823      	ldrb	r3, [r4, #0]
 8004388:	2b2e      	cmp	r3, #46	@ 0x2e
 800438a:	d10a      	bne.n	80043a2 <_vfiprintf_r+0x156>
 800438c:	7863      	ldrb	r3, [r4, #1]
 800438e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004390:	d132      	bne.n	80043f8 <_vfiprintf_r+0x1ac>
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9203      	str	r2, [sp, #12]
 800439a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800439e:	3402      	adds	r4, #2
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004478 <_vfiprintf_r+0x22c>
 80043a6:	7821      	ldrb	r1, [r4, #0]
 80043a8:	2203      	movs	r2, #3
 80043aa:	4650      	mov	r0, sl
 80043ac:	f7fb ff30 	bl	8000210 <memchr>
 80043b0:	b138      	cbz	r0, 80043c2 <_vfiprintf_r+0x176>
 80043b2:	9b04      	ldr	r3, [sp, #16]
 80043b4:	eba0 000a 	sub.w	r0, r0, sl
 80043b8:	2240      	movs	r2, #64	@ 0x40
 80043ba:	4082      	lsls	r2, r0
 80043bc:	4313      	orrs	r3, r2
 80043be:	3401      	adds	r4, #1
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c6:	4829      	ldr	r0, [pc, #164]	@ (800446c <_vfiprintf_r+0x220>)
 80043c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043cc:	2206      	movs	r2, #6
 80043ce:	f7fb ff1f 	bl	8000210 <memchr>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d03f      	beq.n	8004456 <_vfiprintf_r+0x20a>
 80043d6:	4b26      	ldr	r3, [pc, #152]	@ (8004470 <_vfiprintf_r+0x224>)
 80043d8:	bb1b      	cbnz	r3, 8004422 <_vfiprintf_r+0x1d6>
 80043da:	9b03      	ldr	r3, [sp, #12]
 80043dc:	3307      	adds	r3, #7
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	3308      	adds	r3, #8
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043e8:	443b      	add	r3, r7
 80043ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ec:	e76a      	b.n	80042c4 <_vfiprintf_r+0x78>
 80043ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f2:	460c      	mov	r4, r1
 80043f4:	2001      	movs	r0, #1
 80043f6:	e7a8      	b.n	800434a <_vfiprintf_r+0xfe>
 80043f8:	2300      	movs	r3, #0
 80043fa:	3401      	adds	r4, #1
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 0c0a 	mov.w	ip, #10
 8004404:	4620      	mov	r0, r4
 8004406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800440a:	3a30      	subs	r2, #48	@ 0x30
 800440c:	2a09      	cmp	r2, #9
 800440e:	d903      	bls.n	8004418 <_vfiprintf_r+0x1cc>
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0c6      	beq.n	80043a2 <_vfiprintf_r+0x156>
 8004414:	9105      	str	r1, [sp, #20]
 8004416:	e7c4      	b.n	80043a2 <_vfiprintf_r+0x156>
 8004418:	fb0c 2101 	mla	r1, ip, r1, r2
 800441c:	4604      	mov	r4, r0
 800441e:	2301      	movs	r3, #1
 8004420:	e7f0      	b.n	8004404 <_vfiprintf_r+0x1b8>
 8004422:	ab03      	add	r3, sp, #12
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	462a      	mov	r2, r5
 8004428:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <_vfiprintf_r+0x228>)
 800442a:	a904      	add	r1, sp, #16
 800442c:	4630      	mov	r0, r6
 800442e:	f3af 8000 	nop.w
 8004432:	4607      	mov	r7, r0
 8004434:	1c78      	adds	r0, r7, #1
 8004436:	d1d6      	bne.n	80043e6 <_vfiprintf_r+0x19a>
 8004438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800443a:	07d9      	lsls	r1, r3, #31
 800443c:	d405      	bmi.n	800444a <_vfiprintf_r+0x1fe>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	059a      	lsls	r2, r3, #22
 8004442:	d402      	bmi.n	800444a <_vfiprintf_r+0x1fe>
 8004444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004446:	f7ff fed7 	bl	80041f8 <__retarget_lock_release_recursive>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	065b      	lsls	r3, r3, #25
 800444e:	f53f af1f 	bmi.w	8004290 <_vfiprintf_r+0x44>
 8004452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004454:	e71e      	b.n	8004294 <_vfiprintf_r+0x48>
 8004456:	ab03      	add	r3, sp, #12
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	462a      	mov	r2, r5
 800445c:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <_vfiprintf_r+0x228>)
 800445e:	a904      	add	r1, sp, #16
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f91b 	bl	800469c <_printf_i>
 8004466:	e7e4      	b.n	8004432 <_vfiprintf_r+0x1e6>
 8004468:	08004e98 	.word	0x08004e98
 800446c:	08004ea2 	.word	0x08004ea2
 8004470:	00000000 	.word	0x00000000
 8004474:	08004229 	.word	0x08004229
 8004478:	08004e9e 	.word	0x08004e9e

0800447c <sbrk_aligned>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4e0f      	ldr	r6, [pc, #60]	@ (80044bc <sbrk_aligned+0x40>)
 8004480:	460c      	mov	r4, r1
 8004482:	6831      	ldr	r1, [r6, #0]
 8004484:	4605      	mov	r5, r0
 8004486:	b911      	cbnz	r1, 800448e <sbrk_aligned+0x12>
 8004488:	f000 fc70 	bl	8004d6c <_sbrk_r>
 800448c:	6030      	str	r0, [r6, #0]
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 fc6b 	bl	8004d6c <_sbrk_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d103      	bne.n	80044a2 <sbrk_aligned+0x26>
 800449a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800449e:	4620      	mov	r0, r4
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d0f8      	beq.n	800449e <sbrk_aligned+0x22>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 fc5c 	bl	8004d6c <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1f2      	bne.n	800449e <sbrk_aligned+0x22>
 80044b8:	e7ef      	b.n	800449a <sbrk_aligned+0x1e>
 80044ba:	bf00      	nop
 80044bc:	200008f8 	.word	0x200008f8

080044c0 <_malloc_r>:
 80044c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c4:	1ccd      	adds	r5, r1, #3
 80044c6:	f025 0503 	bic.w	r5, r5, #3
 80044ca:	3508      	adds	r5, #8
 80044cc:	2d0c      	cmp	r5, #12
 80044ce:	bf38      	it	cc
 80044d0:	250c      	movcc	r5, #12
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	4606      	mov	r6, r0
 80044d6:	db01      	blt.n	80044dc <_malloc_r+0x1c>
 80044d8:	42a9      	cmp	r1, r5
 80044da:	d904      	bls.n	80044e6 <_malloc_r+0x26>
 80044dc:	230c      	movs	r3, #12
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	2000      	movs	r0, #0
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045bc <_malloc_r+0xfc>
 80044ea:	f000 faa3 	bl	8004a34 <__malloc_lock>
 80044ee:	f8d8 3000 	ldr.w	r3, [r8]
 80044f2:	461c      	mov	r4, r3
 80044f4:	bb44      	cbnz	r4, 8004548 <_malloc_r+0x88>
 80044f6:	4629      	mov	r1, r5
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7ff ffbf 	bl	800447c <sbrk_aligned>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	4604      	mov	r4, r0
 8004502:	d158      	bne.n	80045b6 <_malloc_r+0xf6>
 8004504:	f8d8 4000 	ldr.w	r4, [r8]
 8004508:	4627      	mov	r7, r4
 800450a:	2f00      	cmp	r7, #0
 800450c:	d143      	bne.n	8004596 <_malloc_r+0xd6>
 800450e:	2c00      	cmp	r4, #0
 8004510:	d04b      	beq.n	80045aa <_malloc_r+0xea>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4639      	mov	r1, r7
 8004516:	4630      	mov	r0, r6
 8004518:	eb04 0903 	add.w	r9, r4, r3
 800451c:	f000 fc26 	bl	8004d6c <_sbrk_r>
 8004520:	4581      	cmp	r9, r0
 8004522:	d142      	bne.n	80045aa <_malloc_r+0xea>
 8004524:	6821      	ldr	r1, [r4, #0]
 8004526:	1a6d      	subs	r5, r5, r1
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffa6 	bl	800447c <sbrk_aligned>
 8004530:	3001      	adds	r0, #1
 8004532:	d03a      	beq.n	80045aa <_malloc_r+0xea>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	442b      	add	r3, r5
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	f8d8 3000 	ldr.w	r3, [r8]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	bb62      	cbnz	r2, 800459c <_malloc_r+0xdc>
 8004542:	f8c8 7000 	str.w	r7, [r8]
 8004546:	e00f      	b.n	8004568 <_malloc_r+0xa8>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	1b52      	subs	r2, r2, r5
 800454c:	d420      	bmi.n	8004590 <_malloc_r+0xd0>
 800454e:	2a0b      	cmp	r2, #11
 8004550:	d917      	bls.n	8004582 <_malloc_r+0xc2>
 8004552:	1961      	adds	r1, r4, r5
 8004554:	42a3      	cmp	r3, r4
 8004556:	6025      	str	r5, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	6059      	strne	r1, [r3, #4]
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	bf08      	it	eq
 8004560:	f8c8 1000 	streq.w	r1, [r8]
 8004564:	5162      	str	r2, [r4, r5]
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 fa69 	bl	8004a40 <__malloc_unlock>
 800456e:	f104 000b 	add.w	r0, r4, #11
 8004572:	1d23      	adds	r3, r4, #4
 8004574:	f020 0007 	bic.w	r0, r0, #7
 8004578:	1ac2      	subs	r2, r0, r3
 800457a:	bf1c      	itt	ne
 800457c:	1a1b      	subne	r3, r3, r0
 800457e:	50a3      	strne	r3, [r4, r2]
 8004580:	e7af      	b.n	80044e2 <_malloc_r+0x22>
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	42a3      	cmp	r3, r4
 8004586:	bf0c      	ite	eq
 8004588:	f8c8 2000 	streq.w	r2, [r8]
 800458c:	605a      	strne	r2, [r3, #4]
 800458e:	e7eb      	b.n	8004568 <_malloc_r+0xa8>
 8004590:	4623      	mov	r3, r4
 8004592:	6864      	ldr	r4, [r4, #4]
 8004594:	e7ae      	b.n	80044f4 <_malloc_r+0x34>
 8004596:	463c      	mov	r4, r7
 8004598:	687f      	ldr	r7, [r7, #4]
 800459a:	e7b6      	b.n	800450a <_malloc_r+0x4a>
 800459c:	461a      	mov	r2, r3
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d1fb      	bne.n	800459c <_malloc_r+0xdc>
 80045a4:	2300      	movs	r3, #0
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	e7de      	b.n	8004568 <_malloc_r+0xa8>
 80045aa:	230c      	movs	r3, #12
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 fa46 	bl	8004a40 <__malloc_unlock>
 80045b4:	e794      	b.n	80044e0 <_malloc_r+0x20>
 80045b6:	6005      	str	r5, [r0, #0]
 80045b8:	e7d6      	b.n	8004568 <_malloc_r+0xa8>
 80045ba:	bf00      	nop
 80045bc:	200008fc 	.word	0x200008fc

080045c0 <_printf_common>:
 80045c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c4:	4616      	mov	r6, r2
 80045c6:	4698      	mov	r8, r3
 80045c8:	688a      	ldr	r2, [r1, #8]
 80045ca:	690b      	ldr	r3, [r1, #16]
 80045cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bfb8      	it	lt
 80045d4:	4613      	movlt	r3, r2
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045dc:	4607      	mov	r7, r0
 80045de:	460c      	mov	r4, r1
 80045e0:	b10a      	cbz	r2, 80045e6 <_printf_common+0x26>
 80045e2:	3301      	adds	r3, #1
 80045e4:	6033      	str	r3, [r6, #0]
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	0699      	lsls	r1, r3, #26
 80045ea:	bf42      	ittt	mi
 80045ec:	6833      	ldrmi	r3, [r6, #0]
 80045ee:	3302      	addmi	r3, #2
 80045f0:	6033      	strmi	r3, [r6, #0]
 80045f2:	6825      	ldr	r5, [r4, #0]
 80045f4:	f015 0506 	ands.w	r5, r5, #6
 80045f8:	d106      	bne.n	8004608 <_printf_common+0x48>
 80045fa:	f104 0a19 	add.w	sl, r4, #25
 80045fe:	68e3      	ldr	r3, [r4, #12]
 8004600:	6832      	ldr	r2, [r6, #0]
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	42ab      	cmp	r3, r5
 8004606:	dc26      	bgt.n	8004656 <_printf_common+0x96>
 8004608:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	3b00      	subs	r3, #0
 8004610:	bf18      	it	ne
 8004612:	2301      	movne	r3, #1
 8004614:	0692      	lsls	r2, r2, #26
 8004616:	d42b      	bmi.n	8004670 <_printf_common+0xb0>
 8004618:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800461c:	4641      	mov	r1, r8
 800461e:	4638      	mov	r0, r7
 8004620:	47c8      	blx	r9
 8004622:	3001      	adds	r0, #1
 8004624:	d01e      	beq.n	8004664 <_printf_common+0xa4>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	6922      	ldr	r2, [r4, #16]
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf02      	ittt	eq
 8004632:	68e5      	ldreq	r5, [r4, #12]
 8004634:	6833      	ldreq	r3, [r6, #0]
 8004636:	1aed      	subeq	r5, r5, r3
 8004638:	68a3      	ldr	r3, [r4, #8]
 800463a:	bf0c      	ite	eq
 800463c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004640:	2500      	movne	r5, #0
 8004642:	4293      	cmp	r3, r2
 8004644:	bfc4      	itt	gt
 8004646:	1a9b      	subgt	r3, r3, r2
 8004648:	18ed      	addgt	r5, r5, r3
 800464a:	2600      	movs	r6, #0
 800464c:	341a      	adds	r4, #26
 800464e:	42b5      	cmp	r5, r6
 8004650:	d11a      	bne.n	8004688 <_printf_common+0xc8>
 8004652:	2000      	movs	r0, #0
 8004654:	e008      	b.n	8004668 <_printf_common+0xa8>
 8004656:	2301      	movs	r3, #1
 8004658:	4652      	mov	r2, sl
 800465a:	4641      	mov	r1, r8
 800465c:	4638      	mov	r0, r7
 800465e:	47c8      	blx	r9
 8004660:	3001      	adds	r0, #1
 8004662:	d103      	bne.n	800466c <_printf_common+0xac>
 8004664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466c:	3501      	adds	r5, #1
 800466e:	e7c6      	b.n	80045fe <_printf_common+0x3e>
 8004670:	18e1      	adds	r1, r4, r3
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	2030      	movs	r0, #48	@ 0x30
 8004676:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800467a:	4422      	add	r2, r4
 800467c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004680:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004684:	3302      	adds	r3, #2
 8004686:	e7c7      	b.n	8004618 <_printf_common+0x58>
 8004688:	2301      	movs	r3, #1
 800468a:	4622      	mov	r2, r4
 800468c:	4641      	mov	r1, r8
 800468e:	4638      	mov	r0, r7
 8004690:	47c8      	blx	r9
 8004692:	3001      	adds	r0, #1
 8004694:	d0e6      	beq.n	8004664 <_printf_common+0xa4>
 8004696:	3601      	adds	r6, #1
 8004698:	e7d9      	b.n	800464e <_printf_common+0x8e>
	...

0800469c <_printf_i>:
 800469c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046a0:	7e0f      	ldrb	r7, [r1, #24]
 80046a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046a4:	2f78      	cmp	r7, #120	@ 0x78
 80046a6:	4691      	mov	r9, r2
 80046a8:	4680      	mov	r8, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	469a      	mov	sl, r3
 80046ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046b2:	d807      	bhi.n	80046c4 <_printf_i+0x28>
 80046b4:	2f62      	cmp	r7, #98	@ 0x62
 80046b6:	d80a      	bhi.n	80046ce <_printf_i+0x32>
 80046b8:	2f00      	cmp	r7, #0
 80046ba:	f000 80d2 	beq.w	8004862 <_printf_i+0x1c6>
 80046be:	2f58      	cmp	r7, #88	@ 0x58
 80046c0:	f000 80b9 	beq.w	8004836 <_printf_i+0x19a>
 80046c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046cc:	e03a      	b.n	8004744 <_printf_i+0xa8>
 80046ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046d2:	2b15      	cmp	r3, #21
 80046d4:	d8f6      	bhi.n	80046c4 <_printf_i+0x28>
 80046d6:	a101      	add	r1, pc, #4	@ (adr r1, 80046dc <_printf_i+0x40>)
 80046d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046dc:	08004735 	.word	0x08004735
 80046e0:	08004749 	.word	0x08004749
 80046e4:	080046c5 	.word	0x080046c5
 80046e8:	080046c5 	.word	0x080046c5
 80046ec:	080046c5 	.word	0x080046c5
 80046f0:	080046c5 	.word	0x080046c5
 80046f4:	08004749 	.word	0x08004749
 80046f8:	080046c5 	.word	0x080046c5
 80046fc:	080046c5 	.word	0x080046c5
 8004700:	080046c5 	.word	0x080046c5
 8004704:	080046c5 	.word	0x080046c5
 8004708:	08004849 	.word	0x08004849
 800470c:	08004773 	.word	0x08004773
 8004710:	08004803 	.word	0x08004803
 8004714:	080046c5 	.word	0x080046c5
 8004718:	080046c5 	.word	0x080046c5
 800471c:	0800486b 	.word	0x0800486b
 8004720:	080046c5 	.word	0x080046c5
 8004724:	08004773 	.word	0x08004773
 8004728:	080046c5 	.word	0x080046c5
 800472c:	080046c5 	.word	0x080046c5
 8004730:	0800480b 	.word	0x0800480b
 8004734:	6833      	ldr	r3, [r6, #0]
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6032      	str	r2, [r6, #0]
 800473c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004740:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004744:	2301      	movs	r3, #1
 8004746:	e09d      	b.n	8004884 <_printf_i+0x1e8>
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	6820      	ldr	r0, [r4, #0]
 800474c:	1d19      	adds	r1, r3, #4
 800474e:	6031      	str	r1, [r6, #0]
 8004750:	0606      	lsls	r6, r0, #24
 8004752:	d501      	bpl.n	8004758 <_printf_i+0xbc>
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	e003      	b.n	8004760 <_printf_i+0xc4>
 8004758:	0645      	lsls	r5, r0, #25
 800475a:	d5fb      	bpl.n	8004754 <_printf_i+0xb8>
 800475c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004760:	2d00      	cmp	r5, #0
 8004762:	da03      	bge.n	800476c <_printf_i+0xd0>
 8004764:	232d      	movs	r3, #45	@ 0x2d
 8004766:	426d      	negs	r5, r5
 8004768:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476c:	4859      	ldr	r0, [pc, #356]	@ (80048d4 <_printf_i+0x238>)
 800476e:	230a      	movs	r3, #10
 8004770:	e011      	b.n	8004796 <_printf_i+0xfa>
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	6833      	ldr	r3, [r6, #0]
 8004776:	0608      	lsls	r0, r1, #24
 8004778:	f853 5b04 	ldr.w	r5, [r3], #4
 800477c:	d402      	bmi.n	8004784 <_printf_i+0xe8>
 800477e:	0649      	lsls	r1, r1, #25
 8004780:	bf48      	it	mi
 8004782:	b2ad      	uxthmi	r5, r5
 8004784:	2f6f      	cmp	r7, #111	@ 0x6f
 8004786:	4853      	ldr	r0, [pc, #332]	@ (80048d4 <_printf_i+0x238>)
 8004788:	6033      	str	r3, [r6, #0]
 800478a:	bf14      	ite	ne
 800478c:	230a      	movne	r3, #10
 800478e:	2308      	moveq	r3, #8
 8004790:	2100      	movs	r1, #0
 8004792:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004796:	6866      	ldr	r6, [r4, #4]
 8004798:	60a6      	str	r6, [r4, #8]
 800479a:	2e00      	cmp	r6, #0
 800479c:	bfa2      	ittt	ge
 800479e:	6821      	ldrge	r1, [r4, #0]
 80047a0:	f021 0104 	bicge.w	r1, r1, #4
 80047a4:	6021      	strge	r1, [r4, #0]
 80047a6:	b90d      	cbnz	r5, 80047ac <_printf_i+0x110>
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	d04b      	beq.n	8004844 <_printf_i+0x1a8>
 80047ac:	4616      	mov	r6, r2
 80047ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b2:	fb03 5711 	mls	r7, r3, r1, r5
 80047b6:	5dc7      	ldrb	r7, [r0, r7]
 80047b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047bc:	462f      	mov	r7, r5
 80047be:	42bb      	cmp	r3, r7
 80047c0:	460d      	mov	r5, r1
 80047c2:	d9f4      	bls.n	80047ae <_printf_i+0x112>
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d10b      	bne.n	80047e0 <_printf_i+0x144>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	07df      	lsls	r7, r3, #31
 80047cc:	d508      	bpl.n	80047e0 <_printf_i+0x144>
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4299      	cmp	r1, r3
 80047d4:	bfde      	ittt	le
 80047d6:	2330      	movle	r3, #48	@ 0x30
 80047d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047e0:	1b92      	subs	r2, r2, r6
 80047e2:	6122      	str	r2, [r4, #16]
 80047e4:	f8cd a000 	str.w	sl, [sp]
 80047e8:	464b      	mov	r3, r9
 80047ea:	aa03      	add	r2, sp, #12
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f7ff fee6 	bl	80045c0 <_printf_common>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d14a      	bne.n	800488e <_printf_i+0x1f2>
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047fc:	b004      	add	sp, #16
 80047fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	f043 0320 	orr.w	r3, r3, #32
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	4833      	ldr	r0, [pc, #204]	@ (80048d8 <_printf_i+0x23c>)
 800480c:	2778      	movs	r7, #120	@ 0x78
 800480e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004812:	6823      	ldr	r3, [r4, #0]
 8004814:	6831      	ldr	r1, [r6, #0]
 8004816:	061f      	lsls	r7, r3, #24
 8004818:	f851 5b04 	ldr.w	r5, [r1], #4
 800481c:	d402      	bmi.n	8004824 <_printf_i+0x188>
 800481e:	065f      	lsls	r7, r3, #25
 8004820:	bf48      	it	mi
 8004822:	b2ad      	uxthmi	r5, r5
 8004824:	6031      	str	r1, [r6, #0]
 8004826:	07d9      	lsls	r1, r3, #31
 8004828:	bf44      	itt	mi
 800482a:	f043 0320 	orrmi.w	r3, r3, #32
 800482e:	6023      	strmi	r3, [r4, #0]
 8004830:	b11d      	cbz	r5, 800483a <_printf_i+0x19e>
 8004832:	2310      	movs	r3, #16
 8004834:	e7ac      	b.n	8004790 <_printf_i+0xf4>
 8004836:	4827      	ldr	r0, [pc, #156]	@ (80048d4 <_printf_i+0x238>)
 8004838:	e7e9      	b.n	800480e <_printf_i+0x172>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f023 0320 	bic.w	r3, r3, #32
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	e7f6      	b.n	8004832 <_printf_i+0x196>
 8004844:	4616      	mov	r6, r2
 8004846:	e7bd      	b.n	80047c4 <_printf_i+0x128>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	6825      	ldr	r5, [r4, #0]
 800484c:	6961      	ldr	r1, [r4, #20]
 800484e:	1d18      	adds	r0, r3, #4
 8004850:	6030      	str	r0, [r6, #0]
 8004852:	062e      	lsls	r6, r5, #24
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	d501      	bpl.n	800485c <_printf_i+0x1c0>
 8004858:	6019      	str	r1, [r3, #0]
 800485a:	e002      	b.n	8004862 <_printf_i+0x1c6>
 800485c:	0668      	lsls	r0, r5, #25
 800485e:	d5fb      	bpl.n	8004858 <_printf_i+0x1bc>
 8004860:	8019      	strh	r1, [r3, #0]
 8004862:	2300      	movs	r3, #0
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	4616      	mov	r6, r2
 8004868:	e7bc      	b.n	80047e4 <_printf_i+0x148>
 800486a:	6833      	ldr	r3, [r6, #0]
 800486c:	1d1a      	adds	r2, r3, #4
 800486e:	6032      	str	r2, [r6, #0]
 8004870:	681e      	ldr	r6, [r3, #0]
 8004872:	6862      	ldr	r2, [r4, #4]
 8004874:	2100      	movs	r1, #0
 8004876:	4630      	mov	r0, r6
 8004878:	f7fb fcca 	bl	8000210 <memchr>
 800487c:	b108      	cbz	r0, 8004882 <_printf_i+0x1e6>
 800487e:	1b80      	subs	r0, r0, r6
 8004880:	6060      	str	r0, [r4, #4]
 8004882:	6863      	ldr	r3, [r4, #4]
 8004884:	6123      	str	r3, [r4, #16]
 8004886:	2300      	movs	r3, #0
 8004888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800488c:	e7aa      	b.n	80047e4 <_printf_i+0x148>
 800488e:	6923      	ldr	r3, [r4, #16]
 8004890:	4632      	mov	r2, r6
 8004892:	4649      	mov	r1, r9
 8004894:	4640      	mov	r0, r8
 8004896:	47d0      	blx	sl
 8004898:	3001      	adds	r0, #1
 800489a:	d0ad      	beq.n	80047f8 <_printf_i+0x15c>
 800489c:	6823      	ldr	r3, [r4, #0]
 800489e:	079b      	lsls	r3, r3, #30
 80048a0:	d413      	bmi.n	80048ca <_printf_i+0x22e>
 80048a2:	68e0      	ldr	r0, [r4, #12]
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	4298      	cmp	r0, r3
 80048a8:	bfb8      	it	lt
 80048aa:	4618      	movlt	r0, r3
 80048ac:	e7a6      	b.n	80047fc <_printf_i+0x160>
 80048ae:	2301      	movs	r3, #1
 80048b0:	4632      	mov	r2, r6
 80048b2:	4649      	mov	r1, r9
 80048b4:	4640      	mov	r0, r8
 80048b6:	47d0      	blx	sl
 80048b8:	3001      	adds	r0, #1
 80048ba:	d09d      	beq.n	80047f8 <_printf_i+0x15c>
 80048bc:	3501      	adds	r5, #1
 80048be:	68e3      	ldr	r3, [r4, #12]
 80048c0:	9903      	ldr	r1, [sp, #12]
 80048c2:	1a5b      	subs	r3, r3, r1
 80048c4:	42ab      	cmp	r3, r5
 80048c6:	dcf2      	bgt.n	80048ae <_printf_i+0x212>
 80048c8:	e7eb      	b.n	80048a2 <_printf_i+0x206>
 80048ca:	2500      	movs	r5, #0
 80048cc:	f104 0619 	add.w	r6, r4, #25
 80048d0:	e7f5      	b.n	80048be <_printf_i+0x222>
 80048d2:	bf00      	nop
 80048d4:	08004ea9 	.word	0x08004ea9
 80048d8:	08004eba 	.word	0x08004eba

080048dc <__sflush_r>:
 80048dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	0716      	lsls	r6, r2, #28
 80048e6:	4605      	mov	r5, r0
 80048e8:	460c      	mov	r4, r1
 80048ea:	d454      	bmi.n	8004996 <__sflush_r+0xba>
 80048ec:	684b      	ldr	r3, [r1, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	dc02      	bgt.n	80048f8 <__sflush_r+0x1c>
 80048f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dd48      	ble.n	800498a <__sflush_r+0xae>
 80048f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	d045      	beq.n	800498a <__sflush_r+0xae>
 80048fe:	2300      	movs	r3, #0
 8004900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004904:	682f      	ldr	r7, [r5, #0]
 8004906:	6a21      	ldr	r1, [r4, #32]
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	d030      	beq.n	800496e <__sflush_r+0x92>
 800490c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	0759      	lsls	r1, r3, #29
 8004912:	d505      	bpl.n	8004920 <__sflush_r+0x44>
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800491a:	b10b      	cbz	r3, 8004920 <__sflush_r+0x44>
 800491c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004924:	6a21      	ldr	r1, [r4, #32]
 8004926:	4628      	mov	r0, r5
 8004928:	47b0      	blx	r6
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	89a3      	ldrh	r3, [r4, #12]
 800492e:	d106      	bne.n	800493e <__sflush_r+0x62>
 8004930:	6829      	ldr	r1, [r5, #0]
 8004932:	291d      	cmp	r1, #29
 8004934:	d82b      	bhi.n	800498e <__sflush_r+0xb2>
 8004936:	4a2a      	ldr	r2, [pc, #168]	@ (80049e0 <__sflush_r+0x104>)
 8004938:	410a      	asrs	r2, r1
 800493a:	07d6      	lsls	r6, r2, #31
 800493c:	d427      	bmi.n	800498e <__sflush_r+0xb2>
 800493e:	2200      	movs	r2, #0
 8004940:	6062      	str	r2, [r4, #4]
 8004942:	04d9      	lsls	r1, r3, #19
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	6022      	str	r2, [r4, #0]
 8004948:	d504      	bpl.n	8004954 <__sflush_r+0x78>
 800494a:	1c42      	adds	r2, r0, #1
 800494c:	d101      	bne.n	8004952 <__sflush_r+0x76>
 800494e:	682b      	ldr	r3, [r5, #0]
 8004950:	b903      	cbnz	r3, 8004954 <__sflush_r+0x78>
 8004952:	6560      	str	r0, [r4, #84]	@ 0x54
 8004954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004956:	602f      	str	r7, [r5, #0]
 8004958:	b1b9      	cbz	r1, 800498a <__sflush_r+0xae>
 800495a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800495e:	4299      	cmp	r1, r3
 8004960:	d002      	beq.n	8004968 <__sflush_r+0x8c>
 8004962:	4628      	mov	r0, r5
 8004964:	f000 fa24 	bl	8004db0 <_free_r>
 8004968:	2300      	movs	r3, #0
 800496a:	6363      	str	r3, [r4, #52]	@ 0x34
 800496c:	e00d      	b.n	800498a <__sflush_r+0xae>
 800496e:	2301      	movs	r3, #1
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	4602      	mov	r2, r0
 8004976:	1c50      	adds	r0, r2, #1
 8004978:	d1c9      	bne.n	800490e <__sflush_r+0x32>
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0c6      	beq.n	800490e <__sflush_r+0x32>
 8004980:	2b1d      	cmp	r3, #29
 8004982:	d001      	beq.n	8004988 <__sflush_r+0xac>
 8004984:	2b16      	cmp	r3, #22
 8004986:	d11e      	bne.n	80049c6 <__sflush_r+0xea>
 8004988:	602f      	str	r7, [r5, #0]
 800498a:	2000      	movs	r0, #0
 800498c:	e022      	b.n	80049d4 <__sflush_r+0xf8>
 800498e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004992:	b21b      	sxth	r3, r3
 8004994:	e01b      	b.n	80049ce <__sflush_r+0xf2>
 8004996:	690f      	ldr	r7, [r1, #16]
 8004998:	2f00      	cmp	r7, #0
 800499a:	d0f6      	beq.n	800498a <__sflush_r+0xae>
 800499c:	0793      	lsls	r3, r2, #30
 800499e:	680e      	ldr	r6, [r1, #0]
 80049a0:	bf08      	it	eq
 80049a2:	694b      	ldreq	r3, [r1, #20]
 80049a4:	600f      	str	r7, [r1, #0]
 80049a6:	bf18      	it	ne
 80049a8:	2300      	movne	r3, #0
 80049aa:	eba6 0807 	sub.w	r8, r6, r7
 80049ae:	608b      	str	r3, [r1, #8]
 80049b0:	f1b8 0f00 	cmp.w	r8, #0
 80049b4:	dde9      	ble.n	800498a <__sflush_r+0xae>
 80049b6:	6a21      	ldr	r1, [r4, #32]
 80049b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80049ba:	4643      	mov	r3, r8
 80049bc:	463a      	mov	r2, r7
 80049be:	4628      	mov	r0, r5
 80049c0:	47b0      	blx	r6
 80049c2:	2800      	cmp	r0, #0
 80049c4:	dc08      	bgt.n	80049d8 <__sflush_r+0xfc>
 80049c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d8:	4407      	add	r7, r0
 80049da:	eba8 0800 	sub.w	r8, r8, r0
 80049de:	e7e7      	b.n	80049b0 <__sflush_r+0xd4>
 80049e0:	dfbffffe 	.word	0xdfbffffe

080049e4 <_fflush_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	690b      	ldr	r3, [r1, #16]
 80049e8:	4605      	mov	r5, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	b913      	cbnz	r3, 80049f4 <_fflush_r+0x10>
 80049ee:	2500      	movs	r5, #0
 80049f0:	4628      	mov	r0, r5
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	b118      	cbz	r0, 80049fe <_fflush_r+0x1a>
 80049f6:	6a03      	ldr	r3, [r0, #32]
 80049f8:	b90b      	cbnz	r3, 80049fe <_fflush_r+0x1a>
 80049fa:	f7ff fb81 	bl	8004100 <__sinit>
 80049fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f3      	beq.n	80049ee <_fflush_r+0xa>
 8004a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a08:	07d0      	lsls	r0, r2, #31
 8004a0a:	d404      	bmi.n	8004a16 <_fflush_r+0x32>
 8004a0c:	0599      	lsls	r1, r3, #22
 8004a0e:	d402      	bmi.n	8004a16 <_fflush_r+0x32>
 8004a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a12:	f7ff fbf0 	bl	80041f6 <__retarget_lock_acquire_recursive>
 8004a16:	4628      	mov	r0, r5
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f7ff ff5f 	bl	80048dc <__sflush_r>
 8004a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a20:	07da      	lsls	r2, r3, #31
 8004a22:	4605      	mov	r5, r0
 8004a24:	d4e4      	bmi.n	80049f0 <_fflush_r+0xc>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	059b      	lsls	r3, r3, #22
 8004a2a:	d4e1      	bmi.n	80049f0 <_fflush_r+0xc>
 8004a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a2e:	f7ff fbe3 	bl	80041f8 <__retarget_lock_release_recursive>
 8004a32:	e7dd      	b.n	80049f0 <_fflush_r+0xc>

08004a34 <__malloc_lock>:
 8004a34:	4801      	ldr	r0, [pc, #4]	@ (8004a3c <__malloc_lock+0x8>)
 8004a36:	f7ff bbde 	b.w	80041f6 <__retarget_lock_acquire_recursive>
 8004a3a:	bf00      	nop
 8004a3c:	200008f4 	.word	0x200008f4

08004a40 <__malloc_unlock>:
 8004a40:	4801      	ldr	r0, [pc, #4]	@ (8004a48 <__malloc_unlock+0x8>)
 8004a42:	f7ff bbd9 	b.w	80041f8 <__retarget_lock_release_recursive>
 8004a46:	bf00      	nop
 8004a48:	200008f4 	.word	0x200008f4

08004a4c <__sread>:
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a54:	f000 f978 	bl	8004d48 <_read_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	bfab      	itete	ge
 8004a5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a60:	181b      	addge	r3, r3, r0
 8004a62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a66:	bfac      	ite	ge
 8004a68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a6a:	81a3      	strhlt	r3, [r4, #12]
 8004a6c:	bd10      	pop	{r4, pc}

08004a6e <__swrite>:
 8004a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a72:	461f      	mov	r7, r3
 8004a74:	898b      	ldrh	r3, [r1, #12]
 8004a76:	05db      	lsls	r3, r3, #23
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4616      	mov	r6, r2
 8004a7e:	d505      	bpl.n	8004a8c <__swrite+0x1e>
 8004a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a84:	2302      	movs	r3, #2
 8004a86:	2200      	movs	r2, #0
 8004a88:	f000 f94c 	bl	8004d24 <_lseek_r>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	4632      	mov	r2, r6
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa2:	f000 b973 	b.w	8004d8c <_write_r>

08004aa6 <__sseek>:
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aae:	f000 f939 	bl	8004d24 <_lseek_r>
 8004ab2:	1c43      	adds	r3, r0, #1
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	bf15      	itete	ne
 8004ab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004aba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004abe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ac2:	81a3      	strheq	r3, [r4, #12]
 8004ac4:	bf18      	it	ne
 8004ac6:	81a3      	strhne	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__sclose>:
 8004aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ace:	f000 b8f7 	b.w	8004cc0 <_close_r>

08004ad2 <__swbuf_r>:
 8004ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad4:	460e      	mov	r6, r1
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	4605      	mov	r5, r0
 8004ada:	b118      	cbz	r0, 8004ae4 <__swbuf_r+0x12>
 8004adc:	6a03      	ldr	r3, [r0, #32]
 8004ade:	b90b      	cbnz	r3, 8004ae4 <__swbuf_r+0x12>
 8004ae0:	f7ff fb0e 	bl	8004100 <__sinit>
 8004ae4:	69a3      	ldr	r3, [r4, #24]
 8004ae6:	60a3      	str	r3, [r4, #8]
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	071a      	lsls	r2, r3, #28
 8004aec:	d501      	bpl.n	8004af2 <__swbuf_r+0x20>
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	b943      	cbnz	r3, 8004b04 <__swbuf_r+0x32>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f82b 	bl	8004b50 <__swsetup_r>
 8004afa:	b118      	cbz	r0, 8004b04 <__swbuf_r+0x32>
 8004afc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b00:	4638      	mov	r0, r7
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	6922      	ldr	r2, [r4, #16]
 8004b08:	1a98      	subs	r0, r3, r2
 8004b0a:	6963      	ldr	r3, [r4, #20]
 8004b0c:	b2f6      	uxtb	r6, r6
 8004b0e:	4283      	cmp	r3, r0
 8004b10:	4637      	mov	r7, r6
 8004b12:	dc05      	bgt.n	8004b20 <__swbuf_r+0x4e>
 8004b14:	4621      	mov	r1, r4
 8004b16:	4628      	mov	r0, r5
 8004b18:	f7ff ff64 	bl	80049e4 <_fflush_r>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d1ed      	bne.n	8004afc <__swbuf_r+0x2a>
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	60a3      	str	r3, [r4, #8]
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	6022      	str	r2, [r4, #0]
 8004b2c:	701e      	strb	r6, [r3, #0]
 8004b2e:	6962      	ldr	r2, [r4, #20]
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d004      	beq.n	8004b40 <__swbuf_r+0x6e>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	07db      	lsls	r3, r3, #31
 8004b3a:	d5e1      	bpl.n	8004b00 <__swbuf_r+0x2e>
 8004b3c:	2e0a      	cmp	r6, #10
 8004b3e:	d1df      	bne.n	8004b00 <__swbuf_r+0x2e>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7ff ff4e 	bl	80049e4 <_fflush_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0d9      	beq.n	8004b00 <__swbuf_r+0x2e>
 8004b4c:	e7d6      	b.n	8004afc <__swbuf_r+0x2a>
	...

08004b50 <__swsetup_r>:
 8004b50:	b538      	push	{r3, r4, r5, lr}
 8004b52:	4b29      	ldr	r3, [pc, #164]	@ (8004bf8 <__swsetup_r+0xa8>)
 8004b54:	4605      	mov	r5, r0
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	460c      	mov	r4, r1
 8004b5a:	b118      	cbz	r0, 8004b64 <__swsetup_r+0x14>
 8004b5c:	6a03      	ldr	r3, [r0, #32]
 8004b5e:	b90b      	cbnz	r3, 8004b64 <__swsetup_r+0x14>
 8004b60:	f7ff face 	bl	8004100 <__sinit>
 8004b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b68:	0719      	lsls	r1, r3, #28
 8004b6a:	d422      	bmi.n	8004bb2 <__swsetup_r+0x62>
 8004b6c:	06da      	lsls	r2, r3, #27
 8004b6e:	d407      	bmi.n	8004b80 <__swsetup_r+0x30>
 8004b70:	2209      	movs	r2, #9
 8004b72:	602a      	str	r2, [r5, #0]
 8004b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b7e:	e033      	b.n	8004be8 <__swsetup_r+0x98>
 8004b80:	0758      	lsls	r0, r3, #29
 8004b82:	d512      	bpl.n	8004baa <__swsetup_r+0x5a>
 8004b84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b86:	b141      	cbz	r1, 8004b9a <__swsetup_r+0x4a>
 8004b88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b8c:	4299      	cmp	r1, r3
 8004b8e:	d002      	beq.n	8004b96 <__swsetup_r+0x46>
 8004b90:	4628      	mov	r0, r5
 8004b92:	f000 f90d 	bl	8004db0 <_free_r>
 8004b96:	2300      	movs	r3, #0
 8004b98:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	f043 0308 	orr.w	r3, r3, #8
 8004bb0:	81a3      	strh	r3, [r4, #12]
 8004bb2:	6923      	ldr	r3, [r4, #16]
 8004bb4:	b94b      	cbnz	r3, 8004bca <__swsetup_r+0x7a>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc0:	d003      	beq.n	8004bca <__swsetup_r+0x7a>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f83f 	bl	8004c48 <__smakebuf_r>
 8004bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bce:	f013 0201 	ands.w	r2, r3, #1
 8004bd2:	d00a      	beq.n	8004bea <__swsetup_r+0x9a>
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	60a2      	str	r2, [r4, #8]
 8004bd8:	6962      	ldr	r2, [r4, #20]
 8004bda:	4252      	negs	r2, r2
 8004bdc:	61a2      	str	r2, [r4, #24]
 8004bde:	6922      	ldr	r2, [r4, #16]
 8004be0:	b942      	cbnz	r2, 8004bf4 <__swsetup_r+0xa4>
 8004be2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004be6:	d1c5      	bne.n	8004b74 <__swsetup_r+0x24>
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	0799      	lsls	r1, r3, #30
 8004bec:	bf58      	it	pl
 8004bee:	6962      	ldrpl	r2, [r4, #20]
 8004bf0:	60a2      	str	r2, [r4, #8]
 8004bf2:	e7f4      	b.n	8004bde <__swsetup_r+0x8e>
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	e7f7      	b.n	8004be8 <__swsetup_r+0x98>
 8004bf8:	20000018 	.word	0x20000018

08004bfc <__swhatbuf_r>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	460c      	mov	r4, r1
 8004c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	b096      	sub	sp, #88	@ 0x58
 8004c08:	4615      	mov	r5, r2
 8004c0a:	461e      	mov	r6, r3
 8004c0c:	da0d      	bge.n	8004c2a <__swhatbuf_r+0x2e>
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2340      	movne	r3, #64	@ 0x40
 8004c1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c20:	2000      	movs	r0, #0
 8004c22:	6031      	str	r1, [r6, #0]
 8004c24:	602b      	str	r3, [r5, #0]
 8004c26:	b016      	add	sp, #88	@ 0x58
 8004c28:	bd70      	pop	{r4, r5, r6, pc}
 8004c2a:	466a      	mov	r2, sp
 8004c2c:	f000 f858 	bl	8004ce0 <_fstat_r>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	dbec      	blt.n	8004c0e <__swhatbuf_r+0x12>
 8004c34:	9901      	ldr	r1, [sp, #4]
 8004c36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c3e:	4259      	negs	r1, r3
 8004c40:	4159      	adcs	r1, r3
 8004c42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c46:	e7eb      	b.n	8004c20 <__swhatbuf_r+0x24>

08004c48 <__smakebuf_r>:
 8004c48:	898b      	ldrh	r3, [r1, #12]
 8004c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4c:	079d      	lsls	r5, r3, #30
 8004c4e:	4606      	mov	r6, r0
 8004c50:	460c      	mov	r4, r1
 8004c52:	d507      	bpl.n	8004c64 <__smakebuf_r+0x1c>
 8004c54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	6163      	str	r3, [r4, #20]
 8004c60:	b003      	add	sp, #12
 8004c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c64:	ab01      	add	r3, sp, #4
 8004c66:	466a      	mov	r2, sp
 8004c68:	f7ff ffc8 	bl	8004bfc <__swhatbuf_r>
 8004c6c:	9f00      	ldr	r7, [sp, #0]
 8004c6e:	4605      	mov	r5, r0
 8004c70:	4639      	mov	r1, r7
 8004c72:	4630      	mov	r0, r6
 8004c74:	f7ff fc24 	bl	80044c0 <_malloc_r>
 8004c78:	b948      	cbnz	r0, 8004c8e <__smakebuf_r+0x46>
 8004c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c7e:	059a      	lsls	r2, r3, #22
 8004c80:	d4ee      	bmi.n	8004c60 <__smakebuf_r+0x18>
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	f043 0302 	orr.w	r3, r3, #2
 8004c8a:	81a3      	strh	r3, [r4, #12]
 8004c8c:	e7e2      	b.n	8004c54 <__smakebuf_r+0xc>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	9b01      	ldr	r3, [sp, #4]
 8004c9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c9e:	b15b      	cbz	r3, 8004cb8 <__smakebuf_r+0x70>
 8004ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f000 f82d 	bl	8004d04 <_isatty_r>
 8004caa:	b128      	cbz	r0, 8004cb8 <__smakebuf_r+0x70>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	431d      	orrs	r5, r3
 8004cbc:	81a5      	strh	r5, [r4, #12]
 8004cbe:	e7cf      	b.n	8004c60 <__smakebuf_r+0x18>

08004cc0 <_close_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d06      	ldr	r5, [pc, #24]	@ (8004cdc <_close_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc f888 	bl	8000de0 <_close>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_close_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_close_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20000900 	.word	0x20000900

08004ce0 <_fstat_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	@ (8004d00 <_fstat_r+0x20>)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	f7fc f883 	bl	8000df8 <_fstat>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	d102      	bne.n	8004cfc <_fstat_r+0x1c>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	b103      	cbz	r3, 8004cfc <_fstat_r+0x1c>
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	bd38      	pop	{r3, r4, r5, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000900 	.word	0x20000900

08004d04 <_isatty_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	4d06      	ldr	r5, [pc, #24]	@ (8004d20 <_isatty_r+0x1c>)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	f7fc f882 	bl	8000e18 <_isatty>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_isatty_r+0x1a>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_isatty_r+0x1a>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000900 	.word	0x20000900

08004d24 <_lseek_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	4d07      	ldr	r5, [pc, #28]	@ (8004d44 <_lseek_r+0x20>)
 8004d28:	4604      	mov	r4, r0
 8004d2a:	4608      	mov	r0, r1
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	602a      	str	r2, [r5, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	f7fc f87b 	bl	8000e2e <_lseek>
 8004d38:	1c43      	adds	r3, r0, #1
 8004d3a:	d102      	bne.n	8004d42 <_lseek_r+0x1e>
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	b103      	cbz	r3, 8004d42 <_lseek_r+0x1e>
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	bd38      	pop	{r3, r4, r5, pc}
 8004d44:	20000900 	.word	0x20000900

08004d48 <_read_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	4d07      	ldr	r5, [pc, #28]	@ (8004d68 <_read_r+0x20>)
 8004d4c:	4604      	mov	r4, r0
 8004d4e:	4608      	mov	r0, r1
 8004d50:	4611      	mov	r1, r2
 8004d52:	2200      	movs	r2, #0
 8004d54:	602a      	str	r2, [r5, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	f7fc f809 	bl	8000d6e <_read>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_read_r+0x1e>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_read_r+0x1e>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	20000900 	.word	0x20000900

08004d6c <_sbrk_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d06      	ldr	r5, [pc, #24]	@ (8004d88 <_sbrk_r+0x1c>)
 8004d70:	2300      	movs	r3, #0
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	602b      	str	r3, [r5, #0]
 8004d78:	f7fc f866 	bl	8000e48 <_sbrk>
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d102      	bne.n	8004d86 <_sbrk_r+0x1a>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	b103      	cbz	r3, 8004d86 <_sbrk_r+0x1a>
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	20000900 	.word	0x20000900

08004d8c <_write_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4d07      	ldr	r5, [pc, #28]	@ (8004dac <_write_r+0x20>)
 8004d90:	4604      	mov	r4, r0
 8004d92:	4608      	mov	r0, r1
 8004d94:	4611      	mov	r1, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	602a      	str	r2, [r5, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f7fc f804 	bl	8000da8 <_write>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	d102      	bne.n	8004daa <_write_r+0x1e>
 8004da4:	682b      	ldr	r3, [r5, #0]
 8004da6:	b103      	cbz	r3, 8004daa <_write_r+0x1e>
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000900 	.word	0x20000900

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d041      	beq.n	8004e3c <_free_r+0x8c>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f7ff fe36 	bl	8004a34 <__malloc_lock>
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e40 <_free_r+0x90>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x2c>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd8:	f7ff be32 	b.w	8004a40 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x42>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x1e>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x4c>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x42>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1850      	adds	r0, r2, r1
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x6c>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	1850      	adds	r0, r2, r1
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x22>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	6053      	str	r3, [r2, #4]
 8004e16:	4408      	add	r0, r1
 8004e18:	6010      	str	r0, [r2, #0]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x22>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x74>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x22>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	1821      	adds	r1, r4, r0
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf04      	itt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	6063      	str	r3, [r4, #4]
 8004e32:	bf04      	itt	eq
 8004e34:	1809      	addeq	r1, r1, r0
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	6054      	str	r4, [r2, #4]
 8004e3a:	e7ca      	b.n	8004dd2 <_free_r+0x22>
 8004e3c:	bd38      	pop	{r3, r4, r5, pc}
 8004e3e:	bf00      	nop
 8004e40:	200008fc 	.word	0x200008fc

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
