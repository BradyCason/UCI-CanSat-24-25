
Nucleo_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b420  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800b5f0  0800b5f0  0000c5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbe0  0800bbe0  0000d284  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbe0  0800bbe0  0000cbe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe8  0800bbe8  0000d284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe8  0800bbe8  0000cbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbec  0800bbec  0000cbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  0800bbf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  20000284  0800be74  0000d284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fb4  0800be74  0000dfb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffef  00000000  00000000  0000d2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002382  00000000  00000000  0001d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0c  00000000  00000000  00020450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c38  00000000  00000000  00020f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012088  00000000  00000000  00041b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c220a  00000000  00000000  00053c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00115e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000530c  00000000  00000000  00115e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0011b178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5d8 	.word	0x0800b5d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0800b5d8 	.word	0x0800b5d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <set_gps>:
int telemetry_status = 0;
bool sim_enabled = false;
char rx_data[255];
HAL_StatusTypeDef uart_received;

uint8_t set_gps(char* buf, uint8_t order){
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <set_gps+0x18>
		return 0;
 8001038:	2300      	movs	r3, #0
 800103a:	e0c8      	b.n	80011ce <set_gps+0x1aa>

	switch(order) {
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	2b09      	cmp	r3, #9
 8001040:	f200 80bd 	bhi.w	80011be <set_gps+0x19a>
 8001044:	a201      	add	r2, pc, #4	@ (adr r2, 800104c <set_gps+0x28>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001075 	.word	0x08001075
 8001050:	080010ad 	.word	0x080010ad
 8001054:	08001101 	.word	0x08001101
 8001058:	08001129 	.word	0x08001129
 800105c:	0800114b 	.word	0x0800114b
 8001060:	08001173 	.word	0x08001173
 8001064:	080011bf 	.word	0x080011bf
 8001068:	08001195 	.word	0x08001195
 800106c:	080011bf 	.word	0x080011bf
 8001070:	080011a5 	.word	0x080011a5
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff f91b 	bl	80002b0 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	2b04      	cmp	r3, #4
 800107e:	d913      	bls.n	80010a8 <set_gps+0x84>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b47      	cmp	r3, #71	@ 0x47
 8001086:	d10f      	bne.n	80010a8 <set_gps+0x84>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3302      	adds	r3, #2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b47      	cmp	r3, #71	@ 0x47
 8001090:	d10a      	bne.n	80010a8 <set_gps+0x84>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3303      	adds	r3, #3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b47      	cmp	r3, #71	@ 0x47
 800109a:	d105      	bne.n	80010a8 <set_gps+0x84>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3304      	adds	r3, #4
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b41      	cmp	r3, #65	@ 0x41
 80010a4:	f000 808d 	beq.w	80011c2 <set_gps+0x19e>
			return 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e090      	b.n	80011ce <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f005 fd4f 	bl	8006b5c <atoi>
 80010be:	4603      	mov	r3, r0
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b45      	ldr	r3, [pc, #276]	@ (80011d8 <set_gps+0x1b4>)
 80010c4:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3302      	adds	r3, #2
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	4618      	mov	r0, r3
 80010d6:	f005 fd41 	bl	8006b5c <atoi>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <set_gps+0x1b8>)
 80010e0:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3304      	adds	r3, #4
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fd33 	bl	8006b5c <atoi>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <set_gps+0x1bc>)
 80010fc:	701a      	strb	r2, [r3, #0]

		break;
 80010fe:	e065      	b.n	80011cc <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f005 fd28 	bl	8006b56 <atof>
 8001106:	ec51 0b10 	vmov	r0, r1, d0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <set_gps+0x1c0>)
 8001110:	f7ff fbbc 	bl	800088c <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd84 	bl	8000c28 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4a31      	ldr	r2, [pc, #196]	@ (80011e8 <set_gps+0x1c4>)
 8001124:	6013      	str	r3, [r2, #0]
		break;
 8001126:	e051      	b.n	80011cc <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <set_gps+0x1c8>)
 800112e:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 8001130:	4b2e      	ldr	r3, [pc, #184]	@ (80011ec <set_gps+0x1c8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b53      	cmp	r3, #83	@ 0x53
 8001136:	d146      	bne.n	80011c6 <set_gps+0x1a2>
			gps_latitude*= -1;
 8001138:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <set_gps+0x1c4>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eef1 7a67 	vneg.f32	s15, s15
 8001142:	4b29      	ldr	r3, [pc, #164]	@ (80011e8 <set_gps+0x1c4>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001148:	e03d      	b.n	80011c6 <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f005 fd03 	bl	8006b56 <atof>
 8001150:	ec51 0b10 	vmov	r0, r1, d0
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <set_gps+0x1c0>)
 800115a:	f7ff fb97 	bl	800088c <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fd5f 	bl	8000c28 <__aeabi_d2f>
 800116a:	4603      	mov	r3, r0
 800116c:	4a20      	ldr	r2, [pc, #128]	@ (80011f0 <set_gps+0x1cc>)
 800116e:	6013      	str	r3, [r2, #0]
		break;
 8001170:	e02c      	b.n	80011cc <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <set_gps+0x1d0>)
 8001178:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 800117a:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <set_gps+0x1d0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b57      	cmp	r3, #87	@ 0x57
 8001180:	d123      	bne.n	80011ca <set_gps+0x1a6>
			gps_longitude*= -1;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <set_gps+0x1cc>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	eef1 7a67 	vneg.f32	s15, s15
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <set_gps+0x1cc>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001192:	e01a      	b.n	80011ca <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f005 fce1 	bl	8006b5c <atoi>
 800119a:	4603      	mov	r3, r0
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <set_gps+0x1d4>)
 80011a0:	701a      	strb	r2, [r3, #0]
		break;
 80011a2:	e013      	b.n	80011cc <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f005 fcd6 	bl	8006b56 <atof>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fd39 	bl	8000c28 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <set_gps+0x1d8>)
 80011ba:	6013      	str	r3, [r2, #0]
		break;
 80011bc:	e006      	b.n	80011cc <set_gps+0x1a8>
	default:
		break;
 80011be:	bf00      	nop
 80011c0:	e004      	b.n	80011cc <set_gps+0x1a8>
		break;
 80011c2:	bf00      	nop
 80011c4:	e002      	b.n	80011cc <set_gps+0x1a8>
		break;
 80011c6:	bf00      	nop
 80011c8:	e000      	b.n	80011cc <set_gps+0x1a8>
		break;
 80011ca:	bf00      	nop
	}

	return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000a98 	.word	0x20000a98
 80011dc:	20000a99 	.word	0x20000a99
 80011e0:	20000a9a 	.word	0x20000a9a
 80011e4:	40590000 	.word	0x40590000
 80011e8:	20000aa0 	.word	0x20000aa0
 80011ec:	20000cb3 	.word	0x20000cb3
 80011f0:	20000aa4 	.word	0x20000aa4
 80011f4:	20000cb4 	.word	0x20000cb4
 80011f8:	20000aa8 	.word	0x20000aa8
 80011fc:	20000a9c 	.word	0x20000a9c

08001200 <parse_nmea>:

bool parse_nmea(char *buf){
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e032      	b.n	800127c <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001220:	d123      	bne.n	800126a <parse_nmea+0x6a>
			if (last != i){
 8001222:	7bba      	ldrb	r2, [r7, #14]
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	429a      	cmp	r2, r3
 8001228:	d018      	beq.n	800125c <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 800122a:	22ff      	movs	r2, #255	@ 0xff
 800122c:	2100      	movs	r1, #0
 800122e:	4818      	ldr	r0, [pc, #96]	@ (8001290 <parse_nmea+0x90>)
 8001230:	f007 f8bb 	bl	80083aa <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8001234:	7bbb      	ldrb	r3, [r7, #14]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	18d1      	adds	r1, r2, r3
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4813      	ldr	r0, [pc, #76]	@ (8001290 <parse_nmea+0x90>)
 8001244:	f007 f943 	bl	80084ce <memcpy>
				if(set_gps(parse_buf, order)){
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	4619      	mov	r1, r3
 800124c:	4810      	ldr	r0, [pc, #64]	@ (8001290 <parse_nmea+0x90>)
 800124e:	f7ff fee9 	bl	8001024 <set_gps>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <parse_nmea+0x5c>
					return false;
 8001258:	2300      	movs	r3, #0
 800125a:	e015      	b.n	8001288 <parse_nmea+0x88>
				}
			}
			last = i + 1;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	3301      	adds	r3, #1
 8001260:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	3301      	adds	r3, #1
 8001266:	737b      	strb	r3, [r7, #13]
 8001268:	e005      	b.n	8001276 <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2a      	cmp	r3, #42	@ 0x2a
 8001274:	d006      	beq.n	8001284 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3301      	adds	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d1c9      	bne.n	8001216 <parse_nmea+0x16>
 8001282:	e000      	b.n	8001286 <parse_nmea+0x86>
			break;
 8001284:	bf00      	nop
		}
	}

	return true;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000bb4 	.word	0x20000bb4
 8001294:	00000000 	.word	0x00000000

08001298 <calculate_altitude>:

float calculate_altitude(float pressure) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff f970 	bl	8000588 <__aeabi_f2d>
 80012a8:	a323      	add	r3, pc, #140	@ (adr r3, 8001338 <calculate_altitude+0xa0>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff faed 	bl	800088c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fcb5 	bl	8000c28 <__aeabi_d2f>
 80012be:	4603      	mov	r3, r0
 80012c0:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001330 <calculate_altitude+0x98>
 80012c4:	ee00 3a10 	vmov	s0, r3
 80012c8:	f009 fdbc 	bl	800ae44 <powf>
 80012cc:	eef0 7a40 	vmov.f32	s15, s0
 80012d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	ee17 0a90 	vmov	r0, s15
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	a311      	add	r3, pc, #68	@ (adr r3, 8001328 <calculate_altitude+0x90>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f9a7 	bl	8000638 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <calculate_altitude+0x9c>)
 80012f4:	f993 3000 	ldrsb.w	r3, [r3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f933 	bl	8000564 <__aeabi_i2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7fe ffe1 	bl	80002cc <__adddf3>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc89 	bl	8000c28 <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	ee07 3a90 	vmov	s15, r3
}
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	bf00      	nop
 8001328:	a3d70a3d 	.word	0xa3d70a3d
 800132c:	40e5a558 	.word	0x40e5a558
 8001330:	3e42d45b 	.word	0x3e42d45b
 8001334:	20000d54 	.word	0x20000d54
 8001338:	2f1a9fbe 	.word	0x2f1a9fbe
 800133c:	405954dd 	.word	0x405954dd

08001340 <read_MMC5603>:

void read_MMC5603(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	if (HAL_I2C_Master_Transmit(&hi2c2, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800134a:	1dfa      	adds	r2, r7, #7
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	2160      	movs	r1, #96	@ 0x60
 8001356:	4848      	ldr	r0, [pc, #288]	@ (8001478 <read_MMC5603+0x138>)
 8001358:	f002 f828 	bl	80033ac <HAL_I2C_Master_Transmit>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d17f      	bne.n	8001462 <read_MMC5603+0x122>
		// Handle transmission error
		return;
	}

	HAL_Delay(10);
 8001362:	200a      	movs	r0, #10
 8001364:	f001 fc26 	bl	8002bb4 <HAL_Delay>

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c2, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2309      	movs	r3, #9
 8001374:	2160      	movs	r1, #96	@ 0x60
 8001376:	4840      	ldr	r0, [pc, #256]	@ (8001478 <read_MMC5603+0x138>)
 8001378:	f002 f916 	bl	80035a8 <HAL_I2C_Master_Receive>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d171      	bne.n	8001466 <read_MMC5603+0x126>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 8001382:	7a3b      	ldrb	r3, [r7, #8]
 8001384:	031a      	lsls	r2, r3, #12
 8001386:	7a7b      	ldrb	r3, [r7, #9]
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4313      	orrs	r3, r2
 800138c:	7bba      	ldrb	r2, [r7, #14]
 800138e:	0912      	lsrs	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	4313      	orrs	r3, r2
 8001394:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 8001396:	7abb      	ldrb	r3, [r7, #10]
 8001398:	031a      	lsls	r2, r3, #12
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4313      	orrs	r3, r2
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	0912      	lsrs	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 80013aa:	7b3b      	ldrb	r3, [r7, #12]
 80013ac:	031a      	lsls	r2, r3, #12
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4313      	orrs	r3, r2
 80013b4:	7c3a      	ldrb	r2, [r7, #16]
 80013b6:	0912      	lsrs	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	4313      	orrs	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013c4:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013cc:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013d4:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f8d0 	bl	8000588 <__aeabi_f2d>
 80013e8:	a321      	add	r3, pc, #132	@ (adr r3, 8001470 <read_MMC5603+0x130>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fc15 	bl	8000c28 <__aeabi_d2f>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <read_MMC5603+0x13c>)
 8001402:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625;
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a316      	add	r3, pc, #88	@ (adr r3, 8001470 <read_MMC5603+0x130>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbfe 	bl	8000c28 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <read_MMC5603+0x140>)
 8001430:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ee17 0a90 	vmov	r0, s15
 8001440:	f7ff f8a2 	bl	8000588 <__aeabi_f2d>
 8001444:	a30a      	add	r3, pc, #40	@ (adr r3, 8001470 <read_MMC5603+0x130>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8f5 	bl	8000638 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fbe7 	bl	8000c28 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <read_MMC5603+0x144>)
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e002      	b.n	8001468 <read_MMC5603+0x128>
		return;
 8001462:	bf00      	nop
 8001464:	e000      	b.n	8001468 <read_MMC5603+0x128>
		return;
 8001466:	bf00      	nop
}
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	d2f1a9fc 	.word	0xd2f1a9fc
 8001474:	3f10624d 	.word	0x3f10624d
 8001478:	20000490 	.word	0x20000490
 800147c:	20000a88 	.word	0x20000a88
 8001480:	20000a8c 	.word	0x20000a8c
 8001484:	20000a90 	.word	0x20000a90

08001488 <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2309      	movs	r3, #9
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2201      	movs	r2, #1
 80014a0:	21c0      	movs	r1, #192	@ 0xc0
 80014a2:	482b      	ldr	r0, [pc, #172]	@ (8001550 <read_MPL3115A2+0xc8>)
 80014a4:	f002 fbac 	bl	8003c00 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	4313      	orrs	r3, r2
 80014b2:	79ba      	ldrb	r2, [r7, #6]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f7ff f840 	bl	8000544 <__aeabi_ui2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b22      	ldr	r3, [pc, #136]	@ (8001554 <read_MPL3115A2+0xcc>)
 80014ca:	f7ff f9df 	bl	800088c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <read_MPL3115A2+0xd0>)
 80014dc:	f7ff f9d6 	bl	800088c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb9e 	bl	8000c28 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <read_MPL3115A2+0xd4>)
 80014f0:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8001500:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8001508:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f829 	bl	8000564 <__aeabi_i2d>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b12      	ldr	r3, [pc, #72]	@ (8001560 <read_MPL3115A2+0xd8>)
 8001518:	f7ff f9b8 	bl	800088c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb80 	bl	8000c28 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <read_MPL3115A2+0xdc>)
 800152c:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <read_MPL3115A2+0xd4>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f7ff feae 	bl	8001298 <calculate_altitude>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <read_MPL3115A2+0xe0>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000490 	.word	0x20000490
 8001554:	40100000 	.word	0x40100000
 8001558:	408f4000 	.word	0x408f4000
 800155c:	20000a68 	.word	0x20000a68
 8001560:	40300000 	.word	0x40300000
 8001564:	20000a64 	.word	0x20000a64
 8001568:	20000a60 	.word	0x20000a60
 800156c:	00000000 	.word	0x00000000

08001570 <read_MPU6050>:

void read_MPU6050(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8001576:	233b      	movs	r3, #59	@ 0x3b
 8001578:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 800157a:	2343      	movs	r3, #67	@ 0x43
 800157c:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDRESS, 3, 5);
 800158a:	2305      	movs	r3, #5
 800158c:	2203      	movs	r2, #3
 800158e:	21d0      	movs	r1, #208	@ 0xd0
 8001590:	4871      	ldr	r0, [pc, #452]	@ (8001758 <read_MPU6050+0x1e8>)
 8001592:	f002 fd67 	bl	8004064 <HAL_I2C_IsDeviceReady>
 8001596:	4603      	mov	r3, r0
 8001598:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 800159a:	7c7b      	ldrb	r3, [r7, #17]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 80d2 	bne.w	8001746 <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &imu_addr, 1, 100);
 80015a2:	f107 0209 	add.w	r2, r7, #9
 80015a6:	2364      	movs	r3, #100	@ 0x64
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2301      	movs	r3, #1
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	486a      	ldr	r0, [pc, #424]	@ (8001758 <read_MPU6050+0x1e8>)
 80015b0:	f001 fefc 	bl	80033ac <HAL_I2C_Master_Transmit>
 80015b4:	4603      	mov	r3, r0
 80015b6:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 80015b8:	7c7b      	ldrb	r3, [r7, #17]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d15a      	bne.n	8001674 <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 80015be:	463a      	mov	r2, r7
 80015c0:	2364      	movs	r3, #100	@ 0x64
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2306      	movs	r3, #6
 80015c6:	21d0      	movs	r1, #208	@ 0xd0
 80015c8:	4863      	ldr	r0, [pc, #396]	@ (8001758 <read_MPU6050+0x1e8>)
 80015ca:	f001 ffed 	bl	80035a8 <HAL_I2C_Master_Receive>
 80015ce:	4603      	mov	r3, r0
 80015d0:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80015d2:	7c7b      	ldrb	r3, [r7, #17]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d14d      	bne.n	8001674 <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 80015d8:	783b      	ldrb	r3, [r7, #0]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 80015e6:	78bb      	ldrb	r3, [r7, #2]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 80015f4:	793b      	ldrb	r3, [r7, #4]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	797b      	ldrb	r3, [r7, #5]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 8001602:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffac 	bl	8000564 <__aeabi_i2d>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b52      	ldr	r3, [pc, #328]	@ (800175c <read_MPU6050+0x1ec>)
 8001612:	f7ff f93b 	bl	800088c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fb03 	bl	8000c28 <__aeabi_d2f>
 8001622:	4603      	mov	r3, r0
 8001624:	4a4e      	ldr	r2, [pc, #312]	@ (8001760 <read_MPU6050+0x1f0>)
 8001626:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 8001628:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff99 	bl	8000564 <__aeabi_i2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b49      	ldr	r3, [pc, #292]	@ (800175c <read_MPU6050+0x1ec>)
 8001638:	f7ff f928 	bl	800088c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff faf0 	bl	8000c28 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	4a46      	ldr	r2, [pc, #280]	@ (8001764 <read_MPU6050+0x1f4>)
 800164c:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 800164e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff86 	bl	8000564 <__aeabi_i2d>
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <read_MPU6050+0x1ec>)
 800165e:	f7ff f915 	bl	800088c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fadd 	bl	8000c28 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a3d      	ldr	r2, [pc, #244]	@ (8001768 <read_MPU6050+0x1f8>)
 8001672:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 8001674:	f107 0208 	add.w	r2, r7, #8
 8001678:	2364      	movs	r3, #100	@ 0x64
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2301      	movs	r3, #1
 800167e:	21d0      	movs	r1, #208	@ 0xd0
 8001680:	4835      	ldr	r0, [pc, #212]	@ (8001758 <read_MPU6050+0x1e8>)
 8001682:	f001 fe93 	bl	80033ac <HAL_I2C_Master_Transmit>
 8001686:	4603      	mov	r3, r0
 8001688:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 800168a:	7c7b      	ldrb	r3, [r7, #17]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d15a      	bne.n	8001746 <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8001690:	463a      	mov	r2, r7
 8001692:	2364      	movs	r3, #100	@ 0x64
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	2306      	movs	r3, #6
 8001698:	21d0      	movs	r1, #208	@ 0xd0
 800169a:	482f      	ldr	r0, [pc, #188]	@ (8001758 <read_MPU6050+0x1e8>)
 800169c:	f001 ff84 	bl	80035a8 <HAL_I2C_Master_Receive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80016a4:	7c7b      	ldrb	r3, [r7, #17]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d14d      	bne.n	8001746 <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 80016aa:	783b      	ldrb	r3, [r7, #0]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 80016b8:	78bb      	ldrb	r3, [r7, #2]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 80016c6:	793b      	ldrb	r3, [r7, #4]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	797b      	ldrb	r3, [r7, #5]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 80016d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff43 	bl	8000564 <__aeabi_i2d>
 80016de:	a31c      	add	r3, pc, #112	@ (adr r3, 8001750 <read_MPU6050+0x1e0>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7ff f8d2 	bl	800088c <__aeabi_ddiv>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa9a 	bl	8000c28 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <read_MPU6050+0x1fc>)
 80016f8:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 80016fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe ff30 	bl	8000564 <__aeabi_i2d>
 8001704:	a312      	add	r3, pc, #72	@ (adr r3, 8001750 <read_MPU6050+0x1e0>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	f7ff f8bf 	bl	800088c <__aeabi_ddiv>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fa87 	bl	8000c28 <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4a14      	ldr	r2, [pc, #80]	@ (8001770 <read_MPU6050+0x200>)
 800171e:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001720:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff1d 	bl	8000564 <__aeabi_i2d>
 800172a:	a309      	add	r3, pc, #36	@ (adr r3, 8001750 <read_MPU6050+0x1e0>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7ff f8ac 	bl	800088c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa74 	bl	8000c28 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <read_MPU6050+0x204>)
 8001744:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	00000000 	.word	0x00000000
 8001754:	40606000 	.word	0x40606000
 8001758:	20000490 	.word	0x20000490
 800175c:	40d00000 	.word	0x40d00000
 8001760:	20000a7c 	.word	0x20000a7c
 8001764:	20000a80 	.word	0x20000a80
 8001768:	20000a84 	.word	0x20000a84
 800176c:	20000a70 	.word	0x20000a70
 8001770:	20000a74 	.word	0x20000a74
 8001774:	20000a78 	.word	0x20000a78

08001778 <read_PA1010D>:

void read_PA1010D(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af02      	add	r7, sp, #8
	uint8_t pa1010d_i;
	uint8_t pa1010d_bytebuf;

	/* PA1010D (GPS) */
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e015      	b.n	80017b0 <read_PA1010D+0x38>
		pa_ret = HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 100);
 8001784:	1dba      	adds	r2, r7, #6
 8001786:	2364      	movs	r3, #100	@ 0x64
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	2120      	movs	r1, #32
 800178e:	480e      	ldr	r0, [pc, #56]	@ (80017c8 <read_PA1010D+0x50>)
 8001790:	f001 ff0a 	bl	80035a8 <HAL_I2C_Master_Receive>
 8001794:	4603      	mov	r3, r0
 8001796:	461a      	mov	r2, r3
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <read_PA1010D+0x54>)
 800179a:	701a      	strb	r2, [r3, #0]
		if (pa1010d_bytebuf == '$'){
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	2b24      	cmp	r3, #36	@ 0x24
 80017a0:	d00a      	beq.n	80017b8 <read_PA1010D+0x40>
			break;
		}
		pa_buf[pa1010d_i] = pa1010d_bytebuf;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	79b9      	ldrb	r1, [r7, #6]
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <read_PA1010D+0x58>)
 80017a8:	54d1      	strb	r1, [r2, r3]
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	3301      	adds	r3, #1
 80017ae:	71fb      	strb	r3, [r7, #7]
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d1e6      	bne.n	8001784 <read_PA1010D+0xc>
 80017b6:	e000      	b.n	80017ba <read_PA1010D+0x42>
			break;
 80017b8:	bf00      	nop
	}
	parse_nmea(pa_buf);
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <read_PA1010D+0x58>)
 80017bc:	f7ff fd20 	bl	8001200 <parse_nmea>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000490 	.word	0x20000490
 80017cc:	20000aa9 	.word	0x20000aa9
 80017d0:	20000aac 	.word	0x20000aac

080017d4 <read_INA219>:

void read_INA219(void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af02      	add	r7, sp, #8
	/* INA219 (CURRENT/VOLTAGE) */
	uint8_t bus_add = 0x02; // need to use separate registers for everything
 80017da:	2302      	movs	r3, #2
 80017dc:	71fb      	strb	r3, [r7, #7]

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c2, INA219_ADDRESS, 3, 5);
 80017de:	2305      	movs	r3, #5
 80017e0:	2203      	movs	r2, #3
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	4824      	ldr	r0, [pc, #144]	@ (8001878 <read_INA219+0xa4>)
 80017e6:	f002 fc3d 	bl	8004064 <HAL_I2C_IsDeviceReady>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <read_INA219+0xa8>)
 80017f0:	701a      	strb	r2, [r3, #0]
	if (ina_ret == HAL_OK) {
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <read_INA219+0xa8>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d13a      	bne.n	8001870 <read_INA219+0x9c>
		ina_ret = HAL_I2C_Master_Transmit(&hi2c2, INA219_ADDRESS, &bus_add, 1, 100);
 80017fa:	1dfa      	adds	r2, r7, #7
 80017fc:	2364      	movs	r3, #100	@ 0x64
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	481c      	ldr	r0, [pc, #112]	@ (8001878 <read_INA219+0xa4>)
 8001806:	f001 fdd1 	bl	80033ac <HAL_I2C_Master_Transmit>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <read_INA219+0xa8>)
 8001810:	701a      	strb	r2, [r3, #0]
		if (ina_ret == HAL_OK) {
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <read_INA219+0xa8>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12a      	bne.n	8001870 <read_INA219+0x9c>
			HAL_I2C_Master_Receive(&hi2c2, INA219_ADDRESS, ina_buf, 2, 10);
 800181a:	230a      	movs	r3, #10
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <read_INA219+0xac>)
 8001822:	2180      	movs	r1, #128	@ 0x80
 8001824:	4814      	ldr	r0, [pc, #80]	@ (8001878 <read_INA219+0xa4>)
 8001826:	f001 febf 	bl	80035a8 <HAL_I2C_Master_Receive>

			//raw_shunt_voltage = abs((int16_t)(ina_buf[0] << 8 | ina_buf[1]));
			raw_bus_voltage = (int16_t)(ina_buf[0] << 8 | ina_buf [1]);
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <read_INA219+0xac>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <read_INA219+0xac>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	b21b      	sxth	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b21a      	sxth	r2, r3
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <read_INA219+0xb0>)
 800183e:	801a      	strh	r2, [r3, #0]
			//raw_power = (int16_t)(ina_buf[4] << 8 | ina_buf [5]);
			//raw_current = (int16_t)(ina_buf[6] << 8 | ina_buf [7]);

			//shunt_voltage = raw_shunt_voltage*10.0;
			bus_voltage = raw_bus_voltage/1600.0;
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <read_INA219+0xb0>)
 8001842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe8c 	bl	8000564 <__aeabi_i2d>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <read_INA219+0xb4>)
 8001852:	f7ff f81b 	bl	800088c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9e3 	bl	8000c28 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	4a09      	ldr	r2, [pc, #36]	@ (800188c <read_INA219+0xb8>)
 8001866:	6013      	str	r3, [r2, #0]
			//power = raw_power*20/32768.0;
			//current = raw_current/32768.0;

			voltage = bus_voltage;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <read_INA219+0xb8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <read_INA219+0xbc>)
 800186e:	6013      	str	r3, [r2, #0]
		}

	}

}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000490 	.word	0x20000490
 800187c:	20000cb5 	.word	0x20000cb5
 8001880:	20000cb8 	.word	0x20000cb8
 8001884:	20000cc0 	.word	0x20000cc0
 8001888:	40990000 	.word	0x40990000
 800188c:	20000cc4 	.word	0x20000cc4
 8001890:	20000a6c 	.word	0x20000a6c

08001894 <init_MMC5603>:

void init_MMC5603(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 800189a:	2364      	movs	r3, #100	@ 0x64
 800189c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 80018a6:	2310      	movs	r3, #16
 80018a8:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2301      	movs	r3, #1
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	1d7b      	adds	r3, r7, #5
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2301      	movs	r3, #1
 80018ba:	221c      	movs	r2, #28
 80018bc:	2160      	movs	r1, #96	@ 0x60
 80018be:	482f      	ldr	r0, [pc, #188]	@ (800197c <init_MMC5603+0xe8>)
 80018c0:	f002 f8a4 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80018c4:	2014      	movs	r0, #20
 80018c6:	f001 f975 	bl	8002bb4 <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 80018ca:	2308      	movs	r3, #8
 80018cc:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	2301      	movs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	1cfb      	adds	r3, r7, #3
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	2301      	movs	r3, #1
 80018de:	221b      	movs	r2, #27
 80018e0:	2160      	movs	r1, #96	@ 0x60
 80018e2:	4826      	ldr	r0, [pc, #152]	@ (800197c <init_MMC5603+0xe8>)
 80018e4:	f002 f892 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80018e8:	2001      	movs	r0, #1
 80018ea:	f001 f963 	bl	8002bb4 <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 80018ee:	2310      	movs	r3, #16
 80018f0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	2301      	movs	r3, #1
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	1cbb      	adds	r3, r7, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	221b      	movs	r2, #27
 8001904:	2160      	movs	r1, #96	@ 0x60
 8001906:	481d      	ldr	r0, [pc, #116]	@ (800197c <init_MMC5603+0xe8>)
 8001908:	f002 f880 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800190c:	2001      	movs	r0, #1
 800190e:	f001 f951 	bl	8002bb4 <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2301      	movs	r3, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	1dfb      	adds	r3, r7, #7
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	221a      	movs	r2, #26
 8001924:	2160      	movs	r1, #96	@ 0x60
 8001926:	4815      	ldr	r0, [pc, #84]	@ (800197c <init_MMC5603+0xe8>)
 8001928:	f002 f870 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800192c:	200a      	movs	r0, #10
 800192e:	f001 f941 	bl	8002bb4 <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	2301      	movs	r3, #1
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	1dbb      	adds	r3, r7, #6
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	221b      	movs	r2, #27
 8001944:	2160      	movs	r1, #96	@ 0x60
 8001946:	480d      	ldr	r0, [pc, #52]	@ (800197c <init_MMC5603+0xe8>)
 8001948:	f002 f860 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800194c:	200a      	movs	r0, #10
 800194e:	f001 f931 	bl	8002bb4 <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	9302      	str	r3, [sp, #8]
 8001958:	2301      	movs	r3, #1
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2301      	movs	r3, #1
 8001962:	221d      	movs	r2, #29
 8001964:	2160      	movs	r1, #96	@ 0x60
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <init_MMC5603+0xe8>)
 8001968:	f002 f850 	bl	8003a0c <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 800196c:	200a      	movs	r0, #10
 800196e:	f001 f921 	bl	8002bb4 <HAL_Delay>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000490 	.word	0x20000490

08001980 <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	1dfb      	adds	r3, r7, #7
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	220c      	movs	r2, #12
 800199c:	21c0      	movs	r1, #192	@ 0xc0
 800199e:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <init_MPL3115A2+0x50>)
 80019a0:	f002 f92e 	bl	8003c00 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2bc4      	cmp	r3, #196	@ 0xc4
 80019a8:	d10e      	bne.n	80019c8 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 80019aa:	2339      	movs	r3, #57	@ 0x39
 80019ac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2301      	movs	r3, #1
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	1dbb      	adds	r3, r7, #6
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2301      	movs	r3, #1
 80019be:	2226      	movs	r2, #38	@ 0x26
 80019c0:	21c0      	movs	r1, #192	@ 0xc0
 80019c2:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <init_MPL3115A2+0x50>)
 80019c4:	f002 f822 	bl	8003a0c <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000490 	.word	0x20000490

080019d4 <init_MPU6050>:

void init_MPU6050(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 80019de:	2307      	movs	r3, #7
 80019e0:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	717b      	strb	r3, [r7, #5]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 80019e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2301      	movs	r3, #1
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	226b      	movs	r2, #107	@ 0x6b
 80019f8:	21d0      	movs	r1, #208	@ 0xd0
 80019fa:	4817      	ldr	r0, [pc, #92]	@ (8001a58 <init_MPU6050+0x84>)
 80019fc:	f002 f806 	bl	8003a0c <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 8001a00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2301      	movs	r3, #1
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	1dbb      	adds	r3, r7, #6
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2219      	movs	r2, #25
 8001a12:	21d0      	movs	r1, #208	@ 0xd0
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <init_MPU6050+0x84>)
 8001a16:	f001 fff9 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 8001a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	2301      	movs	r3, #1
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	1d7b      	adds	r3, r7, #5
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	221b      	movs	r2, #27
 8001a2c:	21d0      	movs	r1, #208	@ 0xd0
 8001a2e:	480a      	ldr	r0, [pc, #40]	@ (8001a58 <init_MPU6050+0x84>)
 8001a30:	f001 ffec 	bl	8003a0c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 8001a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	1d7b      	adds	r3, r7, #5
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	221c      	movs	r2, #28
 8001a46:	21d0      	movs	r1, #208	@ 0xd0
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <init_MPU6050+0x84>)
 8001a4a:	f001 ffdf 	bl	8003a0c <HAL_I2C_Mem_Write>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000490 	.word	0x20000490

08001a5c <init_PA1010D>:

void init_PA1010D(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af02      	add	r7, sp, #8
	uint8_t pa1010d_bytebuf;

//	pa_init_ret[0] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
	pa_init_ret[1] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_INIT, strlen( (char *)PA1010D_INIT), 1000);
 8001a62:	4833      	ldr	r0, [pc, #204]	@ (8001b30 <init_PA1010D+0xd4>)
 8001a64:	f7fe fc24 	bl	80002b0 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	4a2f      	ldr	r2, [pc, #188]	@ (8001b30 <init_PA1010D+0xd4>)
 8001a74:	2120      	movs	r1, #32
 8001a76:	482f      	ldr	r0, [pc, #188]	@ (8001b34 <init_PA1010D+0xd8>)
 8001a78:	f001 fc98 	bl	80033ac <HAL_I2C_Master_Transmit>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <init_PA1010D+0xdc>)
 8001a82:	705a      	strb	r2, [r3, #1]
	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
 8001a84:	482d      	ldr	r0, [pc, #180]	@ (8001b3c <init_PA1010D+0xe0>)
 8001a86:	f7fe fc13 	bl	80002b0 <strlen>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	4a29      	ldr	r2, [pc, #164]	@ (8001b3c <init_PA1010D+0xe0>)
 8001a96:	2120      	movs	r1, #32
 8001a98:	4826      	ldr	r0, [pc, #152]	@ (8001b34 <init_PA1010D+0xd8>)
 8001a9a:	f001 fc87 	bl	80033ac <HAL_I2C_Master_Transmit>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b25      	ldr	r3, [pc, #148]	@ (8001b38 <init_PA1010D+0xdc>)
 8001aa4:	709a      	strb	r2, [r3, #2]
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);
	pa_init_ret[4] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 8001aa6:	4826      	ldr	r0, [pc, #152]	@ (8001b40 <init_PA1010D+0xe4>)
 8001aa8:	f7fe fc02 	bl	80002b0 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <init_PA1010D+0xe4>)
 8001ab8:	2120      	movs	r1, #32
 8001aba:	481e      	ldr	r0, [pc, #120]	@ (8001b34 <init_PA1010D+0xd8>)
 8001abc:	f001 fc76 	bl	80033ac <HAL_I2C_Master_Transmit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b38 <init_PA1010D+0xdc>)
 8001ac6:	711a      	strb	r2, [r3, #4]

	//Wait for stabilization
	for(int j=0; j<10; j++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e028      	b.n	8001b20 <init_PA1010D+0xc4>
		for(int i=0; i<255; i++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	e013      	b.n	8001afc <init_PA1010D+0xa0>
			HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 10);
 8001ad4:	1dfa      	adds	r2, r7, #7
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	2120      	movs	r1, #32
 8001ade:	4815      	ldr	r0, [pc, #84]	@ (8001b34 <init_PA1010D+0xd8>)
 8001ae0:	f001 fd62 	bl	80035a8 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b24      	cmp	r3, #36	@ 0x24
 8001ae8:	d00c      	beq.n	8001b04 <init_PA1010D+0xa8>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 8001aea:	79f9      	ldrb	r1, [r7, #7]
 8001aec:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <init_PA1010D+0xe8>)
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3301      	adds	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b00:	dde8      	ble.n	8001ad4 <init_PA1010D+0x78>
 8001b02:	e000      	b.n	8001b06 <init_PA1010D+0xaa>
				break;
 8001b04:	bf00      	nop
		}
		if (j>5){
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	dd02      	ble.n	8001b12 <init_PA1010D+0xb6>
			parse_nmea(pa_buf);
 8001b0c:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <init_PA1010D+0xe8>)
 8001b0e:	f7ff fb77 	bl	8001200 <parse_nmea>
		}
		HAL_Delay(500);
 8001b12:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b16:	f001 f84d 	bl	8002bb4 <HAL_Delay>
	for(int j=0; j<10; j++){
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	ddd3      	ble.n	8001ace <init_PA1010D+0x72>
	}
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000006c 	.word	0x2000006c
 8001b34:	20000490 	.word	0x20000490
 8001b38:	20000bac 	.word	0x20000bac
 8001b3c:	2000005c 	.word	0x2000005c
 8001b40:	2000007c 	.word	0x2000007c
 8001b44:	20000aac 	.word	0x20000aac

08001b48 <init_INA219>:

void init_INA219(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af04      	add	r7, sp, #16
	uint8_t ina_config[2] = {0b00000001, 0b00011101};
 8001b4e:	f641 5301 	movw	r3, #7425	@ 0x1d01
 8001b52:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);
 8001b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2301      	movs	r3, #1
 8001b64:	2205      	movs	r2, #5
 8001b66:	2180      	movs	r1, #128	@ 0x80
 8001b68:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <init_INA219+0x30>)
 8001b6a:	f001 ff4f 	bl	8003a0c <HAL_I2C_Mem_Write>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000490 	.word	0x20000490

08001b7c <read_sensors>:

void read_sensors(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	read_MPL3115A2(); // Temperature/ Pressure
 8001b80:	f7ff fc82 	bl	8001488 <read_MPL3115A2>
	read_MMC5603(); // Magnetic Field
 8001b84:	f7ff fbdc 	bl	8001340 <read_MMC5603>
	read_MPU6050(); // Accel/ tilt
 8001b88:	f7ff fcf2 	bl	8001570 <read_MPU6050>
	read_PA1010D(); // GPS
 8001b8c:	f7ff fdf4 	bl	8001778 <read_PA1010D>
	read_INA219(); // Voltage
 8001b90:	f7ff fe20 	bl	80017d4 <read_INA219>
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <init_sensors>:

void init_sensors(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	init_MPL3115A2();
 8001b9c:	f7ff fef0 	bl	8001980 <init_MPL3115A2>
	init_MMC5603();
 8001ba0:	f7ff fe78 	bl	8001894 <init_MMC5603>
	init_MPU6050();
 8001ba4:	f7ff ff16 	bl	80019d4 <init_MPU6050>
	init_PA1010D();
 8001ba8:	f7ff ff58 	bl	8001a5c <init_PA1010D>
	init_INA219();
 8001bac:	f7ff ffcc 	bl	8001b48 <init_INA219>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <init_commands>:

void init_commands(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 8001bb8:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <init_commands+0x68>)
 8001bba:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <init_commands+0x6c>)
 8001bbc:	210e      	movs	r1, #14
 8001bbe:	4819      	ldr	r0, [pc, #100]	@ (8001c24 <init_commands+0x70>)
 8001bc0:	f006 fb7c 	bl	80082bc <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <init_commands+0x68>)
 8001bc6:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <init_commands+0x74>)
 8001bc8:	210f      	movs	r1, #15
 8001bca:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <init_commands+0x78>)
 8001bcc:	f006 fb76 	bl	80082bc <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <init_commands+0x68>)
 8001bd2:	4a17      	ldr	r2, [pc, #92]	@ (8001c30 <init_commands+0x7c>)
 8001bd4:	210d      	movs	r1, #13
 8001bd6:	4817      	ldr	r0, [pc, #92]	@ (8001c34 <init_commands+0x80>)
 8001bd8:	f006 fb70 	bl	80082bc <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL,", TEAM_ID);
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <init_commands+0x68>)
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <init_commands+0x84>)
 8001be0:	210e      	movs	r1, #14
 8001be2:	4816      	ldr	r0, [pc, #88]	@ (8001c3c <init_commands+0x88>)
 8001be4:	f006 fb6a 	bl	80082bc <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <init_commands+0x68>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	@ (8001c40 <init_commands+0x8c>)
 8001bec:	2110      	movs	r1, #16
 8001bee:	4815      	ldr	r0, [pc, #84]	@ (8001c44 <init_commands+0x90>)
 8001bf0:	f006 fb64 	bl	80082bc <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <init_commands+0x68>)
 8001bf6:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <init_commands+0x94>)
 8001bf8:	2111      	movs	r1, #17
 8001bfa:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <init_commands+0x98>)
 8001bfc:	f006 fb5e 	bl	80082bc <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <init_commands+0x68>)
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <init_commands+0x9c>)
 8001c04:	210f      	movs	r1, #15
 8001c06:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <init_commands+0xa0>)
 8001c08:	f006 fb58 	bl	80082bc <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <init_commands+0x68>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <init_commands+0xa4>)
 8001c10:	2110      	movs	r1, #16
 8001c12:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <init_commands+0xa8>)
 8001c14:	f006 fb52 	bl	80082bc <sniprintf>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	0800b5f0 	.word	0x0800b5f0
 8001c20:	0800b5f8 	.word	0x0800b5f8
 8001c24:	20000cc8 	.word	0x20000cc8
 8001c28:	0800b604 	.word	0x0800b604
 8001c2c:	20000cd8 	.word	0x20000cd8
 8001c30:	0800b614 	.word	0x0800b614
 8001c34:	20000ce8 	.word	0x20000ce8
 8001c38:	0800b620 	.word	0x0800b620
 8001c3c:	20000cf8 	.word	0x20000cf8
 8001c40:	0800b62c 	.word	0x0800b62c
 8001c44:	20000d08 	.word	0x20000d08
 8001c48:	0800b63c 	.word	0x0800b63c
 8001c4c:	20000d18 	.word	0x20000d18
 8001c50:	0800b64c 	.word	0x0800b64c
 8001c54:	20000d2c 	.word	0x20000d2c
 8001c58:	0800b65c 	.word	0x0800b65c
 8001c5c:	20000d3c 	.word	0x20000d3c

08001c60 <create_telemetry>:

void create_telemetry(uint8_t *ret, uint8_t part){
 8001c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c64:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8001c68:	af2e      	add	r7, sp, #184	@ 0xb8
 8001c6a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001c6e:	460b      	mov	r3, r1
 8001c70:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	char tel_buf[TX_BFR_SIZE-18] = {0};	//Preload buffer
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c7a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c7e:	22e9      	movs	r2, #233	@ 0xe9
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 fb91 	bl	80083aa <memset>

	if (part == 0){
 8001c88:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 8103 	bne.w	8001e98 <create_telemetry+0x238>
		packet_count += 1;
 8001c92:	4b8c      	ldr	r3, [pc, #560]	@ (8001ec4 <create_telemetry+0x264>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	4b88      	ldr	r3, [pc, #544]	@ (8001ec4 <create_telemetry+0x264>)
 8001ca2:	801a      	strh	r2, [r3, #0]
		/* Variables TEAM_ID, MISSION_TIME, PACKET_COUNT, MODE, STATE, ALTITUDE,
		TEMPERATURE, PRESSURE, VOLTAGE, GYRO_R, GYRO_P, GYRO_Y, ACCEL_R,
		ACCEL_P, ACCEL_Y, MAG_R, MAG_P, MAG_Y, AUTO_GYRO_ROTATION_RATE,
		GPS_TIME, GPS_ALTITUDE, GPS_LATITUDE, GPS_LONGITUDE, GPS_SATS,
		CMD_ECHO [,,OPTIONAL_DATA] */
		snprintf(tel_buf, TX_BFR_SIZE,
 8001ca4:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <create_telemetry+0x268>)
 8001ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8001caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cae:	4b87      	ldr	r3, [pc, #540]	@ (8001ecc <create_telemetry+0x26c>)
 8001cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001cb8:	4b85      	ldr	r3, [pc, #532]	@ (8001ed0 <create_telemetry+0x270>)
 8001cba:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cc0:	4b80      	ldr	r3, [pc, #512]	@ (8001ec4 <create_telemetry+0x264>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cc8:	4b82      	ldr	r3, [pc, #520]	@ (8001ed4 <create_telemetry+0x274>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cce:	4b82      	ldr	r3, [pc, #520]	@ (8001ed8 <create_telemetry+0x278>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fc58 	bl	8000588 <__aeabi_f2d>
 8001cd8:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8001cdc:	4b7f      	ldr	r3, [pc, #508]	@ (8001edc <create_telemetry+0x27c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc51 	bl	8000588 <__aeabi_f2d>
 8001ce6:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8001cea:	4b7d      	ldr	r3, [pc, #500]	@ (8001ee0 <create_telemetry+0x280>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc4a 	bl	8000588 <__aeabi_f2d>
 8001cf4:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8001cf8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ee4 <create_telemetry+0x284>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fc43 	bl	8000588 <__aeabi_f2d>
 8001d02:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001d06:	4b78      	ldr	r3, [pc, #480]	@ (8001ee8 <create_telemetry+0x288>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc3c 	bl	8000588 <__aeabi_f2d>
 8001d10:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001d14:	4b75      	ldr	r3, [pc, #468]	@ (8001eec <create_telemetry+0x28c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fc35 	bl	8000588 <__aeabi_f2d>
 8001d1e:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001d22:	4b73      	ldr	r3, [pc, #460]	@ (8001ef0 <create_telemetry+0x290>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fc2e 	bl	8000588 <__aeabi_f2d>
 8001d2c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001d30:	4b70      	ldr	r3, [pc, #448]	@ (8001ef4 <create_telemetry+0x294>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc27 	bl	8000588 <__aeabi_f2d>
 8001d3a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef8 <create_telemetry+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc20 	bl	8000588 <__aeabi_f2d>
 8001d48:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001efc <create_telemetry+0x29c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc19 	bl	8000588 <__aeabi_f2d>
 8001d56:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001d5a:	4b69      	ldr	r3, [pc, #420]	@ (8001f00 <create_telemetry+0x2a0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc12 	bl	8000588 <__aeabi_f2d>
 8001d64:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <create_telemetry+0x2a4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fc0b 	bl	8000588 <__aeabi_f2d>
 8001d72:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d76:	4b64      	ldr	r3, [pc, #400]	@ (8001f08 <create_telemetry+0x2a8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fc04 	bl	8000588 <__aeabi_f2d>
 8001d80:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d84:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <create_telemetry+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbfd 	bl	8000588 <__aeabi_f2d>
 8001d8e:	4682      	mov	sl, r0
 8001d90:	468b      	mov	fp, r1
 8001d92:	4b5f      	ldr	r3, [pc, #380]	@ (8001f10 <create_telemetry+0x2b0>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d98:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <create_telemetry+0x2b4>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8001f18 <create_telemetry+0x2b8>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <create_telemetry+0x2bc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbed 	bl	8000588 <__aeabi_f2d>
 8001dae:	4680      	mov	r8, r0
 8001db0:	4689      	mov	r9, r1
 8001db2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f20 <create_telemetry+0x2c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4b58      	ldr	r3, [pc, #352]	@ (8001f24 <create_telemetry+0x2c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbdf 	bl	8000588 <__aeabi_f2d>
 8001dca:	4b57      	ldr	r3, [pc, #348]	@ (8001f28 <create_telemetry+0x2c8>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f107 0690 	add.w	r6, r7, #144	@ 0x90
 8001dd4:	4b55      	ldr	r3, [pc, #340]	@ (8001f2c <create_telemetry+0x2cc>)
 8001dd6:	932d      	str	r3, [sp, #180]	@ 0xb4
 8001dd8:	922c      	str	r2, [sp, #176]	@ 0xb0
 8001dda:	e9cd 012a 	strd	r0, r1, [sp, #168]	@ 0xa8
 8001dde:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 8001de2:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	9224      	str	r2, [sp, #144]	@ 0x90
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	9223      	str	r2, [sp, #140]	@ 0x8c
 8001dee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001df0:	9222      	str	r2, [sp, #136]	@ 0x88
 8001df2:	e9cd ab20 	strd	sl, fp, [sp, #128]	@ 0x80
 8001df6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dfa:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8001dfe:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e02:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 8001e06:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e0a:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8001e0e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e12:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8001e16:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001e1a:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8001e1e:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001e22:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8001e26:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001e2a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8001e2e:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001e32:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001e36:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001e3a:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001e3e:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001e42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001e46:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001e4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001e4e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001e52:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001e56:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8001e5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <create_telemetry+0x2d0>)
 8001e60:	9305      	str	r3, [sp, #20]
 8001e62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001e64:	9204      	str	r2, [sp, #16]
 8001e66:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001e68:	9203      	str	r2, [sp, #12]
 8001e6a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001e6c:	9202      	str	r2, [sp, #8]
 8001e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e72:	9201      	str	r2, [sp, #4]
 8001e74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f34 <create_telemetry+0x2d4>)
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <create_telemetry+0x2d8>)
 8001e7e:	21ff      	movs	r1, #255	@ 0xff
 8001e80:	4630      	mov	r0, r6
 8001e82:	f006 fa1b 	bl	80082bc <sniprintf>
				gps_latitude,
				gps_longitude,
				gps_sats,
				cmd_echo
				);
		tx_count = strlen(tel_buf);
 8001e86:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fa10 	bl	80002b0 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <create_telemetry+0x2dc>)
 8001e96:	701a      	strb	r2, [r3, #0]
	}

	memset(ret, '/0', sizeof(ret));
 8001e98:	2204      	movs	r2, #4
 8001e9a:	f642 7130 	movw	r1, #12080	@ 0x2f30
 8001e9e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ea2:	f006 fa82 	bl	80083aa <memset>
	memcpy(ret, tel_buf, TX_BFR_SIZE-18);
 8001ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001eb0:	22ed      	movs	r2, #237	@ 0xed
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f006 fb0b 	bl	80084ce <memcpy>
}
 8001eb8:	bf00      	nop
 8001eba:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec4:	20000a5c 	.word	0x20000a5c
 8001ec8:	20000a58 	.word	0x20000a58
 8001ecc:	20000a59 	.word	0x20000a59
 8001ed0:	20000a5a 	.word	0x20000a5a
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000a60 	.word	0x20000a60
 8001edc:	20000a64 	.word	0x20000a64
 8001ee0:	20000a68 	.word	0x20000a68
 8001ee4:	20000a6c 	.word	0x20000a6c
 8001ee8:	20000a70 	.word	0x20000a70
 8001eec:	20000a74 	.word	0x20000a74
 8001ef0:	20000a78 	.word	0x20000a78
 8001ef4:	20000a7c 	.word	0x20000a7c
 8001ef8:	20000a80 	.word	0x20000a80
 8001efc:	20000a84 	.word	0x20000a84
 8001f00:	20000a88 	.word	0x20000a88
 8001f04:	20000a8c 	.word	0x20000a8c
 8001f08:	20000a90 	.word	0x20000a90
 8001f0c:	20000a94 	.word	0x20000a94
 8001f10:	20000a98 	.word	0x20000a98
 8001f14:	20000a99 	.word	0x20000a99
 8001f18:	20000a9a 	.word	0x20000a9a
 8001f1c:	20000a9c 	.word	0x20000a9c
 8001f20:	20000aa0 	.word	0x20000aa0
 8001f24:	20000aa4 	.word	0x20000aa4
 8001f28:	20000aa8 	.word	0x20000aa8
 8001f2c:	2000001c 	.word	0x2000001c
 8001f30:	2000000c 	.word	0x2000000c
 8001f34:	0800b5f0 	.word	0x0800b5f0
 8001f38:	0800b66c 	.word	0x0800b66c
 8001f3c:	2000048f 	.word	0x2000048f

08001f40 <transmit_packet>:

uint16_t transmit_packet(	uint8_t *T_packet,		//w
							uint8_t *T_data,		//r
							uint8_t *dest_add,		//r
							uint16_t datanum)		//r
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	807b      	strh	r3, [r7, #2]
	uint16_t i,length; 	//the length of data for checksum
	uint8_t check=0x00;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	757b      	strb	r3, [r7, #21]

	/*Write Packet Length to Packet*/
	uint16_t packet_length=datanum+18;				// 18 = the number of packets that are not rf data
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	3312      	adds	r3, #18
 8001f56:	827b      	strh	r3, [r7, #18]
	length=packet_length-4;							// length for checksum
 8001f58:	8a7b      	ldrh	r3, [r7, #18]
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	823b      	strh	r3, [r7, #16]
	T_packet[0]=0x7E;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	227e      	movs	r2, #126	@ 0x7e
 8001f62:	701a      	strb	r2, [r3, #0]
	T_packet[2]=(unsigned char)(length)&0x00ff;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3302      	adds	r3, #2
 8001f68:	8a3a      	ldrh	r2, [r7, #16]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
	T_packet[1]=(unsigned char)(length>>8)&0x00ff;
 8001f6e:	8a3b      	ldrh	r3, [r7, #16]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
	T_packet[3]=0x10;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3303      	adds	r3, #3
 8001f80:	2210      	movs	r2, #16
 8001f82:	701a      	strb	r2, [r3, #0]
	T_packet[4]=0x00;		//0x01 for notification
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3304      	adds	r3, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
	T_packet[13]=0xFF;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	330d      	adds	r3, #13
 8001f90:	22ff      	movs	r2, #255	@ 0xff
 8001f92:	701a      	strb	r2, [r3, #0]
	T_packet[14]=0xFE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	330e      	adds	r3, #14
 8001f98:	22fe      	movs	r2, #254	@ 0xfe
 8001f9a:	701a      	strb	r2, [r3, #0]
	T_packet[15]=0x00;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	330f      	adds	r3, #15
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
	T_packet[16]=0x00;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3310      	adds	r3, #16
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

	/*Write Destination Address to Packet*/
	for(i=0;i<8;i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	82fb      	strh	r3, [r7, #22]
 8001fb0:	e00b      	b.n	8001fca <transmit_packet+0x8a>
	{
		T_packet[i+5]=dest_add[i];
 8001fb2:	8afb      	ldrh	r3, [r7, #22]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	441a      	add	r2, r3
 8001fb8:	8afb      	ldrh	r3, [r7, #22]
 8001fba:	3305      	adds	r3, #5
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	440b      	add	r3, r1
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	701a      	strb	r2, [r3, #0]
	for(i=0;i<8;i++)
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	82fb      	strh	r3, [r7, #22]
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d9f0      	bls.n	8001fb2 <transmit_packet+0x72>
	}

  	/*Write RF Data to Packet*/
	for(i=0;i<datanum;i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	82fb      	strh	r3, [r7, #22]
 8001fd4:	e00b      	b.n	8001fee <transmit_packet+0xae>
	{
		T_packet[i+17]=T_data[i];
 8001fd6:	8afb      	ldrh	r3, [r7, #22]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	441a      	add	r2, r3
 8001fdc:	8afb      	ldrh	r3, [r7, #22]
 8001fde:	3311      	adds	r3, #17
 8001fe0:	68f9      	ldr	r1, [r7, #12]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
	for(i=0;i<datanum;i++)
 8001fe8:	8afb      	ldrh	r3, [r7, #22]
 8001fea:	3301      	adds	r3, #1
 8001fec:	82fb      	strh	r3, [r7, #22]
 8001fee:	8afa      	ldrh	r2, [r7, #22]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d3ef      	bcc.n	8001fd6 <transmit_packet+0x96>
	}

	/*Calculate Checksum*/
	for(i=0;i<length;i++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	82fb      	strh	r3, [r7, #22]
 8001ffa:	e00a      	b.n	8002012 <transmit_packet+0xd2>
		{
			check=(uint8_t)(check+T_packet[i+3]);
 8001ffc:	8afb      	ldrh	r3, [r7, #22]
 8001ffe:	3303      	adds	r3, #3
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	7d7b      	ldrb	r3, [r7, #21]
 8002008:	4413      	add	r3, r2
 800200a:	757b      	strb	r3, [r7, #21]
	for(i=0;i<length;i++)
 800200c:	8afb      	ldrh	r3, [r7, #22]
 800200e:	3301      	adds	r3, #1
 8002010:	82fb      	strh	r3, [r7, #22]
 8002012:	8afa      	ldrh	r2, [r7, #22]
 8002014:	8a3b      	ldrh	r3, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d3f0      	bcc.n	8001ffc <transmit_packet+0xbc>
		}
	check=0xFF-check;
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	43db      	mvns	r3, r3
 800201e:	757b      	strb	r3, [r7, #21]
	T_packet[packet_length-1]=check;
 8002020:	8a7b      	ldrh	r3, [r7, #18]
 8002022:	3b01      	subs	r3, #1
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	7d7a      	ldrb	r2, [r7, #21]
 800202a:	701a      	strb	r2, [r3, #0]
	return packet_length;
 800202c:	8a7b      	ldrh	r3, [r7, #18]
}
 800202e:	4618      	mov	r0, r3
 8002030:	371c      	adds	r7, #28
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <read_transmit_telemetry>:

void read_transmit_telemetry (){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	read_sensors();
 8002040:	f7ff fd9c 	bl	8001b7c <read_sensors>

	if (gps_time_sec != prev_time){
 8002044:	4b3c      	ldr	r3, [pc, #240]	@ (8002138 <read_transmit_telemetry+0xfc>)
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <read_transmit_telemetry+0x100>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d071      	beq.n	8002134 <read_transmit_telemetry+0xf8>

		//
		if (prev_alt > altitude) {
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <read_transmit_telemetry+0x104>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <read_transmit_telemetry+0x108>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	dd05      	ble.n	8002072 <read_transmit_telemetry+0x36>
			descending_count++;
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <read_transmit_telemetry+0x10c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3301      	adds	r3, #1
 800206c:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <read_transmit_telemetry+0x10c>)
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	e002      	b.n	8002078 <read_transmit_telemetry+0x3c>
		}
		else {
			descending_count = 0;
 8002072:	4b35      	ldr	r3, [pc, #212]	@ (8002148 <read_transmit_telemetry+0x10c>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
		}

		// Handle Mission Time
		mission_time_sec++;
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <read_transmit_telemetry+0x110>)
 800207a:	f993 3000 	ldrsb.w	r3, [r3]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	b25a      	sxtb	r2, r3
 8002086:	4b31      	ldr	r3, [pc, #196]	@ (800214c <read_transmit_telemetry+0x110>)
 8002088:	701a      	strb	r2, [r3, #0]
		if ( mission_time_sec >= 60 ){
 800208a:	4b30      	ldr	r3, [pc, #192]	@ (800214c <read_transmit_telemetry+0x110>)
 800208c:	f993 3000 	ldrsb.w	r3, [r3]
 8002090:	2b3b      	cmp	r3, #59	@ 0x3b
 8002092:	dd11      	ble.n	80020b8 <read_transmit_telemetry+0x7c>
			mission_time_sec -= 60;
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <read_transmit_telemetry+0x110>)
 8002096:	f993 3000 	ldrsb.w	r3, [r3]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3b3c      	subs	r3, #60	@ 0x3c
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b25a      	sxtb	r2, r3
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <read_transmit_telemetry+0x110>)
 80020a4:	701a      	strb	r2, [r3, #0]
			mission_time_min += 1;
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <read_transmit_telemetry+0x114>)
 80020a8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	b25a      	sxtb	r2, r3
 80020b4:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <read_transmit_telemetry+0x114>)
 80020b6:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_min >= 60 ){
 80020b8:	4b25      	ldr	r3, [pc, #148]	@ (8002150 <read_transmit_telemetry+0x114>)
 80020ba:	f993 3000 	ldrsb.w	r3, [r3]
 80020be:	2b3b      	cmp	r3, #59	@ 0x3b
 80020c0:	dd11      	ble.n	80020e6 <read_transmit_telemetry+0xaa>
			mission_time_min -= 60;
 80020c2:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <read_transmit_telemetry+0x114>)
 80020c4:	f993 3000 	ldrsb.w	r3, [r3]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	3b3c      	subs	r3, #60	@ 0x3c
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	b25a      	sxtb	r2, r3
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <read_transmit_telemetry+0x114>)
 80020d2:	701a      	strb	r2, [r3, #0]
			mission_time_hr += 1;
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <read_transmit_telemetry+0x118>)
 80020d6:	f993 3000 	ldrsb.w	r3, [r3]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <read_transmit_telemetry+0x118>)
 80020e4:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_hr >= 24 ){
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <read_transmit_telemetry+0x118>)
 80020e8:	f993 3000 	ldrsb.w	r3, [r3]
 80020ec:	2b17      	cmp	r3, #23
 80020ee:	dd08      	ble.n	8002102 <read_transmit_telemetry+0xc6>
			mission_time_hr -= 24;
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <read_transmit_telemetry+0x118>)
 80020f2:	f993 3000 	ldrsb.w	r3, [r3]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3b18      	subs	r3, #24
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	b25a      	sxtb	r2, r3
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <read_transmit_telemetry+0x118>)
 8002100:	701a      	strb	r2, [r3, #0]
		}


		create_telemetry(tx_data, 0);
 8002102:	2100      	movs	r1, #0
 8002104:	4814      	ldr	r0, [pc, #80]	@ (8002158 <read_transmit_telemetry+0x11c>)
 8002106:	f7ff fdab 	bl	8001c60 <create_telemetry>
		transmit_packet(tx_packet, tx_data, GS_MAC_ADDR, tx_count);
 800210a:	4b14      	ldr	r3, [pc, #80]	@ (800215c <read_transmit_telemetry+0x120>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <read_transmit_telemetry+0x124>)
 8002110:	4911      	ldr	r1, [pc, #68]	@ (8002158 <read_transmit_telemetry+0x11c>)
 8002112:	4814      	ldr	r0, [pc, #80]	@ (8002164 <read_transmit_telemetry+0x128>)
 8002114:	f7ff ff14 	bl	8001f40 <transmit_packet>
		HAL_UART_Transmit(&huart2, tx_packet, sizeof(tx_packet), 100);
 8002118:	2364      	movs	r3, #100	@ 0x64
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	4911      	ldr	r1, [pc, #68]	@ (8002164 <read_transmit_telemetry+0x128>)
 800211e:	4812      	ldr	r0, [pc, #72]	@ (8002168 <read_transmit_telemetry+0x12c>)
 8002120:	f003 fdce 	bl	8005cc0 <HAL_UART_Transmit>

		prev_time = gps_time_sec;
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <read_transmit_telemetry+0xfc>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	4b04      	ldr	r3, [pc, #16]	@ (800213c <read_transmit_telemetry+0x100>)
 800212a:	701a      	strb	r2, [r3, #0]
		prev_alt = altitude;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <read_transmit_telemetry+0x108>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a03      	ldr	r2, [pc, #12]	@ (8002140 <read_transmit_telemetry+0x104>)
 8002132:	6013      	str	r3, [r2, #0]

	}
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000a9a 	.word	0x20000a9a
 800213c:	20000bb1 	.word	0x20000bb1
 8002140:	20000d4c 	.word	0x20000d4c
 8002144:	20000a60 	.word	0x20000a60
 8002148:	20000d50 	.word	0x20000d50
 800214c:	20000a5a 	.word	0x20000a5a
 8002150:	20000a59 	.word	0x20000a59
 8002154:	20000a58 	.word	0x20000a58
 8002158:	200002a0 	.word	0x200002a0
 800215c:	2000048f 	.word	0x2000048f
 8002160:	20000000 	.word	0x20000000
 8002164:	20000390 	.word	0x20000390
 8002168:	200004e4 	.word	0x200004e4

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002170:	f000 fcae 	bl	8002ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002174:	f000 f840 	bl	80021f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002178:	f000 f95c 	bl	8002434 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800217c:	f000 f900 	bl	8002380 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002180:	f000 f928 	bl	80023d4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8002184:	f000 f8a4 	bl	80022d0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002188:	f000 f8d0 	bl	800232c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 800218c:	2232      	movs	r2, #50	@ 0x32
 800218e:	4914      	ldr	r1, [pc, #80]	@ (80021e0 <main+0x74>)
 8002190:	4814      	ldr	r0, [pc, #80]	@ (80021e4 <main+0x78>)
 8002192:	f003 fe20 	bl	8005dd6 <HAL_UARTEx_ReceiveToIdle_IT>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <main+0x7c>)
 800219c:	701a      	strb	r2, [r3, #0]

  init_sensors();
 800219e:	f7ff fcfb 	bl	8001b98 <init_sensors>
  init_commands();
 80021a2:	f7ff fd07 	bl	8001bb4 <init_commands>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_sensors();
 80021a6:	f7ff fce9 	bl	8001b7c <read_sensors>
	  // Control Telemetry
	  if (telemetry_status == 1) {
 80021aa:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <main+0x80>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <main+0x4a>
		  read_transmit_telemetry();
 80021b2:	f7ff ff43 	bl	800203c <read_transmit_telemetry>
	  }

	  // Control Beacon
	  if (beacon_status == 1) {
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <main+0x84>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <main+0x5e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	2110      	movs	r1, #16
 80021c2:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <main+0x88>)
 80021c4:	f000 ff94 	bl	80030f0 <HAL_GPIO_WritePin>
 80021c8:	e004      	b.n	80021d4 <main+0x68>
	  }

	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2110      	movs	r1, #16
 80021ce:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <main+0x88>)
 80021d0:	f000 ff8e 	bl	80030f0 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80021d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021d8:	f000 fcec 	bl	8002bb4 <HAL_Delay>
	  read_sensors();
 80021dc:	e7e3      	b.n	80021a6 <main+0x3a>
 80021de:	bf00      	nop
 80021e0:	20000d60 	.word	0x20000d60
 80021e4:	200004e4 	.word	0x200004e4
 80021e8:	20000e5f 	.word	0x20000e5f
 80021ec:	20000d5c 	.word	0x20000d5c
 80021f0:	20000d58 	.word	0x20000d58
 80021f4:	40020400 	.word	0x40020400

080021f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b094      	sub	sp, #80	@ 0x50
 80021fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	2234      	movs	r2, #52	@ 0x34
 8002204:	2100      	movs	r1, #0
 8002206:	4618      	mov	r0, r3
 8002208:	f006 f8cf 	bl	80083aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220c:	f107 0308 	add.w	r3, r7, #8
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	4b29      	ldr	r3, [pc, #164]	@ (80022c8 <SystemClock_Config+0xd0>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4a28      	ldr	r2, [pc, #160]	@ (80022c8 <SystemClock_Config+0xd0>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	@ 0x40
 800222c:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <SystemClock_Config+0xd0>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002238:	2300      	movs	r3, #0
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <SystemClock_Config+0xd4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a22      	ldr	r2, [pc, #136]	@ (80022cc <SystemClock_Config+0xd4>)
 8002242:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b20      	ldr	r3, [pc, #128]	@ (80022cc <SystemClock_Config+0xd4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002254:	2301      	movs	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002258:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800225c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225e:	2302      	movs	r3, #2
 8002260:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002262:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002266:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002268:	2308      	movs	r3, #8
 800226a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 800226c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002272:	2304      	movs	r3, #4
 8002274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002276:	2308      	movs	r3, #8
 8002278:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800227a:	2302      	movs	r3, #2
 800227c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fa48 	bl	8005718 <HAL_RCC_OscConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800228e:	f000 f98d 	bl	80025ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002292:	230f      	movs	r3, #15
 8002294:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002296:	2302      	movs	r3, #2
 8002298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800229e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	2103      	movs	r1, #3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fe44 	bl	8004f3c <HAL_RCC_ClockConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80022ba:	f000 f977 	bl	80025ac <Error_Handler>
  }
}
 80022be:	bf00      	nop
 80022c0:	3750      	adds	r7, #80	@ 0x50
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000

080022d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022d4:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022d6:	4a13      	ldr	r2, [pc, #76]	@ (8002324 <MX_I2C2_Init+0x54>)
 80022d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022dc:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <MX_I2C2_Init+0x58>)
 80022de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <MX_I2C2_Init+0x50>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002300:	4b07      	ldr	r3, [pc, #28]	@ (8002320 <MX_I2C2_Init+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <MX_I2C2_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800230c:	4804      	ldr	r0, [pc, #16]	@ (8002320 <MX_I2C2_Init+0x50>)
 800230e:	f000 ff09 	bl	8003124 <HAL_I2C_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002318:	f000 f948 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000490 	.word	0x20000490
 8002324:	40005800 	.word	0x40005800
 8002328:	000186a0 	.word	0x000186a0

0800232c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <MX_USART2_UART_Init+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	@ (8002378 <MX_USART2_UART_Init+0x4c>)
 8002364:	f003 fc5c 	bl	8005c20 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800236e:	f000 f91d 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	200004e4 	.word	0x200004e4
 800237c:	40004400 	.word	0x40004400

08002380 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <MX_USART3_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	@ (80023cc <MX_USART3_UART_Init+0x4c>)
 80023b8:	f003 fc32 	bl	8005c20 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f000 f8f3 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000052c 	.word	0x2000052c
 80023d0:	40004800 	.word	0x40004800

080023d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023e2:	2206      	movs	r2, #6
 80023e4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023e8:	2202      	movs	r2, #2
 80023ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80023f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002400:	2200      	movs	r2, #0
 8002402:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002406:	2200      	movs	r2, #0
 8002408:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800240c:	2201      	movs	r2, #1
 800240e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002412:	2201      	movs	r2, #1
 8002414:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002416:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002418:	2200      	movs	r2, #0
 800241a:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800241e:	f002 fc53 	bl	8004cc8 <HAL_PCD_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8002428:	f000 f8c0 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000574 	.word	0x20000574

08002434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	@ 0x30
 8002438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243a:	f107 031c 	add.w	r3, r7, #28
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	4b53      	ldr	r3, [pc, #332]	@ (800259c <MX_GPIO_Init+0x168>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a52      	ldr	r2, [pc, #328]	@ (800259c <MX_GPIO_Init+0x168>)
 8002454:	f043 0304 	orr.w	r3, r3, #4
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b50      	ldr	r3, [pc, #320]	@ (800259c <MX_GPIO_Init+0x168>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <MX_GPIO_Init+0x168>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	4a4b      	ldr	r2, [pc, #300]	@ (800259c <MX_GPIO_Init+0x168>)
 8002470:	f043 0320 	orr.w	r3, r3, #32
 8002474:	6313      	str	r3, [r2, #48]	@ 0x30
 8002476:	4b49      	ldr	r3, [pc, #292]	@ (800259c <MX_GPIO_Init+0x168>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b45      	ldr	r3, [pc, #276]	@ (800259c <MX_GPIO_Init+0x168>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a44      	ldr	r2, [pc, #272]	@ (800259c <MX_GPIO_Init+0x168>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b42      	ldr	r3, [pc, #264]	@ (800259c <MX_GPIO_Init+0x168>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <MX_GPIO_Init+0x168>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a3d      	ldr	r2, [pc, #244]	@ (800259c <MX_GPIO_Init+0x168>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <MX_GPIO_Init+0x168>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b37      	ldr	r3, [pc, #220]	@ (800259c <MX_GPIO_Init+0x168>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a36      	ldr	r2, [pc, #216]	@ (800259c <MX_GPIO_Init+0x168>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b34      	ldr	r3, [pc, #208]	@ (800259c <MX_GPIO_Init+0x168>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
 80024da:	4b30      	ldr	r3, [pc, #192]	@ (800259c <MX_GPIO_Init+0x168>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	4a2f      	ldr	r2, [pc, #188]	@ (800259c <MX_GPIO_Init+0x168>)
 80024e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <MX_GPIO_Init+0x168>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4b29      	ldr	r3, [pc, #164]	@ (800259c <MX_GPIO_Init+0x168>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a28      	ldr	r2, [pc, #160]	@ (800259c <MX_GPIO_Init+0x168>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b26      	ldr	r3, [pc, #152]	@ (800259c <MX_GPIO_Init+0x168>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002514:	4822      	ldr	r0, [pc, #136]	@ (80025a0 <MX_GPIO_Init+0x16c>)
 8002516:	f000 fdeb 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	2140      	movs	r1, #64	@ 0x40
 800251e:	4821      	ldr	r0, [pc, #132]	@ (80025a4 <MX_GPIO_Init+0x170>)
 8002520:	f000 fde6 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002528:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800252a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800252e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	4619      	mov	r1, r3
 800253a:	481b      	ldr	r0, [pc, #108]	@ (80025a8 <MX_GPIO_Init+0x174>)
 800253c:	f000 fc44 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002540:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002546:	2301      	movs	r3, #1
 8002548:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	2300      	movs	r3, #0
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	4619      	mov	r1, r3
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <MX_GPIO_Init+0x16c>)
 800255a:	f000 fc35 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800255e:	2340      	movs	r3, #64	@ 0x40
 8002560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	4619      	mov	r1, r3
 8002574:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <MX_GPIO_Init+0x170>)
 8002576:	f000 fc27 	bl	8002dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002586:	f107 031c 	add.w	r3, r7, #28
 800258a:	4619      	mov	r1, r3
 800258c:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <MX_GPIO_Init+0x170>)
 800258e:	f000 fc1b 	bl	8002dc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002592:	bf00      	nop
 8002594:	3730      	adds	r7, #48	@ 0x30
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40020800 	.word	0x40020800

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <Error_Handler+0x8>

080025b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <HAL_MspInit+0x4c>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a08      	ldr	r2, [pc, #32]	@ (8002604 <HAL_MspInit+0x4c>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_I2C_MspInit+0x84>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12b      	bne.n	8002682 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	4a17      	ldr	r2, [pc, #92]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 8002634:	f043 0320 	orr.w	r3, r3, #32
 8002638:	6313      	str	r3, [r2, #48]	@ 0x30
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002646:	2303      	movs	r3, #3
 8002648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264a:	2312      	movs	r3, #18
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002656:	2304      	movs	r3, #4
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	480c      	ldr	r0, [pc, #48]	@ (8002694 <HAL_I2C_MspInit+0x8c>)
 8002662:	f000 fbb1 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 8002670:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002674:	6413      	str	r3, [r2, #64]	@ 0x40
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_I2C_MspInit+0x88>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	@ 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40005800 	.word	0x40005800
 8002690:	40023800 	.word	0x40023800
 8002694:	40021400 	.word	0x40021400

08002698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	@ 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a32      	ldr	r2, [pc, #200]	@ (8002780 <HAL_UART_MspInit+0xe8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12c      	bne.n	8002714 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	4a30      	ldr	r2, [pc, #192]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <HAL_UART_MspInit+0xec>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026f2:	2360      	movs	r3, #96	@ 0x60
 80026f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002702:	2307      	movs	r3, #7
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	4619      	mov	r1, r3
 800270c:	481e      	ldr	r0, [pc, #120]	@ (8002788 <HAL_UART_MspInit+0xf0>)
 800270e:	f000 fb5b 	bl	8002dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002712:	e031      	b.n	8002778 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_UART_MspInit+0xf4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d12c      	bne.n	8002778 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <HAL_UART_MspInit+0xec>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <HAL_UART_MspInit+0xec>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <HAL_UART_MspInit+0xec>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_UART_MspInit+0xec>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <HAL_UART_MspInit+0xec>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_UART_MspInit+0xec>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002756:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002764:	2303      	movs	r3, #3
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002768:	2307      	movs	r3, #7
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	4619      	mov	r1, r3
 8002772:	4805      	ldr	r0, [pc, #20]	@ (8002788 <HAL_UART_MspInit+0xf0>)
 8002774:	f000 fb28 	bl	8002dc8 <HAL_GPIO_Init>
}
 8002778:	bf00      	nop
 800277a:	3730      	adds	r7, #48	@ 0x30
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40004400 	.word	0x40004400
 8002784:	40023800 	.word	0x40023800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40004800 	.word	0x40004800

08002790 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b098      	sub	sp, #96	@ 0x60
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	223c      	movs	r2, #60	@ 0x3c
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f005 fdfa 	bl	80083aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027be:	d14d      	bne.n	800285c <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027c0:	2320      	movs	r3, #32
 80027c2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80027c4:	2300      	movs	r3, #0
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fdd5 	bl	800537c <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80027d8:	f7ff fee8 	bl	80025ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027f8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80027fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800280a:	230a      	movs	r3, #10
 800280c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002812:	4619      	mov	r1, r3
 8002814:	4814      	ldr	r0, [pc, #80]	@ (8002868 <HAL_PCD_MspInit+0xd8>)
 8002816:	f000 fad7 	bl	8002dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800281a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002828:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800282c:	4619      	mov	r1, r3
 800282e:	480e      	ldr	r0, [pc, #56]	@ (8002868 <HAL_PCD_MspInit+0xd8>)
 8002830:	f000 faca 	bl	8002dc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 8002836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002838:	4a0a      	ldr	r2, [pc, #40]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 800283a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	4a06      	ldr	r2, [pc, #24]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 800284a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800284e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <HAL_PCD_MspInit+0xd4>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800285c:	bf00      	nop
 800285e:	3760      	adds	r7, #96	@ 0x60
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000

0800286c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <NMI_Handler+0x4>

08002874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <HardFault_Handler+0x4>

0800287c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <MemManage_Handler+0x4>

08002884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <BusFault_Handler+0x4>

0800288c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <UsageFault_Handler+0x4>

08002894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c2:	f000 f957 	bl	8002b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_kill>:

int _kill(int pid, int sig)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028e4:	f005 fdc6 	bl	8008474 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2216      	movs	r2, #22
 80028ec:	601a      	str	r2, [r3, #0]
  return -1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_exit>:

void _exit (int status)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002902:	f04f 31ff 	mov.w	r1, #4294967295
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffe7 	bl	80028da <_kill>
  while (1) {}    /* Make sure we hang here */
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <_exit+0x12>

08002910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e00a      	b.n	8002938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002922:	f3af 8000 	nop.w
 8002926:	4601      	mov	r1, r0
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	60ba      	str	r2, [r7, #8]
 800292e:	b2ca      	uxtb	r2, r1
 8002930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	3301      	adds	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	dbf0      	blt.n	8002922 <_read+0x12>
  }

  return len;
 8002940:	687b      	ldr	r3, [r7, #4]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	e009      	b.n	8002970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3301      	adds	r3, #1
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	429a      	cmp	r2, r3
 8002976:	dbf1      	blt.n	800295c <_write+0x12>
  }
  return len;
 8002978:	687b      	ldr	r3, [r7, #4]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <_close>:

int _close(int file)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029aa:	605a      	str	r2, [r3, #4]
  return 0;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_isatty>:

int _isatty(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <_sbrk+0x5c>)
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <_sbrk+0x60>)
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <_sbrk+0x64>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a08:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <_sbrk+0x64>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <_sbrk+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0e:	4b10      	ldr	r3, [pc, #64]	@ (8002a50 <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d207      	bcs.n	8002a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a1c:	f005 fd2a 	bl	8008474 <__errno>
 8002a20:	4603      	mov	r3, r0
 8002a22:	220c      	movs	r2, #12
 8002a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	e009      	b.n	8002a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a32:	4b07      	ldr	r3, [pc, #28]	@ (8002a50 <_sbrk+0x64>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	4a05      	ldr	r2, [pc, #20]	@ (8002a50 <_sbrk+0x64>)
 8002a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20040000 	.word	0x20040000
 8002a4c:	00000400 	.word	0x00000400
 8002a50:	20000e60 	.word	0x20000e60
 8002a54:	20000fb8 	.word	0x20000fb8

08002a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <SystemInit+0x20>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	4a05      	ldr	r2, [pc, #20]	@ (8002a78 <SystemInit+0x20>)
 8002a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002a7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a80:	f7ff ffea 	bl	8002a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a84:	480c      	ldr	r0, [pc, #48]	@ (8002ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aaa:	f005 fce9 	bl	8008480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aae:	f7ff fb5d 	bl	800216c <main>
  bx  lr    
 8002ab2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ab4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002abc:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8002ac0:	0800bbf0 	.word	0x0800bbf0
  ldr r2, =_sbss
 8002ac4:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8002ac8:	20000fb4 	.word	0x20000fb4

08002acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC_IRQHandler>
	...

08002ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <HAL_Init+0x40>)
 8002ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b10 <HAL_Init+0x40>)
 8002ae6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <HAL_Init+0x40>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af8:	2003      	movs	r0, #3
 8002afa:	f000 f931 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f808 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b04:	f7ff fd58 	bl	80025b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_InitTick+0x54>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <HAL_InitTick+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f93b 	bl	8002dae <HAL_SYSTICK_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00e      	b.n	8002b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d80a      	bhi.n	8002b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f000 f911 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b54:	4a06      	ldr	r2, [pc, #24]	@ (8002b70 <HAL_InitTick+0x5c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200000b0 	.word	0x200000b0
 8002b6c:	200000b8 	.word	0x200000b8
 8002b70:	200000b4 	.word	0x200000b4

08002b74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <HAL_IncTick+0x20>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_IncTick+0x24>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_IncTick+0x24>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200000b8 	.word	0x200000b8
 8002b98:	20000e64 	.word	0x20000e64

08002b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ba0:	4b03      	ldr	r3, [pc, #12]	@ (8002bb0 <HAL_GetTick+0x14>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000e64 	.word	0x20000e64

08002bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff ffee 	bl	8002b9c <HAL_GetTick>
 8002bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d005      	beq.n	8002bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_Delay+0x44>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bda:	bf00      	nop
 8002bdc:	f7ff ffde 	bl	8002b9c <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d8f7      	bhi.n	8002bdc <HAL_Delay+0x28>
  {
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200000b8 	.word	0x200000b8

08002bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c2e:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <__NVIC_SetPriorityGrouping+0x44>)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	60d3      	str	r3, [r2, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <__NVIC_GetPriorityGrouping+0x18>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	f003 0307 	and.w	r3, r3, #7
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	@ 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	@ 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff47 	bl	8002bfc <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff5c 	bl	8002c44 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ffb0 	bl	8002d1c <SysTick_Config>
 8002dbc:	4603      	mov	r3, r0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	@ 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e165      	b.n	80030b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4013      	ands	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f040 8154 	bne.w	80030aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d005      	beq.n	8002e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d130      	bne.n	8002e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	2203      	movs	r2, #3
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e50:	2201      	movs	r2, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 0201 	and.w	r2, r3, #1
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d017      	beq.n	8002eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2203      	movs	r2, #3
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d123      	bne.n	8002f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	08da      	lsrs	r2, r3, #3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3208      	adds	r2, #8
 8002ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	69b9      	ldr	r1, [r7, #24]
 8002f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	2203      	movs	r2, #3
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0203 	and.w	r2, r3, #3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80ae 	beq.w	80030aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	4b5d      	ldr	r3, [pc, #372]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a5c      	ldr	r2, [pc, #368]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80030c8 <HAL_GPIO_Init+0x300>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4f      	ldr	r2, [pc, #316]	@ (80030d0 <HAL_GPIO_Init+0x308>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d025      	beq.n	8002fe2 <HAL_GPIO_Init+0x21a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4e      	ldr	r2, [pc, #312]	@ (80030d4 <HAL_GPIO_Init+0x30c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <HAL_GPIO_Init+0x216>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80030d8 <HAL_GPIO_Init+0x310>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x212>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80030dc <HAL_GPIO_Init+0x314>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80030e0 <HAL_GPIO_Init+0x318>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x20a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80030e4 <HAL_GPIO_Init+0x31c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x206>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a49      	ldr	r2, [pc, #292]	@ (80030e8 <HAL_GPIO_Init+0x320>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x202>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00c      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fca:	2307      	movs	r3, #7
 8002fcc:	e00a      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fce:	2305      	movs	r3, #5
 8002fd0:	e008      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e004      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_GPIO_Init+0x21c>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f002 0203 	and.w	r2, r2, #3
 8002fea:	0092      	lsls	r2, r2, #2
 8002fec:	4093      	lsls	r3, r2
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff4:	4935      	ldr	r1, [pc, #212]	@ (80030cc <HAL_GPIO_Init+0x304>)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	089b      	lsrs	r3, r3, #2
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b3a      	ldr	r3, [pc, #232]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a31      	ldr	r2, [pc, #196]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b2f      	ldr	r3, [pc, #188]	@ (80030ec <HAL_GPIO_Init+0x324>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003056:	4b25      	ldr	r3, [pc, #148]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_GPIO_Init+0x324>)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_GPIO_Init+0x324>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	43db      	mvns	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030a4:	4a11      	ldr	r2, [pc, #68]	@ (80030ec <HAL_GPIO_Init+0x324>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3301      	adds	r3, #1
 80030ae:	61fb      	str	r3, [r7, #28]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f67f ae96 	bls.w	8002de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40020000 	.word	0x40020000
 80030d4:	40020400 	.word	0x40020400
 80030d8:	40020800 	.word	0x40020800
 80030dc:	40020c00 	.word	0x40020c00
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40021400 	.word	0x40021400
 80030e8:	40021800 	.word	0x40021800
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e12b      	b.n	800338e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fa5c 	bl	8002608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	@ 0x24
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003176:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003186:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003188:	f002 f8d0 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800318c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a81      	ldr	r2, [pc, #516]	@ (8003398 <HAL_I2C_Init+0x274>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d807      	bhi.n	80031a8 <HAL_I2C_Init+0x84>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4a80      	ldr	r2, [pc, #512]	@ (800339c <HAL_I2C_Init+0x278>)
 800319c:	4293      	cmp	r3, r2
 800319e:	bf94      	ite	ls
 80031a0:	2301      	movls	r3, #1
 80031a2:	2300      	movhi	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e006      	b.n	80031b6 <HAL_I2C_Init+0x92>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a7d      	ldr	r2, [pc, #500]	@ (80033a0 <HAL_I2C_Init+0x27c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	bf94      	ite	ls
 80031b0:	2301      	movls	r3, #1
 80031b2:	2300      	movhi	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0e7      	b.n	800338e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a78      	ldr	r2, [pc, #480]	@ (80033a4 <HAL_I2C_Init+0x280>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	0c9b      	lsrs	r3, r3, #18
 80031c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	@ (8003398 <HAL_I2C_Init+0x274>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d802      	bhi.n	80031f8 <HAL_I2C_Init+0xd4>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	e009      	b.n	800320c <HAL_I2C_Init+0xe8>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	4a69      	ldr	r2, [pc, #420]	@ (80033a8 <HAL_I2C_Init+0x284>)
 8003204:	fba2 2303 	umull	r2, r3, r2, r3
 8003208:	099b      	lsrs	r3, r3, #6
 800320a:	3301      	adds	r3, #1
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	430b      	orrs	r3, r1
 8003212:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800321e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	495c      	ldr	r1, [pc, #368]	@ (8003398 <HAL_I2C_Init+0x274>)
 8003228:	428b      	cmp	r3, r1
 800322a:	d819      	bhi.n	8003260 <HAL_I2C_Init+0x13c>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e59      	subs	r1, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fbb1 f3f3 	udiv	r3, r1, r3
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003240:	400b      	ands	r3, r1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_I2C_Init+0x138>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1e59      	subs	r1, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fbb1 f3f3 	udiv	r3, r1, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	e051      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 800325c:	2304      	movs	r3, #4
 800325e:	e04f      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <HAL_I2C_Init+0x168>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e012      	b.n	80032b2 <HAL_I2C_Init+0x18e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1e58      	subs	r0, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	0099      	lsls	r1, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a2:	3301      	adds	r3, #1
 80032a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf0c      	ite	eq
 80032ac:	2301      	moveq	r3, #1
 80032ae:	2300      	movne	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_I2C_Init+0x196>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e022      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10e      	bne.n	80032e0 <HAL_I2C_Init+0x1bc>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e58      	subs	r0, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	440b      	add	r3, r1
 80032d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032de:	e00f      	b.n	8003300 <HAL_I2C_Init+0x1dc>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	0099      	lsls	r1, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6809      	ldr	r1, [r1, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800332e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6911      	ldr	r1, [r2, #16]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68d2      	ldr	r2, [r2, #12]
 800333a:	4311      	orrs	r1, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	000186a0 	.word	0x000186a0
 800339c:	001e847f 	.word	0x001e847f
 80033a0:	003d08ff 	.word	0x003d08ff
 80033a4:	431bde83 	.word	0x431bde83
 80033a8:	10624dd3 	.word	0x10624dd3

080033ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	461a      	mov	r2, r3
 80033b8:	460b      	mov	r3, r1
 80033ba:	817b      	strh	r3, [r7, #10]
 80033bc:	4613      	mov	r3, r2
 80033be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7ff fbec 	bl	8002b9c <HAL_GetTick>
 80033c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 80e0 	bne.w	8003594 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2319      	movs	r3, #25
 80033da:	2201      	movs	r2, #1
 80033dc:	4970      	ldr	r1, [pc, #448]	@ (80035a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f001 fa3c 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
 80033ec:	e0d3      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2C_Master_Transmit+0x50>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e0cc      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d007      	beq.n	8003422 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2221      	movs	r2, #33	@ 0x21
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2210      	movs	r2, #16
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	893a      	ldrh	r2, [r7, #8]
 8003452:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a50      	ldr	r2, [pc, #320]	@ (80035a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003462:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003464:	8979      	ldrh	r1, [r7, #10]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 ff28 	bl	80042c0 <I2C_MasterRequestWrite>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e08d      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	613b      	str	r3, [r7, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003490:	e066      	b.n	8003560 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f001 fafa 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e06b      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d11b      	bne.n	8003534 <HAL_I2C_Master_Transmit+0x188>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d017      	beq.n	8003534 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	6a39      	ldr	r1, [r7, #32]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f001 faf1 	bl	8004b20 <I2C_WaitOnBTFFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00d      	beq.n	8003560 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	2b04      	cmp	r3, #4
 800354a:	d107      	bne.n	800355c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e01a      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d194      	bne.n	8003492 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
 8003592:	e000      	b.n	8003596 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
  }
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	00100002 	.word	0x00100002
 80035a4:	ffff0000 	.word	0xffff0000

080035a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	@ 0x30
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	461a      	mov	r2, r3
 80035b4:	460b      	mov	r3, r1
 80035b6:	817b      	strh	r3, [r7, #10]
 80035b8:	4613      	mov	r3, r2
 80035ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035bc:	f7ff faee 	bl	8002b9c <HAL_GetTick>
 80035c0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	f040 8217 	bne.w	80039fe <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2319      	movs	r3, #25
 80035d6:	2201      	movs	r2, #1
 80035d8:	497c      	ldr	r1, [pc, #496]	@ (80037cc <HAL_I2C_Master_Receive+0x224>)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f001 f93e 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
 80035e8:	e20a      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_I2C_Master_Receive+0x50>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e203      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d007      	beq.n	800361e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800362c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2222      	movs	r2, #34	@ 0x22
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2210      	movs	r2, #16
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	893a      	ldrh	r2, [r7, #8]
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a5c      	ldr	r2, [pc, #368]	@ (80037d0 <HAL_I2C_Master_Receive+0x228>)
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 feac 	bl	80043c4 <I2C_MasterRequestRead>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e1c4      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367a:	2b00      	cmp	r3, #0
 800367c:	d113      	bne.n	80036a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	623b      	str	r3, [r7, #32]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	623b      	str	r3, [r7, #32]
 8003692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e198      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d11b      	bne.n	80036e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e178      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d11b      	bne.n	8003726 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	e158      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800374c:	e144      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003752:	2b03      	cmp	r3, #3
 8003754:	f200 80f1 	bhi.w	800393a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	2b01      	cmp	r3, #1
 800375e:	d123      	bne.n	80037a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f001 fa23 	bl	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e145      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037a6:	e117      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d14e      	bne.n	800384e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	4906      	ldr	r1, [pc, #24]	@ (80037d4 <HAL_I2C_Master_Receive+0x22c>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f001 f84e 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e11a      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
 80037ca:	bf00      	nop
 80037cc:	00100002 	.word	0x00100002
 80037d0:	ffff0000 	.word	0xffff0000
 80037d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800384c:	e0c4      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	2200      	movs	r2, #0
 8003856:	496c      	ldr	r1, [pc, #432]	@ (8003a08 <HAL_I2C_Master_Receive+0x460>)
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f000 ffff 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cb      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	2200      	movs	r2, #0
 80038b2:	4955      	ldr	r1, [pc, #340]	@ (8003a08 <HAL_I2C_Master_Receive+0x460>)
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 ffd1 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e09d      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003938:	e04e      	b.n	80039d8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f001 f936 	bl	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e058      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	b2d2      	uxtb	r2, r2
 800395a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d124      	bne.n	80039d8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f aeb6 	bne.w	800374e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3728      	adds	r7, #40	@ 0x28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	00010004 	.word	0x00010004

08003a0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a26:	f7ff f8b9 	bl	8002b9c <HAL_GetTick>
 8003a2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	f040 80d9 	bne.w	8003bec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2319      	movs	r3, #25
 8003a40:	2201      	movs	r2, #1
 8003a42:	496d      	ldr	r1, [pc, #436]	@ (8003bf8 <HAL_I2C_Mem_Write+0x1ec>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 ff09 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0cc      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2C_Mem_Write+0x56>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e0c5      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d007      	beq.n	8003a88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2221      	movs	r2, #33	@ 0x21
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8003bfc <HAL_I2C_Mem_Write+0x1f0>)
 8003ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aca:	88f8      	ldrh	r0, [r7, #6]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fd40 	bl	8004560 <I2C_RequestMemoryWrite>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d052      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e081      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 ffce 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_I2C_Mem_Write+0x180>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1aa      	bne.n	8003aea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 ffc1 	bl	8004b20 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d107      	bne.n	8003bbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e016      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	00100002 	.word	0x00100002
 8003bfc:	ffff0000 	.word	0xffff0000

08003c00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	@ 0x30
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	817b      	strh	r3, [r7, #10]
 8003c12:	460b      	mov	r3, r1
 8003c14:	813b      	strh	r3, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c1a:	f7fe ffbf 	bl	8002b9c <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 8214 	bne.w	8004056 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2319      	movs	r3, #25
 8003c34:	2201      	movs	r2, #1
 8003c36:	497b      	ldr	r1, [pc, #492]	@ (8003e24 <HAL_I2C_Mem_Read+0x224>)
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fe0f 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
 8003c46:	e207      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_I2C_Mem_Read+0x56>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e200      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2222      	movs	r2, #34	@ 0x22
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2240      	movs	r2, #64	@ 0x40
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a5b      	ldr	r2, [pc, #364]	@ (8003e28 <HAL_I2C_Mem_Read+0x228>)
 8003cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fcdc 	bl	800468c <I2C_RequestMemoryRead>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1bc      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e190      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e170      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d11b      	bne.n	8003d8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	e150      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003da4:	e144      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	f200 80f1 	bhi.w	8003f92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d123      	bne.n	8003e00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fef7 	bl	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e145      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003dfe:	e117      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d14e      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	2200      	movs	r2, #0
 8003e10:	4906      	ldr	r1, [pc, #24]	@ (8003e2c <HAL_I2C_Mem_Read+0x22c>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fd22 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e11a      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
 8003e22:	bf00      	nop
 8003e24:	00100002 	.word	0x00100002
 8003e28:	ffff0000 	.word	0xffff0000
 8003e2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ea4:	e0c4      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eac:	2200      	movs	r2, #0
 8003eae:	496c      	ldr	r1, [pc, #432]	@ (8004060 <HAL_I2C_Mem_Read+0x460>)
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fcd3 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0cb      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4955      	ldr	r1, [pc, #340]	@ (8004060 <HAL_I2C_Mem_Read+0x460>)
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fca5 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09d      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f90:	e04e      	b.n	8004030 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fe0a 	bl	8004bb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e058      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d124      	bne.n	8004030 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d107      	bne.n	8003ffe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ffc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	f47f aeb6 	bne.w	8003da6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3728      	adds	r7, #40	@ 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	00010004 	.word	0x00010004

08004064 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004074:	f7fe fd92 	bl	8002b9c <HAL_GetTick>
 8004078:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 8111 	bne.w	80042ae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2319      	movs	r3, #25
 8004092:	2201      	movs	r2, #1
 8004094:	4988      	ldr	r1, [pc, #544]	@ (80042b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fbe0 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
 80040a4:	e104      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2C_IsDeviceReady+0x50>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0fd      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d007      	beq.n	80040da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2224      	movs	r2, #36	@ 0x24
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a70      	ldr	r2, [pc, #448]	@ (80042bc <HAL_I2C_IsDeviceReady+0x258>)
 80040fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2200      	movs	r2, #0
 8004116:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fb9e 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004134:	d103      	bne.n	800413e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0b6      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004150:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004152:	f7fe fd23 	bl	8002b9c <HAL_GetTick>
 8004156:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004186:	e025      	b.n	80041d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7fe fd08 	bl	8002b9c <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <HAL_I2C_IsDeviceReady+0x13a>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	22a0      	movs	r2, #160	@ 0xa0
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2ba0      	cmp	r3, #160	@ 0xa0
 80041de:	d005      	beq.n	80041ec <HAL_I2C_IsDeviceReady+0x188>
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_I2C_IsDeviceReady+0x188>
 80041e6:	7dbb      	ldrb	r3, [r7, #22]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0cd      	beq.n	8004188 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d129      	bne.n	8004256 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004210:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004212:	2300      	movs	r3, #0
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	613b      	str	r3, [r7, #16]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	2319      	movs	r3, #25
 800422e:	2201      	movs	r2, #1
 8004230:	4921      	ldr	r1, [pc, #132]	@ (80042b8 <HAL_I2C_IsDeviceReady+0x254>)
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 fb12 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e036      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e02c      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004264:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800426e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2319      	movs	r3, #25
 8004276:	2201      	movs	r2, #1
 8004278:	490f      	ldr	r1, [pc, #60]	@ (80042b8 <HAL_I2C_IsDeviceReady+0x254>)
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 faee 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e012      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	3301      	adds	r3, #1
 800428e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	f4ff af32 	bcc.w	80040fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3720      	adds	r7, #32
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	00100002 	.word	0x00100002
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	460b      	mov	r3, r1
 80042ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d006      	beq.n	80042ea <I2C_MasterRequestWrite+0x2a>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d003      	beq.n	80042ea <I2C_MasterRequestWrite+0x2a>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e8:	d108      	bne.n	80042fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	e00b      	b.n	8004314 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004300:	2b12      	cmp	r3, #18
 8004302:	d107      	bne.n	8004314 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004312:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fa9b 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00d      	beq.n	8004348 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800433a:	d103      	bne.n	8004344 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e035      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004350:	d108      	bne.n	8004364 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004352:	897b      	ldrh	r3, [r7, #10]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e01b      	b.n	800439c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004364:	897b      	ldrh	r3, [r7, #10]
 8004366:	11db      	asrs	r3, r3, #7
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f003 0306 	and.w	r3, r3, #6
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f063 030f 	orn	r3, r3, #15
 8004374:	b2da      	uxtb	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	490e      	ldr	r1, [pc, #56]	@ (80043bc <I2C_MasterRequestWrite+0xfc>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fae4 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e010      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004392:	897b      	ldrh	r3, [r7, #10]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4907      	ldr	r1, [pc, #28]	@ (80043c0 <I2C_MasterRequestWrite+0x100>)
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fad4 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	00010008 	.word	0x00010008
 80043c0:	00010002 	.word	0x00010002

080043c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d006      	beq.n	80043fe <I2C_MasterRequestRead+0x3a>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d003      	beq.n	80043fe <I2C_MasterRequestRead+0x3a>
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043fc:	d108      	bne.n	8004410 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e00b      	b.n	8004428 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004414:	2b11      	cmp	r3, #17
 8004416:	d107      	bne.n	8004428 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004426:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fa11 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00d      	beq.n	800445c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444e:	d103      	bne.n	8004458 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004456:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e079      	b.n	8004550 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004464:	d108      	bne.n	8004478 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004466:	897b      	ldrh	r3, [r7, #10]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]
 8004476:	e05f      	b.n	8004538 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	11db      	asrs	r3, r3, #7
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f063 030f 	orn	r3, r3, #15
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4930      	ldr	r1, [pc, #192]	@ (8004558 <I2C_MasterRequestRead+0x194>)
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa5a 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e054      	b.n	8004550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044a6:	897b      	ldrh	r3, [r7, #10]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4929      	ldr	r1, [pc, #164]	@ (800455c <I2C_MasterRequestRead+0x198>)
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fa4a 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e044      	b.n	8004550 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f9af 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00d      	beq.n	8004520 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004512:	d103      	bne.n	800451c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e017      	b.n	8004550 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004520:	897b      	ldrh	r3, [r7, #10]
 8004522:	11db      	asrs	r3, r3, #7
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0306 	and.w	r3, r3, #6
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f063 030e 	orn	r3, r3, #14
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4907      	ldr	r1, [pc, #28]	@ (800455c <I2C_MasterRequestRead+0x198>)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa06 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	00010008 	.word	0x00010008
 800455c:	00010002 	.word	0x00010002

08004560 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	461a      	mov	r2, r3
 800456e:	4603      	mov	r3, r0
 8004570:	817b      	strh	r3, [r7, #10]
 8004572:	460b      	mov	r3, r1
 8004574:	813b      	strh	r3, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004588:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	2200      	movs	r2, #0
 8004592:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f960 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b0:	d103      	bne.n	80045ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e05f      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045be:	897b      	ldrh	r3, [r7, #10]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	492d      	ldr	r1, [pc, #180]	@ (8004688 <I2C_RequestMemoryWrite+0x128>)
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f9bb 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e04c      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	6a39      	ldr	r1, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa46 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	2b04      	cmp	r3, #4
 8004610:	d107      	bne.n	8004622 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004620:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e02b      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800462c:	893b      	ldrh	r3, [r7, #8]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]
 8004636:	e021      	b.n	800467c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	0a1b      	lsrs	r3, r3, #8
 800463c:	b29b      	uxth	r3, r3
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fa20 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	2b04      	cmp	r3, #4
 800465c:	d107      	bne.n	800466e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800466c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e005      	b.n	800467e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	00010002 	.word	0x00010002

0800468c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	4603      	mov	r3, r0
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	460b      	mov	r3, r1
 80046a0:	813b      	strh	r3, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8c2 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00d      	beq.n	80046fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ec:	d103      	bne.n	80046f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0aa      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046fa:	897b      	ldrh	r3, [r7, #10]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	4952      	ldr	r1, [pc, #328]	@ (8004858 <I2C_RequestMemoryRead+0x1cc>)
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f91d 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e097      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004738:	6a39      	ldr	r1, [r7, #32]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f9a8 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b04      	cmp	r3, #4
 800474c:	d107      	bne.n	800475e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e076      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	611a      	str	r2, [r3, #16]
 8004772:	e021      	b.n	80047b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	b29b      	uxth	r3, r3
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f982 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004796:	2b04      	cmp	r3, #4
 8004798:	d107      	bne.n	80047aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e050      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047ae:	893b      	ldrh	r3, [r7, #8]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ba:	6a39      	ldr	r1, [r7, #32]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f967 	bl	8004a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00d      	beq.n	80047e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	2b04      	cmp	r3, #4
 80047ce:	d107      	bne.n	80047e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e035      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f82b 	bl	800485c <I2C_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481a:	d103      	bne.n	8004824 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e013      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004828:	897b      	ldrh	r3, [r7, #10]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	4906      	ldr	r1, [pc, #24]	@ (8004858 <I2C_RequestMemoryRead+0x1cc>)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f886 	bl	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010002 	.word	0x00010002

0800485c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800486c:	e048      	b.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d044      	beq.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004876:	f7fe f991 	bl	8002b9c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d139      	bne.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10d      	bne.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	43da      	mvns	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	e00c      	b.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	43da      	mvns	r2, r3
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4013      	ands	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d116      	bne.n	8004900 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	f043 0220 	orr.w	r2, r3, #32
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e023      	b.n	8004948 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b01      	cmp	r3, #1
 8004908:	d10d      	bne.n	8004926 <I2C_WaitOnFlagUntilTimeout+0xca>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	43da      	mvns	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4013      	ands	r3, r2
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	461a      	mov	r2, r3
 8004924:	e00c      	b.n	8004940 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf0c      	ite	eq
 8004938:	2301      	moveq	r3, #1
 800493a:	2300      	movne	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	429a      	cmp	r2, r3
 8004944:	d093      	beq.n	800486e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800495e:	e071      	b.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496e:	d123      	bne.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f043 0204 	orr.w	r2, r3, #4
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e067      	b.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049be:	d041      	beq.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c0:	f7fe f8ec 	bl	8002b9c <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d302      	bcc.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d136      	bne.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10c      	bne.n	80049fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	43da      	mvns	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4013      	ands	r3, r2
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bf14      	ite	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	2300      	moveq	r3, #0
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	e00b      	b.n	8004a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2301      	movne	r3, #1
 8004a0e:	2300      	moveq	r3, #0
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e021      	b.n	8004a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10c      	bne.n	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	e00b      	b.n	8004a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	43da      	mvns	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4013      	ands	r3, r2
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f47f af6d 	bne.w	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a9c:	e034      	b.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f8e3 	bl	8004c6a <I2C_IsAcknowledgeFailed>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e034      	b.n	8004b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d028      	beq.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fe f871 	bl	8002b9c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d11d      	bne.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad6:	2b80      	cmp	r3, #128	@ 0x80
 8004ad8:	d016      	beq.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e007      	b.n	8004b18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	2b80      	cmp	r3, #128	@ 0x80
 8004b14:	d1c3      	bne.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b2c:	e034      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f89b 	bl	8004c6a <I2C_IsAcknowledgeFailed>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e034      	b.n	8004ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d028      	beq.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fe f829 	bl	8002b9c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11d      	bne.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d016      	beq.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0220 	orr.w	r2, r3, #32
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e007      	b.n	8004ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d1c3      	bne.n	8004b2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bbc:	e049      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0310 	and.w	r3, r3, #16
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d119      	bne.n	8004c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0210 	mvn.w	r2, #16
 8004bd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e030      	b.n	8004c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7fd ffcc 	bl	8002b9c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11d      	bne.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d016      	beq.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e007      	b.n	8004c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d1ae      	bne.n	8004bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c80:	d11b      	bne.n	8004cba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f043 0204 	orr.w	r2, r3, #4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e108      	b.n	8004eec <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fd fd4b 	bl	8002790 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d08:	d102      	bne.n	8004d10 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 fc89 	bl	800662c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7c1a      	ldrb	r2, [r3, #16]
 8004d22:	f88d 2000 	strb.w	r2, [sp]
 8004d26:	3304      	adds	r3, #4
 8004d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2a:	f001 fc1b 	bl	8006564 <USB_CoreInit>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0d5      	b.n	8004eec <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fc81 	bl	800664e <USB_SetCurrentMode>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0c6      	b.n	8004eec <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
 8004d62:	e04a      	b.n	8004dfa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3315      	adds	r3, #21
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d78:	7bfa      	ldrb	r2, [r7, #15]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	3314      	adds	r3, #20
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d8c:	7bfa      	ldrb	r2, [r7, #15]
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	b298      	uxth	r0, r3
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	332e      	adds	r3, #46	@ 0x2e
 8004da0:	4602      	mov	r2, r0
 8004da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3318      	adds	r3, #24
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004db8:	7bfa      	ldrb	r2, [r7, #15]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	331c      	adds	r3, #28
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dcc:	7bfa      	ldrb	r2, [r7, #15]
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	3320      	adds	r3, #32
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	3324      	adds	r3, #36	@ 0x24
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	3301      	adds	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3af      	bcc.n	8004d64 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	e044      	b.n	8004e94 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e0a:	7bfa      	ldrb	r2, [r7, #15]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e20:	7bfa      	ldrb	r2, [r7, #15]
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	4613      	mov	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004e32:	7bfa      	ldrb	r2, [r7, #15]
 8004e34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	440b      	add	r3, r1
 8004e44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	3301      	adds	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	791b      	ldrb	r3, [r3, #4]
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d3b5      	bcc.n	8004e0a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7c1a      	ldrb	r2, [r3, #16]
 8004ea6:	f88d 2000 	strb.w	r2, [sp]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eae:	f001 fc1b 	bl	80066e8 <USB_DevInit>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e013      	b.n	8004eec <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	7b1b      	ldrb	r3, [r3, #12]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d102      	bne.n	8004ee0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f80a 	bl	8004ef4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f001 fdd6 	bl	8006a96 <USB_DevDisconnect>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	f043 0303 	orr.w	r3, r3, #3
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0cc      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f50:	4b68      	ldr	r3, [pc, #416]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d90c      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5e:	4b65      	ldr	r3, [pc, #404]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b63      	ldr	r3, [pc, #396]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4b59      	ldr	r3, [pc, #356]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a58      	ldr	r2, [pc, #352]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa8:	4b53      	ldr	r3, [pc, #332]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a52      	ldr	r2, [pc, #328]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b50      	ldr	r3, [pc, #320]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	494d      	ldr	r1, [pc, #308]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d044      	beq.n	800505c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d119      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d107      	bne.n	800500a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d109      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500a:	4b3b      	ldr	r3, [pc, #236]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e067      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4934      	ldr	r1, [pc, #208]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	4313      	orrs	r3, r2
 800502a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800502c:	f7fd fdb6 	bl	8002b9c <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005032:	e00a      	b.n	800504a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005034:	f7fd fdb2 	bl	8002b9c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e04f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504a:	4b2b      	ldr	r3, [pc, #172]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 020c 	and.w	r2, r3, #12
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	429a      	cmp	r2, r3
 800505a:	d1eb      	bne.n	8005034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800505c:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d20c      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b22      	ldr	r3, [pc, #136]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4916      	ldr	r1, [pc, #88]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ae:	4b12      	ldr	r3, [pc, #72]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	490e      	ldr	r1, [pc, #56]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050c2:	f000 f821 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c6:	4602      	mov	r2, r0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	490a      	ldr	r1, [pc, #40]	@ (80050fc <HAL_RCC_ClockConfig+0x1c0>)
 80050d4:	5ccb      	ldrb	r3, [r1, r3]
 80050d6:	fa22 f303 	lsr.w	r3, r2, r3
 80050da:	4a09      	ldr	r2, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1c4>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_RCC_ClockConfig+0x1c8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fd16 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0800b788 	.word	0x0800b788
 8005100:	200000b0 	.word	0x200000b0
 8005104:	200000b4 	.word	0x200000b4

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b094      	sub	sp, #80	@ 0x50
 800510e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005120:	4b79      	ldr	r3, [pc, #484]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d00d      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x40>
 800512c:	2b08      	cmp	r3, #8
 800512e:	f200 80e1 	bhi.w	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005136:	2b04      	cmp	r3, #4
 8005138:	d003      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x3a>
 800513a:	e0db      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800513c:	4b73      	ldr	r3, [pc, #460]	@ (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 800513e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005140:	e0db      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005142:	4b73      	ldr	r3, [pc, #460]	@ (8005310 <HAL_RCC_GetSysClockFreq+0x208>)
 8005144:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005146:	e0d8      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005148:	4b6f      	ldr	r3, [pc, #444]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005152:	4b6d      	ldr	r3, [pc, #436]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d063      	beq.n	8005226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515e:	4b6a      	ldr	r3, [pc, #424]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	099b      	lsrs	r3, r3, #6
 8005164:	2200      	movs	r2, #0
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005168:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005170:	633b      	str	r3, [r7, #48]	@ 0x30
 8005172:	2300      	movs	r3, #0
 8005174:	637b      	str	r3, [r7, #52]	@ 0x34
 8005176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f04f 0000 	mov.w	r0, #0
 8005182:	f04f 0100 	mov.w	r1, #0
 8005186:	0159      	lsls	r1, r3, #5
 8005188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518c:	0150      	lsls	r0, r2, #5
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4621      	mov	r1, r4
 8005194:	1a51      	subs	r1, r2, r1
 8005196:	6139      	str	r1, [r7, #16]
 8005198:	4629      	mov	r1, r5
 800519a:	eb63 0301 	sbc.w	r3, r3, r1
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051ac:	4659      	mov	r1, fp
 80051ae:	018b      	lsls	r3, r1, #6
 80051b0:	4651      	mov	r1, sl
 80051b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051b6:	4651      	mov	r1, sl
 80051b8:	018a      	lsls	r2, r1, #6
 80051ba:	4651      	mov	r1, sl
 80051bc:	ebb2 0801 	subs.w	r8, r2, r1
 80051c0:	4659      	mov	r1, fp
 80051c2:	eb63 0901 	sbc.w	r9, r3, r1
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051da:	4690      	mov	r8, r2
 80051dc:	4699      	mov	r9, r3
 80051de:	4623      	mov	r3, r4
 80051e0:	eb18 0303 	adds.w	r3, r8, r3
 80051e4:	60bb      	str	r3, [r7, #8]
 80051e6:	462b      	mov	r3, r5
 80051e8:	eb49 0303 	adc.w	r3, r9, r3
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051fa:	4629      	mov	r1, r5
 80051fc:	024b      	lsls	r3, r1, #9
 80051fe:	4621      	mov	r1, r4
 8005200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005204:	4621      	mov	r1, r4
 8005206:	024a      	lsls	r2, r1, #9
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	2200      	movs	r2, #0
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005218:	f7fb fd56 	bl	8000cc8 <__aeabi_uldivmod>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4613      	mov	r3, r2
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005224:	e058      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005226:	4b38      	ldr	r3, [pc, #224]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	099b      	lsrs	r3, r3, #6
 800522c:	2200      	movs	r2, #0
 800522e:	4618      	mov	r0, r3
 8005230:	4611      	mov	r1, r2
 8005232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
 800523c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	0159      	lsls	r1, r3, #5
 800524e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005252:	0150      	lsls	r0, r2, #5
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4641      	mov	r1, r8
 800525a:	ebb2 0a01 	subs.w	sl, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb63 0b01 	sbc.w	fp, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005278:	ebb2 040a 	subs.w	r4, r2, sl
 800527c:	eb63 050b 	sbc.w	r5, r3, fp
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	00eb      	lsls	r3, r5, #3
 800528a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528e:	00e2      	lsls	r2, r4, #3
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	4643      	mov	r3, r8
 8005296:	18e3      	adds	r3, r4, r3
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	464b      	mov	r3, r9
 800529c:	eb45 0303 	adc.w	r3, r5, r3
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ae:	4629      	mov	r1, r5
 80052b0:	028b      	lsls	r3, r1, #10
 80052b2:	4621      	mov	r1, r4
 80052b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b8:	4621      	mov	r1, r4
 80052ba:	028a      	lsls	r2, r1, #10
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c2:	2200      	movs	r2, #0
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	61fa      	str	r2, [r7, #28]
 80052c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052cc:	f7fb fcfc 	bl	8000cc8 <__aeabi_uldivmod>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4613      	mov	r3, r2
 80052d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x200>)
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f2:	e002      	b.n	80052fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <HAL_RCC_GetSysClockFreq+0x204>)
 80052f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3750      	adds	r7, #80	@ 0x50
 8005300:	46bd      	mov	sp, r7
 8005302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
 800530c:	00f42400 	.word	0x00f42400
 8005310:	007a1200 	.word	0x007a1200

08005314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	200000b0 	.word	0x200000b0

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a9b      	lsrs	r3, r3, #10
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800b798 	.word	0x0800b798

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005358:	f7ff ffdc 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0b5b      	lsrs	r3, r3, #13
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800b798 	.word	0x0800b798

0800537c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d010      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800539c:	4b87      	ldr	r3, [pc, #540]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800539e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	4984      	ldr	r1, [pc, #528]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d010      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80053ca:	4b7c      	ldr	r3, [pc, #496]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053d0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	4978      	ldr	r1, [pc, #480]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8083 	beq.w	8005500 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	4b6f      	ldr	r3, [pc, #444]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	4a6e      	ldr	r2, [pc, #440]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	@ 0x40
 800540a:	4b6c      	ldr	r3, [pc, #432]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005416:	4b6a      	ldr	r3, [pc, #424]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800541c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005420:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005422:	f7fd fbbb 	bl	8002b9c <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005428:	e008      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542a:	f7fd fbb7 	bl	8002b9c <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e162      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800543c:	4b60      	ldr	r3, [pc, #384]	@ (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005448:	4b5c      	ldr	r3, [pc, #368]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005450:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d028      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005466:	4b55      	ldr	r3, [pc, #340]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800546a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800546e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005470:	4b54      	ldr	r3, [pc, #336]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005476:	4b53      	ldr	r3, [pc, #332]	@ (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005478:	2200      	movs	r2, #0
 800547a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800547c:	4a4f      	ldr	r2, [pc, #316]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005482:	4b4e      	ldr	r3, [pc, #312]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d114      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800548e:	f7fd fb85 	bl	8002b9c <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005494:	e00a      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005496:	f7fd fb81 	bl	8002b9c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d901      	bls.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e12a      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ac:	4b43      	ldr	r3, [pc, #268]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0ee      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054c4:	d10d      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80054c6:	4b3d      	ldr	r3, [pc, #244]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80054d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054da:	4938      	ldr	r1, [pc, #224]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	608b      	str	r3, [r1, #8]
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 80054e2:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4a35      	ldr	r2, [pc, #212]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80054ec:	6093      	str	r3, [r2, #8]
 80054ee:	4b33      	ldr	r3, [pc, #204]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fa:	4930      	ldr	r1, [pc, #192]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005514:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005528:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	4922      	ldr	r1, [pc, #136]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005544:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	491a      	ldr	r1, [pc, #104]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005562:	d101      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005574:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800557a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	490e      	ldr	r1, [pc, #56]	@ (80055bc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d004      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b80      	cmp	r3, #128	@ 0x80
 8005596:	f040 8091 	bne.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fd fafc 	bl	8002b9c <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055a6:	e013      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a8:	f7fd faf8 	bl	8002b9c <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d90c      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0a3      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40007000 	.word	0x40007000
 80055c4:	42470e40 	.word	0x42470e40
 80055c8:	424711e0 	.word	0x424711e0
 80055cc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d0:	4b4e      	ldr	r3, [pc, #312]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e5      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80055dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d023      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d019      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005620:	d00e      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d115      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800563e:	d110      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	071b      	lsls	r3, r3, #28
 800565a:	492c      	ldr	r1, [pc, #176]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	019b      	lsls	r3, r3, #6
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	061b      	lsls	r3, r3, #24
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	071b      	lsls	r3, r3, #28
 8005688:	4920      	ldr	r1, [pc, #128]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005690:	4b20      	ldr	r3, [pc, #128]	@ (8005714 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005696:	f7fd fa81 	bl	8002b9c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800569e:	f7fd fa7d 	bl	8002b9c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e028      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056b0:	4b16      	ldr	r3, [pc, #88]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d6:	490d      	ldr	r1, [pc, #52]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056ea:	4b08      	ldr	r3, [pc, #32]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056f0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	4904      	ldr	r1, [pc, #16]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40023800 	.word	0x40023800
 8005710:	424710d8 	.word	0x424710d8
 8005714:	42470068 	.word	0x42470068

08005718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e273      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d075      	beq.n	8005822 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005736:	4b88      	ldr	r3, [pc, #544]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b04      	cmp	r3, #4
 8005740:	d00c      	beq.n	800575c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005742:	4b85      	ldr	r3, [pc, #532]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
        || \
 800574a:	2b08      	cmp	r3, #8
 800574c:	d112      	bne.n	8005774 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574e:	4b82      	ldr	r3, [pc, #520]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800575a:	d10b      	bne.n	8005774 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	4b7e      	ldr	r3, [pc, #504]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d05b      	beq.n	8005820 <HAL_RCC_OscConfig+0x108>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d157      	bne.n	8005820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e24e      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800577c:	d106      	bne.n	800578c <HAL_RCC_OscConfig+0x74>
 800577e:	4b76      	ldr	r3, [pc, #472]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a75      	ldr	r2, [pc, #468]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e01d      	b.n	80057c8 <HAL_RCC_OscConfig+0xb0>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005794:	d10c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x98>
 8005796:	4b70      	ldr	r3, [pc, #448]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6f      	ldr	r2, [pc, #444]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800579c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e00b      	b.n	80057c8 <HAL_RCC_OscConfig+0xb0>
 80057b0:	4b69      	ldr	r3, [pc, #420]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a68      	ldr	r2, [pc, #416]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	4b66      	ldr	r3, [pc, #408]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a65      	ldr	r2, [pc, #404]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d013      	beq.n	80057f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fd f9e4 	bl	8002b9c <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d8:	f7fd f9e0 	bl	8002b9c <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b64      	cmp	r3, #100	@ 0x64
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e213      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0f0      	beq.n	80057d8 <HAL_RCC_OscConfig+0xc0>
 80057f6:	e014      	b.n	8005822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fd f9d0 	bl	8002b9c <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fd f9cc 	bl	8002b9c <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	@ 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e1ff      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005812:	4b51      	ldr	r3, [pc, #324]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0xe8>
 800581e:	e000      	b.n	8005822 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d063      	beq.n	80058f6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800582e:	4b4a      	ldr	r3, [pc, #296]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583a:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005842:	2b08      	cmp	r3, #8
 8005844:	d11c      	bne.n	8005880 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005846:	4b44      	ldr	r3, [pc, #272]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d116      	bne.n	8005880 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005852:	4b41      	ldr	r3, [pc, #260]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_RCC_OscConfig+0x152>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d001      	beq.n	800586a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e1d3      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586a:	4b3b      	ldr	r3, [pc, #236]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4937      	ldr	r1, [pc, #220]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800587a:	4313      	orrs	r3, r2
 800587c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587e:	e03a      	b.n	80058f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d020      	beq.n	80058ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005888:	4b34      	ldr	r3, [pc, #208]	@ (800595c <HAL_RCC_OscConfig+0x244>)
 800588a:	2201      	movs	r2, #1
 800588c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fd f985 	bl	8002b9c <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005896:	f7fd f981 	bl	8002b9c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1b4      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b4:	4b28      	ldr	r3, [pc, #160]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4925      	ldr	r1, [pc, #148]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	600b      	str	r3, [r1, #0]
 80058c8:	e015      	b.n	80058f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ca:	4b24      	ldr	r3, [pc, #144]	@ (800595c <HAL_RCC_OscConfig+0x244>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fd f964 	bl	8002b9c <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058d8:	f7fd f960 	bl	8002b9c <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e193      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f0      	bne.n	80058d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d036      	beq.n	8005970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <HAL_RCC_OscConfig+0x248>)
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005910:	f7fd f944 	bl	8002b9c <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005918:	f7fd f940 	bl	8002b9c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e173      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592a:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_RCC_OscConfig+0x240>)
 800592c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0f0      	beq.n	8005918 <HAL_RCC_OscConfig+0x200>
 8005936:	e01b      	b.n	8005970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005938:	4b09      	ldr	r3, [pc, #36]	@ (8005960 <HAL_RCC_OscConfig+0x248>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fd f92d 	bl	8002b9c <HAL_GetTick>
 8005942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005944:	e00e      	b.n	8005964 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005946:	f7fd f929 	bl	8002b9c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d907      	bls.n	8005964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e15c      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
 8005958:	40023800 	.word	0x40023800
 800595c:	42470000 	.word	0x42470000
 8005960:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005964:	4b8a      	ldr	r3, [pc, #552]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ea      	bne.n	8005946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 8097 	beq.w	8005aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005982:	4b83      	ldr	r3, [pc, #524]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10f      	bne.n	80059ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	2300      	movs	r3, #0
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	4b7f      	ldr	r3, [pc, #508]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	4a7e      	ldr	r2, [pc, #504]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599c:	6413      	str	r3, [r2, #64]	@ 0x40
 800599e:	4b7c      	ldr	r3, [pc, #496]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	60bb      	str	r3, [r7, #8]
 80059a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ae:	4b79      	ldr	r3, [pc, #484]	@ (8005b94 <HAL_RCC_OscConfig+0x47c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d118      	bne.n	80059ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ba:	4b76      	ldr	r3, [pc, #472]	@ (8005b94 <HAL_RCC_OscConfig+0x47c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a75      	ldr	r2, [pc, #468]	@ (8005b94 <HAL_RCC_OscConfig+0x47c>)
 80059c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059c6:	f7fd f8e9 	bl	8002b9c <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ce:	f7fd f8e5 	bl	8002b9c <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e118      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b94 <HAL_RCC_OscConfig+0x47c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d106      	bne.n	8005a02 <HAL_RCC_OscConfig+0x2ea>
 80059f4:	4b66      	ldr	r3, [pc, #408]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059f8:	4a65      	ldr	r2, [pc, #404]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 80059fa:	f043 0301 	orr.w	r3, r3, #1
 80059fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a00:	e01c      	b.n	8005a3c <HAL_RCC_OscConfig+0x324>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d10c      	bne.n	8005a24 <HAL_RCC_OscConfig+0x30c>
 8005a0a:	4b61      	ldr	r3, [pc, #388]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0e:	4a60      	ldr	r2, [pc, #384]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a10:	f043 0304 	orr.w	r3, r3, #4
 8005a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a16:	4b5e      	ldr	r3, [pc, #376]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a22:	e00b      	b.n	8005a3c <HAL_RCC_OscConfig+0x324>
 8005a24:	4b5a      	ldr	r3, [pc, #360]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	4a59      	ldr	r2, [pc, #356]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a30:	4b57      	ldr	r3, [pc, #348]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a34:	4a56      	ldr	r2, [pc, #344]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a36:	f023 0304 	bic.w	r3, r3, #4
 8005a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fd f8aa 	bl	8002b9c <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4c:	f7fd f8a6 	bl	8002b9c <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e0d7      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a62:	4b4b      	ldr	r3, [pc, #300]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0ee      	beq.n	8005a4c <HAL_RCC_OscConfig+0x334>
 8005a6e:	e014      	b.n	8005a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fd f894 	bl	8002b9c <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a76:	e00a      	b.n	8005a8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a78:	f7fd f890 	bl	8002b9c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e0c1      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a8e:	4b40      	ldr	r3, [pc, #256]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1ee      	bne.n	8005a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d105      	bne.n	8005aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80ad 	beq.w	8005c10 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ab6:	4b36      	ldr	r3, [pc, #216]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d060      	beq.n	8005b84 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d145      	bne.n	8005b56 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aca:	4b33      	ldr	r3, [pc, #204]	@ (8005b98 <HAL_RCC_OscConfig+0x480>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fd f864 	bl	8002b9c <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad8:	f7fd f860 	bl	8002b9c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e093      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aea:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1f0      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	019b      	lsls	r3, r3, #6
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	061b      	lsls	r3, r3, #24
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b20:	071b      	lsls	r3, r3, #28
 8005b22:	491b      	ldr	r1, [pc, #108]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b28:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <HAL_RCC_OscConfig+0x480>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fd f835 	bl	8002b9c <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fd f831 	bl	8002b9c <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e064      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b48:	4b11      	ldr	r3, [pc, #68]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0f0      	beq.n	8005b36 <HAL_RCC_OscConfig+0x41e>
 8005b54:	e05c      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b56:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <HAL_RCC_OscConfig+0x480>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5c:	f7fd f81e 	bl	8002b9c <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b64:	f7fd f81a 	bl	8002b9c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e04d      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b76:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_RCC_OscConfig+0x478>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0x44c>
 8005b82:	e045      	b.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d107      	bne.n	8005b9c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e040      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
 8005b90:	40023800 	.word	0x40023800
 8005b94:	40007000 	.word	0x40007000
 8005b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c1c <HAL_RCC_OscConfig+0x504>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d030      	beq.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d129      	bne.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d122      	bne.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bcc:	4013      	ands	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d119      	bne.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	3b01      	subs	r3, #1
 8005be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10f      	bne.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d107      	bne.n	8005c0c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800

08005c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e042      	b.n	8005cb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fc fd26 	bl	8002698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	@ 0x24
 8005c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa09 	bl	800607c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	@ 0x28
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b20      	cmp	r3, #32
 8005cde:	d175      	bne.n	8005dcc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d002      	beq.n	8005cec <HAL_UART_Transmit+0x2c>
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e06e      	b.n	8005dce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2221      	movs	r2, #33	@ 0x21
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cfe:	f7fc ff4d 	bl	8002b9c <HAL_GetTick>
 8005d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	88fa      	ldrh	r2, [r7, #6]
 8005d08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d18:	d108      	bne.n	8005d2c <HAL_UART_Transmit+0x6c>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d104      	bne.n	8005d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	e003      	b.n	8005d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d34:	e02e      	b.n	8005d94 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2180      	movs	r1, #128	@ 0x80
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f8a5 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e03a      	b.n	8005dce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	3302      	adds	r3, #2
 8005d72:	61bb      	str	r3, [r7, #24]
 8005d74:	e007      	b.n	8005d86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1cb      	bne.n	8005d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2140      	movs	r1, #64	@ 0x40
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f871 	bl	8005e90 <UART_WaitOnFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e006      	b.n	8005dce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b08c      	sub	sp, #48	@ 0x30
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	60b9      	str	r1, [r7, #8]
 8005de0:	4613      	mov	r3, r2
 8005de2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d14a      	bne.n	8005e86 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8005df6:	88fb      	ldrh	r3, [r7, #6]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e043      	b.n	8005e88 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f895 	bl	8005f42 <UART_Start_Receive_IT>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d12c      	bne.n	8005e80 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d125      	bne.n	8005e7a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	617b      	str	r3, [r7, #20]
   return(result);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f043 0310 	orr.w	r3, r3, #16
 8005e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e64:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6a39      	ldr	r1, [r7, #32]
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6c:	e841 2300 	strex	r3, r2, [r1]
 8005e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1e5      	bne.n	8005e44 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8005e78:	e002      	b.n	8005e80 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005e80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e84:	e000      	b.n	8005e88 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3730      	adds	r7, #48	@ 0x30
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea0:	e03b      	b.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d037      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fc fe77 	bl	8002b9c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	6a3a      	ldr	r2, [r7, #32]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e03a      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d023      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b80      	cmp	r3, #128	@ 0x80
 8005ed6:	d020      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d01d      	beq.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d116      	bne.n	8005f1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f857 	bl	8005fb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e00f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bf0c      	ite	eq
 8005f2a:	2301      	moveq	r3, #1
 8005f2c:	2300      	movne	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d0b4      	beq.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b085      	sub	sp, #20
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	88fa      	ldrh	r2, [r7, #6]
 8005f60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2222      	movs	r2, #34	@ 0x22
 8005f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0220 	orr.w	r2, r2, #32
 8005fa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b095      	sub	sp, #84	@ 0x54
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	330c      	adds	r3, #12
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fde:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fe4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e5      	bne.n	8005fbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	61fb      	str	r3, [r7, #28]
   return(result);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006012:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	2b01      	cmp	r3, #1
 800602c:	d119      	bne.n	8006062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	60bb      	str	r3, [r7, #8]
   return(result);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	647b      	str	r3, [r7, #68]	@ 0x44
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800604e:	61ba      	str	r2, [r7, #24]
 8006050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	613b      	str	r3, [r7, #16]
   return(result);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006070:	bf00      	nop
 8006072:	3754      	adds	r7, #84	@ 0x54
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800607c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006080:	b0c0      	sub	sp, #256	@ 0x100
 8006082:	af00      	add	r7, sp, #0
 8006084:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	68d9      	ldr	r1, [r3, #12]
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	ea40 0301 	orr.w	r3, r0, r1
 80060a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	431a      	orrs	r2, r3
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060d4:	f021 010c 	bic.w	r1, r1, #12
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060e2:	430b      	orrs	r3, r1
 80060e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f6:	6999      	ldr	r1, [r3, #24]
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	ea40 0301 	orr.w	r3, r0, r1
 8006102:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b8f      	ldr	r3, [pc, #572]	@ (8006348 <UART_SetConfig+0x2cc>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d005      	beq.n	800611c <UART_SetConfig+0xa0>
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	4b8d      	ldr	r3, [pc, #564]	@ (800634c <UART_SetConfig+0x2d0>)
 8006118:	429a      	cmp	r2, r3
 800611a:	d104      	bne.n	8006126 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800611c:	f7ff f91a 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006120:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006124:	e003      	b.n	800612e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006126:	f7ff f901 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 800612a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006138:	f040 810c 	bne.w	8006354 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800613c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006140:	2200      	movs	r2, #0
 8006142:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006146:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800614a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	1891      	adds	r1, r2, r2
 8006154:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006156:	415b      	adcs	r3, r3
 8006158:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800615a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800615e:	4621      	mov	r1, r4
 8006160:	eb12 0801 	adds.w	r8, r2, r1
 8006164:	4629      	mov	r1, r5
 8006166:	eb43 0901 	adc.w	r9, r3, r1
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006176:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800617a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800617e:	4690      	mov	r8, r2
 8006180:	4699      	mov	r9, r3
 8006182:	4623      	mov	r3, r4
 8006184:	eb18 0303 	adds.w	r3, r8, r3
 8006188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800618c:	462b      	mov	r3, r5
 800618e:	eb49 0303 	adc.w	r3, r9, r3
 8006192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061aa:	460b      	mov	r3, r1
 80061ac:	18db      	adds	r3, r3, r3
 80061ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80061b0:	4613      	mov	r3, r2
 80061b2:	eb42 0303 	adc.w	r3, r2, r3
 80061b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061c0:	f7fa fd82 	bl	8000cc8 <__aeabi_uldivmod>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	4b61      	ldr	r3, [pc, #388]	@ (8006350 <UART_SetConfig+0x2d4>)
 80061ca:	fba3 2302 	umull	r2, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	011c      	lsls	r4, r3, #4
 80061d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	1891      	adds	r1, r2, r2
 80061ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061ec:	415b      	adcs	r3, r3
 80061ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061f4:	4641      	mov	r1, r8
 80061f6:	eb12 0a01 	adds.w	sl, r2, r1
 80061fa:	4649      	mov	r1, r9
 80061fc:	eb43 0b01 	adc.w	fp, r3, r1
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800620c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006210:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006214:	4692      	mov	sl, r2
 8006216:	469b      	mov	fp, r3
 8006218:	4643      	mov	r3, r8
 800621a:	eb1a 0303 	adds.w	r3, sl, r3
 800621e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006222:	464b      	mov	r3, r9
 8006224:	eb4b 0303 	adc.w	r3, fp, r3
 8006228:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006238:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800623c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006240:	460b      	mov	r3, r1
 8006242:	18db      	adds	r3, r3, r3
 8006244:	643b      	str	r3, [r7, #64]	@ 0x40
 8006246:	4613      	mov	r3, r2
 8006248:	eb42 0303 	adc.w	r3, r2, r3
 800624c:	647b      	str	r3, [r7, #68]	@ 0x44
 800624e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006252:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006256:	f7fa fd37 	bl	8000cc8 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4611      	mov	r1, r2
 8006260:	4b3b      	ldr	r3, [pc, #236]	@ (8006350 <UART_SetConfig+0x2d4>)
 8006262:	fba3 2301 	umull	r2, r3, r3, r1
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2264      	movs	r2, #100	@ 0x64
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	1acb      	subs	r3, r1, r3
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006276:	4b36      	ldr	r3, [pc, #216]	@ (8006350 <UART_SetConfig+0x2d4>)
 8006278:	fba3 2302 	umull	r2, r3, r3, r2
 800627c:	095b      	lsrs	r3, r3, #5
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006284:	441c      	add	r4, r3
 8006286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800628a:	2200      	movs	r2, #0
 800628c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006290:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006294:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	1891      	adds	r1, r2, r2
 800629e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062a0:	415b      	adcs	r3, r3
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062a8:	4641      	mov	r1, r8
 80062aa:	1851      	adds	r1, r2, r1
 80062ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80062ae:	4649      	mov	r1, r9
 80062b0:	414b      	adcs	r3, r1
 80062b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062c0:	4659      	mov	r1, fp
 80062c2:	00cb      	lsls	r3, r1, #3
 80062c4:	4651      	mov	r1, sl
 80062c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ca:	4651      	mov	r1, sl
 80062cc:	00ca      	lsls	r2, r1, #3
 80062ce:	4610      	mov	r0, r2
 80062d0:	4619      	mov	r1, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	4642      	mov	r2, r8
 80062d6:	189b      	adds	r3, r3, r2
 80062d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062dc:	464b      	mov	r3, r9
 80062de:	460a      	mov	r2, r1
 80062e0:	eb42 0303 	adc.w	r3, r2, r3
 80062e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062fc:	460b      	mov	r3, r1
 80062fe:	18db      	adds	r3, r3, r3
 8006300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006302:	4613      	mov	r3, r2
 8006304:	eb42 0303 	adc.w	r3, r2, r3
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800630a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800630e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006312:	f7fa fcd9 	bl	8000cc8 <__aeabi_uldivmod>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <UART_SetConfig+0x2d4>)
 800631c:	fba3 1302 	umull	r1, r3, r3, r2
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	2164      	movs	r1, #100	@ 0x64
 8006324:	fb01 f303 	mul.w	r3, r1, r3
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	3332      	adds	r3, #50	@ 0x32
 800632e:	4a08      	ldr	r2, [pc, #32]	@ (8006350 <UART_SetConfig+0x2d4>)
 8006330:	fba2 2303 	umull	r2, r3, r2, r3
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	f003 0207 	and.w	r2, r3, #7
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4422      	add	r2, r4
 8006342:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006344:	e106      	b.n	8006554 <UART_SetConfig+0x4d8>
 8006346:	bf00      	nop
 8006348:	40011000 	.word	0x40011000
 800634c:	40011400 	.word	0x40011400
 8006350:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006358:	2200      	movs	r2, #0
 800635a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800635e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006362:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006366:	4642      	mov	r2, r8
 8006368:	464b      	mov	r3, r9
 800636a:	1891      	adds	r1, r2, r2
 800636c:	6239      	str	r1, [r7, #32]
 800636e:	415b      	adcs	r3, r3
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
 8006372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006376:	4641      	mov	r1, r8
 8006378:	1854      	adds	r4, r2, r1
 800637a:	4649      	mov	r1, r9
 800637c:	eb43 0501 	adc.w	r5, r3, r1
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	00eb      	lsls	r3, r5, #3
 800638a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800638e:	00e2      	lsls	r2, r4, #3
 8006390:	4614      	mov	r4, r2
 8006392:	461d      	mov	r5, r3
 8006394:	4643      	mov	r3, r8
 8006396:	18e3      	adds	r3, r4, r3
 8006398:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800639c:	464b      	mov	r3, r9
 800639e:	eb45 0303 	adc.w	r3, r5, r3
 80063a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063c2:	4629      	mov	r1, r5
 80063c4:	008b      	lsls	r3, r1, #2
 80063c6:	4621      	mov	r1, r4
 80063c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063cc:	4621      	mov	r1, r4
 80063ce:	008a      	lsls	r2, r1, #2
 80063d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063d4:	f7fa fc78 	bl	8000cc8 <__aeabi_uldivmod>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4b60      	ldr	r3, [pc, #384]	@ (8006560 <UART_SetConfig+0x4e4>)
 80063de:	fba3 2302 	umull	r2, r3, r3, r2
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	011c      	lsls	r4, r3, #4
 80063e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	1891      	adds	r1, r2, r2
 80063fe:	61b9      	str	r1, [r7, #24]
 8006400:	415b      	adcs	r3, r3
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006408:	4641      	mov	r1, r8
 800640a:	1851      	adds	r1, r2, r1
 800640c:	6139      	str	r1, [r7, #16]
 800640e:	4649      	mov	r1, r9
 8006410:	414b      	adcs	r3, r1
 8006412:	617b      	str	r3, [r7, #20]
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006420:	4659      	mov	r1, fp
 8006422:	00cb      	lsls	r3, r1, #3
 8006424:	4651      	mov	r1, sl
 8006426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642a:	4651      	mov	r1, sl
 800642c:	00ca      	lsls	r2, r1, #3
 800642e:	4610      	mov	r0, r2
 8006430:	4619      	mov	r1, r3
 8006432:	4603      	mov	r3, r0
 8006434:	4642      	mov	r2, r8
 8006436:	189b      	adds	r3, r3, r2
 8006438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800643c:	464b      	mov	r3, r9
 800643e:	460a      	mov	r2, r1
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006452:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006460:	4649      	mov	r1, r9
 8006462:	008b      	lsls	r3, r1, #2
 8006464:	4641      	mov	r1, r8
 8006466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646a:	4641      	mov	r1, r8
 800646c:	008a      	lsls	r2, r1, #2
 800646e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006472:	f7fa fc29 	bl	8000cc8 <__aeabi_uldivmod>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4611      	mov	r1, r2
 800647c:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <UART_SetConfig+0x4e4>)
 800647e:	fba3 2301 	umull	r2, r3, r3, r1
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	2264      	movs	r2, #100	@ 0x64
 8006486:	fb02 f303 	mul.w	r3, r2, r3
 800648a:	1acb      	subs	r3, r1, r3
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	3332      	adds	r3, #50	@ 0x32
 8006490:	4a33      	ldr	r2, [pc, #204]	@ (8006560 <UART_SetConfig+0x4e4>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800649c:	441c      	add	r4, r3
 800649e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a2:	2200      	movs	r2, #0
 80064a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064ac:	4642      	mov	r2, r8
 80064ae:	464b      	mov	r3, r9
 80064b0:	1891      	adds	r1, r2, r2
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	415b      	adcs	r3, r3
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064bc:	4641      	mov	r1, r8
 80064be:	1851      	adds	r1, r2, r1
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	4649      	mov	r1, r9
 80064c4:	414b      	adcs	r3, r1
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	f04f 0300 	mov.w	r3, #0
 80064d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064d4:	4659      	mov	r1, fp
 80064d6:	00cb      	lsls	r3, r1, #3
 80064d8:	4651      	mov	r1, sl
 80064da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064de:	4651      	mov	r1, sl
 80064e0:	00ca      	lsls	r2, r1, #3
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	4642      	mov	r2, r8
 80064ea:	189b      	adds	r3, r3, r2
 80064ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ee:	464b      	mov	r3, r9
 80064f0:	460a      	mov	r2, r1
 80064f2:	eb42 0303 	adc.w	r3, r2, r3
 80064f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	663b      	str	r3, [r7, #96]	@ 0x60
 8006502:	667a      	str	r2, [r7, #100]	@ 0x64
 8006504:	f04f 0200 	mov.w	r2, #0
 8006508:	f04f 0300 	mov.w	r3, #0
 800650c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006510:	4649      	mov	r1, r9
 8006512:	008b      	lsls	r3, r1, #2
 8006514:	4641      	mov	r1, r8
 8006516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800651a:	4641      	mov	r1, r8
 800651c:	008a      	lsls	r2, r1, #2
 800651e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006522:	f7fa fbd1 	bl	8000cc8 <__aeabi_uldivmod>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4b0d      	ldr	r3, [pc, #52]	@ (8006560 <UART_SetConfig+0x4e4>)
 800652c:	fba3 1302 	umull	r1, r3, r3, r2
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	2164      	movs	r1, #100	@ 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	3332      	adds	r3, #50	@ 0x32
 800653e:	4a08      	ldr	r2, [pc, #32]	@ (8006560 <UART_SetConfig+0x4e4>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4422      	add	r2, r4
 8006552:	609a      	str	r2, [r3, #8]
}
 8006554:	bf00      	nop
 8006556:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800655a:	46bd      	mov	sp, r7
 800655c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006560:	51eb851f 	.word	0x51eb851f

08006564 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006564:	b084      	sub	sp, #16
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	f107 001c 	add.w	r0, r7, #28
 8006572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006576:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800657a:	2b01      	cmp	r3, #1
 800657c:	d123      	bne.n	80065c6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d105      	bne.n	80065ba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fa9a 	bl	8006af4 <USB_CoreReset>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
 80065c4:	e01b      	b.n	80065fe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa8e 	bl	8006af4 <USB_CoreReset>
 80065d8:	4603      	mov	r3, r0
 80065da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80065f0:	e005      	b.n	80065fe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065fe:	7fbb      	ldrb	r3, [r7, #30]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10b      	bne.n	800661c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f043 0206 	orr.w	r2, r3, #6
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f043 0220 	orr.w	r2, r3, #32
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr

0800662c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f023 0201 	bic.w	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800666a:	78fb      	ldrb	r3, [r7, #3]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d115      	bne.n	800669c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800667c:	200a      	movs	r0, #10
 800667e:	f7fc fa99 	bl	8002bb4 <HAL_Delay>
      ms += 10U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	330a      	adds	r3, #10
 8006686:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fa25 	bl	8006ad8 <USB_GetMode>
 800668e:	4603      	mov	r3, r0
 8006690:	2b01      	cmp	r3, #1
 8006692:	d01e      	beq.n	80066d2 <USB_SetCurrentMode+0x84>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2bc7      	cmp	r3, #199	@ 0xc7
 8006698:	d9f0      	bls.n	800667c <USB_SetCurrentMode+0x2e>
 800669a:	e01a      	b.n	80066d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d115      	bne.n	80066ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ae:	200a      	movs	r0, #10
 80066b0:	f7fc fa80 	bl	8002bb4 <HAL_Delay>
      ms += 10U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	330a      	adds	r3, #10
 80066b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa0c 	bl	8006ad8 <USB_GetMode>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <USB_SetCurrentMode+0x84>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80066ca:	d9f0      	bls.n	80066ae <USB_SetCurrentMode+0x60>
 80066cc:	e001      	b.n	80066d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e005      	b.n	80066de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80066d6:	d101      	bne.n	80066dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
	...

080066e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e8:	b084      	sub	sp, #16
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	e009      	b.n	800671c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	3340      	adds	r3, #64	@ 0x40
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	2200      	movs	r2, #0
 8006714:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	3301      	adds	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b0e      	cmp	r3, #14
 8006720:	d9f2      	bls.n	8006708 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006722:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11c      	bne.n	8006764 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006738:	f043 0302 	orr.w	r3, r3, #2
 800673c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	e005      	b.n	8006770 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006776:	461a      	mov	r2, r3
 8006778:	2300      	movs	r3, #0
 800677a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800677c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006780:	2b01      	cmp	r3, #1
 8006782:	d10d      	bne.n	80067a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006788:	2b00      	cmp	r3, #0
 800678a:	d104      	bne.n	8006796 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f968 	bl	8006a64 <USB_SetDevSpeed>
 8006794:	e008      	b.n	80067a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006796:	2101      	movs	r1, #1
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f963 	bl	8006a64 <USB_SetDevSpeed>
 800679e:	e003      	b.n	80067a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067a0:	2103      	movs	r1, #3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f95e 	bl	8006a64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067a8:	2110      	movs	r1, #16
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f8fa 	bl	80069a4 <USB_FlushTxFifo>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f924 	bl	8006a08 <USB_FlushRxFifo>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	461a      	mov	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e8:	461a      	mov	r2, r3
 80067ea:	2300      	movs	r3, #0
 80067ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	e043      	b.n	800687c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006806:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680a:	d118      	bne.n	800683e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681e:	461a      	mov	r2, r3
 8006820:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006824:	6013      	str	r3, [r2, #0]
 8006826:	e013      	b.n	8006850 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006834:	461a      	mov	r2, r3
 8006836:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	e008      	b.n	8006850 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684a:	461a      	mov	r2, r3
 800684c:	2300      	movs	r3, #0
 800684e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685c:	461a      	mov	r2, r3
 800685e:	2300      	movs	r3, #0
 8006860:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686e:	461a      	mov	r2, r3
 8006870:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006874:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	3301      	adds	r3, #1
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006880:	461a      	mov	r2, r3
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4293      	cmp	r3, r2
 8006886:	d3b5      	bcc.n	80067f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006888:	2300      	movs	r3, #0
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	e043      	b.n	8006916 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a4:	d118      	bne.n	80068d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	461a      	mov	r2, r3
 80068ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068be:	6013      	str	r3, [r2, #0]
 80068c0:	e013      	b.n	80068ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e008      	b.n	80068ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e4:	461a      	mov	r2, r3
 80068e6:	2300      	movs	r3, #0
 80068e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006908:	461a      	mov	r2, r3
 800690a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800690e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	3301      	adds	r3, #1
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800691a:	461a      	mov	r2, r3
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4293      	cmp	r3, r2
 8006920:	d3b5      	bcc.n	800688e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006934:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006942:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006944:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006948:	2b00      	cmp	r3, #0
 800694a:	d105      	bne.n	8006958 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	f043 0210 	orr.w	r2, r3, #16
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	4b10      	ldr	r3, [pc, #64]	@ (80069a0 <USB_DevInit+0x2b8>)
 800695e:	4313      	orrs	r3, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006964:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006968:	2b00      	cmp	r3, #0
 800696a:	d005      	beq.n	8006978 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f043 0208 	orr.w	r2, r3, #8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006978:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800697c:	2b01      	cmp	r3, #1
 800697e:	d107      	bne.n	8006990 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006988:	f043 0304 	orr.w	r3, r3, #4
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800699c:	b004      	add	sp, #16
 800699e:	4770      	bx	lr
 80069a0:	803c3800 	.word	0x803c3800

080069a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069be:	d901      	bls.n	80069c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e01b      	b.n	80069fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	daf2      	bge.n	80069b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	019b      	lsls	r3, r3, #6
 80069d4:	f043 0220 	orr.w	r2, r3, #32
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3301      	adds	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e8:	d901      	bls.n	80069ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e006      	b.n	80069fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d0f0      	beq.n	80069dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a20:	d901      	bls.n	8006a26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e018      	b.n	8006a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	daf2      	bge.n	8006a14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2210      	movs	r2, #16
 8006a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a44:	d901      	bls.n	8006a4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e006      	b.n	8006a58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d0f0      	beq.n	8006a38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ab0:	f023 0303 	bic.w	r3, r3, #3
 8006ab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac4:	f043 0302 	orr.w	r3, r3, #2
 8006ac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b0c:	d901      	bls.n	8006b12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e01b      	b.n	8006b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	daf2      	bge.n	8006b00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f043 0201 	orr.w	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b36:	d901      	bls.n	8006b3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e006      	b.n	8006b4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d0f0      	beq.n	8006b2a <USB_CoreReset+0x36>

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <atof>:
 8006b56:	2100      	movs	r1, #0
 8006b58:	f000 be06 	b.w	8007768 <strtod>

08006b5c <atoi>:
 8006b5c:	220a      	movs	r2, #10
 8006b5e:	2100      	movs	r1, #0
 8006b60:	f000 be88 	b.w	8007874 <strtol>

08006b64 <sulp>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	ec45 4b10 	vmov	d0, r4, r5
 8006b6e:	4616      	mov	r6, r2
 8006b70:	f003 fad2 	bl	800a118 <__ulp>
 8006b74:	ec51 0b10 	vmov	r0, r1, d0
 8006b78:	b17e      	cbz	r6, 8006b9a <sulp+0x36>
 8006b7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd09      	ble.n	8006b9a <sulp+0x36>
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b8c:	2400      	movs	r4, #0
 8006b8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	f7f9 fd4f 	bl	8000638 <__aeabi_dmul>
 8006b9a:	ec41 0b10 	vmov	d0, r0, r1
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}

08006ba0 <_strtod_l>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	b09f      	sub	sp, #124	@ 0x7c
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006baa:	2200      	movs	r2, #0
 8006bac:	921a      	str	r2, [sp, #104]	@ 0x68
 8006bae:	9005      	str	r0, [sp, #20]
 8006bb0:	f04f 0a00 	mov.w	sl, #0
 8006bb4:	f04f 0b00 	mov.w	fp, #0
 8006bb8:	460a      	mov	r2, r1
 8006bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8006bbc:	7811      	ldrb	r1, [r2, #0]
 8006bbe:	292b      	cmp	r1, #43	@ 0x2b
 8006bc0:	d04a      	beq.n	8006c58 <_strtod_l+0xb8>
 8006bc2:	d838      	bhi.n	8006c36 <_strtod_l+0x96>
 8006bc4:	290d      	cmp	r1, #13
 8006bc6:	d832      	bhi.n	8006c2e <_strtod_l+0x8e>
 8006bc8:	2908      	cmp	r1, #8
 8006bca:	d832      	bhi.n	8006c32 <_strtod_l+0x92>
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	d03b      	beq.n	8006c48 <_strtod_l+0xa8>
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006bd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006bd6:	782a      	ldrb	r2, [r5, #0]
 8006bd8:	2a30      	cmp	r2, #48	@ 0x30
 8006bda:	f040 80b3 	bne.w	8006d44 <_strtod_l+0x1a4>
 8006bde:	786a      	ldrb	r2, [r5, #1]
 8006be0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006be4:	2a58      	cmp	r2, #88	@ 0x58
 8006be6:	d16e      	bne.n	8006cc6 <_strtod_l+0x126>
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	ab1a      	add	r3, sp, #104	@ 0x68
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	4a8e      	ldr	r2, [pc, #568]	@ (8006e2c <_strtod_l+0x28c>)
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bf8:	a919      	add	r1, sp, #100	@ 0x64
 8006bfa:	f002 fb7f 	bl	80092fc <__gethex>
 8006bfe:	f010 060f 	ands.w	r6, r0, #15
 8006c02:	4604      	mov	r4, r0
 8006c04:	d005      	beq.n	8006c12 <_strtod_l+0x72>
 8006c06:	2e06      	cmp	r6, #6
 8006c08:	d128      	bne.n	8006c5c <_strtod_l+0xbc>
 8006c0a:	3501      	adds	r5, #1
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 858e 	bne.w	8007736 <_strtod_l+0xb96>
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c1c:	b1cb      	cbz	r3, 8006c52 <_strtod_l+0xb2>
 8006c1e:	4652      	mov	r2, sl
 8006c20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006c24:	ec43 2b10 	vmov	d0, r2, r3
 8006c28:	b01f      	add	sp, #124	@ 0x7c
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	2920      	cmp	r1, #32
 8006c30:	d1ce      	bne.n	8006bd0 <_strtod_l+0x30>
 8006c32:	3201      	adds	r2, #1
 8006c34:	e7c1      	b.n	8006bba <_strtod_l+0x1a>
 8006c36:	292d      	cmp	r1, #45	@ 0x2d
 8006c38:	d1ca      	bne.n	8006bd0 <_strtod_l+0x30>
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c3e:	1c51      	adds	r1, r2, #1
 8006c40:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c42:	7852      	ldrb	r2, [r2, #1]
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d1c5      	bne.n	8006bd4 <_strtod_l+0x34>
 8006c48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f040 8570 	bne.w	8007732 <_strtod_l+0xb92>
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	e7e5      	b.n	8006c24 <_strtod_l+0x84>
 8006c58:	2100      	movs	r1, #0
 8006c5a:	e7ef      	b.n	8006c3c <_strtod_l+0x9c>
 8006c5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c5e:	b13a      	cbz	r2, 8006c70 <_strtod_l+0xd0>
 8006c60:	2135      	movs	r1, #53	@ 0x35
 8006c62:	a81c      	add	r0, sp, #112	@ 0x70
 8006c64:	f003 fb52 	bl	800a30c <__copybits>
 8006c68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c6a:	9805      	ldr	r0, [sp, #20]
 8006c6c:	f002 ff20 	bl	8009ab0 <_Bfree>
 8006c70:	3e01      	subs	r6, #1
 8006c72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c74:	2e04      	cmp	r6, #4
 8006c76:	d806      	bhi.n	8006c86 <_strtod_l+0xe6>
 8006c78:	e8df f006 	tbb	[pc, r6]
 8006c7c:	201d0314 	.word	0x201d0314
 8006c80:	14          	.byte	0x14
 8006c81:	00          	.byte	0x00
 8006c82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c86:	05e1      	lsls	r1, r4, #23
 8006c88:	bf48      	it	mi
 8006c8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c92:	0d1b      	lsrs	r3, r3, #20
 8006c94:	051b      	lsls	r3, r3, #20
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1bb      	bne.n	8006c12 <_strtod_l+0x72>
 8006c9a:	f001 fbeb 	bl	8008474 <__errno>
 8006c9e:	2322      	movs	r3, #34	@ 0x22
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	e7b6      	b.n	8006c12 <_strtod_l+0x72>
 8006ca4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006ca8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006cac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006cb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006cb4:	e7e7      	b.n	8006c86 <_strtod_l+0xe6>
 8006cb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006e34 <_strtod_l+0x294>
 8006cba:	e7e4      	b.n	8006c86 <_strtod_l+0xe6>
 8006cbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006cc0:	f04f 3aff 	mov.w	sl, #4294967295
 8006cc4:	e7df      	b.n	8006c86 <_strtod_l+0xe6>
 8006cc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b30      	cmp	r3, #48	@ 0x30
 8006cd0:	d0f9      	beq.n	8006cc6 <_strtod_l+0x126>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d09d      	beq.n	8006c12 <_strtod_l+0x72>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce4:	461f      	mov	r7, r3
 8006ce6:	220a      	movs	r2, #10
 8006ce8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006cea:	7805      	ldrb	r5, [r0, #0]
 8006cec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006cf0:	b2d9      	uxtb	r1, r3
 8006cf2:	2909      	cmp	r1, #9
 8006cf4:	d928      	bls.n	8006d48 <_strtod_l+0x1a8>
 8006cf6:	494e      	ldr	r1, [pc, #312]	@ (8006e30 <_strtod_l+0x290>)
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f001 fb5e 	bl	80083ba <strncmp>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d032      	beq.n	8006d68 <_strtod_l+0x1c8>
 8006d02:	2000      	movs	r0, #0
 8006d04:	462a      	mov	r2, r5
 8006d06:	4681      	mov	r9, r0
 8006d08:	463d      	mov	r5, r7
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2a65      	cmp	r2, #101	@ 0x65
 8006d0e:	d001      	beq.n	8006d14 <_strtod_l+0x174>
 8006d10:	2a45      	cmp	r2, #69	@ 0x45
 8006d12:	d114      	bne.n	8006d3e <_strtod_l+0x19e>
 8006d14:	b91d      	cbnz	r5, 8006d1e <_strtod_l+0x17e>
 8006d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d18:	4302      	orrs	r2, r0
 8006d1a:	d095      	beq.n	8006c48 <_strtod_l+0xa8>
 8006d1c:	2500      	movs	r5, #0
 8006d1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006d20:	1c62      	adds	r2, r4, #1
 8006d22:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d24:	7862      	ldrb	r2, [r4, #1]
 8006d26:	2a2b      	cmp	r2, #43	@ 0x2b
 8006d28:	d077      	beq.n	8006e1a <_strtod_l+0x27a>
 8006d2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8006d2c:	d07b      	beq.n	8006e26 <_strtod_l+0x286>
 8006d2e:	f04f 0c00 	mov.w	ip, #0
 8006d32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006d36:	2909      	cmp	r1, #9
 8006d38:	f240 8082 	bls.w	8006e40 <_strtod_l+0x2a0>
 8006d3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d3e:	f04f 0800 	mov.w	r8, #0
 8006d42:	e0a2      	b.n	8006e8a <_strtod_l+0x2ea>
 8006d44:	2300      	movs	r3, #0
 8006d46:	e7c7      	b.n	8006cd8 <_strtod_l+0x138>
 8006d48:	2f08      	cmp	r7, #8
 8006d4a:	bfd5      	itete	le
 8006d4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d4e:	9908      	ldrgt	r1, [sp, #32]
 8006d50:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d58:	f100 0001 	add.w	r0, r0, #1
 8006d5c:	bfd4      	ite	le
 8006d5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d60:	9308      	strgt	r3, [sp, #32]
 8006d62:	3701      	adds	r7, #1
 8006d64:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d66:	e7bf      	b.n	8006ce8 <_strtod_l+0x148>
 8006d68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d6e:	785a      	ldrb	r2, [r3, #1]
 8006d70:	b37f      	cbz	r7, 8006dd2 <_strtod_l+0x232>
 8006d72:	4681      	mov	r9, r0
 8006d74:	463d      	mov	r5, r7
 8006d76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d7a:	2b09      	cmp	r3, #9
 8006d7c:	d912      	bls.n	8006da4 <_strtod_l+0x204>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e7c4      	b.n	8006d0c <_strtod_l+0x16c>
 8006d82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d88:	785a      	ldrb	r2, [r3, #1]
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	2a30      	cmp	r2, #48	@ 0x30
 8006d8e:	d0f8      	beq.n	8006d82 <_strtod_l+0x1e2>
 8006d90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	f200 84d3 	bhi.w	8007740 <_strtod_l+0xba0>
 8006d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d9e:	4681      	mov	r9, r0
 8006da0:	2000      	movs	r0, #0
 8006da2:	4605      	mov	r5, r0
 8006da4:	3a30      	subs	r2, #48	@ 0x30
 8006da6:	f100 0301 	add.w	r3, r0, #1
 8006daa:	d02a      	beq.n	8006e02 <_strtod_l+0x262>
 8006dac:	4499      	add	r9, r3
 8006dae:	eb00 0c05 	add.w	ip, r0, r5
 8006db2:	462b      	mov	r3, r5
 8006db4:	210a      	movs	r1, #10
 8006db6:	4563      	cmp	r3, ip
 8006db8:	d10d      	bne.n	8006dd6 <_strtod_l+0x236>
 8006dba:	1c69      	adds	r1, r5, #1
 8006dbc:	4401      	add	r1, r0
 8006dbe:	4428      	add	r0, r5
 8006dc0:	2808      	cmp	r0, #8
 8006dc2:	dc16      	bgt.n	8006df2 <_strtod_l+0x252>
 8006dc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006dc6:	230a      	movs	r3, #10
 8006dc8:	fb03 2300 	mla	r3, r3, r0, r2
 8006dcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e018      	b.n	8006e04 <_strtod_l+0x264>
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	e7da      	b.n	8006d8c <_strtod_l+0x1ec>
 8006dd6:	2b08      	cmp	r3, #8
 8006dd8:	f103 0301 	add.w	r3, r3, #1
 8006ddc:	dc03      	bgt.n	8006de6 <_strtod_l+0x246>
 8006dde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006de0:	434e      	muls	r6, r1
 8006de2:	960a      	str	r6, [sp, #40]	@ 0x28
 8006de4:	e7e7      	b.n	8006db6 <_strtod_l+0x216>
 8006de6:	2b10      	cmp	r3, #16
 8006de8:	bfde      	ittt	le
 8006dea:	9e08      	ldrle	r6, [sp, #32]
 8006dec:	434e      	mulle	r6, r1
 8006dee:	9608      	strle	r6, [sp, #32]
 8006df0:	e7e1      	b.n	8006db6 <_strtod_l+0x216>
 8006df2:	280f      	cmp	r0, #15
 8006df4:	dceb      	bgt.n	8006dce <_strtod_l+0x22e>
 8006df6:	9808      	ldr	r0, [sp, #32]
 8006df8:	230a      	movs	r3, #10
 8006dfa:	fb03 2300 	mla	r3, r3, r0, r2
 8006dfe:	9308      	str	r3, [sp, #32]
 8006e00:	e7e5      	b.n	8006dce <_strtod_l+0x22e>
 8006e02:	4629      	mov	r1, r5
 8006e04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e06:	1c50      	adds	r0, r2, #1
 8006e08:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e0a:	7852      	ldrb	r2, [r2, #1]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	460d      	mov	r5, r1
 8006e10:	e7b1      	b.n	8006d76 <_strtod_l+0x1d6>
 8006e12:	f04f 0900 	mov.w	r9, #0
 8006e16:	2301      	movs	r3, #1
 8006e18:	e77d      	b.n	8006d16 <_strtod_l+0x176>
 8006e1a:	f04f 0c00 	mov.w	ip, #0
 8006e1e:	1ca2      	adds	r2, r4, #2
 8006e20:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e22:	78a2      	ldrb	r2, [r4, #2]
 8006e24:	e785      	b.n	8006d32 <_strtod_l+0x192>
 8006e26:	f04f 0c01 	mov.w	ip, #1
 8006e2a:	e7f8      	b.n	8006e1e <_strtod_l+0x27e>
 8006e2c:	0800b7b8 	.word	0x0800b7b8
 8006e30:	0800b7a0 	.word	0x0800b7a0
 8006e34:	7ff00000 	.word	0x7ff00000
 8006e38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e3a:	1c51      	adds	r1, r2, #1
 8006e3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e3e:	7852      	ldrb	r2, [r2, #1]
 8006e40:	2a30      	cmp	r2, #48	@ 0x30
 8006e42:	d0f9      	beq.n	8006e38 <_strtod_l+0x298>
 8006e44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006e48:	2908      	cmp	r1, #8
 8006e4a:	f63f af78 	bhi.w	8006d3e <_strtod_l+0x19e>
 8006e4e:	3a30      	subs	r2, #48	@ 0x30
 8006e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e56:	f04f 080a 	mov.w	r8, #10
 8006e5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e5c:	1c56      	adds	r6, r2, #1
 8006e5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e60:	7852      	ldrb	r2, [r2, #1]
 8006e62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e66:	f1be 0f09 	cmp.w	lr, #9
 8006e6a:	d939      	bls.n	8006ee0 <_strtod_l+0x340>
 8006e6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e6e:	1a76      	subs	r6, r6, r1
 8006e70:	2e08      	cmp	r6, #8
 8006e72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e76:	dc03      	bgt.n	8006e80 <_strtod_l+0x2e0>
 8006e78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e7a:	4588      	cmp	r8, r1
 8006e7c:	bfa8      	it	ge
 8006e7e:	4688      	movge	r8, r1
 8006e80:	f1bc 0f00 	cmp.w	ip, #0
 8006e84:	d001      	beq.n	8006e8a <_strtod_l+0x2ea>
 8006e86:	f1c8 0800 	rsb	r8, r8, #0
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	d14e      	bne.n	8006f2c <_strtod_l+0x38c>
 8006e8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e90:	4308      	orrs	r0, r1
 8006e92:	f47f aebe 	bne.w	8006c12 <_strtod_l+0x72>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f47f aed6 	bne.w	8006c48 <_strtod_l+0xa8>
 8006e9c:	2a69      	cmp	r2, #105	@ 0x69
 8006e9e:	d028      	beq.n	8006ef2 <_strtod_l+0x352>
 8006ea0:	dc25      	bgt.n	8006eee <_strtod_l+0x34e>
 8006ea2:	2a49      	cmp	r2, #73	@ 0x49
 8006ea4:	d025      	beq.n	8006ef2 <_strtod_l+0x352>
 8006ea6:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ea8:	f47f aece 	bne.w	8006c48 <_strtod_l+0xa8>
 8006eac:	499b      	ldr	r1, [pc, #620]	@ (800711c <_strtod_l+0x57c>)
 8006eae:	a819      	add	r0, sp, #100	@ 0x64
 8006eb0:	f002 fc46 	bl	8009740 <__match>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	f43f aec7 	beq.w	8006c48 <_strtod_l+0xa8>
 8006eba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b28      	cmp	r3, #40	@ 0x28
 8006ec0:	d12e      	bne.n	8006f20 <_strtod_l+0x380>
 8006ec2:	4997      	ldr	r1, [pc, #604]	@ (8007120 <_strtod_l+0x580>)
 8006ec4:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ec6:	a819      	add	r0, sp, #100	@ 0x64
 8006ec8:	f002 fc4e 	bl	8009768 <__hexnan>
 8006ecc:	2805      	cmp	r0, #5
 8006ece:	d127      	bne.n	8006f20 <_strtod_l+0x380>
 8006ed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ed2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006ed6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006eda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006ede:	e698      	b.n	8006c12 <_strtod_l+0x72>
 8006ee0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006ee2:	fb08 2101 	mla	r1, r8, r1, r2
 8006ee6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006eea:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eec:	e7b5      	b.n	8006e5a <_strtod_l+0x2ba>
 8006eee:	2a6e      	cmp	r2, #110	@ 0x6e
 8006ef0:	e7da      	b.n	8006ea8 <_strtod_l+0x308>
 8006ef2:	498c      	ldr	r1, [pc, #560]	@ (8007124 <_strtod_l+0x584>)
 8006ef4:	a819      	add	r0, sp, #100	@ 0x64
 8006ef6:	f002 fc23 	bl	8009740 <__match>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f aea4 	beq.w	8006c48 <_strtod_l+0xa8>
 8006f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f02:	4989      	ldr	r1, [pc, #548]	@ (8007128 <_strtod_l+0x588>)
 8006f04:	3b01      	subs	r3, #1
 8006f06:	a819      	add	r0, sp, #100	@ 0x64
 8006f08:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f0a:	f002 fc19 	bl	8009740 <__match>
 8006f0e:	b910      	cbnz	r0, 8006f16 <_strtod_l+0x376>
 8006f10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f12:	3301      	adds	r3, #1
 8006f14:	9319      	str	r3, [sp, #100]	@ 0x64
 8006f16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007138 <_strtod_l+0x598>
 8006f1a:	f04f 0a00 	mov.w	sl, #0
 8006f1e:	e678      	b.n	8006c12 <_strtod_l+0x72>
 8006f20:	4882      	ldr	r0, [pc, #520]	@ (800712c <_strtod_l+0x58c>)
 8006f22:	f001 fae5 	bl	80084f0 <nan>
 8006f26:	ec5b ab10 	vmov	sl, fp, d0
 8006f2a:	e672      	b.n	8006c12 <_strtod_l+0x72>
 8006f2c:	eba8 0309 	sub.w	r3, r8, r9
 8006f30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	bf08      	it	eq
 8006f38:	462f      	moveq	r7, r5
 8006f3a:	2d10      	cmp	r5, #16
 8006f3c:	462c      	mov	r4, r5
 8006f3e:	bfa8      	it	ge
 8006f40:	2410      	movge	r4, #16
 8006f42:	f7f9 faff 	bl	8000544 <__aeabi_ui2d>
 8006f46:	2d09      	cmp	r5, #9
 8006f48:	4682      	mov	sl, r0
 8006f4a:	468b      	mov	fp, r1
 8006f4c:	dc13      	bgt.n	8006f76 <_strtod_l+0x3d6>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f43f ae5e 	beq.w	8006c12 <_strtod_l+0x72>
 8006f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f58:	dd78      	ble.n	800704c <_strtod_l+0x4ac>
 8006f5a:	2b16      	cmp	r3, #22
 8006f5c:	dc5f      	bgt.n	800701e <_strtod_l+0x47e>
 8006f5e:	4974      	ldr	r1, [pc, #464]	@ (8007130 <_strtod_l+0x590>)
 8006f60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f68:	4652      	mov	r2, sl
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	f7f9 fb64 	bl	8000638 <__aeabi_dmul>
 8006f70:	4682      	mov	sl, r0
 8006f72:	468b      	mov	fp, r1
 8006f74:	e64d      	b.n	8006c12 <_strtod_l+0x72>
 8006f76:	4b6e      	ldr	r3, [pc, #440]	@ (8007130 <_strtod_l+0x590>)
 8006f78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f80:	f7f9 fb5a 	bl	8000638 <__aeabi_dmul>
 8006f84:	4682      	mov	sl, r0
 8006f86:	9808      	ldr	r0, [sp, #32]
 8006f88:	468b      	mov	fp, r1
 8006f8a:	f7f9 fadb 	bl	8000544 <__aeabi_ui2d>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4650      	mov	r0, sl
 8006f94:	4659      	mov	r1, fp
 8006f96:	f7f9 f999 	bl	80002cc <__adddf3>
 8006f9a:	2d0f      	cmp	r5, #15
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	468b      	mov	fp, r1
 8006fa0:	ddd5      	ble.n	8006f4e <_strtod_l+0x3ae>
 8006fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa4:	1b2c      	subs	r4, r5, r4
 8006fa6:	441c      	add	r4, r3
 8006fa8:	2c00      	cmp	r4, #0
 8006faa:	f340 8096 	ble.w	80070da <_strtod_l+0x53a>
 8006fae:	f014 030f 	ands.w	r3, r4, #15
 8006fb2:	d00a      	beq.n	8006fca <_strtod_l+0x42a>
 8006fb4:	495e      	ldr	r1, [pc, #376]	@ (8007130 <_strtod_l+0x590>)
 8006fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fba:	4652      	mov	r2, sl
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc2:	f7f9 fb39 	bl	8000638 <__aeabi_dmul>
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	468b      	mov	fp, r1
 8006fca:	f034 040f 	bics.w	r4, r4, #15
 8006fce:	d073      	beq.n	80070b8 <_strtod_l+0x518>
 8006fd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006fd4:	dd48      	ble.n	8007068 <_strtod_l+0x4c8>
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	46a0      	mov	r8, r4
 8006fda:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fdc:	46a1      	mov	r9, r4
 8006fde:	9a05      	ldr	r2, [sp, #20]
 8006fe0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007138 <_strtod_l+0x598>
 8006fe4:	2322      	movs	r3, #34	@ 0x22
 8006fe6:	6013      	str	r3, [r2, #0]
 8006fe8:	f04f 0a00 	mov.w	sl, #0
 8006fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f43f ae0f 	beq.w	8006c12 <_strtod_l+0x72>
 8006ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ff6:	9805      	ldr	r0, [sp, #20]
 8006ff8:	f002 fd5a 	bl	8009ab0 <_Bfree>
 8006ffc:	9805      	ldr	r0, [sp, #20]
 8006ffe:	4649      	mov	r1, r9
 8007000:	f002 fd56 	bl	8009ab0 <_Bfree>
 8007004:	9805      	ldr	r0, [sp, #20]
 8007006:	4641      	mov	r1, r8
 8007008:	f002 fd52 	bl	8009ab0 <_Bfree>
 800700c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	f002 fd4e 	bl	8009ab0 <_Bfree>
 8007014:	9805      	ldr	r0, [sp, #20]
 8007016:	4621      	mov	r1, r4
 8007018:	f002 fd4a 	bl	8009ab0 <_Bfree>
 800701c:	e5f9      	b.n	8006c12 <_strtod_l+0x72>
 800701e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007020:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007024:	4293      	cmp	r3, r2
 8007026:	dbbc      	blt.n	8006fa2 <_strtod_l+0x402>
 8007028:	4c41      	ldr	r4, [pc, #260]	@ (8007130 <_strtod_l+0x590>)
 800702a:	f1c5 050f 	rsb	r5, r5, #15
 800702e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703a:	f7f9 fafd 	bl	8000638 <__aeabi_dmul>
 800703e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007040:	1b5d      	subs	r5, r3, r5
 8007042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800704a:	e78f      	b.n	8006f6c <_strtod_l+0x3cc>
 800704c:	3316      	adds	r3, #22
 800704e:	dba8      	blt.n	8006fa2 <_strtod_l+0x402>
 8007050:	4b37      	ldr	r3, [pc, #220]	@ (8007130 <_strtod_l+0x590>)
 8007052:	eba9 0808 	sub.w	r8, r9, r8
 8007056:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800705a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800705e:	4650      	mov	r0, sl
 8007060:	4659      	mov	r1, fp
 8007062:	f7f9 fc13 	bl	800088c <__aeabi_ddiv>
 8007066:	e783      	b.n	8006f70 <_strtod_l+0x3d0>
 8007068:	4b32      	ldr	r3, [pc, #200]	@ (8007134 <_strtod_l+0x594>)
 800706a:	9308      	str	r3, [sp, #32]
 800706c:	2300      	movs	r3, #0
 800706e:	1124      	asrs	r4, r4, #4
 8007070:	4650      	mov	r0, sl
 8007072:	4659      	mov	r1, fp
 8007074:	461e      	mov	r6, r3
 8007076:	2c01      	cmp	r4, #1
 8007078:	dc21      	bgt.n	80070be <_strtod_l+0x51e>
 800707a:	b10b      	cbz	r3, 8007080 <_strtod_l+0x4e0>
 800707c:	4682      	mov	sl, r0
 800707e:	468b      	mov	fp, r1
 8007080:	492c      	ldr	r1, [pc, #176]	@ (8007134 <_strtod_l+0x594>)
 8007082:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007086:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800708a:	4652      	mov	r2, sl
 800708c:	465b      	mov	r3, fp
 800708e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007092:	f7f9 fad1 	bl	8000638 <__aeabi_dmul>
 8007096:	4b28      	ldr	r3, [pc, #160]	@ (8007138 <_strtod_l+0x598>)
 8007098:	460a      	mov	r2, r1
 800709a:	400b      	ands	r3, r1
 800709c:	4927      	ldr	r1, [pc, #156]	@ (800713c <_strtod_l+0x59c>)
 800709e:	428b      	cmp	r3, r1
 80070a0:	4682      	mov	sl, r0
 80070a2:	d898      	bhi.n	8006fd6 <_strtod_l+0x436>
 80070a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf86      	itte	hi
 80070ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007140 <_strtod_l+0x5a0>
 80070b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80070b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80070b8:	2300      	movs	r3, #0
 80070ba:	9308      	str	r3, [sp, #32]
 80070bc:	e07a      	b.n	80071b4 <_strtod_l+0x614>
 80070be:	07e2      	lsls	r2, r4, #31
 80070c0:	d505      	bpl.n	80070ce <_strtod_l+0x52e>
 80070c2:	9b08      	ldr	r3, [sp, #32]
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 fab6 	bl	8000638 <__aeabi_dmul>
 80070cc:	2301      	movs	r3, #1
 80070ce:	9a08      	ldr	r2, [sp, #32]
 80070d0:	3208      	adds	r2, #8
 80070d2:	3601      	adds	r6, #1
 80070d4:	1064      	asrs	r4, r4, #1
 80070d6:	9208      	str	r2, [sp, #32]
 80070d8:	e7cd      	b.n	8007076 <_strtod_l+0x4d6>
 80070da:	d0ed      	beq.n	80070b8 <_strtod_l+0x518>
 80070dc:	4264      	negs	r4, r4
 80070de:	f014 020f 	ands.w	r2, r4, #15
 80070e2:	d00a      	beq.n	80070fa <_strtod_l+0x55a>
 80070e4:	4b12      	ldr	r3, [pc, #72]	@ (8007130 <_strtod_l+0x590>)
 80070e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ea:	4650      	mov	r0, sl
 80070ec:	4659      	mov	r1, fp
 80070ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f2:	f7f9 fbcb 	bl	800088c <__aeabi_ddiv>
 80070f6:	4682      	mov	sl, r0
 80070f8:	468b      	mov	fp, r1
 80070fa:	1124      	asrs	r4, r4, #4
 80070fc:	d0dc      	beq.n	80070b8 <_strtod_l+0x518>
 80070fe:	2c1f      	cmp	r4, #31
 8007100:	dd20      	ble.n	8007144 <_strtod_l+0x5a4>
 8007102:	2400      	movs	r4, #0
 8007104:	46a0      	mov	r8, r4
 8007106:	940a      	str	r4, [sp, #40]	@ 0x28
 8007108:	46a1      	mov	r9, r4
 800710a:	9a05      	ldr	r2, [sp, #20]
 800710c:	2322      	movs	r3, #34	@ 0x22
 800710e:	f04f 0a00 	mov.w	sl, #0
 8007112:	f04f 0b00 	mov.w	fp, #0
 8007116:	6013      	str	r3, [r2, #0]
 8007118:	e768      	b.n	8006fec <_strtod_l+0x44c>
 800711a:	bf00      	nop
 800711c:	0800b906 	.word	0x0800b906
 8007120:	0800b7a4 	.word	0x0800b7a4
 8007124:	0800b8fe 	.word	0x0800b8fe
 8007128:	0800b938 	.word	0x0800b938
 800712c:	0800bbc4 	.word	0x0800bbc4
 8007130:	0800bab0 	.word	0x0800bab0
 8007134:	0800ba88 	.word	0x0800ba88
 8007138:	7ff00000 	.word	0x7ff00000
 800713c:	7ca00000 	.word	0x7ca00000
 8007140:	7fefffff 	.word	0x7fefffff
 8007144:	f014 0310 	ands.w	r3, r4, #16
 8007148:	bf18      	it	ne
 800714a:	236a      	movne	r3, #106	@ 0x6a
 800714c:	4ea9      	ldr	r6, [pc, #676]	@ (80073f4 <_strtod_l+0x854>)
 800714e:	9308      	str	r3, [sp, #32]
 8007150:	4650      	mov	r0, sl
 8007152:	4659      	mov	r1, fp
 8007154:	2300      	movs	r3, #0
 8007156:	07e2      	lsls	r2, r4, #31
 8007158:	d504      	bpl.n	8007164 <_strtod_l+0x5c4>
 800715a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800715e:	f7f9 fa6b 	bl	8000638 <__aeabi_dmul>
 8007162:	2301      	movs	r3, #1
 8007164:	1064      	asrs	r4, r4, #1
 8007166:	f106 0608 	add.w	r6, r6, #8
 800716a:	d1f4      	bne.n	8007156 <_strtod_l+0x5b6>
 800716c:	b10b      	cbz	r3, 8007172 <_strtod_l+0x5d2>
 800716e:	4682      	mov	sl, r0
 8007170:	468b      	mov	fp, r1
 8007172:	9b08      	ldr	r3, [sp, #32]
 8007174:	b1b3      	cbz	r3, 80071a4 <_strtod_l+0x604>
 8007176:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800717a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800717e:	2b00      	cmp	r3, #0
 8007180:	4659      	mov	r1, fp
 8007182:	dd0f      	ble.n	80071a4 <_strtod_l+0x604>
 8007184:	2b1f      	cmp	r3, #31
 8007186:	dd55      	ble.n	8007234 <_strtod_l+0x694>
 8007188:	2b34      	cmp	r3, #52	@ 0x34
 800718a:	bfde      	ittt	le
 800718c:	f04f 33ff 	movle.w	r3, #4294967295
 8007190:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007194:	4093      	lslle	r3, r2
 8007196:	f04f 0a00 	mov.w	sl, #0
 800719a:	bfcc      	ite	gt
 800719c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80071a0:	ea03 0b01 	andle.w	fp, r3, r1
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	f7f9 fcac 	bl	8000b08 <__aeabi_dcmpeq>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d1a6      	bne.n	8007102 <_strtod_l+0x562>
 80071b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80071ba:	9805      	ldr	r0, [sp, #20]
 80071bc:	462b      	mov	r3, r5
 80071be:	463a      	mov	r2, r7
 80071c0:	f002 fcde 	bl	8009b80 <__s2b>
 80071c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f af05 	beq.w	8006fd6 <_strtod_l+0x436>
 80071cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	eba9 0308 	sub.w	r3, r9, r8
 80071d4:	bfa8      	it	ge
 80071d6:	2300      	movge	r3, #0
 80071d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80071da:	2400      	movs	r4, #0
 80071dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80071e2:	46a0      	mov	r8, r4
 80071e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071e6:	9805      	ldr	r0, [sp, #20]
 80071e8:	6859      	ldr	r1, [r3, #4]
 80071ea:	f002 fc21 	bl	8009a30 <_Balloc>
 80071ee:	4681      	mov	r9, r0
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f43f aef4 	beq.w	8006fde <_strtod_l+0x43e>
 80071f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	3202      	adds	r2, #2
 80071fc:	f103 010c 	add.w	r1, r3, #12
 8007200:	0092      	lsls	r2, r2, #2
 8007202:	300c      	adds	r0, #12
 8007204:	f001 f963 	bl	80084ce <memcpy>
 8007208:	ec4b ab10 	vmov	d0, sl, fp
 800720c:	9805      	ldr	r0, [sp, #20]
 800720e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007210:	a91b      	add	r1, sp, #108	@ 0x6c
 8007212:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007216:	f002 ffef 	bl	800a1f8 <__d2b>
 800721a:	901a      	str	r0, [sp, #104]	@ 0x68
 800721c:	2800      	cmp	r0, #0
 800721e:	f43f aede 	beq.w	8006fde <_strtod_l+0x43e>
 8007222:	9805      	ldr	r0, [sp, #20]
 8007224:	2101      	movs	r1, #1
 8007226:	f002 fd41 	bl	8009cac <__i2b>
 800722a:	4680      	mov	r8, r0
 800722c:	b948      	cbnz	r0, 8007242 <_strtod_l+0x6a2>
 800722e:	f04f 0800 	mov.w	r8, #0
 8007232:	e6d4      	b.n	8006fde <_strtod_l+0x43e>
 8007234:	f04f 32ff 	mov.w	r2, #4294967295
 8007238:	fa02 f303 	lsl.w	r3, r2, r3
 800723c:	ea03 0a0a 	and.w	sl, r3, sl
 8007240:	e7b0      	b.n	80071a4 <_strtod_l+0x604>
 8007242:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007244:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007246:	2d00      	cmp	r5, #0
 8007248:	bfab      	itete	ge
 800724a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800724c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800724e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007250:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007252:	bfac      	ite	ge
 8007254:	18ef      	addge	r7, r5, r3
 8007256:	1b5e      	sublt	r6, r3, r5
 8007258:	9b08      	ldr	r3, [sp, #32]
 800725a:	1aed      	subs	r5, r5, r3
 800725c:	4415      	add	r5, r2
 800725e:	4b66      	ldr	r3, [pc, #408]	@ (80073f8 <_strtod_l+0x858>)
 8007260:	3d01      	subs	r5, #1
 8007262:	429d      	cmp	r5, r3
 8007264:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007268:	da50      	bge.n	800730c <_strtod_l+0x76c>
 800726a:	1b5b      	subs	r3, r3, r5
 800726c:	2b1f      	cmp	r3, #31
 800726e:	eba2 0203 	sub.w	r2, r2, r3
 8007272:	f04f 0101 	mov.w	r1, #1
 8007276:	dc3d      	bgt.n	80072f4 <_strtod_l+0x754>
 8007278:	fa01 f303 	lsl.w	r3, r1, r3
 800727c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800727e:	2300      	movs	r3, #0
 8007280:	9310      	str	r3, [sp, #64]	@ 0x40
 8007282:	18bd      	adds	r5, r7, r2
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	42af      	cmp	r7, r5
 8007288:	4416      	add	r6, r2
 800728a:	441e      	add	r6, r3
 800728c:	463b      	mov	r3, r7
 800728e:	bfa8      	it	ge
 8007290:	462b      	movge	r3, r5
 8007292:	42b3      	cmp	r3, r6
 8007294:	bfa8      	it	ge
 8007296:	4633      	movge	r3, r6
 8007298:	2b00      	cmp	r3, #0
 800729a:	bfc2      	ittt	gt
 800729c:	1aed      	subgt	r5, r5, r3
 800729e:	1af6      	subgt	r6, r6, r3
 80072a0:	1aff      	subgt	r7, r7, r3
 80072a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd16      	ble.n	80072d6 <_strtod_l+0x736>
 80072a8:	4641      	mov	r1, r8
 80072aa:	9805      	ldr	r0, [sp, #20]
 80072ac:	461a      	mov	r2, r3
 80072ae:	f002 fdbd 	bl	8009e2c <__pow5mult>
 80072b2:	4680      	mov	r8, r0
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d0ba      	beq.n	800722e <_strtod_l+0x68e>
 80072b8:	4601      	mov	r1, r0
 80072ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072bc:	9805      	ldr	r0, [sp, #20]
 80072be:	f002 fd0b 	bl	8009cd8 <__multiply>
 80072c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f43f ae8a 	beq.w	8006fde <_strtod_l+0x43e>
 80072ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072cc:	9805      	ldr	r0, [sp, #20]
 80072ce:	f002 fbef 	bl	8009ab0 <_Bfree>
 80072d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	dc1d      	bgt.n	8007316 <_strtod_l+0x776>
 80072da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dd23      	ble.n	8007328 <_strtod_l+0x788>
 80072e0:	4649      	mov	r1, r9
 80072e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072e4:	9805      	ldr	r0, [sp, #20]
 80072e6:	f002 fda1 	bl	8009e2c <__pow5mult>
 80072ea:	4681      	mov	r9, r0
 80072ec:	b9e0      	cbnz	r0, 8007328 <_strtod_l+0x788>
 80072ee:	f04f 0900 	mov.w	r9, #0
 80072f2:	e674      	b.n	8006fde <_strtod_l+0x43e>
 80072f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007300:	35e2      	adds	r5, #226	@ 0xe2
 8007302:	fa01 f305 	lsl.w	r3, r1, r5
 8007306:	9310      	str	r3, [sp, #64]	@ 0x40
 8007308:	9113      	str	r1, [sp, #76]	@ 0x4c
 800730a:	e7ba      	b.n	8007282 <_strtod_l+0x6e2>
 800730c:	2300      	movs	r3, #0
 800730e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007310:	2301      	movs	r3, #1
 8007312:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007314:	e7b5      	b.n	8007282 <_strtod_l+0x6e2>
 8007316:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007318:	9805      	ldr	r0, [sp, #20]
 800731a:	462a      	mov	r2, r5
 800731c:	f002 fde0 	bl	8009ee0 <__lshift>
 8007320:	901a      	str	r0, [sp, #104]	@ 0x68
 8007322:	2800      	cmp	r0, #0
 8007324:	d1d9      	bne.n	80072da <_strtod_l+0x73a>
 8007326:	e65a      	b.n	8006fde <_strtod_l+0x43e>
 8007328:	2e00      	cmp	r6, #0
 800732a:	dd07      	ble.n	800733c <_strtod_l+0x79c>
 800732c:	4649      	mov	r1, r9
 800732e:	9805      	ldr	r0, [sp, #20]
 8007330:	4632      	mov	r2, r6
 8007332:	f002 fdd5 	bl	8009ee0 <__lshift>
 8007336:	4681      	mov	r9, r0
 8007338:	2800      	cmp	r0, #0
 800733a:	d0d8      	beq.n	80072ee <_strtod_l+0x74e>
 800733c:	2f00      	cmp	r7, #0
 800733e:	dd08      	ble.n	8007352 <_strtod_l+0x7b2>
 8007340:	4641      	mov	r1, r8
 8007342:	9805      	ldr	r0, [sp, #20]
 8007344:	463a      	mov	r2, r7
 8007346:	f002 fdcb 	bl	8009ee0 <__lshift>
 800734a:	4680      	mov	r8, r0
 800734c:	2800      	cmp	r0, #0
 800734e:	f43f ae46 	beq.w	8006fde <_strtod_l+0x43e>
 8007352:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007354:	9805      	ldr	r0, [sp, #20]
 8007356:	464a      	mov	r2, r9
 8007358:	f002 fe4a 	bl	8009ff0 <__mdiff>
 800735c:	4604      	mov	r4, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	f43f ae3d 	beq.w	8006fde <_strtod_l+0x43e>
 8007364:	68c3      	ldr	r3, [r0, #12]
 8007366:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007368:	2300      	movs	r3, #0
 800736a:	60c3      	str	r3, [r0, #12]
 800736c:	4641      	mov	r1, r8
 800736e:	f002 fe23 	bl	8009fb8 <__mcmp>
 8007372:	2800      	cmp	r0, #0
 8007374:	da46      	bge.n	8007404 <_strtod_l+0x864>
 8007376:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007378:	ea53 030a 	orrs.w	r3, r3, sl
 800737c:	d16c      	bne.n	8007458 <_strtod_l+0x8b8>
 800737e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007382:	2b00      	cmp	r3, #0
 8007384:	d168      	bne.n	8007458 <_strtod_l+0x8b8>
 8007386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800738a:	0d1b      	lsrs	r3, r3, #20
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007392:	d961      	bls.n	8007458 <_strtod_l+0x8b8>
 8007394:	6963      	ldr	r3, [r4, #20]
 8007396:	b913      	cbnz	r3, 800739e <_strtod_l+0x7fe>
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	2b01      	cmp	r3, #1
 800739c:	dd5c      	ble.n	8007458 <_strtod_l+0x8b8>
 800739e:	4621      	mov	r1, r4
 80073a0:	2201      	movs	r2, #1
 80073a2:	9805      	ldr	r0, [sp, #20]
 80073a4:	f002 fd9c 	bl	8009ee0 <__lshift>
 80073a8:	4641      	mov	r1, r8
 80073aa:	4604      	mov	r4, r0
 80073ac:	f002 fe04 	bl	8009fb8 <__mcmp>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	dd51      	ble.n	8007458 <_strtod_l+0x8b8>
 80073b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80073b8:	9a08      	ldr	r2, [sp, #32]
 80073ba:	0d1b      	lsrs	r3, r3, #20
 80073bc:	051b      	lsls	r3, r3, #20
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d06b      	beq.n	800749a <_strtod_l+0x8fa>
 80073c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80073c6:	d868      	bhi.n	800749a <_strtod_l+0x8fa>
 80073c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80073cc:	f67f ae9d 	bls.w	800710a <_strtod_l+0x56a>
 80073d0:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <_strtod_l+0x85c>)
 80073d2:	4650      	mov	r0, sl
 80073d4:	4659      	mov	r1, fp
 80073d6:	2200      	movs	r2, #0
 80073d8:	f7f9 f92e 	bl	8000638 <__aeabi_dmul>
 80073dc:	4b08      	ldr	r3, [pc, #32]	@ (8007400 <_strtod_l+0x860>)
 80073de:	400b      	ands	r3, r1
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f47f ae05 	bne.w	8006ff4 <_strtod_l+0x454>
 80073ea:	9a05      	ldr	r2, [sp, #20]
 80073ec:	2322      	movs	r3, #34	@ 0x22
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e600      	b.n	8006ff4 <_strtod_l+0x454>
 80073f2:	bf00      	nop
 80073f4:	0800b7d0 	.word	0x0800b7d0
 80073f8:	fffffc02 	.word	0xfffffc02
 80073fc:	39500000 	.word	0x39500000
 8007400:	7ff00000 	.word	0x7ff00000
 8007404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007408:	d165      	bne.n	80074d6 <_strtod_l+0x936>
 800740a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800740c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007410:	b35a      	cbz	r2, 800746a <_strtod_l+0x8ca>
 8007412:	4a9f      	ldr	r2, [pc, #636]	@ (8007690 <_strtod_l+0xaf0>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d12b      	bne.n	8007470 <_strtod_l+0x8d0>
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	4651      	mov	r1, sl
 800741c:	b303      	cbz	r3, 8007460 <_strtod_l+0x8c0>
 800741e:	4b9d      	ldr	r3, [pc, #628]	@ (8007694 <_strtod_l+0xaf4>)
 8007420:	465a      	mov	r2, fp
 8007422:	4013      	ands	r3, r2
 8007424:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007428:	f04f 32ff 	mov.w	r2, #4294967295
 800742c:	d81b      	bhi.n	8007466 <_strtod_l+0x8c6>
 800742e:	0d1b      	lsrs	r3, r3, #20
 8007430:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007434:	fa02 f303 	lsl.w	r3, r2, r3
 8007438:	4299      	cmp	r1, r3
 800743a:	d119      	bne.n	8007470 <_strtod_l+0x8d0>
 800743c:	4b96      	ldr	r3, [pc, #600]	@ (8007698 <_strtod_l+0xaf8>)
 800743e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007440:	429a      	cmp	r2, r3
 8007442:	d102      	bne.n	800744a <_strtod_l+0x8aa>
 8007444:	3101      	adds	r1, #1
 8007446:	f43f adca 	beq.w	8006fde <_strtod_l+0x43e>
 800744a:	4b92      	ldr	r3, [pc, #584]	@ (8007694 <_strtod_l+0xaf4>)
 800744c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800744e:	401a      	ands	r2, r3
 8007450:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007454:	f04f 0a00 	mov.w	sl, #0
 8007458:	9b08      	ldr	r3, [sp, #32]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1b8      	bne.n	80073d0 <_strtod_l+0x830>
 800745e:	e5c9      	b.n	8006ff4 <_strtod_l+0x454>
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	e7e8      	b.n	8007438 <_strtod_l+0x898>
 8007466:	4613      	mov	r3, r2
 8007468:	e7e6      	b.n	8007438 <_strtod_l+0x898>
 800746a:	ea53 030a 	orrs.w	r3, r3, sl
 800746e:	d0a1      	beq.n	80073b4 <_strtod_l+0x814>
 8007470:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007472:	b1db      	cbz	r3, 80074ac <_strtod_l+0x90c>
 8007474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007476:	4213      	tst	r3, r2
 8007478:	d0ee      	beq.n	8007458 <_strtod_l+0x8b8>
 800747a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800747c:	9a08      	ldr	r2, [sp, #32]
 800747e:	4650      	mov	r0, sl
 8007480:	4659      	mov	r1, fp
 8007482:	b1bb      	cbz	r3, 80074b4 <_strtod_l+0x914>
 8007484:	f7ff fb6e 	bl	8006b64 <sulp>
 8007488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800748c:	ec53 2b10 	vmov	r2, r3, d0
 8007490:	f7f8 ff1c 	bl	80002cc <__adddf3>
 8007494:	4682      	mov	sl, r0
 8007496:	468b      	mov	fp, r1
 8007498:	e7de      	b.n	8007458 <_strtod_l+0x8b8>
 800749a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800749e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074a6:	f04f 3aff 	mov.w	sl, #4294967295
 80074aa:	e7d5      	b.n	8007458 <_strtod_l+0x8b8>
 80074ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074ae:	ea13 0f0a 	tst.w	r3, sl
 80074b2:	e7e1      	b.n	8007478 <_strtod_l+0x8d8>
 80074b4:	f7ff fb56 	bl	8006b64 <sulp>
 80074b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074bc:	ec53 2b10 	vmov	r2, r3, d0
 80074c0:	f7f8 ff02 	bl	80002c8 <__aeabi_dsub>
 80074c4:	2200      	movs	r2, #0
 80074c6:	2300      	movs	r3, #0
 80074c8:	4682      	mov	sl, r0
 80074ca:	468b      	mov	fp, r1
 80074cc:	f7f9 fb1c 	bl	8000b08 <__aeabi_dcmpeq>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d0c1      	beq.n	8007458 <_strtod_l+0x8b8>
 80074d4:	e619      	b.n	800710a <_strtod_l+0x56a>
 80074d6:	4641      	mov	r1, r8
 80074d8:	4620      	mov	r0, r4
 80074da:	f002 fee5 	bl	800a2a8 <__ratio>
 80074de:	ec57 6b10 	vmov	r6, r7, d0
 80074e2:	2200      	movs	r2, #0
 80074e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f9 fb20 	bl	8000b30 <__aeabi_dcmple>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d06f      	beq.n	80075d4 <_strtod_l+0xa34>
 80074f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d17a      	bne.n	80075f0 <_strtod_l+0xa50>
 80074fa:	f1ba 0f00 	cmp.w	sl, #0
 80074fe:	d158      	bne.n	80075b2 <_strtod_l+0xa12>
 8007500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007506:	2b00      	cmp	r3, #0
 8007508:	d15a      	bne.n	80075c0 <_strtod_l+0xa20>
 800750a:	4b64      	ldr	r3, [pc, #400]	@ (800769c <_strtod_l+0xafc>)
 800750c:	2200      	movs	r2, #0
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f9 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d159      	bne.n	80075ce <_strtod_l+0xa2e>
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	4b60      	ldr	r3, [pc, #384]	@ (80076a0 <_strtod_l+0xb00>)
 8007520:	2200      	movs	r2, #0
 8007522:	f7f9 f889 	bl	8000638 <__aeabi_dmul>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800752e:	9606      	str	r6, [sp, #24]
 8007530:	9307      	str	r3, [sp, #28]
 8007532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007536:	4d57      	ldr	r5, [pc, #348]	@ (8007694 <_strtod_l+0xaf4>)
 8007538:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800753c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753e:	401d      	ands	r5, r3
 8007540:	4b58      	ldr	r3, [pc, #352]	@ (80076a4 <_strtod_l+0xb04>)
 8007542:	429d      	cmp	r5, r3
 8007544:	f040 80b2 	bne.w	80076ac <_strtod_l+0xb0c>
 8007548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800754a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800754e:	ec4b ab10 	vmov	d0, sl, fp
 8007552:	f002 fde1 	bl	800a118 <__ulp>
 8007556:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800755a:	ec51 0b10 	vmov	r0, r1, d0
 800755e:	f7f9 f86b 	bl	8000638 <__aeabi_dmul>
 8007562:	4652      	mov	r2, sl
 8007564:	465b      	mov	r3, fp
 8007566:	f7f8 feb1 	bl	80002cc <__adddf3>
 800756a:	460b      	mov	r3, r1
 800756c:	4949      	ldr	r1, [pc, #292]	@ (8007694 <_strtod_l+0xaf4>)
 800756e:	4a4e      	ldr	r2, [pc, #312]	@ (80076a8 <_strtod_l+0xb08>)
 8007570:	4019      	ands	r1, r3
 8007572:	4291      	cmp	r1, r2
 8007574:	4682      	mov	sl, r0
 8007576:	d942      	bls.n	80075fe <_strtod_l+0xa5e>
 8007578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800757a:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <_strtod_l+0xaf8>)
 800757c:	429a      	cmp	r2, r3
 800757e:	d103      	bne.n	8007588 <_strtod_l+0x9e8>
 8007580:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007582:	3301      	adds	r3, #1
 8007584:	f43f ad2b 	beq.w	8006fde <_strtod_l+0x43e>
 8007588:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007698 <_strtod_l+0xaf8>
 800758c:	f04f 3aff 	mov.w	sl, #4294967295
 8007590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007592:	9805      	ldr	r0, [sp, #20]
 8007594:	f002 fa8c 	bl	8009ab0 <_Bfree>
 8007598:	9805      	ldr	r0, [sp, #20]
 800759a:	4649      	mov	r1, r9
 800759c:	f002 fa88 	bl	8009ab0 <_Bfree>
 80075a0:	9805      	ldr	r0, [sp, #20]
 80075a2:	4641      	mov	r1, r8
 80075a4:	f002 fa84 	bl	8009ab0 <_Bfree>
 80075a8:	9805      	ldr	r0, [sp, #20]
 80075aa:	4621      	mov	r1, r4
 80075ac:	f002 fa80 	bl	8009ab0 <_Bfree>
 80075b0:	e618      	b.n	80071e4 <_strtod_l+0x644>
 80075b2:	f1ba 0f01 	cmp.w	sl, #1
 80075b6:	d103      	bne.n	80075c0 <_strtod_l+0xa20>
 80075b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f43f ada5 	beq.w	800710a <_strtod_l+0x56a>
 80075c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007670 <_strtod_l+0xad0>
 80075c4:	4f35      	ldr	r7, [pc, #212]	@ (800769c <_strtod_l+0xafc>)
 80075c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075ca:	2600      	movs	r6, #0
 80075cc:	e7b1      	b.n	8007532 <_strtod_l+0x992>
 80075ce:	4f34      	ldr	r7, [pc, #208]	@ (80076a0 <_strtod_l+0xb00>)
 80075d0:	2600      	movs	r6, #0
 80075d2:	e7aa      	b.n	800752a <_strtod_l+0x98a>
 80075d4:	4b32      	ldr	r3, [pc, #200]	@ (80076a0 <_strtod_l+0xb00>)
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f9 f82c 	bl	8000638 <__aeabi_dmul>
 80075e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e2:	4606      	mov	r6, r0
 80075e4:	460f      	mov	r7, r1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d09f      	beq.n	800752a <_strtod_l+0x98a>
 80075ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80075ee:	e7a0      	b.n	8007532 <_strtod_l+0x992>
 80075f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007678 <_strtod_l+0xad8>
 80075f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075f8:	ec57 6b17 	vmov	r6, r7, d7
 80075fc:	e799      	b.n	8007532 <_strtod_l+0x992>
 80075fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1c1      	bne.n	8007590 <_strtod_l+0x9f0>
 800760c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007610:	0d1b      	lsrs	r3, r3, #20
 8007612:	051b      	lsls	r3, r3, #20
 8007614:	429d      	cmp	r5, r3
 8007616:	d1bb      	bne.n	8007590 <_strtod_l+0x9f0>
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fb6c 	bl	8000cf8 <__aeabi_d2lz>
 8007620:	f7f8 ffdc 	bl	80005dc <__aeabi_l2d>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f8 fe4c 	bl	80002c8 <__aeabi_dsub>
 8007630:	460b      	mov	r3, r1
 8007632:	4602      	mov	r2, r0
 8007634:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007638:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800763c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800763e:	ea46 060a 	orr.w	r6, r6, sl
 8007642:	431e      	orrs	r6, r3
 8007644:	d06f      	beq.n	8007726 <_strtod_l+0xb86>
 8007646:	a30e      	add	r3, pc, #56	@ (adr r3, 8007680 <_strtod_l+0xae0>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f9 fa66 	bl	8000b1c <__aeabi_dcmplt>
 8007650:	2800      	cmp	r0, #0
 8007652:	f47f accf 	bne.w	8006ff4 <_strtod_l+0x454>
 8007656:	a30c      	add	r3, pc, #48	@ (adr r3, 8007688 <_strtod_l+0xae8>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007660:	f7f9 fa7a 	bl	8000b58 <__aeabi_dcmpgt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d093      	beq.n	8007590 <_strtod_l+0x9f0>
 8007668:	e4c4      	b.n	8006ff4 <_strtod_l+0x454>
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w
 8007670:	00000000 	.word	0x00000000
 8007674:	bff00000 	.word	0xbff00000
 8007678:	00000000 	.word	0x00000000
 800767c:	3ff00000 	.word	0x3ff00000
 8007680:	94a03595 	.word	0x94a03595
 8007684:	3fdfffff 	.word	0x3fdfffff
 8007688:	35afe535 	.word	0x35afe535
 800768c:	3fe00000 	.word	0x3fe00000
 8007690:	000fffff 	.word	0x000fffff
 8007694:	7ff00000 	.word	0x7ff00000
 8007698:	7fefffff 	.word	0x7fefffff
 800769c:	3ff00000 	.word	0x3ff00000
 80076a0:	3fe00000 	.word	0x3fe00000
 80076a4:	7fe00000 	.word	0x7fe00000
 80076a8:	7c9fffff 	.word	0x7c9fffff
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	b323      	cbz	r3, 80076fa <_strtod_l+0xb5a>
 80076b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80076b4:	d821      	bhi.n	80076fa <_strtod_l+0xb5a>
 80076b6:	a328      	add	r3, pc, #160	@ (adr r3, 8007758 <_strtod_l+0xbb8>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	4630      	mov	r0, r6
 80076be:	4639      	mov	r1, r7
 80076c0:	f7f9 fa36 	bl	8000b30 <__aeabi_dcmple>
 80076c4:	b1a0      	cbz	r0, 80076f0 <_strtod_l+0xb50>
 80076c6:	4639      	mov	r1, r7
 80076c8:	4630      	mov	r0, r6
 80076ca:	f7f9 fa8d 	bl	8000be8 <__aeabi_d2uiz>
 80076ce:	2801      	cmp	r0, #1
 80076d0:	bf38      	it	cc
 80076d2:	2001      	movcc	r0, #1
 80076d4:	f7f8 ff36 	bl	8000544 <__aeabi_ui2d>
 80076d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076da:	4606      	mov	r6, r0
 80076dc:	460f      	mov	r7, r1
 80076de:	b9fb      	cbnz	r3, 8007720 <_strtod_l+0xb80>
 80076e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80076e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80076e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80076ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80076f6:	1b5b      	subs	r3, r3, r5
 80076f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80076fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007702:	f002 fd09 	bl	800a118 <__ulp>
 8007706:	4650      	mov	r0, sl
 8007708:	ec53 2b10 	vmov	r2, r3, d0
 800770c:	4659      	mov	r1, fp
 800770e:	f7f8 ff93 	bl	8000638 <__aeabi_dmul>
 8007712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007716:	f7f8 fdd9 	bl	80002cc <__adddf3>
 800771a:	4682      	mov	sl, r0
 800771c:	468b      	mov	fp, r1
 800771e:	e770      	b.n	8007602 <_strtod_l+0xa62>
 8007720:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007724:	e7e0      	b.n	80076e8 <_strtod_l+0xb48>
 8007726:	a30e      	add	r3, pc, #56	@ (adr r3, 8007760 <_strtod_l+0xbc0>)
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f7f9 f9f6 	bl	8000b1c <__aeabi_dcmplt>
 8007730:	e798      	b.n	8007664 <_strtod_l+0xac4>
 8007732:	2300      	movs	r3, #0
 8007734:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007736:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	f7ff ba6d 	b.w	8006c1a <_strtod_l+0x7a>
 8007740:	2a65      	cmp	r2, #101	@ 0x65
 8007742:	f43f ab66 	beq.w	8006e12 <_strtod_l+0x272>
 8007746:	2a45      	cmp	r2, #69	@ 0x45
 8007748:	f43f ab63 	beq.w	8006e12 <_strtod_l+0x272>
 800774c:	2301      	movs	r3, #1
 800774e:	f7ff bb9e 	b.w	8006e8e <_strtod_l+0x2ee>
 8007752:	bf00      	nop
 8007754:	f3af 8000 	nop.w
 8007758:	ffc00000 	.word	0xffc00000
 800775c:	41dfffff 	.word	0x41dfffff
 8007760:	94a03595 	.word	0x94a03595
 8007764:	3fcfffff 	.word	0x3fcfffff

08007768 <strtod>:
 8007768:	460a      	mov	r2, r1
 800776a:	4601      	mov	r1, r0
 800776c:	4802      	ldr	r0, [pc, #8]	@ (8007778 <strtod+0x10>)
 800776e:	4b03      	ldr	r3, [pc, #12]	@ (800777c <strtod+0x14>)
 8007770:	6800      	ldr	r0, [r0, #0]
 8007772:	f7ff ba15 	b.w	8006ba0 <_strtod_l>
 8007776:	bf00      	nop
 8007778:	20000234 	.word	0x20000234
 800777c:	200000c8 	.word	0x200000c8

08007780 <_strtol_l.constprop.0>:
 8007780:	2b24      	cmp	r3, #36	@ 0x24
 8007782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007786:	4686      	mov	lr, r0
 8007788:	4690      	mov	r8, r2
 800778a:	d801      	bhi.n	8007790 <_strtol_l.constprop.0+0x10>
 800778c:	2b01      	cmp	r3, #1
 800778e:	d106      	bne.n	800779e <_strtol_l.constprop.0+0x1e>
 8007790:	f000 fe70 	bl	8008474 <__errno>
 8007794:	2316      	movs	r3, #22
 8007796:	6003      	str	r3, [r0, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	4834      	ldr	r0, [pc, #208]	@ (8007870 <_strtol_l.constprop.0+0xf0>)
 80077a0:	460d      	mov	r5, r1
 80077a2:	462a      	mov	r2, r5
 80077a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077a8:	5d06      	ldrb	r6, [r0, r4]
 80077aa:	f016 0608 	ands.w	r6, r6, #8
 80077ae:	d1f8      	bne.n	80077a2 <_strtol_l.constprop.0+0x22>
 80077b0:	2c2d      	cmp	r4, #45	@ 0x2d
 80077b2:	d12d      	bne.n	8007810 <_strtol_l.constprop.0+0x90>
 80077b4:	782c      	ldrb	r4, [r5, #0]
 80077b6:	2601      	movs	r6, #1
 80077b8:	1c95      	adds	r5, r2, #2
 80077ba:	f033 0210 	bics.w	r2, r3, #16
 80077be:	d109      	bne.n	80077d4 <_strtol_l.constprop.0+0x54>
 80077c0:	2c30      	cmp	r4, #48	@ 0x30
 80077c2:	d12a      	bne.n	800781a <_strtol_l.constprop.0+0x9a>
 80077c4:	782a      	ldrb	r2, [r5, #0]
 80077c6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077ca:	2a58      	cmp	r2, #88	@ 0x58
 80077cc:	d125      	bne.n	800781a <_strtol_l.constprop.0+0x9a>
 80077ce:	786c      	ldrb	r4, [r5, #1]
 80077d0:	2310      	movs	r3, #16
 80077d2:	3502      	adds	r5, #2
 80077d4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077dc:	2200      	movs	r2, #0
 80077de:	fbbc f9f3 	udiv	r9, ip, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	fb03 ca19 	mls	sl, r3, r9, ip
 80077e8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077ec:	2f09      	cmp	r7, #9
 80077ee:	d81b      	bhi.n	8007828 <_strtol_l.constprop.0+0xa8>
 80077f0:	463c      	mov	r4, r7
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	dd27      	ble.n	8007846 <_strtol_l.constprop.0+0xc6>
 80077f6:	1c57      	adds	r7, r2, #1
 80077f8:	d007      	beq.n	800780a <_strtol_l.constprop.0+0x8a>
 80077fa:	4581      	cmp	r9, r0
 80077fc:	d320      	bcc.n	8007840 <_strtol_l.constprop.0+0xc0>
 80077fe:	d101      	bne.n	8007804 <_strtol_l.constprop.0+0x84>
 8007800:	45a2      	cmp	sl, r4
 8007802:	db1d      	blt.n	8007840 <_strtol_l.constprop.0+0xc0>
 8007804:	fb00 4003 	mla	r0, r0, r3, r4
 8007808:	2201      	movs	r2, #1
 800780a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800780e:	e7eb      	b.n	80077e8 <_strtol_l.constprop.0+0x68>
 8007810:	2c2b      	cmp	r4, #43	@ 0x2b
 8007812:	bf04      	itt	eq
 8007814:	782c      	ldrbeq	r4, [r5, #0]
 8007816:	1c95      	addeq	r5, r2, #2
 8007818:	e7cf      	b.n	80077ba <_strtol_l.constprop.0+0x3a>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1da      	bne.n	80077d4 <_strtol_l.constprop.0+0x54>
 800781e:	2c30      	cmp	r4, #48	@ 0x30
 8007820:	bf0c      	ite	eq
 8007822:	2308      	moveq	r3, #8
 8007824:	230a      	movne	r3, #10
 8007826:	e7d5      	b.n	80077d4 <_strtol_l.constprop.0+0x54>
 8007828:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800782c:	2f19      	cmp	r7, #25
 800782e:	d801      	bhi.n	8007834 <_strtol_l.constprop.0+0xb4>
 8007830:	3c37      	subs	r4, #55	@ 0x37
 8007832:	e7de      	b.n	80077f2 <_strtol_l.constprop.0+0x72>
 8007834:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007838:	2f19      	cmp	r7, #25
 800783a:	d804      	bhi.n	8007846 <_strtol_l.constprop.0+0xc6>
 800783c:	3c57      	subs	r4, #87	@ 0x57
 800783e:	e7d8      	b.n	80077f2 <_strtol_l.constprop.0+0x72>
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	e7e1      	b.n	800780a <_strtol_l.constprop.0+0x8a>
 8007846:	1c53      	adds	r3, r2, #1
 8007848:	d108      	bne.n	800785c <_strtol_l.constprop.0+0xdc>
 800784a:	2322      	movs	r3, #34	@ 0x22
 800784c:	f8ce 3000 	str.w	r3, [lr]
 8007850:	4660      	mov	r0, ip
 8007852:	f1b8 0f00 	cmp.w	r8, #0
 8007856:	d0a0      	beq.n	800779a <_strtol_l.constprop.0+0x1a>
 8007858:	1e69      	subs	r1, r5, #1
 800785a:	e006      	b.n	800786a <_strtol_l.constprop.0+0xea>
 800785c:	b106      	cbz	r6, 8007860 <_strtol_l.constprop.0+0xe0>
 800785e:	4240      	negs	r0, r0
 8007860:	f1b8 0f00 	cmp.w	r8, #0
 8007864:	d099      	beq.n	800779a <_strtol_l.constprop.0+0x1a>
 8007866:	2a00      	cmp	r2, #0
 8007868:	d1f6      	bne.n	8007858 <_strtol_l.constprop.0+0xd8>
 800786a:	f8c8 1000 	str.w	r1, [r8]
 800786e:	e794      	b.n	800779a <_strtol_l.constprop.0+0x1a>
 8007870:	0800b7f9 	.word	0x0800b7f9

08007874 <strtol>:
 8007874:	4613      	mov	r3, r2
 8007876:	460a      	mov	r2, r1
 8007878:	4601      	mov	r1, r0
 800787a:	4802      	ldr	r0, [pc, #8]	@ (8007884 <strtol+0x10>)
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f7ff bf7f 	b.w	8007780 <_strtol_l.constprop.0>
 8007882:	bf00      	nop
 8007884:	20000234 	.word	0x20000234

08007888 <__cvt>:
 8007888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	ec57 6b10 	vmov	r6, r7, d0
 8007890:	2f00      	cmp	r7, #0
 8007892:	460c      	mov	r4, r1
 8007894:	4619      	mov	r1, r3
 8007896:	463b      	mov	r3, r7
 8007898:	bfbb      	ittet	lt
 800789a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800789e:	461f      	movlt	r7, r3
 80078a0:	2300      	movge	r3, #0
 80078a2:	232d      	movlt	r3, #45	@ 0x2d
 80078a4:	700b      	strb	r3, [r1, #0]
 80078a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80078ac:	4691      	mov	r9, r2
 80078ae:	f023 0820 	bic.w	r8, r3, #32
 80078b2:	bfbc      	itt	lt
 80078b4:	4632      	movlt	r2, r6
 80078b6:	4616      	movlt	r6, r2
 80078b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078bc:	d005      	beq.n	80078ca <__cvt+0x42>
 80078be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80078c2:	d100      	bne.n	80078c6 <__cvt+0x3e>
 80078c4:	3401      	adds	r4, #1
 80078c6:	2102      	movs	r1, #2
 80078c8:	e000      	b.n	80078cc <__cvt+0x44>
 80078ca:	2103      	movs	r1, #3
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	ab02      	add	r3, sp, #8
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	ec47 6b10 	vmov	d0, r6, r7
 80078d8:	4653      	mov	r3, sl
 80078da:	4622      	mov	r2, r4
 80078dc:	f000 fe98 	bl	8008610 <_dtoa_r>
 80078e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80078e4:	4605      	mov	r5, r0
 80078e6:	d119      	bne.n	800791c <__cvt+0x94>
 80078e8:	f019 0f01 	tst.w	r9, #1
 80078ec:	d00e      	beq.n	800790c <__cvt+0x84>
 80078ee:	eb00 0904 	add.w	r9, r0, r4
 80078f2:	2200      	movs	r2, #0
 80078f4:	2300      	movs	r3, #0
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f9 f905 	bl	8000b08 <__aeabi_dcmpeq>
 80078fe:	b108      	cbz	r0, 8007904 <__cvt+0x7c>
 8007900:	f8cd 900c 	str.w	r9, [sp, #12]
 8007904:	2230      	movs	r2, #48	@ 0x30
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	454b      	cmp	r3, r9
 800790a:	d31e      	bcc.n	800794a <__cvt+0xc2>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007910:	1b5b      	subs	r3, r3, r5
 8007912:	4628      	mov	r0, r5
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	b004      	add	sp, #16
 8007918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007920:	eb00 0904 	add.w	r9, r0, r4
 8007924:	d1e5      	bne.n	80078f2 <__cvt+0x6a>
 8007926:	7803      	ldrb	r3, [r0, #0]
 8007928:	2b30      	cmp	r3, #48	@ 0x30
 800792a:	d10a      	bne.n	8007942 <__cvt+0xba>
 800792c:	2200      	movs	r2, #0
 800792e:	2300      	movs	r3, #0
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f9 f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 8007938:	b918      	cbnz	r0, 8007942 <__cvt+0xba>
 800793a:	f1c4 0401 	rsb	r4, r4, #1
 800793e:	f8ca 4000 	str.w	r4, [sl]
 8007942:	f8da 3000 	ldr.w	r3, [sl]
 8007946:	4499      	add	r9, r3
 8007948:	e7d3      	b.n	80078f2 <__cvt+0x6a>
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	9103      	str	r1, [sp, #12]
 800794e:	701a      	strb	r2, [r3, #0]
 8007950:	e7d9      	b.n	8007906 <__cvt+0x7e>

08007952 <__exponent>:
 8007952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007954:	2900      	cmp	r1, #0
 8007956:	bfba      	itte	lt
 8007958:	4249      	neglt	r1, r1
 800795a:	232d      	movlt	r3, #45	@ 0x2d
 800795c:	232b      	movge	r3, #43	@ 0x2b
 800795e:	2909      	cmp	r1, #9
 8007960:	7002      	strb	r2, [r0, #0]
 8007962:	7043      	strb	r3, [r0, #1]
 8007964:	dd29      	ble.n	80079ba <__exponent+0x68>
 8007966:	f10d 0307 	add.w	r3, sp, #7
 800796a:	461d      	mov	r5, r3
 800796c:	270a      	movs	r7, #10
 800796e:	461a      	mov	r2, r3
 8007970:	fbb1 f6f7 	udiv	r6, r1, r7
 8007974:	fb07 1416 	mls	r4, r7, r6, r1
 8007978:	3430      	adds	r4, #48	@ 0x30
 800797a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800797e:	460c      	mov	r4, r1
 8007980:	2c63      	cmp	r4, #99	@ 0x63
 8007982:	f103 33ff 	add.w	r3, r3, #4294967295
 8007986:	4631      	mov	r1, r6
 8007988:	dcf1      	bgt.n	800796e <__exponent+0x1c>
 800798a:	3130      	adds	r1, #48	@ 0x30
 800798c:	1e94      	subs	r4, r2, #2
 800798e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007992:	1c41      	adds	r1, r0, #1
 8007994:	4623      	mov	r3, r4
 8007996:	42ab      	cmp	r3, r5
 8007998:	d30a      	bcc.n	80079b0 <__exponent+0x5e>
 800799a:	f10d 0309 	add.w	r3, sp, #9
 800799e:	1a9b      	subs	r3, r3, r2
 80079a0:	42ac      	cmp	r4, r5
 80079a2:	bf88      	it	hi
 80079a4:	2300      	movhi	r3, #0
 80079a6:	3302      	adds	r3, #2
 80079a8:	4403      	add	r3, r0
 80079aa:	1a18      	subs	r0, r3, r0
 80079ac:	b003      	add	sp, #12
 80079ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80079b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80079b8:	e7ed      	b.n	8007996 <__exponent+0x44>
 80079ba:	2330      	movs	r3, #48	@ 0x30
 80079bc:	3130      	adds	r1, #48	@ 0x30
 80079be:	7083      	strb	r3, [r0, #2]
 80079c0:	70c1      	strb	r1, [r0, #3]
 80079c2:	1d03      	adds	r3, r0, #4
 80079c4:	e7f1      	b.n	80079aa <__exponent+0x58>
	...

080079c8 <_printf_float>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b08d      	sub	sp, #52	@ 0x34
 80079ce:	460c      	mov	r4, r1
 80079d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80079d4:	4616      	mov	r6, r2
 80079d6:	461f      	mov	r7, r3
 80079d8:	4605      	mov	r5, r0
 80079da:	f000 fd01 	bl	80083e0 <_localeconv_r>
 80079de:	6803      	ldr	r3, [r0, #0]
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7f8 fc64 	bl	80002b0 <strlen>
 80079e8:	2300      	movs	r3, #0
 80079ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ec:	f8d8 3000 	ldr.w	r3, [r8]
 80079f0:	9005      	str	r0, [sp, #20]
 80079f2:	3307      	adds	r3, #7
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	f103 0208 	add.w	r2, r3, #8
 80079fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a00:	f8d4 b000 	ldr.w	fp, [r4]
 8007a04:	f8c8 2000 	str.w	r2, [r8]
 8007a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a1e:	4b9c      	ldr	r3, [pc, #624]	@ (8007c90 <_printf_float+0x2c8>)
 8007a20:	f04f 32ff 	mov.w	r2, #4294967295
 8007a24:	f7f9 f8a2 	bl	8000b6c <__aeabi_dcmpun>
 8007a28:	bb70      	cbnz	r0, 8007a88 <_printf_float+0xc0>
 8007a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a2e:	4b98      	ldr	r3, [pc, #608]	@ (8007c90 <_printf_float+0x2c8>)
 8007a30:	f04f 32ff 	mov.w	r2, #4294967295
 8007a34:	f7f9 f87c 	bl	8000b30 <__aeabi_dcmple>
 8007a38:	bb30      	cbnz	r0, 8007a88 <_printf_float+0xc0>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4640      	mov	r0, r8
 8007a40:	4649      	mov	r1, r9
 8007a42:	f7f9 f86b 	bl	8000b1c <__aeabi_dcmplt>
 8007a46:	b110      	cbz	r0, 8007a4e <_printf_float+0x86>
 8007a48:	232d      	movs	r3, #45	@ 0x2d
 8007a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a4e:	4a91      	ldr	r2, [pc, #580]	@ (8007c94 <_printf_float+0x2cc>)
 8007a50:	4b91      	ldr	r3, [pc, #580]	@ (8007c98 <_printf_float+0x2d0>)
 8007a52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007a56:	bf94      	ite	ls
 8007a58:	4690      	movls	r8, r2
 8007a5a:	4698      	movhi	r8, r3
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	6123      	str	r3, [r4, #16]
 8007a60:	f02b 0304 	bic.w	r3, fp, #4
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	f04f 0900 	mov.w	r9, #0
 8007a6a:	9700      	str	r7, [sp, #0]
 8007a6c:	4633      	mov	r3, r6
 8007a6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a70:	4621      	mov	r1, r4
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 f9d2 	bl	8007e1c <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f040 808d 	bne.w	8007b98 <_printf_float+0x1d0>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	b00d      	add	sp, #52	@ 0x34
 8007a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a88:	4642      	mov	r2, r8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7f9 f86c 	bl	8000b6c <__aeabi_dcmpun>
 8007a94:	b140      	cbz	r0, 8007aa8 <_printf_float+0xe0>
 8007a96:	464b      	mov	r3, r9
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	bfbc      	itt	lt
 8007a9c:	232d      	movlt	r3, #45	@ 0x2d
 8007a9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8007c9c <_printf_float+0x2d4>)
 8007aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ca0 <_printf_float+0x2d8>)
 8007aa6:	e7d4      	b.n	8007a52 <_printf_float+0x8a>
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007aae:	9206      	str	r2, [sp, #24]
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	d13b      	bne.n	8007b2c <_printf_float+0x164>
 8007ab4:	2306      	movs	r3, #6
 8007ab6:	6063      	str	r3, [r4, #4]
 8007ab8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007abc:	2300      	movs	r3, #0
 8007abe:	6022      	str	r2, [r4, #0]
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007ac4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007ac8:	ab09      	add	r3, sp, #36	@ 0x24
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	6861      	ldr	r1, [r4, #4]
 8007ace:	ec49 8b10 	vmov	d0, r8, r9
 8007ad2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7ff fed6 	bl	8007888 <__cvt>
 8007adc:	9b06      	ldr	r3, [sp, #24]
 8007ade:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ae0:	2b47      	cmp	r3, #71	@ 0x47
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	d129      	bne.n	8007b3a <_printf_float+0x172>
 8007ae6:	1cc8      	adds	r0, r1, #3
 8007ae8:	db02      	blt.n	8007af0 <_printf_float+0x128>
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	4299      	cmp	r1, r3
 8007aee:	dd41      	ble.n	8007b74 <_printf_float+0x1ac>
 8007af0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007af4:	fa5f fa8a 	uxtb.w	sl, sl
 8007af8:	3901      	subs	r1, #1
 8007afa:	4652      	mov	r2, sl
 8007afc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b00:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b02:	f7ff ff26 	bl	8007952 <__exponent>
 8007b06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b08:	1813      	adds	r3, r2, r0
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	4681      	mov	r9, r0
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	dc02      	bgt.n	8007b18 <_printf_float+0x150>
 8007b12:	6822      	ldr	r2, [r4, #0]
 8007b14:	07d2      	lsls	r2, r2, #31
 8007b16:	d501      	bpl.n	8007b1c <_printf_float+0x154>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0a2      	beq.n	8007a6a <_printf_float+0xa2>
 8007b24:	232d      	movs	r3, #45	@ 0x2d
 8007b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b2a:	e79e      	b.n	8007a6a <_printf_float+0xa2>
 8007b2c:	9a06      	ldr	r2, [sp, #24]
 8007b2e:	2a47      	cmp	r2, #71	@ 0x47
 8007b30:	d1c2      	bne.n	8007ab8 <_printf_float+0xf0>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1c0      	bne.n	8007ab8 <_printf_float+0xf0>
 8007b36:	2301      	movs	r3, #1
 8007b38:	e7bd      	b.n	8007ab6 <_printf_float+0xee>
 8007b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b3e:	d9db      	bls.n	8007af8 <_printf_float+0x130>
 8007b40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b44:	d118      	bne.n	8007b78 <_printf_float+0x1b0>
 8007b46:	2900      	cmp	r1, #0
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	dd0b      	ble.n	8007b64 <_printf_float+0x19c>
 8007b4c:	6121      	str	r1, [r4, #16]
 8007b4e:	b913      	cbnz	r3, 8007b56 <_printf_float+0x18e>
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	07d0      	lsls	r0, r2, #31
 8007b54:	d502      	bpl.n	8007b5c <_printf_float+0x194>
 8007b56:	3301      	adds	r3, #1
 8007b58:	440b      	add	r3, r1
 8007b5a:	6123      	str	r3, [r4, #16]
 8007b5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b5e:	f04f 0900 	mov.w	r9, #0
 8007b62:	e7db      	b.n	8007b1c <_printf_float+0x154>
 8007b64:	b913      	cbnz	r3, 8007b6c <_printf_float+0x1a4>
 8007b66:	6822      	ldr	r2, [r4, #0]
 8007b68:	07d2      	lsls	r2, r2, #31
 8007b6a:	d501      	bpl.n	8007b70 <_printf_float+0x1a8>
 8007b6c:	3302      	adds	r3, #2
 8007b6e:	e7f4      	b.n	8007b5a <_printf_float+0x192>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e7f2      	b.n	8007b5a <_printf_float+0x192>
 8007b74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b7a:	4299      	cmp	r1, r3
 8007b7c:	db05      	blt.n	8007b8a <_printf_float+0x1c2>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	6121      	str	r1, [r4, #16]
 8007b82:	07d8      	lsls	r0, r3, #31
 8007b84:	d5ea      	bpl.n	8007b5c <_printf_float+0x194>
 8007b86:	1c4b      	adds	r3, r1, #1
 8007b88:	e7e7      	b.n	8007b5a <_printf_float+0x192>
 8007b8a:	2900      	cmp	r1, #0
 8007b8c:	bfd4      	ite	le
 8007b8e:	f1c1 0202 	rsble	r2, r1, #2
 8007b92:	2201      	movgt	r2, #1
 8007b94:	4413      	add	r3, r2
 8007b96:	e7e0      	b.n	8007b5a <_printf_float+0x192>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	055a      	lsls	r2, r3, #21
 8007b9c:	d407      	bmi.n	8007bae <_printf_float+0x1e6>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	47b8      	blx	r7
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d12b      	bne.n	8007c04 <_printf_float+0x23c>
 8007bac:	e767      	b.n	8007a7e <_printf_float+0xb6>
 8007bae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bb2:	f240 80dd 	bls.w	8007d70 <_printf_float+0x3a8>
 8007bb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f7f8 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d033      	beq.n	8007c2e <_printf_float+0x266>
 8007bc6:	4a37      	ldr	r2, [pc, #220]	@ (8007ca4 <_printf_float+0x2dc>)
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f af54 	beq.w	8007a7e <_printf_float+0xb6>
 8007bd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007bda:	4543      	cmp	r3, r8
 8007bdc:	db02      	blt.n	8007be4 <_printf_float+0x21c>
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	07d8      	lsls	r0, r3, #31
 8007be2:	d50f      	bpl.n	8007c04 <_printf_float+0x23c>
 8007be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be8:	4631      	mov	r1, r6
 8007bea:	4628      	mov	r0, r5
 8007bec:	47b8      	blx	r7
 8007bee:	3001      	adds	r0, #1
 8007bf0:	f43f af45 	beq.w	8007a7e <_printf_float+0xb6>
 8007bf4:	f04f 0900 	mov.w	r9, #0
 8007bf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bfc:	f104 0a1a 	add.w	sl, r4, #26
 8007c00:	45c8      	cmp	r8, r9
 8007c02:	dc09      	bgt.n	8007c18 <_printf_float+0x250>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	079b      	lsls	r3, r3, #30
 8007c08:	f100 8103 	bmi.w	8007e12 <_printf_float+0x44a>
 8007c0c:	68e0      	ldr	r0, [r4, #12]
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c10:	4298      	cmp	r0, r3
 8007c12:	bfb8      	it	lt
 8007c14:	4618      	movlt	r0, r3
 8007c16:	e734      	b.n	8007a82 <_printf_float+0xba>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	f43f af2b 	beq.w	8007a7e <_printf_float+0xb6>
 8007c28:	f109 0901 	add.w	r9, r9, #1
 8007c2c:	e7e8      	b.n	8007c00 <_printf_float+0x238>
 8007c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	dc39      	bgt.n	8007ca8 <_printf_float+0x2e0>
 8007c34:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca4 <_printf_float+0x2dc>)
 8007c36:	2301      	movs	r3, #1
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f af1d 	beq.w	8007a7e <_printf_float+0xb6>
 8007c44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c48:	ea59 0303 	orrs.w	r3, r9, r3
 8007c4c:	d102      	bne.n	8007c54 <_printf_float+0x28c>
 8007c4e:	6823      	ldr	r3, [r4, #0]
 8007c50:	07d9      	lsls	r1, r3, #31
 8007c52:	d5d7      	bpl.n	8007c04 <_printf_float+0x23c>
 8007c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f af0d 	beq.w	8007a7e <_printf_float+0xb6>
 8007c64:	f04f 0a00 	mov.w	sl, #0
 8007c68:	f104 0b1a 	add.w	fp, r4, #26
 8007c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c6e:	425b      	negs	r3, r3
 8007c70:	4553      	cmp	r3, sl
 8007c72:	dc01      	bgt.n	8007c78 <_printf_float+0x2b0>
 8007c74:	464b      	mov	r3, r9
 8007c76:	e793      	b.n	8007ba0 <_printf_float+0x1d8>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	465a      	mov	r2, fp
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	47b8      	blx	r7
 8007c82:	3001      	adds	r0, #1
 8007c84:	f43f aefb 	beq.w	8007a7e <_printf_float+0xb6>
 8007c88:	f10a 0a01 	add.w	sl, sl, #1
 8007c8c:	e7ee      	b.n	8007c6c <_printf_float+0x2a4>
 8007c8e:	bf00      	nop
 8007c90:	7fefffff 	.word	0x7fefffff
 8007c94:	0800b8f9 	.word	0x0800b8f9
 8007c98:	0800b8fd 	.word	0x0800b8fd
 8007c9c:	0800b901 	.word	0x0800b901
 8007ca0:	0800b905 	.word	0x0800b905
 8007ca4:	0800b909 	.word	0x0800b909
 8007ca8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007caa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cae:	4553      	cmp	r3, sl
 8007cb0:	bfa8      	it	ge
 8007cb2:	4653      	movge	r3, sl
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	4699      	mov	r9, r3
 8007cb8:	dc36      	bgt.n	8007d28 <_printf_float+0x360>
 8007cba:	f04f 0b00 	mov.w	fp, #0
 8007cbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cc2:	f104 021a 	add.w	r2, r4, #26
 8007cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cc8:	9306      	str	r3, [sp, #24]
 8007cca:	eba3 0309 	sub.w	r3, r3, r9
 8007cce:	455b      	cmp	r3, fp
 8007cd0:	dc31      	bgt.n	8007d36 <_printf_float+0x36e>
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	459a      	cmp	sl, r3
 8007cd6:	dc3a      	bgt.n	8007d4e <_printf_float+0x386>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	07da      	lsls	r2, r3, #31
 8007cdc:	d437      	bmi.n	8007d4e <_printf_float+0x386>
 8007cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce0:	ebaa 0903 	sub.w	r9, sl, r3
 8007ce4:	9b06      	ldr	r3, [sp, #24]
 8007ce6:	ebaa 0303 	sub.w	r3, sl, r3
 8007cea:	4599      	cmp	r9, r3
 8007cec:	bfa8      	it	ge
 8007cee:	4699      	movge	r9, r3
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	dc33      	bgt.n	8007d5e <_printf_float+0x396>
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cfe:	f104 0b1a 	add.w	fp, r4, #26
 8007d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d04:	ebaa 0303 	sub.w	r3, sl, r3
 8007d08:	eba3 0309 	sub.w	r3, r3, r9
 8007d0c:	4543      	cmp	r3, r8
 8007d0e:	f77f af79 	ble.w	8007c04 <_printf_float+0x23c>
 8007d12:	2301      	movs	r3, #1
 8007d14:	465a      	mov	r2, fp
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f43f aeae 	beq.w	8007a7e <_printf_float+0xb6>
 8007d22:	f108 0801 	add.w	r8, r8, #1
 8007d26:	e7ec      	b.n	8007d02 <_printf_float+0x33a>
 8007d28:	4642      	mov	r2, r8
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	d1c2      	bne.n	8007cba <_printf_float+0x2f2>
 8007d34:	e6a3      	b.n	8007a7e <_printf_float+0xb6>
 8007d36:	2301      	movs	r3, #1
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	9206      	str	r2, [sp, #24]
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae9c 	beq.w	8007a7e <_printf_float+0xb6>
 8007d46:	9a06      	ldr	r2, [sp, #24]
 8007d48:	f10b 0b01 	add.w	fp, fp, #1
 8007d4c:	e7bb      	b.n	8007cc6 <_printf_float+0x2fe>
 8007d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d52:	4631      	mov	r1, r6
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b8      	blx	r7
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d1c0      	bne.n	8007cde <_printf_float+0x316>
 8007d5c:	e68f      	b.n	8007a7e <_printf_float+0xb6>
 8007d5e:	9a06      	ldr	r2, [sp, #24]
 8007d60:	464b      	mov	r3, r9
 8007d62:	4442      	add	r2, r8
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d1c3      	bne.n	8007cf6 <_printf_float+0x32e>
 8007d6e:	e686      	b.n	8007a7e <_printf_float+0xb6>
 8007d70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d74:	f1ba 0f01 	cmp.w	sl, #1
 8007d78:	dc01      	bgt.n	8007d7e <_printf_float+0x3b6>
 8007d7a:	07db      	lsls	r3, r3, #31
 8007d7c:	d536      	bpl.n	8007dec <_printf_float+0x424>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4642      	mov	r2, r8
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f ae78 	beq.w	8007a7e <_printf_float+0xb6>
 8007d8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae70 	beq.w	8007a7e <_printf_float+0xb6>
 8007d9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007da2:	2200      	movs	r2, #0
 8007da4:	2300      	movs	r3, #0
 8007da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007daa:	f7f8 fead 	bl	8000b08 <__aeabi_dcmpeq>
 8007dae:	b9c0      	cbnz	r0, 8007de2 <_printf_float+0x41a>
 8007db0:	4653      	mov	r3, sl
 8007db2:	f108 0201 	add.w	r2, r8, #1
 8007db6:	4631      	mov	r1, r6
 8007db8:	4628      	mov	r0, r5
 8007dba:	47b8      	blx	r7
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d10c      	bne.n	8007dda <_printf_float+0x412>
 8007dc0:	e65d      	b.n	8007a7e <_printf_float+0xb6>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	465a      	mov	r2, fp
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b8      	blx	r7
 8007dcc:	3001      	adds	r0, #1
 8007dce:	f43f ae56 	beq.w	8007a7e <_printf_float+0xb6>
 8007dd2:	f108 0801 	add.w	r8, r8, #1
 8007dd6:	45d0      	cmp	r8, sl
 8007dd8:	dbf3      	blt.n	8007dc2 <_printf_float+0x3fa>
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007de0:	e6df      	b.n	8007ba2 <_printf_float+0x1da>
 8007de2:	f04f 0800 	mov.w	r8, #0
 8007de6:	f104 0b1a 	add.w	fp, r4, #26
 8007dea:	e7f4      	b.n	8007dd6 <_printf_float+0x40e>
 8007dec:	2301      	movs	r3, #1
 8007dee:	4642      	mov	r2, r8
 8007df0:	e7e1      	b.n	8007db6 <_printf_float+0x3ee>
 8007df2:	2301      	movs	r3, #1
 8007df4:	464a      	mov	r2, r9
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f43f ae3e 	beq.w	8007a7e <_printf_float+0xb6>
 8007e02:	f108 0801 	add.w	r8, r8, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	4543      	cmp	r3, r8
 8007e0e:	dcf0      	bgt.n	8007df2 <_printf_float+0x42a>
 8007e10:	e6fc      	b.n	8007c0c <_printf_float+0x244>
 8007e12:	f04f 0800 	mov.w	r8, #0
 8007e16:	f104 0919 	add.w	r9, r4, #25
 8007e1a:	e7f4      	b.n	8007e06 <_printf_float+0x43e>

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4698      	mov	r8, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	3b00      	subs	r3, #0
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e78:	4641      	mov	r1, r8
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c8      	blx	r9
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	6922      	ldr	r2, [r4, #16]
 8007e86:	f003 0306 	and.w	r3, r3, #6
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	bf02      	ittt	eq
 8007e8e:	68e5      	ldreq	r5, [r4, #12]
 8007e90:	6833      	ldreq	r3, [r6, #0]
 8007e92:	1aed      	subeq	r5, r5, r3
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c8      	blx	r9
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	@ 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4641      	mov	r1, r8
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c8      	blx	r9
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	7e0f      	ldrb	r7, [r1, #24]
 8007efe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f00:	2f78      	cmp	r7, #120	@ 0x78
 8007f02:	4691      	mov	r9, r2
 8007f04:	4680      	mov	r8, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	@ 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d2 	beq.w	80080be <_printf_i+0x1c6>
 8007f1a:	2f58      	cmp	r7, #88	@ 0x58
 8007f1c:	f000 80b9 	beq.w	8008092 <_printf_i+0x19a>
 8007f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a101      	add	r1, pc, #4	@ (adr r1, 8007f38 <_printf_i+0x40>)
 8007f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080a5 	.word	0x080080a5
 8007f68:	08007fcf 	.word	0x08007fcf
 8007f6c:	0800805f 	.word	0x0800805f
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080c7 	.word	0x080080c7
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fcf 	.word	0x08007fcf
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	08008067 	.word	0x08008067
 8007f90:	6833      	ldr	r3, [r6, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	6032      	str	r2, [r6, #0]
 8007f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09d      	b.n	80080e0 <_printf_i+0x1e8>
 8007fa4:	6833      	ldr	r3, [r6, #0]
 8007fa6:	6820      	ldr	r0, [r4, #0]
 8007fa8:	1d19      	adds	r1, r3, #4
 8007faa:	6031      	str	r1, [r6, #0]
 8007fac:	0606      	lsls	r6, r0, #24
 8007fae:	d501      	bpl.n	8007fb4 <_printf_i+0xbc>
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	e003      	b.n	8007fbc <_printf_i+0xc4>
 8007fb4:	0645      	lsls	r5, r0, #25
 8007fb6:	d5fb      	bpl.n	8007fb0 <_printf_i+0xb8>
 8007fb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	da03      	bge.n	8007fc8 <_printf_i+0xd0>
 8007fc0:	232d      	movs	r3, #45	@ 0x2d
 8007fc2:	426d      	negs	r5, r5
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fc8:	4859      	ldr	r0, [pc, #356]	@ (8008130 <_printf_i+0x238>)
 8007fca:	230a      	movs	r3, #10
 8007fcc:	e011      	b.n	8007ff2 <_printf_i+0xfa>
 8007fce:	6821      	ldr	r1, [r4, #0]
 8007fd0:	6833      	ldr	r3, [r6, #0]
 8007fd2:	0608      	lsls	r0, r1, #24
 8007fd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fd8:	d402      	bmi.n	8007fe0 <_printf_i+0xe8>
 8007fda:	0649      	lsls	r1, r1, #25
 8007fdc:	bf48      	it	mi
 8007fde:	b2ad      	uxthmi	r5, r5
 8007fe0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007fe2:	4853      	ldr	r0, [pc, #332]	@ (8008130 <_printf_i+0x238>)
 8007fe4:	6033      	str	r3, [r6, #0]
 8007fe6:	bf14      	ite	ne
 8007fe8:	230a      	movne	r3, #10
 8007fea:	2308      	moveq	r3, #8
 8007fec:	2100      	movs	r1, #0
 8007fee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ff2:	6866      	ldr	r6, [r4, #4]
 8007ff4:	60a6      	str	r6, [r4, #8]
 8007ff6:	2e00      	cmp	r6, #0
 8007ff8:	bfa2      	ittt	ge
 8007ffa:	6821      	ldrge	r1, [r4, #0]
 8007ffc:	f021 0104 	bicge.w	r1, r1, #4
 8008000:	6021      	strge	r1, [r4, #0]
 8008002:	b90d      	cbnz	r5, 8008008 <_printf_i+0x110>
 8008004:	2e00      	cmp	r6, #0
 8008006:	d04b      	beq.n	80080a0 <_printf_i+0x1a8>
 8008008:	4616      	mov	r6, r2
 800800a:	fbb5 f1f3 	udiv	r1, r5, r3
 800800e:	fb03 5711 	mls	r7, r3, r1, r5
 8008012:	5dc7      	ldrb	r7, [r0, r7]
 8008014:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008018:	462f      	mov	r7, r5
 800801a:	42bb      	cmp	r3, r7
 800801c:	460d      	mov	r5, r1
 800801e:	d9f4      	bls.n	800800a <_printf_i+0x112>
 8008020:	2b08      	cmp	r3, #8
 8008022:	d10b      	bne.n	800803c <_printf_i+0x144>
 8008024:	6823      	ldr	r3, [r4, #0]
 8008026:	07df      	lsls	r7, r3, #31
 8008028:	d508      	bpl.n	800803c <_printf_i+0x144>
 800802a:	6923      	ldr	r3, [r4, #16]
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	4299      	cmp	r1, r3
 8008030:	bfde      	ittt	le
 8008032:	2330      	movle	r3, #48	@ 0x30
 8008034:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008038:	f106 36ff 	addle.w	r6, r6, #4294967295
 800803c:	1b92      	subs	r2, r2, r6
 800803e:	6122      	str	r2, [r4, #16]
 8008040:	f8cd a000 	str.w	sl, [sp]
 8008044:	464b      	mov	r3, r9
 8008046:	aa03      	add	r2, sp, #12
 8008048:	4621      	mov	r1, r4
 800804a:	4640      	mov	r0, r8
 800804c:	f7ff fee6 	bl	8007e1c <_printf_common>
 8008050:	3001      	adds	r0, #1
 8008052:	d14a      	bne.n	80080ea <_printf_i+0x1f2>
 8008054:	f04f 30ff 	mov.w	r0, #4294967295
 8008058:	b004      	add	sp, #16
 800805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	f043 0320 	orr.w	r3, r3, #32
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	4833      	ldr	r0, [pc, #204]	@ (8008134 <_printf_i+0x23c>)
 8008068:	2778      	movs	r7, #120	@ 0x78
 800806a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	6831      	ldr	r1, [r6, #0]
 8008072:	061f      	lsls	r7, r3, #24
 8008074:	f851 5b04 	ldr.w	r5, [r1], #4
 8008078:	d402      	bmi.n	8008080 <_printf_i+0x188>
 800807a:	065f      	lsls	r7, r3, #25
 800807c:	bf48      	it	mi
 800807e:	b2ad      	uxthmi	r5, r5
 8008080:	6031      	str	r1, [r6, #0]
 8008082:	07d9      	lsls	r1, r3, #31
 8008084:	bf44      	itt	mi
 8008086:	f043 0320 	orrmi.w	r3, r3, #32
 800808a:	6023      	strmi	r3, [r4, #0]
 800808c:	b11d      	cbz	r5, 8008096 <_printf_i+0x19e>
 800808e:	2310      	movs	r3, #16
 8008090:	e7ac      	b.n	8007fec <_printf_i+0xf4>
 8008092:	4827      	ldr	r0, [pc, #156]	@ (8008130 <_printf_i+0x238>)
 8008094:	e7e9      	b.n	800806a <_printf_i+0x172>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	f023 0320 	bic.w	r3, r3, #32
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	e7f6      	b.n	800808e <_printf_i+0x196>
 80080a0:	4616      	mov	r6, r2
 80080a2:	e7bd      	b.n	8008020 <_printf_i+0x128>
 80080a4:	6833      	ldr	r3, [r6, #0]
 80080a6:	6825      	ldr	r5, [r4, #0]
 80080a8:	6961      	ldr	r1, [r4, #20]
 80080aa:	1d18      	adds	r0, r3, #4
 80080ac:	6030      	str	r0, [r6, #0]
 80080ae:	062e      	lsls	r6, r5, #24
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	d501      	bpl.n	80080b8 <_printf_i+0x1c0>
 80080b4:	6019      	str	r1, [r3, #0]
 80080b6:	e002      	b.n	80080be <_printf_i+0x1c6>
 80080b8:	0668      	lsls	r0, r5, #25
 80080ba:	d5fb      	bpl.n	80080b4 <_printf_i+0x1bc>
 80080bc:	8019      	strh	r1, [r3, #0]
 80080be:	2300      	movs	r3, #0
 80080c0:	6123      	str	r3, [r4, #16]
 80080c2:	4616      	mov	r6, r2
 80080c4:	e7bc      	b.n	8008040 <_printf_i+0x148>
 80080c6:	6833      	ldr	r3, [r6, #0]
 80080c8:	1d1a      	adds	r2, r3, #4
 80080ca:	6032      	str	r2, [r6, #0]
 80080cc:	681e      	ldr	r6, [r3, #0]
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	2100      	movs	r1, #0
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7f8 f89c 	bl	8000210 <memchr>
 80080d8:	b108      	cbz	r0, 80080de <_printf_i+0x1e6>
 80080da:	1b80      	subs	r0, r0, r6
 80080dc:	6060      	str	r0, [r4, #4]
 80080de:	6863      	ldr	r3, [r4, #4]
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	2300      	movs	r3, #0
 80080e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e8:	e7aa      	b.n	8008040 <_printf_i+0x148>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	4632      	mov	r2, r6
 80080ee:	4649      	mov	r1, r9
 80080f0:	4640      	mov	r0, r8
 80080f2:	47d0      	blx	sl
 80080f4:	3001      	adds	r0, #1
 80080f6:	d0ad      	beq.n	8008054 <_printf_i+0x15c>
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	079b      	lsls	r3, r3, #30
 80080fc:	d413      	bmi.n	8008126 <_printf_i+0x22e>
 80080fe:	68e0      	ldr	r0, [r4, #12]
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	4298      	cmp	r0, r3
 8008104:	bfb8      	it	lt
 8008106:	4618      	movlt	r0, r3
 8008108:	e7a6      	b.n	8008058 <_printf_i+0x160>
 800810a:	2301      	movs	r3, #1
 800810c:	4632      	mov	r2, r6
 800810e:	4649      	mov	r1, r9
 8008110:	4640      	mov	r0, r8
 8008112:	47d0      	blx	sl
 8008114:	3001      	adds	r0, #1
 8008116:	d09d      	beq.n	8008054 <_printf_i+0x15c>
 8008118:	3501      	adds	r5, #1
 800811a:	68e3      	ldr	r3, [r4, #12]
 800811c:	9903      	ldr	r1, [sp, #12]
 800811e:	1a5b      	subs	r3, r3, r1
 8008120:	42ab      	cmp	r3, r5
 8008122:	dcf2      	bgt.n	800810a <_printf_i+0x212>
 8008124:	e7eb      	b.n	80080fe <_printf_i+0x206>
 8008126:	2500      	movs	r5, #0
 8008128:	f104 0619 	add.w	r6, r4, #25
 800812c:	e7f5      	b.n	800811a <_printf_i+0x222>
 800812e:	bf00      	nop
 8008130:	0800b90b 	.word	0x0800b90b
 8008134:	0800b91c 	.word	0x0800b91c

08008138 <std>:
 8008138:	2300      	movs	r3, #0
 800813a:	b510      	push	{r4, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	e9c0 3300 	strd	r3, r3, [r0]
 8008142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008146:	6083      	str	r3, [r0, #8]
 8008148:	8181      	strh	r1, [r0, #12]
 800814a:	6643      	str	r3, [r0, #100]	@ 0x64
 800814c:	81c2      	strh	r2, [r0, #14]
 800814e:	6183      	str	r3, [r0, #24]
 8008150:	4619      	mov	r1, r3
 8008152:	2208      	movs	r2, #8
 8008154:	305c      	adds	r0, #92	@ 0x5c
 8008156:	f000 f928 	bl	80083aa <memset>
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <std+0x58>)
 800815c:	6263      	str	r3, [r4, #36]	@ 0x24
 800815e:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <std+0x5c>)
 8008160:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008162:	4b0d      	ldr	r3, [pc, #52]	@ (8008198 <std+0x60>)
 8008164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008166:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <std+0x64>)
 8008168:	6323      	str	r3, [r4, #48]	@ 0x30
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <std+0x68>)
 800816c:	6224      	str	r4, [r4, #32]
 800816e:	429c      	cmp	r4, r3
 8008170:	d006      	beq.n	8008180 <std+0x48>
 8008172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008176:	4294      	cmp	r4, r2
 8008178:	d002      	beq.n	8008180 <std+0x48>
 800817a:	33d0      	adds	r3, #208	@ 0xd0
 800817c:	429c      	cmp	r4, r3
 800817e:	d105      	bne.n	800818c <std+0x54>
 8008180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f000 b99e 	b.w	80084c8 <__retarget_lock_init_recursive>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	08008325 	.word	0x08008325
 8008194:	08008347 	.word	0x08008347
 8008198:	0800837f 	.word	0x0800837f
 800819c:	080083a3 	.word	0x080083a3
 80081a0:	20000e68 	.word	0x20000e68

080081a4 <stdio_exit_handler>:
 80081a4:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <stdio_exit_handler+0xc>)
 80081a6:	4903      	ldr	r1, [pc, #12]	@ (80081b4 <stdio_exit_handler+0x10>)
 80081a8:	4803      	ldr	r0, [pc, #12]	@ (80081b8 <stdio_exit_handler+0x14>)
 80081aa:	f000 b869 	b.w	8008280 <_fwalk_sglue>
 80081ae:	bf00      	nop
 80081b0:	200000bc 	.word	0x200000bc
 80081b4:	0800a765 	.word	0x0800a765
 80081b8:	20000238 	.word	0x20000238

080081bc <cleanup_stdio>:
 80081bc:	6841      	ldr	r1, [r0, #4]
 80081be:	4b0c      	ldr	r3, [pc, #48]	@ (80081f0 <cleanup_stdio+0x34>)
 80081c0:	4299      	cmp	r1, r3
 80081c2:	b510      	push	{r4, lr}
 80081c4:	4604      	mov	r4, r0
 80081c6:	d001      	beq.n	80081cc <cleanup_stdio+0x10>
 80081c8:	f002 facc 	bl	800a764 <_fflush_r>
 80081cc:	68a1      	ldr	r1, [r4, #8]
 80081ce:	4b09      	ldr	r3, [pc, #36]	@ (80081f4 <cleanup_stdio+0x38>)
 80081d0:	4299      	cmp	r1, r3
 80081d2:	d002      	beq.n	80081da <cleanup_stdio+0x1e>
 80081d4:	4620      	mov	r0, r4
 80081d6:	f002 fac5 	bl	800a764 <_fflush_r>
 80081da:	68e1      	ldr	r1, [r4, #12]
 80081dc:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <cleanup_stdio+0x3c>)
 80081de:	4299      	cmp	r1, r3
 80081e0:	d004      	beq.n	80081ec <cleanup_stdio+0x30>
 80081e2:	4620      	mov	r0, r4
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f002 babc 	b.w	800a764 <_fflush_r>
 80081ec:	bd10      	pop	{r4, pc}
 80081ee:	bf00      	nop
 80081f0:	20000e68 	.word	0x20000e68
 80081f4:	20000ed0 	.word	0x20000ed0
 80081f8:	20000f38 	.word	0x20000f38

080081fc <global_stdio_init.part.0>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <global_stdio_init.part.0+0x30>)
 8008200:	4c0b      	ldr	r4, [pc, #44]	@ (8008230 <global_stdio_init.part.0+0x34>)
 8008202:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <global_stdio_init.part.0+0x38>)
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	4620      	mov	r0, r4
 8008208:	2200      	movs	r2, #0
 800820a:	2104      	movs	r1, #4
 800820c:	f7ff ff94 	bl	8008138 <std>
 8008210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008214:	2201      	movs	r2, #1
 8008216:	2109      	movs	r1, #9
 8008218:	f7ff ff8e 	bl	8008138 <std>
 800821c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008220:	2202      	movs	r2, #2
 8008222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008226:	2112      	movs	r1, #18
 8008228:	f7ff bf86 	b.w	8008138 <std>
 800822c:	20000fa0 	.word	0x20000fa0
 8008230:	20000e68 	.word	0x20000e68
 8008234:	080081a5 	.word	0x080081a5

08008238 <__sfp_lock_acquire>:
 8008238:	4801      	ldr	r0, [pc, #4]	@ (8008240 <__sfp_lock_acquire+0x8>)
 800823a:	f000 b946 	b.w	80084ca <__retarget_lock_acquire_recursive>
 800823e:	bf00      	nop
 8008240:	20000fa9 	.word	0x20000fa9

08008244 <__sfp_lock_release>:
 8008244:	4801      	ldr	r0, [pc, #4]	@ (800824c <__sfp_lock_release+0x8>)
 8008246:	f000 b941 	b.w	80084cc <__retarget_lock_release_recursive>
 800824a:	bf00      	nop
 800824c:	20000fa9 	.word	0x20000fa9

08008250 <__sinit>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
 8008254:	f7ff fff0 	bl	8008238 <__sfp_lock_acquire>
 8008258:	6a23      	ldr	r3, [r4, #32]
 800825a:	b11b      	cbz	r3, 8008264 <__sinit+0x14>
 800825c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008260:	f7ff bff0 	b.w	8008244 <__sfp_lock_release>
 8008264:	4b04      	ldr	r3, [pc, #16]	@ (8008278 <__sinit+0x28>)
 8008266:	6223      	str	r3, [r4, #32]
 8008268:	4b04      	ldr	r3, [pc, #16]	@ (800827c <__sinit+0x2c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f5      	bne.n	800825c <__sinit+0xc>
 8008270:	f7ff ffc4 	bl	80081fc <global_stdio_init.part.0>
 8008274:	e7f2      	b.n	800825c <__sinit+0xc>
 8008276:	bf00      	nop
 8008278:	080081bd 	.word	0x080081bd
 800827c:	20000fa0 	.word	0x20000fa0

08008280 <_fwalk_sglue>:
 8008280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008284:	4607      	mov	r7, r0
 8008286:	4688      	mov	r8, r1
 8008288:	4614      	mov	r4, r2
 800828a:	2600      	movs	r6, #0
 800828c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008290:	f1b9 0901 	subs.w	r9, r9, #1
 8008294:	d505      	bpl.n	80082a2 <_fwalk_sglue+0x22>
 8008296:	6824      	ldr	r4, [r4, #0]
 8008298:	2c00      	cmp	r4, #0
 800829a:	d1f7      	bne.n	800828c <_fwalk_sglue+0xc>
 800829c:	4630      	mov	r0, r6
 800829e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a2:	89ab      	ldrh	r3, [r5, #12]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d907      	bls.n	80082b8 <_fwalk_sglue+0x38>
 80082a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082ac:	3301      	adds	r3, #1
 80082ae:	d003      	beq.n	80082b8 <_fwalk_sglue+0x38>
 80082b0:	4629      	mov	r1, r5
 80082b2:	4638      	mov	r0, r7
 80082b4:	47c0      	blx	r8
 80082b6:	4306      	orrs	r6, r0
 80082b8:	3568      	adds	r5, #104	@ 0x68
 80082ba:	e7e9      	b.n	8008290 <_fwalk_sglue+0x10>

080082bc <sniprintf>:
 80082bc:	b40c      	push	{r2, r3}
 80082be:	b530      	push	{r4, r5, lr}
 80082c0:	4b17      	ldr	r3, [pc, #92]	@ (8008320 <sniprintf+0x64>)
 80082c2:	1e0c      	subs	r4, r1, #0
 80082c4:	681d      	ldr	r5, [r3, #0]
 80082c6:	b09d      	sub	sp, #116	@ 0x74
 80082c8:	da08      	bge.n	80082dc <sniprintf+0x20>
 80082ca:	238b      	movs	r3, #139	@ 0x8b
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	b01d      	add	sp, #116	@ 0x74
 80082d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082d8:	b002      	add	sp, #8
 80082da:	4770      	bx	lr
 80082dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80082e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80082e4:	bf14      	ite	ne
 80082e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80082ea:	4623      	moveq	r3, r4
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	9307      	str	r3, [sp, #28]
 80082f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80082f4:	9002      	str	r0, [sp, #8]
 80082f6:	9006      	str	r0, [sp, #24]
 80082f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082fc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80082fe:	ab21      	add	r3, sp, #132	@ 0x84
 8008300:	a902      	add	r1, sp, #8
 8008302:	4628      	mov	r0, r5
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	f002 f8ad 	bl	800a464 <_svfiprintf_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	bfbc      	itt	lt
 800830e:	238b      	movlt	r3, #139	@ 0x8b
 8008310:	602b      	strlt	r3, [r5, #0]
 8008312:	2c00      	cmp	r4, #0
 8008314:	d0dd      	beq.n	80082d2 <sniprintf+0x16>
 8008316:	9b02      	ldr	r3, [sp, #8]
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	e7d9      	b.n	80082d2 <sniprintf+0x16>
 800831e:	bf00      	nop
 8008320:	20000234 	.word	0x20000234

08008324 <__sread>:
 8008324:	b510      	push	{r4, lr}
 8008326:	460c      	mov	r4, r1
 8008328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832c:	f000 f87e 	bl	800842c <_read_r>
 8008330:	2800      	cmp	r0, #0
 8008332:	bfab      	itete	ge
 8008334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008336:	89a3      	ldrhlt	r3, [r4, #12]
 8008338:	181b      	addge	r3, r3, r0
 800833a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800833e:	bfac      	ite	ge
 8008340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008342:	81a3      	strhlt	r3, [r4, #12]
 8008344:	bd10      	pop	{r4, pc}

08008346 <__swrite>:
 8008346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	461f      	mov	r7, r3
 800834c:	898b      	ldrh	r3, [r1, #12]
 800834e:	05db      	lsls	r3, r3, #23
 8008350:	4605      	mov	r5, r0
 8008352:	460c      	mov	r4, r1
 8008354:	4616      	mov	r6, r2
 8008356:	d505      	bpl.n	8008364 <__swrite+0x1e>
 8008358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835c:	2302      	movs	r3, #2
 800835e:	2200      	movs	r2, #0
 8008360:	f000 f852 	bl	8008408 <_lseek_r>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800836a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	4632      	mov	r2, r6
 8008372:	463b      	mov	r3, r7
 8008374:	4628      	mov	r0, r5
 8008376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800837a:	f000 b869 	b.w	8008450 <_write_r>

0800837e <__sseek>:
 800837e:	b510      	push	{r4, lr}
 8008380:	460c      	mov	r4, r1
 8008382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008386:	f000 f83f 	bl	8008408 <_lseek_r>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	bf15      	itete	ne
 8008390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800839a:	81a3      	strheq	r3, [r4, #12]
 800839c:	bf18      	it	ne
 800839e:	81a3      	strhne	r3, [r4, #12]
 80083a0:	bd10      	pop	{r4, pc}

080083a2 <__sclose>:
 80083a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a6:	f000 b81f 	b.w	80083e8 <_close_r>

080083aa <memset>:
 80083aa:	4402      	add	r2, r0
 80083ac:	4603      	mov	r3, r0
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d100      	bne.n	80083b4 <memset+0xa>
 80083b2:	4770      	bx	lr
 80083b4:	f803 1b01 	strb.w	r1, [r3], #1
 80083b8:	e7f9      	b.n	80083ae <memset+0x4>

080083ba <strncmp>:
 80083ba:	b510      	push	{r4, lr}
 80083bc:	b16a      	cbz	r2, 80083da <strncmp+0x20>
 80083be:	3901      	subs	r1, #1
 80083c0:	1884      	adds	r4, r0, r2
 80083c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d103      	bne.n	80083d6 <strncmp+0x1c>
 80083ce:	42a0      	cmp	r0, r4
 80083d0:	d001      	beq.n	80083d6 <strncmp+0x1c>
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	d1f5      	bne.n	80083c2 <strncmp+0x8>
 80083d6:	1ad0      	subs	r0, r2, r3
 80083d8:	bd10      	pop	{r4, pc}
 80083da:	4610      	mov	r0, r2
 80083dc:	e7fc      	b.n	80083d8 <strncmp+0x1e>
	...

080083e0 <_localeconv_r>:
 80083e0:	4800      	ldr	r0, [pc, #0]	@ (80083e4 <_localeconv_r+0x4>)
 80083e2:	4770      	bx	lr
 80083e4:	200001b8 	.word	0x200001b8

080083e8 <_close_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d06      	ldr	r5, [pc, #24]	@ (8008404 <_close_r+0x1c>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7fa fac5 	bl	8002982 <_close>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_close_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_close_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	20000fa4 	.word	0x20000fa4

08008408 <_lseek_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4d07      	ldr	r5, [pc, #28]	@ (8008428 <_lseek_r+0x20>)
 800840c:	4604      	mov	r4, r0
 800840e:	4608      	mov	r0, r1
 8008410:	4611      	mov	r1, r2
 8008412:	2200      	movs	r2, #0
 8008414:	602a      	str	r2, [r5, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	f7fa fada 	bl	80029d0 <_lseek>
 800841c:	1c43      	adds	r3, r0, #1
 800841e:	d102      	bne.n	8008426 <_lseek_r+0x1e>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	b103      	cbz	r3, 8008426 <_lseek_r+0x1e>
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	bd38      	pop	{r3, r4, r5, pc}
 8008428:	20000fa4 	.word	0x20000fa4

0800842c <_read_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d07      	ldr	r5, [pc, #28]	@ (800844c <_read_r+0x20>)
 8008430:	4604      	mov	r4, r0
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	2200      	movs	r2, #0
 8008438:	602a      	str	r2, [r5, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f7fa fa68 	bl	8002910 <_read>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_read_r+0x1e>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_read_r+0x1e>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000fa4 	.word	0x20000fa4

08008450 <_write_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	@ (8008470 <_write_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7fa fa73 	bl	800294a <_write>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_write_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_write_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000fa4 	.word	0x20000fa4

08008474 <__errno>:
 8008474:	4b01      	ldr	r3, [pc, #4]	@ (800847c <__errno+0x8>)
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000234 	.word	0x20000234

08008480 <__libc_init_array>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4d0d      	ldr	r5, [pc, #52]	@ (80084b8 <__libc_init_array+0x38>)
 8008484:	4c0d      	ldr	r4, [pc, #52]	@ (80084bc <__libc_init_array+0x3c>)
 8008486:	1b64      	subs	r4, r4, r5
 8008488:	10a4      	asrs	r4, r4, #2
 800848a:	2600      	movs	r6, #0
 800848c:	42a6      	cmp	r6, r4
 800848e:	d109      	bne.n	80084a4 <__libc_init_array+0x24>
 8008490:	4d0b      	ldr	r5, [pc, #44]	@ (80084c0 <__libc_init_array+0x40>)
 8008492:	4c0c      	ldr	r4, [pc, #48]	@ (80084c4 <__libc_init_array+0x44>)
 8008494:	f003 f8a0 	bl	800b5d8 <_init>
 8008498:	1b64      	subs	r4, r4, r5
 800849a:	10a4      	asrs	r4, r4, #2
 800849c:	2600      	movs	r6, #0
 800849e:	42a6      	cmp	r6, r4
 80084a0:	d105      	bne.n	80084ae <__libc_init_array+0x2e>
 80084a2:	bd70      	pop	{r4, r5, r6, pc}
 80084a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a8:	4798      	blx	r3
 80084aa:	3601      	adds	r6, #1
 80084ac:	e7ee      	b.n	800848c <__libc_init_array+0xc>
 80084ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b2:	4798      	blx	r3
 80084b4:	3601      	adds	r6, #1
 80084b6:	e7f2      	b.n	800849e <__libc_init_array+0x1e>
 80084b8:	0800bbe8 	.word	0x0800bbe8
 80084bc:	0800bbe8 	.word	0x0800bbe8
 80084c0:	0800bbe8 	.word	0x0800bbe8
 80084c4:	0800bbec 	.word	0x0800bbec

080084c8 <__retarget_lock_init_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_acquire_recursive>:
 80084ca:	4770      	bx	lr

080084cc <__retarget_lock_release_recursive>:
 80084cc:	4770      	bx	lr

080084ce <memcpy>:
 80084ce:	440a      	add	r2, r1
 80084d0:	4291      	cmp	r1, r2
 80084d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80084d6:	d100      	bne.n	80084da <memcpy+0xc>
 80084d8:	4770      	bx	lr
 80084da:	b510      	push	{r4, lr}
 80084dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084e4:	4291      	cmp	r1, r2
 80084e6:	d1f9      	bne.n	80084dc <memcpy+0xe>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	0000      	movs	r0, r0
 80084ec:	0000      	movs	r0, r0
	...

080084f0 <nan>:
 80084f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80084f8 <nan+0x8>
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	00000000 	.word	0x00000000
 80084fc:	7ff80000 	.word	0x7ff80000

08008500 <quorem>:
 8008500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	6903      	ldr	r3, [r0, #16]
 8008506:	690c      	ldr	r4, [r1, #16]
 8008508:	42a3      	cmp	r3, r4
 800850a:	4607      	mov	r7, r0
 800850c:	db7e      	blt.n	800860c <quorem+0x10c>
 800850e:	3c01      	subs	r4, #1
 8008510:	f101 0814 	add.w	r8, r1, #20
 8008514:	00a3      	lsls	r3, r4, #2
 8008516:	f100 0514 	add.w	r5, r0, #20
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800852a:	3301      	adds	r3, #1
 800852c:	429a      	cmp	r2, r3
 800852e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008532:	fbb2 f6f3 	udiv	r6, r2, r3
 8008536:	d32e      	bcc.n	8008596 <quorem+0x96>
 8008538:	f04f 0a00 	mov.w	sl, #0
 800853c:	46c4      	mov	ip, r8
 800853e:	46ae      	mov	lr, r5
 8008540:	46d3      	mov	fp, sl
 8008542:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008546:	b298      	uxth	r0, r3
 8008548:	fb06 a000 	mla	r0, r6, r0, sl
 800854c:	0c02      	lsrs	r2, r0, #16
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	fb06 2303 	mla	r3, r6, r3, r2
 8008554:	f8de 2000 	ldr.w	r2, [lr]
 8008558:	b280      	uxth	r0, r0
 800855a:	b292      	uxth	r2, r2
 800855c:	1a12      	subs	r2, r2, r0
 800855e:	445a      	add	r2, fp
 8008560:	f8de 0000 	ldr.w	r0, [lr]
 8008564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008568:	b29b      	uxth	r3, r3
 800856a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800856e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008572:	b292      	uxth	r2, r2
 8008574:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008578:	45e1      	cmp	r9, ip
 800857a:	f84e 2b04 	str.w	r2, [lr], #4
 800857e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008582:	d2de      	bcs.n	8008542 <quorem+0x42>
 8008584:	9b00      	ldr	r3, [sp, #0]
 8008586:	58eb      	ldr	r3, [r5, r3]
 8008588:	b92b      	cbnz	r3, 8008596 <quorem+0x96>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	3b04      	subs	r3, #4
 800858e:	429d      	cmp	r5, r3
 8008590:	461a      	mov	r2, r3
 8008592:	d32f      	bcc.n	80085f4 <quorem+0xf4>
 8008594:	613c      	str	r4, [r7, #16]
 8008596:	4638      	mov	r0, r7
 8008598:	f001 fd0e 	bl	8009fb8 <__mcmp>
 800859c:	2800      	cmp	r0, #0
 800859e:	db25      	blt.n	80085ec <quorem+0xec>
 80085a0:	4629      	mov	r1, r5
 80085a2:	2000      	movs	r0, #0
 80085a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80085a8:	f8d1 c000 	ldr.w	ip, [r1]
 80085ac:	fa1f fe82 	uxth.w	lr, r2
 80085b0:	fa1f f38c 	uxth.w	r3, ip
 80085b4:	eba3 030e 	sub.w	r3, r3, lr
 80085b8:	4403      	add	r3, r0
 80085ba:	0c12      	lsrs	r2, r2, #16
 80085bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085ca:	45c1      	cmp	r9, r8
 80085cc:	f841 3b04 	str.w	r3, [r1], #4
 80085d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085d4:	d2e6      	bcs.n	80085a4 <quorem+0xa4>
 80085d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085de:	b922      	cbnz	r2, 80085ea <quorem+0xea>
 80085e0:	3b04      	subs	r3, #4
 80085e2:	429d      	cmp	r5, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	d30b      	bcc.n	8008600 <quorem+0x100>
 80085e8:	613c      	str	r4, [r7, #16]
 80085ea:	3601      	adds	r6, #1
 80085ec:	4630      	mov	r0, r6
 80085ee:	b003      	add	sp, #12
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f4:	6812      	ldr	r2, [r2, #0]
 80085f6:	3b04      	subs	r3, #4
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	d1cb      	bne.n	8008594 <quorem+0x94>
 80085fc:	3c01      	subs	r4, #1
 80085fe:	e7c6      	b.n	800858e <quorem+0x8e>
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	3b04      	subs	r3, #4
 8008604:	2a00      	cmp	r2, #0
 8008606:	d1ef      	bne.n	80085e8 <quorem+0xe8>
 8008608:	3c01      	subs	r4, #1
 800860a:	e7ea      	b.n	80085e2 <quorem+0xe2>
 800860c:	2000      	movs	r0, #0
 800860e:	e7ee      	b.n	80085ee <quorem+0xee>

08008610 <_dtoa_r>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	69c7      	ldr	r7, [r0, #28]
 8008616:	b099      	sub	sp, #100	@ 0x64
 8008618:	ed8d 0b02 	vstr	d0, [sp, #8]
 800861c:	ec55 4b10 	vmov	r4, r5, d0
 8008620:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008622:	9109      	str	r1, [sp, #36]	@ 0x24
 8008624:	4683      	mov	fp, r0
 8008626:	920e      	str	r2, [sp, #56]	@ 0x38
 8008628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800862a:	b97f      	cbnz	r7, 800864c <_dtoa_r+0x3c>
 800862c:	2010      	movs	r0, #16
 800862e:	f001 f937 	bl	80098a0 <malloc>
 8008632:	4602      	mov	r2, r0
 8008634:	f8cb 001c 	str.w	r0, [fp, #28]
 8008638:	b920      	cbnz	r0, 8008644 <_dtoa_r+0x34>
 800863a:	4ba7      	ldr	r3, [pc, #668]	@ (80088d8 <_dtoa_r+0x2c8>)
 800863c:	21ef      	movs	r1, #239	@ 0xef
 800863e:	48a7      	ldr	r0, [pc, #668]	@ (80088dc <_dtoa_r+0x2cc>)
 8008640:	f002 f8e2 	bl	800a808 <__assert_func>
 8008644:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008648:	6007      	str	r7, [r0, #0]
 800864a:	60c7      	str	r7, [r0, #12]
 800864c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008650:	6819      	ldr	r1, [r3, #0]
 8008652:	b159      	cbz	r1, 800866c <_dtoa_r+0x5c>
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	604a      	str	r2, [r1, #4]
 8008658:	2301      	movs	r3, #1
 800865a:	4093      	lsls	r3, r2
 800865c:	608b      	str	r3, [r1, #8]
 800865e:	4658      	mov	r0, fp
 8008660:	f001 fa26 	bl	8009ab0 <_Bfree>
 8008664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	1e2b      	subs	r3, r5, #0
 800866e:	bfb9      	ittee	lt
 8008670:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008674:	9303      	strlt	r3, [sp, #12]
 8008676:	2300      	movge	r3, #0
 8008678:	6033      	strge	r3, [r6, #0]
 800867a:	9f03      	ldr	r7, [sp, #12]
 800867c:	4b98      	ldr	r3, [pc, #608]	@ (80088e0 <_dtoa_r+0x2d0>)
 800867e:	bfbc      	itt	lt
 8008680:	2201      	movlt	r2, #1
 8008682:	6032      	strlt	r2, [r6, #0]
 8008684:	43bb      	bics	r3, r7
 8008686:	d112      	bne.n	80086ae <_dtoa_r+0x9e>
 8008688:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800868a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800868e:	6013      	str	r3, [r2, #0]
 8008690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008694:	4323      	orrs	r3, r4
 8008696:	f000 854d 	beq.w	8009134 <_dtoa_r+0xb24>
 800869a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800869c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088f4 <_dtoa_r+0x2e4>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 854f 	beq.w	8009144 <_dtoa_r+0xb34>
 80086a6:	f10a 0303 	add.w	r3, sl, #3
 80086aa:	f000 bd49 	b.w	8009140 <_dtoa_r+0xb30>
 80086ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086b2:	2200      	movs	r2, #0
 80086b4:	ec51 0b17 	vmov	r0, r1, d7
 80086b8:	2300      	movs	r3, #0
 80086ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80086be:	f7f8 fa23 	bl	8000b08 <__aeabi_dcmpeq>
 80086c2:	4680      	mov	r8, r0
 80086c4:	b158      	cbz	r0, 80086de <_dtoa_r+0xce>
 80086c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086c8:	2301      	movs	r3, #1
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086ce:	b113      	cbz	r3, 80086d6 <_dtoa_r+0xc6>
 80086d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086d2:	4b84      	ldr	r3, [pc, #528]	@ (80088e4 <_dtoa_r+0x2d4>)
 80086d4:	6013      	str	r3, [r2, #0]
 80086d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088f8 <_dtoa_r+0x2e8>
 80086da:	f000 bd33 	b.w	8009144 <_dtoa_r+0xb34>
 80086de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086e2:	aa16      	add	r2, sp, #88	@ 0x58
 80086e4:	a917      	add	r1, sp, #92	@ 0x5c
 80086e6:	4658      	mov	r0, fp
 80086e8:	f001 fd86 	bl	800a1f8 <__d2b>
 80086ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086f0:	4681      	mov	r9, r0
 80086f2:	2e00      	cmp	r6, #0
 80086f4:	d077      	beq.n	80087e6 <_dtoa_r+0x1d6>
 80086f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008704:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008708:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800870c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008710:	4619      	mov	r1, r3
 8008712:	2200      	movs	r2, #0
 8008714:	4b74      	ldr	r3, [pc, #464]	@ (80088e8 <_dtoa_r+0x2d8>)
 8008716:	f7f7 fdd7 	bl	80002c8 <__aeabi_dsub>
 800871a:	a369      	add	r3, pc, #420	@ (adr r3, 80088c0 <_dtoa_r+0x2b0>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 ff8a 	bl	8000638 <__aeabi_dmul>
 8008724:	a368      	add	r3, pc, #416	@ (adr r3, 80088c8 <_dtoa_r+0x2b8>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fdcf 	bl	80002cc <__adddf3>
 800872e:	4604      	mov	r4, r0
 8008730:	4630      	mov	r0, r6
 8008732:	460d      	mov	r5, r1
 8008734:	f7f7 ff16 	bl	8000564 <__aeabi_i2d>
 8008738:	a365      	add	r3, pc, #404	@ (adr r3, 80088d0 <_dtoa_r+0x2c0>)
 800873a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873e:	f7f7 ff7b 	bl	8000638 <__aeabi_dmul>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 fdbf 	bl	80002cc <__adddf3>
 800874e:	4604      	mov	r4, r0
 8008750:	460d      	mov	r5, r1
 8008752:	f7f8 fa21 	bl	8000b98 <__aeabi_d2iz>
 8008756:	2200      	movs	r2, #0
 8008758:	4607      	mov	r7, r0
 800875a:	2300      	movs	r3, #0
 800875c:	4620      	mov	r0, r4
 800875e:	4629      	mov	r1, r5
 8008760:	f7f8 f9dc 	bl	8000b1c <__aeabi_dcmplt>
 8008764:	b140      	cbz	r0, 8008778 <_dtoa_r+0x168>
 8008766:	4638      	mov	r0, r7
 8008768:	f7f7 fefc 	bl	8000564 <__aeabi_i2d>
 800876c:	4622      	mov	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	f7f8 f9ca 	bl	8000b08 <__aeabi_dcmpeq>
 8008774:	b900      	cbnz	r0, 8008778 <_dtoa_r+0x168>
 8008776:	3f01      	subs	r7, #1
 8008778:	2f16      	cmp	r7, #22
 800877a:	d851      	bhi.n	8008820 <_dtoa_r+0x210>
 800877c:	4b5b      	ldr	r3, [pc, #364]	@ (80088ec <_dtoa_r+0x2dc>)
 800877e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800878a:	f7f8 f9c7 	bl	8000b1c <__aeabi_dcmplt>
 800878e:	2800      	cmp	r0, #0
 8008790:	d048      	beq.n	8008824 <_dtoa_r+0x214>
 8008792:	3f01      	subs	r7, #1
 8008794:	2300      	movs	r3, #0
 8008796:	9312      	str	r3, [sp, #72]	@ 0x48
 8008798:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800879a:	1b9b      	subs	r3, r3, r6
 800879c:	1e5a      	subs	r2, r3, #1
 800879e:	bf44      	itt	mi
 80087a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80087a4:	2300      	movmi	r3, #0
 80087a6:	9208      	str	r2, [sp, #32]
 80087a8:	bf54      	ite	pl
 80087aa:	f04f 0800 	movpl.w	r8, #0
 80087ae:	9308      	strmi	r3, [sp, #32]
 80087b0:	2f00      	cmp	r7, #0
 80087b2:	db39      	blt.n	8008828 <_dtoa_r+0x218>
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80087b8:	443b      	add	r3, r7
 80087ba:	9308      	str	r3, [sp, #32]
 80087bc:	2300      	movs	r3, #0
 80087be:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c2:	2b09      	cmp	r3, #9
 80087c4:	d864      	bhi.n	8008890 <_dtoa_r+0x280>
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	bfc4      	itt	gt
 80087ca:	3b04      	subgt	r3, #4
 80087cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d0:	f1a3 0302 	sub.w	r3, r3, #2
 80087d4:	bfcc      	ite	gt
 80087d6:	2400      	movgt	r4, #0
 80087d8:	2401      	movle	r4, #1
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d863      	bhi.n	80088a6 <_dtoa_r+0x296>
 80087de:	e8df f003 	tbb	[pc, r3]
 80087e2:	372a      	.short	0x372a
 80087e4:	5535      	.short	0x5535
 80087e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087ea:	441e      	add	r6, r3
 80087ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087f0:	2b20      	cmp	r3, #32
 80087f2:	bfc1      	itttt	gt
 80087f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087f8:	409f      	lslgt	r7, r3
 80087fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008802:	bfd6      	itet	le
 8008804:	f1c3 0320 	rsble	r3, r3, #32
 8008808:	ea47 0003 	orrgt.w	r0, r7, r3
 800880c:	fa04 f003 	lslle.w	r0, r4, r3
 8008810:	f7f7 fe98 	bl	8000544 <__aeabi_ui2d>
 8008814:	2201      	movs	r2, #1
 8008816:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800881a:	3e01      	subs	r6, #1
 800881c:	9214      	str	r2, [sp, #80]	@ 0x50
 800881e:	e777      	b.n	8008710 <_dtoa_r+0x100>
 8008820:	2301      	movs	r3, #1
 8008822:	e7b8      	b.n	8008796 <_dtoa_r+0x186>
 8008824:	9012      	str	r0, [sp, #72]	@ 0x48
 8008826:	e7b7      	b.n	8008798 <_dtoa_r+0x188>
 8008828:	427b      	negs	r3, r7
 800882a:	930a      	str	r3, [sp, #40]	@ 0x28
 800882c:	2300      	movs	r3, #0
 800882e:	eba8 0807 	sub.w	r8, r8, r7
 8008832:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008834:	e7c4      	b.n	80087c0 <_dtoa_r+0x1b0>
 8008836:	2300      	movs	r3, #0
 8008838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800883a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	dc35      	bgt.n	80088ac <_dtoa_r+0x29c>
 8008840:	2301      	movs	r3, #1
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	461a      	mov	r2, r3
 8008848:	920e      	str	r2, [sp, #56]	@ 0x38
 800884a:	e00b      	b.n	8008864 <_dtoa_r+0x254>
 800884c:	2301      	movs	r3, #1
 800884e:	e7f3      	b.n	8008838 <_dtoa_r+0x228>
 8008850:	2300      	movs	r3, #0
 8008852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008856:	18fb      	adds	r3, r7, r3
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	2b01      	cmp	r3, #1
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	bfb8      	it	lt
 8008862:	2301      	movlt	r3, #1
 8008864:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008868:	2100      	movs	r1, #0
 800886a:	2204      	movs	r2, #4
 800886c:	f102 0514 	add.w	r5, r2, #20
 8008870:	429d      	cmp	r5, r3
 8008872:	d91f      	bls.n	80088b4 <_dtoa_r+0x2a4>
 8008874:	6041      	str	r1, [r0, #4]
 8008876:	4658      	mov	r0, fp
 8008878:	f001 f8da 	bl	8009a30 <_Balloc>
 800887c:	4682      	mov	sl, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d13c      	bne.n	80088fc <_dtoa_r+0x2ec>
 8008882:	4b1b      	ldr	r3, [pc, #108]	@ (80088f0 <_dtoa_r+0x2e0>)
 8008884:	4602      	mov	r2, r0
 8008886:	f240 11af 	movw	r1, #431	@ 0x1af
 800888a:	e6d8      	b.n	800863e <_dtoa_r+0x2e>
 800888c:	2301      	movs	r3, #1
 800888e:	e7e0      	b.n	8008852 <_dtoa_r+0x242>
 8008890:	2401      	movs	r4, #1
 8008892:	2300      	movs	r3, #0
 8008894:	9309      	str	r3, [sp, #36]	@ 0x24
 8008896:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008898:	f04f 33ff 	mov.w	r3, #4294967295
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	9307      	str	r3, [sp, #28]
 80088a0:	2200      	movs	r2, #0
 80088a2:	2312      	movs	r3, #18
 80088a4:	e7d0      	b.n	8008848 <_dtoa_r+0x238>
 80088a6:	2301      	movs	r3, #1
 80088a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088aa:	e7f5      	b.n	8008898 <_dtoa_r+0x288>
 80088ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	9307      	str	r3, [sp, #28]
 80088b2:	e7d7      	b.n	8008864 <_dtoa_r+0x254>
 80088b4:	3101      	adds	r1, #1
 80088b6:	0052      	lsls	r2, r2, #1
 80088b8:	e7d8      	b.n	800886c <_dtoa_r+0x25c>
 80088ba:	bf00      	nop
 80088bc:	f3af 8000 	nop.w
 80088c0:	636f4361 	.word	0x636f4361
 80088c4:	3fd287a7 	.word	0x3fd287a7
 80088c8:	8b60c8b3 	.word	0x8b60c8b3
 80088cc:	3fc68a28 	.word	0x3fc68a28
 80088d0:	509f79fb 	.word	0x509f79fb
 80088d4:	3fd34413 	.word	0x3fd34413
 80088d8:	0800b942 	.word	0x0800b942
 80088dc:	0800b959 	.word	0x0800b959
 80088e0:	7ff00000 	.word	0x7ff00000
 80088e4:	0800b90a 	.word	0x0800b90a
 80088e8:	3ff80000 	.word	0x3ff80000
 80088ec:	0800bab0 	.word	0x0800bab0
 80088f0:	0800b9b1 	.word	0x0800b9b1
 80088f4:	0800b93e 	.word	0x0800b93e
 80088f8:	0800b909 	.word	0x0800b909
 80088fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008900:	6018      	str	r0, [r3, #0]
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	2b0e      	cmp	r3, #14
 8008906:	f200 80a4 	bhi.w	8008a52 <_dtoa_r+0x442>
 800890a:	2c00      	cmp	r4, #0
 800890c:	f000 80a1 	beq.w	8008a52 <_dtoa_r+0x442>
 8008910:	2f00      	cmp	r7, #0
 8008912:	dd33      	ble.n	800897c <_dtoa_r+0x36c>
 8008914:	4bad      	ldr	r3, [pc, #692]	@ (8008bcc <_dtoa_r+0x5bc>)
 8008916:	f007 020f 	and.w	r2, r7, #15
 800891a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891e:	ed93 7b00 	vldr	d7, [r3]
 8008922:	05f8      	lsls	r0, r7, #23
 8008924:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008928:	ea4f 1427 	mov.w	r4, r7, asr #4
 800892c:	d516      	bpl.n	800895c <_dtoa_r+0x34c>
 800892e:	4ba8      	ldr	r3, [pc, #672]	@ (8008bd0 <_dtoa_r+0x5c0>)
 8008930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008938:	f7f7 ffa8 	bl	800088c <__aeabi_ddiv>
 800893c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008940:	f004 040f 	and.w	r4, r4, #15
 8008944:	2603      	movs	r6, #3
 8008946:	4da2      	ldr	r5, [pc, #648]	@ (8008bd0 <_dtoa_r+0x5c0>)
 8008948:	b954      	cbnz	r4, 8008960 <_dtoa_r+0x350>
 800894a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008952:	f7f7 ff9b 	bl	800088c <__aeabi_ddiv>
 8008956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800895a:	e028      	b.n	80089ae <_dtoa_r+0x39e>
 800895c:	2602      	movs	r6, #2
 800895e:	e7f2      	b.n	8008946 <_dtoa_r+0x336>
 8008960:	07e1      	lsls	r1, r4, #31
 8008962:	d508      	bpl.n	8008976 <_dtoa_r+0x366>
 8008964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008968:	e9d5 2300 	ldrd	r2, r3, [r5]
 800896c:	f7f7 fe64 	bl	8000638 <__aeabi_dmul>
 8008970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008974:	3601      	adds	r6, #1
 8008976:	1064      	asrs	r4, r4, #1
 8008978:	3508      	adds	r5, #8
 800897a:	e7e5      	b.n	8008948 <_dtoa_r+0x338>
 800897c:	f000 80d2 	beq.w	8008b24 <_dtoa_r+0x514>
 8008980:	427c      	negs	r4, r7
 8008982:	4b92      	ldr	r3, [pc, #584]	@ (8008bcc <_dtoa_r+0x5bc>)
 8008984:	4d92      	ldr	r5, [pc, #584]	@ (8008bd0 <_dtoa_r+0x5c0>)
 8008986:	f004 020f 	and.w	r2, r4, #15
 800898a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008996:	f7f7 fe4f 	bl	8000638 <__aeabi_dmul>
 800899a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800899e:	1124      	asrs	r4, r4, #4
 80089a0:	2300      	movs	r3, #0
 80089a2:	2602      	movs	r6, #2
 80089a4:	2c00      	cmp	r4, #0
 80089a6:	f040 80b2 	bne.w	8008b0e <_dtoa_r+0x4fe>
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1d3      	bne.n	8008956 <_dtoa_r+0x346>
 80089ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80b7 	beq.w	8008b28 <_dtoa_r+0x518>
 80089ba:	4b86      	ldr	r3, [pc, #536]	@ (8008bd4 <_dtoa_r+0x5c4>)
 80089bc:	2200      	movs	r2, #0
 80089be:	4620      	mov	r0, r4
 80089c0:	4629      	mov	r1, r5
 80089c2:	f7f8 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	f000 80ae 	beq.w	8008b28 <_dtoa_r+0x518>
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80aa 	beq.w	8008b28 <_dtoa_r+0x518>
 80089d4:	9b00      	ldr	r3, [sp, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dd37      	ble.n	8008a4a <_dtoa_r+0x43a>
 80089da:	1e7b      	subs	r3, r7, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	4620      	mov	r0, r4
 80089e0:	4b7d      	ldr	r3, [pc, #500]	@ (8008bd8 <_dtoa_r+0x5c8>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	4629      	mov	r1, r5
 80089e6:	f7f7 fe27 	bl	8000638 <__aeabi_dmul>
 80089ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ee:	9c00      	ldr	r4, [sp, #0]
 80089f0:	3601      	adds	r6, #1
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7f7 fdb6 	bl	8000564 <__aeabi_i2d>
 80089f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089fc:	f7f7 fe1c 	bl	8000638 <__aeabi_dmul>
 8008a00:	4b76      	ldr	r3, [pc, #472]	@ (8008bdc <_dtoa_r+0x5cc>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	f7f7 fc62 	bl	80002cc <__adddf3>
 8008a08:	4605      	mov	r5, r0
 8008a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	f040 808d 	bne.w	8008b2e <_dtoa_r+0x51e>
 8008a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a18:	4b71      	ldr	r3, [pc, #452]	@ (8008be0 <_dtoa_r+0x5d0>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7f7 fc54 	bl	80002c8 <__aeabi_dsub>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4633      	mov	r3, r6
 8008a2c:	f7f8 f894 	bl	8000b58 <__aeabi_dcmpgt>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f040 828b 	bne.w	8008f4c <_dtoa_r+0x93c>
 8008a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a40:	f7f8 f86c 	bl	8000b1c <__aeabi_dcmplt>
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f040 8128 	bne.w	8008c9a <_dtoa_r+0x68a>
 8008a4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f2c0 815a 	blt.w	8008d0e <_dtoa_r+0x6fe>
 8008a5a:	2f0e      	cmp	r7, #14
 8008a5c:	f300 8157 	bgt.w	8008d0e <_dtoa_r+0x6fe>
 8008a60:	4b5a      	ldr	r3, [pc, #360]	@ (8008bcc <_dtoa_r+0x5bc>)
 8008a62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a66:	ed93 7b00 	vldr	d7, [r3]
 8008a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	ed8d 7b00 	vstr	d7, [sp]
 8008a72:	da03      	bge.n	8008a7c <_dtoa_r+0x46c>
 8008a74:	9b07      	ldr	r3, [sp, #28]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f340 8101 	ble.w	8008c7e <_dtoa_r+0x66e>
 8008a7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a80:	4656      	mov	r6, sl
 8008a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 feff 	bl	800088c <__aeabi_ddiv>
 8008a8e:	f7f8 f883 	bl	8000b98 <__aeabi_d2iz>
 8008a92:	4680      	mov	r8, r0
 8008a94:	f7f7 fd66 	bl	8000564 <__aeabi_i2d>
 8008a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9c:	f7f7 fdcc 	bl	8000638 <__aeabi_dmul>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008aac:	f7f7 fc0c 	bl	80002c8 <__aeabi_dsub>
 8008ab0:	f806 4b01 	strb.w	r4, [r6], #1
 8008ab4:	9d07      	ldr	r5, [sp, #28]
 8008ab6:	eba6 040a 	sub.w	r4, r6, sl
 8008aba:	42a5      	cmp	r5, r4
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	f040 8117 	bne.w	8008cf2 <_dtoa_r+0x6e2>
 8008ac4:	f7f7 fc02 	bl	80002cc <__adddf3>
 8008ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	f7f8 f842 	bl	8000b58 <__aeabi_dcmpgt>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f040 80f9 	bne.w	8008ccc <_dtoa_r+0x6bc>
 8008ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7f8 f811 	bl	8000b08 <__aeabi_dcmpeq>
 8008ae6:	b118      	cbz	r0, 8008af0 <_dtoa_r+0x4e0>
 8008ae8:	f018 0f01 	tst.w	r8, #1
 8008aec:	f040 80ee 	bne.w	8008ccc <_dtoa_r+0x6bc>
 8008af0:	4649      	mov	r1, r9
 8008af2:	4658      	mov	r0, fp
 8008af4:	f000 ffdc 	bl	8009ab0 <_Bfree>
 8008af8:	2300      	movs	r3, #0
 8008afa:	7033      	strb	r3, [r6, #0]
 8008afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008afe:	3701      	adds	r7, #1
 8008b00:	601f      	str	r7, [r3, #0]
 8008b02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 831d 	beq.w	8009144 <_dtoa_r+0xb34>
 8008b0a:	601e      	str	r6, [r3, #0]
 8008b0c:	e31a      	b.n	8009144 <_dtoa_r+0xb34>
 8008b0e:	07e2      	lsls	r2, r4, #31
 8008b10:	d505      	bpl.n	8008b1e <_dtoa_r+0x50e>
 8008b12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b16:	f7f7 fd8f 	bl	8000638 <__aeabi_dmul>
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	1064      	asrs	r4, r4, #1
 8008b20:	3508      	adds	r5, #8
 8008b22:	e73f      	b.n	80089a4 <_dtoa_r+0x394>
 8008b24:	2602      	movs	r6, #2
 8008b26:	e742      	b.n	80089ae <_dtoa_r+0x39e>
 8008b28:	9c07      	ldr	r4, [sp, #28]
 8008b2a:	9704      	str	r7, [sp, #16]
 8008b2c:	e761      	b.n	80089f2 <_dtoa_r+0x3e2>
 8008b2e:	4b27      	ldr	r3, [pc, #156]	@ (8008bcc <_dtoa_r+0x5bc>)
 8008b30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b3a:	4454      	add	r4, sl
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d053      	beq.n	8008be8 <_dtoa_r+0x5d8>
 8008b40:	4928      	ldr	r1, [pc, #160]	@ (8008be4 <_dtoa_r+0x5d4>)
 8008b42:	2000      	movs	r0, #0
 8008b44:	f7f7 fea2 	bl	800088c <__aeabi_ddiv>
 8008b48:	4633      	mov	r3, r6
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	f7f7 fbbc 	bl	80002c8 <__aeabi_dsub>
 8008b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b54:	4656      	mov	r6, sl
 8008b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b5a:	f7f8 f81d 	bl	8000b98 <__aeabi_d2iz>
 8008b5e:	4605      	mov	r5, r0
 8008b60:	f7f7 fd00 	bl	8000564 <__aeabi_i2d>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6c:	f7f7 fbac 	bl	80002c8 <__aeabi_dsub>
 8008b70:	3530      	adds	r5, #48	@ 0x30
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b7a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b82:	f7f7 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d171      	bne.n	8008c6e <_dtoa_r+0x65e>
 8008b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b8e:	4911      	ldr	r1, [pc, #68]	@ (8008bd4 <_dtoa_r+0x5c4>)
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7f7 fb99 	bl	80002c8 <__aeabi_dsub>
 8008b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b9a:	f7f7 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f040 8095 	bne.w	8008cce <_dtoa_r+0x6be>
 8008ba4:	42a6      	cmp	r6, r4
 8008ba6:	f43f af50 	beq.w	8008a4a <_dtoa_r+0x43a>
 8008baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bae:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd8 <_dtoa_r+0x5c8>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f7f7 fd41 	bl	8000638 <__aeabi_dmul>
 8008bb6:	4b08      	ldr	r3, [pc, #32]	@ (8008bd8 <_dtoa_r+0x5c8>)
 8008bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bc2:	f7f7 fd39 	bl	8000638 <__aeabi_dmul>
 8008bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bca:	e7c4      	b.n	8008b56 <_dtoa_r+0x546>
 8008bcc:	0800bab0 	.word	0x0800bab0
 8008bd0:	0800ba88 	.word	0x0800ba88
 8008bd4:	3ff00000 	.word	0x3ff00000
 8008bd8:	40240000 	.word	0x40240000
 8008bdc:	401c0000 	.word	0x401c0000
 8008be0:	40140000 	.word	0x40140000
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	4631      	mov	r1, r6
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7f7 fd24 	bl	8000638 <__aeabi_dmul>
 8008bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bf4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bf6:	4656      	mov	r6, sl
 8008bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bfc:	f7f7 ffcc 	bl	8000b98 <__aeabi_d2iz>
 8008c00:	4605      	mov	r5, r0
 8008c02:	f7f7 fcaf 	bl	8000564 <__aeabi_i2d>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0e:	f7f7 fb5b 	bl	80002c8 <__aeabi_dsub>
 8008c12:	3530      	adds	r5, #48	@ 0x30
 8008c14:	f806 5b01 	strb.w	r5, [r6], #1
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	42a6      	cmp	r6, r4
 8008c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c22:	f04f 0200 	mov.w	r2, #0
 8008c26:	d124      	bne.n	8008c72 <_dtoa_r+0x662>
 8008c28:	4bac      	ldr	r3, [pc, #688]	@ (8008edc <_dtoa_r+0x8cc>)
 8008c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c2e:	f7f7 fb4d 	bl	80002cc <__adddf3>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3a:	f7f7 ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d145      	bne.n	8008cce <_dtoa_r+0x6be>
 8008c42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c46:	49a5      	ldr	r1, [pc, #660]	@ (8008edc <_dtoa_r+0x8cc>)
 8008c48:	2000      	movs	r0, #0
 8008c4a:	f7f7 fb3d 	bl	80002c8 <__aeabi_dsub>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c56:	f7f7 ff61 	bl	8000b1c <__aeabi_dcmplt>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f aef5 	beq.w	8008a4a <_dtoa_r+0x43a>
 8008c60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c62:	1e73      	subs	r3, r6, #1
 8008c64:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c6a:	2b30      	cmp	r3, #48	@ 0x30
 8008c6c:	d0f8      	beq.n	8008c60 <_dtoa_r+0x650>
 8008c6e:	9f04      	ldr	r7, [sp, #16]
 8008c70:	e73e      	b.n	8008af0 <_dtoa_r+0x4e0>
 8008c72:	4b9b      	ldr	r3, [pc, #620]	@ (8008ee0 <_dtoa_r+0x8d0>)
 8008c74:	f7f7 fce0 	bl	8000638 <__aeabi_dmul>
 8008c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c7c:	e7bc      	b.n	8008bf8 <_dtoa_r+0x5e8>
 8008c7e:	d10c      	bne.n	8008c9a <_dtoa_r+0x68a>
 8008c80:	4b98      	ldr	r3, [pc, #608]	@ (8008ee4 <_dtoa_r+0x8d4>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c88:	f7f7 fcd6 	bl	8000638 <__aeabi_dmul>
 8008c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c90:	f7f7 ff58 	bl	8000b44 <__aeabi_dcmpge>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	f000 8157 	beq.w	8008f48 <_dtoa_r+0x938>
 8008c9a:	2400      	movs	r4, #0
 8008c9c:	4625      	mov	r5, r4
 8008c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	9304      	str	r3, [sp, #16]
 8008ca4:	4656      	mov	r6, sl
 8008ca6:	2700      	movs	r7, #0
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4658      	mov	r0, fp
 8008cac:	f000 ff00 	bl	8009ab0 <_Bfree>
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	d0dc      	beq.n	8008c6e <_dtoa_r+0x65e>
 8008cb4:	b12f      	cbz	r7, 8008cc2 <_dtoa_r+0x6b2>
 8008cb6:	42af      	cmp	r7, r5
 8008cb8:	d003      	beq.n	8008cc2 <_dtoa_r+0x6b2>
 8008cba:	4639      	mov	r1, r7
 8008cbc:	4658      	mov	r0, fp
 8008cbe:	f000 fef7 	bl	8009ab0 <_Bfree>
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4658      	mov	r0, fp
 8008cc6:	f000 fef3 	bl	8009ab0 <_Bfree>
 8008cca:	e7d0      	b.n	8008c6e <_dtoa_r+0x65e>
 8008ccc:	9704      	str	r7, [sp, #16]
 8008cce:	4633      	mov	r3, r6
 8008cd0:	461e      	mov	r6, r3
 8008cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cd6:	2a39      	cmp	r2, #57	@ 0x39
 8008cd8:	d107      	bne.n	8008cea <_dtoa_r+0x6da>
 8008cda:	459a      	cmp	sl, r3
 8008cdc:	d1f8      	bne.n	8008cd0 <_dtoa_r+0x6c0>
 8008cde:	9a04      	ldr	r2, [sp, #16]
 8008ce0:	3201      	adds	r2, #1
 8008ce2:	9204      	str	r2, [sp, #16]
 8008ce4:	2230      	movs	r2, #48	@ 0x30
 8008ce6:	f88a 2000 	strb.w	r2, [sl]
 8008cea:	781a      	ldrb	r2, [r3, #0]
 8008cec:	3201      	adds	r2, #1
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	e7bd      	b.n	8008c6e <_dtoa_r+0x65e>
 8008cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ee0 <_dtoa_r+0x8d0>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f7f7 fc9f 	bl	8000638 <__aeabi_dmul>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	460d      	mov	r5, r1
 8008d02:	f7f7 ff01 	bl	8000b08 <__aeabi_dcmpeq>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f43f aebb 	beq.w	8008a82 <_dtoa_r+0x472>
 8008d0c:	e6f0      	b.n	8008af0 <_dtoa_r+0x4e0>
 8008d0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	f000 80db 	beq.w	8008ecc <_dtoa_r+0x8bc>
 8008d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d18:	2a01      	cmp	r2, #1
 8008d1a:	f300 80bf 	bgt.w	8008e9c <_dtoa_r+0x88c>
 8008d1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	f000 80b7 	beq.w	8008e94 <_dtoa_r+0x884>
 8008d26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d2c:	4646      	mov	r6, r8
 8008d2e:	9a08      	ldr	r2, [sp, #32]
 8008d30:	2101      	movs	r1, #1
 8008d32:	441a      	add	r2, r3
 8008d34:	4658      	mov	r0, fp
 8008d36:	4498      	add	r8, r3
 8008d38:	9208      	str	r2, [sp, #32]
 8008d3a:	f000 ffb7 	bl	8009cac <__i2b>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	b15e      	cbz	r6, 8008d5a <_dtoa_r+0x74a>
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	dd08      	ble.n	8008d5a <_dtoa_r+0x74a>
 8008d48:	42b3      	cmp	r3, r6
 8008d4a:	9a08      	ldr	r2, [sp, #32]
 8008d4c:	bfa8      	it	ge
 8008d4e:	4633      	movge	r3, r6
 8008d50:	eba8 0803 	sub.w	r8, r8, r3
 8008d54:	1af6      	subs	r6, r6, r3
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	9308      	str	r3, [sp, #32]
 8008d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d5c:	b1f3      	cbz	r3, 8008d9c <_dtoa_r+0x78c>
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80b7 	beq.w	8008ed4 <_dtoa_r+0x8c4>
 8008d66:	b18c      	cbz	r4, 8008d8c <_dtoa_r+0x77c>
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f001 f85d 	bl	8009e2c <__pow5mult>
 8008d72:	464a      	mov	r2, r9
 8008d74:	4601      	mov	r1, r0
 8008d76:	4605      	mov	r5, r0
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f000 ffad 	bl	8009cd8 <__multiply>
 8008d7e:	4649      	mov	r1, r9
 8008d80:	9004      	str	r0, [sp, #16]
 8008d82:	4658      	mov	r0, fp
 8008d84:	f000 fe94 	bl	8009ab0 <_Bfree>
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	4699      	mov	r9, r3
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d8e:	1b1a      	subs	r2, r3, r4
 8008d90:	d004      	beq.n	8008d9c <_dtoa_r+0x78c>
 8008d92:	4649      	mov	r1, r9
 8008d94:	4658      	mov	r0, fp
 8008d96:	f001 f849 	bl	8009e2c <__pow5mult>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	4658      	mov	r0, fp
 8008da0:	f000 ff84 	bl	8009cac <__i2b>
 8008da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008da6:	4604      	mov	r4, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 81cf 	beq.w	800914c <_dtoa_r+0xb3c>
 8008dae:	461a      	mov	r2, r3
 8008db0:	4601      	mov	r1, r0
 8008db2:	4658      	mov	r0, fp
 8008db4:	f001 f83a 	bl	8009e2c <__pow5mult>
 8008db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	f300 8095 	bgt.w	8008eec <_dtoa_r+0x8dc>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 8087 	bne.w	8008ed8 <_dtoa_r+0x8c8>
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 8089 	bne.w	8008ee8 <_dtoa_r+0x8d8>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ddc:	0d1b      	lsrs	r3, r3, #20
 8008dde:	051b      	lsls	r3, r3, #20
 8008de0:	b12b      	cbz	r3, 8008dee <_dtoa_r+0x7de>
 8008de2:	9b08      	ldr	r3, [sp, #32]
 8008de4:	3301      	adds	r3, #1
 8008de6:	9308      	str	r3, [sp, #32]
 8008de8:	f108 0801 	add.w	r8, r8, #1
 8008dec:	2301      	movs	r3, #1
 8008dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 81b0 	beq.w	8009158 <_dtoa_r+0xb48>
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dfe:	6918      	ldr	r0, [r3, #16]
 8008e00:	f000 ff08 	bl	8009c14 <__hi0bits>
 8008e04:	f1c0 0020 	rsb	r0, r0, #32
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	4418      	add	r0, r3
 8008e0c:	f010 001f 	ands.w	r0, r0, #31
 8008e10:	d077      	beq.n	8008f02 <_dtoa_r+0x8f2>
 8008e12:	f1c0 0320 	rsb	r3, r0, #32
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	dd6b      	ble.n	8008ef2 <_dtoa_r+0x8e2>
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	f1c0 001c 	rsb	r0, r0, #28
 8008e20:	4403      	add	r3, r0
 8008e22:	4480      	add	r8, r0
 8008e24:	4406      	add	r6, r0
 8008e26:	9308      	str	r3, [sp, #32]
 8008e28:	f1b8 0f00 	cmp.w	r8, #0
 8008e2c:	dd05      	ble.n	8008e3a <_dtoa_r+0x82a>
 8008e2e:	4649      	mov	r1, r9
 8008e30:	4642      	mov	r2, r8
 8008e32:	4658      	mov	r0, fp
 8008e34:	f001 f854 	bl	8009ee0 <__lshift>
 8008e38:	4681      	mov	r9, r0
 8008e3a:	9b08      	ldr	r3, [sp, #32]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dd05      	ble.n	8008e4c <_dtoa_r+0x83c>
 8008e40:	4621      	mov	r1, r4
 8008e42:	461a      	mov	r2, r3
 8008e44:	4658      	mov	r0, fp
 8008e46:	f001 f84b 	bl	8009ee0 <__lshift>
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d059      	beq.n	8008f06 <_dtoa_r+0x8f6>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4648      	mov	r0, r9
 8008e56:	f001 f8af 	bl	8009fb8 <__mcmp>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	da53      	bge.n	8008f06 <_dtoa_r+0x8f6>
 8008e5e:	1e7b      	subs	r3, r7, #1
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	4649      	mov	r1, r9
 8008e64:	2300      	movs	r3, #0
 8008e66:	220a      	movs	r2, #10
 8008e68:	4658      	mov	r0, fp
 8008e6a:	f000 fe43 	bl	8009af4 <__multadd>
 8008e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e70:	4681      	mov	r9, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 8172 	beq.w	800915c <_dtoa_r+0xb4c>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	4658      	mov	r0, fp
 8008e80:	f000 fe38 	bl	8009af4 <__multadd>
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	4605      	mov	r5, r0
 8008e8a:	dc67      	bgt.n	8008f5c <_dtoa_r+0x94c>
 8008e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	dc41      	bgt.n	8008f16 <_dtoa_r+0x906>
 8008e92:	e063      	b.n	8008f5c <_dtoa_r+0x94c>
 8008e94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e9a:	e746      	b.n	8008d2a <_dtoa_r+0x71a>
 8008e9c:	9b07      	ldr	r3, [sp, #28]
 8008e9e:	1e5c      	subs	r4, r3, #1
 8008ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	bfbf      	itttt	lt
 8008ea6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ea8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008eaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008eac:	1ae3      	sublt	r3, r4, r3
 8008eae:	bfb4      	ite	lt
 8008eb0:	18d2      	addlt	r2, r2, r3
 8008eb2:	1b1c      	subge	r4, r3, r4
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	bfbc      	itt	lt
 8008eb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008eba:	2400      	movlt	r4, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	bfb5      	itete	lt
 8008ec0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ec4:	9b07      	ldrge	r3, [sp, #28]
 8008ec6:	2300      	movlt	r3, #0
 8008ec8:	4646      	movge	r6, r8
 8008eca:	e730      	b.n	8008d2e <_dtoa_r+0x71e>
 8008ecc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ece:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ed0:	4646      	mov	r6, r8
 8008ed2:	e735      	b.n	8008d40 <_dtoa_r+0x730>
 8008ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ed6:	e75c      	b.n	8008d92 <_dtoa_r+0x782>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e788      	b.n	8008dee <_dtoa_r+0x7de>
 8008edc:	3fe00000 	.word	0x3fe00000
 8008ee0:	40240000 	.word	0x40240000
 8008ee4:	40140000 	.word	0x40140000
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	e780      	b.n	8008dee <_dtoa_r+0x7de>
 8008eec:	2300      	movs	r3, #0
 8008eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ef0:	e782      	b.n	8008df8 <_dtoa_r+0x7e8>
 8008ef2:	d099      	beq.n	8008e28 <_dtoa_r+0x818>
 8008ef4:	9a08      	ldr	r2, [sp, #32]
 8008ef6:	331c      	adds	r3, #28
 8008ef8:	441a      	add	r2, r3
 8008efa:	4498      	add	r8, r3
 8008efc:	441e      	add	r6, r3
 8008efe:	9208      	str	r2, [sp, #32]
 8008f00:	e792      	b.n	8008e28 <_dtoa_r+0x818>
 8008f02:	4603      	mov	r3, r0
 8008f04:	e7f6      	b.n	8008ef4 <_dtoa_r+0x8e4>
 8008f06:	9b07      	ldr	r3, [sp, #28]
 8008f08:	9704      	str	r7, [sp, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dc20      	bgt.n	8008f50 <_dtoa_r+0x940>
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	dd1e      	ble.n	8008f54 <_dtoa_r+0x944>
 8008f16:	9b00      	ldr	r3, [sp, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f47f aec0 	bne.w	8008c9e <_dtoa_r+0x68e>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	2205      	movs	r2, #5
 8008f22:	4658      	mov	r0, fp
 8008f24:	f000 fde6 	bl	8009af4 <__multadd>
 8008f28:	4601      	mov	r1, r0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4648      	mov	r0, r9
 8008f2e:	f001 f843 	bl	8009fb8 <__mcmp>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f77f aeb3 	ble.w	8008c9e <_dtoa_r+0x68e>
 8008f38:	4656      	mov	r6, sl
 8008f3a:	2331      	movs	r3, #49	@ 0x31
 8008f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f40:	9b04      	ldr	r3, [sp, #16]
 8008f42:	3301      	adds	r3, #1
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	e6ae      	b.n	8008ca6 <_dtoa_r+0x696>
 8008f48:	9c07      	ldr	r4, [sp, #28]
 8008f4a:	9704      	str	r7, [sp, #16]
 8008f4c:	4625      	mov	r5, r4
 8008f4e:	e7f3      	b.n	8008f38 <_dtoa_r+0x928>
 8008f50:	9b07      	ldr	r3, [sp, #28]
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8104 	beq.w	8009164 <_dtoa_r+0xb54>
 8008f5c:	2e00      	cmp	r6, #0
 8008f5e:	dd05      	ble.n	8008f6c <_dtoa_r+0x95c>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4632      	mov	r2, r6
 8008f64:	4658      	mov	r0, fp
 8008f66:	f000 ffbb 	bl	8009ee0 <__lshift>
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d05a      	beq.n	8009028 <_dtoa_r+0xa18>
 8008f72:	6869      	ldr	r1, [r5, #4]
 8008f74:	4658      	mov	r0, fp
 8008f76:	f000 fd5b 	bl	8009a30 <_Balloc>
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <_dtoa_r+0x97a>
 8008f7e:	4b84      	ldr	r3, [pc, #528]	@ (8009190 <_dtoa_r+0xb80>)
 8008f80:	4602      	mov	r2, r0
 8008f82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f86:	f7ff bb5a 	b.w	800863e <_dtoa_r+0x2e>
 8008f8a:	692a      	ldr	r2, [r5, #16]
 8008f8c:	3202      	adds	r2, #2
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	f105 010c 	add.w	r1, r5, #12
 8008f94:	300c      	adds	r0, #12
 8008f96:	f7ff fa9a 	bl	80084ce <memcpy>
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	f000 ff9e 	bl	8009ee0 <__lshift>
 8008fa4:	f10a 0301 	add.w	r3, sl, #1
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	4453      	add	r3, sl
 8008fae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	462f      	mov	r7, r5
 8008fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fba:	4605      	mov	r5, r0
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	4648      	mov	r0, r9
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	f7ff fa9b 	bl	8008500 <quorem>
 8008fca:	4639      	mov	r1, r7
 8008fcc:	9002      	str	r0, [sp, #8]
 8008fce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fd2:	4648      	mov	r0, r9
 8008fd4:	f000 fff0 	bl	8009fb8 <__mcmp>
 8008fd8:	462a      	mov	r2, r5
 8008fda:	9008      	str	r0, [sp, #32]
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4658      	mov	r0, fp
 8008fe0:	f001 f806 	bl	8009ff0 <__mdiff>
 8008fe4:	68c2      	ldr	r2, [r0, #12]
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	bb02      	cbnz	r2, 800902c <_dtoa_r+0xa1c>
 8008fea:	4601      	mov	r1, r0
 8008fec:	4648      	mov	r0, r9
 8008fee:	f000 ffe3 	bl	8009fb8 <__mcmp>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4658      	mov	r0, fp
 8008ff8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ffa:	f000 fd59 	bl	8009ab0 <_Bfree>
 8008ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009002:	9e07      	ldr	r6, [sp, #28]
 8009004:	ea43 0102 	orr.w	r1, r3, r2
 8009008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800900a:	4319      	orrs	r1, r3
 800900c:	d110      	bne.n	8009030 <_dtoa_r+0xa20>
 800900e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009012:	d029      	beq.n	8009068 <_dtoa_r+0xa58>
 8009014:	9b08      	ldr	r3, [sp, #32]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd02      	ble.n	8009020 <_dtoa_r+0xa10>
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009020:	9b00      	ldr	r3, [sp, #0]
 8009022:	f883 8000 	strb.w	r8, [r3]
 8009026:	e63f      	b.n	8008ca8 <_dtoa_r+0x698>
 8009028:	4628      	mov	r0, r5
 800902a:	e7bb      	b.n	8008fa4 <_dtoa_r+0x994>
 800902c:	2201      	movs	r2, #1
 800902e:	e7e1      	b.n	8008ff4 <_dtoa_r+0x9e4>
 8009030:	9b08      	ldr	r3, [sp, #32]
 8009032:	2b00      	cmp	r3, #0
 8009034:	db04      	blt.n	8009040 <_dtoa_r+0xa30>
 8009036:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009038:	430b      	orrs	r3, r1
 800903a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800903c:	430b      	orrs	r3, r1
 800903e:	d120      	bne.n	8009082 <_dtoa_r+0xa72>
 8009040:	2a00      	cmp	r2, #0
 8009042:	dded      	ble.n	8009020 <_dtoa_r+0xa10>
 8009044:	4649      	mov	r1, r9
 8009046:	2201      	movs	r2, #1
 8009048:	4658      	mov	r0, fp
 800904a:	f000 ff49 	bl	8009ee0 <__lshift>
 800904e:	4621      	mov	r1, r4
 8009050:	4681      	mov	r9, r0
 8009052:	f000 ffb1 	bl	8009fb8 <__mcmp>
 8009056:	2800      	cmp	r0, #0
 8009058:	dc03      	bgt.n	8009062 <_dtoa_r+0xa52>
 800905a:	d1e1      	bne.n	8009020 <_dtoa_r+0xa10>
 800905c:	f018 0f01 	tst.w	r8, #1
 8009060:	d0de      	beq.n	8009020 <_dtoa_r+0xa10>
 8009062:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009066:	d1d8      	bne.n	800901a <_dtoa_r+0xa0a>
 8009068:	9a00      	ldr	r2, [sp, #0]
 800906a:	2339      	movs	r3, #57	@ 0x39
 800906c:	7013      	strb	r3, [r2, #0]
 800906e:	4633      	mov	r3, r6
 8009070:	461e      	mov	r6, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009078:	2a39      	cmp	r2, #57	@ 0x39
 800907a:	d052      	beq.n	8009122 <_dtoa_r+0xb12>
 800907c:	3201      	adds	r2, #1
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e612      	b.n	8008ca8 <_dtoa_r+0x698>
 8009082:	2a00      	cmp	r2, #0
 8009084:	dd07      	ble.n	8009096 <_dtoa_r+0xa86>
 8009086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800908a:	d0ed      	beq.n	8009068 <_dtoa_r+0xa58>
 800908c:	9a00      	ldr	r2, [sp, #0]
 800908e:	f108 0301 	add.w	r3, r8, #1
 8009092:	7013      	strb	r3, [r2, #0]
 8009094:	e608      	b.n	8008ca8 <_dtoa_r+0x698>
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	9a07      	ldr	r2, [sp, #28]
 800909a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800909e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d028      	beq.n	80090f6 <_dtoa_r+0xae6>
 80090a4:	4649      	mov	r1, r9
 80090a6:	2300      	movs	r3, #0
 80090a8:	220a      	movs	r2, #10
 80090aa:	4658      	mov	r0, fp
 80090ac:	f000 fd22 	bl	8009af4 <__multadd>
 80090b0:	42af      	cmp	r7, r5
 80090b2:	4681      	mov	r9, r0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	f04f 020a 	mov.w	r2, #10
 80090bc:	4639      	mov	r1, r7
 80090be:	4658      	mov	r0, fp
 80090c0:	d107      	bne.n	80090d2 <_dtoa_r+0xac2>
 80090c2:	f000 fd17 	bl	8009af4 <__multadd>
 80090c6:	4607      	mov	r7, r0
 80090c8:	4605      	mov	r5, r0
 80090ca:	9b07      	ldr	r3, [sp, #28]
 80090cc:	3301      	adds	r3, #1
 80090ce:	9307      	str	r3, [sp, #28]
 80090d0:	e774      	b.n	8008fbc <_dtoa_r+0x9ac>
 80090d2:	f000 fd0f 	bl	8009af4 <__multadd>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4607      	mov	r7, r0
 80090da:	2300      	movs	r3, #0
 80090dc:	220a      	movs	r2, #10
 80090de:	4658      	mov	r0, fp
 80090e0:	f000 fd08 	bl	8009af4 <__multadd>
 80090e4:	4605      	mov	r5, r0
 80090e6:	e7f0      	b.n	80090ca <_dtoa_r+0xaba>
 80090e8:	9b00      	ldr	r3, [sp, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	bfcc      	ite	gt
 80090ee:	461e      	movgt	r6, r3
 80090f0:	2601      	movle	r6, #1
 80090f2:	4456      	add	r6, sl
 80090f4:	2700      	movs	r7, #0
 80090f6:	4649      	mov	r1, r9
 80090f8:	2201      	movs	r2, #1
 80090fa:	4658      	mov	r0, fp
 80090fc:	f000 fef0 	bl	8009ee0 <__lshift>
 8009100:	4621      	mov	r1, r4
 8009102:	4681      	mov	r9, r0
 8009104:	f000 ff58 	bl	8009fb8 <__mcmp>
 8009108:	2800      	cmp	r0, #0
 800910a:	dcb0      	bgt.n	800906e <_dtoa_r+0xa5e>
 800910c:	d102      	bne.n	8009114 <_dtoa_r+0xb04>
 800910e:	f018 0f01 	tst.w	r8, #1
 8009112:	d1ac      	bne.n	800906e <_dtoa_r+0xa5e>
 8009114:	4633      	mov	r3, r6
 8009116:	461e      	mov	r6, r3
 8009118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800911c:	2a30      	cmp	r2, #48	@ 0x30
 800911e:	d0fa      	beq.n	8009116 <_dtoa_r+0xb06>
 8009120:	e5c2      	b.n	8008ca8 <_dtoa_r+0x698>
 8009122:	459a      	cmp	sl, r3
 8009124:	d1a4      	bne.n	8009070 <_dtoa_r+0xa60>
 8009126:	9b04      	ldr	r3, [sp, #16]
 8009128:	3301      	adds	r3, #1
 800912a:	9304      	str	r3, [sp, #16]
 800912c:	2331      	movs	r3, #49	@ 0x31
 800912e:	f88a 3000 	strb.w	r3, [sl]
 8009132:	e5b9      	b.n	8008ca8 <_dtoa_r+0x698>
 8009134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009136:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009194 <_dtoa_r+0xb84>
 800913a:	b11b      	cbz	r3, 8009144 <_dtoa_r+0xb34>
 800913c:	f10a 0308 	add.w	r3, sl, #8
 8009140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009142:	6013      	str	r3, [r2, #0]
 8009144:	4650      	mov	r0, sl
 8009146:	b019      	add	sp, #100	@ 0x64
 8009148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914e:	2b01      	cmp	r3, #1
 8009150:	f77f ae37 	ble.w	8008dc2 <_dtoa_r+0x7b2>
 8009154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009156:	930a      	str	r3, [sp, #40]	@ 0x28
 8009158:	2001      	movs	r0, #1
 800915a:	e655      	b.n	8008e08 <_dtoa_r+0x7f8>
 800915c:	9b00      	ldr	r3, [sp, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f77f aed6 	ble.w	8008f10 <_dtoa_r+0x900>
 8009164:	4656      	mov	r6, sl
 8009166:	4621      	mov	r1, r4
 8009168:	4648      	mov	r0, r9
 800916a:	f7ff f9c9 	bl	8008500 <quorem>
 800916e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009172:	f806 8b01 	strb.w	r8, [r6], #1
 8009176:	9b00      	ldr	r3, [sp, #0]
 8009178:	eba6 020a 	sub.w	r2, r6, sl
 800917c:	4293      	cmp	r3, r2
 800917e:	ddb3      	ble.n	80090e8 <_dtoa_r+0xad8>
 8009180:	4649      	mov	r1, r9
 8009182:	2300      	movs	r3, #0
 8009184:	220a      	movs	r2, #10
 8009186:	4658      	mov	r0, fp
 8009188:	f000 fcb4 	bl	8009af4 <__multadd>
 800918c:	4681      	mov	r9, r0
 800918e:	e7ea      	b.n	8009166 <_dtoa_r+0xb56>
 8009190:	0800b9b1 	.word	0x0800b9b1
 8009194:	0800b935 	.word	0x0800b935

08009198 <_free_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4605      	mov	r5, r0
 800919c:	2900      	cmp	r1, #0
 800919e:	d041      	beq.n	8009224 <_free_r+0x8c>
 80091a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a4:	1f0c      	subs	r4, r1, #4
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfb8      	it	lt
 80091aa:	18e4      	addlt	r4, r4, r3
 80091ac:	f000 fc34 	bl	8009a18 <__malloc_lock>
 80091b0:	4a1d      	ldr	r2, [pc, #116]	@ (8009228 <_free_r+0x90>)
 80091b2:	6813      	ldr	r3, [r2, #0]
 80091b4:	b933      	cbnz	r3, 80091c4 <_free_r+0x2c>
 80091b6:	6063      	str	r3, [r4, #4]
 80091b8:	6014      	str	r4, [r2, #0]
 80091ba:	4628      	mov	r0, r5
 80091bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091c0:	f000 bc30 	b.w	8009a24 <__malloc_unlock>
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	d908      	bls.n	80091da <_free_r+0x42>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	1821      	adds	r1, r4, r0
 80091cc:	428b      	cmp	r3, r1
 80091ce:	bf01      	itttt	eq
 80091d0:	6819      	ldreq	r1, [r3, #0]
 80091d2:	685b      	ldreq	r3, [r3, #4]
 80091d4:	1809      	addeq	r1, r1, r0
 80091d6:	6021      	streq	r1, [r4, #0]
 80091d8:	e7ed      	b.n	80091b6 <_free_r+0x1e>
 80091da:	461a      	mov	r2, r3
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	b10b      	cbz	r3, 80091e4 <_free_r+0x4c>
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	d9fa      	bls.n	80091da <_free_r+0x42>
 80091e4:	6811      	ldr	r1, [r2, #0]
 80091e6:	1850      	adds	r0, r2, r1
 80091e8:	42a0      	cmp	r0, r4
 80091ea:	d10b      	bne.n	8009204 <_free_r+0x6c>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	4401      	add	r1, r0
 80091f0:	1850      	adds	r0, r2, r1
 80091f2:	4283      	cmp	r3, r0
 80091f4:	6011      	str	r1, [r2, #0]
 80091f6:	d1e0      	bne.n	80091ba <_free_r+0x22>
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	6053      	str	r3, [r2, #4]
 80091fe:	4408      	add	r0, r1
 8009200:	6010      	str	r0, [r2, #0]
 8009202:	e7da      	b.n	80091ba <_free_r+0x22>
 8009204:	d902      	bls.n	800920c <_free_r+0x74>
 8009206:	230c      	movs	r3, #12
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	e7d6      	b.n	80091ba <_free_r+0x22>
 800920c:	6820      	ldr	r0, [r4, #0]
 800920e:	1821      	adds	r1, r4, r0
 8009210:	428b      	cmp	r3, r1
 8009212:	bf04      	itt	eq
 8009214:	6819      	ldreq	r1, [r3, #0]
 8009216:	685b      	ldreq	r3, [r3, #4]
 8009218:	6063      	str	r3, [r4, #4]
 800921a:	bf04      	itt	eq
 800921c:	1809      	addeq	r1, r1, r0
 800921e:	6021      	streq	r1, [r4, #0]
 8009220:	6054      	str	r4, [r2, #4]
 8009222:	e7ca      	b.n	80091ba <_free_r+0x22>
 8009224:	bd38      	pop	{r3, r4, r5, pc}
 8009226:	bf00      	nop
 8009228:	20000fb0 	.word	0x20000fb0

0800922c <rshift>:
 800922c:	6903      	ldr	r3, [r0, #16]
 800922e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800923a:	f100 0414 	add.w	r4, r0, #20
 800923e:	dd45      	ble.n	80092cc <rshift+0xa0>
 8009240:	f011 011f 	ands.w	r1, r1, #31
 8009244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800924c:	d10c      	bne.n	8009268 <rshift+0x3c>
 800924e:	f100 0710 	add.w	r7, r0, #16
 8009252:	4629      	mov	r1, r5
 8009254:	42b1      	cmp	r1, r6
 8009256:	d334      	bcc.n	80092c2 <rshift+0x96>
 8009258:	1a9b      	subs	r3, r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	1eea      	subs	r2, r5, #3
 800925e:	4296      	cmp	r6, r2
 8009260:	bf38      	it	cc
 8009262:	2300      	movcc	r3, #0
 8009264:	4423      	add	r3, r4
 8009266:	e015      	b.n	8009294 <rshift+0x68>
 8009268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800926c:	f1c1 0820 	rsb	r8, r1, #32
 8009270:	40cf      	lsrs	r7, r1
 8009272:	f105 0e04 	add.w	lr, r5, #4
 8009276:	46a1      	mov	r9, r4
 8009278:	4576      	cmp	r6, lr
 800927a:	46f4      	mov	ip, lr
 800927c:	d815      	bhi.n	80092aa <rshift+0x7e>
 800927e:	1a9a      	subs	r2, r3, r2
 8009280:	0092      	lsls	r2, r2, #2
 8009282:	3a04      	subs	r2, #4
 8009284:	3501      	adds	r5, #1
 8009286:	42ae      	cmp	r6, r5
 8009288:	bf38      	it	cc
 800928a:	2200      	movcc	r2, #0
 800928c:	18a3      	adds	r3, r4, r2
 800928e:	50a7      	str	r7, [r4, r2]
 8009290:	b107      	cbz	r7, 8009294 <rshift+0x68>
 8009292:	3304      	adds	r3, #4
 8009294:	1b1a      	subs	r2, r3, r4
 8009296:	42a3      	cmp	r3, r4
 8009298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800929c:	bf08      	it	eq
 800929e:	2300      	moveq	r3, #0
 80092a0:	6102      	str	r2, [r0, #16]
 80092a2:	bf08      	it	eq
 80092a4:	6143      	streq	r3, [r0, #20]
 80092a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092aa:	f8dc c000 	ldr.w	ip, [ip]
 80092ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80092b2:	ea4c 0707 	orr.w	r7, ip, r7
 80092b6:	f849 7b04 	str.w	r7, [r9], #4
 80092ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092be:	40cf      	lsrs	r7, r1
 80092c0:	e7da      	b.n	8009278 <rshift+0x4c>
 80092c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ca:	e7c3      	b.n	8009254 <rshift+0x28>
 80092cc:	4623      	mov	r3, r4
 80092ce:	e7e1      	b.n	8009294 <rshift+0x68>

080092d0 <__hexdig_fun>:
 80092d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80092d4:	2b09      	cmp	r3, #9
 80092d6:	d802      	bhi.n	80092de <__hexdig_fun+0xe>
 80092d8:	3820      	subs	r0, #32
 80092da:	b2c0      	uxtb	r0, r0
 80092dc:	4770      	bx	lr
 80092de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d801      	bhi.n	80092ea <__hexdig_fun+0x1a>
 80092e6:	3847      	subs	r0, #71	@ 0x47
 80092e8:	e7f7      	b.n	80092da <__hexdig_fun+0xa>
 80092ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d801      	bhi.n	80092f6 <__hexdig_fun+0x26>
 80092f2:	3827      	subs	r0, #39	@ 0x27
 80092f4:	e7f1      	b.n	80092da <__hexdig_fun+0xa>
 80092f6:	2000      	movs	r0, #0
 80092f8:	4770      	bx	lr
	...

080092fc <__gethex>:
 80092fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	b085      	sub	sp, #20
 8009302:	468a      	mov	sl, r1
 8009304:	9302      	str	r3, [sp, #8]
 8009306:	680b      	ldr	r3, [r1, #0]
 8009308:	9001      	str	r0, [sp, #4]
 800930a:	4690      	mov	r8, r2
 800930c:	1c9c      	adds	r4, r3, #2
 800930e:	46a1      	mov	r9, r4
 8009310:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009314:	2830      	cmp	r0, #48	@ 0x30
 8009316:	d0fa      	beq.n	800930e <__gethex+0x12>
 8009318:	eba9 0303 	sub.w	r3, r9, r3
 800931c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009320:	f7ff ffd6 	bl	80092d0 <__hexdig_fun>
 8009324:	4605      	mov	r5, r0
 8009326:	2800      	cmp	r0, #0
 8009328:	d168      	bne.n	80093fc <__gethex+0x100>
 800932a:	49a0      	ldr	r1, [pc, #640]	@ (80095ac <__gethex+0x2b0>)
 800932c:	2201      	movs	r2, #1
 800932e:	4648      	mov	r0, r9
 8009330:	f7ff f843 	bl	80083ba <strncmp>
 8009334:	4607      	mov	r7, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d167      	bne.n	800940a <__gethex+0x10e>
 800933a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800933e:	4626      	mov	r6, r4
 8009340:	f7ff ffc6 	bl	80092d0 <__hexdig_fun>
 8009344:	2800      	cmp	r0, #0
 8009346:	d062      	beq.n	800940e <__gethex+0x112>
 8009348:	4623      	mov	r3, r4
 800934a:	7818      	ldrb	r0, [r3, #0]
 800934c:	2830      	cmp	r0, #48	@ 0x30
 800934e:	4699      	mov	r9, r3
 8009350:	f103 0301 	add.w	r3, r3, #1
 8009354:	d0f9      	beq.n	800934a <__gethex+0x4e>
 8009356:	f7ff ffbb 	bl	80092d0 <__hexdig_fun>
 800935a:	fab0 f580 	clz	r5, r0
 800935e:	096d      	lsrs	r5, r5, #5
 8009360:	f04f 0b01 	mov.w	fp, #1
 8009364:	464a      	mov	r2, r9
 8009366:	4616      	mov	r6, r2
 8009368:	3201      	adds	r2, #1
 800936a:	7830      	ldrb	r0, [r6, #0]
 800936c:	f7ff ffb0 	bl	80092d0 <__hexdig_fun>
 8009370:	2800      	cmp	r0, #0
 8009372:	d1f8      	bne.n	8009366 <__gethex+0x6a>
 8009374:	498d      	ldr	r1, [pc, #564]	@ (80095ac <__gethex+0x2b0>)
 8009376:	2201      	movs	r2, #1
 8009378:	4630      	mov	r0, r6
 800937a:	f7ff f81e 	bl	80083ba <strncmp>
 800937e:	2800      	cmp	r0, #0
 8009380:	d13f      	bne.n	8009402 <__gethex+0x106>
 8009382:	b944      	cbnz	r4, 8009396 <__gethex+0x9a>
 8009384:	1c74      	adds	r4, r6, #1
 8009386:	4622      	mov	r2, r4
 8009388:	4616      	mov	r6, r2
 800938a:	3201      	adds	r2, #1
 800938c:	7830      	ldrb	r0, [r6, #0]
 800938e:	f7ff ff9f 	bl	80092d0 <__hexdig_fun>
 8009392:	2800      	cmp	r0, #0
 8009394:	d1f8      	bne.n	8009388 <__gethex+0x8c>
 8009396:	1ba4      	subs	r4, r4, r6
 8009398:	00a7      	lsls	r7, r4, #2
 800939a:	7833      	ldrb	r3, [r6, #0]
 800939c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80093a0:	2b50      	cmp	r3, #80	@ 0x50
 80093a2:	d13e      	bne.n	8009422 <__gethex+0x126>
 80093a4:	7873      	ldrb	r3, [r6, #1]
 80093a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80093a8:	d033      	beq.n	8009412 <__gethex+0x116>
 80093aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80093ac:	d034      	beq.n	8009418 <__gethex+0x11c>
 80093ae:	1c71      	adds	r1, r6, #1
 80093b0:	2400      	movs	r4, #0
 80093b2:	7808      	ldrb	r0, [r1, #0]
 80093b4:	f7ff ff8c 	bl	80092d0 <__hexdig_fun>
 80093b8:	1e43      	subs	r3, r0, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b18      	cmp	r3, #24
 80093be:	d830      	bhi.n	8009422 <__gethex+0x126>
 80093c0:	f1a0 0210 	sub.w	r2, r0, #16
 80093c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093c8:	f7ff ff82 	bl	80092d0 <__hexdig_fun>
 80093cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80093d0:	fa5f fc8c 	uxtb.w	ip, ip
 80093d4:	f1bc 0f18 	cmp.w	ip, #24
 80093d8:	f04f 030a 	mov.w	r3, #10
 80093dc:	d91e      	bls.n	800941c <__gethex+0x120>
 80093de:	b104      	cbz	r4, 80093e2 <__gethex+0xe6>
 80093e0:	4252      	negs	r2, r2
 80093e2:	4417      	add	r7, r2
 80093e4:	f8ca 1000 	str.w	r1, [sl]
 80093e8:	b1ed      	cbz	r5, 8009426 <__gethex+0x12a>
 80093ea:	f1bb 0f00 	cmp.w	fp, #0
 80093ee:	bf0c      	ite	eq
 80093f0:	2506      	moveq	r5, #6
 80093f2:	2500      	movne	r5, #0
 80093f4:	4628      	mov	r0, r5
 80093f6:	b005      	add	sp, #20
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	2500      	movs	r5, #0
 80093fe:	462c      	mov	r4, r5
 8009400:	e7b0      	b.n	8009364 <__gethex+0x68>
 8009402:	2c00      	cmp	r4, #0
 8009404:	d1c7      	bne.n	8009396 <__gethex+0x9a>
 8009406:	4627      	mov	r7, r4
 8009408:	e7c7      	b.n	800939a <__gethex+0x9e>
 800940a:	464e      	mov	r6, r9
 800940c:	462f      	mov	r7, r5
 800940e:	2501      	movs	r5, #1
 8009410:	e7c3      	b.n	800939a <__gethex+0x9e>
 8009412:	2400      	movs	r4, #0
 8009414:	1cb1      	adds	r1, r6, #2
 8009416:	e7cc      	b.n	80093b2 <__gethex+0xb6>
 8009418:	2401      	movs	r4, #1
 800941a:	e7fb      	b.n	8009414 <__gethex+0x118>
 800941c:	fb03 0002 	mla	r0, r3, r2, r0
 8009420:	e7ce      	b.n	80093c0 <__gethex+0xc4>
 8009422:	4631      	mov	r1, r6
 8009424:	e7de      	b.n	80093e4 <__gethex+0xe8>
 8009426:	eba6 0309 	sub.w	r3, r6, r9
 800942a:	3b01      	subs	r3, #1
 800942c:	4629      	mov	r1, r5
 800942e:	2b07      	cmp	r3, #7
 8009430:	dc0a      	bgt.n	8009448 <__gethex+0x14c>
 8009432:	9801      	ldr	r0, [sp, #4]
 8009434:	f000 fafc 	bl	8009a30 <_Balloc>
 8009438:	4604      	mov	r4, r0
 800943a:	b940      	cbnz	r0, 800944e <__gethex+0x152>
 800943c:	4b5c      	ldr	r3, [pc, #368]	@ (80095b0 <__gethex+0x2b4>)
 800943e:	4602      	mov	r2, r0
 8009440:	21e4      	movs	r1, #228	@ 0xe4
 8009442:	485c      	ldr	r0, [pc, #368]	@ (80095b4 <__gethex+0x2b8>)
 8009444:	f001 f9e0 	bl	800a808 <__assert_func>
 8009448:	3101      	adds	r1, #1
 800944a:	105b      	asrs	r3, r3, #1
 800944c:	e7ef      	b.n	800942e <__gethex+0x132>
 800944e:	f100 0a14 	add.w	sl, r0, #20
 8009452:	2300      	movs	r3, #0
 8009454:	4655      	mov	r5, sl
 8009456:	469b      	mov	fp, r3
 8009458:	45b1      	cmp	r9, r6
 800945a:	d337      	bcc.n	80094cc <__gethex+0x1d0>
 800945c:	f845 bb04 	str.w	fp, [r5], #4
 8009460:	eba5 050a 	sub.w	r5, r5, sl
 8009464:	10ad      	asrs	r5, r5, #2
 8009466:	6125      	str	r5, [r4, #16]
 8009468:	4658      	mov	r0, fp
 800946a:	f000 fbd3 	bl	8009c14 <__hi0bits>
 800946e:	016d      	lsls	r5, r5, #5
 8009470:	f8d8 6000 	ldr.w	r6, [r8]
 8009474:	1a2d      	subs	r5, r5, r0
 8009476:	42b5      	cmp	r5, r6
 8009478:	dd54      	ble.n	8009524 <__gethex+0x228>
 800947a:	1bad      	subs	r5, r5, r6
 800947c:	4629      	mov	r1, r5
 800947e:	4620      	mov	r0, r4
 8009480:	f000 ff67 	bl	800a352 <__any_on>
 8009484:	4681      	mov	r9, r0
 8009486:	b178      	cbz	r0, 80094a8 <__gethex+0x1ac>
 8009488:	1e6b      	subs	r3, r5, #1
 800948a:	1159      	asrs	r1, r3, #5
 800948c:	f003 021f 	and.w	r2, r3, #31
 8009490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009494:	f04f 0901 	mov.w	r9, #1
 8009498:	fa09 f202 	lsl.w	r2, r9, r2
 800949c:	420a      	tst	r2, r1
 800949e:	d003      	beq.n	80094a8 <__gethex+0x1ac>
 80094a0:	454b      	cmp	r3, r9
 80094a2:	dc36      	bgt.n	8009512 <__gethex+0x216>
 80094a4:	f04f 0902 	mov.w	r9, #2
 80094a8:	4629      	mov	r1, r5
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff febe 	bl	800922c <rshift>
 80094b0:	442f      	add	r7, r5
 80094b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094b6:	42bb      	cmp	r3, r7
 80094b8:	da42      	bge.n	8009540 <__gethex+0x244>
 80094ba:	9801      	ldr	r0, [sp, #4]
 80094bc:	4621      	mov	r1, r4
 80094be:	f000 faf7 	bl	8009ab0 <_Bfree>
 80094c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094c4:	2300      	movs	r3, #0
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	25a3      	movs	r5, #163	@ 0xa3
 80094ca:	e793      	b.n	80093f4 <__gethex+0xf8>
 80094cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80094d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80094d2:	d012      	beq.n	80094fa <__gethex+0x1fe>
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d104      	bne.n	80094e2 <__gethex+0x1e6>
 80094d8:	f845 bb04 	str.w	fp, [r5], #4
 80094dc:	f04f 0b00 	mov.w	fp, #0
 80094e0:	465b      	mov	r3, fp
 80094e2:	7830      	ldrb	r0, [r6, #0]
 80094e4:	9303      	str	r3, [sp, #12]
 80094e6:	f7ff fef3 	bl	80092d0 <__hexdig_fun>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	f000 000f 	and.w	r0, r0, #15
 80094f0:	4098      	lsls	r0, r3
 80094f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80094f6:	3304      	adds	r3, #4
 80094f8:	e7ae      	b.n	8009458 <__gethex+0x15c>
 80094fa:	45b1      	cmp	r9, r6
 80094fc:	d8ea      	bhi.n	80094d4 <__gethex+0x1d8>
 80094fe:	492b      	ldr	r1, [pc, #172]	@ (80095ac <__gethex+0x2b0>)
 8009500:	9303      	str	r3, [sp, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	4630      	mov	r0, r6
 8009506:	f7fe ff58 	bl	80083ba <strncmp>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	2800      	cmp	r0, #0
 800950e:	d1e1      	bne.n	80094d4 <__gethex+0x1d8>
 8009510:	e7a2      	b.n	8009458 <__gethex+0x15c>
 8009512:	1ea9      	subs	r1, r5, #2
 8009514:	4620      	mov	r0, r4
 8009516:	f000 ff1c 	bl	800a352 <__any_on>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0c2      	beq.n	80094a4 <__gethex+0x1a8>
 800951e:	f04f 0903 	mov.w	r9, #3
 8009522:	e7c1      	b.n	80094a8 <__gethex+0x1ac>
 8009524:	da09      	bge.n	800953a <__gethex+0x23e>
 8009526:	1b75      	subs	r5, r6, r5
 8009528:	4621      	mov	r1, r4
 800952a:	9801      	ldr	r0, [sp, #4]
 800952c:	462a      	mov	r2, r5
 800952e:	f000 fcd7 	bl	8009ee0 <__lshift>
 8009532:	1b7f      	subs	r7, r7, r5
 8009534:	4604      	mov	r4, r0
 8009536:	f100 0a14 	add.w	sl, r0, #20
 800953a:	f04f 0900 	mov.w	r9, #0
 800953e:	e7b8      	b.n	80094b2 <__gethex+0x1b6>
 8009540:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009544:	42bd      	cmp	r5, r7
 8009546:	dd6f      	ble.n	8009628 <__gethex+0x32c>
 8009548:	1bed      	subs	r5, r5, r7
 800954a:	42ae      	cmp	r6, r5
 800954c:	dc34      	bgt.n	80095b8 <__gethex+0x2bc>
 800954e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d022      	beq.n	800959c <__gethex+0x2a0>
 8009556:	2b03      	cmp	r3, #3
 8009558:	d024      	beq.n	80095a4 <__gethex+0x2a8>
 800955a:	2b01      	cmp	r3, #1
 800955c:	d115      	bne.n	800958a <__gethex+0x28e>
 800955e:	42ae      	cmp	r6, r5
 8009560:	d113      	bne.n	800958a <__gethex+0x28e>
 8009562:	2e01      	cmp	r6, #1
 8009564:	d10b      	bne.n	800957e <__gethex+0x282>
 8009566:	9a02      	ldr	r2, [sp, #8]
 8009568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800956c:	6013      	str	r3, [r2, #0]
 800956e:	2301      	movs	r3, #1
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	f8ca 3000 	str.w	r3, [sl]
 8009576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009578:	2562      	movs	r5, #98	@ 0x62
 800957a:	601c      	str	r4, [r3, #0]
 800957c:	e73a      	b.n	80093f4 <__gethex+0xf8>
 800957e:	1e71      	subs	r1, r6, #1
 8009580:	4620      	mov	r0, r4
 8009582:	f000 fee6 	bl	800a352 <__any_on>
 8009586:	2800      	cmp	r0, #0
 8009588:	d1ed      	bne.n	8009566 <__gethex+0x26a>
 800958a:	9801      	ldr	r0, [sp, #4]
 800958c:	4621      	mov	r1, r4
 800958e:	f000 fa8f 	bl	8009ab0 <_Bfree>
 8009592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009594:	2300      	movs	r3, #0
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	2550      	movs	r5, #80	@ 0x50
 800959a:	e72b      	b.n	80093f4 <__gethex+0xf8>
 800959c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1f3      	bne.n	800958a <__gethex+0x28e>
 80095a2:	e7e0      	b.n	8009566 <__gethex+0x26a>
 80095a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1dd      	bne.n	8009566 <__gethex+0x26a>
 80095aa:	e7ee      	b.n	800958a <__gethex+0x28e>
 80095ac:	0800b7a0 	.word	0x0800b7a0
 80095b0:	0800b9b1 	.word	0x0800b9b1
 80095b4:	0800b9c2 	.word	0x0800b9c2
 80095b8:	1e6f      	subs	r7, r5, #1
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	d130      	bne.n	8009622 <__gethex+0x326>
 80095c0:	b127      	cbz	r7, 80095cc <__gethex+0x2d0>
 80095c2:	4639      	mov	r1, r7
 80095c4:	4620      	mov	r0, r4
 80095c6:	f000 fec4 	bl	800a352 <__any_on>
 80095ca:	4681      	mov	r9, r0
 80095cc:	117a      	asrs	r2, r7, #5
 80095ce:	2301      	movs	r3, #1
 80095d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095d4:	f007 071f 	and.w	r7, r7, #31
 80095d8:	40bb      	lsls	r3, r7
 80095da:	4213      	tst	r3, r2
 80095dc:	4629      	mov	r1, r5
 80095de:	4620      	mov	r0, r4
 80095e0:	bf18      	it	ne
 80095e2:	f049 0902 	orrne.w	r9, r9, #2
 80095e6:	f7ff fe21 	bl	800922c <rshift>
 80095ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80095ee:	1b76      	subs	r6, r6, r5
 80095f0:	2502      	movs	r5, #2
 80095f2:	f1b9 0f00 	cmp.w	r9, #0
 80095f6:	d047      	beq.n	8009688 <__gethex+0x38c>
 80095f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d015      	beq.n	800962c <__gethex+0x330>
 8009600:	2b03      	cmp	r3, #3
 8009602:	d017      	beq.n	8009634 <__gethex+0x338>
 8009604:	2b01      	cmp	r3, #1
 8009606:	d109      	bne.n	800961c <__gethex+0x320>
 8009608:	f019 0f02 	tst.w	r9, #2
 800960c:	d006      	beq.n	800961c <__gethex+0x320>
 800960e:	f8da 3000 	ldr.w	r3, [sl]
 8009612:	ea49 0903 	orr.w	r9, r9, r3
 8009616:	f019 0f01 	tst.w	r9, #1
 800961a:	d10e      	bne.n	800963a <__gethex+0x33e>
 800961c:	f045 0510 	orr.w	r5, r5, #16
 8009620:	e032      	b.n	8009688 <__gethex+0x38c>
 8009622:	f04f 0901 	mov.w	r9, #1
 8009626:	e7d1      	b.n	80095cc <__gethex+0x2d0>
 8009628:	2501      	movs	r5, #1
 800962a:	e7e2      	b.n	80095f2 <__gethex+0x2f6>
 800962c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962e:	f1c3 0301 	rsb	r3, r3, #1
 8009632:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f0      	beq.n	800961c <__gethex+0x320>
 800963a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800963e:	f104 0314 	add.w	r3, r4, #20
 8009642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800964a:	f04f 0c00 	mov.w	ip, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f853 2b04 	ldr.w	r2, [r3], #4
 8009654:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009658:	d01b      	beq.n	8009692 <__gethex+0x396>
 800965a:	3201      	adds	r2, #1
 800965c:	6002      	str	r2, [r0, #0]
 800965e:	2d02      	cmp	r5, #2
 8009660:	f104 0314 	add.w	r3, r4, #20
 8009664:	d13c      	bne.n	80096e0 <__gethex+0x3e4>
 8009666:	f8d8 2000 	ldr.w	r2, [r8]
 800966a:	3a01      	subs	r2, #1
 800966c:	42b2      	cmp	r2, r6
 800966e:	d109      	bne.n	8009684 <__gethex+0x388>
 8009670:	1171      	asrs	r1, r6, #5
 8009672:	2201      	movs	r2, #1
 8009674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009678:	f006 061f 	and.w	r6, r6, #31
 800967c:	fa02 f606 	lsl.w	r6, r2, r6
 8009680:	421e      	tst	r6, r3
 8009682:	d13a      	bne.n	80096fa <__gethex+0x3fe>
 8009684:	f045 0520 	orr.w	r5, r5, #32
 8009688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800968a:	601c      	str	r4, [r3, #0]
 800968c:	9b02      	ldr	r3, [sp, #8]
 800968e:	601f      	str	r7, [r3, #0]
 8009690:	e6b0      	b.n	80093f4 <__gethex+0xf8>
 8009692:	4299      	cmp	r1, r3
 8009694:	f843 cc04 	str.w	ip, [r3, #-4]
 8009698:	d8d9      	bhi.n	800964e <__gethex+0x352>
 800969a:	68a3      	ldr	r3, [r4, #8]
 800969c:	459b      	cmp	fp, r3
 800969e:	db17      	blt.n	80096d0 <__gethex+0x3d4>
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	9801      	ldr	r0, [sp, #4]
 80096a4:	3101      	adds	r1, #1
 80096a6:	f000 f9c3 	bl	8009a30 <_Balloc>
 80096aa:	4681      	mov	r9, r0
 80096ac:	b918      	cbnz	r0, 80096b6 <__gethex+0x3ba>
 80096ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <__gethex+0x41c>)
 80096b0:	4602      	mov	r2, r0
 80096b2:	2184      	movs	r1, #132	@ 0x84
 80096b4:	e6c5      	b.n	8009442 <__gethex+0x146>
 80096b6:	6922      	ldr	r2, [r4, #16]
 80096b8:	3202      	adds	r2, #2
 80096ba:	f104 010c 	add.w	r1, r4, #12
 80096be:	0092      	lsls	r2, r2, #2
 80096c0:	300c      	adds	r0, #12
 80096c2:	f7fe ff04 	bl	80084ce <memcpy>
 80096c6:	4621      	mov	r1, r4
 80096c8:	9801      	ldr	r0, [sp, #4]
 80096ca:	f000 f9f1 	bl	8009ab0 <_Bfree>
 80096ce:	464c      	mov	r4, r9
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096d8:	6122      	str	r2, [r4, #16]
 80096da:	2201      	movs	r2, #1
 80096dc:	615a      	str	r2, [r3, #20]
 80096de:	e7be      	b.n	800965e <__gethex+0x362>
 80096e0:	6922      	ldr	r2, [r4, #16]
 80096e2:	455a      	cmp	r2, fp
 80096e4:	dd0b      	ble.n	80096fe <__gethex+0x402>
 80096e6:	2101      	movs	r1, #1
 80096e8:	4620      	mov	r0, r4
 80096ea:	f7ff fd9f 	bl	800922c <rshift>
 80096ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80096f2:	3701      	adds	r7, #1
 80096f4:	42bb      	cmp	r3, r7
 80096f6:	f6ff aee0 	blt.w	80094ba <__gethex+0x1be>
 80096fa:	2501      	movs	r5, #1
 80096fc:	e7c2      	b.n	8009684 <__gethex+0x388>
 80096fe:	f016 061f 	ands.w	r6, r6, #31
 8009702:	d0fa      	beq.n	80096fa <__gethex+0x3fe>
 8009704:	4453      	add	r3, sl
 8009706:	f1c6 0620 	rsb	r6, r6, #32
 800970a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800970e:	f000 fa81 	bl	8009c14 <__hi0bits>
 8009712:	42b0      	cmp	r0, r6
 8009714:	dbe7      	blt.n	80096e6 <__gethex+0x3ea>
 8009716:	e7f0      	b.n	80096fa <__gethex+0x3fe>
 8009718:	0800b9b1 	.word	0x0800b9b1

0800971c <L_shift>:
 800971c:	f1c2 0208 	rsb	r2, r2, #8
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	b570      	push	{r4, r5, r6, lr}
 8009724:	f1c2 0620 	rsb	r6, r2, #32
 8009728:	6843      	ldr	r3, [r0, #4]
 800972a:	6804      	ldr	r4, [r0, #0]
 800972c:	fa03 f506 	lsl.w	r5, r3, r6
 8009730:	432c      	orrs	r4, r5
 8009732:	40d3      	lsrs	r3, r2
 8009734:	6004      	str	r4, [r0, #0]
 8009736:	f840 3f04 	str.w	r3, [r0, #4]!
 800973a:	4288      	cmp	r0, r1
 800973c:	d3f4      	bcc.n	8009728 <L_shift+0xc>
 800973e:	bd70      	pop	{r4, r5, r6, pc}

08009740 <__match>:
 8009740:	b530      	push	{r4, r5, lr}
 8009742:	6803      	ldr	r3, [r0, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800974a:	b914      	cbnz	r4, 8009752 <__match+0x12>
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	2001      	movs	r0, #1
 8009750:	bd30      	pop	{r4, r5, pc}
 8009752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009756:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800975a:	2d19      	cmp	r5, #25
 800975c:	bf98      	it	ls
 800975e:	3220      	addls	r2, #32
 8009760:	42a2      	cmp	r2, r4
 8009762:	d0f0      	beq.n	8009746 <__match+0x6>
 8009764:	2000      	movs	r0, #0
 8009766:	e7f3      	b.n	8009750 <__match+0x10>

08009768 <__hexnan>:
 8009768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	680b      	ldr	r3, [r1, #0]
 800976e:	6801      	ldr	r1, [r0, #0]
 8009770:	115e      	asrs	r6, r3, #5
 8009772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009776:	f013 031f 	ands.w	r3, r3, #31
 800977a:	b087      	sub	sp, #28
 800977c:	bf18      	it	ne
 800977e:	3604      	addne	r6, #4
 8009780:	2500      	movs	r5, #0
 8009782:	1f37      	subs	r7, r6, #4
 8009784:	4682      	mov	sl, r0
 8009786:	4690      	mov	r8, r2
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	f846 5c04 	str.w	r5, [r6, #-4]
 800978e:	46b9      	mov	r9, r7
 8009790:	463c      	mov	r4, r7
 8009792:	9502      	str	r5, [sp, #8]
 8009794:	46ab      	mov	fp, r5
 8009796:	784a      	ldrb	r2, [r1, #1]
 8009798:	1c4b      	adds	r3, r1, #1
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	b342      	cbz	r2, 80097f0 <__hexnan+0x88>
 800979e:	4610      	mov	r0, r2
 80097a0:	9105      	str	r1, [sp, #20]
 80097a2:	9204      	str	r2, [sp, #16]
 80097a4:	f7ff fd94 	bl	80092d0 <__hexdig_fun>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d151      	bne.n	8009850 <__hexnan+0xe8>
 80097ac:	9a04      	ldr	r2, [sp, #16]
 80097ae:	9905      	ldr	r1, [sp, #20]
 80097b0:	2a20      	cmp	r2, #32
 80097b2:	d818      	bhi.n	80097e6 <__hexnan+0x7e>
 80097b4:	9b02      	ldr	r3, [sp, #8]
 80097b6:	459b      	cmp	fp, r3
 80097b8:	dd13      	ble.n	80097e2 <__hexnan+0x7a>
 80097ba:	454c      	cmp	r4, r9
 80097bc:	d206      	bcs.n	80097cc <__hexnan+0x64>
 80097be:	2d07      	cmp	r5, #7
 80097c0:	dc04      	bgt.n	80097cc <__hexnan+0x64>
 80097c2:	462a      	mov	r2, r5
 80097c4:	4649      	mov	r1, r9
 80097c6:	4620      	mov	r0, r4
 80097c8:	f7ff ffa8 	bl	800971c <L_shift>
 80097cc:	4544      	cmp	r4, r8
 80097ce:	d952      	bls.n	8009876 <__hexnan+0x10e>
 80097d0:	2300      	movs	r3, #0
 80097d2:	f1a4 0904 	sub.w	r9, r4, #4
 80097d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80097da:	f8cd b008 	str.w	fp, [sp, #8]
 80097de:	464c      	mov	r4, r9
 80097e0:	461d      	mov	r5, r3
 80097e2:	9903      	ldr	r1, [sp, #12]
 80097e4:	e7d7      	b.n	8009796 <__hexnan+0x2e>
 80097e6:	2a29      	cmp	r2, #41	@ 0x29
 80097e8:	d157      	bne.n	800989a <__hexnan+0x132>
 80097ea:	3102      	adds	r1, #2
 80097ec:	f8ca 1000 	str.w	r1, [sl]
 80097f0:	f1bb 0f00 	cmp.w	fp, #0
 80097f4:	d051      	beq.n	800989a <__hexnan+0x132>
 80097f6:	454c      	cmp	r4, r9
 80097f8:	d206      	bcs.n	8009808 <__hexnan+0xa0>
 80097fa:	2d07      	cmp	r5, #7
 80097fc:	dc04      	bgt.n	8009808 <__hexnan+0xa0>
 80097fe:	462a      	mov	r2, r5
 8009800:	4649      	mov	r1, r9
 8009802:	4620      	mov	r0, r4
 8009804:	f7ff ff8a 	bl	800971c <L_shift>
 8009808:	4544      	cmp	r4, r8
 800980a:	d936      	bls.n	800987a <__hexnan+0x112>
 800980c:	f1a8 0204 	sub.w	r2, r8, #4
 8009810:	4623      	mov	r3, r4
 8009812:	f853 1b04 	ldr.w	r1, [r3], #4
 8009816:	f842 1f04 	str.w	r1, [r2, #4]!
 800981a:	429f      	cmp	r7, r3
 800981c:	d2f9      	bcs.n	8009812 <__hexnan+0xaa>
 800981e:	1b3b      	subs	r3, r7, r4
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	3304      	adds	r3, #4
 8009826:	3401      	adds	r4, #1
 8009828:	3e03      	subs	r6, #3
 800982a:	42b4      	cmp	r4, r6
 800982c:	bf88      	it	hi
 800982e:	2304      	movhi	r3, #4
 8009830:	4443      	add	r3, r8
 8009832:	2200      	movs	r2, #0
 8009834:	f843 2b04 	str.w	r2, [r3], #4
 8009838:	429f      	cmp	r7, r3
 800983a:	d2fb      	bcs.n	8009834 <__hexnan+0xcc>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	b91b      	cbnz	r3, 8009848 <__hexnan+0xe0>
 8009840:	4547      	cmp	r7, r8
 8009842:	d128      	bne.n	8009896 <__hexnan+0x12e>
 8009844:	2301      	movs	r3, #1
 8009846:	603b      	str	r3, [r7, #0]
 8009848:	2005      	movs	r0, #5
 800984a:	b007      	add	sp, #28
 800984c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009850:	3501      	adds	r5, #1
 8009852:	2d08      	cmp	r5, #8
 8009854:	f10b 0b01 	add.w	fp, fp, #1
 8009858:	dd06      	ble.n	8009868 <__hexnan+0x100>
 800985a:	4544      	cmp	r4, r8
 800985c:	d9c1      	bls.n	80097e2 <__hexnan+0x7a>
 800985e:	2300      	movs	r3, #0
 8009860:	f844 3c04 	str.w	r3, [r4, #-4]
 8009864:	2501      	movs	r5, #1
 8009866:	3c04      	subs	r4, #4
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	f000 000f 	and.w	r0, r0, #15
 800986e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009872:	6020      	str	r0, [r4, #0]
 8009874:	e7b5      	b.n	80097e2 <__hexnan+0x7a>
 8009876:	2508      	movs	r5, #8
 8009878:	e7b3      	b.n	80097e2 <__hexnan+0x7a>
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0dd      	beq.n	800983c <__hexnan+0xd4>
 8009880:	f1c3 0320 	rsb	r3, r3, #32
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	40da      	lsrs	r2, r3
 800988a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800988e:	4013      	ands	r3, r2
 8009890:	f846 3c04 	str.w	r3, [r6, #-4]
 8009894:	e7d2      	b.n	800983c <__hexnan+0xd4>
 8009896:	3f04      	subs	r7, #4
 8009898:	e7d0      	b.n	800983c <__hexnan+0xd4>
 800989a:	2004      	movs	r0, #4
 800989c:	e7d5      	b.n	800984a <__hexnan+0xe2>
	...

080098a0 <malloc>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	@ (80098ac <malloc+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f000 b825 	b.w	80098f4 <_malloc_r>
 80098aa:	bf00      	nop
 80098ac:	20000234 	.word	0x20000234

080098b0 <sbrk_aligned>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	4e0f      	ldr	r6, [pc, #60]	@ (80098f0 <sbrk_aligned+0x40>)
 80098b4:	460c      	mov	r4, r1
 80098b6:	6831      	ldr	r1, [r6, #0]
 80098b8:	4605      	mov	r5, r0
 80098ba:	b911      	cbnz	r1, 80098c2 <sbrk_aligned+0x12>
 80098bc:	f000 ff94 	bl	800a7e8 <_sbrk_r>
 80098c0:	6030      	str	r0, [r6, #0]
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 ff8f 	bl	800a7e8 <_sbrk_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d103      	bne.n	80098d6 <sbrk_aligned+0x26>
 80098ce:	f04f 34ff 	mov.w	r4, #4294967295
 80098d2:	4620      	mov	r0, r4
 80098d4:	bd70      	pop	{r4, r5, r6, pc}
 80098d6:	1cc4      	adds	r4, r0, #3
 80098d8:	f024 0403 	bic.w	r4, r4, #3
 80098dc:	42a0      	cmp	r0, r4
 80098de:	d0f8      	beq.n	80098d2 <sbrk_aligned+0x22>
 80098e0:	1a21      	subs	r1, r4, r0
 80098e2:	4628      	mov	r0, r5
 80098e4:	f000 ff80 	bl	800a7e8 <_sbrk_r>
 80098e8:	3001      	adds	r0, #1
 80098ea:	d1f2      	bne.n	80098d2 <sbrk_aligned+0x22>
 80098ec:	e7ef      	b.n	80098ce <sbrk_aligned+0x1e>
 80098ee:	bf00      	nop
 80098f0:	20000fac 	.word	0x20000fac

080098f4 <_malloc_r>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	1ccd      	adds	r5, r1, #3
 80098fa:	f025 0503 	bic.w	r5, r5, #3
 80098fe:	3508      	adds	r5, #8
 8009900:	2d0c      	cmp	r5, #12
 8009902:	bf38      	it	cc
 8009904:	250c      	movcc	r5, #12
 8009906:	2d00      	cmp	r5, #0
 8009908:	4606      	mov	r6, r0
 800990a:	db01      	blt.n	8009910 <_malloc_r+0x1c>
 800990c:	42a9      	cmp	r1, r5
 800990e:	d904      	bls.n	800991a <_malloc_r+0x26>
 8009910:	230c      	movs	r3, #12
 8009912:	6033      	str	r3, [r6, #0]
 8009914:	2000      	movs	r0, #0
 8009916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099f0 <_malloc_r+0xfc>
 800991e:	f000 f87b 	bl	8009a18 <__malloc_lock>
 8009922:	f8d8 3000 	ldr.w	r3, [r8]
 8009926:	461c      	mov	r4, r3
 8009928:	bb44      	cbnz	r4, 800997c <_malloc_r+0x88>
 800992a:	4629      	mov	r1, r5
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff ffbf 	bl	80098b0 <sbrk_aligned>
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	4604      	mov	r4, r0
 8009936:	d158      	bne.n	80099ea <_malloc_r+0xf6>
 8009938:	f8d8 4000 	ldr.w	r4, [r8]
 800993c:	4627      	mov	r7, r4
 800993e:	2f00      	cmp	r7, #0
 8009940:	d143      	bne.n	80099ca <_malloc_r+0xd6>
 8009942:	2c00      	cmp	r4, #0
 8009944:	d04b      	beq.n	80099de <_malloc_r+0xea>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	4639      	mov	r1, r7
 800994a:	4630      	mov	r0, r6
 800994c:	eb04 0903 	add.w	r9, r4, r3
 8009950:	f000 ff4a 	bl	800a7e8 <_sbrk_r>
 8009954:	4581      	cmp	r9, r0
 8009956:	d142      	bne.n	80099de <_malloc_r+0xea>
 8009958:	6821      	ldr	r1, [r4, #0]
 800995a:	1a6d      	subs	r5, r5, r1
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f7ff ffa6 	bl	80098b0 <sbrk_aligned>
 8009964:	3001      	adds	r0, #1
 8009966:	d03a      	beq.n	80099de <_malloc_r+0xea>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	442b      	add	r3, r5
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	f8d8 3000 	ldr.w	r3, [r8]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	bb62      	cbnz	r2, 80099d0 <_malloc_r+0xdc>
 8009976:	f8c8 7000 	str.w	r7, [r8]
 800997a:	e00f      	b.n	800999c <_malloc_r+0xa8>
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	1b52      	subs	r2, r2, r5
 8009980:	d420      	bmi.n	80099c4 <_malloc_r+0xd0>
 8009982:	2a0b      	cmp	r2, #11
 8009984:	d917      	bls.n	80099b6 <_malloc_r+0xc2>
 8009986:	1961      	adds	r1, r4, r5
 8009988:	42a3      	cmp	r3, r4
 800998a:	6025      	str	r5, [r4, #0]
 800998c:	bf18      	it	ne
 800998e:	6059      	strne	r1, [r3, #4]
 8009990:	6863      	ldr	r3, [r4, #4]
 8009992:	bf08      	it	eq
 8009994:	f8c8 1000 	streq.w	r1, [r8]
 8009998:	5162      	str	r2, [r4, r5]
 800999a:	604b      	str	r3, [r1, #4]
 800999c:	4630      	mov	r0, r6
 800999e:	f000 f841 	bl	8009a24 <__malloc_unlock>
 80099a2:	f104 000b 	add.w	r0, r4, #11
 80099a6:	1d23      	adds	r3, r4, #4
 80099a8:	f020 0007 	bic.w	r0, r0, #7
 80099ac:	1ac2      	subs	r2, r0, r3
 80099ae:	bf1c      	itt	ne
 80099b0:	1a1b      	subne	r3, r3, r0
 80099b2:	50a3      	strne	r3, [r4, r2]
 80099b4:	e7af      	b.n	8009916 <_malloc_r+0x22>
 80099b6:	6862      	ldr	r2, [r4, #4]
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	bf0c      	ite	eq
 80099bc:	f8c8 2000 	streq.w	r2, [r8]
 80099c0:	605a      	strne	r2, [r3, #4]
 80099c2:	e7eb      	b.n	800999c <_malloc_r+0xa8>
 80099c4:	4623      	mov	r3, r4
 80099c6:	6864      	ldr	r4, [r4, #4]
 80099c8:	e7ae      	b.n	8009928 <_malloc_r+0x34>
 80099ca:	463c      	mov	r4, r7
 80099cc:	687f      	ldr	r7, [r7, #4]
 80099ce:	e7b6      	b.n	800993e <_malloc_r+0x4a>
 80099d0:	461a      	mov	r2, r3
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	d1fb      	bne.n	80099d0 <_malloc_r+0xdc>
 80099d8:	2300      	movs	r3, #0
 80099da:	6053      	str	r3, [r2, #4]
 80099dc:	e7de      	b.n	800999c <_malloc_r+0xa8>
 80099de:	230c      	movs	r3, #12
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 f81e 	bl	8009a24 <__malloc_unlock>
 80099e8:	e794      	b.n	8009914 <_malloc_r+0x20>
 80099ea:	6005      	str	r5, [r0, #0]
 80099ec:	e7d6      	b.n	800999c <_malloc_r+0xa8>
 80099ee:	bf00      	nop
 80099f0:	20000fb0 	.word	0x20000fb0

080099f4 <__ascii_mbtowc>:
 80099f4:	b082      	sub	sp, #8
 80099f6:	b901      	cbnz	r1, 80099fa <__ascii_mbtowc+0x6>
 80099f8:	a901      	add	r1, sp, #4
 80099fa:	b142      	cbz	r2, 8009a0e <__ascii_mbtowc+0x1a>
 80099fc:	b14b      	cbz	r3, 8009a12 <__ascii_mbtowc+0x1e>
 80099fe:	7813      	ldrb	r3, [r2, #0]
 8009a00:	600b      	str	r3, [r1, #0]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	1e10      	subs	r0, r2, #0
 8009a06:	bf18      	it	ne
 8009a08:	2001      	movne	r0, #1
 8009a0a:	b002      	add	sp, #8
 8009a0c:	4770      	bx	lr
 8009a0e:	4610      	mov	r0, r2
 8009a10:	e7fb      	b.n	8009a0a <__ascii_mbtowc+0x16>
 8009a12:	f06f 0001 	mvn.w	r0, #1
 8009a16:	e7f8      	b.n	8009a0a <__ascii_mbtowc+0x16>

08009a18 <__malloc_lock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	@ (8009a20 <__malloc_lock+0x8>)
 8009a1a:	f7fe bd56 	b.w	80084ca <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000fa8 	.word	0x20000fa8

08009a24 <__malloc_unlock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	@ (8009a2c <__malloc_unlock+0x8>)
 8009a26:	f7fe bd51 	b.w	80084cc <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20000fa8 	.word	0x20000fa8

08009a30 <_Balloc>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	69c6      	ldr	r6, [r0, #28]
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	b976      	cbnz	r6, 8009a58 <_Balloc+0x28>
 8009a3a:	2010      	movs	r0, #16
 8009a3c:	f7ff ff30 	bl	80098a0 <malloc>
 8009a40:	4602      	mov	r2, r0
 8009a42:	61e0      	str	r0, [r4, #28]
 8009a44:	b920      	cbnz	r0, 8009a50 <_Balloc+0x20>
 8009a46:	4b18      	ldr	r3, [pc, #96]	@ (8009aa8 <_Balloc+0x78>)
 8009a48:	4818      	ldr	r0, [pc, #96]	@ (8009aac <_Balloc+0x7c>)
 8009a4a:	216b      	movs	r1, #107	@ 0x6b
 8009a4c:	f000 fedc 	bl	800a808 <__assert_func>
 8009a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a54:	6006      	str	r6, [r0, #0]
 8009a56:	60c6      	str	r6, [r0, #12]
 8009a58:	69e6      	ldr	r6, [r4, #28]
 8009a5a:	68f3      	ldr	r3, [r6, #12]
 8009a5c:	b183      	cbz	r3, 8009a80 <_Balloc+0x50>
 8009a5e:	69e3      	ldr	r3, [r4, #28]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a66:	b9b8      	cbnz	r0, 8009a98 <_Balloc+0x68>
 8009a68:	2101      	movs	r1, #1
 8009a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a6e:	1d72      	adds	r2, r6, #5
 8009a70:	0092      	lsls	r2, r2, #2
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 fee6 	bl	800a844 <_calloc_r>
 8009a78:	b160      	cbz	r0, 8009a94 <_Balloc+0x64>
 8009a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a7e:	e00e      	b.n	8009a9e <_Balloc+0x6e>
 8009a80:	2221      	movs	r2, #33	@ 0x21
 8009a82:	2104      	movs	r1, #4
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 fedd 	bl	800a844 <_calloc_r>
 8009a8a:	69e3      	ldr	r3, [r4, #28]
 8009a8c:	60f0      	str	r0, [r6, #12]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e4      	bne.n	8009a5e <_Balloc+0x2e>
 8009a94:	2000      	movs	r0, #0
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	6802      	ldr	r2, [r0, #0]
 8009a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009aa4:	e7f7      	b.n	8009a96 <_Balloc+0x66>
 8009aa6:	bf00      	nop
 8009aa8:	0800b942 	.word	0x0800b942
 8009aac:	0800ba22 	.word	0x0800ba22

08009ab0 <_Bfree>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	69c6      	ldr	r6, [r0, #28]
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	460c      	mov	r4, r1
 8009ab8:	b976      	cbnz	r6, 8009ad8 <_Bfree+0x28>
 8009aba:	2010      	movs	r0, #16
 8009abc:	f7ff fef0 	bl	80098a0 <malloc>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	61e8      	str	r0, [r5, #28]
 8009ac4:	b920      	cbnz	r0, 8009ad0 <_Bfree+0x20>
 8009ac6:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <_Bfree+0x3c>)
 8009ac8:	4809      	ldr	r0, [pc, #36]	@ (8009af0 <_Bfree+0x40>)
 8009aca:	218f      	movs	r1, #143	@ 0x8f
 8009acc:	f000 fe9c 	bl	800a808 <__assert_func>
 8009ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad4:	6006      	str	r6, [r0, #0]
 8009ad6:	60c6      	str	r6, [r0, #12]
 8009ad8:	b13c      	cbz	r4, 8009aea <_Bfree+0x3a>
 8009ada:	69eb      	ldr	r3, [r5, #28]
 8009adc:	6862      	ldr	r2, [r4, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ae4:	6021      	str	r1, [r4, #0]
 8009ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	0800b942 	.word	0x0800b942
 8009af0:	0800ba22 	.word	0x0800ba22

08009af4 <__multadd>:
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	690d      	ldr	r5, [r1, #16]
 8009afa:	4607      	mov	r7, r0
 8009afc:	460c      	mov	r4, r1
 8009afe:	461e      	mov	r6, r3
 8009b00:	f101 0c14 	add.w	ip, r1, #20
 8009b04:	2000      	movs	r0, #0
 8009b06:	f8dc 3000 	ldr.w	r3, [ip]
 8009b0a:	b299      	uxth	r1, r3
 8009b0c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b10:	0c1e      	lsrs	r6, r3, #16
 8009b12:	0c0b      	lsrs	r3, r1, #16
 8009b14:	fb02 3306 	mla	r3, r2, r6, r3
 8009b18:	b289      	uxth	r1, r1
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b20:	4285      	cmp	r5, r0
 8009b22:	f84c 1b04 	str.w	r1, [ip], #4
 8009b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b2a:	dcec      	bgt.n	8009b06 <__multadd+0x12>
 8009b2c:	b30e      	cbz	r6, 8009b72 <__multadd+0x7e>
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc19      	bgt.n	8009b68 <__multadd+0x74>
 8009b34:	6861      	ldr	r1, [r4, #4]
 8009b36:	4638      	mov	r0, r7
 8009b38:	3101      	adds	r1, #1
 8009b3a:	f7ff ff79 	bl	8009a30 <_Balloc>
 8009b3e:	4680      	mov	r8, r0
 8009b40:	b928      	cbnz	r0, 8009b4e <__multadd+0x5a>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <__multadd+0x84>)
 8009b46:	480d      	ldr	r0, [pc, #52]	@ (8009b7c <__multadd+0x88>)
 8009b48:	21ba      	movs	r1, #186	@ 0xba
 8009b4a:	f000 fe5d 	bl	800a808 <__assert_func>
 8009b4e:	6922      	ldr	r2, [r4, #16]
 8009b50:	3202      	adds	r2, #2
 8009b52:	f104 010c 	add.w	r1, r4, #12
 8009b56:	0092      	lsls	r2, r2, #2
 8009b58:	300c      	adds	r0, #12
 8009b5a:	f7fe fcb8 	bl	80084ce <memcpy>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ffa5 	bl	8009ab0 <_Bfree>
 8009b66:	4644      	mov	r4, r8
 8009b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b6c:	3501      	adds	r5, #1
 8009b6e:	615e      	str	r6, [r3, #20]
 8009b70:	6125      	str	r5, [r4, #16]
 8009b72:	4620      	mov	r0, r4
 8009b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b78:	0800b9b1 	.word	0x0800b9b1
 8009b7c:	0800ba22 	.word	0x0800ba22

08009b80 <__s2b>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	4615      	mov	r5, r2
 8009b88:	461f      	mov	r7, r3
 8009b8a:	2209      	movs	r2, #9
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	4606      	mov	r6, r0
 8009b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b94:	2100      	movs	r1, #0
 8009b96:	2201      	movs	r2, #1
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	db09      	blt.n	8009bb0 <__s2b+0x30>
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7ff ff47 	bl	8009a30 <_Balloc>
 8009ba2:	b940      	cbnz	r0, 8009bb6 <__s2b+0x36>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	4b19      	ldr	r3, [pc, #100]	@ (8009c0c <__s2b+0x8c>)
 8009ba8:	4819      	ldr	r0, [pc, #100]	@ (8009c10 <__s2b+0x90>)
 8009baa:	21d3      	movs	r1, #211	@ 0xd3
 8009bac:	f000 fe2c 	bl	800a808 <__assert_func>
 8009bb0:	0052      	lsls	r2, r2, #1
 8009bb2:	3101      	adds	r1, #1
 8009bb4:	e7f0      	b.n	8009b98 <__s2b+0x18>
 8009bb6:	9b08      	ldr	r3, [sp, #32]
 8009bb8:	6143      	str	r3, [r0, #20]
 8009bba:	2d09      	cmp	r5, #9
 8009bbc:	f04f 0301 	mov.w	r3, #1
 8009bc0:	6103      	str	r3, [r0, #16]
 8009bc2:	dd16      	ble.n	8009bf2 <__s2b+0x72>
 8009bc4:	f104 0909 	add.w	r9, r4, #9
 8009bc8:	46c8      	mov	r8, r9
 8009bca:	442c      	add	r4, r5
 8009bcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	3b30      	subs	r3, #48	@ 0x30
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7ff ff8c 	bl	8009af4 <__multadd>
 8009bdc:	45a0      	cmp	r8, r4
 8009bde:	d1f5      	bne.n	8009bcc <__s2b+0x4c>
 8009be0:	f1a5 0408 	sub.w	r4, r5, #8
 8009be4:	444c      	add	r4, r9
 8009be6:	1b2d      	subs	r5, r5, r4
 8009be8:	1963      	adds	r3, r4, r5
 8009bea:	42bb      	cmp	r3, r7
 8009bec:	db04      	blt.n	8009bf8 <__s2b+0x78>
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	340a      	adds	r4, #10
 8009bf4:	2509      	movs	r5, #9
 8009bf6:	e7f6      	b.n	8009be6 <__s2b+0x66>
 8009bf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bfc:	4601      	mov	r1, r0
 8009bfe:	3b30      	subs	r3, #48	@ 0x30
 8009c00:	220a      	movs	r2, #10
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ff76 	bl	8009af4 <__multadd>
 8009c08:	e7ee      	b.n	8009be8 <__s2b+0x68>
 8009c0a:	bf00      	nop
 8009c0c:	0800b9b1 	.word	0x0800b9b1
 8009c10:	0800ba22 	.word	0x0800ba22

08009c14 <__hi0bits>:
 8009c14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c18:	4603      	mov	r3, r0
 8009c1a:	bf36      	itet	cc
 8009c1c:	0403      	lslcc	r3, r0, #16
 8009c1e:	2000      	movcs	r0, #0
 8009c20:	2010      	movcc	r0, #16
 8009c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c26:	bf3c      	itt	cc
 8009c28:	021b      	lslcc	r3, r3, #8
 8009c2a:	3008      	addcc	r0, #8
 8009c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c30:	bf3c      	itt	cc
 8009c32:	011b      	lslcc	r3, r3, #4
 8009c34:	3004      	addcc	r0, #4
 8009c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c3a:	bf3c      	itt	cc
 8009c3c:	009b      	lslcc	r3, r3, #2
 8009c3e:	3002      	addcc	r0, #2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	db05      	blt.n	8009c50 <__hi0bits+0x3c>
 8009c44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c48:	f100 0001 	add.w	r0, r0, #1
 8009c4c:	bf08      	it	eq
 8009c4e:	2020      	moveq	r0, #32
 8009c50:	4770      	bx	lr

08009c52 <__lo0bits>:
 8009c52:	6803      	ldr	r3, [r0, #0]
 8009c54:	4602      	mov	r2, r0
 8009c56:	f013 0007 	ands.w	r0, r3, #7
 8009c5a:	d00b      	beq.n	8009c74 <__lo0bits+0x22>
 8009c5c:	07d9      	lsls	r1, r3, #31
 8009c5e:	d421      	bmi.n	8009ca4 <__lo0bits+0x52>
 8009c60:	0798      	lsls	r0, r3, #30
 8009c62:	bf49      	itett	mi
 8009c64:	085b      	lsrmi	r3, r3, #1
 8009c66:	089b      	lsrpl	r3, r3, #2
 8009c68:	2001      	movmi	r0, #1
 8009c6a:	6013      	strmi	r3, [r2, #0]
 8009c6c:	bf5c      	itt	pl
 8009c6e:	6013      	strpl	r3, [r2, #0]
 8009c70:	2002      	movpl	r0, #2
 8009c72:	4770      	bx	lr
 8009c74:	b299      	uxth	r1, r3
 8009c76:	b909      	cbnz	r1, 8009c7c <__lo0bits+0x2a>
 8009c78:	0c1b      	lsrs	r3, r3, #16
 8009c7a:	2010      	movs	r0, #16
 8009c7c:	b2d9      	uxtb	r1, r3
 8009c7e:	b909      	cbnz	r1, 8009c84 <__lo0bits+0x32>
 8009c80:	3008      	adds	r0, #8
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	0719      	lsls	r1, r3, #28
 8009c86:	bf04      	itt	eq
 8009c88:	091b      	lsreq	r3, r3, #4
 8009c8a:	3004      	addeq	r0, #4
 8009c8c:	0799      	lsls	r1, r3, #30
 8009c8e:	bf04      	itt	eq
 8009c90:	089b      	lsreq	r3, r3, #2
 8009c92:	3002      	addeq	r0, #2
 8009c94:	07d9      	lsls	r1, r3, #31
 8009c96:	d403      	bmi.n	8009ca0 <__lo0bits+0x4e>
 8009c98:	085b      	lsrs	r3, r3, #1
 8009c9a:	f100 0001 	add.w	r0, r0, #1
 8009c9e:	d003      	beq.n	8009ca8 <__lo0bits+0x56>
 8009ca0:	6013      	str	r3, [r2, #0]
 8009ca2:	4770      	bx	lr
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4770      	bx	lr
 8009ca8:	2020      	movs	r0, #32
 8009caa:	4770      	bx	lr

08009cac <__i2b>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	460c      	mov	r4, r1
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	f7ff febd 	bl	8009a30 <_Balloc>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	b928      	cbnz	r0, 8009cc6 <__i2b+0x1a>
 8009cba:	4b05      	ldr	r3, [pc, #20]	@ (8009cd0 <__i2b+0x24>)
 8009cbc:	4805      	ldr	r0, [pc, #20]	@ (8009cd4 <__i2b+0x28>)
 8009cbe:	f240 1145 	movw	r1, #325	@ 0x145
 8009cc2:	f000 fda1 	bl	800a808 <__assert_func>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	6144      	str	r4, [r0, #20]
 8009cca:	6103      	str	r3, [r0, #16]
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800b9b1 	.word	0x0800b9b1
 8009cd4:	0800ba22 	.word	0x0800ba22

08009cd8 <__multiply>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	4614      	mov	r4, r2
 8009cde:	690a      	ldr	r2, [r1, #16]
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	bfa8      	it	ge
 8009ce6:	4623      	movge	r3, r4
 8009ce8:	460f      	mov	r7, r1
 8009cea:	bfa4      	itt	ge
 8009cec:	460c      	movge	r4, r1
 8009cee:	461f      	movge	r7, r3
 8009cf0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009cf4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009cf8:	68a3      	ldr	r3, [r4, #8]
 8009cfa:	6861      	ldr	r1, [r4, #4]
 8009cfc:	eb0a 0609 	add.w	r6, sl, r9
 8009d00:	42b3      	cmp	r3, r6
 8009d02:	b085      	sub	sp, #20
 8009d04:	bfb8      	it	lt
 8009d06:	3101      	addlt	r1, #1
 8009d08:	f7ff fe92 	bl	8009a30 <_Balloc>
 8009d0c:	b930      	cbnz	r0, 8009d1c <__multiply+0x44>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4b44      	ldr	r3, [pc, #272]	@ (8009e24 <__multiply+0x14c>)
 8009d12:	4845      	ldr	r0, [pc, #276]	@ (8009e28 <__multiply+0x150>)
 8009d14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d18:	f000 fd76 	bl	800a808 <__assert_func>
 8009d1c:	f100 0514 	add.w	r5, r0, #20
 8009d20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d24:	462b      	mov	r3, r5
 8009d26:	2200      	movs	r2, #0
 8009d28:	4543      	cmp	r3, r8
 8009d2a:	d321      	bcc.n	8009d70 <__multiply+0x98>
 8009d2c:	f107 0114 	add.w	r1, r7, #20
 8009d30:	f104 0214 	add.w	r2, r4, #20
 8009d34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d3c:	9302      	str	r3, [sp, #8]
 8009d3e:	1b13      	subs	r3, r2, r4
 8009d40:	3b15      	subs	r3, #21
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	3304      	adds	r3, #4
 8009d48:	f104 0715 	add.w	r7, r4, #21
 8009d4c:	42ba      	cmp	r2, r7
 8009d4e:	bf38      	it	cc
 8009d50:	2304      	movcc	r3, #4
 8009d52:	9301      	str	r3, [sp, #4]
 8009d54:	9b02      	ldr	r3, [sp, #8]
 8009d56:	9103      	str	r1, [sp, #12]
 8009d58:	428b      	cmp	r3, r1
 8009d5a:	d80c      	bhi.n	8009d76 <__multiply+0x9e>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	dd03      	ble.n	8009d68 <__multiply+0x90>
 8009d60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05b      	beq.n	8009e20 <__multiply+0x148>
 8009d68:	6106      	str	r6, [r0, #16]
 8009d6a:	b005      	add	sp, #20
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	f843 2b04 	str.w	r2, [r3], #4
 8009d74:	e7d8      	b.n	8009d28 <__multiply+0x50>
 8009d76:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d7a:	f1ba 0f00 	cmp.w	sl, #0
 8009d7e:	d024      	beq.n	8009dca <__multiply+0xf2>
 8009d80:	f104 0e14 	add.w	lr, r4, #20
 8009d84:	46a9      	mov	r9, r5
 8009d86:	f04f 0c00 	mov.w	ip, #0
 8009d8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d8e:	f8d9 3000 	ldr.w	r3, [r9]
 8009d92:	fa1f fb87 	uxth.w	fp, r7
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009da0:	f8d9 7000 	ldr.w	r7, [r9]
 8009da4:	4463      	add	r3, ip
 8009da6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009daa:	fb0a c70b 	mla	r7, sl, fp, ip
 8009dae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009db8:	4572      	cmp	r2, lr
 8009dba:	f849 3b04 	str.w	r3, [r9], #4
 8009dbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dc2:	d8e2      	bhi.n	8009d8a <__multiply+0xb2>
 8009dc4:	9b01      	ldr	r3, [sp, #4]
 8009dc6:	f845 c003 	str.w	ip, [r5, r3]
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009dd0:	3104      	adds	r1, #4
 8009dd2:	f1b9 0f00 	cmp.w	r9, #0
 8009dd6:	d021      	beq.n	8009e1c <__multiply+0x144>
 8009dd8:	682b      	ldr	r3, [r5, #0]
 8009dda:	f104 0c14 	add.w	ip, r4, #20
 8009dde:	46ae      	mov	lr, r5
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	f8bc b000 	ldrh.w	fp, [ip]
 8009de8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009dec:	fb09 770b 	mla	r7, r9, fp, r7
 8009df0:	4457      	add	r7, sl
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009df8:	f84e 3b04 	str.w	r3, [lr], #4
 8009dfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e04:	f8be 3000 	ldrh.w	r3, [lr]
 8009e08:	fb09 330a 	mla	r3, r9, sl, r3
 8009e0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e10:	4562      	cmp	r2, ip
 8009e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e16:	d8e5      	bhi.n	8009de4 <__multiply+0x10c>
 8009e18:	9f01      	ldr	r7, [sp, #4]
 8009e1a:	51eb      	str	r3, [r5, r7]
 8009e1c:	3504      	adds	r5, #4
 8009e1e:	e799      	b.n	8009d54 <__multiply+0x7c>
 8009e20:	3e01      	subs	r6, #1
 8009e22:	e79b      	b.n	8009d5c <__multiply+0x84>
 8009e24:	0800b9b1 	.word	0x0800b9b1
 8009e28:	0800ba22 	.word	0x0800ba22

08009e2c <__pow5mult>:
 8009e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	4615      	mov	r5, r2
 8009e32:	f012 0203 	ands.w	r2, r2, #3
 8009e36:	4607      	mov	r7, r0
 8009e38:	460e      	mov	r6, r1
 8009e3a:	d007      	beq.n	8009e4c <__pow5mult+0x20>
 8009e3c:	4c25      	ldr	r4, [pc, #148]	@ (8009ed4 <__pow5mult+0xa8>)
 8009e3e:	3a01      	subs	r2, #1
 8009e40:	2300      	movs	r3, #0
 8009e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e46:	f7ff fe55 	bl	8009af4 <__multadd>
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	10ad      	asrs	r5, r5, #2
 8009e4e:	d03d      	beq.n	8009ecc <__pow5mult+0xa0>
 8009e50:	69fc      	ldr	r4, [r7, #28]
 8009e52:	b97c      	cbnz	r4, 8009e74 <__pow5mult+0x48>
 8009e54:	2010      	movs	r0, #16
 8009e56:	f7ff fd23 	bl	80098a0 <malloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	61f8      	str	r0, [r7, #28]
 8009e5e:	b928      	cbnz	r0, 8009e6c <__pow5mult+0x40>
 8009e60:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed8 <__pow5mult+0xac>)
 8009e62:	481e      	ldr	r0, [pc, #120]	@ (8009edc <__pow5mult+0xb0>)
 8009e64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e68:	f000 fcce 	bl	800a808 <__assert_func>
 8009e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e70:	6004      	str	r4, [r0, #0]
 8009e72:	60c4      	str	r4, [r0, #12]
 8009e74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e7c:	b94c      	cbnz	r4, 8009e92 <__pow5mult+0x66>
 8009e7e:	f240 2171 	movw	r1, #625	@ 0x271
 8009e82:	4638      	mov	r0, r7
 8009e84:	f7ff ff12 	bl	8009cac <__i2b>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e8e:	4604      	mov	r4, r0
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	f04f 0900 	mov.w	r9, #0
 8009e96:	07eb      	lsls	r3, r5, #31
 8009e98:	d50a      	bpl.n	8009eb0 <__pow5mult+0x84>
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff ff1a 	bl	8009cd8 <__multiply>
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f7ff fe01 	bl	8009ab0 <_Bfree>
 8009eae:	4646      	mov	r6, r8
 8009eb0:	106d      	asrs	r5, r5, #1
 8009eb2:	d00b      	beq.n	8009ecc <__pow5mult+0xa0>
 8009eb4:	6820      	ldr	r0, [r4, #0]
 8009eb6:	b938      	cbnz	r0, 8009ec8 <__pow5mult+0x9c>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4621      	mov	r1, r4
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f7ff ff0b 	bl	8009cd8 <__multiply>
 8009ec2:	6020      	str	r0, [r4, #0]
 8009ec4:	f8c0 9000 	str.w	r9, [r0]
 8009ec8:	4604      	mov	r4, r0
 8009eca:	e7e4      	b.n	8009e96 <__pow5mult+0x6a>
 8009ecc:	4630      	mov	r0, r6
 8009ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	bf00      	nop
 8009ed4:	0800ba7c 	.word	0x0800ba7c
 8009ed8:	0800b942 	.word	0x0800b942
 8009edc:	0800ba22 	.word	0x0800ba22

08009ee0 <__lshift>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	6849      	ldr	r1, [r1, #4]
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4691      	mov	r9, r2
 8009ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ef8:	f108 0601 	add.w	r6, r8, #1
 8009efc:	42b3      	cmp	r3, r6
 8009efe:	db0b      	blt.n	8009f18 <__lshift+0x38>
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff fd95 	bl	8009a30 <_Balloc>
 8009f06:	4605      	mov	r5, r0
 8009f08:	b948      	cbnz	r0, 8009f1e <__lshift+0x3e>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4b28      	ldr	r3, [pc, #160]	@ (8009fb0 <__lshift+0xd0>)
 8009f0e:	4829      	ldr	r0, [pc, #164]	@ (8009fb4 <__lshift+0xd4>)
 8009f10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f14:	f000 fc78 	bl	800a808 <__assert_func>
 8009f18:	3101      	adds	r1, #1
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	e7ee      	b.n	8009efc <__lshift+0x1c>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f100 0114 	add.w	r1, r0, #20
 8009f24:	f100 0210 	add.w	r2, r0, #16
 8009f28:	4618      	mov	r0, r3
 8009f2a:	4553      	cmp	r3, sl
 8009f2c:	db33      	blt.n	8009f96 <__lshift+0xb6>
 8009f2e:	6920      	ldr	r0, [r4, #16]
 8009f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f34:	f104 0314 	add.w	r3, r4, #20
 8009f38:	f019 091f 	ands.w	r9, r9, #31
 8009f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f44:	d02b      	beq.n	8009f9e <__lshift+0xbe>
 8009f46:	f1c9 0e20 	rsb	lr, r9, #32
 8009f4a:	468a      	mov	sl, r1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	fa00 f009 	lsl.w	r0, r0, r9
 8009f54:	4310      	orrs	r0, r2
 8009f56:	f84a 0b04 	str.w	r0, [sl], #4
 8009f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f5e:	459c      	cmp	ip, r3
 8009f60:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f64:	d8f3      	bhi.n	8009f4e <__lshift+0x6e>
 8009f66:	ebac 0304 	sub.w	r3, ip, r4
 8009f6a:	3b15      	subs	r3, #21
 8009f6c:	f023 0303 	bic.w	r3, r3, #3
 8009f70:	3304      	adds	r3, #4
 8009f72:	f104 0015 	add.w	r0, r4, #21
 8009f76:	4584      	cmp	ip, r0
 8009f78:	bf38      	it	cc
 8009f7a:	2304      	movcc	r3, #4
 8009f7c:	50ca      	str	r2, [r1, r3]
 8009f7e:	b10a      	cbz	r2, 8009f84 <__lshift+0xa4>
 8009f80:	f108 0602 	add.w	r6, r8, #2
 8009f84:	3e01      	subs	r6, #1
 8009f86:	4638      	mov	r0, r7
 8009f88:	612e      	str	r6, [r5, #16]
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	f7ff fd90 	bl	8009ab0 <_Bfree>
 8009f90:	4628      	mov	r0, r5
 8009f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f96:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	e7c5      	b.n	8009f2a <__lshift+0x4a>
 8009f9e:	3904      	subs	r1, #4
 8009fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fa8:	459c      	cmp	ip, r3
 8009faa:	d8f9      	bhi.n	8009fa0 <__lshift+0xc0>
 8009fac:	e7ea      	b.n	8009f84 <__lshift+0xa4>
 8009fae:	bf00      	nop
 8009fb0:	0800b9b1 	.word	0x0800b9b1
 8009fb4:	0800ba22 	.word	0x0800ba22

08009fb8 <__mcmp>:
 8009fb8:	690a      	ldr	r2, [r1, #16]
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6900      	ldr	r0, [r0, #16]
 8009fbe:	1a80      	subs	r0, r0, r2
 8009fc0:	b530      	push	{r4, r5, lr}
 8009fc2:	d10e      	bne.n	8009fe2 <__mcmp+0x2a>
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	3114      	adds	r1, #20
 8009fc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fd8:	4295      	cmp	r5, r2
 8009fda:	d003      	beq.n	8009fe4 <__mcmp+0x2c>
 8009fdc:	d205      	bcs.n	8009fea <__mcmp+0x32>
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	bd30      	pop	{r4, r5, pc}
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	d3f3      	bcc.n	8009fd0 <__mcmp+0x18>
 8009fe8:	e7fb      	b.n	8009fe2 <__mcmp+0x2a>
 8009fea:	2001      	movs	r0, #1
 8009fec:	e7f9      	b.n	8009fe2 <__mcmp+0x2a>
	...

08009ff0 <__mdiff>:
 8009ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	4689      	mov	r9, r1
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4648      	mov	r0, r9
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	f7ff ffdb 	bl	8009fb8 <__mcmp>
 800a002:	1e05      	subs	r5, r0, #0
 800a004:	d112      	bne.n	800a02c <__mdiff+0x3c>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff fd11 	bl	8009a30 <_Balloc>
 800a00e:	4602      	mov	r2, r0
 800a010:	b928      	cbnz	r0, 800a01e <__mdiff+0x2e>
 800a012:	4b3f      	ldr	r3, [pc, #252]	@ (800a110 <__mdiff+0x120>)
 800a014:	f240 2137 	movw	r1, #567	@ 0x237
 800a018:	483e      	ldr	r0, [pc, #248]	@ (800a114 <__mdiff+0x124>)
 800a01a:	f000 fbf5 	bl	800a808 <__assert_func>
 800a01e:	2301      	movs	r3, #1
 800a020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a024:	4610      	mov	r0, r2
 800a026:	b003      	add	sp, #12
 800a028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02c:	bfbc      	itt	lt
 800a02e:	464b      	movlt	r3, r9
 800a030:	46a1      	movlt	r9, r4
 800a032:	4630      	mov	r0, r6
 800a034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a038:	bfba      	itte	lt
 800a03a:	461c      	movlt	r4, r3
 800a03c:	2501      	movlt	r5, #1
 800a03e:	2500      	movge	r5, #0
 800a040:	f7ff fcf6 	bl	8009a30 <_Balloc>
 800a044:	4602      	mov	r2, r0
 800a046:	b918      	cbnz	r0, 800a050 <__mdiff+0x60>
 800a048:	4b31      	ldr	r3, [pc, #196]	@ (800a110 <__mdiff+0x120>)
 800a04a:	f240 2145 	movw	r1, #581	@ 0x245
 800a04e:	e7e3      	b.n	800a018 <__mdiff+0x28>
 800a050:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a054:	6926      	ldr	r6, [r4, #16]
 800a056:	60c5      	str	r5, [r0, #12]
 800a058:	f109 0310 	add.w	r3, r9, #16
 800a05c:	f109 0514 	add.w	r5, r9, #20
 800a060:	f104 0e14 	add.w	lr, r4, #20
 800a064:	f100 0b14 	add.w	fp, r0, #20
 800a068:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a06c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	46d9      	mov	r9, fp
 800a074:	f04f 0c00 	mov.w	ip, #0
 800a078:	9b01      	ldr	r3, [sp, #4]
 800a07a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a07e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	fa1f f38a 	uxth.w	r3, sl
 800a088:	4619      	mov	r1, r3
 800a08a:	b283      	uxth	r3, r0
 800a08c:	1acb      	subs	r3, r1, r3
 800a08e:	0c00      	lsrs	r0, r0, #16
 800a090:	4463      	add	r3, ip
 800a092:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a096:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0a0:	4576      	cmp	r6, lr
 800a0a2:	f849 3b04 	str.w	r3, [r9], #4
 800a0a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0aa:	d8e5      	bhi.n	800a078 <__mdiff+0x88>
 800a0ac:	1b33      	subs	r3, r6, r4
 800a0ae:	3b15      	subs	r3, #21
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	3415      	adds	r4, #21
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	42a6      	cmp	r6, r4
 800a0ba:	bf38      	it	cc
 800a0bc:	2304      	movcc	r3, #4
 800a0be:	441d      	add	r5, r3
 800a0c0:	445b      	add	r3, fp
 800a0c2:	461e      	mov	r6, r3
 800a0c4:	462c      	mov	r4, r5
 800a0c6:	4544      	cmp	r4, r8
 800a0c8:	d30e      	bcc.n	800a0e8 <__mdiff+0xf8>
 800a0ca:	f108 0103 	add.w	r1, r8, #3
 800a0ce:	1b49      	subs	r1, r1, r5
 800a0d0:	f021 0103 	bic.w	r1, r1, #3
 800a0d4:	3d03      	subs	r5, #3
 800a0d6:	45a8      	cmp	r8, r5
 800a0d8:	bf38      	it	cc
 800a0da:	2100      	movcc	r1, #0
 800a0dc:	440b      	add	r3, r1
 800a0de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0e2:	b191      	cbz	r1, 800a10a <__mdiff+0x11a>
 800a0e4:	6117      	str	r7, [r2, #16]
 800a0e6:	e79d      	b.n	800a024 <__mdiff+0x34>
 800a0e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a0ec:	46e6      	mov	lr, ip
 800a0ee:	0c08      	lsrs	r0, r1, #16
 800a0f0:	fa1c fc81 	uxtah	ip, ip, r1
 800a0f4:	4471      	add	r1, lr
 800a0f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0fa:	b289      	uxth	r1, r1
 800a0fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a100:	f846 1b04 	str.w	r1, [r6], #4
 800a104:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a108:	e7dd      	b.n	800a0c6 <__mdiff+0xd6>
 800a10a:	3f01      	subs	r7, #1
 800a10c:	e7e7      	b.n	800a0de <__mdiff+0xee>
 800a10e:	bf00      	nop
 800a110:	0800b9b1 	.word	0x0800b9b1
 800a114:	0800ba22 	.word	0x0800ba22

0800a118 <__ulp>:
 800a118:	b082      	sub	sp, #8
 800a11a:	ed8d 0b00 	vstr	d0, [sp]
 800a11e:	9a01      	ldr	r2, [sp, #4]
 800a120:	4b0f      	ldr	r3, [pc, #60]	@ (800a160 <__ulp+0x48>)
 800a122:	4013      	ands	r3, r2
 800a124:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dc08      	bgt.n	800a13e <__ulp+0x26>
 800a12c:	425b      	negs	r3, r3
 800a12e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a132:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a136:	da04      	bge.n	800a142 <__ulp+0x2a>
 800a138:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a13c:	4113      	asrs	r3, r2
 800a13e:	2200      	movs	r2, #0
 800a140:	e008      	b.n	800a154 <__ulp+0x3c>
 800a142:	f1a2 0314 	sub.w	r3, r2, #20
 800a146:	2b1e      	cmp	r3, #30
 800a148:	bfda      	itte	le
 800a14a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a14e:	40da      	lsrle	r2, r3
 800a150:	2201      	movgt	r2, #1
 800a152:	2300      	movs	r3, #0
 800a154:	4619      	mov	r1, r3
 800a156:	4610      	mov	r0, r2
 800a158:	ec41 0b10 	vmov	d0, r0, r1
 800a15c:	b002      	add	sp, #8
 800a15e:	4770      	bx	lr
 800a160:	7ff00000 	.word	0x7ff00000

0800a164 <__b2d>:
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	6906      	ldr	r6, [r0, #16]
 800a16a:	f100 0814 	add.w	r8, r0, #20
 800a16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a172:	1f37      	subs	r7, r6, #4
 800a174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a178:	4610      	mov	r0, r2
 800a17a:	f7ff fd4b 	bl	8009c14 <__hi0bits>
 800a17e:	f1c0 0320 	rsb	r3, r0, #32
 800a182:	280a      	cmp	r0, #10
 800a184:	600b      	str	r3, [r1, #0]
 800a186:	491b      	ldr	r1, [pc, #108]	@ (800a1f4 <__b2d+0x90>)
 800a188:	dc15      	bgt.n	800a1b6 <__b2d+0x52>
 800a18a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a18e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a192:	45b8      	cmp	r8, r7
 800a194:	ea43 0501 	orr.w	r5, r3, r1
 800a198:	bf34      	ite	cc
 800a19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a19e:	2300      	movcs	r3, #0
 800a1a0:	3015      	adds	r0, #21
 800a1a2:	fa02 f000 	lsl.w	r0, r2, r0
 800a1a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1aa:	4303      	orrs	r3, r0
 800a1ac:	461c      	mov	r4, r3
 800a1ae:	ec45 4b10 	vmov	d0, r4, r5
 800a1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1b6:	45b8      	cmp	r8, r7
 800a1b8:	bf3a      	itte	cc
 800a1ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1be:	f1a6 0708 	subcc.w	r7, r6, #8
 800a1c2:	2300      	movcs	r3, #0
 800a1c4:	380b      	subs	r0, #11
 800a1c6:	d012      	beq.n	800a1ee <__b2d+0x8a>
 800a1c8:	f1c0 0120 	rsb	r1, r0, #32
 800a1cc:	fa23 f401 	lsr.w	r4, r3, r1
 800a1d0:	4082      	lsls	r2, r0
 800a1d2:	4322      	orrs	r2, r4
 800a1d4:	4547      	cmp	r7, r8
 800a1d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a1da:	bf8c      	ite	hi
 800a1dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a1e0:	2200      	movls	r2, #0
 800a1e2:	4083      	lsls	r3, r0
 800a1e4:	40ca      	lsrs	r2, r1
 800a1e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	e7de      	b.n	800a1ac <__b2d+0x48>
 800a1ee:	ea42 0501 	orr.w	r5, r2, r1
 800a1f2:	e7db      	b.n	800a1ac <__b2d+0x48>
 800a1f4:	3ff00000 	.word	0x3ff00000

0800a1f8 <__d2b>:
 800a1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	2101      	movs	r1, #1
 800a200:	ec59 8b10 	vmov	r8, r9, d0
 800a204:	4616      	mov	r6, r2
 800a206:	f7ff fc13 	bl	8009a30 <_Balloc>
 800a20a:	4604      	mov	r4, r0
 800a20c:	b930      	cbnz	r0, 800a21c <__d2b+0x24>
 800a20e:	4602      	mov	r2, r0
 800a210:	4b23      	ldr	r3, [pc, #140]	@ (800a2a0 <__d2b+0xa8>)
 800a212:	4824      	ldr	r0, [pc, #144]	@ (800a2a4 <__d2b+0xac>)
 800a214:	f240 310f 	movw	r1, #783	@ 0x30f
 800a218:	f000 faf6 	bl	800a808 <__assert_func>
 800a21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a224:	b10d      	cbz	r5, 800a22a <__d2b+0x32>
 800a226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	f1b8 0300 	subs.w	r3, r8, #0
 800a230:	d023      	beq.n	800a27a <__d2b+0x82>
 800a232:	4668      	mov	r0, sp
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	f7ff fd0c 	bl	8009c52 <__lo0bits>
 800a23a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a23e:	b1d0      	cbz	r0, 800a276 <__d2b+0x7e>
 800a240:	f1c0 0320 	rsb	r3, r0, #32
 800a244:	fa02 f303 	lsl.w	r3, r2, r3
 800a248:	430b      	orrs	r3, r1
 800a24a:	40c2      	lsrs	r2, r0
 800a24c:	6163      	str	r3, [r4, #20]
 800a24e:	9201      	str	r2, [sp, #4]
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	61a3      	str	r3, [r4, #24]
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf0c      	ite	eq
 800a258:	2201      	moveq	r2, #1
 800a25a:	2202      	movne	r2, #2
 800a25c:	6122      	str	r2, [r4, #16]
 800a25e:	b1a5      	cbz	r5, 800a28a <__d2b+0x92>
 800a260:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a264:	4405      	add	r5, r0
 800a266:	603d      	str	r5, [r7, #0]
 800a268:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4620      	mov	r0, r4
 800a270:	b003      	add	sp, #12
 800a272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a276:	6161      	str	r1, [r4, #20]
 800a278:	e7ea      	b.n	800a250 <__d2b+0x58>
 800a27a:	a801      	add	r0, sp, #4
 800a27c:	f7ff fce9 	bl	8009c52 <__lo0bits>
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	6163      	str	r3, [r4, #20]
 800a284:	3020      	adds	r0, #32
 800a286:	2201      	movs	r2, #1
 800a288:	e7e8      	b.n	800a25c <__d2b+0x64>
 800a28a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a28e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a292:	6038      	str	r0, [r7, #0]
 800a294:	6918      	ldr	r0, [r3, #16]
 800a296:	f7ff fcbd 	bl	8009c14 <__hi0bits>
 800a29a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a29e:	e7e5      	b.n	800a26c <__d2b+0x74>
 800a2a0:	0800b9b1 	.word	0x0800b9b1
 800a2a4:	0800ba22 	.word	0x0800ba22

0800a2a8 <__ratio>:
 800a2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ac:	b085      	sub	sp, #20
 800a2ae:	e9cd 1000 	strd	r1, r0, [sp]
 800a2b2:	a902      	add	r1, sp, #8
 800a2b4:	f7ff ff56 	bl	800a164 <__b2d>
 800a2b8:	9800      	ldr	r0, [sp, #0]
 800a2ba:	a903      	add	r1, sp, #12
 800a2bc:	ec55 4b10 	vmov	r4, r5, d0
 800a2c0:	f7ff ff50 	bl	800a164 <__b2d>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	6919      	ldr	r1, [r3, #16]
 800a2c8:	9b00      	ldr	r3, [sp, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	1ac9      	subs	r1, r1, r3
 800a2ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a2d2:	1a9b      	subs	r3, r3, r2
 800a2d4:	ec5b ab10 	vmov	sl, fp, d0
 800a2d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfce      	itee	gt
 800a2e0:	462a      	movgt	r2, r5
 800a2e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2e6:	465a      	movle	r2, fp
 800a2e8:	462f      	mov	r7, r5
 800a2ea:	46d9      	mov	r9, fp
 800a2ec:	bfcc      	ite	gt
 800a2ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a2f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	4652      	mov	r2, sl
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f6 fac5 	bl	800088c <__aeabi_ddiv>
 800a302:	ec41 0b10 	vmov	d0, r0, r1
 800a306:	b005      	add	sp, #20
 800a308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a30c <__copybits>:
 800a30c:	3901      	subs	r1, #1
 800a30e:	b570      	push	{r4, r5, r6, lr}
 800a310:	1149      	asrs	r1, r1, #5
 800a312:	6914      	ldr	r4, [r2, #16]
 800a314:	3101      	adds	r1, #1
 800a316:	f102 0314 	add.w	r3, r2, #20
 800a31a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a31e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a322:	1f05      	subs	r5, r0, #4
 800a324:	42a3      	cmp	r3, r4
 800a326:	d30c      	bcc.n	800a342 <__copybits+0x36>
 800a328:	1aa3      	subs	r3, r4, r2
 800a32a:	3b11      	subs	r3, #17
 800a32c:	f023 0303 	bic.w	r3, r3, #3
 800a330:	3211      	adds	r2, #17
 800a332:	42a2      	cmp	r2, r4
 800a334:	bf88      	it	hi
 800a336:	2300      	movhi	r3, #0
 800a338:	4418      	add	r0, r3
 800a33a:	2300      	movs	r3, #0
 800a33c:	4288      	cmp	r0, r1
 800a33e:	d305      	bcc.n	800a34c <__copybits+0x40>
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	f853 6b04 	ldr.w	r6, [r3], #4
 800a346:	f845 6f04 	str.w	r6, [r5, #4]!
 800a34a:	e7eb      	b.n	800a324 <__copybits+0x18>
 800a34c:	f840 3b04 	str.w	r3, [r0], #4
 800a350:	e7f4      	b.n	800a33c <__copybits+0x30>

0800a352 <__any_on>:
 800a352:	f100 0214 	add.w	r2, r0, #20
 800a356:	6900      	ldr	r0, [r0, #16]
 800a358:	114b      	asrs	r3, r1, #5
 800a35a:	4298      	cmp	r0, r3
 800a35c:	b510      	push	{r4, lr}
 800a35e:	db11      	blt.n	800a384 <__any_on+0x32>
 800a360:	dd0a      	ble.n	800a378 <__any_on+0x26>
 800a362:	f011 011f 	ands.w	r1, r1, #31
 800a366:	d007      	beq.n	800a378 <__any_on+0x26>
 800a368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a36c:	fa24 f001 	lsr.w	r0, r4, r1
 800a370:	fa00 f101 	lsl.w	r1, r0, r1
 800a374:	428c      	cmp	r4, r1
 800a376:	d10b      	bne.n	800a390 <__any_on+0x3e>
 800a378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d803      	bhi.n	800a388 <__any_on+0x36>
 800a380:	2000      	movs	r0, #0
 800a382:	bd10      	pop	{r4, pc}
 800a384:	4603      	mov	r3, r0
 800a386:	e7f7      	b.n	800a378 <__any_on+0x26>
 800a388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d0f5      	beq.n	800a37c <__any_on+0x2a>
 800a390:	2001      	movs	r0, #1
 800a392:	e7f6      	b.n	800a382 <__any_on+0x30>

0800a394 <__ascii_wctomb>:
 800a394:	4603      	mov	r3, r0
 800a396:	4608      	mov	r0, r1
 800a398:	b141      	cbz	r1, 800a3ac <__ascii_wctomb+0x18>
 800a39a:	2aff      	cmp	r2, #255	@ 0xff
 800a39c:	d904      	bls.n	800a3a8 <__ascii_wctomb+0x14>
 800a39e:	228a      	movs	r2, #138	@ 0x8a
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	4770      	bx	lr
 800a3a8:	700a      	strb	r2, [r1, #0]
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	4770      	bx	lr

0800a3ae <__ssputs_r>:
 800a3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b2:	688e      	ldr	r6, [r1, #8]
 800a3b4:	461f      	mov	r7, r3
 800a3b6:	42be      	cmp	r6, r7
 800a3b8:	680b      	ldr	r3, [r1, #0]
 800a3ba:	4682      	mov	sl, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	4690      	mov	r8, r2
 800a3c0:	d82d      	bhi.n	800a41e <__ssputs_r+0x70>
 800a3c2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3c6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a3ca:	d026      	beq.n	800a41a <__ssputs_r+0x6c>
 800a3cc:	6965      	ldr	r5, [r4, #20]
 800a3ce:	6909      	ldr	r1, [r1, #16]
 800a3d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3d4:	eba3 0901 	sub.w	r9, r3, r1
 800a3d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3dc:	1c7b      	adds	r3, r7, #1
 800a3de:	444b      	add	r3, r9
 800a3e0:	106d      	asrs	r5, r5, #1
 800a3e2:	429d      	cmp	r5, r3
 800a3e4:	bf38      	it	cc
 800a3e6:	461d      	movcc	r5, r3
 800a3e8:	0553      	lsls	r3, r2, #21
 800a3ea:	d527      	bpl.n	800a43c <__ssputs_r+0x8e>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	f7ff fa81 	bl	80098f4 <_malloc_r>
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	b360      	cbz	r0, 800a450 <__ssputs_r+0xa2>
 800a3f6:	6921      	ldr	r1, [r4, #16]
 800a3f8:	464a      	mov	r2, r9
 800a3fa:	f7fe f868 	bl	80084ce <memcpy>
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	6126      	str	r6, [r4, #16]
 800a40c:	6165      	str	r5, [r4, #20]
 800a40e:	444e      	add	r6, r9
 800a410:	eba5 0509 	sub.w	r5, r5, r9
 800a414:	6026      	str	r6, [r4, #0]
 800a416:	60a5      	str	r5, [r4, #8]
 800a418:	463e      	mov	r6, r7
 800a41a:	42be      	cmp	r6, r7
 800a41c:	d900      	bls.n	800a420 <__ssputs_r+0x72>
 800a41e:	463e      	mov	r6, r7
 800a420:	6820      	ldr	r0, [r4, #0]
 800a422:	4632      	mov	r2, r6
 800a424:	4641      	mov	r1, r8
 800a426:	f000 f9c5 	bl	800a7b4 <memmove>
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	1b9b      	subs	r3, r3, r6
 800a42e:	60a3      	str	r3, [r4, #8]
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	4433      	add	r3, r6
 800a434:	6023      	str	r3, [r4, #0]
 800a436:	2000      	movs	r0, #0
 800a438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43c:	462a      	mov	r2, r5
 800a43e:	f000 fa15 	bl	800a86c <_realloc_r>
 800a442:	4606      	mov	r6, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d1e0      	bne.n	800a40a <__ssputs_r+0x5c>
 800a448:	6921      	ldr	r1, [r4, #16]
 800a44a:	4650      	mov	r0, sl
 800a44c:	f7fe fea4 	bl	8009198 <_free_r>
 800a450:	230c      	movs	r3, #12
 800a452:	f8ca 3000 	str.w	r3, [sl]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	f04f 30ff 	mov.w	r0, #4294967295
 800a462:	e7e9      	b.n	800a438 <__ssputs_r+0x8a>

0800a464 <_svfiprintf_r>:
 800a464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a468:	4698      	mov	r8, r3
 800a46a:	898b      	ldrh	r3, [r1, #12]
 800a46c:	061b      	lsls	r3, r3, #24
 800a46e:	b09d      	sub	sp, #116	@ 0x74
 800a470:	4607      	mov	r7, r0
 800a472:	460d      	mov	r5, r1
 800a474:	4614      	mov	r4, r2
 800a476:	d510      	bpl.n	800a49a <_svfiprintf_r+0x36>
 800a478:	690b      	ldr	r3, [r1, #16]
 800a47a:	b973      	cbnz	r3, 800a49a <_svfiprintf_r+0x36>
 800a47c:	2140      	movs	r1, #64	@ 0x40
 800a47e:	f7ff fa39 	bl	80098f4 <_malloc_r>
 800a482:	6028      	str	r0, [r5, #0]
 800a484:	6128      	str	r0, [r5, #16]
 800a486:	b930      	cbnz	r0, 800a496 <_svfiprintf_r+0x32>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295
 800a490:	b01d      	add	sp, #116	@ 0x74
 800a492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a496:	2340      	movs	r3, #64	@ 0x40
 800a498:	616b      	str	r3, [r5, #20]
 800a49a:	2300      	movs	r3, #0
 800a49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a49e:	2320      	movs	r3, #32
 800a4a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a8:	2330      	movs	r3, #48	@ 0x30
 800a4aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a648 <_svfiprintf_r+0x1e4>
 800a4ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4b2:	f04f 0901 	mov.w	r9, #1
 800a4b6:	4623      	mov	r3, r4
 800a4b8:	469a      	mov	sl, r3
 800a4ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4be:	b10a      	cbz	r2, 800a4c4 <_svfiprintf_r+0x60>
 800a4c0:	2a25      	cmp	r2, #37	@ 0x25
 800a4c2:	d1f9      	bne.n	800a4b8 <_svfiprintf_r+0x54>
 800a4c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a4c8:	d00b      	beq.n	800a4e2 <_svfiprintf_r+0x7e>
 800a4ca:	465b      	mov	r3, fp
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7ff ff6c 	bl	800a3ae <__ssputs_r>
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f000 80a7 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4de:	445a      	add	r2, fp
 800a4e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 809f 	beq.w	800a62a <_svfiprintf_r+0x1c6>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4f6:	f10a 0a01 	add.w	sl, sl, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a502:	931a      	str	r3, [sp, #104]	@ 0x68
 800a504:	4654      	mov	r4, sl
 800a506:	2205      	movs	r2, #5
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	484e      	ldr	r0, [pc, #312]	@ (800a648 <_svfiprintf_r+0x1e4>)
 800a50e:	f7f5 fe7f 	bl	8000210 <memchr>
 800a512:	9a04      	ldr	r2, [sp, #16]
 800a514:	b9d8      	cbnz	r0, 800a54e <_svfiprintf_r+0xea>
 800a516:	06d0      	lsls	r0, r2, #27
 800a518:	bf44      	itt	mi
 800a51a:	2320      	movmi	r3, #32
 800a51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a520:	0711      	lsls	r1, r2, #28
 800a522:	bf44      	itt	mi
 800a524:	232b      	movmi	r3, #43	@ 0x2b
 800a526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a52a:	f89a 3000 	ldrb.w	r3, [sl]
 800a52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a530:	d015      	beq.n	800a55e <_svfiprintf_r+0xfa>
 800a532:	9a07      	ldr	r2, [sp, #28]
 800a534:	4654      	mov	r4, sl
 800a536:	2000      	movs	r0, #0
 800a538:	f04f 0c0a 	mov.w	ip, #10
 800a53c:	4621      	mov	r1, r4
 800a53e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a542:	3b30      	subs	r3, #48	@ 0x30
 800a544:	2b09      	cmp	r3, #9
 800a546:	d94b      	bls.n	800a5e0 <_svfiprintf_r+0x17c>
 800a548:	b1b0      	cbz	r0, 800a578 <_svfiprintf_r+0x114>
 800a54a:	9207      	str	r2, [sp, #28]
 800a54c:	e014      	b.n	800a578 <_svfiprintf_r+0x114>
 800a54e:	eba0 0308 	sub.w	r3, r0, r8
 800a552:	fa09 f303 	lsl.w	r3, r9, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	46a2      	mov	sl, r4
 800a55c:	e7d2      	b.n	800a504 <_svfiprintf_r+0xa0>
 800a55e:	9b03      	ldr	r3, [sp, #12]
 800a560:	1d19      	adds	r1, r3, #4
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	9103      	str	r1, [sp, #12]
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfbb      	ittet	lt
 800a56a:	425b      	neglt	r3, r3
 800a56c:	f042 0202 	orrlt.w	r2, r2, #2
 800a570:	9307      	strge	r3, [sp, #28]
 800a572:	9307      	strlt	r3, [sp, #28]
 800a574:	bfb8      	it	lt
 800a576:	9204      	strlt	r2, [sp, #16]
 800a578:	7823      	ldrb	r3, [r4, #0]
 800a57a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a57c:	d10a      	bne.n	800a594 <_svfiprintf_r+0x130>
 800a57e:	7863      	ldrb	r3, [r4, #1]
 800a580:	2b2a      	cmp	r3, #42	@ 0x2a
 800a582:	d132      	bne.n	800a5ea <_svfiprintf_r+0x186>
 800a584:	9b03      	ldr	r3, [sp, #12]
 800a586:	1d1a      	adds	r2, r3, #4
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	9203      	str	r2, [sp, #12]
 800a58c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a590:	3402      	adds	r4, #2
 800a592:	9305      	str	r3, [sp, #20]
 800a594:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a658 <_svfiprintf_r+0x1f4>
 800a598:	7821      	ldrb	r1, [r4, #0]
 800a59a:	2203      	movs	r2, #3
 800a59c:	4650      	mov	r0, sl
 800a59e:	f7f5 fe37 	bl	8000210 <memchr>
 800a5a2:	b138      	cbz	r0, 800a5b4 <_svfiprintf_r+0x150>
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	eba0 000a 	sub.w	r0, r0, sl
 800a5aa:	2240      	movs	r2, #64	@ 0x40
 800a5ac:	4082      	lsls	r2, r0
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	3401      	adds	r4, #1
 800a5b2:	9304      	str	r3, [sp, #16]
 800a5b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b8:	4824      	ldr	r0, [pc, #144]	@ (800a64c <_svfiprintf_r+0x1e8>)
 800a5ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5be:	2206      	movs	r2, #6
 800a5c0:	f7f5 fe26 	bl	8000210 <memchr>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d036      	beq.n	800a636 <_svfiprintf_r+0x1d2>
 800a5c8:	4b21      	ldr	r3, [pc, #132]	@ (800a650 <_svfiprintf_r+0x1ec>)
 800a5ca:	bb1b      	cbnz	r3, 800a614 <_svfiprintf_r+0x1b0>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	3307      	adds	r3, #7
 800a5d0:	f023 0307 	bic.w	r3, r3, #7
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	9303      	str	r3, [sp, #12]
 800a5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5da:	4433      	add	r3, r6
 800a5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5de:	e76a      	b.n	800a4b6 <_svfiprintf_r+0x52>
 800a5e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	2001      	movs	r0, #1
 800a5e8:	e7a8      	b.n	800a53c <_svfiprintf_r+0xd8>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	3401      	adds	r4, #1
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	f04f 0c0a 	mov.w	ip, #10
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5fc:	3a30      	subs	r2, #48	@ 0x30
 800a5fe:	2a09      	cmp	r2, #9
 800a600:	d903      	bls.n	800a60a <_svfiprintf_r+0x1a6>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c6      	beq.n	800a594 <_svfiprintf_r+0x130>
 800a606:	9105      	str	r1, [sp, #20]
 800a608:	e7c4      	b.n	800a594 <_svfiprintf_r+0x130>
 800a60a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60e:	4604      	mov	r4, r0
 800a610:	2301      	movs	r3, #1
 800a612:	e7f0      	b.n	800a5f6 <_svfiprintf_r+0x192>
 800a614:	ab03      	add	r3, sp, #12
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	462a      	mov	r2, r5
 800a61a:	4b0e      	ldr	r3, [pc, #56]	@ (800a654 <_svfiprintf_r+0x1f0>)
 800a61c:	a904      	add	r1, sp, #16
 800a61e:	4638      	mov	r0, r7
 800a620:	f7fd f9d2 	bl	80079c8 <_printf_float>
 800a624:	1c42      	adds	r2, r0, #1
 800a626:	4606      	mov	r6, r0
 800a628:	d1d6      	bne.n	800a5d8 <_svfiprintf_r+0x174>
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	065b      	lsls	r3, r3, #25
 800a62e:	f53f af2d 	bmi.w	800a48c <_svfiprintf_r+0x28>
 800a632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a634:	e72c      	b.n	800a490 <_svfiprintf_r+0x2c>
 800a636:	ab03      	add	r3, sp, #12
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	462a      	mov	r2, r5
 800a63c:	4b05      	ldr	r3, [pc, #20]	@ (800a654 <_svfiprintf_r+0x1f0>)
 800a63e:	a904      	add	r1, sp, #16
 800a640:	4638      	mov	r0, r7
 800a642:	f7fd fc59 	bl	8007ef8 <_printf_i>
 800a646:	e7ed      	b.n	800a624 <_svfiprintf_r+0x1c0>
 800a648:	0800bb78 	.word	0x0800bb78
 800a64c:	0800bb82 	.word	0x0800bb82
 800a650:	080079c9 	.word	0x080079c9
 800a654:	0800a3af 	.word	0x0800a3af
 800a658:	0800bb7e 	.word	0x0800bb7e

0800a65c <__sflush_r>:
 800a65c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a664:	0716      	lsls	r6, r2, #28
 800a666:	4605      	mov	r5, r0
 800a668:	460c      	mov	r4, r1
 800a66a:	d454      	bmi.n	800a716 <__sflush_r+0xba>
 800a66c:	684b      	ldr	r3, [r1, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dc02      	bgt.n	800a678 <__sflush_r+0x1c>
 800a672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a674:	2b00      	cmp	r3, #0
 800a676:	dd48      	ble.n	800a70a <__sflush_r+0xae>
 800a678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a67a:	2e00      	cmp	r6, #0
 800a67c:	d045      	beq.n	800a70a <__sflush_r+0xae>
 800a67e:	2300      	movs	r3, #0
 800a680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a684:	682f      	ldr	r7, [r5, #0]
 800a686:	6a21      	ldr	r1, [r4, #32]
 800a688:	602b      	str	r3, [r5, #0]
 800a68a:	d030      	beq.n	800a6ee <__sflush_r+0x92>
 800a68c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a68e:	89a3      	ldrh	r3, [r4, #12]
 800a690:	0759      	lsls	r1, r3, #29
 800a692:	d505      	bpl.n	800a6a0 <__sflush_r+0x44>
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	1ad2      	subs	r2, r2, r3
 800a698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a69a:	b10b      	cbz	r3, 800a6a0 <__sflush_r+0x44>
 800a69c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6a4:	6a21      	ldr	r1, [r4, #32]
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	47b0      	blx	r6
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	d106      	bne.n	800a6be <__sflush_r+0x62>
 800a6b0:	6829      	ldr	r1, [r5, #0]
 800a6b2:	291d      	cmp	r1, #29
 800a6b4:	d82b      	bhi.n	800a70e <__sflush_r+0xb2>
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a760 <__sflush_r+0x104>)
 800a6b8:	410a      	asrs	r2, r1
 800a6ba:	07d6      	lsls	r6, r2, #31
 800a6bc:	d427      	bmi.n	800a70e <__sflush_r+0xb2>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6062      	str	r2, [r4, #4]
 800a6c2:	04d9      	lsls	r1, r3, #19
 800a6c4:	6922      	ldr	r2, [r4, #16]
 800a6c6:	6022      	str	r2, [r4, #0]
 800a6c8:	d504      	bpl.n	800a6d4 <__sflush_r+0x78>
 800a6ca:	1c42      	adds	r2, r0, #1
 800a6cc:	d101      	bne.n	800a6d2 <__sflush_r+0x76>
 800a6ce:	682b      	ldr	r3, [r5, #0]
 800a6d0:	b903      	cbnz	r3, 800a6d4 <__sflush_r+0x78>
 800a6d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6d6:	602f      	str	r7, [r5, #0]
 800a6d8:	b1b9      	cbz	r1, 800a70a <__sflush_r+0xae>
 800a6da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	d002      	beq.n	800a6e8 <__sflush_r+0x8c>
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7fe fd58 	bl	8009198 <_free_r>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6ec:	e00d      	b.n	800a70a <__sflush_r+0xae>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b0      	blx	r6
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	1c50      	adds	r0, r2, #1
 800a6f8:	d1c9      	bne.n	800a68e <__sflush_r+0x32>
 800a6fa:	682b      	ldr	r3, [r5, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0c6      	beq.n	800a68e <__sflush_r+0x32>
 800a700:	2b1d      	cmp	r3, #29
 800a702:	d001      	beq.n	800a708 <__sflush_r+0xac>
 800a704:	2b16      	cmp	r3, #22
 800a706:	d11e      	bne.n	800a746 <__sflush_r+0xea>
 800a708:	602f      	str	r7, [r5, #0]
 800a70a:	2000      	movs	r0, #0
 800a70c:	e022      	b.n	800a754 <__sflush_r+0xf8>
 800a70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a712:	b21b      	sxth	r3, r3
 800a714:	e01b      	b.n	800a74e <__sflush_r+0xf2>
 800a716:	690f      	ldr	r7, [r1, #16]
 800a718:	2f00      	cmp	r7, #0
 800a71a:	d0f6      	beq.n	800a70a <__sflush_r+0xae>
 800a71c:	0793      	lsls	r3, r2, #30
 800a71e:	680e      	ldr	r6, [r1, #0]
 800a720:	bf08      	it	eq
 800a722:	694b      	ldreq	r3, [r1, #20]
 800a724:	600f      	str	r7, [r1, #0]
 800a726:	bf18      	it	ne
 800a728:	2300      	movne	r3, #0
 800a72a:	eba6 0807 	sub.w	r8, r6, r7
 800a72e:	608b      	str	r3, [r1, #8]
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	dde9      	ble.n	800a70a <__sflush_r+0xae>
 800a736:	6a21      	ldr	r1, [r4, #32]
 800a738:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a73a:	4643      	mov	r3, r8
 800a73c:	463a      	mov	r2, r7
 800a73e:	4628      	mov	r0, r5
 800a740:	47b0      	blx	r6
 800a742:	2800      	cmp	r0, #0
 800a744:	dc08      	bgt.n	800a758 <__sflush_r+0xfc>
 800a746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a74e:	81a3      	strh	r3, [r4, #12]
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a758:	4407      	add	r7, r0
 800a75a:	eba8 0800 	sub.w	r8, r8, r0
 800a75e:	e7e7      	b.n	800a730 <__sflush_r+0xd4>
 800a760:	dfbffffe 	.word	0xdfbffffe

0800a764 <_fflush_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	690b      	ldr	r3, [r1, #16]
 800a768:	4605      	mov	r5, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	b913      	cbnz	r3, 800a774 <_fflush_r+0x10>
 800a76e:	2500      	movs	r5, #0
 800a770:	4628      	mov	r0, r5
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	b118      	cbz	r0, 800a77e <_fflush_r+0x1a>
 800a776:	6a03      	ldr	r3, [r0, #32]
 800a778:	b90b      	cbnz	r3, 800a77e <_fflush_r+0x1a>
 800a77a:	f7fd fd69 	bl	8008250 <__sinit>
 800a77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d0f3      	beq.n	800a76e <_fflush_r+0xa>
 800a786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a788:	07d0      	lsls	r0, r2, #31
 800a78a:	d404      	bmi.n	800a796 <_fflush_r+0x32>
 800a78c:	0599      	lsls	r1, r3, #22
 800a78e:	d402      	bmi.n	800a796 <_fflush_r+0x32>
 800a790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a792:	f7fd fe9a 	bl	80084ca <__retarget_lock_acquire_recursive>
 800a796:	4628      	mov	r0, r5
 800a798:	4621      	mov	r1, r4
 800a79a:	f7ff ff5f 	bl	800a65c <__sflush_r>
 800a79e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7a0:	07da      	lsls	r2, r3, #31
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	d4e4      	bmi.n	800a770 <_fflush_r+0xc>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	059b      	lsls	r3, r3, #22
 800a7aa:	d4e1      	bmi.n	800a770 <_fflush_r+0xc>
 800a7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7ae:	f7fd fe8d 	bl	80084cc <__retarget_lock_release_recursive>
 800a7b2:	e7dd      	b.n	800a770 <_fflush_r+0xc>

0800a7b4 <memmove>:
 800a7b4:	4288      	cmp	r0, r1
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	eb01 0402 	add.w	r4, r1, r2
 800a7bc:	d902      	bls.n	800a7c4 <memmove+0x10>
 800a7be:	4284      	cmp	r4, r0
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	d807      	bhi.n	800a7d4 <memmove+0x20>
 800a7c4:	1e43      	subs	r3, r0, #1
 800a7c6:	42a1      	cmp	r1, r4
 800a7c8:	d008      	beq.n	800a7dc <memmove+0x28>
 800a7ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7d2:	e7f8      	b.n	800a7c6 <memmove+0x12>
 800a7d4:	4402      	add	r2, r0
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	428a      	cmp	r2, r1
 800a7da:	d100      	bne.n	800a7de <memmove+0x2a>
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7e6:	e7f7      	b.n	800a7d8 <memmove+0x24>

0800a7e8 <_sbrk_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	@ (800a804 <_sbrk_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f8 f8fa 	bl	80029ec <_sbrk>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_sbrk_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_sbrk_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20000fa4 	.word	0x20000fa4

0800a808 <__assert_func>:
 800a808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a80a:	4614      	mov	r4, r2
 800a80c:	461a      	mov	r2, r3
 800a80e:	4b09      	ldr	r3, [pc, #36]	@ (800a834 <__assert_func+0x2c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4605      	mov	r5, r0
 800a814:	68d8      	ldr	r0, [r3, #12]
 800a816:	b954      	cbnz	r4, 800a82e <__assert_func+0x26>
 800a818:	4b07      	ldr	r3, [pc, #28]	@ (800a838 <__assert_func+0x30>)
 800a81a:	461c      	mov	r4, r3
 800a81c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a820:	9100      	str	r1, [sp, #0]
 800a822:	462b      	mov	r3, r5
 800a824:	4905      	ldr	r1, [pc, #20]	@ (800a83c <__assert_func+0x34>)
 800a826:	f000 f84f 	bl	800a8c8 <fiprintf>
 800a82a:	f000 f85f 	bl	800a8ec <abort>
 800a82e:	4b04      	ldr	r3, [pc, #16]	@ (800a840 <__assert_func+0x38>)
 800a830:	e7f4      	b.n	800a81c <__assert_func+0x14>
 800a832:	bf00      	nop
 800a834:	20000234 	.word	0x20000234
 800a838:	0800bbc4 	.word	0x0800bbc4
 800a83c:	0800bb96 	.word	0x0800bb96
 800a840:	0800bb89 	.word	0x0800bb89

0800a844 <_calloc_r>:
 800a844:	b570      	push	{r4, r5, r6, lr}
 800a846:	fba1 5402 	umull	r5, r4, r1, r2
 800a84a:	b93c      	cbnz	r4, 800a85c <_calloc_r+0x18>
 800a84c:	4629      	mov	r1, r5
 800a84e:	f7ff f851 	bl	80098f4 <_malloc_r>
 800a852:	4606      	mov	r6, r0
 800a854:	b928      	cbnz	r0, 800a862 <_calloc_r+0x1e>
 800a856:	2600      	movs	r6, #0
 800a858:	4630      	mov	r0, r6
 800a85a:	bd70      	pop	{r4, r5, r6, pc}
 800a85c:	220c      	movs	r2, #12
 800a85e:	6002      	str	r2, [r0, #0]
 800a860:	e7f9      	b.n	800a856 <_calloc_r+0x12>
 800a862:	462a      	mov	r2, r5
 800a864:	4621      	mov	r1, r4
 800a866:	f7fd fda0 	bl	80083aa <memset>
 800a86a:	e7f5      	b.n	800a858 <_calloc_r+0x14>

0800a86c <_realloc_r>:
 800a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	4680      	mov	r8, r0
 800a872:	4615      	mov	r5, r2
 800a874:	460c      	mov	r4, r1
 800a876:	b921      	cbnz	r1, 800a882 <_realloc_r+0x16>
 800a878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	4611      	mov	r1, r2
 800a87e:	f7ff b839 	b.w	80098f4 <_malloc_r>
 800a882:	b92a      	cbnz	r2, 800a890 <_realloc_r+0x24>
 800a884:	f7fe fc88 	bl	8009198 <_free_r>
 800a888:	2400      	movs	r4, #0
 800a88a:	4620      	mov	r0, r4
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	f000 f833 	bl	800a8fa <_malloc_usable_size_r>
 800a894:	4285      	cmp	r5, r0
 800a896:	4606      	mov	r6, r0
 800a898:	d802      	bhi.n	800a8a0 <_realloc_r+0x34>
 800a89a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a89e:	d8f4      	bhi.n	800a88a <_realloc_r+0x1e>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f7ff f826 	bl	80098f4 <_malloc_r>
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d0ec      	beq.n	800a888 <_realloc_r+0x1c>
 800a8ae:	42b5      	cmp	r5, r6
 800a8b0:	462a      	mov	r2, r5
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	bf28      	it	cs
 800a8b6:	4632      	movcs	r2, r6
 800a8b8:	f7fd fe09 	bl	80084ce <memcpy>
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4640      	mov	r0, r8
 800a8c0:	f7fe fc6a 	bl	8009198 <_free_r>
 800a8c4:	463c      	mov	r4, r7
 800a8c6:	e7e0      	b.n	800a88a <_realloc_r+0x1e>

0800a8c8 <fiprintf>:
 800a8c8:	b40e      	push	{r1, r2, r3}
 800a8ca:	b503      	push	{r0, r1, lr}
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	ab03      	add	r3, sp, #12
 800a8d0:	4805      	ldr	r0, [pc, #20]	@ (800a8e8 <fiprintf+0x20>)
 800a8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d6:	6800      	ldr	r0, [r0, #0]
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	f000 f83f 	bl	800a95c <_vfiprintf_r>
 800a8de:	b002      	add	sp, #8
 800a8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8e4:	b003      	add	sp, #12
 800a8e6:	4770      	bx	lr
 800a8e8:	20000234 	.word	0x20000234

0800a8ec <abort>:
 800a8ec:	b508      	push	{r3, lr}
 800a8ee:	2006      	movs	r0, #6
 800a8f0:	f000 fa08 	bl	800ad04 <raise>
 800a8f4:	2001      	movs	r0, #1
 800a8f6:	f7f8 f800 	bl	80028fa <_exit>

0800a8fa <_malloc_usable_size_r>:
 800a8fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fe:	1f18      	subs	r0, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	bfbc      	itt	lt
 800a904:	580b      	ldrlt	r3, [r1, r0]
 800a906:	18c0      	addlt	r0, r0, r3
 800a908:	4770      	bx	lr

0800a90a <__sfputc_r>:
 800a90a:	6893      	ldr	r3, [r2, #8]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	b410      	push	{r4}
 800a912:	6093      	str	r3, [r2, #8]
 800a914:	da08      	bge.n	800a928 <__sfputc_r+0x1e>
 800a916:	6994      	ldr	r4, [r2, #24]
 800a918:	42a3      	cmp	r3, r4
 800a91a:	db01      	blt.n	800a920 <__sfputc_r+0x16>
 800a91c:	290a      	cmp	r1, #10
 800a91e:	d103      	bne.n	800a928 <__sfputc_r+0x1e>
 800a920:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a924:	f000 b932 	b.w	800ab8c <__swbuf_r>
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	1c58      	adds	r0, r3, #1
 800a92c:	6010      	str	r0, [r2, #0]
 800a92e:	7019      	strb	r1, [r3, #0]
 800a930:	4608      	mov	r0, r1
 800a932:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <__sfputs_r>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	4614      	mov	r4, r2
 800a940:	18d5      	adds	r5, r2, r3
 800a942:	42ac      	cmp	r4, r5
 800a944:	d101      	bne.n	800a94a <__sfputs_r+0x12>
 800a946:	2000      	movs	r0, #0
 800a948:	e007      	b.n	800a95a <__sfputs_r+0x22>
 800a94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a94e:	463a      	mov	r2, r7
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff ffda 	bl	800a90a <__sfputc_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d1f3      	bne.n	800a942 <__sfputs_r+0xa>
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a95c <_vfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	460d      	mov	r5, r1
 800a962:	b09d      	sub	sp, #116	@ 0x74
 800a964:	4614      	mov	r4, r2
 800a966:	4698      	mov	r8, r3
 800a968:	4606      	mov	r6, r0
 800a96a:	b118      	cbz	r0, 800a974 <_vfiprintf_r+0x18>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <_vfiprintf_r+0x18>
 800a970:	f7fd fc6e 	bl	8008250 <__sinit>
 800a974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a976:	07d9      	lsls	r1, r3, #31
 800a978:	d405      	bmi.n	800a986 <_vfiprintf_r+0x2a>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	059a      	lsls	r2, r3, #22
 800a97e:	d402      	bmi.n	800a986 <_vfiprintf_r+0x2a>
 800a980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a982:	f7fd fda2 	bl	80084ca <__retarget_lock_acquire_recursive>
 800a986:	89ab      	ldrh	r3, [r5, #12]
 800a988:	071b      	lsls	r3, r3, #28
 800a98a:	d501      	bpl.n	800a990 <_vfiprintf_r+0x34>
 800a98c:	692b      	ldr	r3, [r5, #16]
 800a98e:	b99b      	cbnz	r3, 800a9b8 <_vfiprintf_r+0x5c>
 800a990:	4629      	mov	r1, r5
 800a992:	4630      	mov	r0, r6
 800a994:	f000 f938 	bl	800ac08 <__swsetup_r>
 800a998:	b170      	cbz	r0, 800a9b8 <_vfiprintf_r+0x5c>
 800a99a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99c:	07dc      	lsls	r4, r3, #31
 800a99e:	d504      	bpl.n	800a9aa <_vfiprintf_r+0x4e>
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	b01d      	add	sp, #116	@ 0x74
 800a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	0598      	lsls	r0, r3, #22
 800a9ae:	d4f7      	bmi.n	800a9a0 <_vfiprintf_r+0x44>
 800a9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9b2:	f7fd fd8b 	bl	80084cc <__retarget_lock_release_recursive>
 800a9b6:	e7f3      	b.n	800a9a0 <_vfiprintf_r+0x44>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9bc:	2320      	movs	r3, #32
 800a9be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9c6:	2330      	movs	r3, #48	@ 0x30
 800a9c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab78 <_vfiprintf_r+0x21c>
 800a9cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9d0:	f04f 0901 	mov.w	r9, #1
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	469a      	mov	sl, r3
 800a9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_vfiprintf_r+0x86>
 800a9de:	2a25      	cmp	r2, #37	@ 0x25
 800a9e0:	d1f9      	bne.n	800a9d6 <_vfiprintf_r+0x7a>
 800a9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e6:	d00b      	beq.n	800aa00 <_vfiprintf_r+0xa4>
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ffa2 	bl	800a938 <__sfputs_r>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f000 80a7 	beq.w	800ab48 <_vfiprintf_r+0x1ec>
 800a9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9fc:	445a      	add	r2, fp
 800a9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa00:	f89a 3000 	ldrb.w	r3, [sl]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 809f 	beq.w	800ab48 <_vfiprintf_r+0x1ec>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa14:	f10a 0a01 	add.w	sl, sl, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa20:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa22:	4654      	mov	r4, sl
 800aa24:	2205      	movs	r2, #5
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4853      	ldr	r0, [pc, #332]	@ (800ab78 <_vfiprintf_r+0x21c>)
 800aa2c:	f7f5 fbf0 	bl	8000210 <memchr>
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	b9d8      	cbnz	r0, 800aa6c <_vfiprintf_r+0x110>
 800aa34:	06d1      	lsls	r1, r2, #27
 800aa36:	bf44      	itt	mi
 800aa38:	2320      	movmi	r3, #32
 800aa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa3e:	0713      	lsls	r3, r2, #28
 800aa40:	bf44      	itt	mi
 800aa42:	232b      	movmi	r3, #43	@ 0x2b
 800aa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa4e:	d015      	beq.n	800aa7c <_vfiprintf_r+0x120>
 800aa50:	9a07      	ldr	r2, [sp, #28]
 800aa52:	4654      	mov	r4, sl
 800aa54:	2000      	movs	r0, #0
 800aa56:	f04f 0c0a 	mov.w	ip, #10
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa60:	3b30      	subs	r3, #48	@ 0x30
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d94b      	bls.n	800aafe <_vfiprintf_r+0x1a2>
 800aa66:	b1b0      	cbz	r0, 800aa96 <_vfiprintf_r+0x13a>
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	e014      	b.n	800aa96 <_vfiprintf_r+0x13a>
 800aa6c:	eba0 0308 	sub.w	r3, r0, r8
 800aa70:	fa09 f303 	lsl.w	r3, r9, r3
 800aa74:	4313      	orrs	r3, r2
 800aa76:	9304      	str	r3, [sp, #16]
 800aa78:	46a2      	mov	sl, r4
 800aa7a:	e7d2      	b.n	800aa22 <_vfiprintf_r+0xc6>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	1d19      	adds	r1, r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	9103      	str	r1, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbb      	ittet	lt
 800aa88:	425b      	neglt	r3, r3
 800aa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8e:	9307      	strge	r3, [sp, #28]
 800aa90:	9307      	strlt	r3, [sp, #28]
 800aa92:	bfb8      	it	lt
 800aa94:	9204      	strlt	r2, [sp, #16]
 800aa96:	7823      	ldrb	r3, [r4, #0]
 800aa98:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa9a:	d10a      	bne.n	800aab2 <_vfiprintf_r+0x156>
 800aa9c:	7863      	ldrb	r3, [r4, #1]
 800aa9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa0:	d132      	bne.n	800ab08 <_vfiprintf_r+0x1ac>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	1d1a      	adds	r2, r3, #4
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	9203      	str	r2, [sp, #12]
 800aaaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaae:	3402      	adds	r4, #2
 800aab0:	9305      	str	r3, [sp, #20]
 800aab2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab88 <_vfiprintf_r+0x22c>
 800aab6:	7821      	ldrb	r1, [r4, #0]
 800aab8:	2203      	movs	r2, #3
 800aaba:	4650      	mov	r0, sl
 800aabc:	f7f5 fba8 	bl	8000210 <memchr>
 800aac0:	b138      	cbz	r0, 800aad2 <_vfiprintf_r+0x176>
 800aac2:	9b04      	ldr	r3, [sp, #16]
 800aac4:	eba0 000a 	sub.w	r0, r0, sl
 800aac8:	2240      	movs	r2, #64	@ 0x40
 800aaca:	4082      	lsls	r2, r0
 800aacc:	4313      	orrs	r3, r2
 800aace:	3401      	adds	r4, #1
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	4829      	ldr	r0, [pc, #164]	@ (800ab7c <_vfiprintf_r+0x220>)
 800aad8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aadc:	2206      	movs	r2, #6
 800aade:	f7f5 fb97 	bl	8000210 <memchr>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d03f      	beq.n	800ab66 <_vfiprintf_r+0x20a>
 800aae6:	4b26      	ldr	r3, [pc, #152]	@ (800ab80 <_vfiprintf_r+0x224>)
 800aae8:	bb1b      	cbnz	r3, 800ab32 <_vfiprintf_r+0x1d6>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	3307      	adds	r3, #7
 800aaee:	f023 0307 	bic.w	r3, r3, #7
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf8:	443b      	add	r3, r7
 800aafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aafc:	e76a      	b.n	800a9d4 <_vfiprintf_r+0x78>
 800aafe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab02:	460c      	mov	r4, r1
 800ab04:	2001      	movs	r0, #1
 800ab06:	e7a8      	b.n	800aa5a <_vfiprintf_r+0xfe>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	3401      	adds	r4, #1
 800ab0c:	9305      	str	r3, [sp, #20]
 800ab0e:	4619      	mov	r1, r3
 800ab10:	f04f 0c0a 	mov.w	ip, #10
 800ab14:	4620      	mov	r0, r4
 800ab16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1a:	3a30      	subs	r2, #48	@ 0x30
 800ab1c:	2a09      	cmp	r2, #9
 800ab1e:	d903      	bls.n	800ab28 <_vfiprintf_r+0x1cc>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0c6      	beq.n	800aab2 <_vfiprintf_r+0x156>
 800ab24:	9105      	str	r1, [sp, #20]
 800ab26:	e7c4      	b.n	800aab2 <_vfiprintf_r+0x156>
 800ab28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e7f0      	b.n	800ab14 <_vfiprintf_r+0x1b8>
 800ab32:	ab03      	add	r3, sp, #12
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	462a      	mov	r2, r5
 800ab38:	4b12      	ldr	r3, [pc, #72]	@ (800ab84 <_vfiprintf_r+0x228>)
 800ab3a:	a904      	add	r1, sp, #16
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	f7fc ff43 	bl	80079c8 <_printf_float>
 800ab42:	4607      	mov	r7, r0
 800ab44:	1c78      	adds	r0, r7, #1
 800ab46:	d1d6      	bne.n	800aaf6 <_vfiprintf_r+0x19a>
 800ab48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x1fe>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x1fe>
 800ab54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab56:	f7fd fcb9 	bl	80084cc <__retarget_lock_release_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	065b      	lsls	r3, r3, #25
 800ab5e:	f53f af1f 	bmi.w	800a9a0 <_vfiprintf_r+0x44>
 800ab62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab64:	e71e      	b.n	800a9a4 <_vfiprintf_r+0x48>
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	4b05      	ldr	r3, [pc, #20]	@ (800ab84 <_vfiprintf_r+0x228>)
 800ab6e:	a904      	add	r1, sp, #16
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7fd f9c1 	bl	8007ef8 <_printf_i>
 800ab76:	e7e4      	b.n	800ab42 <_vfiprintf_r+0x1e6>
 800ab78:	0800bb78 	.word	0x0800bb78
 800ab7c:	0800bb82 	.word	0x0800bb82
 800ab80:	080079c9 	.word	0x080079c9
 800ab84:	0800a939 	.word	0x0800a939
 800ab88:	0800bb7e 	.word	0x0800bb7e

0800ab8c <__swbuf_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	460e      	mov	r6, r1
 800ab90:	4614      	mov	r4, r2
 800ab92:	4605      	mov	r5, r0
 800ab94:	b118      	cbz	r0, 800ab9e <__swbuf_r+0x12>
 800ab96:	6a03      	ldr	r3, [r0, #32]
 800ab98:	b90b      	cbnz	r3, 800ab9e <__swbuf_r+0x12>
 800ab9a:	f7fd fb59 	bl	8008250 <__sinit>
 800ab9e:	69a3      	ldr	r3, [r4, #24]
 800aba0:	60a3      	str	r3, [r4, #8]
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	071a      	lsls	r2, r3, #28
 800aba6:	d501      	bpl.n	800abac <__swbuf_r+0x20>
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	b943      	cbnz	r3, 800abbe <__swbuf_r+0x32>
 800abac:	4621      	mov	r1, r4
 800abae:	4628      	mov	r0, r5
 800abb0:	f000 f82a 	bl	800ac08 <__swsetup_r>
 800abb4:	b118      	cbz	r0, 800abbe <__swbuf_r+0x32>
 800abb6:	f04f 37ff 	mov.w	r7, #4294967295
 800abba:	4638      	mov	r0, r7
 800abbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	6922      	ldr	r2, [r4, #16]
 800abc2:	1a98      	subs	r0, r3, r2
 800abc4:	6963      	ldr	r3, [r4, #20]
 800abc6:	b2f6      	uxtb	r6, r6
 800abc8:	4283      	cmp	r3, r0
 800abca:	4637      	mov	r7, r6
 800abcc:	dc05      	bgt.n	800abda <__swbuf_r+0x4e>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	f7ff fdc7 	bl	800a764 <_fflush_r>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d1ed      	bne.n	800abb6 <__swbuf_r+0x2a>
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	3b01      	subs	r3, #1
 800abde:	60a3      	str	r3, [r4, #8]
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	1c5a      	adds	r2, r3, #1
 800abe4:	6022      	str	r2, [r4, #0]
 800abe6:	701e      	strb	r6, [r3, #0]
 800abe8:	6962      	ldr	r2, [r4, #20]
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	429a      	cmp	r2, r3
 800abee:	d004      	beq.n	800abfa <__swbuf_r+0x6e>
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	07db      	lsls	r3, r3, #31
 800abf4:	d5e1      	bpl.n	800abba <__swbuf_r+0x2e>
 800abf6:	2e0a      	cmp	r6, #10
 800abf8:	d1df      	bne.n	800abba <__swbuf_r+0x2e>
 800abfa:	4621      	mov	r1, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f7ff fdb1 	bl	800a764 <_fflush_r>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0d9      	beq.n	800abba <__swbuf_r+0x2e>
 800ac06:	e7d6      	b.n	800abb6 <__swbuf_r+0x2a>

0800ac08 <__swsetup_r>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	4b29      	ldr	r3, [pc, #164]	@ (800acb0 <__swsetup_r+0xa8>)
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	460c      	mov	r4, r1
 800ac12:	b118      	cbz	r0, 800ac1c <__swsetup_r+0x14>
 800ac14:	6a03      	ldr	r3, [r0, #32]
 800ac16:	b90b      	cbnz	r3, 800ac1c <__swsetup_r+0x14>
 800ac18:	f7fd fb1a 	bl	8008250 <__sinit>
 800ac1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac20:	0719      	lsls	r1, r3, #28
 800ac22:	d422      	bmi.n	800ac6a <__swsetup_r+0x62>
 800ac24:	06da      	lsls	r2, r3, #27
 800ac26:	d407      	bmi.n	800ac38 <__swsetup_r+0x30>
 800ac28:	2209      	movs	r2, #9
 800ac2a:	602a      	str	r2, [r5, #0]
 800ac2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	e033      	b.n	800aca0 <__swsetup_r+0x98>
 800ac38:	0758      	lsls	r0, r3, #29
 800ac3a:	d512      	bpl.n	800ac62 <__swsetup_r+0x5a>
 800ac3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac3e:	b141      	cbz	r1, 800ac52 <__swsetup_r+0x4a>
 800ac40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac44:	4299      	cmp	r1, r3
 800ac46:	d002      	beq.n	800ac4e <__swsetup_r+0x46>
 800ac48:	4628      	mov	r0, r5
 800ac4a:	f7fe faa5 	bl	8009198 <_free_r>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	6063      	str	r3, [r4, #4]
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0308 	orr.w	r3, r3, #8
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	6923      	ldr	r3, [r4, #16]
 800ac6c:	b94b      	cbnz	r3, 800ac82 <__swsetup_r+0x7a>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac78:	d003      	beq.n	800ac82 <__swsetup_r+0x7a>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	f000 f883 	bl	800ad88 <__smakebuf_r>
 800ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac86:	f013 0201 	ands.w	r2, r3, #1
 800ac8a:	d00a      	beq.n	800aca2 <__swsetup_r+0x9a>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	60a2      	str	r2, [r4, #8]
 800ac90:	6962      	ldr	r2, [r4, #20]
 800ac92:	4252      	negs	r2, r2
 800ac94:	61a2      	str	r2, [r4, #24]
 800ac96:	6922      	ldr	r2, [r4, #16]
 800ac98:	b942      	cbnz	r2, 800acac <__swsetup_r+0xa4>
 800ac9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac9e:	d1c5      	bne.n	800ac2c <__swsetup_r+0x24>
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	0799      	lsls	r1, r3, #30
 800aca4:	bf58      	it	pl
 800aca6:	6962      	ldrpl	r2, [r4, #20]
 800aca8:	60a2      	str	r2, [r4, #8]
 800acaa:	e7f4      	b.n	800ac96 <__swsetup_r+0x8e>
 800acac:	2000      	movs	r0, #0
 800acae:	e7f7      	b.n	800aca0 <__swsetup_r+0x98>
 800acb0:	20000234 	.word	0x20000234

0800acb4 <_raise_r>:
 800acb4:	291f      	cmp	r1, #31
 800acb6:	b538      	push	{r3, r4, r5, lr}
 800acb8:	4605      	mov	r5, r0
 800acba:	460c      	mov	r4, r1
 800acbc:	d904      	bls.n	800acc8 <_raise_r+0x14>
 800acbe:	2316      	movs	r3, #22
 800acc0:	6003      	str	r3, [r0, #0]
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acca:	b112      	cbz	r2, 800acd2 <_raise_r+0x1e>
 800accc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acd0:	b94b      	cbnz	r3, 800ace6 <_raise_r+0x32>
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 f830 	bl	800ad38 <_getpid_r>
 800acd8:	4622      	mov	r2, r4
 800acda:	4601      	mov	r1, r0
 800acdc:	4628      	mov	r0, r5
 800acde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ace2:	f000 b817 	b.w	800ad14 <_kill_r>
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d00a      	beq.n	800ad00 <_raise_r+0x4c>
 800acea:	1c59      	adds	r1, r3, #1
 800acec:	d103      	bne.n	800acf6 <_raise_r+0x42>
 800acee:	2316      	movs	r3, #22
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	2001      	movs	r0, #1
 800acf4:	e7e7      	b.n	800acc6 <_raise_r+0x12>
 800acf6:	2100      	movs	r1, #0
 800acf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acfc:	4620      	mov	r0, r4
 800acfe:	4798      	blx	r3
 800ad00:	2000      	movs	r0, #0
 800ad02:	e7e0      	b.n	800acc6 <_raise_r+0x12>

0800ad04 <raise>:
 800ad04:	4b02      	ldr	r3, [pc, #8]	@ (800ad10 <raise+0xc>)
 800ad06:	4601      	mov	r1, r0
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	f7ff bfd3 	b.w	800acb4 <_raise_r>
 800ad0e:	bf00      	nop
 800ad10:	20000234 	.word	0x20000234

0800ad14 <_kill_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	@ (800ad34 <_kill_r+0x20>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	602b      	str	r3, [r5, #0]
 800ad22:	f7f7 fdda 	bl	80028da <_kill>
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	d102      	bne.n	800ad30 <_kill_r+0x1c>
 800ad2a:	682b      	ldr	r3, [r5, #0]
 800ad2c:	b103      	cbz	r3, 800ad30 <_kill_r+0x1c>
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	bd38      	pop	{r3, r4, r5, pc}
 800ad32:	bf00      	nop
 800ad34:	20000fa4 	.word	0x20000fa4

0800ad38 <_getpid_r>:
 800ad38:	f7f7 bdc7 	b.w	80028ca <_getpid>

0800ad3c <__swhatbuf_r>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	460c      	mov	r4, r1
 800ad40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad44:	2900      	cmp	r1, #0
 800ad46:	b096      	sub	sp, #88	@ 0x58
 800ad48:	4615      	mov	r5, r2
 800ad4a:	461e      	mov	r6, r3
 800ad4c:	da0d      	bge.n	800ad6a <__swhatbuf_r+0x2e>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad54:	f04f 0100 	mov.w	r1, #0
 800ad58:	bf14      	ite	ne
 800ad5a:	2340      	movne	r3, #64	@ 0x40
 800ad5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad60:	2000      	movs	r0, #0
 800ad62:	6031      	str	r1, [r6, #0]
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	b016      	add	sp, #88	@ 0x58
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
 800ad6a:	466a      	mov	r2, sp
 800ad6c:	f000 f848 	bl	800ae00 <_fstat_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dbec      	blt.n	800ad4e <__swhatbuf_r+0x12>
 800ad74:	9901      	ldr	r1, [sp, #4]
 800ad76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad7e:	4259      	negs	r1, r3
 800ad80:	4159      	adcs	r1, r3
 800ad82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad86:	e7eb      	b.n	800ad60 <__swhatbuf_r+0x24>

0800ad88 <__smakebuf_r>:
 800ad88:	898b      	ldrh	r3, [r1, #12]
 800ad8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad8c:	079d      	lsls	r5, r3, #30
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460c      	mov	r4, r1
 800ad92:	d507      	bpl.n	800ada4 <__smakebuf_r+0x1c>
 800ad94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	6123      	str	r3, [r4, #16]
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	6163      	str	r3, [r4, #20]
 800ada0:	b003      	add	sp, #12
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada4:	ab01      	add	r3, sp, #4
 800ada6:	466a      	mov	r2, sp
 800ada8:	f7ff ffc8 	bl	800ad3c <__swhatbuf_r>
 800adac:	9f00      	ldr	r7, [sp, #0]
 800adae:	4605      	mov	r5, r0
 800adb0:	4639      	mov	r1, r7
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7fe fd9e 	bl	80098f4 <_malloc_r>
 800adb8:	b948      	cbnz	r0, 800adce <__smakebuf_r+0x46>
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	059a      	lsls	r2, r3, #22
 800adc0:	d4ee      	bmi.n	800ada0 <__smakebuf_r+0x18>
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	f043 0302 	orr.w	r3, r3, #2
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	e7e2      	b.n	800ad94 <__smakebuf_r+0xc>
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	6020      	str	r0, [r4, #0]
 800add2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adde:	b15b      	cbz	r3, 800adf8 <__smakebuf_r+0x70>
 800ade0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade4:	4630      	mov	r0, r6
 800ade6:	f000 f81d 	bl	800ae24 <_isatty_r>
 800adea:	b128      	cbz	r0, 800adf8 <__smakebuf_r+0x70>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	431d      	orrs	r5, r3
 800adfc:	81a5      	strh	r5, [r4, #12]
 800adfe:	e7cf      	b.n	800ada0 <__smakebuf_r+0x18>

0800ae00 <_fstat_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d07      	ldr	r5, [pc, #28]	@ (800ae20 <_fstat_r+0x20>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	f7f7 fdc4 	bl	800299a <_fstat>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d102      	bne.n	800ae1c <_fstat_r+0x1c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	b103      	cbz	r3, 800ae1c <_fstat_r+0x1c>
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	bf00      	nop
 800ae20:	20000fa4 	.word	0x20000fa4

0800ae24 <_isatty_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d06      	ldr	r5, [pc, #24]	@ (800ae40 <_isatty_r+0x1c>)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	602b      	str	r3, [r5, #0]
 800ae30:	f7f7 fdc3 	bl	80029ba <_isatty>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_isatty_r+0x1a>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_isatty_r+0x1a>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20000fa4 	.word	0x20000fa4

0800ae44 <powf>:
 800ae44:	b508      	push	{r3, lr}
 800ae46:	ed2d 8b04 	vpush	{d8-d9}
 800ae4a:	eeb0 8a60 	vmov.f32	s16, s1
 800ae4e:	eeb0 9a40 	vmov.f32	s18, s0
 800ae52:	f000 f859 	bl	800af08 <__ieee754_powf>
 800ae56:	eeb4 8a48 	vcmp.f32	s16, s16
 800ae5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5e:	eef0 8a40 	vmov.f32	s17, s0
 800ae62:	d63e      	bvs.n	800aee2 <powf+0x9e>
 800ae64:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ae68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6c:	d112      	bne.n	800ae94 <powf+0x50>
 800ae6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	d039      	beq.n	800aeec <powf+0xa8>
 800ae78:	eeb0 0a48 	vmov.f32	s0, s16
 800ae7c:	f000 f839 	bl	800aef2 <finitef>
 800ae80:	b378      	cbz	r0, 800aee2 <powf+0x9e>
 800ae82:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ae86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8a:	d52a      	bpl.n	800aee2 <powf+0x9e>
 800ae8c:	f7fd faf2 	bl	8008474 <__errno>
 800ae90:	2322      	movs	r3, #34	@ 0x22
 800ae92:	e014      	b.n	800aebe <powf+0x7a>
 800ae94:	f000 f82d 	bl	800aef2 <finitef>
 800ae98:	b998      	cbnz	r0, 800aec2 <powf+0x7e>
 800ae9a:	eeb0 0a49 	vmov.f32	s0, s18
 800ae9e:	f000 f828 	bl	800aef2 <finitef>
 800aea2:	b170      	cbz	r0, 800aec2 <powf+0x7e>
 800aea4:	eeb0 0a48 	vmov.f32	s0, s16
 800aea8:	f000 f823 	bl	800aef2 <finitef>
 800aeac:	b148      	cbz	r0, 800aec2 <powf+0x7e>
 800aeae:	eef4 8a68 	vcmp.f32	s17, s17
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	d7e9      	bvc.n	800ae8c <powf+0x48>
 800aeb8:	f7fd fadc 	bl	8008474 <__errno>
 800aebc:	2321      	movs	r3, #33	@ 0x21
 800aebe:	6003      	str	r3, [r0, #0]
 800aec0:	e00f      	b.n	800aee2 <powf+0x9e>
 800aec2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800aec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeca:	d10a      	bne.n	800aee2 <powf+0x9e>
 800aecc:	eeb0 0a49 	vmov.f32	s0, s18
 800aed0:	f000 f80f 	bl	800aef2 <finitef>
 800aed4:	b128      	cbz	r0, 800aee2 <powf+0x9e>
 800aed6:	eeb0 0a48 	vmov.f32	s0, s16
 800aeda:	f000 f80a 	bl	800aef2 <finitef>
 800aede:	2800      	cmp	r0, #0
 800aee0:	d1d4      	bne.n	800ae8c <powf+0x48>
 800aee2:	eeb0 0a68 	vmov.f32	s0, s17
 800aee6:	ecbd 8b04 	vpop	{d8-d9}
 800aeea:	bd08      	pop	{r3, pc}
 800aeec:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800aef0:	e7f7      	b.n	800aee2 <powf+0x9e>

0800aef2 <finitef>:
 800aef2:	ee10 3a10 	vmov	r3, s0
 800aef6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800aefa:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800aefe:	bfac      	ite	ge
 800af00:	2000      	movge	r0, #0
 800af02:	2001      	movlt	r0, #1
 800af04:	4770      	bx	lr
	...

0800af08 <__ieee754_powf>:
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	ee10 4a90 	vmov	r4, s1
 800af10:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800af14:	ed2d 8b02 	vpush	{d8}
 800af18:	ee10 6a10 	vmov	r6, s0
 800af1c:	eeb0 8a40 	vmov.f32	s16, s0
 800af20:	eef0 8a60 	vmov.f32	s17, s1
 800af24:	d10c      	bne.n	800af40 <__ieee754_powf+0x38>
 800af26:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800af2a:	0076      	lsls	r6, r6, #1
 800af2c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800af30:	f240 829c 	bls.w	800b46c <__ieee754_powf+0x564>
 800af34:	ee38 0a28 	vadd.f32	s0, s16, s17
 800af38:	ecbd 8b02 	vpop	{d8}
 800af3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af40:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800af44:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800af48:	d802      	bhi.n	800af50 <__ieee754_powf+0x48>
 800af4a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800af4e:	d908      	bls.n	800af62 <__ieee754_powf+0x5a>
 800af50:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800af54:	d1ee      	bne.n	800af34 <__ieee754_powf+0x2c>
 800af56:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800af5a:	0064      	lsls	r4, r4, #1
 800af5c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800af60:	e7e6      	b.n	800af30 <__ieee754_powf+0x28>
 800af62:	2e00      	cmp	r6, #0
 800af64:	da1e      	bge.n	800afa4 <__ieee754_powf+0x9c>
 800af66:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800af6a:	d22b      	bcs.n	800afc4 <__ieee754_powf+0xbc>
 800af6c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800af70:	d332      	bcc.n	800afd8 <__ieee754_powf+0xd0>
 800af72:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800af76:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800af7a:	fa49 f503 	asr.w	r5, r9, r3
 800af7e:	fa05 f303 	lsl.w	r3, r5, r3
 800af82:	454b      	cmp	r3, r9
 800af84:	d126      	bne.n	800afd4 <__ieee754_powf+0xcc>
 800af86:	f005 0501 	and.w	r5, r5, #1
 800af8a:	f1c5 0502 	rsb	r5, r5, #2
 800af8e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800af92:	d122      	bne.n	800afda <__ieee754_powf+0xd2>
 800af94:	2c00      	cmp	r4, #0
 800af96:	f280 826f 	bge.w	800b478 <__ieee754_powf+0x570>
 800af9a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800af9e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800afa2:	e7c9      	b.n	800af38 <__ieee754_powf+0x30>
 800afa4:	2500      	movs	r5, #0
 800afa6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800afaa:	d1f0      	bne.n	800af8e <__ieee754_powf+0x86>
 800afac:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800afb0:	f000 825c 	beq.w	800b46c <__ieee754_powf+0x564>
 800afb4:	d908      	bls.n	800afc8 <__ieee754_powf+0xc0>
 800afb6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800b318 <__ieee754_powf+0x410>
 800afba:	2c00      	cmp	r4, #0
 800afbc:	bfa8      	it	ge
 800afbe:	eeb0 0a68 	vmovge.f32	s0, s17
 800afc2:	e7b9      	b.n	800af38 <__ieee754_powf+0x30>
 800afc4:	2502      	movs	r5, #2
 800afc6:	e7ee      	b.n	800afa6 <__ieee754_powf+0x9e>
 800afc8:	2c00      	cmp	r4, #0
 800afca:	f280 8252 	bge.w	800b472 <__ieee754_powf+0x56a>
 800afce:	eeb1 0a68 	vneg.f32	s0, s17
 800afd2:	e7b1      	b.n	800af38 <__ieee754_powf+0x30>
 800afd4:	2500      	movs	r5, #0
 800afd6:	e7da      	b.n	800af8e <__ieee754_powf+0x86>
 800afd8:	2500      	movs	r5, #0
 800afda:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800afde:	d102      	bne.n	800afe6 <__ieee754_powf+0xde>
 800afe0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800afe4:	e7a8      	b.n	800af38 <__ieee754_powf+0x30>
 800afe6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800afea:	d109      	bne.n	800b000 <__ieee754_powf+0xf8>
 800afec:	2e00      	cmp	r6, #0
 800afee:	db07      	blt.n	800b000 <__ieee754_powf+0xf8>
 800aff0:	eeb0 0a48 	vmov.f32	s0, s16
 800aff4:	ecbd 8b02 	vpop	{d8}
 800aff8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800affc:	f000 bae8 	b.w	800b5d0 <__ieee754_sqrtf>
 800b000:	eeb0 0a48 	vmov.f32	s0, s16
 800b004:	f000 fa50 	bl	800b4a8 <fabsf>
 800b008:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800b00c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800b010:	4647      	mov	r7, r8
 800b012:	d002      	beq.n	800b01a <__ieee754_powf+0x112>
 800b014:	f1b8 0f00 	cmp.w	r8, #0
 800b018:	d117      	bne.n	800b04a <__ieee754_powf+0x142>
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	bfbc      	itt	lt
 800b01e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800b022:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b026:	2e00      	cmp	r6, #0
 800b028:	da86      	bge.n	800af38 <__ieee754_powf+0x30>
 800b02a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800b02e:	ea58 0805 	orrs.w	r8, r8, r5
 800b032:	d104      	bne.n	800b03e <__ieee754_powf+0x136>
 800b034:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b038:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b03c:	e77c      	b.n	800af38 <__ieee754_powf+0x30>
 800b03e:	2d01      	cmp	r5, #1
 800b040:	f47f af7a 	bne.w	800af38 <__ieee754_powf+0x30>
 800b044:	eeb1 0a40 	vneg.f32	s0, s0
 800b048:	e776      	b.n	800af38 <__ieee754_powf+0x30>
 800b04a:	0ff0      	lsrs	r0, r6, #31
 800b04c:	3801      	subs	r0, #1
 800b04e:	ea55 0300 	orrs.w	r3, r5, r0
 800b052:	d104      	bne.n	800b05e <__ieee754_powf+0x156>
 800b054:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b058:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b05c:	e76c      	b.n	800af38 <__ieee754_powf+0x30>
 800b05e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800b062:	d973      	bls.n	800b14c <__ieee754_powf+0x244>
 800b064:	4bad      	ldr	r3, [pc, #692]	@ (800b31c <__ieee754_powf+0x414>)
 800b066:	4598      	cmp	r8, r3
 800b068:	d808      	bhi.n	800b07c <__ieee754_powf+0x174>
 800b06a:	2c00      	cmp	r4, #0
 800b06c:	da0b      	bge.n	800b086 <__ieee754_powf+0x17e>
 800b06e:	2000      	movs	r0, #0
 800b070:	ecbd 8b02 	vpop	{d8}
 800b074:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b078:	f000 baa4 	b.w	800b5c4 <__math_oflowf>
 800b07c:	4ba8      	ldr	r3, [pc, #672]	@ (800b320 <__ieee754_powf+0x418>)
 800b07e:	4598      	cmp	r8, r3
 800b080:	d908      	bls.n	800b094 <__ieee754_powf+0x18c>
 800b082:	2c00      	cmp	r4, #0
 800b084:	dcf3      	bgt.n	800b06e <__ieee754_powf+0x166>
 800b086:	2000      	movs	r0, #0
 800b088:	ecbd 8b02 	vpop	{d8}
 800b08c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b090:	f000 ba92 	b.w	800b5b8 <__math_uflowf>
 800b094:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b098:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b09c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800b324 <__ieee754_powf+0x41c>
 800b0a0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800b0a4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b0a8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b0ac:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b0b0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800b328 <__ieee754_powf+0x420>
 800b0bc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800b0c0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800b32c <__ieee754_powf+0x424>
 800b0c4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b0c8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800b330 <__ieee754_powf+0x428>
 800b0cc:	eef0 6a67 	vmov.f32	s13, s15
 800b0d0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b0d4:	ee16 3a90 	vmov	r3, s13
 800b0d8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b0dc:	f023 030f 	bic.w	r3, r3, #15
 800b0e0:	ee06 3a90 	vmov	s13, r3
 800b0e4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800b0e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b0ec:	3d01      	subs	r5, #1
 800b0ee:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800b0f2:	4305      	orrs	r5, r0
 800b0f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0f8:	f024 040f 	bic.w	r4, r4, #15
 800b0fc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800b100:	bf18      	it	ne
 800b102:	eeb0 8a47 	vmovne.f32	s16, s14
 800b106:	ee07 4a10 	vmov	s14, r4
 800b10a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b10e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b11a:	ee07 4a10 	vmov	s14, r4
 800b11e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b122:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b126:	ee17 1a10 	vmov	r1, s14
 800b12a:	2900      	cmp	r1, #0
 800b12c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b130:	f340 80dd 	ble.w	800b2ee <__ieee754_powf+0x3e6>
 800b134:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800b138:	f240 80ca 	bls.w	800b2d0 <__ieee754_powf+0x3c8>
 800b13c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b144:	bf4c      	ite	mi
 800b146:	2001      	movmi	r0, #1
 800b148:	2000      	movpl	r0, #0
 800b14a:	e791      	b.n	800b070 <__ieee754_powf+0x168>
 800b14c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b150:	bf01      	itttt	eq
 800b152:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b334 <__ieee754_powf+0x42c>
 800b156:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b15a:	f06f 0317 	mvneq.w	r3, #23
 800b15e:	ee17 7a90 	vmoveq	r7, s15
 800b162:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800b166:	bf18      	it	ne
 800b168:	2300      	movne	r3, #0
 800b16a:	3a7f      	subs	r2, #127	@ 0x7f
 800b16c:	441a      	add	r2, r3
 800b16e:	4b72      	ldr	r3, [pc, #456]	@ (800b338 <__ieee754_powf+0x430>)
 800b170:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800b174:	429f      	cmp	r7, r3
 800b176:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800b17a:	dd06      	ble.n	800b18a <__ieee754_powf+0x282>
 800b17c:	4b6f      	ldr	r3, [pc, #444]	@ (800b33c <__ieee754_powf+0x434>)
 800b17e:	429f      	cmp	r7, r3
 800b180:	f340 80a4 	ble.w	800b2cc <__ieee754_powf+0x3c4>
 800b184:	3201      	adds	r2, #1
 800b186:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800b18a:	2600      	movs	r6, #0
 800b18c:	4b6c      	ldr	r3, [pc, #432]	@ (800b340 <__ieee754_powf+0x438>)
 800b18e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b192:	ee07 1a10 	vmov	s14, r1
 800b196:	edd3 5a00 	vldr	s11, [r3]
 800b19a:	4b6a      	ldr	r3, [pc, #424]	@ (800b344 <__ieee754_powf+0x43c>)
 800b19c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800b1a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1a4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800b1a8:	1049      	asrs	r1, r1, #1
 800b1aa:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800b1ae:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800b1b2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800b1b6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800b1ba:	ee07 1a90 	vmov	s15, r1
 800b1be:	ee26 5a24 	vmul.f32	s10, s12, s9
 800b1c2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800b1c6:	ee15 7a10 	vmov	r7, s10
 800b1ca:	401f      	ands	r7, r3
 800b1cc:	ee06 7a90 	vmov	s13, r7
 800b1d0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800b1d4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b1d8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800b1dc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b1e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b348 <__ieee754_powf+0x440>
 800b1e4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b34c <__ieee754_powf+0x444>
 800b1e8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b1ec:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b350 <__ieee754_powf+0x448>
 800b1f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b1f4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b324 <__ieee754_powf+0x41c>
 800b1f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b1fc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b354 <__ieee754_powf+0x44c>
 800b200:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b204:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b358 <__ieee754_powf+0x450>
 800b208:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b20c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b210:	ee35 7a26 	vadd.f32	s14, s10, s13
 800b214:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b218:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b21c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b220:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800b224:	eef0 5a67 	vmov.f32	s11, s15
 800b228:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800b22c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800b230:	ee15 1a90 	vmov	r1, s11
 800b234:	4019      	ands	r1, r3
 800b236:	ee05 1a90 	vmov	s11, r1
 800b23a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b23e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800b242:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b246:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b24a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b24e:	eeb0 6a67 	vmov.f32	s12, s15
 800b252:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b256:	ee16 1a10 	vmov	r1, s12
 800b25a:	4019      	ands	r1, r3
 800b25c:	ee06 1a10 	vmov	s12, r1
 800b260:	eeb0 7a46 	vmov.f32	s14, s12
 800b264:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b268:	493c      	ldr	r1, [pc, #240]	@ (800b35c <__ieee754_powf+0x454>)
 800b26a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800b26e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b272:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b360 <__ieee754_powf+0x458>
 800b276:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b364 <__ieee754_powf+0x45c>
 800b27a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b27e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b368 <__ieee754_powf+0x460>
 800b282:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b286:	ed91 7a00 	vldr	s14, [r1]
 800b28a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b28e:	ee07 2a10 	vmov	s14, r2
 800b292:	eef0 6a67 	vmov.f32	s13, s15
 800b296:	4a35      	ldr	r2, [pc, #212]	@ (800b36c <__ieee754_powf+0x464>)
 800b298:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b29c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800b2a0:	ed92 5a00 	vldr	s10, [r2]
 800b2a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b2ac:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b2b0:	ee16 2a90 	vmov	r2, s13
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	ee06 3a90 	vmov	s13, r3
 800b2ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b2be:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b2c2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800b2c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2ca:	e70f      	b.n	800b0ec <__ieee754_powf+0x1e4>
 800b2cc:	2601      	movs	r6, #1
 800b2ce:	e75d      	b.n	800b18c <__ieee754_powf+0x284>
 800b2d0:	d152      	bne.n	800b378 <__ieee754_powf+0x470>
 800b2d2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b370 <__ieee754_powf+0x468>
 800b2d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2da:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b2de:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e6:	f73f af29 	bgt.w	800b13c <__ieee754_powf+0x234>
 800b2ea:	2386      	movs	r3, #134	@ 0x86
 800b2ec:	e048      	b.n	800b380 <__ieee754_powf+0x478>
 800b2ee:	4a21      	ldr	r2, [pc, #132]	@ (800b374 <__ieee754_powf+0x46c>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d907      	bls.n	800b304 <__ieee754_powf+0x3fc>
 800b2f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2fc:	bf4c      	ite	mi
 800b2fe:	2001      	movmi	r0, #1
 800b300:	2000      	movpl	r0, #0
 800b302:	e6c1      	b.n	800b088 <__ieee754_powf+0x180>
 800b304:	d138      	bne.n	800b378 <__ieee754_powf+0x470>
 800b306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b30a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b312:	dbea      	blt.n	800b2ea <__ieee754_powf+0x3e2>
 800b314:	e7ee      	b.n	800b2f4 <__ieee754_powf+0x3ec>
 800b316:	bf00      	nop
 800b318:	00000000 	.word	0x00000000
 800b31c:	3f7ffff3 	.word	0x3f7ffff3
 800b320:	3f800007 	.word	0x3f800007
 800b324:	3eaaaaab 	.word	0x3eaaaaab
 800b328:	3fb8aa3b 	.word	0x3fb8aa3b
 800b32c:	36eca570 	.word	0x36eca570
 800b330:	3fb8aa00 	.word	0x3fb8aa00
 800b334:	4b800000 	.word	0x4b800000
 800b338:	001cc471 	.word	0x001cc471
 800b33c:	005db3d6 	.word	0x005db3d6
 800b340:	0800bbd8 	.word	0x0800bbd8
 800b344:	fffff000 	.word	0xfffff000
 800b348:	3e6c3255 	.word	0x3e6c3255
 800b34c:	3e53f142 	.word	0x3e53f142
 800b350:	3e8ba305 	.word	0x3e8ba305
 800b354:	3edb6db7 	.word	0x3edb6db7
 800b358:	3f19999a 	.word	0x3f19999a
 800b35c:	0800bbc8 	.word	0x0800bbc8
 800b360:	3f76384f 	.word	0x3f76384f
 800b364:	3f763800 	.word	0x3f763800
 800b368:	369dc3a0 	.word	0x369dc3a0
 800b36c:	0800bbd0 	.word	0x0800bbd0
 800b370:	3338aa3c 	.word	0x3338aa3c
 800b374:	43160000 	.word	0x43160000
 800b378:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b37c:	d971      	bls.n	800b462 <__ieee754_powf+0x55a>
 800b37e:	15db      	asrs	r3, r3, #23
 800b380:	3b7e      	subs	r3, #126	@ 0x7e
 800b382:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b386:	4118      	asrs	r0, r3
 800b388:	4408      	add	r0, r1
 800b38a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b38e:	4a3c      	ldr	r2, [pc, #240]	@ (800b480 <__ieee754_powf+0x578>)
 800b390:	3b7f      	subs	r3, #127	@ 0x7f
 800b392:	411a      	asrs	r2, r3
 800b394:	4002      	ands	r2, r0
 800b396:	ee07 2a10 	vmov	s14, r2
 800b39a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b39e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b3a2:	f1c3 0317 	rsb	r3, r3, #23
 800b3a6:	4118      	asrs	r0, r3
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3ae:	bfb8      	it	lt
 800b3b0:	4240      	neglt	r0, r0
 800b3b2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b3b6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800b484 <__ieee754_powf+0x57c>
 800b3ba:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800b488 <__ieee754_powf+0x580>
 800b3be:	ee17 3a10 	vmov	r3, s14
 800b3c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b3c6:	f023 030f 	bic.w	r3, r3, #15
 800b3ca:	ee07 3a10 	vmov	s14, r3
 800b3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3d2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b3d6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b3da:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800b48c <__ieee754_powf+0x584>
 800b3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3e2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b3e6:	eef0 6a67 	vmov.f32	s13, s15
 800b3ea:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b3ee:	eef0 5a66 	vmov.f32	s11, s13
 800b3f2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800b3f6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b3fa:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b3fe:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800b490 <__ieee754_powf+0x588>
 800b402:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800b494 <__ieee754_powf+0x58c>
 800b406:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b40a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800b498 <__ieee754_powf+0x590>
 800b40e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b412:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800b49c <__ieee754_powf+0x594>
 800b416:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b41a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800b4a0 <__ieee754_powf+0x598>
 800b41e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b422:	eeb0 6a66 	vmov.f32	s12, s13
 800b426:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800b42a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800b42e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800b432:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b436:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b43a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800b43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b442:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b446:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b44a:	ee10 3a10 	vmov	r3, s0
 800b44e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b452:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b456:	da06      	bge.n	800b466 <__ieee754_powf+0x55e>
 800b458:	f000 f82e 	bl	800b4b8 <scalbnf>
 800b45c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b460:	e56a      	b.n	800af38 <__ieee754_powf+0x30>
 800b462:	2000      	movs	r0, #0
 800b464:	e7a5      	b.n	800b3b2 <__ieee754_powf+0x4aa>
 800b466:	ee00 3a10 	vmov	s0, r3
 800b46a:	e7f7      	b.n	800b45c <__ieee754_powf+0x554>
 800b46c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b470:	e562      	b.n	800af38 <__ieee754_powf+0x30>
 800b472:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b4a4 <__ieee754_powf+0x59c>
 800b476:	e55f      	b.n	800af38 <__ieee754_powf+0x30>
 800b478:	eeb0 0a48 	vmov.f32	s0, s16
 800b47c:	e55c      	b.n	800af38 <__ieee754_powf+0x30>
 800b47e:	bf00      	nop
 800b480:	ff800000 	.word	0xff800000
 800b484:	3f317218 	.word	0x3f317218
 800b488:	3f317200 	.word	0x3f317200
 800b48c:	35bfbe8c 	.word	0x35bfbe8c
 800b490:	b5ddea0e 	.word	0xb5ddea0e
 800b494:	3331bb4c 	.word	0x3331bb4c
 800b498:	388ab355 	.word	0x388ab355
 800b49c:	bb360b61 	.word	0xbb360b61
 800b4a0:	3e2aaaab 	.word	0x3e2aaaab
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <fabsf>:
 800b4a8:	ee10 3a10 	vmov	r3, s0
 800b4ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4b0:	ee00 3a10 	vmov	s0, r3
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <scalbnf>:
 800b4b8:	ee10 3a10 	vmov	r3, s0
 800b4bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b4c0:	d02b      	beq.n	800b51a <scalbnf+0x62>
 800b4c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b4c6:	d302      	bcc.n	800b4ce <scalbnf+0x16>
 800b4c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b4cc:	4770      	bx	lr
 800b4ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b4d2:	d123      	bne.n	800b51c <scalbnf+0x64>
 800b4d4:	4b24      	ldr	r3, [pc, #144]	@ (800b568 <scalbnf+0xb0>)
 800b4d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b56c <scalbnf+0xb4>
 800b4da:	4298      	cmp	r0, r3
 800b4dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b4e0:	db17      	blt.n	800b512 <scalbnf+0x5a>
 800b4e2:	ee10 3a10 	vmov	r3, s0
 800b4e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b4ea:	3a19      	subs	r2, #25
 800b4ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b4f0:	4288      	cmp	r0, r1
 800b4f2:	dd15      	ble.n	800b520 <scalbnf+0x68>
 800b4f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b570 <scalbnf+0xb8>
 800b4f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b574 <scalbnf+0xbc>
 800b4fc:	ee10 3a10 	vmov	r3, s0
 800b500:	eeb0 7a67 	vmov.f32	s14, s15
 800b504:	2b00      	cmp	r3, #0
 800b506:	bfb8      	it	lt
 800b508:	eef0 7a66 	vmovlt.f32	s15, s13
 800b50c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b510:	4770      	bx	lr
 800b512:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b578 <scalbnf+0xc0>
 800b516:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b51a:	4770      	bx	lr
 800b51c:	0dd2      	lsrs	r2, r2, #23
 800b51e:	e7e5      	b.n	800b4ec <scalbnf+0x34>
 800b520:	4410      	add	r0, r2
 800b522:	28fe      	cmp	r0, #254	@ 0xfe
 800b524:	dce6      	bgt.n	800b4f4 <scalbnf+0x3c>
 800b526:	2800      	cmp	r0, #0
 800b528:	dd06      	ble.n	800b538 <scalbnf+0x80>
 800b52a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b52e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b532:	ee00 3a10 	vmov	s0, r3
 800b536:	4770      	bx	lr
 800b538:	f110 0f16 	cmn.w	r0, #22
 800b53c:	da09      	bge.n	800b552 <scalbnf+0x9a>
 800b53e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b578 <scalbnf+0xc0>
 800b542:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b57c <scalbnf+0xc4>
 800b546:	ee10 3a10 	vmov	r3, s0
 800b54a:	eeb0 7a67 	vmov.f32	s14, s15
 800b54e:	2b00      	cmp	r3, #0
 800b550:	e7d9      	b.n	800b506 <scalbnf+0x4e>
 800b552:	3019      	adds	r0, #25
 800b554:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b558:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b55c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b580 <scalbnf+0xc8>
 800b560:	ee07 3a90 	vmov	s15, r3
 800b564:	e7d7      	b.n	800b516 <scalbnf+0x5e>
 800b566:	bf00      	nop
 800b568:	ffff3cb0 	.word	0xffff3cb0
 800b56c:	4c000000 	.word	0x4c000000
 800b570:	7149f2ca 	.word	0x7149f2ca
 800b574:	f149f2ca 	.word	0xf149f2ca
 800b578:	0da24260 	.word	0x0da24260
 800b57c:	8da24260 	.word	0x8da24260
 800b580:	33000000 	.word	0x33000000

0800b584 <with_errnof>:
 800b584:	b510      	push	{r4, lr}
 800b586:	ed2d 8b02 	vpush	{d8}
 800b58a:	eeb0 8a40 	vmov.f32	s16, s0
 800b58e:	4604      	mov	r4, r0
 800b590:	f7fc ff70 	bl	8008474 <__errno>
 800b594:	eeb0 0a48 	vmov.f32	s0, s16
 800b598:	ecbd 8b02 	vpop	{d8}
 800b59c:	6004      	str	r4, [r0, #0]
 800b59e:	bd10      	pop	{r4, pc}

0800b5a0 <xflowf>:
 800b5a0:	b130      	cbz	r0, 800b5b0 <xflowf+0x10>
 800b5a2:	eef1 7a40 	vneg.f32	s15, s0
 800b5a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b5aa:	2022      	movs	r0, #34	@ 0x22
 800b5ac:	f7ff bfea 	b.w	800b584 <with_errnof>
 800b5b0:	eef0 7a40 	vmov.f32	s15, s0
 800b5b4:	e7f7      	b.n	800b5a6 <xflowf+0x6>
	...

0800b5b8 <__math_uflowf>:
 800b5b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b5c0 <__math_uflowf+0x8>
 800b5bc:	f7ff bff0 	b.w	800b5a0 <xflowf>
 800b5c0:	10000000 	.word	0x10000000

0800b5c4 <__math_oflowf>:
 800b5c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b5cc <__math_oflowf+0x8>
 800b5c8:	f7ff bfea 	b.w	800b5a0 <xflowf>
 800b5cc:	70000000 	.word	0x70000000

0800b5d0 <__ieee754_sqrtf>:
 800b5d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <_init>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	bf00      	nop
 800b5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5de:	bc08      	pop	{r3}
 800b5e0:	469e      	mov	lr, r3
 800b5e2:	4770      	bx	lr

0800b5e4 <_fini>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	bf00      	nop
 800b5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ea:	bc08      	pop	{r3}
 800b5ec:	469e      	mov	lr, r3
 800b5ee:	4770      	bx	lr
