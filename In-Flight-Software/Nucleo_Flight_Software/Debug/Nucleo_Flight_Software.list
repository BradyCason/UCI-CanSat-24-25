
Nucleo_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beb0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800c080  0800c080  0000d080  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c670  0800c670  0000e280  2**0
                  CONTENTS
  4 .ARM          00000008  0800c670  0800c670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c678  0800c678  0000e280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c678  0800c678  0000d678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c67c  0800c67c  0000d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800c680  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e60  20000280  0800c900  0000e280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010e0  0800c900  0000f0e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c12  00000000  00000000  0000e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ea  00000000  00000000  0001eec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000214b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8e  00000000  00000000  00022380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e35  00000000  00000000  00022f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130b5  00000000  00000000  00043d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c24f9  00000000  00000000  00056df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001192f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055c4  00000000  00000000  00119334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0011e8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c068 	.word	0x0800c068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0800c068 	.word	0x0800c068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <USART2_IRQHandler>:

uint8_t debug_packet[TX_BFR_SIZE];
HAL_StatusTypeDef result;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART2_IRQHandler(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <USART2_IRQHandler+0x10>)
 800102a:	f005 f88d 	bl	8006148 <HAL_UART_IRQHandler>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000514 	.word	0x20000514

08001038 <set_gps>:


uint8_t set_gps(char* buf, uint8_t order){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <set_gps+0x18>
		return 0;
 800104c:	2300      	movs	r3, #0
 800104e:	e0c8      	b.n	80011e2 <set_gps+0x1aa>

	switch(order) {
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b09      	cmp	r3, #9
 8001054:	f200 80bd 	bhi.w	80011d2 <set_gps+0x19a>
 8001058:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <set_gps+0x28>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001089 	.word	0x08001089
 8001064:	080010c1 	.word	0x080010c1
 8001068:	08001115 	.word	0x08001115
 800106c:	0800113d 	.word	0x0800113d
 8001070:	0800115f 	.word	0x0800115f
 8001074:	08001187 	.word	0x08001187
 8001078:	080011d3 	.word	0x080011d3
 800107c:	080011a9 	.word	0x080011a9
 8001080:	080011d3 	.word	0x080011d3
 8001084:	080011b9 	.word	0x080011b9
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f911 	bl	80002b0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	2b04      	cmp	r3, #4
 8001092:	d913      	bls.n	80010bc <set_gps+0x84>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b47      	cmp	r3, #71	@ 0x47
 800109a:	d10f      	bne.n	80010bc <set_gps+0x84>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3302      	adds	r3, #2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b47      	cmp	r3, #71	@ 0x47
 80010a4:	d10a      	bne.n	80010bc <set_gps+0x84>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3303      	adds	r3, #3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b47      	cmp	r3, #71	@ 0x47
 80010ae:	d105      	bne.n	80010bc <set_gps+0x84>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3304      	adds	r3, #4
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b41      	cmp	r3, #65	@ 0x41
 80010b8:	f000 808d 	beq.w	80011d6 <set_gps+0x19e>
			return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e090      	b.n	80011e2 <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 fa8b 	bl	80075e8 <atoi>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <set_gps+0x1b4>)
 80010d8:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3302      	adds	r3, #2
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fa7d 	bl	80075e8 <atoi>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <set_gps+0x1b8>)
 80010f4:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4618      	mov	r0, r3
 8001106:	f006 fa6f 	bl	80075e8 <atoi>
 800110a:	4603      	mov	r3, r0
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b39      	ldr	r3, [pc, #228]	@ (80011f4 <set_gps+0x1bc>)
 8001110:	701a      	strb	r2, [r3, #0]

		break;
 8001112:	e065      	b.n	80011e0 <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f006 fa64 	bl	80075e2 <atof>
 800111a:	ec51 0b10 	vmov	r0, r1, d0
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <set_gps+0x1c0>)
 8001124:	f7ff fbb2 	bl	800088c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd7a 	bl	8000c28 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a31      	ldr	r2, [pc, #196]	@ (80011fc <set_gps+0x1c4>)
 8001138:	6013      	str	r3, [r2, #0]
		break;
 800113a:	e051      	b.n	80011e0 <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	4b2f      	ldr	r3, [pc, #188]	@ (8001200 <set_gps+0x1c8>)
 8001142:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 8001144:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <set_gps+0x1c8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b53      	cmp	r3, #83	@ 0x53
 800114a:	d146      	bne.n	80011da <set_gps+0x1a2>
			gps_latitude*= -1;
 800114c:	4b2b      	ldr	r3, [pc, #172]	@ (80011fc <set_gps+0x1c4>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eef1 7a67 	vneg.f32	s15, s15
 8001156:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <set_gps+0x1c4>)
 8001158:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 800115c:	e03d      	b.n	80011da <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f006 fa3f 	bl	80075e2 <atof>
 8001164:	ec51 0b10 	vmov	r0, r1, d0
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <set_gps+0x1c0>)
 800116e:	f7ff fb8d 	bl	800088c <__aeabi_ddiv>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fd55 	bl	8000c28 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <set_gps+0x1cc>)
 8001182:	6013      	str	r3, [r2, #0]
		break;
 8001184:	e02c      	b.n	80011e0 <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <set_gps+0x1d0>)
 800118c:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 800118e:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <set_gps+0x1d0>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b57      	cmp	r3, #87	@ 0x57
 8001194:	d123      	bne.n	80011de <set_gps+0x1a6>
			gps_longitude*= -1;
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <set_gps+0x1cc>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	eef1 7a67 	vneg.f32	s15, s15
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <set_gps+0x1cc>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80011a6:	e01a      	b.n	80011de <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f006 fa1d 	bl	80075e8 <atoi>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <set_gps+0x1d4>)
 80011b4:	701a      	strb	r2, [r3, #0]
		break;
 80011b6:	e013      	b.n	80011e0 <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f006 fa12 	bl	80075e2 <atof>
 80011be:	ec53 2b10 	vmov	r2, r3, d0
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fd2f 	bl	8000c28 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <set_gps+0x1d8>)
 80011ce:	6013      	str	r3, [r2, #0]
		break;
 80011d0:	e006      	b.n	80011e0 <set_gps+0x1a8>
	default:
		break;
 80011d2:	bf00      	nop
 80011d4:	e004      	b.n	80011e0 <set_gps+0x1a8>
		break;
 80011d6:	bf00      	nop
 80011d8:	e002      	b.n	80011e0 <set_gps+0x1a8>
		break;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <set_gps+0x1a8>
		break;
 80011de:	bf00      	nop
	}

	return 0;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000ac8 	.word	0x20000ac8
 80011f0:	20000ac9 	.word	0x20000ac9
 80011f4:	20000aca 	.word	0x20000aca
 80011f8:	40590000 	.word	0x40590000
 80011fc:	20000ad0 	.word	0x20000ad0
 8001200:	20000ce3 	.word	0x20000ce3
 8001204:	20000ad4 	.word	0x20000ad4
 8001208:	20000ce4 	.word	0x20000ce4
 800120c:	20000ad8 	.word	0x20000ad8
 8001210:	20000acc 	.word	0x20000acc

08001214 <parse_nmea>:

bool parse_nmea(char *buf){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e032      	b.n	8001290 <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b2c      	cmp	r3, #44	@ 0x2c
 8001234:	d123      	bne.n	800127e <parse_nmea+0x6a>
			if (last != i){
 8001236:	7bba      	ldrb	r2, [r7, #14]
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	429a      	cmp	r2, r3
 800123c:	d018      	beq.n	8001270 <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 800123e:	22ff      	movs	r2, #255	@ 0xff
 8001240:	2100      	movs	r1, #0
 8001242:	4818      	ldr	r0, [pc, #96]	@ (80012a4 <parse_nmea+0x90>)
 8001244:	f007 fdf9 	bl	8008e3a <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	18d1      	adds	r1, r2, r3
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	7bbb      	ldrb	r3, [r7, #14]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	461a      	mov	r2, r3
 8001256:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <parse_nmea+0x90>)
 8001258:	f007 fe81 	bl	8008f5e <memcpy>
				if(set_gps(parse_buf, order)){
 800125c:	7b7b      	ldrb	r3, [r7, #13]
 800125e:	4619      	mov	r1, r3
 8001260:	4810      	ldr	r0, [pc, #64]	@ (80012a4 <parse_nmea+0x90>)
 8001262:	f7ff fee9 	bl	8001038 <set_gps>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <parse_nmea+0x5c>
					return false;
 800126c:	2300      	movs	r3, #0
 800126e:	e015      	b.n	800129c <parse_nmea+0x88>
				}
			}
			last = i + 1;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	3301      	adds	r3, #1
 8001274:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 8001276:	7b7b      	ldrb	r3, [r7, #13]
 8001278:	3301      	adds	r3, #1
 800127a:	737b      	strb	r3, [r7, #13]
 800127c:	e005      	b.n	800128a <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b2a      	cmp	r3, #42	@ 0x2a
 8001288:	d006      	beq.n	8001298 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	3301      	adds	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2bff      	cmp	r3, #255	@ 0xff
 8001294:	d1c9      	bne.n	800122a <parse_nmea+0x16>
 8001296:	e000      	b.n	800129a <parse_nmea+0x86>
			break;
 8001298:	bf00      	nop
		}
	}

	return true;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000be4 	.word	0x20000be4

080012a8 <calculate_altitude>:

float calculate_altitude(float pressure) {
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff f968 	bl	8000588 <__aeabi_f2d>
 80012b8:	a323      	add	r3, pc, #140	@ (adr r3, 8001348 <calculate_altitude+0xa0>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff fae5 	bl	800088c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fcad 	bl	8000c28 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001340 <calculate_altitude+0x98>
 80012d4:	ee00 3a10 	vmov	s0, r3
 80012d8:	f00a fafc 	bl	800b8d4 <powf>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e8:	ee17 0a90 	vmov	r0, s15
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	a311      	add	r3, pc, #68	@ (adr r3, 8001338 <calculate_altitude+0x90>)
 80012f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f6:	f7ff f99f 	bl	8000638 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4614      	mov	r4, r2
 8001300:	461d      	mov	r5, r3
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <calculate_altitude+0x9c>)
 8001304:	f993 3000 	ldrsb.w	r3, [r3]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f92b 	bl	8000564 <__aeabi_i2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7fe ffd9 	bl	80002cc <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc81 	bl	8000c28 <__aeabi_d2f>
 8001326:	4603      	mov	r3, r0
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	a3d70a3d 	.word	0xa3d70a3d
 800133c:	40e5a558 	.word	0x40e5a558
 8001340:	3e42d45b 	.word	0x3e42d45b
 8001344:	20000d84 	.word	0x20000d84
 8001348:	2f1a9fbe 	.word	0x2f1a9fbe
 800134c:	405954dd 	.word	0x405954dd

08001350 <read_MMC5603>:

void read_MMC5603(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	if (HAL_I2C_Master_Transmit(&hi2c2, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	2160      	movs	r1, #96	@ 0x60
 8001366:	4848      	ldr	r0, [pc, #288]	@ (8001488 <read_MMC5603+0x138>)
 8001368:	f002 f97c 	bl	8003664 <HAL_I2C_Master_Transmit>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d17f      	bne.n	8001472 <read_MMC5603+0x122>
		// Handle transmission error
		return;
	}

	HAL_Delay(10);
 8001372:	200a      	movs	r0, #10
 8001374:	f001 fca4 	bl	8002cc0 <HAL_Delay>

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c2, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 8001378:	f107 0208 	add.w	r2, r7, #8
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2309      	movs	r3, #9
 8001384:	2160      	movs	r1, #96	@ 0x60
 8001386:	4840      	ldr	r0, [pc, #256]	@ (8001488 <read_MMC5603+0x138>)
 8001388:	f002 fa6a 	bl	8003860 <HAL_I2C_Master_Receive>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d171      	bne.n	8001476 <read_MMC5603+0x126>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 8001392:	7a3b      	ldrb	r3, [r7, #8]
 8001394:	031a      	lsls	r2, r3, #12
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	4313      	orrs	r3, r2
 800139c:	7bba      	ldrb	r2, [r7, #14]
 800139e:	0912      	lsrs	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 80013a6:	7abb      	ldrb	r3, [r7, #10]
 80013a8:	031a      	lsls	r2, r3, #12
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	4313      	orrs	r3, r2
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	0912      	lsrs	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 80013ba:	7b3b      	ldrb	r3, [r7, #12]
 80013bc:	031a      	lsls	r2, r3, #12
 80013be:	7b7b      	ldrb	r3, [r7, #13]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	4313      	orrs	r3, r2
 80013c4:	7c3a      	ldrb	r2, [r7, #16]
 80013c6:	0912      	lsrs	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013d4:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013dc:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80013e4:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625;
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff f8c8 	bl	8000588 <__aeabi_f2d>
 80013f8:	a321      	add	r3, pc, #132	@ (adr r3, 8001480 <read_MMC5603+0x130>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f91b 	bl	8000638 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fc0d 	bl	8000c28 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	4a1e      	ldr	r2, [pc, #120]	@ (800148c <read_MMC5603+0x13c>)
 8001412:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f8b1 	bl	8000588 <__aeabi_f2d>
 8001426:	a316      	add	r3, pc, #88	@ (adr r3, 8001480 <read_MMC5603+0x130>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff f904 	bl	8000638 <__aeabi_dmul>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbf6 	bl	8000c28 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <read_MMC5603+0x140>)
 8001440:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ee17 0a90 	vmov	r0, s15
 8001450:	f7ff f89a 	bl	8000588 <__aeabi_f2d>
 8001454:	a30a      	add	r3, pc, #40	@ (adr r3, 8001480 <read_MMC5603+0x130>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	f7ff f8ed 	bl	8000638 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbdf 	bl	8000c28 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <read_MMC5603+0x144>)
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e002      	b.n	8001478 <read_MMC5603+0x128>
		return;
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <read_MMC5603+0x128>
		return;
 8001476:	bf00      	nop
}
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	d2f1a9fc 	.word	0xd2f1a9fc
 8001484:	3f10624d 	.word	0x3f10624d
 8001488:	200004c0 	.word	0x200004c0
 800148c:	20000ab8 	.word	0x20000ab8
 8001490:	20000abc 	.word	0x20000abc
 8001494:	20000ac0 	.word	0x20000ac0

08001498 <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	2309      	movs	r3, #9
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2201      	movs	r2, #1
 80014b0:	21c0      	movs	r1, #192	@ 0xc0
 80014b2:	482b      	ldr	r0, [pc, #172]	@ (8001560 <read_MPL3115A2+0xc8>)
 80014b4:	f002 fd00 	bl	8003eb8 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 80014b8:	793b      	ldrb	r3, [r7, #4]
 80014ba:	041a      	lsls	r2, r3, #16
 80014bc:	797b      	ldrb	r3, [r7, #5]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4313      	orrs	r3, r2
 80014c2:	79ba      	ldrb	r2, [r7, #6]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff f838 	bl	8000544 <__aeabi_ui2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <read_MPL3115A2+0xcc>)
 80014da:	f7ff f9d7 	bl	800088c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <read_MPL3115A2+0xd0>)
 80014ec:	f7ff f9ce 	bl	800088c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fb96 	bl	8000c28 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a1b      	ldr	r2, [pc, #108]	@ (800156c <read_MPL3115A2+0xd4>)
 8001500:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8001510:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001514:	111b      	asrs	r3, r3, #4
 8001516:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8001518:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f821 	bl	8000564 <__aeabi_i2d>
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <read_MPL3115A2+0xd8>)
 8001528:	f7ff f9b0 	bl	800088c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb78 	bl	8000c28 <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <read_MPL3115A2+0xdc>)
 800153c:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <read_MPL3115A2+0xd4>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f7ff feae 	bl	80012a8 <calculate_altitude>
 800154c:	eef0 7a40 	vmov.f32	s15, s0
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <read_MPL3115A2+0xe0>)
 8001552:	edc3 7a00 	vstr	s15, [r3]
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200004c0 	.word	0x200004c0
 8001564:	40100000 	.word	0x40100000
 8001568:	408f4000 	.word	0x408f4000
 800156c:	20000a98 	.word	0x20000a98
 8001570:	40300000 	.word	0x40300000
 8001574:	20000a94 	.word	0x20000a94
 8001578:	20000a90 	.word	0x20000a90
 800157c:	00000000 	.word	0x00000000

08001580 <read_MPU6050>:

void read_MPU6050(void) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8001586:	233b      	movs	r3, #59	@ 0x3b
 8001588:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 800158a:	2343      	movs	r3, #67	@ 0x43
 800158c:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDRESS, 3, 5);
 800159a:	2305      	movs	r3, #5
 800159c:	2203      	movs	r2, #3
 800159e:	21d0      	movs	r1, #208	@ 0xd0
 80015a0:	4871      	ldr	r0, [pc, #452]	@ (8001768 <read_MPU6050+0x1e8>)
 80015a2:	f002 febb 	bl	800431c <HAL_I2C_IsDeviceReady>
 80015a6:	4603      	mov	r3, r0
 80015a8:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80d2 	bne.w	8001756 <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &imu_addr, 1, 100);
 80015b2:	f107 0209 	add.w	r2, r7, #9
 80015b6:	2364      	movs	r3, #100	@ 0x64
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	21d0      	movs	r1, #208	@ 0xd0
 80015be:	486a      	ldr	r0, [pc, #424]	@ (8001768 <read_MPU6050+0x1e8>)
 80015c0:	f002 f850 	bl	8003664 <HAL_I2C_Master_Transmit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 80015c8:	7c7b      	ldrb	r3, [r7, #17]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15a      	bne.n	8001684 <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 80015ce:	463a      	mov	r2, r7
 80015d0:	2364      	movs	r3, #100	@ 0x64
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2306      	movs	r3, #6
 80015d6:	21d0      	movs	r1, #208	@ 0xd0
 80015d8:	4863      	ldr	r0, [pc, #396]	@ (8001768 <read_MPU6050+0x1e8>)
 80015da:	f002 f941 	bl	8003860 <HAL_I2C_Master_Receive>
 80015de:	4603      	mov	r3, r0
 80015e0:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80015e2:	7c7b      	ldrb	r3, [r7, #17]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d14d      	bne.n	8001684 <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 80015e8:	783b      	ldrb	r3, [r7, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	787b      	ldrb	r3, [r7, #1]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 80015f6:	78bb      	ldrb	r3, [r7, #2]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	4313      	orrs	r3, r2
 8001602:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 8001604:	793b      	ldrb	r3, [r7, #4]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	b21a      	sxth	r2, r3
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	b21b      	sxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 8001612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ffa4 	bl	8000564 <__aeabi_i2d>
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	4b52      	ldr	r3, [pc, #328]	@ (800176c <read_MPU6050+0x1ec>)
 8001622:	f7ff f933 	bl	800088c <__aeabi_ddiv>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	f7ff fafb 	bl	8000c28 <__aeabi_d2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4a4e      	ldr	r2, [pc, #312]	@ (8001770 <read_MPU6050+0x1f0>)
 8001636:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 8001638:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff91 	bl	8000564 <__aeabi_i2d>
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b49      	ldr	r3, [pc, #292]	@ (800176c <read_MPU6050+0x1ec>)
 8001648:	f7ff f920 	bl	800088c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f7ff fae8 	bl	8000c28 <__aeabi_d2f>
 8001658:	4603      	mov	r3, r0
 800165a:	4a46      	ldr	r2, [pc, #280]	@ (8001774 <read_MPU6050+0x1f4>)
 800165c:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 800165e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff7e 	bl	8000564 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <read_MPU6050+0x1ec>)
 800166e:	f7ff f90d 	bl	800088c <__aeabi_ddiv>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	f7ff fad5 	bl	8000c28 <__aeabi_d2f>
 800167e:	4603      	mov	r3, r0
 8001680:	4a3d      	ldr	r2, [pc, #244]	@ (8001778 <read_MPU6050+0x1f8>)
 8001682:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 8001684:	f107 0208 	add.w	r2, r7, #8
 8001688:	2364      	movs	r3, #100	@ 0x64
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	21d0      	movs	r1, #208	@ 0xd0
 8001690:	4835      	ldr	r0, [pc, #212]	@ (8001768 <read_MPU6050+0x1e8>)
 8001692:	f001 ffe7 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001696:	4603      	mov	r3, r0
 8001698:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 800169a:	7c7b      	ldrb	r3, [r7, #17]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d15a      	bne.n	8001756 <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 80016a0:	463a      	mov	r2, r7
 80016a2:	2364      	movs	r3, #100	@ 0x64
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2306      	movs	r3, #6
 80016a8:	21d0      	movs	r1, #208	@ 0xd0
 80016aa:	482f      	ldr	r0, [pc, #188]	@ (8001768 <read_MPU6050+0x1e8>)
 80016ac:	f002 f8d8 	bl	8003860 <HAL_I2C_Master_Receive>
 80016b0:	4603      	mov	r3, r0
 80016b2:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80016b4:	7c7b      	ldrb	r3, [r7, #17]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d14d      	bne.n	8001756 <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 80016ba:	783b      	ldrb	r3, [r7, #0]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 80016d6:	793b      	ldrb	r3, [r7, #4]
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	b21a      	sxth	r2, r3
 80016dc:	797b      	ldrb	r3, [r7, #5]
 80016de:	b21b      	sxth	r3, r3
 80016e0:	4313      	orrs	r3, r2
 80016e2:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 80016e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff3b 	bl	8000564 <__aeabi_i2d>
 80016ee:	a31c      	add	r3, pc, #112	@ (adr r3, 8001760 <read_MPU6050+0x1e0>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff f8ca 	bl	800088c <__aeabi_ddiv>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa92 	bl	8000c28 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4a1d      	ldr	r2, [pc, #116]	@ (800177c <read_MPU6050+0x1fc>)
 8001708:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 800170a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff28 	bl	8000564 <__aeabi_i2d>
 8001714:	a312      	add	r3, pc, #72	@ (adr r3, 8001760 <read_MPU6050+0x1e0>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa7f 	bl	8000c28 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <read_MPU6050+0x200>)
 800172e:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001730:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff15 	bl	8000564 <__aeabi_i2d>
 800173a:	a309      	add	r3, pc, #36	@ (adr r3, 8001760 <read_MPU6050+0x1e0>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7ff f8a4 	bl	800088c <__aeabi_ddiv>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff fa6c 	bl	8000c28 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a0c      	ldr	r2, [pc, #48]	@ (8001784 <read_MPU6050+0x204>)
 8001754:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	00000000 	.word	0x00000000
 8001764:	40606000 	.word	0x40606000
 8001768:	200004c0 	.word	0x200004c0
 800176c:	40d00000 	.word	0x40d00000
 8001770:	20000aac 	.word	0x20000aac
 8001774:	20000ab0 	.word	0x20000ab0
 8001778:	20000ab4 	.word	0x20000ab4
 800177c:	20000aa0 	.word	0x20000aa0
 8001780:	20000aa4 	.word	0x20000aa4
 8001784:	20000aa8 	.word	0x20000aa8

08001788 <read_PA1010D>:

void read_PA1010D(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af02      	add	r7, sp, #8
	uint8_t pa1010d_i;
	uint8_t pa1010d_bytebuf;

	/* PA1010D (GPS) */
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e015      	b.n	80017c0 <read_PA1010D+0x38>
		pa_ret = HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 100);
 8001794:	1dba      	adds	r2, r7, #6
 8001796:	2364      	movs	r3, #100	@ 0x64
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	2120      	movs	r1, #32
 800179e:	480e      	ldr	r0, [pc, #56]	@ (80017d8 <read_PA1010D+0x50>)
 80017a0:	f002 f85e 	bl	8003860 <HAL_I2C_Master_Receive>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <read_PA1010D+0x54>)
 80017aa:	701a      	strb	r2, [r3, #0]
		if (pa1010d_bytebuf == '$'){
 80017ac:	79bb      	ldrb	r3, [r7, #6]
 80017ae:	2b24      	cmp	r3, #36	@ 0x24
 80017b0:	d00a      	beq.n	80017c8 <read_PA1010D+0x40>
			break;
		}
		pa_buf[pa1010d_i] = pa1010d_bytebuf;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	79b9      	ldrb	r1, [r7, #6]
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <read_PA1010D+0x58>)
 80017b8:	54d1      	strb	r1, [r2, r3]
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	3301      	adds	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	2bff      	cmp	r3, #255	@ 0xff
 80017c4:	d1e6      	bne.n	8001794 <read_PA1010D+0xc>
 80017c6:	e000      	b.n	80017ca <read_PA1010D+0x42>
			break;
 80017c8:	bf00      	nop
	}
	parse_nmea(pa_buf);
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <read_PA1010D+0x58>)
 80017cc:	f7ff fd22 	bl	8001214 <parse_nmea>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200004c0 	.word	0x200004c0
 80017dc:	20000ad9 	.word	0x20000ad9
 80017e0:	20000adc 	.word	0x20000adc

080017e4 <read_INA219>:

void read_INA219(void) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af02      	add	r7, sp, #8
	/* INA219 (CURRENT/VOLTAGE) */
	uint8_t bus_add = 0x02; // need to use separate registers for everything
 80017ea:	2302      	movs	r3, #2
 80017ec:	71fb      	strb	r3, [r7, #7]

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c2, INA219_ADDRESS, 3, 5);
 80017ee:	2305      	movs	r3, #5
 80017f0:	2203      	movs	r2, #3
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	4824      	ldr	r0, [pc, #144]	@ (8001888 <read_INA219+0xa4>)
 80017f6:	f002 fd91 	bl	800431c <HAL_I2C_IsDeviceReady>
 80017fa:	4603      	mov	r3, r0
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <read_INA219+0xa8>)
 8001800:	701a      	strb	r2, [r3, #0]
	if (ina_ret == HAL_OK) {
 8001802:	4b22      	ldr	r3, [pc, #136]	@ (800188c <read_INA219+0xa8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13a      	bne.n	8001880 <read_INA219+0x9c>
		ina_ret = HAL_I2C_Master_Transmit(&hi2c2, INA219_ADDRESS, &bus_add, 1, 100);
 800180a:	1dfa      	adds	r2, r7, #7
 800180c:	2364      	movs	r3, #100	@ 0x64
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	2180      	movs	r1, #128	@ 0x80
 8001814:	481c      	ldr	r0, [pc, #112]	@ (8001888 <read_INA219+0xa4>)
 8001816:	f001 ff25 	bl	8003664 <HAL_I2C_Master_Transmit>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <read_INA219+0xa8>)
 8001820:	701a      	strb	r2, [r3, #0]
		if (ina_ret == HAL_OK) {
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <read_INA219+0xa8>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d12a      	bne.n	8001880 <read_INA219+0x9c>
			HAL_I2C_Master_Receive(&hi2c2, INA219_ADDRESS, ina_buf, 2, 10);
 800182a:	230a      	movs	r3, #10
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2302      	movs	r3, #2
 8001830:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <read_INA219+0xac>)
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	4814      	ldr	r0, [pc, #80]	@ (8001888 <read_INA219+0xa4>)
 8001836:	f002 f813 	bl	8003860 <HAL_I2C_Master_Receive>

			//raw_shunt_voltage = abs((int16_t)(ina_buf[0] << 8 | ina_buf[1]));
			raw_bus_voltage = (int16_t)(ina_buf[0] << 8 | ina_buf [1]);
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <read_INA219+0xac>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <read_INA219+0xac>)
 8001844:	785b      	ldrb	r3, [r3, #1]
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b21a      	sxth	r2, r3
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <read_INA219+0xb0>)
 800184e:	801a      	strh	r2, [r3, #0]
			//raw_power = (int16_t)(ina_buf[4] << 8 | ina_buf [5]);
			//raw_current = (int16_t)(ina_buf[6] << 8 | ina_buf [7]);

			//shunt_voltage = raw_shunt_voltage*10.0;
			bus_voltage = raw_bus_voltage/1600.0;
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <read_INA219+0xb0>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe84 	bl	8000564 <__aeabi_i2d>
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <read_INA219+0xb4>)
 8001862:	f7ff f813 	bl	800088c <__aeabi_ddiv>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f7ff f9db 	bl	8000c28 <__aeabi_d2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4a09      	ldr	r2, [pc, #36]	@ (800189c <read_INA219+0xb8>)
 8001876:	6013      	str	r3, [r2, #0]
			//power = raw_power*20/32768.0;
			//current = raw_current/32768.0;

			voltage = bus_voltage;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <read_INA219+0xb8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <read_INA219+0xbc>)
 800187e:	6013      	str	r3, [r2, #0]
		}

	}

}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200004c0 	.word	0x200004c0
 800188c:	20000ce5 	.word	0x20000ce5
 8001890:	20000ce8 	.word	0x20000ce8
 8001894:	20000cf0 	.word	0x20000cf0
 8001898:	40990000 	.word	0x40990000
 800189c:	20000cf4 	.word	0x20000cf4
 80018a0:	20000a9c 	.word	0x20000a9c

080018a4 <init_MMC5603>:

void init_MMC5603(void) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 80018aa:	2364      	movs	r3, #100	@ 0x64
 80018ac:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 80018ae:	2380      	movs	r3, #128	@ 0x80
 80018b0:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 80018b6:	2310      	movs	r3, #16
 80018b8:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	1d7b      	adds	r3, r7, #5
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	221c      	movs	r2, #28
 80018cc:	2160      	movs	r1, #96	@ 0x60
 80018ce:	482f      	ldr	r0, [pc, #188]	@ (800198c <init_MMC5603+0xe8>)
 80018d0:	f002 f9f8 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80018d4:	2014      	movs	r0, #20
 80018d6:	f001 f9f3 	bl	8002cc0 <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 80018da:	2308      	movs	r3, #8
 80018dc:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	2301      	movs	r3, #1
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	221b      	movs	r2, #27
 80018f0:	2160      	movs	r1, #96	@ 0x60
 80018f2:	4826      	ldr	r0, [pc, #152]	@ (800198c <init_MMC5603+0xe8>)
 80018f4:	f002 f9e6 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f001 f9e1 	bl	8002cc0 <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 80018fe:	2310      	movs	r3, #16
 8001900:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2301      	movs	r3, #1
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	1cbb      	adds	r3, r7, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	221b      	movs	r2, #27
 8001914:	2160      	movs	r1, #96	@ 0x60
 8001916:	481d      	ldr	r0, [pc, #116]	@ (800198c <init_MMC5603+0xe8>)
 8001918:	f002 f9d4 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800191c:	2001      	movs	r0, #1
 800191e:	f001 f9cf 	bl	8002cc0 <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	1dfb      	adds	r3, r7, #7
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2301      	movs	r3, #1
 8001932:	221a      	movs	r2, #26
 8001934:	2160      	movs	r1, #96	@ 0x60
 8001936:	4815      	ldr	r0, [pc, #84]	@ (800198c <init_MMC5603+0xe8>)
 8001938:	f002 f9c4 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800193c:	200a      	movs	r0, #10
 800193e:	f001 f9bf 	bl	8002cc0 <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	221b      	movs	r2, #27
 8001954:	2160      	movs	r1, #96	@ 0x60
 8001956:	480d      	ldr	r0, [pc, #52]	@ (800198c <init_MMC5603+0xe8>)
 8001958:	f002 f9b4 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800195c:	200a      	movs	r0, #10
 800195e:	f001 f9af 	bl	8002cc0 <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	9302      	str	r3, [sp, #8]
 8001968:	2301      	movs	r3, #1
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	221d      	movs	r2, #29
 8001974:	2160      	movs	r1, #96	@ 0x60
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <init_MMC5603+0xe8>)
 8001978:	f002 f9a4 	bl	8003cc4 <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 800197c:	200a      	movs	r0, #10
 800197e:	f001 f99f 	bl	8002cc0 <HAL_Delay>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200004c0 	.word	0x200004c0

08001990 <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	1dfb      	adds	r3, r7, #7
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	220c      	movs	r2, #12
 80019ac:	21c0      	movs	r1, #192	@ 0xc0
 80019ae:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <init_MPL3115A2+0x50>)
 80019b0:	f002 fa82 	bl	8003eb8 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2bc4      	cmp	r3, #196	@ 0xc4
 80019b8:	d10e      	bne.n	80019d8 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 80019ba:	2339      	movs	r3, #57	@ 0x39
 80019bc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2301      	movs	r3, #1
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	2226      	movs	r2, #38	@ 0x26
 80019d0:	21c0      	movs	r1, #192	@ 0xc0
 80019d2:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <init_MPL3115A2+0x50>)
 80019d4:	f002 f976 	bl	8003cc4 <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200004c0 	.word	0x200004c0

080019e4 <init_MPU6050>:

void init_MPU6050(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 80019ee:	2307      	movs	r3, #7
 80019f0:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	717b      	strb	r3, [r7, #5]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 80019f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	2301      	movs	r3, #1
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	226b      	movs	r2, #107	@ 0x6b
 8001a08:	21d0      	movs	r1, #208	@ 0xd0
 8001a0a:	4817      	ldr	r0, [pc, #92]	@ (8001a68 <init_MPU6050+0x84>)
 8001a0c:	f002 f95a 	bl	8003cc4 <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 8001a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2219      	movs	r2, #25
 8001a22:	21d0      	movs	r1, #208	@ 0xd0
 8001a24:	4810      	ldr	r0, [pc, #64]	@ (8001a68 <init_MPU6050+0x84>)
 8001a26:	f002 f94d 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 8001a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	1d7b      	adds	r3, r7, #5
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	221b      	movs	r2, #27
 8001a3c:	21d0      	movs	r1, #208	@ 0xd0
 8001a3e:	480a      	ldr	r0, [pc, #40]	@ (8001a68 <init_MPU6050+0x84>)
 8001a40:	f002 f940 	bl	8003cc4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 8001a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	1d7b      	adds	r3, r7, #5
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	221c      	movs	r2, #28
 8001a56:	21d0      	movs	r1, #208	@ 0xd0
 8001a58:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <init_MPU6050+0x84>)
 8001a5a:	f002 f933 	bl	8003cc4 <HAL_I2C_Mem_Write>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200004c0 	.word	0x200004c0

08001a6c <init_PA1010D>:

void init_PA1010D(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
	uint8_t pa1010d_bytebuf;

//	pa_init_ret[0] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
	pa_init_ret[1] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_INIT, strlen( (char *)PA1010D_INIT), 1000);
 8001a72:	4835      	ldr	r0, [pc, #212]	@ (8001b48 <init_PA1010D+0xdc>)
 8001a74:	f7fe fc1c 	bl	80002b0 <strlen>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a80:	9200      	str	r2, [sp, #0]
 8001a82:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <init_PA1010D+0xdc>)
 8001a84:	2120      	movs	r1, #32
 8001a86:	4831      	ldr	r0, [pc, #196]	@ (8001b4c <init_PA1010D+0xe0>)
 8001a88:	f001 fdec 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <init_PA1010D+0xe4>)
 8001a92:	705a      	strb	r2, [r3, #1]
	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
 8001a94:	482f      	ldr	r0, [pc, #188]	@ (8001b54 <init_PA1010D+0xe8>)
 8001a96:	f7fe fc0b 	bl	80002b0 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001aa2:	9200      	str	r2, [sp, #0]
 8001aa4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b54 <init_PA1010D+0xe8>)
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	4828      	ldr	r0, [pc, #160]	@ (8001b4c <init_PA1010D+0xe0>)
 8001aaa:	f001 fddb 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b27      	ldr	r3, [pc, #156]	@ (8001b50 <init_PA1010D+0xe4>)
 8001ab4:	709a      	strb	r2, [r3, #2]
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);
	pa_init_ret[4] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 8001ab6:	4828      	ldr	r0, [pc, #160]	@ (8001b58 <init_PA1010D+0xec>)
 8001ab8:	f7fe fbfa 	bl	80002b0 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	4a24      	ldr	r2, [pc, #144]	@ (8001b58 <init_PA1010D+0xec>)
 8001ac8:	2120      	movs	r1, #32
 8001aca:	4820      	ldr	r0, [pc, #128]	@ (8001b4c <init_PA1010D+0xe0>)
 8001acc:	f001 fdca 	bl	8003664 <HAL_I2C_Master_Transmit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <init_PA1010D+0xe4>)
 8001ad6:	711a      	strb	r2, [r3, #4]

	//Wait for stabilization
	for(int j=0; j<10; j++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e02c      	b.n	8001b38 <init_PA1010D+0xcc>
		for(int i=0; i<255; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	e017      	b.n	8001b14 <init_PA1010D+0xa8>
			result = HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, 10);
 8001ae4:	1dfa      	adds	r2, r7, #7
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	2120      	movs	r1, #32
 8001aee:	4817      	ldr	r0, [pc, #92]	@ (8001b4c <init_PA1010D+0xe0>)
 8001af0:	f001 feb6 	bl	8003860 <HAL_I2C_Master_Receive>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <init_PA1010D+0xf0>)
 8001afa:	701a      	strb	r2, [r3, #0]
			if (pa1010d_bytebuf == '$'){
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b24      	cmp	r3, #36	@ 0x24
 8001b00:	d00c      	beq.n	8001b1c <init_PA1010D+0xb0>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 8001b02:	79f9      	ldrb	r1, [r7, #7]
 8001b04:	4a16      	ldr	r2, [pc, #88]	@ (8001b60 <init_PA1010D+0xf4>)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2bfe      	cmp	r3, #254	@ 0xfe
 8001b18:	dde4      	ble.n	8001ae4 <init_PA1010D+0x78>
 8001b1a:	e000      	b.n	8001b1e <init_PA1010D+0xb2>
				break;
 8001b1c:	bf00      	nop
		}
		if (j>5){
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	dd02      	ble.n	8001b2a <init_PA1010D+0xbe>
			parse_nmea(pa_buf);
 8001b24:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <init_PA1010D+0xf4>)
 8001b26:	f7ff fb75 	bl	8001214 <parse_nmea>
		}
		HAL_Delay(500);
 8001b2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b2e:	f001 f8c7 	bl	8002cc0 <HAL_Delay>
	for(int j=0; j<10; j++){
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3301      	adds	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	ddcf      	ble.n	8001ade <init_PA1010D+0x72>
	}
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000064 	.word	0x20000064
 8001b4c:	200004c0 	.word	0x200004c0
 8001b50:	20000bdc 	.word	0x20000bdc
 8001b54:	20000054 	.word	0x20000054
 8001b58:	20000074 	.word	0x20000074
 8001b5c:	20000f8b 	.word	0x20000f8b
 8001b60:	20000adc 	.word	0x20000adc

08001b64 <init_INA219>:

void init_INA219(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af04      	add	r7, sp, #16
	uint8_t ina_config[2] = {0b00000001, 0b00011101};
 8001b6a:	f641 5301 	movw	r3, #7425	@ 0x1d01
 8001b6e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);
 8001b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2301      	movs	r3, #1
 8001b80:	2205      	movs	r2, #5
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <init_INA219+0x30>)
 8001b86:	f002 f89d 	bl	8003cc4 <HAL_I2C_Mem_Write>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200004c0 	.word	0x200004c0

08001b98 <read_sensors>:

void read_sensors(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	read_MPL3115A2(); // Temperature/ Pressure
 8001b9c:	f7ff fc7c 	bl	8001498 <read_MPL3115A2>
	read_MMC5603(); // Magnetic Field
 8001ba0:	f7ff fbd6 	bl	8001350 <read_MMC5603>
	read_MPU6050(); // Accel/ tilt
 8001ba4:	f7ff fcec 	bl	8001580 <read_MPU6050>
	read_PA1010D(); // GPS
 8001ba8:	f7ff fdee 	bl	8001788 <read_PA1010D>
	read_INA219(); // Voltage
 8001bac:	f7ff fe1a 	bl	80017e4 <read_INA219>
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <init_sensors>:

void init_sensors(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	init_MPL3115A2();
 8001bb8:	f7ff feea 	bl	8001990 <init_MPL3115A2>
	init_MMC5603();
 8001bbc:	f7ff fe72 	bl	80018a4 <init_MMC5603>
	init_MPU6050();
 8001bc0:	f7ff ff10 	bl	80019e4 <init_MPU6050>
	init_PA1010D();
 8001bc4:	f7ff ff52 	bl	8001a6c <init_PA1010D>
	init_INA219();
 8001bc8:	f7ff ffcc 	bl	8001b64 <init_INA219>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <init_commands>:

void init_commands(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <init_commands+0x68>)
 8001bd6:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <init_commands+0x6c>)
 8001bd8:	210e      	movs	r1, #14
 8001bda:	4819      	ldr	r0, [pc, #100]	@ (8001c40 <init_commands+0x70>)
 8001bdc:	f007 f8b6 	bl	8008d4c <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <init_commands+0x68>)
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <init_commands+0x74>)
 8001be4:	210f      	movs	r1, #15
 8001be6:	4818      	ldr	r0, [pc, #96]	@ (8001c48 <init_commands+0x78>)
 8001be8:	f007 f8b0 	bl	8008d4c <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <init_commands+0x68>)
 8001bee:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <init_commands+0x7c>)
 8001bf0:	210d      	movs	r1, #13
 8001bf2:	4817      	ldr	r0, [pc, #92]	@ (8001c50 <init_commands+0x80>)
 8001bf4:	f007 f8aa 	bl	8008d4c <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL,", TEAM_ID);
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <init_commands+0x68>)
 8001bfa:	4a16      	ldr	r2, [pc, #88]	@ (8001c54 <init_commands+0x84>)
 8001bfc:	210e      	movs	r1, #14
 8001bfe:	4816      	ldr	r0, [pc, #88]	@ (8001c58 <init_commands+0x88>)
 8001c00:	f007 f8a4 	bl	8008d4c <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <init_commands+0x68>)
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <init_commands+0x8c>)
 8001c08:	2110      	movs	r1, #16
 8001c0a:	4815      	ldr	r0, [pc, #84]	@ (8001c60 <init_commands+0x90>)
 8001c0c:	f007 f89e 	bl	8008d4c <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 8001c10:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <init_commands+0x68>)
 8001c12:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <init_commands+0x94>)
 8001c14:	2111      	movs	r1, #17
 8001c16:	4814      	ldr	r0, [pc, #80]	@ (8001c68 <init_commands+0x98>)
 8001c18:	f007 f898 	bl	8008d4c <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <init_commands+0x68>)
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <init_commands+0x9c>)
 8001c20:	210f      	movs	r1, #15
 8001c22:	4813      	ldr	r0, [pc, #76]	@ (8001c70 <init_commands+0xa0>)
 8001c24:	f007 f892 	bl	8008d4c <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <init_commands+0x68>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <init_commands+0xa4>)
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4812      	ldr	r0, [pc, #72]	@ (8001c78 <init_commands+0xa8>)
 8001c30:	f007 f88c 	bl	8008d4c <sniprintf>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	0800c080 	.word	0x0800c080
 8001c3c:	0800c088 	.word	0x0800c088
 8001c40:	20000cf8 	.word	0x20000cf8
 8001c44:	0800c094 	.word	0x0800c094
 8001c48:	20000d08 	.word	0x20000d08
 8001c4c:	0800c0a4 	.word	0x0800c0a4
 8001c50:	20000d18 	.word	0x20000d18
 8001c54:	0800c0b0 	.word	0x0800c0b0
 8001c58:	20000d28 	.word	0x20000d28
 8001c5c:	0800c0bc 	.word	0x0800c0bc
 8001c60:	20000d38 	.word	0x20000d38
 8001c64:	0800c0cc 	.word	0x0800c0cc
 8001c68:	20000d48 	.word	0x20000d48
 8001c6c:	0800c0dc 	.word	0x0800c0dc
 8001c70:	20000d5c 	.word	0x20000d5c
 8001c74:	0800c0ec 	.word	0x0800c0ec
 8001c78:	20000d6c 	.word	0x20000d6c

08001c7c <calculate_checksum>:

uint8_t calculate_checksum(const char *data) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    uint32_t sum = 0;  // Use a larger type for summing
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
    size_t len = strlen(data);  // Get the length of the string
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7fe fb11 	bl	80002b0 <strlen>
 8001c8e:	60f8      	str	r0, [r7, #12]

    // Iterate over each byte in the string and sum their values
    for (size_t i = 0; i < len; i++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	e00a      	b.n	8001cac <calculate_checksum+0x30>
        sum += (uint8_t)data[i];  // Cast char to uint8_t and add to sum
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < len; i++) {
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3f0      	bcc.n	8001c96 <calculate_checksum+0x1a>
    }

    // Return the result modulo 256 (0x100)
    return (uint8_t)(sum % 256);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	b2db      	uxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <create_telemetry>:

void create_telemetry(uint8_t *ret, uint8_t part){
 8001cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc4:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8001cc8:	af2e      	add	r7, sp, #184	@ 0xb8
 8001cca:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001cce:	460b      	mov	r3, r1
 8001cd0:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	char tel_buf[TX_BFR_SIZE-18] = {0};	//Preload buffer
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cda:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cde:	22e9      	movs	r2, #233	@ 0xe9
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f007 f8a9 	bl	8008e3a <memset>

	packet_count += 1;
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f1c <create_telemetry+0x25c>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b89      	ldr	r3, [pc, #548]	@ (8001f1c <create_telemetry+0x25c>)
 8001cf8:	801a      	strh	r2, [r3, #0]
	/* Variables TEAM_ID, MISSION_TIME, PACKET_COUNT, MODE, STATE, ALTITUDE,
	TEMPERATURE, PRESSURE, VOLTAGE, GYRO_R, GYRO_P, GYRO_Y, ACCEL_R,
	ACCEL_P, ACCEL_Y, MAG_R, MAG_P, MAG_Y, AUTO_GYRO_ROTATION_RATE,
	GPS_TIME, GPS_ALTITUDE, GPS_LATITUDE, GPS_LONGITUDE, GPS_SATS,
	CMD_ECHO [,,OPTIONAL_DATA] */
	snprintf(tel_buf, TX_BFR_SIZE,
 8001cfa:	4b89      	ldr	r3, [pc, #548]	@ (8001f20 <create_telemetry+0x260>)
 8001cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001d00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d04:	4b87      	ldr	r3, [pc, #540]	@ (8001f24 <create_telemetry+0x264>)
 8001d06:	f993 3000 	ldrsb.w	r3, [r3]
 8001d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d0e:	4b86      	ldr	r3, [pc, #536]	@ (8001f28 <create_telemetry+0x268>)
 8001d10:	f993 3000 	ldrsb.w	r3, [r3]
 8001d14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d16:	4b81      	ldr	r3, [pc, #516]	@ (8001f1c <create_telemetry+0x25c>)
 8001d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d1e:	4b83      	ldr	r3, [pc, #524]	@ (8001f2c <create_telemetry+0x26c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	677b      	str	r3, [r7, #116]	@ 0x74
 8001d24:	4b82      	ldr	r3, [pc, #520]	@ (8001f30 <create_telemetry+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8001d32:	4b80      	ldr	r3, [pc, #512]	@ (8001f34 <create_telemetry+0x274>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc26 	bl	8000588 <__aeabi_f2d>
 8001d3c:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8001d40:	4b7d      	ldr	r3, [pc, #500]	@ (8001f38 <create_telemetry+0x278>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc1f 	bl	8000588 <__aeabi_f2d>
 8001d4a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001f3c <create_telemetry+0x27c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fc18 	bl	8000588 <__aeabi_f2d>
 8001d58:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001d5c:	4b78      	ldr	r3, [pc, #480]	@ (8001f40 <create_telemetry+0x280>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fc11 	bl	8000588 <__aeabi_f2d>
 8001d66:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <create_telemetry+0x284>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fc0a 	bl	8000588 <__aeabi_f2d>
 8001d74:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001d78:	4b73      	ldr	r3, [pc, #460]	@ (8001f48 <create_telemetry+0x288>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fc03 	bl	8000588 <__aeabi_f2d>
 8001d82:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001d86:	4b71      	ldr	r3, [pc, #452]	@ (8001f4c <create_telemetry+0x28c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbfc 	bl	8000588 <__aeabi_f2d>
 8001d90:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001d94:	4b6e      	ldr	r3, [pc, #440]	@ (8001f50 <create_telemetry+0x290>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbf5 	bl	8000588 <__aeabi_f2d>
 8001d9e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001da2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f54 <create_telemetry+0x294>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbee 	bl	8000588 <__aeabi_f2d>
 8001dac:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001db0:	4b69      	ldr	r3, [pc, #420]	@ (8001f58 <create_telemetry+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbe7 	bl	8000588 <__aeabi_f2d>
 8001dba:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	@ (8001f5c <create_telemetry+0x29c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbe0 	bl	8000588 <__aeabi_f2d>
 8001dc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001dcc:	4b64      	ldr	r3, [pc, #400]	@ (8001f60 <create_telemetry+0x2a0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbd9 	bl	8000588 <__aeabi_f2d>
 8001dd6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dda:	4b62      	ldr	r3, [pc, #392]	@ (8001f64 <create_telemetry+0x2a4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbd2 	bl	8000588 <__aeabi_f2d>
 8001de4:	4682      	mov	sl, r0
 8001de6:	468b      	mov	fp, r1
 8001de8:	4b5f      	ldr	r3, [pc, #380]	@ (8001f68 <create_telemetry+0x2a8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dee:	4b5f      	ldr	r3, [pc, #380]	@ (8001f6c <create_telemetry+0x2ac>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f70 <create_telemetry+0x2b0>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001f74 <create_telemetry+0x2b4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbc2 	bl	8000588 <__aeabi_f2d>
 8001e04:	4680      	mov	r8, r0
 8001e06:	4689      	mov	r9, r1
 8001e08:	4b5b      	ldr	r3, [pc, #364]	@ (8001f78 <create_telemetry+0x2b8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fbbb 	bl	8000588 <__aeabi_f2d>
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
 8001e16:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <create_telemetry+0x2bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fbb4 	bl	8000588 <__aeabi_f2d>
 8001e20:	4b57      	ldr	r3, [pc, #348]	@ (8001f80 <create_telemetry+0x2c0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f107 0690 	add.w	r6, r7, #144	@ 0x90
 8001e2a:	4b56      	ldr	r3, [pc, #344]	@ (8001f84 <create_telemetry+0x2c4>)
 8001e2c:	932d      	str	r3, [sp, #180]	@ 0xb4
 8001e2e:	922c      	str	r2, [sp, #176]	@ 0xb0
 8001e30:	e9cd 012a 	strd	r0, r1, [sp, #168]	@ 0xa8
 8001e34:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 8001e38:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	9224      	str	r2, [sp, #144]	@ 0x90
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	9223      	str	r2, [sp, #140]	@ 0x8c
 8001e44:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e46:	9222      	str	r2, [sp, #136]	@ 0x88
 8001e48:	e9cd ab20 	strd	sl, fp, [sp, #128]	@ 0x80
 8001e4c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e50:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8001e54:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e58:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 8001e5c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e60:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8001e64:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e68:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8001e6c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001e70:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8001e74:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001e78:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8001e7c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001e80:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8001e84:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001e88:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001e8c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001e90:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001e94:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001e98:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001e9c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001ea0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001ea4:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001ea8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001eac:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8001eb0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001eb4:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <create_telemetry+0x2c8>)
 8001eb6:	9305      	str	r3, [sp, #20]
 8001eb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001eba:	9204      	str	r2, [sp, #16]
 8001ebc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001ebe:	9203      	str	r2, [sp, #12]
 8001ec0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001ec2:	9202      	str	r2, [sp, #8]
 8001ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001ec8:	9201      	str	r2, [sp, #4]
 8001eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <create_telemetry+0x2cc>)
 8001ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f90 <create_telemetry+0x2d0>)
 8001ed4:	21ff      	movs	r1, #255	@ 0xff
 8001ed6:	4630      	mov	r0, r6
 8001ed8:	f006 ff38 	bl	8008d4c <sniprintf>
			gps_latitude,
			gps_longitude,
			gps_sats,
			cmd_echo
			);
	tx_count = strlen(tel_buf);
 8001edc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe f9e5 	bl	80002b0 <strlen>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b2a      	ldr	r3, [pc, #168]	@ (8001f94 <create_telemetry+0x2d4>)
 8001eec:	701a      	strb	r2, [r3, #0]

	memset(ret, '/0', sizeof(ret));
 8001eee:	2204      	movs	r2, #4
 8001ef0:	f642 7130 	movw	r1, #12080	@ 0x2f30
 8001ef4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ef8:	f006 ff9f 	bl	8008e3a <memset>
	memcpy(ret, tel_buf, TX_BFR_SIZE-18);
 8001efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f00:	4618      	mov	r0, r3
 8001f02:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f06:	22ed      	movs	r2, #237	@ 0xed
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f007 f828 	bl	8008f5e <memcpy>
}
 8001f0e:	bf00      	nop
 8001f10:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 8001f14:	46bd      	mov	sp, r7
 8001f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000a8c 	.word	0x20000a8c
 8001f20:	20000a88 	.word	0x20000a88
 8001f24:	20000a89 	.word	0x20000a89
 8001f28:	20000a8a 	.word	0x20000a8a
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	20000a90 	.word	0x20000a90
 8001f34:	20000a94 	.word	0x20000a94
 8001f38:	20000a98 	.word	0x20000a98
 8001f3c:	20000a9c 	.word	0x20000a9c
 8001f40:	20000aa0 	.word	0x20000aa0
 8001f44:	20000aa4 	.word	0x20000aa4
 8001f48:	20000aa8 	.word	0x20000aa8
 8001f4c:	20000aac 	.word	0x20000aac
 8001f50:	20000ab0 	.word	0x20000ab0
 8001f54:	20000ab4 	.word	0x20000ab4
 8001f58:	20000ab8 	.word	0x20000ab8
 8001f5c:	20000abc 	.word	0x20000abc
 8001f60:	20000ac0 	.word	0x20000ac0
 8001f64:	20000ac4 	.word	0x20000ac4
 8001f68:	20000ac8 	.word	0x20000ac8
 8001f6c:	20000ac9 	.word	0x20000ac9
 8001f70:	20000aca 	.word	0x20000aca
 8001f74:	20000acc 	.word	0x20000acc
 8001f78:	20000ad0 	.word	0x20000ad0
 8001f7c:	20000ad4 	.word	0x20000ad4
 8001f80:	20000ad8 	.word	0x20000ad8
 8001f84:	20000014 	.word	0x20000014
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	0800c080 	.word	0x0800c080
 8001f90:	0800c0fc 	.word	0x0800c0fc
 8001f94:	200004bf 	.word	0x200004bf

08001f98 <transmit_packet>:

uint16_t transmit_packet(	uint8_t *T_packet,		//w
							uint8_t *T_data,		//r
							uint16_t datanum)		//r
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,length; 	//the length of data for checksum

	/*Write Packet Length to Packet*/
	uint16_t packet_length=datanum+3;				// 1 byte for start delimiter, 1 for checksum, 1 for \n
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	3303      	adds	r3, #3
 8001faa:	82bb      	strh	r3, [r7, #20]
	length=packet_length-4;							// length for checksum
 8001fac:	8abb      	ldrh	r3, [r7, #20]
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	827b      	strh	r3, [r7, #18]
	T_packet[0]=0x7E;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	227e      	movs	r2, #126	@ 0x7e
 8001fb6:	701a      	strb	r2, [r3, #0]

  	/*Write RF Data to Packet*/
	for(i=0;i<datanum;i++)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	82fb      	strh	r3, [r7, #22]
 8001fbc:	e00b      	b.n	8001fd6 <transmit_packet+0x3e>
	{
		T_packet[i+1]=T_data[i];
 8001fbe:	8afb      	ldrh	r3, [r7, #22]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	8afb      	ldrh	r3, [r7, #22]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	68f9      	ldr	r1, [r7, #12]
 8001fca:	440b      	add	r3, r1
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	701a      	strb	r2, [r3, #0]
	for(i=0;i<datanum;i++)
 8001fd0:	8afb      	ldrh	r3, [r7, #22]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	82fb      	strh	r3, [r7, #22]
 8001fd6:	8afa      	ldrh	r2, [r7, #22]
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d3ef      	bcc.n	8001fbe <transmit_packet+0x26>
	}

	/*Calculate Checksum*/
	T_packet[packet_length-2]= calculate_checksum(T_data);
 8001fde:	8abb      	ldrh	r3, [r7, #20]
 8001fe0:	3b02      	subs	r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	18d4      	adds	r4, r2, r3
 8001fe6:	68b8      	ldr	r0, [r7, #8]
 8001fe8:	f7ff fe48 	bl	8001c7c <calculate_checksum>
 8001fec:	4603      	mov	r3, r0
 8001fee:	7023      	strb	r3, [r4, #0]
	T_packet[packet_length-1]= '\n';
 8001ff0:	8abb      	ldrh	r3, [r7, #20]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	220a      	movs	r2, #10
 8001ffa:	701a      	strb	r2, [r3, #0]
	for (i=0; i<packet_length; i++){
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	82fb      	strh	r3, [r7, #22]
 8002000:	e009      	b.n	8002016 <transmit_packet+0x7e>
		debug_packet[i] = T_packet[i];
 8002002:	8afb      	ldrh	r3, [r7, #22]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	441a      	add	r2, r3
 8002008:	8afb      	ldrh	r3, [r7, #22]
 800200a:	7811      	ldrb	r1, [r2, #0]
 800200c:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <transmit_packet+0x90>)
 800200e:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<packet_length; i++){
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	3301      	adds	r3, #1
 8002014:	82fb      	strh	r3, [r7, #22]
 8002016:	8afa      	ldrh	r2, [r7, #22]
 8002018:	8abb      	ldrh	r3, [r7, #20]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3f1      	bcc.n	8002002 <transmit_packet+0x6a>
	}
//	debug_packet = T_packet;

	return packet_length;
 800201e:	8abb      	ldrh	r3, [r7, #20]
}
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	20000e8c 	.word	0x20000e8c

0800202c <read_transmit_telemetry>:

void read_transmit_telemetry (){
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
	read_sensors();
 8002030:	f7ff fdb2 	bl	8001b98 <read_sensors>

	if (gps_time_sec != prev_time){
 8002034:	4b3c      	ldr	r3, [pc, #240]	@ (8002128 <read_transmit_telemetry+0xfc>)
 8002036:	781a      	ldrb	r2, [r3, #0]
 8002038:	4b3c      	ldr	r3, [pc, #240]	@ (800212c <read_transmit_telemetry+0x100>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d071      	beq.n	8002124 <read_transmit_telemetry+0xf8>

		//
		if (prev_alt > altitude) {
 8002040:	4b3b      	ldr	r3, [pc, #236]	@ (8002130 <read_transmit_telemetry+0x104>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b3b      	ldr	r3, [pc, #236]	@ (8002134 <read_transmit_telemetry+0x108>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	dd05      	ble.n	8002062 <read_transmit_telemetry+0x36>
			descending_count++;
 8002056:	4b38      	ldr	r3, [pc, #224]	@ (8002138 <read_transmit_telemetry+0x10c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3301      	adds	r3, #1
 800205c:	4a36      	ldr	r2, [pc, #216]	@ (8002138 <read_transmit_telemetry+0x10c>)
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e002      	b.n	8002068 <read_transmit_telemetry+0x3c>
		}
		else {
			descending_count = 0;
 8002062:	4b35      	ldr	r3, [pc, #212]	@ (8002138 <read_transmit_telemetry+0x10c>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
		}

		// Handle Mission Time
		mission_time_sec++;
 8002068:	4b34      	ldr	r3, [pc, #208]	@ (800213c <read_transmit_telemetry+0x110>)
 800206a:	f993 3000 	ldrsb.w	r3, [r3]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b25a      	sxtb	r2, r3
 8002076:	4b31      	ldr	r3, [pc, #196]	@ (800213c <read_transmit_telemetry+0x110>)
 8002078:	701a      	strb	r2, [r3, #0]
		if ( mission_time_sec >= 60 ){
 800207a:	4b30      	ldr	r3, [pc, #192]	@ (800213c <read_transmit_telemetry+0x110>)
 800207c:	f993 3000 	ldrsb.w	r3, [r3]
 8002080:	2b3b      	cmp	r3, #59	@ 0x3b
 8002082:	dd11      	ble.n	80020a8 <read_transmit_telemetry+0x7c>
			mission_time_sec -= 60;
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <read_transmit_telemetry+0x110>)
 8002086:	f993 3000 	ldrsb.w	r3, [r3]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3b3c      	subs	r3, #60	@ 0x3c
 800208e:	b2db      	uxtb	r3, r3
 8002090:	b25a      	sxtb	r2, r3
 8002092:	4b2a      	ldr	r3, [pc, #168]	@ (800213c <read_transmit_telemetry+0x110>)
 8002094:	701a      	strb	r2, [r3, #0]
			mission_time_min += 1;
 8002096:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <read_transmit_telemetry+0x114>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	b25a      	sxtb	r2, r3
 80020a4:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <read_transmit_telemetry+0x114>)
 80020a6:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_min >= 60 ){
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <read_transmit_telemetry+0x114>)
 80020aa:	f993 3000 	ldrsb.w	r3, [r3]
 80020ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80020b0:	dd11      	ble.n	80020d6 <read_transmit_telemetry+0xaa>
			mission_time_min -= 60;
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <read_transmit_telemetry+0x114>)
 80020b4:	f993 3000 	ldrsb.w	r3, [r3]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3b3c      	subs	r3, #60	@ 0x3c
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	b25a      	sxtb	r2, r3
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <read_transmit_telemetry+0x114>)
 80020c2:	701a      	strb	r2, [r3, #0]
			mission_time_hr += 1;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002144 <read_transmit_telemetry+0x118>)
 80020c6:	f993 3000 	ldrsb.w	r3, [r3]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002144 <read_transmit_telemetry+0x118>)
 80020d4:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_hr >= 24 ){
 80020d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002144 <read_transmit_telemetry+0x118>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	2b17      	cmp	r3, #23
 80020de:	dd08      	ble.n	80020f2 <read_transmit_telemetry+0xc6>
			mission_time_hr -= 24;
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <read_transmit_telemetry+0x118>)
 80020e2:	f993 3000 	ldrsb.w	r3, [r3]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3b18      	subs	r3, #24
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	b25a      	sxtb	r2, r3
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <read_transmit_telemetry+0x118>)
 80020f0:	701a      	strb	r2, [r3, #0]
		}


		create_telemetry(tx_data, 0);
 80020f2:	2100      	movs	r1, #0
 80020f4:	4814      	ldr	r0, [pc, #80]	@ (8002148 <read_transmit_telemetry+0x11c>)
 80020f6:	f7ff fde3 	bl	8001cc0 <create_telemetry>
		transmit_packet(tx_packet, tx_data, tx_count);
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <read_transmit_telemetry+0x120>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	4911      	ldr	r1, [pc, #68]	@ (8002148 <read_transmit_telemetry+0x11c>)
 8002102:	4813      	ldr	r0, [pc, #76]	@ (8002150 <read_transmit_telemetry+0x124>)
 8002104:	f7ff ff48 	bl	8001f98 <transmit_packet>
		HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_packet), 100);
 8002108:	2364      	movs	r3, #100	@ 0x64
 800210a:	22ff      	movs	r2, #255	@ 0xff
 800210c:	490e      	ldr	r1, [pc, #56]	@ (8002148 <read_transmit_telemetry+0x11c>)
 800210e:	4811      	ldr	r0, [pc, #68]	@ (8002154 <read_transmit_telemetry+0x128>)
 8002110:	f003 ff32 	bl	8005f78 <HAL_UART_Transmit>

		prev_time = gps_time_sec;
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <read_transmit_telemetry+0xfc>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b04      	ldr	r3, [pc, #16]	@ (800212c <read_transmit_telemetry+0x100>)
 800211a:	701a      	strb	r2, [r3, #0]
		prev_alt = altitude;
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <read_transmit_telemetry+0x108>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a03      	ldr	r2, [pc, #12]	@ (8002130 <read_transmit_telemetry+0x104>)
 8002122:	6013      	str	r3, [r2, #0]

	}
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000aca 	.word	0x20000aca
 800212c:	20000be1 	.word	0x20000be1
 8002130:	20000d7c 	.word	0x20000d7c
 8002134:	20000a90 	.word	0x20000a90
 8002138:	20000d80 	.word	0x20000d80
 800213c:	20000a8a 	.word	0x20000a8a
 8002140:	20000a89 	.word	0x20000a89
 8002144:	20000a88 	.word	0x20000a88
 8002148:	200002d0 	.word	0x200002d0
 800214c:	200004bf 	.word	0x200004bf
 8002150:	200003c0 	.word	0x200003c0
 8002154:	20000514 	.word	0x20000514

08002158 <HAL_UARTEx_RxEventCallback>:
	}


}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002158:	b5b0      	push	{r4, r5, r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
//	for (; i < 255; i++) {
//		rx_data[i] = 0;
//	}

//	handle_command();
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);
 8002164:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_UARTEx_RxEventCallback+0x48>)
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	8023      	strh	r3, [r4, #0]

	memset(rx_data, 0, sizeof(rx_data));
 800217c:	22ff      	movs	r2, #255	@ 0xff
 800217e:	2100      	movs	r1, #0
 8002180:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002182:	f006 fe5a 	bl	8008e3a <memset>

	uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 8002186:	2232      	movs	r2, #50	@ 0x32
 8002188:	4906      	ldr	r1, [pc, #24]	@ (80021a4 <HAL_UARTEx_RxEventCallback+0x4c>)
 800218a:	4807      	ldr	r0, [pc, #28]	@ (80021a8 <HAL_UARTEx_RxEventCallback+0x50>)
 800218c:	f003 ff7f 	bl	800608e <HAL_UARTEx_ReceiveToIdle_IT>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <HAL_UARTEx_RxEventCallback+0x54>)
 8002196:	701a      	strb	r2, [r3, #0]

}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bdb0      	pop	{r4, r5, r7, pc}
 80021a0:	2000029c 	.word	0x2000029c
 80021a4:	20000d8c 	.word	0x20000d8c
 80021a8:	20000514 	.word	0x20000514
 80021ac:	20000e8b 	.word	0x20000e8b

080021b0 <I2C_BusReset>:

void I2C_BusReset(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
    // Configure SCL (PF1) and SDA (PF0) as GPIO outputs
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]

    // Enable the GPIOF clock (assuming I2C1 uses PF0 and PF1)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <I2C_BusReset+0xb0>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a24      	ldr	r2, [pc, #144]	@ (8002260 <I2C_BusReset+0xb0>)
 80021d0:	f043 0320 	orr.w	r3, r3, #32
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b22      	ldr	r3, [pc, #136]	@ (8002260 <I2C_BusReset+0xb0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]

    // Configure SCL (PF1) and SDA (PF0) as open-drain outputs
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80021e2:	2303      	movs	r3, #3
 80021e4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021e6:	2311      	movs	r3, #17
 80021e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021f2:	f107 0308 	add.w	r3, r7, #8
 80021f6:	4619      	mov	r1, r3
 80021f8:	481a      	ldr	r0, [pc, #104]	@ (8002264 <I2C_BusReset+0xb4>)
 80021fa:	f000 ff29 	bl	8003050 <HAL_GPIO_Init>

    // Manually toggle SCL (PF1) to clear the bus
    for (int i = 0; i < 10; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e012      	b.n	800222a <I2C_BusReset+0x7a>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);   // Set SCL high
 8002204:	2201      	movs	r2, #1
 8002206:	2102      	movs	r1, #2
 8002208:	4816      	ldr	r0, [pc, #88]	@ (8002264 <I2C_BusReset+0xb4>)
 800220a:	f001 f8cd 	bl	80033a8 <HAL_GPIO_WritePin>
        HAL_Delay(1);                                         // Small delay
 800220e:	2001      	movs	r0, #1
 8002210:	f000 fd56 	bl	8002cc0 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET); // Set SCL low
 8002214:	2200      	movs	r2, #0
 8002216:	2102      	movs	r1, #2
 8002218:	4812      	ldr	r0, [pc, #72]	@ (8002264 <I2C_BusReset+0xb4>)
 800221a:	f001 f8c5 	bl	80033a8 <HAL_GPIO_WritePin>
        HAL_Delay(1);                                         // Small delay
 800221e:	2001      	movs	r0, #1
 8002220:	f000 fd4e 	bl	8002cc0 <HAL_Delay>
    for (int i = 0; i < 10; i++) {
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3301      	adds	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	2b09      	cmp	r3, #9
 800222e:	dde9      	ble.n	8002204 <I2C_BusReset+0x54>
    }

    // Check if SDA (PF0) is still low (held by a device)
    if (HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8002230:	2101      	movs	r1, #1
 8002232:	480c      	ldr	r0, [pc, #48]	@ (8002264 <I2C_BusReset+0xb4>)
 8002234:	f001 f8a0 	bl	8003378 <HAL_GPIO_ReadPin>
        // Handle error: SDA line is stuck low
        // You can handle this situation or attempt more aggressive resets.
    }

    // Reinitialize the I2C pins as alternate function (for I2C peripheral)
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002238:	2303      	movs	r3, #3
 800223a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223c:	2312      	movs	r3, #18
 800223e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;  // Make sure to use the correct AF for your I2C peripheral
 8002248:	2304      	movs	r3, #4
 800224a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4619      	mov	r1, r3
 8002252:	4804      	ldr	r0, [pc, #16]	@ (8002264 <I2C_BusReset+0xb4>)
 8002254:	f000 fefc 	bl	8003050 <HAL_GPIO_Init>
}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40023800 	.word	0x40023800
 8002264:	40021400 	.word	0x40021400

08002268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f000 fcb6 	bl	8002bdc <HAL_Init>

  /* USER CODE BEGIN Init */

  I2C_BusReset();
 8002270:	f7ff ff9e 	bl	80021b0 <I2C_BusReset>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002274:	f000 f83e 	bl	80022f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002278:	f000 f962 	bl	8002540 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800227c:	f000 f906 	bl	800248c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002280:	f000 f92e 	bl	80024e0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8002284:	f000 f8a2 	bl	80023cc <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002288:	f000 f8ce 	bl	8002428 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 800228c:	2232      	movs	r2, #50	@ 0x32
 800228e:	4913      	ldr	r1, [pc, #76]	@ (80022dc <main+0x74>)
 8002290:	4813      	ldr	r0, [pc, #76]	@ (80022e0 <main+0x78>)
 8002292:	f003 fefc 	bl	800608e <HAL_UARTEx_ReceiveToIdle_IT>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <main+0x7c>)
 800229c:	701a      	strb	r2, [r3, #0]

  init_sensors();
 800229e:	f7ff fc89 	bl	8001bb4 <init_sensors>
  init_commands();
 80022a2:	f7ff fc95 	bl	8001bd0 <init_commands>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  read_sensors();
	  // Control Telemetry
	  if (telemetry_status == 1) {
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <main+0x80>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <main+0x4a>
		  read_transmit_telemetry();
 80022ae:	f7ff febd 	bl	800202c <read_transmit_telemetry>
	  }

	  // Control Beacon
	  if (beacon_status == 1) {
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <main+0x84>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <main+0x5e>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2110      	movs	r1, #16
 80022be:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <main+0x88>)
 80022c0:	f001 f872 	bl	80033a8 <HAL_GPIO_WritePin>
 80022c4:	e004      	b.n	80022d0 <main+0x68>
	  }

	  else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2110      	movs	r1, #16
 80022ca:	4809      	ldr	r0, [pc, #36]	@ (80022f0 <main+0x88>)
 80022cc:	f001 f86c 	bl	80033a8 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80022d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d4:	f000 fcf4 	bl	8002cc0 <HAL_Delay>
	  if (telemetry_status == 1) {
 80022d8:	e7e5      	b.n	80022a6 <main+0x3e>
 80022da:	bf00      	nop
 80022dc:	20000d8c 	.word	0x20000d8c
 80022e0:	20000514 	.word	0x20000514
 80022e4:	20000e8b 	.word	0x20000e8b
 80022e8:	200000a8 	.word	0x200000a8
 80022ec:	20000d88 	.word	0x20000d88
 80022f0:	40020400 	.word	0x40020400

080022f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b094      	sub	sp, #80	@ 0x50
 80022f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	2234      	movs	r2, #52	@ 0x34
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f006 fd99 	bl	8008e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <SystemClock_Config+0xd0>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <SystemClock_Config+0xd0>)
 8002322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
 8002328:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <SystemClock_Config+0xd0>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002334:	2300      	movs	r3, #0
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <SystemClock_Config+0xd4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a22      	ldr	r2, [pc, #136]	@ (80023c8 <SystemClock_Config+0xd4>)
 800233e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <SystemClock_Config+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002350:	2301      	movs	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002354:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235a:	2302      	movs	r3, #2
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800235e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002362:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002364:	2308      	movs	r3, #8
 8002366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8002368:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800236c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800236e:	2304      	movs	r3, #4
 8002370:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002372:	2308      	movs	r3, #8
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002376:	2302      	movs	r3, #2
 8002378:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fb26 	bl	80059d0 <HAL_RCC_OscConfig>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800238a:	f000 f995 	bl	80026b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	230f      	movs	r3, #15
 8002390:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002392:	2302      	movs	r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800239a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023a4:	f107 0308 	add.w	r3, r7, #8
 80023a8:	2103      	movs	r1, #3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 ff22 	bl	80051f4 <HAL_RCC_ClockConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80023b6:	f000 f97f 	bl	80026b8 <Error_Handler>
  }
}
 80023ba:	bf00      	nop
 80023bc:	3750      	adds	r7, #80	@ 0x50
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000

080023cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <MX_I2C2_Init+0x50>)
 80023d2:	4a13      	ldr	r2, [pc, #76]	@ (8002420 <MX_I2C2_Init+0x54>)
 80023d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <MX_I2C2_Init+0x50>)
 80023d8:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <MX_I2C2_Init+0x58>)
 80023da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <MX_I2C2_Init+0x50>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <MX_I2C2_Init+0x50>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <MX_I2C2_Init+0x50>)
 80023ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <MX_I2C2_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023f6:	4b09      	ldr	r3, [pc, #36]	@ (800241c <MX_I2C2_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <MX_I2C2_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <MX_I2C2_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002408:	4804      	ldr	r0, [pc, #16]	@ (800241c <MX_I2C2_Init+0x50>)
 800240a:	f000 ffe7 	bl	80033dc <HAL_I2C_Init>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002414:	f000 f950 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200004c0 	.word	0x200004c0
 8002420:	40005800 	.word	0x40005800
 8002424:	000186a0 	.word	0x000186a0

08002428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2026      	movs	r0, #38	@ 0x26
 8002432:	f000 fd44 	bl	8002ebe <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002436:	2026      	movs	r0, #38	@ 0x26
 8002438:	f000 fd5d 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <MX_USART2_UART_Init+0x60>)
 8002440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 8002444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_USART2_UART_Init+0x5c>)
 8002470:	f003 fd32 	bl	8005ed8 <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800247a:	f000 f91d 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000514 	.word	0x20000514
 8002488:	40004400 	.word	0x40004400

0800248c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <MX_USART3_UART_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 8002498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800249c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_USART3_UART_Init+0x4c>)
 80024c4:	f003 fd08 	bl	8005ed8 <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024ce:	f000 f8f3 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000055c 	.word	0x2000055c
 80024dc:	40004800 	.word	0x40004800

080024e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80024e4:	4b15      	ldr	r3, [pc, #84]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80024ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024ec:	4b13      	ldr	r3, [pc, #76]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024ee:	2206      	movs	r2, #6
 80024f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024f8:	4b10      	ldr	r3, [pc, #64]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002500:	2202      	movs	r2, #2
 8002502:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002504:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002506:	2201      	movs	r2, #1
 8002508:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800250c:	2200      	movs	r2, #0
 800250e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002510:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002512:	2200      	movs	r2, #0
 8002514:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002518:	2201      	movs	r2, #1
 800251a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800251e:	2201      	movs	r2, #1
 8002520:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002522:	4b06      	ldr	r3, [pc, #24]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002524:	2200      	movs	r2, #0
 8002526:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800252a:	f002 fd29 	bl	8004f80 <HAL_PCD_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8002534:	f000 f8c0 	bl	80026b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200005a4 	.word	0x200005a4

08002540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	@ 0x30
 8002544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	4b53      	ldr	r3, [pc, #332]	@ (80026a8 <MX_GPIO_Init+0x168>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a52      	ldr	r2, [pc, #328]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b4c      	ldr	r3, [pc, #304]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a4b      	ldr	r2, [pc, #300]	@ (80026a8 <MX_GPIO_Init+0x168>)
 800257c:	f043 0320 	orr.w	r3, r3, #32
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b45      	ldr	r3, [pc, #276]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a44      	ldr	r2, [pc, #272]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b42      	ldr	r3, [pc, #264]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b3e      	ldr	r3, [pc, #248]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4a3d      	ldr	r2, [pc, #244]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	4b30      	ldr	r3, [pc, #192]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a2f      	ldr	r2, [pc, #188]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <MX_GPIO_Init+0x168>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4b29      	ldr	r3, [pc, #164]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	4a28      	ldr	r2, [pc, #160]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	@ 0x30
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <MX_GPIO_Init+0x168>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800261a:	2200      	movs	r2, #0
 800261c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002620:	4822      	ldr	r0, [pc, #136]	@ (80026ac <MX_GPIO_Init+0x16c>)
 8002622:	f000 fec1 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002626:	2200      	movs	r2, #0
 8002628:	2140      	movs	r1, #64	@ 0x40
 800262a:	4821      	ldr	r0, [pc, #132]	@ (80026b0 <MX_GPIO_Init+0x170>)
 800262c:	f000 febc 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002636:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800263a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002640:	f107 031c 	add.w	r3, r7, #28
 8002644:	4619      	mov	r1, r3
 8002646:	481b      	ldr	r0, [pc, #108]	@ (80026b4 <MX_GPIO_Init+0x174>)
 8002648:	f000 fd02 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800264c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	4811      	ldr	r0, [pc, #68]	@ (80026ac <MX_GPIO_Init+0x16c>)
 8002666:	f000 fcf3 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800266a:	2340      	movs	r3, #64	@ 0x40
 800266c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800266e:	2301      	movs	r3, #1
 8002670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <MX_GPIO_Init+0x170>)
 8002682:	f000 fce5 	bl	8003050 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	4805      	ldr	r0, [pc, #20]	@ (80026b0 <MX_GPIO_Init+0x170>)
 800269a:	f000 fcd9 	bl	8003050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800269e:	bf00      	nop
 80026a0:	3730      	adds	r7, #48	@ 0x30
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40020800 	.word	0x40020800

080026b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
}
 80026be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <Error_Handler+0x8>

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x4c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <HAL_I2C_MspInit+0x84>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d12b      	bne.n	800278e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b18      	ldr	r3, [pc, #96]	@ (800279c <HAL_I2C_MspInit+0x88>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a17      	ldr	r2, [pc, #92]	@ (800279c <HAL_I2C_MspInit+0x88>)
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_I2C_MspInit+0x88>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002752:	2303      	movs	r3, #3
 8002754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002756:	2312      	movs	r3, #18
 8002758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002762:	2304      	movs	r3, #4
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <HAL_I2C_MspInit+0x8c>)
 800276e:	f000 fc6f 	bl	8003050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_I2C_MspInit+0x88>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <HAL_I2C_MspInit+0x88>)
 800277c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <HAL_I2C_MspInit+0x88>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800278e:	bf00      	nop
 8002790:	3728      	adds	r7, #40	@ 0x28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	40005800 	.word	0x40005800
 800279c:	40023800 	.word	0x40023800
 80027a0:	40021400 	.word	0x40021400

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08c      	sub	sp, #48	@ 0x30
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 031c 	add.w	r3, r7, #28
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a32      	ldr	r2, [pc, #200]	@ (800288c <HAL_UART_MspInit+0xe8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12c      	bne.n	8002820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	4b31      	ldr	r3, [pc, #196]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ce:	4a30      	ldr	r2, [pc, #192]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a29      	ldr	r2, [pc, #164]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_UART_MspInit+0xec>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027fe:	2360      	movs	r3, #96	@ 0x60
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280e:	2307      	movs	r3, #7
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	481e      	ldr	r0, [pc, #120]	@ (8002894 <HAL_UART_MspInit+0xf0>)
 800281a:	f000 fc19 	bl	8003050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800281e:	e031      	b.n	8002884 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <HAL_UART_MspInit+0xf4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12c      	bne.n	8002884 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HAL_UART_MspInit+0xec>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <HAL_UART_MspInit+0xec>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002838:	6413      	str	r3, [r2, #64]	@ 0x40
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_UART_MspInit+0xec>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_UART_MspInit+0xec>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a10      	ldr	r2, [pc, #64]	@ (8002890 <HAL_UART_MspInit+0xec>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <HAL_UART_MspInit+0xec>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002874:	2307      	movs	r3, #7
 8002876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4805      	ldr	r0, [pc, #20]	@ (8002894 <HAL_UART_MspInit+0xf0>)
 8002880:	f000 fbe6 	bl	8003050 <HAL_GPIO_Init>
}
 8002884:	bf00      	nop
 8002886:	3730      	adds	r7, #48	@ 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40004400 	.word	0x40004400
 8002890:	40023800 	.word	0x40023800
 8002894:	40020c00 	.word	0x40020c00
 8002898:	40004800 	.word	0x40004800

0800289c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b098      	sub	sp, #96	@ 0x60
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028b4:	f107 0310 	add.w	r3, r7, #16
 80028b8:	223c      	movs	r2, #60	@ 0x3c
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 fabc 	bl	8008e3a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ca:	d14d      	bne.n	8002968 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80028cc:	2320      	movs	r3, #32
 80028ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 feab 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80028e4:	f7ff fee8 	bl	80026b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002904:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002908:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002916:	230a      	movs	r3, #10
 8002918:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800291e:	4619      	mov	r1, r3
 8002920:	4814      	ldr	r0, [pc, #80]	@ (8002974 <HAL_PCD_MspInit+0xd8>)
 8002922:	f000 fb95 	bl	8003050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800292a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292c:	2300      	movs	r3, #0
 800292e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002934:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002938:	4619      	mov	r1, r3
 800293a:	480e      	ldr	r0, [pc, #56]	@ (8002974 <HAL_PCD_MspInit+0xd8>)
 800293c:	f000 fb88 	bl	8003050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 8002946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800294a:	6353      	str	r3, [r2, #52]	@ 0x34
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	4a06      	ldr	r2, [pc, #24]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 8002956:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800295a:	6453      	str	r3, [r2, #68]	@ 0x44
 800295c:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_PCD_MspInit+0xd4>)
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002968:	bf00      	nop
 800296a:	3760      	adds	r7, #96	@ 0x60
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000

08002978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <NMI_Handler+0x4>

08002980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <MemManage_Handler+0x4>

08002990 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <BusFault_Handler+0x4>

08002998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <UsageFault_Handler+0x4>

080029a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ce:	f000 f957 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <_kill>:

int _kill(int pid, int sig)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f0:	f006 fa88 	bl	8008f04 <__errno>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2216      	movs	r2, #22
 80029f8:	601a      	str	r2, [r3, #0]
  return -1;
 80029fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_exit>:

void _exit (int status)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffe7 	bl	80029e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a18:	bf00      	nop
 8002a1a:	e7fd      	b.n	8002a18 <_exit+0x12>

08002a1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	e00a      	b.n	8002a44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a2e:	f3af 8000 	nop.w
 8002a32:	4601      	mov	r1, r0
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	60ba      	str	r2, [r7, #8]
 8002a3a:	b2ca      	uxtb	r2, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbf0      	blt.n	8002a2e <_read+0x12>
  }

  return len;
 8002a4c:	687b      	ldr	r3, [r7, #4]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e009      	b.n	8002a7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	60ba      	str	r2, [r7, #8]
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbf1      	blt.n	8002a68 <_write+0x12>
  }
  return len;
 8002a84:	687b      	ldr	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_close>:

int _close(int file)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ab6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_isatty>:

int _isatty(int file)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <_sbrk+0x5c>)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <_sbrk+0x60>)
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b0c:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <_sbrk+0x64>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <_sbrk+0x64>)
 8002b16:	4a12      	ldr	r2, [pc, #72]	@ (8002b60 <_sbrk+0x68>)
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <_sbrk+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d207      	bcs.n	8002b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b28:	f006 f9ec 	bl	8008f04 <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	220c      	movs	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	e009      	b.n	8002b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b38:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <_sbrk+0x64>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <_sbrk+0x64>)
 8002b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20040000 	.word	0x20040000
 8002b58:	00000400 	.word	0x00000400
 8002b5c:	20000f8c 	.word	0x20000f8c
 8002b60:	200010e0 	.word	0x200010e0

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	@ (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b8c:	f7ff ffea 	bl	8002b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b90:	480c      	ldr	r0, [pc, #48]	@ (8002bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b92:	490d      	ldr	r1, [pc, #52]	@ (8002bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b94:	4a0d      	ldr	r2, [pc, #52]	@ (8002bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b98:	e002      	b.n	8002ba0 <LoopCopyDataInit>

08002b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b9e:	3304      	adds	r3, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba4:	d3f9      	bcc.n	8002b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8002bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bac:	e001      	b.n	8002bb2 <LoopFillZerobss>

08002bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb0:	3204      	adds	r2, #4

08002bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb4:	d3fb      	bcc.n	8002bae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f006 f9ab 	bl	8008f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bba:	f7ff fb55 	bl	8002268 <main>
  bx  lr    
 8002bbe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002bc0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bc8:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002bcc:	0800c680 	.word	0x0800c680
  ldr r2, =_sbss
 8002bd0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002bd4:	200010e0 	.word	0x200010e0

08002bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bd8:	e7fe      	b.n	8002bd8 <ADC_IRQHandler>
	...

08002bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c1c <HAL_Init+0x40>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bec:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_Init+0x40>)
 8002bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_Init+0x40>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f94f 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f808 	bl	8002c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c10:	f7ff fd58 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_InitTick+0x54>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_InitTick+0x58>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f967 	bl	8002f12 <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d80a      	bhi.n	8002c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f000 f92f 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c60:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <HAL_InitTick+0x5c>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200000ac 	.word	0x200000ac
 8002c78:	200000b4 	.word	0x200000b4
 8002c7c:	200000b0 	.word	0x200000b0

08002c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200000b4 	.word	0x200000b4
 8002ca4:	20000f90 	.word	0x20000f90

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000f90 	.word	0x20000f90

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d005      	beq.n	8002ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <HAL_Delay+0x44>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ce6:	bf00      	nop
 8002ce8:	f7ff ffde 	bl	8002ca8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d8f7      	bhi.n	8002ce8 <HAL_Delay+0x28>
  {
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200000b4 	.word	0x200000b4

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	@ (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	@ (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	@ 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff29 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff3e 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff31 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa2 	bl	8002e64 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff feb6 	bl	8002ca8 <HAL_GetTick>
 8002f3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d008      	beq.n	8002f5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e052      	b.n	8003002 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0216 	bic.w	r2, r2, #22
 8002f6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695a      	ldr	r2, [r3, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <HAL_DMA_Abort+0x62>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0208 	bic.w	r2, r2, #8
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fac:	e013      	b.n	8002fd6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fae:	f7ff fe7b 	bl	8002ca8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d90c      	bls.n	8002fd6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e015      	b.n	8003002 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e4      	bne.n	8002fae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe8:	223f      	movs	r2, #63	@ 0x3f
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e00c      	b.n	8003042 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	@ 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	e165      	b.n	8003338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	429a      	cmp	r2, r3
 8003086:	f040 8154 	bne.w	8003332 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d005      	beq.n	80030a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d130      	bne.n	8003104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2203      	movs	r2, #3
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4013      	ands	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d8:	2201      	movs	r2, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 0201 	and.w	r2, r3, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b03      	cmp	r3, #3
 800310e:	d017      	beq.n	8003140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d123      	bne.n	8003194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	08da      	lsrs	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3208      	adds	r2, #8
 8003154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	220f      	movs	r2, #15
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	08da      	lsrs	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3208      	adds	r2, #8
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80ae 	beq.w	8003332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	4b5d      	ldr	r3, [pc, #372]	@ (8003350 <HAL_GPIO_Init+0x300>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	4a5c      	ldr	r2, [pc, #368]	@ (8003350 <HAL_GPIO_Init+0x300>)
 80031e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80031e6:	4b5a      	ldr	r3, [pc, #360]	@ (8003350 <HAL_GPIO_Init+0x300>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031f2:	4a58      	ldr	r2, [pc, #352]	@ (8003354 <HAL_GPIO_Init+0x304>)
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	@ (8003358 <HAL_GPIO_Init+0x308>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d025      	beq.n	800326a <HAL_GPIO_Init+0x21a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	@ (800335c <HAL_GPIO_Init+0x30c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <HAL_GPIO_Init+0x216>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4d      	ldr	r2, [pc, #308]	@ (8003360 <HAL_GPIO_Init+0x310>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x212>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4c      	ldr	r2, [pc, #304]	@ (8003364 <HAL_GPIO_Init+0x314>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x20e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_GPIO_Init+0x318>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x20a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4a      	ldr	r2, [pc, #296]	@ (800336c <HAL_GPIO_Init+0x31c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x206>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a49      	ldr	r2, [pc, #292]	@ (8003370 <HAL_GPIO_Init+0x320>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x202>
 800324e:	2306      	movs	r3, #6
 8003250:	e00c      	b.n	800326c <HAL_GPIO_Init+0x21c>
 8003252:	2307      	movs	r3, #7
 8003254:	e00a      	b.n	800326c <HAL_GPIO_Init+0x21c>
 8003256:	2305      	movs	r3, #5
 8003258:	e008      	b.n	800326c <HAL_GPIO_Init+0x21c>
 800325a:	2304      	movs	r3, #4
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x21c>
 800325e:	2303      	movs	r3, #3
 8003260:	e004      	b.n	800326c <HAL_GPIO_Init+0x21c>
 8003262:	2302      	movs	r3, #2
 8003264:	e002      	b.n	800326c <HAL_GPIO_Init+0x21c>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_GPIO_Init+0x21c>
 800326a:	2300      	movs	r3, #0
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	f002 0203 	and.w	r2, r2, #3
 8003272:	0092      	lsls	r2, r2, #2
 8003274:	4093      	lsls	r3, r2
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800327c:	4935      	ldr	r1, [pc, #212]	@ (8003354 <HAL_GPIO_Init+0x304>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	3302      	adds	r3, #2
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_GPIO_Init+0x324>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ae:	4a31      	ldr	r2, [pc, #196]	@ (8003374 <HAL_GPIO_Init+0x324>)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003374 <HAL_GPIO_Init+0x324>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d8:	4a26      	ldr	r2, [pc, #152]	@ (8003374 <HAL_GPIO_Init+0x324>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032de:	4b25      	ldr	r3, [pc, #148]	@ (8003374 <HAL_GPIO_Init+0x324>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003302:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <HAL_GPIO_Init+0x324>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003308:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <HAL_GPIO_Init+0x324>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	43db      	mvns	r3, r3
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800332c:	4a11      	ldr	r2, [pc, #68]	@ (8003374 <HAL_GPIO_Init+0x324>)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	f67f ae96 	bls.w	800306c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40013800 	.word	0x40013800
 8003358:	40020000 	.word	0x40020000
 800335c:	40020400 	.word	0x40020400
 8003360:	40020800 	.word	0x40020800
 8003364:	40020c00 	.word	0x40020c00
 8003368:	40021000 	.word	0x40021000
 800336c:	40021400 	.word	0x40021400
 8003370:	40021800 	.word	0x40021800
 8003374:	40013c00 	.word	0x40013c00

08003378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e12b      	b.n	8003646 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff f986 	bl	8002714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	@ 0x24
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800342e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800343e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003440:	f002 f8d0 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4a81      	ldr	r2, [pc, #516]	@ (8003650 <HAL_I2C_Init+0x274>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d807      	bhi.n	8003460 <HAL_I2C_Init+0x84>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a80      	ldr	r2, [pc, #512]	@ (8003654 <HAL_I2C_Init+0x278>)
 8003454:	4293      	cmp	r3, r2
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e006      	b.n	800346e <HAL_I2C_Init+0x92>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a7d      	ldr	r2, [pc, #500]	@ (8003658 <HAL_I2C_Init+0x27c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0e7      	b.n	8003646 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a78      	ldr	r2, [pc, #480]	@ (800365c <HAL_I2C_Init+0x280>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0c9b      	lsrs	r3, r3, #18
 8003480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003650 <HAL_I2C_Init+0x274>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d802      	bhi.n	80034b0 <HAL_I2C_Init+0xd4>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3301      	adds	r3, #1
 80034ae:	e009      	b.n	80034c4 <HAL_I2C_Init+0xe8>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	4a69      	ldr	r2, [pc, #420]	@ (8003660 <HAL_I2C_Init+0x284>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	3301      	adds	r3, #1
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80034d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	495c      	ldr	r1, [pc, #368]	@ (8003650 <HAL_I2C_Init+0x274>)
 80034e0:	428b      	cmp	r3, r1
 80034e2:	d819      	bhi.n	8003518 <HAL_I2C_Init+0x13c>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e59      	subs	r1, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034f8:	400b      	ands	r3, r1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <HAL_I2C_Init+0x138>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1e59      	subs	r1, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fbb1 f3f3 	udiv	r3, r1, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003512:	e051      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003514:	2304      	movs	r3, #4
 8003516:	e04f      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <HAL_I2C_Init+0x168>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	440b      	add	r3, r1
 800352e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e012      	b.n	800356a <HAL_I2C_Init+0x18e>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	1e58      	subs	r0, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	0099      	lsls	r1, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	fbb0 f3f3 	udiv	r3, r0, r3
 800355a:	3301      	adds	r3, #1
 800355c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf0c      	ite	eq
 8003564:	2301      	moveq	r3, #1
 8003566:	2300      	movne	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Init+0x196>
 800356e:	2301      	movs	r3, #1
 8003570:	e022      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10e      	bne.n	8003598 <HAL_I2C_Init+0x1bc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e58      	subs	r0, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	440b      	add	r3, r1
 8003588:	fbb0 f3f3 	udiv	r3, r0, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003596:	e00f      	b.n	80035b8 <HAL_I2C_Init+0x1dc>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e58      	subs	r0, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	0099      	lsls	r1, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ae:	3301      	adds	r3, #1
 80035b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	6809      	ldr	r1, [r1, #0]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6911      	ldr	r1, [r2, #16]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	000186a0 	.word	0x000186a0
 8003654:	001e847f 	.word	0x001e847f
 8003658:	003d08ff 	.word	0x003d08ff
 800365c:	431bde83 	.word	0x431bde83
 8003660:	10624dd3 	.word	0x10624dd3

08003664 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	461a      	mov	r2, r3
 8003670:	460b      	mov	r3, r1
 8003672:	817b      	strh	r3, [r7, #10]
 8003674:	4613      	mov	r3, r2
 8003676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003678:	f7ff fb16 	bl	8002ca8 <HAL_GetTick>
 800367c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 80e0 	bne.w	800384c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2319      	movs	r3, #25
 8003692:	2201      	movs	r2, #1
 8003694:	4970      	ldr	r1, [pc, #448]	@ (8003858 <HAL_I2C_Master_Transmit+0x1f4>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f001 fa3c 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	e0d3      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2C_Master_Transmit+0x50>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0cc      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d007      	beq.n	80036da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0201 	orr.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2221      	movs	r2, #33	@ 0x21
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2210      	movs	r2, #16
 80036f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	893a      	ldrh	r2, [r7, #8]
 800370a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a50      	ldr	r2, [pc, #320]	@ (800385c <HAL_I2C_Master_Transmit+0x1f8>)
 800371a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800371c:	8979      	ldrh	r1, [r7, #10]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 ff28 	bl	8004578 <I2C_MasterRequestWrite>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e08d      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003748:	e066      	b.n	8003818 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6a39      	ldr	r1, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 fafa 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_I2C_Master_Transmit+0x188>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	6a39      	ldr	r1, [r7, #32]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f001 faf1 	bl	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	2b04      	cmp	r3, #4
 8003802:	d107      	bne.n	8003814 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003812:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01a      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	d194      	bne.n	800374a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00100002 	.word	0x00100002
 800385c:	ffff0000 	.word	0xffff0000

08003860 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	@ 0x30
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	461a      	mov	r2, r3
 800386c:	460b      	mov	r3, r1
 800386e:	817b      	strh	r3, [r7, #10]
 8003870:	4613      	mov	r3, r2
 8003872:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003874:	f7ff fa18 	bl	8002ca8 <HAL_GetTick>
 8003878:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b20      	cmp	r3, #32
 8003884:	f040 8217 	bne.w	8003cb6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2319      	movs	r3, #25
 800388e:	2201      	movs	r2, #1
 8003890:	497c      	ldr	r1, [pc, #496]	@ (8003a84 <HAL_I2C_Master_Receive+0x224>)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f001 f93e 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800389e:	2302      	movs	r3, #2
 80038a0:	e20a      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2C_Master_Receive+0x50>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e203      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d007      	beq.n	80038d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2222      	movs	r2, #34	@ 0x22
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2210      	movs	r2, #16
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	893a      	ldrh	r2, [r7, #8]
 8003906:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a5c      	ldr	r2, [pc, #368]	@ (8003a88 <HAL_I2C_Master_Receive+0x228>)
 8003916:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003918:	8979      	ldrh	r1, [r7, #10]
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 feac 	bl	800467c <I2C_MasterRequestRead>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e1c4      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d113      	bne.n	800395e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003936:	2300      	movs	r3, #0
 8003938:	623b      	str	r3, [r7, #32]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	623b      	str	r3, [r7, #32]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e198      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003962:	2b01      	cmp	r3, #1
 8003964:	d11b      	bne.n	800399e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	e178      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d11b      	bne.n	80039de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	e158      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a04:	e144      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 80f1 	bhi.w	8003bf2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d123      	bne.n	8003a60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f001 fa23 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e145      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a5e:	e117      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d14e      	bne.n	8003b06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4906      	ldr	r1, [pc, #24]	@ (8003a8c <HAL_I2C_Master_Receive+0x22c>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f001 f84e 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e11a      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
 8003a82:	bf00      	nop
 8003a84:	00100002 	.word	0x00100002
 8003a88:	ffff0000 	.word	0xffff0000
 8003a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b04:	e0c4      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	496c      	ldr	r1, [pc, #432]	@ (8003cc0 <HAL_I2C_Master_Receive+0x460>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 ffff 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cb      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	4955      	ldr	r1, [pc, #340]	@ (8003cc0 <HAL_I2C_Master_Receive+0x460>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 ffd1 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e09d      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bf0:	e04e      	b.n	8003c90 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f001 f936 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e058      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d124      	bne.n	8003c90 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d107      	bne.n	8003c5e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c5c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f aeb6 	bne.w	8003a06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	@ 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00010004 	.word	0x00010004

08003cc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cde:	f7fe ffe3 	bl	8002ca8 <HAL_GetTick>
 8003ce2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f040 80d9 	bne.w	8003ea4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	496d      	ldr	r1, [pc, #436]	@ (8003eb0 <HAL_I2C_Mem_Write+0x1ec>)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 ff09 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0cc      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_I2C_Mem_Write+0x56>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e0c5      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d007      	beq.n	8003d40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2221      	movs	r2, #33	@ 0x21
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2240      	movs	r2, #64	@ 0x40
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8003eb4 <HAL_I2C_Mem_Write+0x1f0>)
 8003d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d82:	88f8      	ldrh	r0, [r7, #6]
 8003d84:	893a      	ldrh	r2, [r7, #8]
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4603      	mov	r3, r0
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fd40 	bl	8004818 <I2C_RequestMemoryWrite>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d052      	beq.n	8003e44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e081      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 ffce 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d107      	bne.n	8003dca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06b      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd2:	781a      	ldrb	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d11b      	bne.n	8003e44 <HAL_I2C_Mem_Write+0x180>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1aa      	bne.n	8003da2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 ffc1 	bl	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d107      	bne.n	8003e74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e016      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e000      	b.n	8003ea6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ea4:	2302      	movs	r3, #2
  }
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	00100002 	.word	0x00100002
 8003eb4:	ffff0000 	.word	0xffff0000

08003eb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08c      	sub	sp, #48	@ 0x30
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	817b      	strh	r3, [r7, #10]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	813b      	strh	r3, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed2:	f7fe fee9 	bl	8002ca8 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	f040 8214 	bne.w	800430e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2319      	movs	r3, #25
 8003eec:	2201      	movs	r2, #1
 8003eee:	497b      	ldr	r1, [pc, #492]	@ (80040dc <HAL_I2C_Mem_Read+0x224>)
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fe0f 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
 8003efe:	e207      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Mem_Read+0x56>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e200      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d007      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2222      	movs	r2, #34	@ 0x22
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2240      	movs	r2, #64	@ 0x40
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a5b      	ldr	r2, [pc, #364]	@ (80040e0 <HAL_I2C_Mem_Read+0x228>)
 8003f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f76:	88f8      	ldrh	r0, [r7, #6]
 8003f78:	893a      	ldrh	r2, [r7, #8]
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4603      	mov	r3, r0
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 fcdc 	bl	8004944 <I2C_RequestMemoryRead>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e1bc      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d113      	bne.n	8003fc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e190      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d11b      	bne.n	8004006 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e170      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	2b02      	cmp	r3, #2
 800400c:	d11b      	bne.n	8004046 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800402c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	e150      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800405c:	e144      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004062:	2b03      	cmp	r3, #3
 8004064:	f200 80f1 	bhi.w	800424a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406c:	2b01      	cmp	r3, #1
 800406e:	d123      	bne.n	80040b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 fef7 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e145      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040b6:	e117      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d14e      	bne.n	800415e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c6:	2200      	movs	r2, #0
 80040c8:	4906      	ldr	r1, [pc, #24]	@ (80040e4 <HAL_I2C_Mem_Read+0x22c>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fd22 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e11a      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
 80040da:	bf00      	nop
 80040dc:	00100002 	.word	0x00100002
 80040e0:	ffff0000 	.word	0xffff0000
 80040e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29b      	uxth	r3, r3
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	3b01      	subs	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800415c:	e0c4      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004164:	2200      	movs	r2, #0
 8004166:	496c      	ldr	r1, [pc, #432]	@ (8004318 <HAL_I2C_Mem_Read+0x460>)
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 fcd3 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0cb      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c0:	2200      	movs	r2, #0
 80041c2:	4955      	ldr	r1, [pc, #340]	@ (8004318 <HAL_I2C_Mem_Read+0x460>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 fca5 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e09d      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004248:	e04e      	b.n	80042e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800424c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fe0a 	bl	8004e68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e058      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d124      	bne.n	80042e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d107      	bne.n	80042b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	3b01      	subs	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f aeb6 	bne.w	800405e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3728      	adds	r7, #40	@ 0x28
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00010004 	.word	0x00010004

0800431c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	460b      	mov	r3, r1
 800432a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800432c:	f7fe fcbc 	bl	8002ca8 <HAL_GetTick>
 8004330:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	f040 8111 	bne.w	8004566 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2319      	movs	r3, #25
 800434a:	2201      	movs	r2, #1
 800434c:	4988      	ldr	r1, [pc, #544]	@ (8004570 <HAL_I2C_IsDeviceReady+0x254>)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fbe0 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
 800435c:	e104      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_I2C_IsDeviceReady+0x50>
 8004368:	2302      	movs	r3, #2
 800436a:	e0fd      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d007      	beq.n	8004392 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2224      	movs	r2, #36	@ 0x24
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4a70      	ldr	r2, [pc, #448]	@ (8004574 <HAL_I2C_IsDeviceReady+0x258>)
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fb9e 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	d103      	bne.n	80043f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0b6      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004408:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800440a:	f7fe fc4d 	bl	8002ca8 <HAL_GetTick>
 800440e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b02      	cmp	r3, #2
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800443e:	e025      	b.n	800448c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004440:	f7fe fc32 	bl	8002ca8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <HAL_I2C_IsDeviceReady+0x13a>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22a0      	movs	r2, #160	@ 0xa0
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2ba0      	cmp	r3, #160	@ 0xa0
 8004496:	d005      	beq.n	80044a4 <HAL_I2C_IsDeviceReady+0x188>
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_I2C_IsDeviceReady+0x188>
 800449e:	7dbb      	ldrb	r3, [r7, #22]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0cd      	beq.n	8004440 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d129      	bne.n	800450e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	2319      	movs	r3, #25
 80044e6:	2201      	movs	r2, #1
 80044e8:	4921      	ldr	r1, [pc, #132]	@ (8004570 <HAL_I2C_IsDeviceReady+0x254>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fb12 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e036      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e02c      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800451c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004526:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	2319      	movs	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	490f      	ldr	r1, [pc, #60]	@ (8004570 <HAL_I2C_IsDeviceReady+0x254>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 faee 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e012      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3301      	adds	r3, #1
 8004546:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	f4ff af32 	bcc.w	80043b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004566:	2302      	movs	r3, #2
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	3720      	adds	r7, #32
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	00100002 	.word	0x00100002
 8004574:	ffff0000 	.word	0xffff0000

08004578 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	607a      	str	r2, [r7, #4]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	460b      	mov	r3, r1
 8004586:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d006      	beq.n	80045a2 <I2C_MasterRequestWrite+0x2a>
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d003      	beq.n	80045a2 <I2C_MasterRequestWrite+0x2a>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045a0:	d108      	bne.n	80045b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	e00b      	b.n	80045cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	2b12      	cmp	r3, #18
 80045ba:	d107      	bne.n	80045cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 fa9b 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00d      	beq.n	8004600 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f2:	d103      	bne.n	80045fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e035      	b.n	800466c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004608:	d108      	bne.n	800461c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004618:	611a      	str	r2, [r3, #16]
 800461a:	e01b      	b.n	8004654 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800461c:	897b      	ldrh	r3, [r7, #10]
 800461e:	11db      	asrs	r3, r3, #7
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f063 030f 	orn	r3, r3, #15
 800462c:	b2da      	uxtb	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	490e      	ldr	r1, [pc, #56]	@ (8004674 <I2C_MasterRequestWrite+0xfc>)
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fae4 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d001      	beq.n	800464a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e010      	b.n	800466c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4907      	ldr	r1, [pc, #28]	@ (8004678 <I2C_MasterRequestWrite+0x100>)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fad4 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	00010008 	.word	0x00010008
 8004678:	00010002 	.word	0x00010002

0800467c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	607a      	str	r2, [r7, #4]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	460b      	mov	r3, r1
 800468a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d006      	beq.n	80046b6 <I2C_MasterRequestRead+0x3a>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d003      	beq.n	80046b6 <I2C_MasterRequestRead+0x3a>
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046b4:	d108      	bne.n	80046c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e00b      	b.n	80046e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	2b11      	cmp	r3, #17
 80046ce:	d107      	bne.n	80046e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fa11 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004706:	d103      	bne.n	8004710 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800470e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e079      	b.n	8004808 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471c:	d108      	bne.n	8004730 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800471e:	897b      	ldrh	r3, [r7, #10]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	b2da      	uxtb	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	611a      	str	r2, [r3, #16]
 800472e:	e05f      	b.n	80047f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	11db      	asrs	r3, r3, #7
 8004734:	b2db      	uxtb	r3, r3
 8004736:	f003 0306 	and.w	r3, r3, #6
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f063 030f 	orn	r3, r3, #15
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4930      	ldr	r1, [pc, #192]	@ (8004810 <I2C_MasterRequestRead+0x194>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fa5a 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e054      	b.n	8004808 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800475e:	897b      	ldrh	r3, [r7, #10]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	4929      	ldr	r1, [pc, #164]	@ (8004814 <I2C_MasterRequestRead+0x198>)
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa4a 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e044      	b.n	8004808 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f9af 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ca:	d103      	bne.n	80047d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e017      	b.n	8004808 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047d8:	897b      	ldrh	r3, [r7, #10]
 80047da:	11db      	asrs	r3, r3, #7
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0306 	and.w	r3, r3, #6
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f063 030e 	orn	r3, r3, #14
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4907      	ldr	r1, [pc, #28]	@ (8004814 <I2C_MasterRequestRead+0x198>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa06 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	00010008 	.word	0x00010008
 8004814:	00010002 	.word	0x00010002

08004818 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	4608      	mov	r0, r1
 8004822:	4611      	mov	r1, r2
 8004824:	461a      	mov	r2, r3
 8004826:	4603      	mov	r3, r0
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	460b      	mov	r3, r1
 800482c:	813b      	strh	r3, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	2200      	movs	r2, #0
 800484a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f960 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004868:	d103      	bne.n	8004872 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004870:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e05f      	b.n	8004936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	6a3a      	ldr	r2, [r7, #32]
 800488a:	492d      	ldr	r1, [pc, #180]	@ (8004940 <I2C_RequestMemoryWrite+0x128>)
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f9bb 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e04c      	b.n	8004936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	617b      	str	r3, [r7, #20]
 80048b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b4:	6a39      	ldr	r1, [r7, #32]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fa46 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00d      	beq.n	80048de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d107      	bne.n	80048da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e02b      	b.n	8004936 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	611a      	str	r2, [r3, #16]
 80048ee:	e021      	b.n	8004934 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048f0:	893b      	ldrh	r3, [r7, #8]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	6a39      	ldr	r1, [r7, #32]
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fa20 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	2b04      	cmp	r3, #4
 8004914:	d107      	bne.n	8004926 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e005      	b.n	8004936 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800492a:	893b      	ldrh	r3, [r7, #8]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	00010002 	.word	0x00010002

08004944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4603      	mov	r3, r0
 8004954:	817b      	strh	r3, [r7, #10]
 8004956:	460b      	mov	r3, r1
 8004958:	813b      	strh	r3, [r7, #8]
 800495a:	4613      	mov	r3, r2
 800495c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800496c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800497c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	2200      	movs	r2, #0
 8004986:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f8c2 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049a4:	d103      	bne.n	80049ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e0aa      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	6a3a      	ldr	r2, [r7, #32]
 80049c6:	4952      	ldr	r1, [pc, #328]	@ (8004b10 <I2C_RequestMemoryRead+0x1cc>)
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f91d 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e097      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f0:	6a39      	ldr	r1, [r7, #32]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f9a8 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d107      	bne.n	8004a16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e076      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a20:	893b      	ldrh	r3, [r7, #8]
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]
 8004a2a:	e021      	b.n	8004a70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2c:	893b      	ldrh	r3, [r7, #8]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f982 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d107      	bne.n	8004a62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e050      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a66:	893b      	ldrh	r3, [r7, #8]
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a72:	6a39      	ldr	r1, [r7, #32]
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f967 	bl	8004d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00d      	beq.n	8004a9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d107      	bne.n	8004a98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e035      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f82b 	bl	8004b14 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	d103      	bne.n	8004adc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e013      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ae0:	897b      	ldrh	r3, [r7, #10]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f043 0301 	orr.w	r3, r3, #1
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	4906      	ldr	r1, [pc, #24]	@ (8004b10 <I2C_RequestMemoryRead+0x1cc>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f886 	bl	8004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	00010002 	.word	0x00010002

08004b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b24:	e048      	b.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d044      	beq.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fe f8bb 	bl	8002ca8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d139      	bne.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d10d      	bne.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	43da      	mvns	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	e00c      	b.n	8004b84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	43da      	mvns	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d116      	bne.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f043 0220 	orr.w	r2, r3, #32
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e023      	b.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10d      	bne.n	8004bde <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	e00c      	b.n	8004bf8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	43da      	mvns	r2, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4013      	ands	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d093      	beq.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c16:	e071      	b.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c26:	d123      	bne.n	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0204 	orr.w	r2, r3, #4
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e067      	b.n	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d041      	beq.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c78:	f7fe f816 	bl	8002ca8 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d136      	bne.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d10c      	bne.n	8004cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	e00b      	b.n	8004cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f043 0220 	orr.w	r2, r3, #32
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e021      	b.n	8004d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10c      	bne.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4013      	ands	r3, r2
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	e00b      	b.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2301      	movne	r3, #1
 8004d34:	2300      	moveq	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f47f af6d 	bne.w	8004c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d54:	e034      	b.n	8004dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f8e3 	bl	8004f22 <I2C_IsAcknowledgeFailed>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e034      	b.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d028      	beq.n	8004dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6e:	f7fd ff9b 	bl	8002ca8 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d302      	bcc.n	8004d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d11d      	bne.n	8004dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	2b80      	cmp	r3, #128	@ 0x80
 8004d90:	d016      	beq.n	8004dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	f043 0220 	orr.w	r2, r3, #32
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e007      	b.n	8004dd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dca:	2b80      	cmp	r3, #128	@ 0x80
 8004dcc:	d1c3      	bne.n	8004d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de4:	e034      	b.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f89b 	bl	8004f22 <I2C_IsAcknowledgeFailed>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e034      	b.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d028      	beq.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fd ff53 	bl	8002ca8 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11d      	bne.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d016      	beq.n	8004e50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d1c3      	bne.n	8004de6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e74:	e049      	b.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d119      	bne.n	8004eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e030      	b.n	8004f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7fd fef6 	bl	8002ca8 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d302      	bcc.n	8004ece <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11d      	bne.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b40      	cmp	r3, #64	@ 0x40
 8004eda:	d016      	beq.n	8004f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e007      	b.n	8004f1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d1ae      	bne.n	8004e76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d11b      	bne.n	8004f72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	f043 0204 	orr.w	r2, r3, #4
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e108      	b.n	80051a4 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fd fc75 	bl	800289c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fc0:	d102      	bne.n	8004fc8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 f873 	bl	80070b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7c1a      	ldrb	r2, [r3, #16]
 8004fda:	f88d 2000 	strb.w	r2, [sp]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fe2:	f002 f805 	bl	8006ff0 <USB_CoreInit>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0d5      	b.n	80051a4 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f002 f86b 	bl	80070da <USB_SetCurrentMode>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2202      	movs	r2, #2
 800500e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0c6      	b.n	80051a4 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	e04a      	b.n	80050b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3315      	adds	r3, #21
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005030:	7bfa      	ldrb	r2, [r7, #15]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3314      	adds	r3, #20
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	b298      	uxth	r0, r3
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	332e      	adds	r3, #46	@ 0x2e
 8005058:	4602      	mov	r2, r0
 800505a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3318      	adds	r3, #24
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005070:	7bfa      	ldrb	r2, [r7, #15]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	00db      	lsls	r3, r3, #3
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	331c      	adds	r3, #28
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3320      	adds	r3, #32
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3324      	adds	r3, #36	@ 0x24
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	3301      	adds	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	791b      	ldrb	r3, [r3, #4]
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3af      	bcc.n	800501c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050bc:	2300      	movs	r3, #0
 80050be:	73fb      	strb	r3, [r7, #15]
 80050c0:	e044      	b.n	800514c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050d8:	7bfa      	ldrb	r2, [r7, #15]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005104:	7bfa      	ldrb	r2, [r7, #15]
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	3301      	adds	r3, #1
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	791b      	ldrb	r3, [r3, #4]
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	429a      	cmp	r2, r3
 8005154:	d3b5      	bcc.n	80050c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7c1a      	ldrb	r2, [r3, #16]
 800515e:	f88d 2000 	strb.w	r2, [sp]
 8005162:	3304      	adds	r3, #4
 8005164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005166:	f002 f805 	bl	8007174 <USB_DevInit>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d005      	beq.n	800517c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e013      	b.n	80051a4 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	7b1b      	ldrb	r3, [r3, #12]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d102      	bne.n	8005198 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f80a 	bl	80051ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f002 f9c0 	bl	8007522 <USB_DevDisconnect>

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	f043 0303 	orr.w	r3, r3, #3
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0cc      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005208:	4b68      	ldr	r3, [pc, #416]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d90c      	bls.n	8005230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005216:	4b65      	ldr	r3, [pc, #404]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b63      	ldr	r3, [pc, #396]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0b8      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d020      	beq.n	800527e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005248:	4b59      	ldr	r3, [pc, #356]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4a58      	ldr	r2, [pc, #352]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800524e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005252:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005260:	4b53      	ldr	r3, [pc, #332]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a52      	ldr	r2, [pc, #328]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800526a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b50      	ldr	r3, [pc, #320]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	494d      	ldr	r1, [pc, #308]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	4313      	orrs	r3, r2
 800527c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d044      	beq.n	8005314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d107      	bne.n	80052a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005292:	4b47      	ldr	r3, [pc, #284]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d119      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e07f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d107      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b2:	4b3f      	ldr	r3, [pc, #252]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e06f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052c2:	4b3b      	ldr	r3, [pc, #236]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e067      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4b37      	ldr	r3, [pc, #220]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4934      	ldr	r1, [pc, #208]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052e4:	f7fd fce0 	bl	8002ca8 <HAL_GetTick>
 80052e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ec:	f7fd fcdc 	bl	8002ca8 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e04f      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005302:	4b2b      	ldr	r3, [pc, #172]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 020c 	and.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	429a      	cmp	r2, r3
 8005312:	d1eb      	bne.n	80052ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005314:	4b25      	ldr	r3, [pc, #148]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d20c      	bcs.n	800533c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b22      	ldr	r3, [pc, #136]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b20      	ldr	r3, [pc, #128]	@ (80053ac <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e032      	b.n	80053a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005348:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	4916      	ldr	r1, [pc, #88]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	4313      	orrs	r3, r2
 8005358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005366:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	490e      	ldr	r1, [pc, #56]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800537a:	f000 f821 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
 800537e:	4602      	mov	r2, r0
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	490a      	ldr	r1, [pc, #40]	@ (80053b4 <HAL_RCC_ClockConfig+0x1c0>)
 800538c:	5ccb      	ldrb	r3, [r1, r3]
 800538e:	fa22 f303 	lsr.w	r3, r2, r3
 8005392:	4a09      	ldr	r2, [pc, #36]	@ (80053b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCC_ClockConfig+0x1c8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd fc40 	bl	8002c20 <HAL_InitTick>

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40023c00 	.word	0x40023c00
 80053b0:	40023800 	.word	0x40023800
 80053b4:	0800c218 	.word	0x0800c218
 80053b8:	200000ac 	.word	0x200000ac
 80053bc:	200000b0 	.word	0x200000b0

080053c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c4:	b094      	sub	sp, #80	@ 0x50
 80053c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d8:	4b79      	ldr	r3, [pc, #484]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d00d      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x40>
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	f200 80e1 	bhi.w	80055ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x34>
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d003      	beq.n	80053fa <HAL_RCC_GetSysClockFreq+0x3a>
 80053f2:	e0db      	b.n	80055ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f4:	4b73      	ldr	r3, [pc, #460]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053f8:	e0db      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053fa:	4b73      	ldr	r3, [pc, #460]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053fe:	e0d8      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005400:	4b6f      	ldr	r3, [pc, #444]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005408:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800540a:	4b6d      	ldr	r3, [pc, #436]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d063      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005416:	4b6a      	ldr	r3, [pc, #424]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	2200      	movs	r2, #0
 800541e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005420:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	633b      	str	r3, [r7, #48]	@ 0x30
 800542a:	2300      	movs	r3, #0
 800542c:	637b      	str	r3, [r7, #52]	@ 0x34
 800542e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005432:	4622      	mov	r2, r4
 8005434:	462b      	mov	r3, r5
 8005436:	f04f 0000 	mov.w	r0, #0
 800543a:	f04f 0100 	mov.w	r1, #0
 800543e:	0159      	lsls	r1, r3, #5
 8005440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005444:	0150      	lsls	r0, r2, #5
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4621      	mov	r1, r4
 800544c:	1a51      	subs	r1, r2, r1
 800544e:	6139      	str	r1, [r7, #16]
 8005450:	4629      	mov	r1, r5
 8005452:	eb63 0301 	sbc.w	r3, r3, r1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005464:	4659      	mov	r1, fp
 8005466:	018b      	lsls	r3, r1, #6
 8005468:	4651      	mov	r1, sl
 800546a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546e:	4651      	mov	r1, sl
 8005470:	018a      	lsls	r2, r1, #6
 8005472:	4651      	mov	r1, sl
 8005474:	ebb2 0801 	subs.w	r8, r2, r1
 8005478:	4659      	mov	r1, fp
 800547a:	eb63 0901 	sbc.w	r9, r3, r1
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800548a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005492:	4690      	mov	r8, r2
 8005494:	4699      	mov	r9, r3
 8005496:	4623      	mov	r3, r4
 8005498:	eb18 0303 	adds.w	r3, r8, r3
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	462b      	mov	r3, r5
 80054a0:	eb49 0303 	adc.w	r3, r9, r3
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054b2:	4629      	mov	r1, r5
 80054b4:	024b      	lsls	r3, r1, #9
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054bc:	4621      	mov	r1, r4
 80054be:	024a      	lsls	r2, r1, #9
 80054c0:	4610      	mov	r0, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	2200      	movs	r2, #0
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054d0:	f7fb fbfa 	bl	8000cc8 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4613      	mov	r3, r2
 80054da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054dc:	e058      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	2200      	movs	r2, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	4611      	mov	r1, r2
 80054ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	f04f 0000 	mov.w	r0, #0
 8005500:	f04f 0100 	mov.w	r1, #0
 8005504:	0159      	lsls	r1, r3, #5
 8005506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800550a:	0150      	lsls	r0, r2, #5
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4641      	mov	r1, r8
 8005512:	ebb2 0a01 	subs.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb63 0b01 	sbc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800552c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005530:	ebb2 040a 	subs.w	r4, r2, sl
 8005534:	eb63 050b 	sbc.w	r5, r3, fp
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	00eb      	lsls	r3, r5, #3
 8005542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005546:	00e2      	lsls	r2, r4, #3
 8005548:	4614      	mov	r4, r2
 800554a:	461d      	mov	r5, r3
 800554c:	4643      	mov	r3, r8
 800554e:	18e3      	adds	r3, r4, r3
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	464b      	mov	r3, r9
 8005554:	eb45 0303 	adc.w	r3, r5, r3
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005566:	4629      	mov	r1, r5
 8005568:	028b      	lsls	r3, r1, #10
 800556a:	4621      	mov	r1, r4
 800556c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005570:	4621      	mov	r1, r4
 8005572:	028a      	lsls	r2, r1, #10
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800557a:	2200      	movs	r2, #0
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	61fa      	str	r2, [r7, #28]
 8005580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005584:	f7fb fba0 	bl	8000cc8 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4613      	mov	r3, r2
 800558e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005590:	4b0b      	ldr	r3, [pc, #44]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	3301      	adds	r3, #1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80055a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055aa:	e002      	b.n	80055b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ac:	4b05      	ldr	r3, [pc, #20]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3750      	adds	r7, #80	@ 0x50
 80055b8:	46bd      	mov	sp, r7
 80055ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	200000ac 	.word	0x200000ac

080055e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e8:	f7ff fff0 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	0a9b      	lsrs	r3, r3, #10
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	4903      	ldr	r1, [pc, #12]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005600:	4618      	mov	r0, r3
 8005602:	bd80      	pop	{r7, pc}
 8005604:	40023800 	.word	0x40023800
 8005608:	0800c228 	.word	0x0800c228

0800560c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005610:	f7ff ffdc 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8005614:	4602      	mov	r2, r0
 8005616:	4b05      	ldr	r3, [pc, #20]	@ (800562c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	0b5b      	lsrs	r3, r3, #13
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	4903      	ldr	r1, [pc, #12]	@ (8005630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005622:	5ccb      	ldrb	r3, [r1, r3]
 8005624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005628:	4618      	mov	r0, r3
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40023800 	.word	0x40023800
 8005630:	0800c228 	.word	0x0800c228

08005634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d010      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8005654:	4b87      	ldr	r3, [pc, #540]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800565a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4984      	ldr	r1, [pc, #528]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8005672:	2301      	movs	r3, #1
 8005674:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d010      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8005682:	4b7c      	ldr	r3, [pc, #496]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005688:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	4978      	ldr	r1, [pc, #480]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8083 	beq.w	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	4a6e      	ldr	r2, [pc, #440]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a69      	ldr	r2, [pc, #420]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056da:	f7fd fae5 	bl	8002ca8 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e2:	f7fd fae1 	bl	8002ca8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e162      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80056f4:	4b60      	ldr	r3, [pc, #384]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005700:	4b5c      	ldr	r3, [pc, #368]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005704:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005708:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02f      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	429a      	cmp	r2, r3
 800571c:	d028      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800571e:	4b55      	ldr	r3, [pc, #340]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005726:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005728:	4b54      	ldr	r3, [pc, #336]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800572e:	4b53      	ldr	r3, [pc, #332]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005734:	4a4f      	ldr	r2, [pc, #316]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800573a:	4b4e      	ldr	r3, [pc, #312]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d114      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005746:	f7fd faaf 	bl	8002ca8 <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574c:	e00a      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fd faab 	bl	8002ca8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e12a      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	4b43      	ldr	r3, [pc, #268]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ee      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577c:	d10d      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x166>
 800577e:	4b3d      	ldr	r3, [pc, #244]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800578e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005792:	4938      	ldr	r1, [pc, #224]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005794:	4313      	orrs	r3, r2
 8005796:	608b      	str	r3, [r1, #8]
 8005798:	e005      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800579a:	4b36      	ldr	r3, [pc, #216]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	4a35      	ldr	r2, [pc, #212]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057a0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057a4:	6093      	str	r3, [r2, #8]
 80057a6:	4b33      	ldr	r3, [pc, #204]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b2:	4930      	ldr	r1, [pc, #192]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d004      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80057ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057cc:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80057da:	4b26      	ldr	r3, [pc, #152]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e8:	4922      	ldr	r1, [pc, #136]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d011      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80057fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005802:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580a:	491a      	ldr	r1, [pc, #104]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800580c:	4313      	orrs	r3, r2
 800580e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800581a:	d101      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800582c:	4b11      	ldr	r3, [pc, #68]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800582e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005832:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	490e      	ldr	r1, [pc, #56]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d004      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b80      	cmp	r3, #128	@ 0x80
 800584e:	f040 8091 	bne.w	8005974 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005852:	4b0c      	ldr	r3, [pc, #48]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005858:	f7fd fa26 	bl	8002ca8 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800585e:	e013      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005860:	f7fd fa22 	bl	8002ca8 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d90c      	bls.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e0a3      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x386>
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	40007000 	.word	0x40007000
 800587c:	42470e40 	.word	0x42470e40
 8005880:	424711e0 	.word	0x424711e0
 8005884:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005888:	4b4e      	ldr	r3, [pc, #312]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8005894:	4a4c      	ldr	r2, [pc, #304]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d023      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d019      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058d8:	d00e      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d019      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d115      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058f6:	d110      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	071b      	lsls	r3, r3, #28
 8005912:	492c      	ldr	r1, [pc, #176]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005914:	4313      	orrs	r3, r2
 8005916:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	019b      	lsls	r3, r3, #6
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	071b      	lsls	r3, r3, #28
 8005940:	4920      	ldr	r1, [pc, #128]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005948:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800594e:	f7fd f9ab 	bl	8002ca8 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005954:	e008      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005956:	f7fd f9a7 	bl	8002ca8 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e028      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005968:	4b16      	ldr	r3, [pc, #88]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0f0      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005986:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	490d      	ldr	r1, [pc, #52]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8005990:	4313      	orrs	r3, r2
 8005992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059a2:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059a8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b0:	4904      	ldr	r1, [pc, #16]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800
 80059c8:	424710d8 	.word	0x424710d8
 80059cc:	42470068 	.word	0x42470068

080059d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e273      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d075      	beq.n	8005ada <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059ee:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d00c      	beq.n	8005a14 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	4b85      	ldr	r3, [pc, #532]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d112      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a06:	4b82      	ldr	r3, [pc, #520]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a12:	d10b      	bne.n	8005a2c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a14:	4b7e      	ldr	r3, [pc, #504]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d05b      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x108>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d157      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e24e      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a34:	d106      	bne.n	8005a44 <HAL_RCC_OscConfig+0x74>
 8005a36:	4b76      	ldr	r3, [pc, #472]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	e01d      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x98>
 8005a4e:	4b70      	ldr	r3, [pc, #448]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6f      	ldr	r2, [pc, #444]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6c      	ldr	r2, [pc, #432]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00b      	b.n	8005a80 <HAL_RCC_OscConfig+0xb0>
 8005a68:	4b69      	ldr	r3, [pc, #420]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a68      	ldr	r2, [pc, #416]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	4b66      	ldr	r3, [pc, #408]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a65      	ldr	r2, [pc, #404]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a88:	f7fd f90e 	bl	8002ca8 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a90:	f7fd f90a 	bl	8002ca8 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b64      	cmp	r3, #100	@ 0x64
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e213      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0xc0>
 8005aae:	e014      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fd f8fa 	bl	8002ca8 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab8:	f7fd f8f6 	bl	8002ca8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b64      	cmp	r3, #100	@ 0x64
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e1ff      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aca:	4b51      	ldr	r3, [pc, #324]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0xe8>
 8005ad6:	e000      	b.n	8005ada <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d063      	beq.n	8005bae <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b47      	ldr	r3, [pc, #284]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
        || \
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d11c      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b44      	ldr	r3, [pc, #272]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b0a:	4b41      	ldr	r3, [pc, #260]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e1d3      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b22:	4b3b      	ldr	r3, [pc, #236]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4937      	ldr	r1, [pc, #220]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	e03a      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b40:	4b34      	ldr	r3, [pc, #208]	@ (8005c14 <HAL_RCC_OscConfig+0x244>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fd f8af 	bl	8002ca8 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fd f8ab 	bl	8002ca8 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e1b4      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b60:	4b2b      	ldr	r3, [pc, #172]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f0      	beq.n	8005b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6c:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4925      	ldr	r1, [pc, #148]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
 8005b80:	e015      	b.n	8005bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <HAL_RCC_OscConfig+0x244>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b88:	f7fd f88e 	bl	8002ca8 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b90:	f7fd f88a 	bl	8002ca8 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e193      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d036      	beq.n	8005c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d016      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc2:	4b15      	ldr	r3, [pc, #84]	@ (8005c18 <HAL_RCC_OscConfig+0x248>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc8:	f7fd f86e 	bl	8002ca8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fd f86a 	bl	8002ca8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e173      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005be2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c10 <HAL_RCC_OscConfig+0x240>)
 8005be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x200>
 8005bee:	e01b      	b.n	8005c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bf0:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <HAL_RCC_OscConfig+0x248>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf6:	f7fd f857 	bl	8002ca8 <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bfc:	e00e      	b.n	8005c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfe:	f7fd f853 	bl	8002ca8 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d907      	bls.n	8005c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e15c      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	42470000 	.word	0x42470000
 8005c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1ea      	bne.n	8005bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8097 	beq.w	8005d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c36:	2300      	movs	r3, #0
 8005c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3a:	4b83      	ldr	r3, [pc, #524]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c56:	4b7c      	ldr	r3, [pc, #496]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c66:	4b79      	ldr	r3, [pc, #484]	@ (8005e4c <HAL_RCC_OscConfig+0x47c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d118      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c72:	4b76      	ldr	r3, [pc, #472]	@ (8005e4c <HAL_RCC_OscConfig+0x47c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	@ (8005e4c <HAL_RCC_OscConfig+0x47c>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fd f813 	bl	8002ca8 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fd f80f 	bl	8002ca8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e118      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	4b6c      	ldr	r3, [pc, #432]	@ (8005e4c <HAL_RCC_OscConfig+0x47c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x2ea>
 8005cac:	4b66      	ldr	r3, [pc, #408]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a65      	ldr	r2, [pc, #404]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x324>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x30c>
 8005cc2:	4b61      	ldr	r3, [pc, #388]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a60      	ldr	r2, [pc, #384]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cc8:	f043 0304 	orr.w	r3, r3, #4
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cce:	4b5e      	ldr	r3, [pc, #376]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x324>
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a59      	ldr	r2, [pc, #356]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce8:	4b57      	ldr	r3, [pc, #348]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a56      	ldr	r2, [pc, #344]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005cee:	f023 0304 	bic.w	r3, r3, #4
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d015      	beq.n	8005d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cfc:	f7fc ffd4 	bl	8002ca8 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d02:	e00a      	b.n	8005d1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d04:	f7fc ffd0 	bl	8002ca8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e0d7      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0ee      	beq.n	8005d04 <HAL_RCC_OscConfig+0x334>
 8005d26:	e014      	b.n	8005d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fc ffbe 	bl	8002ca8 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fc ffba 	bl	8002ca8 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0c1      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d46:	4b40      	ldr	r3, [pc, #256]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ee      	bne.n	8005d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d52:	7dfb      	ldrb	r3, [r7, #23]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b3b      	ldr	r3, [pc, #236]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80ad 	beq.w	8005ec8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d6e:	4b36      	ldr	r3, [pc, #216]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d060      	beq.n	8005e3c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d145      	bne.n	8005e0e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d82:	4b33      	ldr	r3, [pc, #204]	@ (8005e50 <HAL_RCC_OscConfig+0x480>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fc ff8e 	bl	8002ca8 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d90:	f7fc ff8a 	bl	8002ca8 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e093      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da2:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	69da      	ldr	r2, [r3, #28]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbc:	019b      	lsls	r3, r3, #6
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	061b      	lsls	r3, r3, #24
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	491b      	ldr	r1, [pc, #108]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e50 <HAL_RCC_OscConfig+0x480>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de6:	f7fc ff5f 	bl	8002ca8 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dee:	f7fc ff5b 	bl	8002ca8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e064      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e00:	4b11      	ldr	r3, [pc, #68]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x41e>
 8005e0c:	e05c      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e0e:	4b10      	ldr	r3, [pc, #64]	@ (8005e50 <HAL_RCC_OscConfig+0x480>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fc ff48 	bl	8002ca8 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fc ff44 	bl	8002ca8 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e04d      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <HAL_RCC_OscConfig+0x478>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1f0      	bne.n	8005e1c <HAL_RCC_OscConfig+0x44c>
 8005e3a:	e045      	b.n	8005ec8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d107      	bne.n	8005e54 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e040      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40007000 	.word	0x40007000
 8005e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <HAL_RCC_OscConfig+0x504>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d030      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d129      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d122      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d119      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40023800 	.word	0x40023800

08005ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e042      	b.n	8005f70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fc50 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2224      	movs	r2, #36	@ 0x24
 8005f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fdf3 	bl	8006b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	4613      	mov	r3, r2
 8005f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	d175      	bne.n	8006084 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_UART_Transmit+0x2c>
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e06e      	b.n	8006086 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2221      	movs	r2, #33	@ 0x21
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb6:	f7fc fe77 	bl	8002ca8 <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fd0:	d108      	bne.n	8005fe4 <HAL_UART_Transmit+0x6c>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	e003      	b.n	8005fec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fec:	e02e      	b.n	800604c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2180      	movs	r1, #128	@ 0x80
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 fb55 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e03a      	b.n	8006086 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10b      	bne.n	800602e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006024:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	3302      	adds	r3, #2
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	e007      	b.n	800603e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006042:	b29b      	uxth	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1cb      	bne.n	8005fee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	2140      	movs	r1, #64	@ 0x40
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f000 fb21 	bl	80066a8 <UART_WaitOnFlagUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e006      	b.n	8006086 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b08c      	sub	sp, #48	@ 0x30
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	4613      	mov	r3, r2
 800609a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d14a      	bne.n	800613e <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e043      	b.n	8006140 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	461a      	mov	r2, r3
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fb45 	bl	800675a <UART_Start_Receive_IT>
 80060d0:	4603      	mov	r3, r0
 80060d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80060d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d12c      	bne.n	8006138 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d125      	bne.n	8006132 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]
 80060fa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	617b      	str	r3, [r7, #20]
   return(result);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f043 0310 	orr.w	r3, r3, #16
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	627a      	str	r2, [r7, #36]	@ 0x24
 800611e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6a39      	ldr	r1, [r7, #32]
 8006122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	61fb      	str	r3, [r7, #28]
   return(result);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e5      	bne.n	80060fc <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006130:	e002      	b.n	8006138 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006138:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800613c:	e000      	b.n	8006140 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3730      	adds	r7, #48	@ 0x30
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b0ba      	sub	sp, #232	@ 0xe8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800616e:	2300      	movs	r3, #0
 8006170:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006174:	2300      	movs	r3, #0
 8006176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10f      	bne.n	80061ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <HAL_UART_IRQHandler+0x66>
 800619a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fbf0 	bl	800698c <UART_Receive_IT>
      return;
 80061ac:	e25b      	b.n	8006666 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 80de 	beq.w	8006374 <HAL_UART_IRQHandler+0x22c>
 80061b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d106      	bne.n	80061d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80d1 	beq.w	8006374 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00b      	beq.n	80061f6 <HAL_UART_IRQHandler+0xae>
 80061de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ee:	f043 0201 	orr.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00b      	beq.n	800621a <HAL_UART_IRQHandler+0xd2>
 8006202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006212:	f043 0202 	orr.w	r2, r3, #2
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00b      	beq.n	800623e <HAL_UART_IRQHandler+0xf6>
 8006226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	f043 0204 	orr.w	r2, r3, #4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <HAL_UART_IRQHandler+0x126>
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	f043 0208 	orr.w	r2, r3, #8
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 81f2 	beq.w	800665c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_UART_IRQHandler+0x14e>
 8006284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb7b 	bl	800698c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a0:	2b40      	cmp	r3, #64	@ 0x40
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <HAL_UART_IRQHandler+0x17a>
 80062ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d04f      	beq.n	8006362 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa83 	bl	80067ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d2:	2b40      	cmp	r3, #64	@ 0x40
 80062d4:	d141      	bne.n	800635a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3314      	adds	r3, #20
 80062fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006302:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800630e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800631a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1d9      	bne.n	80062d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d013      	beq.n	8006352 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800632e:	4a7e      	ldr	r2, [pc, #504]	@ (8006528 <HAL_UART_IRQHandler+0x3e0>)
 8006330:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	4618      	mov	r0, r3
 8006338:	f7fc fe67 	bl	800300a <HAL_DMA_Abort_IT>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d016      	beq.n	8006370 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006350:	e00e      	b.n	8006370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f99e 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e00a      	b.n	8006370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f99a 	bl	8006694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	e006      	b.n	8006370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f996 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800636e:	e175      	b.n	800665c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	bf00      	nop
    return;
 8006372:	e173      	b.n	800665c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006378:	2b01      	cmp	r3, #1
 800637a:	f040 814f 	bne.w	800661c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8148 	beq.w	800661c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8141 	beq.w	800661c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60bb      	str	r3, [r7, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	60bb      	str	r3, [r7, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	f040 80b6 	bne.w	800652c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8145 	beq.w	8006660 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063de:	429a      	cmp	r2, r3
 80063e0:	f080 813e 	bcs.w	8006660 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80063ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063f6:	f000 8088 	beq.w	800650a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006408:	e853 3f00 	ldrex	r3, [r3]
 800640c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006410:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006426:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800642a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006432:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800643e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1d9      	bne.n	80063fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3314      	adds	r3, #20
 800644c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800646a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800646e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006472:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800647c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e1      	bne.n	8006446 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006498:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3314      	adds	r3, #20
 80064a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064ae:	e841 2300 	strex	r3, r2, [r1]
 80064b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1e3      	bne.n	8006482 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	330c      	adds	r3, #12
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80064d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80064da:	f023 0310 	bic.w	r3, r3, #16
 80064de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80064ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80064ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e3      	bne.n	80064c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006504:	4618      	mov	r0, r3
 8006506:	f7fc fd10 	bl	8002f2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006518:	b29b      	uxth	r3, r3
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7fb fe19 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006526:	e09b      	b.n	8006660 <HAL_UART_IRQHandler+0x518>
 8006528:	08006895 	.word	0x08006895
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006534:	b29b      	uxth	r3, r3
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 808e 	beq.w	8006664 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8089 	beq.w	8006664 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006576:	647a      	str	r2, [r7, #68]	@ 0x44
 8006578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800657c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e3      	bne.n	8006552 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	623b      	str	r3, [r7, #32]
   return(result);
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	f023 0301 	bic.w	r3, r3, #1
 80065a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3314      	adds	r3, #20
 80065aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e3      	bne.n	800658a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0310 	bic.w	r3, r3, #16
 80065e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80065f4:	61fa      	str	r2, [r7, #28]
 80065f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	69b9      	ldr	r1, [r7, #24]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	617b      	str	r3, [r7, #20]
   return(result);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e3      	bne.n	80065d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800660e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fb fd9f 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800661a:	e023      	b.n	8006664 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006624:	2b00      	cmp	r3, #0
 8006626:	d009      	beq.n	800663c <HAL_UART_IRQHandler+0x4f4>
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f941 	bl	80068bc <UART_Transmit_IT>
    return;
 800663a:	e014      	b.n	8006666 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00e      	beq.n	8006666 <HAL_UART_IRQHandler+0x51e>
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f981 	bl	800695c <UART_EndTransmit_IT>
    return;
 800665a:	e004      	b.n	8006666 <HAL_UART_IRQHandler+0x51e>
    return;
 800665c:	bf00      	nop
 800665e:	e002      	b.n	8006666 <HAL_UART_IRQHandler+0x51e>
      return;
 8006660:	bf00      	nop
 8006662:	e000      	b.n	8006666 <HAL_UART_IRQHandler+0x51e>
      return;
 8006664:	bf00      	nop
  }
}
 8006666:	37e8      	adds	r7, #232	@ 0xe8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	4613      	mov	r3, r2
 80066b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066b8:	e03b      	b.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c0:	d037      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066c2:	f7fc faf1 	bl	8002ca8 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	6a3a      	ldr	r2, [r7, #32]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d302      	bcc.n	80066d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e03a      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d023      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b80      	cmp	r3, #128	@ 0x80
 80066ee:	d020      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b40      	cmp	r3, #64	@ 0x40
 80066f4:	d01d      	beq.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b08      	cmp	r3, #8
 8006702:	d116      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f857 	bl	80067ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2208      	movs	r2, #8
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e00f      	b.n	8006752 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	461a      	mov	r2, r3
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	429a      	cmp	r2, r3
 800674e:	d0b4      	beq.n	80066ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	4613      	mov	r3, r2
 8006766:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2222      	movs	r2, #34	@ 0x22
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800679e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0220 	orr.w	r2, r2, #32
 80067be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b095      	sub	sp, #84	@ 0x54
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80067f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067fe:	e841 2300 	strex	r3, r2, [r1]
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e5      	bne.n	80067d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3314      	adds	r3, #20
 8006810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	61fb      	str	r3, [r7, #28]
   return(result);
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800682a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800682c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e5      	bne.n	800680a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006842:	2b01      	cmp	r3, #1
 8006844:	d119      	bne.n	800687a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	60bb      	str	r3, [r7, #8]
   return(result);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f023 0310 	bic.w	r3, r3, #16
 800685c:	647b      	str	r3, [r7, #68]	@ 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006866:	61ba      	str	r2, [r7, #24]
 8006868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6979      	ldr	r1, [r7, #20]
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	613b      	str	r3, [r7, #16]
   return(result);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006888:	bf00      	nop
 800688a:	3754      	adds	r7, #84	@ 0x54
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff fef0 	bl	8006694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b21      	cmp	r3, #33	@ 0x21
 80068ce:	d13e      	bne.n	800694e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068d8:	d114      	bne.n	8006904 <UART_Transmit_IT+0x48>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d110      	bne.n	8006904 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	1c9a      	adds	r2, r3, #2
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]
 8006902:	e008      	b.n	8006916 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6211      	str	r1, [r2, #32]
 800690e:	781a      	ldrb	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29b      	uxth	r3, r3
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4619      	mov	r1, r3
 8006924:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10f      	bne.n	800694a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006938:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006948:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006972:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fe75 	bl	800666c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08c      	sub	sp, #48	@ 0x30
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b22      	cmp	r3, #34	@ 0x22
 800699e:	f040 80ae 	bne.w	8006afe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069aa:	d117      	bne.n	80069dc <UART_Receive_IT+0x50>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d113      	bne.n	80069dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80069da:	e026      	b.n	8006a2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80069e2:	2300      	movs	r3, #0
 80069e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ee:	d007      	beq.n	8006a00 <UART_Receive_IT+0x74>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <UART_Receive_IT+0x82>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e008      	b.n	8006a20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4619      	mov	r1, r3
 8006a38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d15d      	bne.n	8006afa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0220 	bic.w	r2, r2, #32
 8006a4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0201 	bic.w	r2, r2, #1
 8006a6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d135      	bne.n	8006af0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	613b      	str	r3, [r7, #16]
   return(result);
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f023 0310 	bic.w	r3, r3, #16
 8006aa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	330c      	adds	r3, #12
 8006aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aaa:	623a      	str	r2, [r7, #32]
 8006aac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	69f9      	ldr	r1, [r7, #28]
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e5      	bne.n	8006a8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d10a      	bne.n	8006ae2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7fb fb35 	bl	8002158 <HAL_UARTEx_RxEventCallback>
 8006aee:	e002      	b.n	8006af6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff fdc5 	bl	8006680 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e002      	b.n	8006b00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e000      	b.n	8006b00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006afe:	2302      	movs	r3, #2
  }
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3730      	adds	r7, #48	@ 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b0c:	b0c0      	sub	sp, #256	@ 0x100
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	68d9      	ldr	r1, [r3, #12]
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	ea40 0301 	orr.w	r3, r0, r1
 8006b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b60:	f021 010c 	bic.w	r1, r1, #12
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b82:	6999      	ldr	r1, [r3, #24]
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	ea40 0301 	orr.w	r3, r0, r1
 8006b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	4b8f      	ldr	r3, [pc, #572]	@ (8006dd4 <UART_SetConfig+0x2cc>)
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d005      	beq.n	8006ba8 <UART_SetConfig+0xa0>
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8006dd8 <UART_SetConfig+0x2d0>)
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d104      	bne.n	8006bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ba8:	f7fe fd30 	bl	800560c <HAL_RCC_GetPCLK2Freq>
 8006bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bb0:	e003      	b.n	8006bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fe fd17 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc4:	f040 810c 	bne.w	8006de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bda:	4622      	mov	r2, r4
 8006bdc:	462b      	mov	r3, r5
 8006bde:	1891      	adds	r1, r2, r2
 8006be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006be2:	415b      	adcs	r3, r3
 8006be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bea:	4621      	mov	r1, r4
 8006bec:	eb12 0801 	adds.w	r8, r2, r1
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	eb43 0901 	adc.w	r9, r3, r1
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c0a:	4690      	mov	r8, r2
 8006c0c:	4699      	mov	r9, r3
 8006c0e:	4623      	mov	r3, r4
 8006c10:	eb18 0303 	adds.w	r3, r8, r3
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c18:	462b      	mov	r3, r5
 8006c1a:	eb49 0303 	adc.w	r3, r9, r3
 8006c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c36:	460b      	mov	r3, r1
 8006c38:	18db      	adds	r3, r3, r3
 8006c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	eb42 0303 	adc.w	r3, r2, r3
 8006c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c4c:	f7fa f83c 	bl	8000cc8 <__aeabi_uldivmod>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4b61      	ldr	r3, [pc, #388]	@ (8006ddc <UART_SetConfig+0x2d4>)
 8006c56:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	011c      	lsls	r4, r3, #4
 8006c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c70:	4642      	mov	r2, r8
 8006c72:	464b      	mov	r3, r9
 8006c74:	1891      	adds	r1, r2, r2
 8006c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c78:	415b      	adcs	r3, r3
 8006c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c80:	4641      	mov	r1, r8
 8006c82:	eb12 0a01 	adds.w	sl, r2, r1
 8006c86:	4649      	mov	r1, r9
 8006c88:	eb43 0b01 	adc.w	fp, r3, r1
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca0:	4692      	mov	sl, r2
 8006ca2:	469b      	mov	fp, r3
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8006caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cae:	464b      	mov	r3, r9
 8006cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8006cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	18db      	adds	r3, r3, r3
 8006cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	eb42 0303 	adc.w	r3, r2, r3
 8006cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006ce2:	f7f9 fff1 	bl	8000cc8 <__aeabi_uldivmod>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4611      	mov	r1, r2
 8006cec:	4b3b      	ldr	r3, [pc, #236]	@ (8006ddc <UART_SetConfig+0x2d4>)
 8006cee:	fba3 2301 	umull	r2, r3, r3, r1
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	2264      	movs	r2, #100	@ 0x64
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	1acb      	subs	r3, r1, r3
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d02:	4b36      	ldr	r3, [pc, #216]	@ (8006ddc <UART_SetConfig+0x2d4>)
 8006d04:	fba3 2302 	umull	r2, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d10:	441c      	add	r4, r3
 8006d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d34:	4641      	mov	r1, r8
 8006d36:	1851      	adds	r1, r2, r1
 8006d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	414b      	adcs	r3, r1
 8006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d4c:	4659      	mov	r1, fp
 8006d4e:	00cb      	lsls	r3, r1, #3
 8006d50:	4651      	mov	r1, sl
 8006d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d56:	4651      	mov	r1, sl
 8006d58:	00ca      	lsls	r2, r1, #3
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4642      	mov	r2, r8
 8006d62:	189b      	adds	r3, r3, r2
 8006d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d68:	464b      	mov	r3, r9
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	eb42 0303 	adc.w	r3, r2, r3
 8006d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d88:	460b      	mov	r3, r1
 8006d8a:	18db      	adds	r3, r3, r3
 8006d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d8e:	4613      	mov	r3, r2
 8006d90:	eb42 0303 	adc.w	r3, r2, r3
 8006d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d9e:	f7f9 ff93 	bl	8000cc8 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <UART_SetConfig+0x2d4>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	@ 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	@ 0x32
 8006dba:	4a08      	ldr	r2, [pc, #32]	@ (8006ddc <UART_SetConfig+0x2d4>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f003 0207 	and.w	r2, r3, #7
 8006dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4422      	add	r2, r4
 8006dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd0:	e106      	b.n	8006fe0 <UART_SetConfig+0x4d8>
 8006dd2:	bf00      	nop
 8006dd4:	40011000 	.word	0x40011000
 8006dd8:	40011400 	.word	0x40011400
 8006ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006df2:	4642      	mov	r2, r8
 8006df4:	464b      	mov	r3, r9
 8006df6:	1891      	adds	r1, r2, r2
 8006df8:	6239      	str	r1, [r7, #32]
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e02:	4641      	mov	r1, r8
 8006e04:	1854      	adds	r4, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb43 0501 	adc.w	r5, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	00eb      	lsls	r3, r5, #3
 8006e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e1a:	00e2      	lsls	r2, r4, #3
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	4643      	mov	r3, r8
 8006e22:	18e3      	adds	r3, r4, r3
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e28:	464b      	mov	r3, r9
 8006e2a:	eb45 0303 	adc.w	r3, r5, r3
 8006e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e4e:	4629      	mov	r1, r5
 8006e50:	008b      	lsls	r3, r1, #2
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e58:	4621      	mov	r1, r4
 8006e5a:	008a      	lsls	r2, r1, #2
 8006e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e60:	f7f9 ff32 	bl	8000cc8 <__aeabi_uldivmod>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4b60      	ldr	r3, [pc, #384]	@ (8006fec <UART_SetConfig+0x4e4>)
 8006e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	011c      	lsls	r4, r3, #4
 8006e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e76:	2200      	movs	r2, #0
 8006e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	1891      	adds	r1, r2, r2
 8006e8a:	61b9      	str	r1, [r7, #24]
 8006e8c:	415b      	adcs	r3, r3
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e94:	4641      	mov	r1, r8
 8006e96:	1851      	adds	r1, r2, r1
 8006e98:	6139      	str	r1, [r7, #16]
 8006e9a:	4649      	mov	r1, r9
 8006e9c:	414b      	adcs	r3, r1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	f04f 0200 	mov.w	r2, #0
 8006ea4:	f04f 0300 	mov.w	r3, #0
 8006ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eac:	4659      	mov	r1, fp
 8006eae:	00cb      	lsls	r3, r1, #3
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eb6:	4651      	mov	r1, sl
 8006eb8:	00ca      	lsls	r2, r1, #3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	189b      	adds	r3, r3, r2
 8006ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ec8:	464b      	mov	r3, r9
 8006eca:	460a      	mov	r2, r1
 8006ecc:	eb42 0303 	adc.w	r3, r2, r3
 8006ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006eec:	4649      	mov	r1, r9
 8006eee:	008b      	lsls	r3, r1, #2
 8006ef0:	4641      	mov	r1, r8
 8006ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	008a      	lsls	r2, r1, #2
 8006efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006efe:	f7f9 fee3 	bl	8000cc8 <__aeabi_uldivmod>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	4b38      	ldr	r3, [pc, #224]	@ (8006fec <UART_SetConfig+0x4e4>)
 8006f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	2264      	movs	r2, #100	@ 0x64
 8006f12:	fb02 f303 	mul.w	r3, r2, r3
 8006f16:	1acb      	subs	r3, r1, r3
 8006f18:	011b      	lsls	r3, r3, #4
 8006f1a:	3332      	adds	r3, #50	@ 0x32
 8006f1c:	4a33      	ldr	r2, [pc, #204]	@ (8006fec <UART_SetConfig+0x4e4>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f28:	441c      	add	r4, r3
 8006f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f2e:	2200      	movs	r2, #0
 8006f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	1891      	adds	r1, r2, r2
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	415b      	adcs	r3, r3
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f48:	4641      	mov	r1, r8
 8006f4a:	1851      	adds	r1, r2, r1
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	4649      	mov	r1, r9
 8006f50:	414b      	adcs	r3, r1
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f60:	4659      	mov	r1, fp
 8006f62:	00cb      	lsls	r3, r1, #3
 8006f64:	4651      	mov	r1, sl
 8006f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	00ca      	lsls	r2, r1, #3
 8006f6e:	4610      	mov	r0, r2
 8006f70:	4619      	mov	r1, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	4642      	mov	r2, r8
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	460a      	mov	r2, r1
 8006f7e:	eb42 0303 	adc.w	r3, r2, r3
 8006f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	008b      	lsls	r3, r1, #2
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fae:	f7f9 fe8b 	bl	8000cc8 <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <UART_SetConfig+0x4e4>)
 8006fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	2164      	movs	r1, #100	@ 0x64
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	3332      	adds	r3, #50	@ 0x32
 8006fca:	4a08      	ldr	r2, [pc, #32]	@ (8006fec <UART_SetConfig+0x4e4>)
 8006fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd0:	095b      	lsrs	r3, r3, #5
 8006fd2:	f003 020f 	and.w	r2, r3, #15
 8006fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4422      	add	r2, r4
 8006fde:	609a      	str	r2, [r3, #8]
}
 8006fe0:	bf00      	nop
 8006fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fec:	51eb851f 	.word	0x51eb851f

08006ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff0:	b084      	sub	sp, #16
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	f107 001c 	add.w	r0, r7, #28
 8006ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007002:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007006:	2b01      	cmp	r3, #1
 8007008:	d123      	bne.n	8007052 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800701e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007032:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007036:	2b01      	cmp	r3, #1
 8007038:	d105      	bne.n	8007046 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa9a 	bl	8007580 <USB_CoreReset>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
 8007050:	e01b      	b.n	800708a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa8e 	bl	8007580 <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007068:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	639a      	str	r2, [r3, #56]	@ 0x38
 800707c:	e005      	b.n	800708a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800708a:	7fbb      	ldrb	r3, [r7, #30]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10b      	bne.n	80070a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f043 0206 	orr.w	r2, r3, #6
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b4:	b004      	add	sp, #16
 80070b6:	4770      	bx	lr

080070b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f023 0201 	bic.w	r2, r3, #1
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d115      	bne.n	8007128 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007108:	200a      	movs	r0, #10
 800710a:	f7fb fdd9 	bl	8002cc0 <HAL_Delay>
      ms += 10U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	330a      	adds	r3, #10
 8007112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa25 	bl	8007564 <USB_GetMode>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d01e      	beq.n	800715e <USB_SetCurrentMode+0x84>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2bc7      	cmp	r3, #199	@ 0xc7
 8007124:	d9f0      	bls.n	8007108 <USB_SetCurrentMode+0x2e>
 8007126:	e01a      	b.n	800715e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d115      	bne.n	800715a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800713a:	200a      	movs	r0, #10
 800713c:	f7fb fdc0 	bl	8002cc0 <HAL_Delay>
      ms += 10U;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	330a      	adds	r3, #10
 8007144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa0c 	bl	8007564 <USB_GetMode>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USB_SetCurrentMode+0x84>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2bc7      	cmp	r3, #199	@ 0xc7
 8007156:	d9f0      	bls.n	800713a <USB_SetCurrentMode+0x60>
 8007158:	e001      	b.n	800715e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e005      	b.n	800716a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2bc8      	cmp	r3, #200	@ 0xc8
 8007162:	d101      	bne.n	8007168 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007174:	b084      	sub	sp, #16
 8007176:	b580      	push	{r7, lr}
 8007178:	b086      	sub	sp, #24
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
 8007192:	e009      	b.n	80071a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3340      	adds	r3, #64	@ 0x40
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3301      	adds	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b0e      	cmp	r3, #14
 80071ac:	d9f2      	bls.n	8007194 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11c      	bne.n	80071f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e005      	b.n	80071fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007202:	461a      	mov	r2, r3
 8007204:	2300      	movs	r3, #0
 8007206:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007208:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10d      	bne.n	800722c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007218:	2100      	movs	r1, #0
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f968 	bl	80074f0 <USB_SetDevSpeed>
 8007220:	e008      	b.n	8007234 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007222:	2101      	movs	r1, #1
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f963 	bl	80074f0 <USB_SetDevSpeed>
 800722a:	e003      	b.n	8007234 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800722c:	2103      	movs	r1, #3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f95e 	bl	80074f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007234:	2110      	movs	r1, #16
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f8fa 	bl	8007430 <USB_FlushTxFifo>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f924 	bl	8007494 <USB_FlushRxFifo>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725c:	461a      	mov	r2, r3
 800725e:	2300      	movs	r3, #0
 8007260:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007268:	461a      	mov	r2, r3
 800726a:	2300      	movs	r3, #0
 800726c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007274:	461a      	mov	r2, r3
 8007276:	2300      	movs	r3, #0
 8007278:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	e043      	b.n	8007308 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007292:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007296:	d118      	bne.n	80072ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10a      	bne.n	80072b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072aa:	461a      	mov	r2, r3
 80072ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	e013      	b.n	80072dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c0:	461a      	mov	r2, r3
 80072c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	e008      	b.n	80072dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d6:	461a      	mov	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e8:	461a      	mov	r2, r3
 80072ea:	2300      	movs	r3, #0
 80072ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fa:	461a      	mov	r2, r3
 80072fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007300:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3301      	adds	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800730c:	461a      	mov	r2, r3
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	4293      	cmp	r3, r2
 8007312:	d3b5      	bcc.n	8007280 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e043      	b.n	80073a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800732c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007330:	d118      	bne.n	8007364 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007344:	461a      	mov	r2, r3
 8007346:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e013      	b.n	8007376 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735a:	461a      	mov	r2, r3
 800735c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e008      	b.n	8007376 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800739a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3301      	adds	r3, #1
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073a6:	461a      	mov	r2, r3
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d3b5      	bcc.n	800731a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f043 0210 	orr.w	r2, r3, #16
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699a      	ldr	r2, [r3, #24]
 80073e8:	4b10      	ldr	r3, [pc, #64]	@ (800742c <USB_DevInit+0x2b8>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	f043 0208 	orr.w	r2, r3, #8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007404:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007408:	2b01      	cmp	r3, #1
 800740a:	d107      	bne.n	800741c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007414:	f043 0304 	orr.w	r3, r3, #4
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007428:	b004      	add	sp, #16
 800742a:	4770      	bx	lr
 800742c:	803c3800 	.word	0x803c3800

08007430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800744a:	d901      	bls.n	8007450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e01b      	b.n	8007488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	daf2      	bge.n	800743e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	019b      	lsls	r3, r3, #6
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007474:	d901      	bls.n	800747a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e006      	b.n	8007488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b20      	cmp	r3, #32
 8007484:	d0f0      	beq.n	8007468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3301      	adds	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074ac:	d901      	bls.n	80074b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e018      	b.n	80074e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	daf2      	bge.n	80074a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2210      	movs	r2, #16
 80074c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d0:	d901      	bls.n	80074d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e006      	b.n	80074e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d0f0      	beq.n	80074c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	78fb      	ldrb	r3, [r7, #3]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007510:	4313      	orrs	r3, r2
 8007512:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007550:	f043 0302 	orr.w	r3, r3, #2
 8007554:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	f003 0301 	and.w	r3, r3, #1
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	3301      	adds	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007598:	d901      	bls.n	800759e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e01b      	b.n	80075d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	daf2      	bge.n	800758c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f043 0201 	orr.w	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c2:	d901      	bls.n	80075c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e006      	b.n	80075d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d0f0      	beq.n	80075b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <atof>:
 80075e2:	2100      	movs	r1, #0
 80075e4:	f000 be08 	b.w	80081f8 <strtod>

080075e8 <atoi>:
 80075e8:	220a      	movs	r2, #10
 80075ea:	2100      	movs	r1, #0
 80075ec:	f000 be8a 	b.w	8008304 <strtol>

080075f0 <sulp>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4604      	mov	r4, r0
 80075f4:	460d      	mov	r5, r1
 80075f6:	ec45 4b10 	vmov	d0, r4, r5
 80075fa:	4616      	mov	r6, r2
 80075fc:	f003 fad4 	bl	800aba8 <__ulp>
 8007600:	ec51 0b10 	vmov	r0, r1, d0
 8007604:	b17e      	cbz	r6, 8007626 <sulp+0x36>
 8007606:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800760a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd09      	ble.n	8007626 <sulp+0x36>
 8007612:	051b      	lsls	r3, r3, #20
 8007614:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007618:	2400      	movs	r4, #0
 800761a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800761e:	4622      	mov	r2, r4
 8007620:	462b      	mov	r3, r5
 8007622:	f7f9 f809 	bl	8000638 <__aeabi_dmul>
 8007626:	ec41 0b10 	vmov	d0, r0, r1
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	0000      	movs	r0, r0
	...

08007630 <_strtod_l>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	b09f      	sub	sp, #124	@ 0x7c
 8007636:	460c      	mov	r4, r1
 8007638:	9217      	str	r2, [sp, #92]	@ 0x5c
 800763a:	2200      	movs	r2, #0
 800763c:	921a      	str	r2, [sp, #104]	@ 0x68
 800763e:	9005      	str	r0, [sp, #20]
 8007640:	f04f 0a00 	mov.w	sl, #0
 8007644:	f04f 0b00 	mov.w	fp, #0
 8007648:	460a      	mov	r2, r1
 800764a:	9219      	str	r2, [sp, #100]	@ 0x64
 800764c:	7811      	ldrb	r1, [r2, #0]
 800764e:	292b      	cmp	r1, #43	@ 0x2b
 8007650:	d04a      	beq.n	80076e8 <_strtod_l+0xb8>
 8007652:	d838      	bhi.n	80076c6 <_strtod_l+0x96>
 8007654:	290d      	cmp	r1, #13
 8007656:	d832      	bhi.n	80076be <_strtod_l+0x8e>
 8007658:	2908      	cmp	r1, #8
 800765a:	d832      	bhi.n	80076c2 <_strtod_l+0x92>
 800765c:	2900      	cmp	r1, #0
 800765e:	d03b      	beq.n	80076d8 <_strtod_l+0xa8>
 8007660:	2200      	movs	r2, #0
 8007662:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007664:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007666:	782a      	ldrb	r2, [r5, #0]
 8007668:	2a30      	cmp	r2, #48	@ 0x30
 800766a:	f040 80b3 	bne.w	80077d4 <_strtod_l+0x1a4>
 800766e:	786a      	ldrb	r2, [r5, #1]
 8007670:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007674:	2a58      	cmp	r2, #88	@ 0x58
 8007676:	d16e      	bne.n	8007756 <_strtod_l+0x126>
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4a8e      	ldr	r2, [pc, #568]	@ (80078bc <_strtod_l+0x28c>)
 8007684:	9805      	ldr	r0, [sp, #20]
 8007686:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007688:	a919      	add	r1, sp, #100	@ 0x64
 800768a:	f002 fb7f 	bl	8009d8c <__gethex>
 800768e:	f010 060f 	ands.w	r6, r0, #15
 8007692:	4604      	mov	r4, r0
 8007694:	d005      	beq.n	80076a2 <_strtod_l+0x72>
 8007696:	2e06      	cmp	r6, #6
 8007698:	d128      	bne.n	80076ec <_strtod_l+0xbc>
 800769a:	3501      	adds	r5, #1
 800769c:	2300      	movs	r3, #0
 800769e:	9519      	str	r5, [sp, #100]	@ 0x64
 80076a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f040 858e 	bne.w	80081c6 <_strtod_l+0xb96>
 80076aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ac:	b1cb      	cbz	r3, 80076e2 <_strtod_l+0xb2>
 80076ae:	4652      	mov	r2, sl
 80076b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80076b4:	ec43 2b10 	vmov	d0, r2, r3
 80076b8:	b01f      	add	sp, #124	@ 0x7c
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	2920      	cmp	r1, #32
 80076c0:	d1ce      	bne.n	8007660 <_strtod_l+0x30>
 80076c2:	3201      	adds	r2, #1
 80076c4:	e7c1      	b.n	800764a <_strtod_l+0x1a>
 80076c6:	292d      	cmp	r1, #45	@ 0x2d
 80076c8:	d1ca      	bne.n	8007660 <_strtod_l+0x30>
 80076ca:	2101      	movs	r1, #1
 80076cc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80076ce:	1c51      	adds	r1, r2, #1
 80076d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80076d2:	7852      	ldrb	r2, [r2, #1]
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	d1c5      	bne.n	8007664 <_strtod_l+0x34>
 80076d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076da:	9419      	str	r4, [sp, #100]	@ 0x64
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8570 	bne.w	80081c2 <_strtod_l+0xb92>
 80076e2:	4652      	mov	r2, sl
 80076e4:	465b      	mov	r3, fp
 80076e6:	e7e5      	b.n	80076b4 <_strtod_l+0x84>
 80076e8:	2100      	movs	r1, #0
 80076ea:	e7ef      	b.n	80076cc <_strtod_l+0x9c>
 80076ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076ee:	b13a      	cbz	r2, 8007700 <_strtod_l+0xd0>
 80076f0:	2135      	movs	r1, #53	@ 0x35
 80076f2:	a81c      	add	r0, sp, #112	@ 0x70
 80076f4:	f003 fb52 	bl	800ad9c <__copybits>
 80076f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076fa:	9805      	ldr	r0, [sp, #20]
 80076fc:	f002 ff20 	bl	800a540 <_Bfree>
 8007700:	3e01      	subs	r6, #1
 8007702:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007704:	2e04      	cmp	r6, #4
 8007706:	d806      	bhi.n	8007716 <_strtod_l+0xe6>
 8007708:	e8df f006 	tbb	[pc, r6]
 800770c:	201d0314 	.word	0x201d0314
 8007710:	14          	.byte	0x14
 8007711:	00          	.byte	0x00
 8007712:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007716:	05e1      	lsls	r1, r4, #23
 8007718:	bf48      	it	mi
 800771a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800771e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007722:	0d1b      	lsrs	r3, r3, #20
 8007724:	051b      	lsls	r3, r3, #20
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1bb      	bne.n	80076a2 <_strtod_l+0x72>
 800772a:	f001 fbeb 	bl	8008f04 <__errno>
 800772e:	2322      	movs	r3, #34	@ 0x22
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	e7b6      	b.n	80076a2 <_strtod_l+0x72>
 8007734:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007738:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800773c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007740:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007744:	e7e7      	b.n	8007716 <_strtod_l+0xe6>
 8007746:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80078c4 <_strtod_l+0x294>
 800774a:	e7e4      	b.n	8007716 <_strtod_l+0xe6>
 800774c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007750:	f04f 3aff 	mov.w	sl, #4294967295
 8007754:	e7df      	b.n	8007716 <_strtod_l+0xe6>
 8007756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	9219      	str	r2, [sp, #100]	@ 0x64
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b30      	cmp	r3, #48	@ 0x30
 8007760:	d0f9      	beq.n	8007756 <_strtod_l+0x126>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d09d      	beq.n	80076a2 <_strtod_l+0x72>
 8007766:	2301      	movs	r3, #1
 8007768:	9309      	str	r3, [sp, #36]	@ 0x24
 800776a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800776c:	930c      	str	r3, [sp, #48]	@ 0x30
 800776e:	2300      	movs	r3, #0
 8007770:	9308      	str	r3, [sp, #32]
 8007772:	930a      	str	r3, [sp, #40]	@ 0x28
 8007774:	461f      	mov	r7, r3
 8007776:	220a      	movs	r2, #10
 8007778:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800777a:	7805      	ldrb	r5, [r0, #0]
 800777c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007780:	b2d9      	uxtb	r1, r3
 8007782:	2909      	cmp	r1, #9
 8007784:	d928      	bls.n	80077d8 <_strtod_l+0x1a8>
 8007786:	494e      	ldr	r1, [pc, #312]	@ (80078c0 <_strtod_l+0x290>)
 8007788:	2201      	movs	r2, #1
 800778a:	f001 fb5e 	bl	8008e4a <strncmp>
 800778e:	2800      	cmp	r0, #0
 8007790:	d032      	beq.n	80077f8 <_strtod_l+0x1c8>
 8007792:	2000      	movs	r0, #0
 8007794:	462a      	mov	r2, r5
 8007796:	4681      	mov	r9, r0
 8007798:	463d      	mov	r5, r7
 800779a:	4603      	mov	r3, r0
 800779c:	2a65      	cmp	r2, #101	@ 0x65
 800779e:	d001      	beq.n	80077a4 <_strtod_l+0x174>
 80077a0:	2a45      	cmp	r2, #69	@ 0x45
 80077a2:	d114      	bne.n	80077ce <_strtod_l+0x19e>
 80077a4:	b91d      	cbnz	r5, 80077ae <_strtod_l+0x17e>
 80077a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077a8:	4302      	orrs	r2, r0
 80077aa:	d095      	beq.n	80076d8 <_strtod_l+0xa8>
 80077ac:	2500      	movs	r5, #0
 80077ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80077b0:	1c62      	adds	r2, r4, #1
 80077b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077b4:	7862      	ldrb	r2, [r4, #1]
 80077b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80077b8:	d077      	beq.n	80078aa <_strtod_l+0x27a>
 80077ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80077bc:	d07b      	beq.n	80078b6 <_strtod_l+0x286>
 80077be:	f04f 0c00 	mov.w	ip, #0
 80077c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80077c6:	2909      	cmp	r1, #9
 80077c8:	f240 8082 	bls.w	80078d0 <_strtod_l+0x2a0>
 80077cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80077ce:	f04f 0800 	mov.w	r8, #0
 80077d2:	e0a2      	b.n	800791a <_strtod_l+0x2ea>
 80077d4:	2300      	movs	r3, #0
 80077d6:	e7c7      	b.n	8007768 <_strtod_l+0x138>
 80077d8:	2f08      	cmp	r7, #8
 80077da:	bfd5      	itete	le
 80077dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80077de:	9908      	ldrgt	r1, [sp, #32]
 80077e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80077e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80077e8:	f100 0001 	add.w	r0, r0, #1
 80077ec:	bfd4      	ite	le
 80077ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80077f0:	9308      	strgt	r3, [sp, #32]
 80077f2:	3701      	adds	r7, #1
 80077f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80077f6:	e7bf      	b.n	8007778 <_strtod_l+0x148>
 80077f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80077fe:	785a      	ldrb	r2, [r3, #1]
 8007800:	b37f      	cbz	r7, 8007862 <_strtod_l+0x232>
 8007802:	4681      	mov	r9, r0
 8007804:	463d      	mov	r5, r7
 8007806:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800780a:	2b09      	cmp	r3, #9
 800780c:	d912      	bls.n	8007834 <_strtod_l+0x204>
 800780e:	2301      	movs	r3, #1
 8007810:	e7c4      	b.n	800779c <_strtod_l+0x16c>
 8007812:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	9219      	str	r2, [sp, #100]	@ 0x64
 8007818:	785a      	ldrb	r2, [r3, #1]
 800781a:	3001      	adds	r0, #1
 800781c:	2a30      	cmp	r2, #48	@ 0x30
 800781e:	d0f8      	beq.n	8007812 <_strtod_l+0x1e2>
 8007820:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007824:	2b08      	cmp	r3, #8
 8007826:	f200 84d3 	bhi.w	80081d0 <_strtod_l+0xba0>
 800782a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800782c:	930c      	str	r3, [sp, #48]	@ 0x30
 800782e:	4681      	mov	r9, r0
 8007830:	2000      	movs	r0, #0
 8007832:	4605      	mov	r5, r0
 8007834:	3a30      	subs	r2, #48	@ 0x30
 8007836:	f100 0301 	add.w	r3, r0, #1
 800783a:	d02a      	beq.n	8007892 <_strtod_l+0x262>
 800783c:	4499      	add	r9, r3
 800783e:	eb00 0c05 	add.w	ip, r0, r5
 8007842:	462b      	mov	r3, r5
 8007844:	210a      	movs	r1, #10
 8007846:	4563      	cmp	r3, ip
 8007848:	d10d      	bne.n	8007866 <_strtod_l+0x236>
 800784a:	1c69      	adds	r1, r5, #1
 800784c:	4401      	add	r1, r0
 800784e:	4428      	add	r0, r5
 8007850:	2808      	cmp	r0, #8
 8007852:	dc16      	bgt.n	8007882 <_strtod_l+0x252>
 8007854:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007856:	230a      	movs	r3, #10
 8007858:	fb03 2300 	mla	r3, r3, r0, r2
 800785c:	930a      	str	r3, [sp, #40]	@ 0x28
 800785e:	2300      	movs	r3, #0
 8007860:	e018      	b.n	8007894 <_strtod_l+0x264>
 8007862:	4638      	mov	r0, r7
 8007864:	e7da      	b.n	800781c <_strtod_l+0x1ec>
 8007866:	2b08      	cmp	r3, #8
 8007868:	f103 0301 	add.w	r3, r3, #1
 800786c:	dc03      	bgt.n	8007876 <_strtod_l+0x246>
 800786e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007870:	434e      	muls	r6, r1
 8007872:	960a      	str	r6, [sp, #40]	@ 0x28
 8007874:	e7e7      	b.n	8007846 <_strtod_l+0x216>
 8007876:	2b10      	cmp	r3, #16
 8007878:	bfde      	ittt	le
 800787a:	9e08      	ldrle	r6, [sp, #32]
 800787c:	434e      	mulle	r6, r1
 800787e:	9608      	strle	r6, [sp, #32]
 8007880:	e7e1      	b.n	8007846 <_strtod_l+0x216>
 8007882:	280f      	cmp	r0, #15
 8007884:	dceb      	bgt.n	800785e <_strtod_l+0x22e>
 8007886:	9808      	ldr	r0, [sp, #32]
 8007888:	230a      	movs	r3, #10
 800788a:	fb03 2300 	mla	r3, r3, r0, r2
 800788e:	9308      	str	r3, [sp, #32]
 8007890:	e7e5      	b.n	800785e <_strtod_l+0x22e>
 8007892:	4629      	mov	r1, r5
 8007894:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007896:	1c50      	adds	r0, r2, #1
 8007898:	9019      	str	r0, [sp, #100]	@ 0x64
 800789a:	7852      	ldrb	r2, [r2, #1]
 800789c:	4618      	mov	r0, r3
 800789e:	460d      	mov	r5, r1
 80078a0:	e7b1      	b.n	8007806 <_strtod_l+0x1d6>
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	2301      	movs	r3, #1
 80078a8:	e77d      	b.n	80077a6 <_strtod_l+0x176>
 80078aa:	f04f 0c00 	mov.w	ip, #0
 80078ae:	1ca2      	adds	r2, r4, #2
 80078b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80078b2:	78a2      	ldrb	r2, [r4, #2]
 80078b4:	e785      	b.n	80077c2 <_strtod_l+0x192>
 80078b6:	f04f 0c01 	mov.w	ip, #1
 80078ba:	e7f8      	b.n	80078ae <_strtod_l+0x27e>
 80078bc:	0800c248 	.word	0x0800c248
 80078c0:	0800c230 	.word	0x0800c230
 80078c4:	7ff00000 	.word	0x7ff00000
 80078c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078ca:	1c51      	adds	r1, r2, #1
 80078cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80078ce:	7852      	ldrb	r2, [r2, #1]
 80078d0:	2a30      	cmp	r2, #48	@ 0x30
 80078d2:	d0f9      	beq.n	80078c8 <_strtod_l+0x298>
 80078d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80078d8:	2908      	cmp	r1, #8
 80078da:	f63f af78 	bhi.w	80077ce <_strtod_l+0x19e>
 80078de:	3a30      	subs	r2, #48	@ 0x30
 80078e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80078e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80078e6:	f04f 080a 	mov.w	r8, #10
 80078ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078ec:	1c56      	adds	r6, r2, #1
 80078ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80078f0:	7852      	ldrb	r2, [r2, #1]
 80078f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80078f6:	f1be 0f09 	cmp.w	lr, #9
 80078fa:	d939      	bls.n	8007970 <_strtod_l+0x340>
 80078fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80078fe:	1a76      	subs	r6, r6, r1
 8007900:	2e08      	cmp	r6, #8
 8007902:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007906:	dc03      	bgt.n	8007910 <_strtod_l+0x2e0>
 8007908:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800790a:	4588      	cmp	r8, r1
 800790c:	bfa8      	it	ge
 800790e:	4688      	movge	r8, r1
 8007910:	f1bc 0f00 	cmp.w	ip, #0
 8007914:	d001      	beq.n	800791a <_strtod_l+0x2ea>
 8007916:	f1c8 0800 	rsb	r8, r8, #0
 800791a:	2d00      	cmp	r5, #0
 800791c:	d14e      	bne.n	80079bc <_strtod_l+0x38c>
 800791e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007920:	4308      	orrs	r0, r1
 8007922:	f47f aebe 	bne.w	80076a2 <_strtod_l+0x72>
 8007926:	2b00      	cmp	r3, #0
 8007928:	f47f aed6 	bne.w	80076d8 <_strtod_l+0xa8>
 800792c:	2a69      	cmp	r2, #105	@ 0x69
 800792e:	d028      	beq.n	8007982 <_strtod_l+0x352>
 8007930:	dc25      	bgt.n	800797e <_strtod_l+0x34e>
 8007932:	2a49      	cmp	r2, #73	@ 0x49
 8007934:	d025      	beq.n	8007982 <_strtod_l+0x352>
 8007936:	2a4e      	cmp	r2, #78	@ 0x4e
 8007938:	f47f aece 	bne.w	80076d8 <_strtod_l+0xa8>
 800793c:	499b      	ldr	r1, [pc, #620]	@ (8007bac <_strtod_l+0x57c>)
 800793e:	a819      	add	r0, sp, #100	@ 0x64
 8007940:	f002 fc46 	bl	800a1d0 <__match>
 8007944:	2800      	cmp	r0, #0
 8007946:	f43f aec7 	beq.w	80076d8 <_strtod_l+0xa8>
 800794a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b28      	cmp	r3, #40	@ 0x28
 8007950:	d12e      	bne.n	80079b0 <_strtod_l+0x380>
 8007952:	4997      	ldr	r1, [pc, #604]	@ (8007bb0 <_strtod_l+0x580>)
 8007954:	aa1c      	add	r2, sp, #112	@ 0x70
 8007956:	a819      	add	r0, sp, #100	@ 0x64
 8007958:	f002 fc4e 	bl	800a1f8 <__hexnan>
 800795c:	2805      	cmp	r0, #5
 800795e:	d127      	bne.n	80079b0 <_strtod_l+0x380>
 8007960:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007962:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007966:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800796a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800796e:	e698      	b.n	80076a2 <_strtod_l+0x72>
 8007970:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007972:	fb08 2101 	mla	r1, r8, r1, r2
 8007976:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800797a:	920e      	str	r2, [sp, #56]	@ 0x38
 800797c:	e7b5      	b.n	80078ea <_strtod_l+0x2ba>
 800797e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007980:	e7da      	b.n	8007938 <_strtod_l+0x308>
 8007982:	498c      	ldr	r1, [pc, #560]	@ (8007bb4 <_strtod_l+0x584>)
 8007984:	a819      	add	r0, sp, #100	@ 0x64
 8007986:	f002 fc23 	bl	800a1d0 <__match>
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f aea4 	beq.w	80076d8 <_strtod_l+0xa8>
 8007990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007992:	4989      	ldr	r1, [pc, #548]	@ (8007bb8 <_strtod_l+0x588>)
 8007994:	3b01      	subs	r3, #1
 8007996:	a819      	add	r0, sp, #100	@ 0x64
 8007998:	9319      	str	r3, [sp, #100]	@ 0x64
 800799a:	f002 fc19 	bl	800a1d0 <__match>
 800799e:	b910      	cbnz	r0, 80079a6 <_strtod_l+0x376>
 80079a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079a2:	3301      	adds	r3, #1
 80079a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80079a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007bc8 <_strtod_l+0x598>
 80079aa:	f04f 0a00 	mov.w	sl, #0
 80079ae:	e678      	b.n	80076a2 <_strtod_l+0x72>
 80079b0:	4882      	ldr	r0, [pc, #520]	@ (8007bbc <_strtod_l+0x58c>)
 80079b2:	f001 fae5 	bl	8008f80 <nan>
 80079b6:	ec5b ab10 	vmov	sl, fp, d0
 80079ba:	e672      	b.n	80076a2 <_strtod_l+0x72>
 80079bc:	eba8 0309 	sub.w	r3, r8, r9
 80079c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c4:	2f00      	cmp	r7, #0
 80079c6:	bf08      	it	eq
 80079c8:	462f      	moveq	r7, r5
 80079ca:	2d10      	cmp	r5, #16
 80079cc:	462c      	mov	r4, r5
 80079ce:	bfa8      	it	ge
 80079d0:	2410      	movge	r4, #16
 80079d2:	f7f8 fdb7 	bl	8000544 <__aeabi_ui2d>
 80079d6:	2d09      	cmp	r5, #9
 80079d8:	4682      	mov	sl, r0
 80079da:	468b      	mov	fp, r1
 80079dc:	dc13      	bgt.n	8007a06 <_strtod_l+0x3d6>
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f43f ae5e 	beq.w	80076a2 <_strtod_l+0x72>
 80079e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e8:	dd78      	ble.n	8007adc <_strtod_l+0x4ac>
 80079ea:	2b16      	cmp	r3, #22
 80079ec:	dc5f      	bgt.n	8007aae <_strtod_l+0x47e>
 80079ee:	4974      	ldr	r1, [pc, #464]	@ (8007bc0 <_strtod_l+0x590>)
 80079f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	4652      	mov	r2, sl
 80079fa:	465b      	mov	r3, fp
 80079fc:	f7f8 fe1c 	bl	8000638 <__aeabi_dmul>
 8007a00:	4682      	mov	sl, r0
 8007a02:	468b      	mov	fp, r1
 8007a04:	e64d      	b.n	80076a2 <_strtod_l+0x72>
 8007a06:	4b6e      	ldr	r3, [pc, #440]	@ (8007bc0 <_strtod_l+0x590>)
 8007a08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a0c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a10:	f7f8 fe12 	bl	8000638 <__aeabi_dmul>
 8007a14:	4682      	mov	sl, r0
 8007a16:	9808      	ldr	r0, [sp, #32]
 8007a18:	468b      	mov	fp, r1
 8007a1a:	f7f8 fd93 	bl	8000544 <__aeabi_ui2d>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	f7f8 fc51 	bl	80002cc <__adddf3>
 8007a2a:	2d0f      	cmp	r5, #15
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	468b      	mov	fp, r1
 8007a30:	ddd5      	ble.n	80079de <_strtod_l+0x3ae>
 8007a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a34:	1b2c      	subs	r4, r5, r4
 8007a36:	441c      	add	r4, r3
 8007a38:	2c00      	cmp	r4, #0
 8007a3a:	f340 8096 	ble.w	8007b6a <_strtod_l+0x53a>
 8007a3e:	f014 030f 	ands.w	r3, r4, #15
 8007a42:	d00a      	beq.n	8007a5a <_strtod_l+0x42a>
 8007a44:	495e      	ldr	r1, [pc, #376]	@ (8007bc0 <_strtod_l+0x590>)
 8007a46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a52:	f7f8 fdf1 	bl	8000638 <__aeabi_dmul>
 8007a56:	4682      	mov	sl, r0
 8007a58:	468b      	mov	fp, r1
 8007a5a:	f034 040f 	bics.w	r4, r4, #15
 8007a5e:	d073      	beq.n	8007b48 <_strtod_l+0x518>
 8007a60:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a64:	dd48      	ble.n	8007af8 <_strtod_l+0x4c8>
 8007a66:	2400      	movs	r4, #0
 8007a68:	46a0      	mov	r8, r4
 8007a6a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a6c:	46a1      	mov	r9, r4
 8007a6e:	9a05      	ldr	r2, [sp, #20]
 8007a70:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007bc8 <_strtod_l+0x598>
 8007a74:	2322      	movs	r3, #34	@ 0x22
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f04f 0a00 	mov.w	sl, #0
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f43f ae0f 	beq.w	80076a2 <_strtod_l+0x72>
 8007a84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f002 fd5a 	bl	800a540 <_Bfree>
 8007a8c:	9805      	ldr	r0, [sp, #20]
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f002 fd56 	bl	800a540 <_Bfree>
 8007a94:	9805      	ldr	r0, [sp, #20]
 8007a96:	4641      	mov	r1, r8
 8007a98:	f002 fd52 	bl	800a540 <_Bfree>
 8007a9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a9e:	9805      	ldr	r0, [sp, #20]
 8007aa0:	f002 fd4e 	bl	800a540 <_Bfree>
 8007aa4:	9805      	ldr	r0, [sp, #20]
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f002 fd4a 	bl	800a540 <_Bfree>
 8007aac:	e5f9      	b.n	80076a2 <_strtod_l+0x72>
 8007aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ab0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	dbbc      	blt.n	8007a32 <_strtod_l+0x402>
 8007ab8:	4c41      	ldr	r4, [pc, #260]	@ (8007bc0 <_strtod_l+0x590>)
 8007aba:	f1c5 050f 	rsb	r5, r5, #15
 8007abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007ac2:	4652      	mov	r2, sl
 8007ac4:	465b      	mov	r3, fp
 8007ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aca:	f7f8 fdb5 	bl	8000638 <__aeabi_dmul>
 8007ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad0:	1b5d      	subs	r5, r3, r5
 8007ad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ada:	e78f      	b.n	80079fc <_strtod_l+0x3cc>
 8007adc:	3316      	adds	r3, #22
 8007ade:	dba8      	blt.n	8007a32 <_strtod_l+0x402>
 8007ae0:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <_strtod_l+0x590>)
 8007ae2:	eba9 0808 	sub.w	r8, r9, r8
 8007ae6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007aea:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007aee:	4650      	mov	r0, sl
 8007af0:	4659      	mov	r1, fp
 8007af2:	f7f8 fecb 	bl	800088c <__aeabi_ddiv>
 8007af6:	e783      	b.n	8007a00 <_strtod_l+0x3d0>
 8007af8:	4b32      	ldr	r3, [pc, #200]	@ (8007bc4 <_strtod_l+0x594>)
 8007afa:	9308      	str	r3, [sp, #32]
 8007afc:	2300      	movs	r3, #0
 8007afe:	1124      	asrs	r4, r4, #4
 8007b00:	4650      	mov	r0, sl
 8007b02:	4659      	mov	r1, fp
 8007b04:	461e      	mov	r6, r3
 8007b06:	2c01      	cmp	r4, #1
 8007b08:	dc21      	bgt.n	8007b4e <_strtod_l+0x51e>
 8007b0a:	b10b      	cbz	r3, 8007b10 <_strtod_l+0x4e0>
 8007b0c:	4682      	mov	sl, r0
 8007b0e:	468b      	mov	fp, r1
 8007b10:	492c      	ldr	r1, [pc, #176]	@ (8007bc4 <_strtod_l+0x594>)
 8007b12:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b16:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b1a:	4652      	mov	r2, sl
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b22:	f7f8 fd89 	bl	8000638 <__aeabi_dmul>
 8007b26:	4b28      	ldr	r3, [pc, #160]	@ (8007bc8 <_strtod_l+0x598>)
 8007b28:	460a      	mov	r2, r1
 8007b2a:	400b      	ands	r3, r1
 8007b2c:	4927      	ldr	r1, [pc, #156]	@ (8007bcc <_strtod_l+0x59c>)
 8007b2e:	428b      	cmp	r3, r1
 8007b30:	4682      	mov	sl, r0
 8007b32:	d898      	bhi.n	8007a66 <_strtod_l+0x436>
 8007b34:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b38:	428b      	cmp	r3, r1
 8007b3a:	bf86      	itte	hi
 8007b3c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007bd0 <_strtod_l+0x5a0>
 8007b40:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b44:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9308      	str	r3, [sp, #32]
 8007b4c:	e07a      	b.n	8007c44 <_strtod_l+0x614>
 8007b4e:	07e2      	lsls	r2, r4, #31
 8007b50:	d505      	bpl.n	8007b5e <_strtod_l+0x52e>
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fd6e 	bl	8000638 <__aeabi_dmul>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9a08      	ldr	r2, [sp, #32]
 8007b60:	3208      	adds	r2, #8
 8007b62:	3601      	adds	r6, #1
 8007b64:	1064      	asrs	r4, r4, #1
 8007b66:	9208      	str	r2, [sp, #32]
 8007b68:	e7cd      	b.n	8007b06 <_strtod_l+0x4d6>
 8007b6a:	d0ed      	beq.n	8007b48 <_strtod_l+0x518>
 8007b6c:	4264      	negs	r4, r4
 8007b6e:	f014 020f 	ands.w	r2, r4, #15
 8007b72:	d00a      	beq.n	8007b8a <_strtod_l+0x55a>
 8007b74:	4b12      	ldr	r3, [pc, #72]	@ (8007bc0 <_strtod_l+0x590>)
 8007b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	4659      	mov	r1, fp
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fe83 	bl	800088c <__aeabi_ddiv>
 8007b86:	4682      	mov	sl, r0
 8007b88:	468b      	mov	fp, r1
 8007b8a:	1124      	asrs	r4, r4, #4
 8007b8c:	d0dc      	beq.n	8007b48 <_strtod_l+0x518>
 8007b8e:	2c1f      	cmp	r4, #31
 8007b90:	dd20      	ble.n	8007bd4 <_strtod_l+0x5a4>
 8007b92:	2400      	movs	r4, #0
 8007b94:	46a0      	mov	r8, r4
 8007b96:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b98:	46a1      	mov	r9, r4
 8007b9a:	9a05      	ldr	r2, [sp, #20]
 8007b9c:	2322      	movs	r3, #34	@ 0x22
 8007b9e:	f04f 0a00 	mov.w	sl, #0
 8007ba2:	f04f 0b00 	mov.w	fp, #0
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	e768      	b.n	8007a7c <_strtod_l+0x44c>
 8007baa:	bf00      	nop
 8007bac:	0800c396 	.word	0x0800c396
 8007bb0:	0800c234 	.word	0x0800c234
 8007bb4:	0800c38e 	.word	0x0800c38e
 8007bb8:	0800c3c8 	.word	0x0800c3c8
 8007bbc:	0800c654 	.word	0x0800c654
 8007bc0:	0800c540 	.word	0x0800c540
 8007bc4:	0800c518 	.word	0x0800c518
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	7ca00000 	.word	0x7ca00000
 8007bd0:	7fefffff 	.word	0x7fefffff
 8007bd4:	f014 0310 	ands.w	r3, r4, #16
 8007bd8:	bf18      	it	ne
 8007bda:	236a      	movne	r3, #106	@ 0x6a
 8007bdc:	4ea9      	ldr	r6, [pc, #676]	@ (8007e84 <_strtod_l+0x854>)
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	4650      	mov	r0, sl
 8007be2:	4659      	mov	r1, fp
 8007be4:	2300      	movs	r3, #0
 8007be6:	07e2      	lsls	r2, r4, #31
 8007be8:	d504      	bpl.n	8007bf4 <_strtod_l+0x5c4>
 8007bea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bee:	f7f8 fd23 	bl	8000638 <__aeabi_dmul>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	1064      	asrs	r4, r4, #1
 8007bf6:	f106 0608 	add.w	r6, r6, #8
 8007bfa:	d1f4      	bne.n	8007be6 <_strtod_l+0x5b6>
 8007bfc:	b10b      	cbz	r3, 8007c02 <_strtod_l+0x5d2>
 8007bfe:	4682      	mov	sl, r0
 8007c00:	468b      	mov	fp, r1
 8007c02:	9b08      	ldr	r3, [sp, #32]
 8007c04:	b1b3      	cbz	r3, 8007c34 <_strtod_l+0x604>
 8007c06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	4659      	mov	r1, fp
 8007c12:	dd0f      	ble.n	8007c34 <_strtod_l+0x604>
 8007c14:	2b1f      	cmp	r3, #31
 8007c16:	dd55      	ble.n	8007cc4 <_strtod_l+0x694>
 8007c18:	2b34      	cmp	r3, #52	@ 0x34
 8007c1a:	bfde      	ittt	le
 8007c1c:	f04f 33ff 	movle.w	r3, #4294967295
 8007c20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c24:	4093      	lslle	r3, r2
 8007c26:	f04f 0a00 	mov.w	sl, #0
 8007c2a:	bfcc      	ite	gt
 8007c2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c30:	ea03 0b01 	andle.w	fp, r3, r1
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	4650      	mov	r0, sl
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	f7f8 ff64 	bl	8000b08 <__aeabi_dcmpeq>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	d1a6      	bne.n	8007b92 <_strtod_l+0x562>
 8007c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c4a:	9805      	ldr	r0, [sp, #20]
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	463a      	mov	r2, r7
 8007c50:	f002 fcde 	bl	800a610 <__s2b>
 8007c54:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c56:	2800      	cmp	r0, #0
 8007c58:	f43f af05 	beq.w	8007a66 <_strtod_l+0x436>
 8007c5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	eba9 0308 	sub.w	r3, r9, r8
 8007c64:	bfa8      	it	ge
 8007c66:	2300      	movge	r3, #0
 8007c68:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c70:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c72:	46a0      	mov	r8, r4
 8007c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c76:	9805      	ldr	r0, [sp, #20]
 8007c78:	6859      	ldr	r1, [r3, #4]
 8007c7a:	f002 fc21 	bl	800a4c0 <_Balloc>
 8007c7e:	4681      	mov	r9, r0
 8007c80:	2800      	cmp	r0, #0
 8007c82:	f43f aef4 	beq.w	8007a6e <_strtod_l+0x43e>
 8007c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	3202      	adds	r2, #2
 8007c8c:	f103 010c 	add.w	r1, r3, #12
 8007c90:	0092      	lsls	r2, r2, #2
 8007c92:	300c      	adds	r0, #12
 8007c94:	f001 f963 	bl	8008f5e <memcpy>
 8007c98:	ec4b ab10 	vmov	d0, sl, fp
 8007c9c:	9805      	ldr	r0, [sp, #20]
 8007c9e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ca0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007ca2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ca6:	f002 ffef 	bl	800ac88 <__d2b>
 8007caa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f43f aede 	beq.w	8007a6e <_strtod_l+0x43e>
 8007cb2:	9805      	ldr	r0, [sp, #20]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	f002 fd41 	bl	800a73c <__i2b>
 8007cba:	4680      	mov	r8, r0
 8007cbc:	b948      	cbnz	r0, 8007cd2 <_strtod_l+0x6a2>
 8007cbe:	f04f 0800 	mov.w	r8, #0
 8007cc2:	e6d4      	b.n	8007a6e <_strtod_l+0x43e>
 8007cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	ea03 0a0a 	and.w	sl, r3, sl
 8007cd0:	e7b0      	b.n	8007c34 <_strtod_l+0x604>
 8007cd2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007cd4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007cd6:	2d00      	cmp	r5, #0
 8007cd8:	bfab      	itete	ge
 8007cda:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007cdc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007cde:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007ce0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ce2:	bfac      	ite	ge
 8007ce4:	18ef      	addge	r7, r5, r3
 8007ce6:	1b5e      	sublt	r6, r3, r5
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	1aed      	subs	r5, r5, r3
 8007cec:	4415      	add	r5, r2
 8007cee:	4b66      	ldr	r3, [pc, #408]	@ (8007e88 <_strtod_l+0x858>)
 8007cf0:	3d01      	subs	r5, #1
 8007cf2:	429d      	cmp	r5, r3
 8007cf4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007cf8:	da50      	bge.n	8007d9c <_strtod_l+0x76c>
 8007cfa:	1b5b      	subs	r3, r3, r5
 8007cfc:	2b1f      	cmp	r3, #31
 8007cfe:	eba2 0203 	sub.w	r2, r2, r3
 8007d02:	f04f 0101 	mov.w	r1, #1
 8007d06:	dc3d      	bgt.n	8007d84 <_strtod_l+0x754>
 8007d08:	fa01 f303 	lsl.w	r3, r1, r3
 8007d0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d12:	18bd      	adds	r5, r7, r2
 8007d14:	9b08      	ldr	r3, [sp, #32]
 8007d16:	42af      	cmp	r7, r5
 8007d18:	4416      	add	r6, r2
 8007d1a:	441e      	add	r6, r3
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	bfa8      	it	ge
 8007d20:	462b      	movge	r3, r5
 8007d22:	42b3      	cmp	r3, r6
 8007d24:	bfa8      	it	ge
 8007d26:	4633      	movge	r3, r6
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfc2      	ittt	gt
 8007d2c:	1aed      	subgt	r5, r5, r3
 8007d2e:	1af6      	subgt	r6, r6, r3
 8007d30:	1aff      	subgt	r7, r7, r3
 8007d32:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dd16      	ble.n	8007d66 <_strtod_l+0x736>
 8007d38:	4641      	mov	r1, r8
 8007d3a:	9805      	ldr	r0, [sp, #20]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f002 fdbd 	bl	800a8bc <__pow5mult>
 8007d42:	4680      	mov	r8, r0
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d0ba      	beq.n	8007cbe <_strtod_l+0x68e>
 8007d48:	4601      	mov	r1, r0
 8007d4a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	f002 fd0b 	bl	800a768 <__multiply>
 8007d52:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f43f ae8a 	beq.w	8007a6e <_strtod_l+0x43e>
 8007d5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d5c:	9805      	ldr	r0, [sp, #20]
 8007d5e:	f002 fbef 	bl	800a540 <_Bfree>
 8007d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	dc1d      	bgt.n	8007da6 <_strtod_l+0x776>
 8007d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dd23      	ble.n	8007db8 <_strtod_l+0x788>
 8007d70:	4649      	mov	r1, r9
 8007d72:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d74:	9805      	ldr	r0, [sp, #20]
 8007d76:	f002 fda1 	bl	800a8bc <__pow5mult>
 8007d7a:	4681      	mov	r9, r0
 8007d7c:	b9e0      	cbnz	r0, 8007db8 <_strtod_l+0x788>
 8007d7e:	f04f 0900 	mov.w	r9, #0
 8007d82:	e674      	b.n	8007a6e <_strtod_l+0x43e>
 8007d84:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d88:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d8c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d90:	35e2      	adds	r5, #226	@ 0xe2
 8007d92:	fa01 f305 	lsl.w	r3, r1, r5
 8007d96:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d98:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d9a:	e7ba      	b.n	8007d12 <_strtod_l+0x6e2>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007da0:	2301      	movs	r3, #1
 8007da2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007da4:	e7b5      	b.n	8007d12 <_strtod_l+0x6e2>
 8007da6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007da8:	9805      	ldr	r0, [sp, #20]
 8007daa:	462a      	mov	r2, r5
 8007dac:	f002 fde0 	bl	800a970 <__lshift>
 8007db0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1d9      	bne.n	8007d6a <_strtod_l+0x73a>
 8007db6:	e65a      	b.n	8007a6e <_strtod_l+0x43e>
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	dd07      	ble.n	8007dcc <_strtod_l+0x79c>
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	9805      	ldr	r0, [sp, #20]
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	f002 fdd5 	bl	800a970 <__lshift>
 8007dc6:	4681      	mov	r9, r0
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d0d8      	beq.n	8007d7e <_strtod_l+0x74e>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	dd08      	ble.n	8007de2 <_strtod_l+0x7b2>
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	9805      	ldr	r0, [sp, #20]
 8007dd4:	463a      	mov	r2, r7
 8007dd6:	f002 fdcb 	bl	800a970 <__lshift>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f43f ae46 	beq.w	8007a6e <_strtod_l+0x43e>
 8007de2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007de4:	9805      	ldr	r0, [sp, #20]
 8007de6:	464a      	mov	r2, r9
 8007de8:	f002 fe4a 	bl	800aa80 <__mdiff>
 8007dec:	4604      	mov	r4, r0
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f ae3d 	beq.w	8007a6e <_strtod_l+0x43e>
 8007df4:	68c3      	ldr	r3, [r0, #12]
 8007df6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60c3      	str	r3, [r0, #12]
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	f002 fe23 	bl	800aa48 <__mcmp>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	da46      	bge.n	8007e94 <_strtod_l+0x864>
 8007e06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e08:	ea53 030a 	orrs.w	r3, r3, sl
 8007e0c:	d16c      	bne.n	8007ee8 <_strtod_l+0x8b8>
 8007e0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d168      	bne.n	8007ee8 <_strtod_l+0x8b8>
 8007e16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e1a:	0d1b      	lsrs	r3, r3, #20
 8007e1c:	051b      	lsls	r3, r3, #20
 8007e1e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e22:	d961      	bls.n	8007ee8 <_strtod_l+0x8b8>
 8007e24:	6963      	ldr	r3, [r4, #20]
 8007e26:	b913      	cbnz	r3, 8007e2e <_strtod_l+0x7fe>
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	dd5c      	ble.n	8007ee8 <_strtod_l+0x8b8>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	2201      	movs	r2, #1
 8007e32:	9805      	ldr	r0, [sp, #20]
 8007e34:	f002 fd9c 	bl	800a970 <__lshift>
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	f002 fe04 	bl	800aa48 <__mcmp>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	dd51      	ble.n	8007ee8 <_strtod_l+0x8b8>
 8007e44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e48:	9a08      	ldr	r2, [sp, #32]
 8007e4a:	0d1b      	lsrs	r3, r3, #20
 8007e4c:	051b      	lsls	r3, r3, #20
 8007e4e:	2a00      	cmp	r2, #0
 8007e50:	d06b      	beq.n	8007f2a <_strtod_l+0x8fa>
 8007e52:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e56:	d868      	bhi.n	8007f2a <_strtod_l+0x8fa>
 8007e58:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e5c:	f67f ae9d 	bls.w	8007b9a <_strtod_l+0x56a>
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <_strtod_l+0x85c>)
 8007e62:	4650      	mov	r0, sl
 8007e64:	4659      	mov	r1, fp
 8007e66:	2200      	movs	r2, #0
 8007e68:	f7f8 fbe6 	bl	8000638 <__aeabi_dmul>
 8007e6c:	4b08      	ldr	r3, [pc, #32]	@ (8007e90 <_strtod_l+0x860>)
 8007e6e:	400b      	ands	r3, r1
 8007e70:	4682      	mov	sl, r0
 8007e72:	468b      	mov	fp, r1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f47f ae05 	bne.w	8007a84 <_strtod_l+0x454>
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	2322      	movs	r3, #34	@ 0x22
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e600      	b.n	8007a84 <_strtod_l+0x454>
 8007e82:	bf00      	nop
 8007e84:	0800c260 	.word	0x0800c260
 8007e88:	fffffc02 	.word	0xfffffc02
 8007e8c:	39500000 	.word	0x39500000
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e98:	d165      	bne.n	8007f66 <_strtod_l+0x936>
 8007e9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ea0:	b35a      	cbz	r2, 8007efa <_strtod_l+0x8ca>
 8007ea2:	4a9f      	ldr	r2, [pc, #636]	@ (8008120 <_strtod_l+0xaf0>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d12b      	bne.n	8007f00 <_strtod_l+0x8d0>
 8007ea8:	9b08      	ldr	r3, [sp, #32]
 8007eaa:	4651      	mov	r1, sl
 8007eac:	b303      	cbz	r3, 8007ef0 <_strtod_l+0x8c0>
 8007eae:	4b9d      	ldr	r3, [pc, #628]	@ (8008124 <_strtod_l+0xaf4>)
 8007eb0:	465a      	mov	r2, fp
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebc:	d81b      	bhi.n	8007ef6 <_strtod_l+0x8c6>
 8007ebe:	0d1b      	lsrs	r3, r3, #20
 8007ec0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	d119      	bne.n	8007f00 <_strtod_l+0x8d0>
 8007ecc:	4b96      	ldr	r3, [pc, #600]	@ (8008128 <_strtod_l+0xaf8>)
 8007ece:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d102      	bne.n	8007eda <_strtod_l+0x8aa>
 8007ed4:	3101      	adds	r1, #1
 8007ed6:	f43f adca 	beq.w	8007a6e <_strtod_l+0x43e>
 8007eda:	4b92      	ldr	r3, [pc, #584]	@ (8008124 <_strtod_l+0xaf4>)
 8007edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ede:	401a      	ands	r2, r3
 8007ee0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007ee4:	f04f 0a00 	mov.w	sl, #0
 8007ee8:	9b08      	ldr	r3, [sp, #32]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1b8      	bne.n	8007e60 <_strtod_l+0x830>
 8007eee:	e5c9      	b.n	8007a84 <_strtod_l+0x454>
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	e7e8      	b.n	8007ec8 <_strtod_l+0x898>
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	e7e6      	b.n	8007ec8 <_strtod_l+0x898>
 8007efa:	ea53 030a 	orrs.w	r3, r3, sl
 8007efe:	d0a1      	beq.n	8007e44 <_strtod_l+0x814>
 8007f00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f02:	b1db      	cbz	r3, 8007f3c <_strtod_l+0x90c>
 8007f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f06:	4213      	tst	r3, r2
 8007f08:	d0ee      	beq.n	8007ee8 <_strtod_l+0x8b8>
 8007f0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0c:	9a08      	ldr	r2, [sp, #32]
 8007f0e:	4650      	mov	r0, sl
 8007f10:	4659      	mov	r1, fp
 8007f12:	b1bb      	cbz	r3, 8007f44 <_strtod_l+0x914>
 8007f14:	f7ff fb6c 	bl	80075f0 <sulp>
 8007f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f1c:	ec53 2b10 	vmov	r2, r3, d0
 8007f20:	f7f8 f9d4 	bl	80002cc <__adddf3>
 8007f24:	4682      	mov	sl, r0
 8007f26:	468b      	mov	fp, r1
 8007f28:	e7de      	b.n	8007ee8 <_strtod_l+0x8b8>
 8007f2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f32:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f36:	f04f 3aff 	mov.w	sl, #4294967295
 8007f3a:	e7d5      	b.n	8007ee8 <_strtod_l+0x8b8>
 8007f3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f3e:	ea13 0f0a 	tst.w	r3, sl
 8007f42:	e7e1      	b.n	8007f08 <_strtod_l+0x8d8>
 8007f44:	f7ff fb54 	bl	80075f0 <sulp>
 8007f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f4c:	ec53 2b10 	vmov	r2, r3, d0
 8007f50:	f7f8 f9ba 	bl	80002c8 <__aeabi_dsub>
 8007f54:	2200      	movs	r2, #0
 8007f56:	2300      	movs	r3, #0
 8007f58:	4682      	mov	sl, r0
 8007f5a:	468b      	mov	fp, r1
 8007f5c:	f7f8 fdd4 	bl	8000b08 <__aeabi_dcmpeq>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d0c1      	beq.n	8007ee8 <_strtod_l+0x8b8>
 8007f64:	e619      	b.n	8007b9a <_strtod_l+0x56a>
 8007f66:	4641      	mov	r1, r8
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f002 fee5 	bl	800ad38 <__ratio>
 8007f6e:	ec57 6b10 	vmov	r6, r7, d0
 8007f72:	2200      	movs	r2, #0
 8007f74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fdd8 	bl	8000b30 <__aeabi_dcmple>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d06f      	beq.n	8008064 <_strtod_l+0xa34>
 8007f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d17a      	bne.n	8008080 <_strtod_l+0xa50>
 8007f8a:	f1ba 0f00 	cmp.w	sl, #0
 8007f8e:	d158      	bne.n	8008042 <_strtod_l+0xa12>
 8007f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d15a      	bne.n	8008050 <_strtod_l+0xa20>
 8007f9a:	4b64      	ldr	r3, [pc, #400]	@ (800812c <_strtod_l+0xafc>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 fdbb 	bl	8000b1c <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d159      	bne.n	800805e <_strtod_l+0xa2e>
 8007faa:	4630      	mov	r0, r6
 8007fac:	4639      	mov	r1, r7
 8007fae:	4b60      	ldr	r3, [pc, #384]	@ (8008130 <_strtod_l+0xb00>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f7f8 fb41 	bl	8000638 <__aeabi_dmul>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460f      	mov	r7, r1
 8007fba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007fbe:	9606      	str	r6, [sp, #24]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fc6:	4d57      	ldr	r5, [pc, #348]	@ (8008124 <_strtod_l+0xaf4>)
 8007fc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fce:	401d      	ands	r5, r3
 8007fd0:	4b58      	ldr	r3, [pc, #352]	@ (8008134 <_strtod_l+0xb04>)
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	f040 80b2 	bne.w	800813c <_strtod_l+0xb0c>
 8007fd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007fde:	ec4b ab10 	vmov	d0, sl, fp
 8007fe2:	f002 fde1 	bl	800aba8 <__ulp>
 8007fe6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fea:	ec51 0b10 	vmov	r0, r1, d0
 8007fee:	f7f8 fb23 	bl	8000638 <__aeabi_dmul>
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	465b      	mov	r3, fp
 8007ff6:	f7f8 f969 	bl	80002cc <__adddf3>
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4949      	ldr	r1, [pc, #292]	@ (8008124 <_strtod_l+0xaf4>)
 8007ffe:	4a4e      	ldr	r2, [pc, #312]	@ (8008138 <_strtod_l+0xb08>)
 8008000:	4019      	ands	r1, r3
 8008002:	4291      	cmp	r1, r2
 8008004:	4682      	mov	sl, r0
 8008006:	d942      	bls.n	800808e <_strtod_l+0xa5e>
 8008008:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800800a:	4b47      	ldr	r3, [pc, #284]	@ (8008128 <_strtod_l+0xaf8>)
 800800c:	429a      	cmp	r2, r3
 800800e:	d103      	bne.n	8008018 <_strtod_l+0x9e8>
 8008010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008012:	3301      	adds	r3, #1
 8008014:	f43f ad2b 	beq.w	8007a6e <_strtod_l+0x43e>
 8008018:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008128 <_strtod_l+0xaf8>
 800801c:	f04f 3aff 	mov.w	sl, #4294967295
 8008020:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008022:	9805      	ldr	r0, [sp, #20]
 8008024:	f002 fa8c 	bl	800a540 <_Bfree>
 8008028:	9805      	ldr	r0, [sp, #20]
 800802a:	4649      	mov	r1, r9
 800802c:	f002 fa88 	bl	800a540 <_Bfree>
 8008030:	9805      	ldr	r0, [sp, #20]
 8008032:	4641      	mov	r1, r8
 8008034:	f002 fa84 	bl	800a540 <_Bfree>
 8008038:	9805      	ldr	r0, [sp, #20]
 800803a:	4621      	mov	r1, r4
 800803c:	f002 fa80 	bl	800a540 <_Bfree>
 8008040:	e618      	b.n	8007c74 <_strtod_l+0x644>
 8008042:	f1ba 0f01 	cmp.w	sl, #1
 8008046:	d103      	bne.n	8008050 <_strtod_l+0xa20>
 8008048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800804a:	2b00      	cmp	r3, #0
 800804c:	f43f ada5 	beq.w	8007b9a <_strtod_l+0x56a>
 8008050:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008100 <_strtod_l+0xad0>
 8008054:	4f35      	ldr	r7, [pc, #212]	@ (800812c <_strtod_l+0xafc>)
 8008056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800805a:	2600      	movs	r6, #0
 800805c:	e7b1      	b.n	8007fc2 <_strtod_l+0x992>
 800805e:	4f34      	ldr	r7, [pc, #208]	@ (8008130 <_strtod_l+0xb00>)
 8008060:	2600      	movs	r6, #0
 8008062:	e7aa      	b.n	8007fba <_strtod_l+0x98a>
 8008064:	4b32      	ldr	r3, [pc, #200]	@ (8008130 <_strtod_l+0xb00>)
 8008066:	4630      	mov	r0, r6
 8008068:	4639      	mov	r1, r7
 800806a:	2200      	movs	r2, #0
 800806c:	f7f8 fae4 	bl	8000638 <__aeabi_dmul>
 8008070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008072:	4606      	mov	r6, r0
 8008074:	460f      	mov	r7, r1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d09f      	beq.n	8007fba <_strtod_l+0x98a>
 800807a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800807e:	e7a0      	b.n	8007fc2 <_strtod_l+0x992>
 8008080:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008108 <_strtod_l+0xad8>
 8008084:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008088:	ec57 6b17 	vmov	r6, r7, d7
 800808c:	e799      	b.n	8007fc2 <_strtod_l+0x992>
 800808e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1c1      	bne.n	8008020 <_strtod_l+0x9f0>
 800809c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080a0:	0d1b      	lsrs	r3, r3, #20
 80080a2:	051b      	lsls	r3, r3, #20
 80080a4:	429d      	cmp	r5, r3
 80080a6:	d1bb      	bne.n	8008020 <_strtod_l+0x9f0>
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 fe24 	bl	8000cf8 <__aeabi_d2lz>
 80080b0:	f7f8 fa94 	bl	80005dc <__aeabi_l2d>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 f904 	bl	80002c8 <__aeabi_dsub>
 80080c0:	460b      	mov	r3, r1
 80080c2:	4602      	mov	r2, r0
 80080c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ce:	ea46 060a 	orr.w	r6, r6, sl
 80080d2:	431e      	orrs	r6, r3
 80080d4:	d06f      	beq.n	80081b6 <_strtod_l+0xb86>
 80080d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008110 <_strtod_l+0xae0>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 fd1e 	bl	8000b1c <__aeabi_dcmplt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f47f accf 	bne.w	8007a84 <_strtod_l+0x454>
 80080e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008118 <_strtod_l+0xae8>)
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080f0:	f7f8 fd32 	bl	8000b58 <__aeabi_dcmpgt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d093      	beq.n	8008020 <_strtod_l+0x9f0>
 80080f8:	e4c4      	b.n	8007a84 <_strtod_l+0x454>
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	00000000 	.word	0x00000000
 8008104:	bff00000 	.word	0xbff00000
 8008108:	00000000 	.word	0x00000000
 800810c:	3ff00000 	.word	0x3ff00000
 8008110:	94a03595 	.word	0x94a03595
 8008114:	3fdfffff 	.word	0x3fdfffff
 8008118:	35afe535 	.word	0x35afe535
 800811c:	3fe00000 	.word	0x3fe00000
 8008120:	000fffff 	.word	0x000fffff
 8008124:	7ff00000 	.word	0x7ff00000
 8008128:	7fefffff 	.word	0x7fefffff
 800812c:	3ff00000 	.word	0x3ff00000
 8008130:	3fe00000 	.word	0x3fe00000
 8008134:	7fe00000 	.word	0x7fe00000
 8008138:	7c9fffff 	.word	0x7c9fffff
 800813c:	9b08      	ldr	r3, [sp, #32]
 800813e:	b323      	cbz	r3, 800818a <_strtod_l+0xb5a>
 8008140:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008144:	d821      	bhi.n	800818a <_strtod_l+0xb5a>
 8008146:	a328      	add	r3, pc, #160	@ (adr r3, 80081e8 <_strtod_l+0xbb8>)
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	f7f8 fcee 	bl	8000b30 <__aeabi_dcmple>
 8008154:	b1a0      	cbz	r0, 8008180 <_strtod_l+0xb50>
 8008156:	4639      	mov	r1, r7
 8008158:	4630      	mov	r0, r6
 800815a:	f7f8 fd45 	bl	8000be8 <__aeabi_d2uiz>
 800815e:	2801      	cmp	r0, #1
 8008160:	bf38      	it	cc
 8008162:	2001      	movcc	r0, #1
 8008164:	f7f8 f9ee 	bl	8000544 <__aeabi_ui2d>
 8008168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	b9fb      	cbnz	r3, 80081b0 <_strtod_l+0xb80>
 8008170:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008174:	9014      	str	r0, [sp, #80]	@ 0x50
 8008176:	9315      	str	r3, [sp, #84]	@ 0x54
 8008178:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800817c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008180:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008182:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008186:	1b5b      	subs	r3, r3, r5
 8008188:	9311      	str	r3, [sp, #68]	@ 0x44
 800818a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800818e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008192:	f002 fd09 	bl	800aba8 <__ulp>
 8008196:	4650      	mov	r0, sl
 8008198:	ec53 2b10 	vmov	r2, r3, d0
 800819c:	4659      	mov	r1, fp
 800819e:	f7f8 fa4b 	bl	8000638 <__aeabi_dmul>
 80081a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081a6:	f7f8 f891 	bl	80002cc <__adddf3>
 80081aa:	4682      	mov	sl, r0
 80081ac:	468b      	mov	fp, r1
 80081ae:	e770      	b.n	8008092 <_strtod_l+0xa62>
 80081b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80081b4:	e7e0      	b.n	8008178 <_strtod_l+0xb48>
 80081b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80081f0 <_strtod_l+0xbc0>)
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f7f8 fcae 	bl	8000b1c <__aeabi_dcmplt>
 80081c0:	e798      	b.n	80080f4 <_strtod_l+0xac4>
 80081c2:	2300      	movs	r3, #0
 80081c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	f7ff ba6d 	b.w	80076aa <_strtod_l+0x7a>
 80081d0:	2a65      	cmp	r2, #101	@ 0x65
 80081d2:	f43f ab66 	beq.w	80078a2 <_strtod_l+0x272>
 80081d6:	2a45      	cmp	r2, #69	@ 0x45
 80081d8:	f43f ab63 	beq.w	80078a2 <_strtod_l+0x272>
 80081dc:	2301      	movs	r3, #1
 80081de:	f7ff bb9e 	b.w	800791e <_strtod_l+0x2ee>
 80081e2:	bf00      	nop
 80081e4:	f3af 8000 	nop.w
 80081e8:	ffc00000 	.word	0xffc00000
 80081ec:	41dfffff 	.word	0x41dfffff
 80081f0:	94a03595 	.word	0x94a03595
 80081f4:	3fcfffff 	.word	0x3fcfffff

080081f8 <strtod>:
 80081f8:	460a      	mov	r2, r1
 80081fa:	4601      	mov	r1, r0
 80081fc:	4802      	ldr	r0, [pc, #8]	@ (8008208 <strtod+0x10>)
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <strtod+0x14>)
 8008200:	6800      	ldr	r0, [r0, #0]
 8008202:	f7ff ba15 	b.w	8007630 <_strtod_l>
 8008206:	bf00      	nop
 8008208:	20000230 	.word	0x20000230
 800820c:	200000c4 	.word	0x200000c4

08008210 <_strtol_l.constprop.0>:
 8008210:	2b24      	cmp	r3, #36	@ 0x24
 8008212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008216:	4686      	mov	lr, r0
 8008218:	4690      	mov	r8, r2
 800821a:	d801      	bhi.n	8008220 <_strtol_l.constprop.0+0x10>
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <_strtol_l.constprop.0+0x1e>
 8008220:	f000 fe70 	bl	8008f04 <__errno>
 8008224:	2316      	movs	r3, #22
 8008226:	6003      	str	r3, [r0, #0]
 8008228:	2000      	movs	r0, #0
 800822a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822e:	4834      	ldr	r0, [pc, #208]	@ (8008300 <_strtol_l.constprop.0+0xf0>)
 8008230:	460d      	mov	r5, r1
 8008232:	462a      	mov	r2, r5
 8008234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008238:	5d06      	ldrb	r6, [r0, r4]
 800823a:	f016 0608 	ands.w	r6, r6, #8
 800823e:	d1f8      	bne.n	8008232 <_strtol_l.constprop.0+0x22>
 8008240:	2c2d      	cmp	r4, #45	@ 0x2d
 8008242:	d12d      	bne.n	80082a0 <_strtol_l.constprop.0+0x90>
 8008244:	782c      	ldrb	r4, [r5, #0]
 8008246:	2601      	movs	r6, #1
 8008248:	1c95      	adds	r5, r2, #2
 800824a:	f033 0210 	bics.w	r2, r3, #16
 800824e:	d109      	bne.n	8008264 <_strtol_l.constprop.0+0x54>
 8008250:	2c30      	cmp	r4, #48	@ 0x30
 8008252:	d12a      	bne.n	80082aa <_strtol_l.constprop.0+0x9a>
 8008254:	782a      	ldrb	r2, [r5, #0]
 8008256:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800825a:	2a58      	cmp	r2, #88	@ 0x58
 800825c:	d125      	bne.n	80082aa <_strtol_l.constprop.0+0x9a>
 800825e:	786c      	ldrb	r4, [r5, #1]
 8008260:	2310      	movs	r3, #16
 8008262:	3502      	adds	r5, #2
 8008264:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008268:	f10c 3cff 	add.w	ip, ip, #4294967295
 800826c:	2200      	movs	r2, #0
 800826e:	fbbc f9f3 	udiv	r9, ip, r3
 8008272:	4610      	mov	r0, r2
 8008274:	fb03 ca19 	mls	sl, r3, r9, ip
 8008278:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800827c:	2f09      	cmp	r7, #9
 800827e:	d81b      	bhi.n	80082b8 <_strtol_l.constprop.0+0xa8>
 8008280:	463c      	mov	r4, r7
 8008282:	42a3      	cmp	r3, r4
 8008284:	dd27      	ble.n	80082d6 <_strtol_l.constprop.0+0xc6>
 8008286:	1c57      	adds	r7, r2, #1
 8008288:	d007      	beq.n	800829a <_strtol_l.constprop.0+0x8a>
 800828a:	4581      	cmp	r9, r0
 800828c:	d320      	bcc.n	80082d0 <_strtol_l.constprop.0+0xc0>
 800828e:	d101      	bne.n	8008294 <_strtol_l.constprop.0+0x84>
 8008290:	45a2      	cmp	sl, r4
 8008292:	db1d      	blt.n	80082d0 <_strtol_l.constprop.0+0xc0>
 8008294:	fb00 4003 	mla	r0, r0, r3, r4
 8008298:	2201      	movs	r2, #1
 800829a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800829e:	e7eb      	b.n	8008278 <_strtol_l.constprop.0+0x68>
 80082a0:	2c2b      	cmp	r4, #43	@ 0x2b
 80082a2:	bf04      	itt	eq
 80082a4:	782c      	ldrbeq	r4, [r5, #0]
 80082a6:	1c95      	addeq	r5, r2, #2
 80082a8:	e7cf      	b.n	800824a <_strtol_l.constprop.0+0x3a>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1da      	bne.n	8008264 <_strtol_l.constprop.0+0x54>
 80082ae:	2c30      	cmp	r4, #48	@ 0x30
 80082b0:	bf0c      	ite	eq
 80082b2:	2308      	moveq	r3, #8
 80082b4:	230a      	movne	r3, #10
 80082b6:	e7d5      	b.n	8008264 <_strtol_l.constprop.0+0x54>
 80082b8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80082bc:	2f19      	cmp	r7, #25
 80082be:	d801      	bhi.n	80082c4 <_strtol_l.constprop.0+0xb4>
 80082c0:	3c37      	subs	r4, #55	@ 0x37
 80082c2:	e7de      	b.n	8008282 <_strtol_l.constprop.0+0x72>
 80082c4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80082c8:	2f19      	cmp	r7, #25
 80082ca:	d804      	bhi.n	80082d6 <_strtol_l.constprop.0+0xc6>
 80082cc:	3c57      	subs	r4, #87	@ 0x57
 80082ce:	e7d8      	b.n	8008282 <_strtol_l.constprop.0+0x72>
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295
 80082d4:	e7e1      	b.n	800829a <_strtol_l.constprop.0+0x8a>
 80082d6:	1c53      	adds	r3, r2, #1
 80082d8:	d108      	bne.n	80082ec <_strtol_l.constprop.0+0xdc>
 80082da:	2322      	movs	r3, #34	@ 0x22
 80082dc:	f8ce 3000 	str.w	r3, [lr]
 80082e0:	4660      	mov	r0, ip
 80082e2:	f1b8 0f00 	cmp.w	r8, #0
 80082e6:	d0a0      	beq.n	800822a <_strtol_l.constprop.0+0x1a>
 80082e8:	1e69      	subs	r1, r5, #1
 80082ea:	e006      	b.n	80082fa <_strtol_l.constprop.0+0xea>
 80082ec:	b106      	cbz	r6, 80082f0 <_strtol_l.constprop.0+0xe0>
 80082ee:	4240      	negs	r0, r0
 80082f0:	f1b8 0f00 	cmp.w	r8, #0
 80082f4:	d099      	beq.n	800822a <_strtol_l.constprop.0+0x1a>
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	d1f6      	bne.n	80082e8 <_strtol_l.constprop.0+0xd8>
 80082fa:	f8c8 1000 	str.w	r1, [r8]
 80082fe:	e794      	b.n	800822a <_strtol_l.constprop.0+0x1a>
 8008300:	0800c289 	.word	0x0800c289

08008304 <strtol>:
 8008304:	4613      	mov	r3, r2
 8008306:	460a      	mov	r2, r1
 8008308:	4601      	mov	r1, r0
 800830a:	4802      	ldr	r0, [pc, #8]	@ (8008314 <strtol+0x10>)
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f7ff bf7f 	b.w	8008210 <_strtol_l.constprop.0>
 8008312:	bf00      	nop
 8008314:	20000230 	.word	0x20000230

08008318 <__cvt>:
 8008318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	ec57 6b10 	vmov	r6, r7, d0
 8008320:	2f00      	cmp	r7, #0
 8008322:	460c      	mov	r4, r1
 8008324:	4619      	mov	r1, r3
 8008326:	463b      	mov	r3, r7
 8008328:	bfbb      	ittet	lt
 800832a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800832e:	461f      	movlt	r7, r3
 8008330:	2300      	movge	r3, #0
 8008332:	232d      	movlt	r3, #45	@ 0x2d
 8008334:	700b      	strb	r3, [r1, #0]
 8008336:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008338:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800833c:	4691      	mov	r9, r2
 800833e:	f023 0820 	bic.w	r8, r3, #32
 8008342:	bfbc      	itt	lt
 8008344:	4632      	movlt	r2, r6
 8008346:	4616      	movlt	r6, r2
 8008348:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800834c:	d005      	beq.n	800835a <__cvt+0x42>
 800834e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008352:	d100      	bne.n	8008356 <__cvt+0x3e>
 8008354:	3401      	adds	r4, #1
 8008356:	2102      	movs	r1, #2
 8008358:	e000      	b.n	800835c <__cvt+0x44>
 800835a:	2103      	movs	r1, #3
 800835c:	ab03      	add	r3, sp, #12
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	ab02      	add	r3, sp, #8
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	ec47 6b10 	vmov	d0, r6, r7
 8008368:	4653      	mov	r3, sl
 800836a:	4622      	mov	r2, r4
 800836c:	f000 fe98 	bl	80090a0 <_dtoa_r>
 8008370:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008374:	4605      	mov	r5, r0
 8008376:	d119      	bne.n	80083ac <__cvt+0x94>
 8008378:	f019 0f01 	tst.w	r9, #1
 800837c:	d00e      	beq.n	800839c <__cvt+0x84>
 800837e:	eb00 0904 	add.w	r9, r0, r4
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f8 fbbd 	bl	8000b08 <__aeabi_dcmpeq>
 800838e:	b108      	cbz	r0, 8008394 <__cvt+0x7c>
 8008390:	f8cd 900c 	str.w	r9, [sp, #12]
 8008394:	2230      	movs	r2, #48	@ 0x30
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	454b      	cmp	r3, r9
 800839a:	d31e      	bcc.n	80083da <__cvt+0xc2>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083a0:	1b5b      	subs	r3, r3, r5
 80083a2:	4628      	mov	r0, r5
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	b004      	add	sp, #16
 80083a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083b0:	eb00 0904 	add.w	r9, r0, r4
 80083b4:	d1e5      	bne.n	8008382 <__cvt+0x6a>
 80083b6:	7803      	ldrb	r3, [r0, #0]
 80083b8:	2b30      	cmp	r3, #48	@ 0x30
 80083ba:	d10a      	bne.n	80083d2 <__cvt+0xba>
 80083bc:	2200      	movs	r2, #0
 80083be:	2300      	movs	r3, #0
 80083c0:	4630      	mov	r0, r6
 80083c2:	4639      	mov	r1, r7
 80083c4:	f7f8 fba0 	bl	8000b08 <__aeabi_dcmpeq>
 80083c8:	b918      	cbnz	r0, 80083d2 <__cvt+0xba>
 80083ca:	f1c4 0401 	rsb	r4, r4, #1
 80083ce:	f8ca 4000 	str.w	r4, [sl]
 80083d2:	f8da 3000 	ldr.w	r3, [sl]
 80083d6:	4499      	add	r9, r3
 80083d8:	e7d3      	b.n	8008382 <__cvt+0x6a>
 80083da:	1c59      	adds	r1, r3, #1
 80083dc:	9103      	str	r1, [sp, #12]
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	e7d9      	b.n	8008396 <__cvt+0x7e>

080083e2 <__exponent>:
 80083e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e4:	2900      	cmp	r1, #0
 80083e6:	bfba      	itte	lt
 80083e8:	4249      	neglt	r1, r1
 80083ea:	232d      	movlt	r3, #45	@ 0x2d
 80083ec:	232b      	movge	r3, #43	@ 0x2b
 80083ee:	2909      	cmp	r1, #9
 80083f0:	7002      	strb	r2, [r0, #0]
 80083f2:	7043      	strb	r3, [r0, #1]
 80083f4:	dd29      	ble.n	800844a <__exponent+0x68>
 80083f6:	f10d 0307 	add.w	r3, sp, #7
 80083fa:	461d      	mov	r5, r3
 80083fc:	270a      	movs	r7, #10
 80083fe:	461a      	mov	r2, r3
 8008400:	fbb1 f6f7 	udiv	r6, r1, r7
 8008404:	fb07 1416 	mls	r4, r7, r6, r1
 8008408:	3430      	adds	r4, #48	@ 0x30
 800840a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800840e:	460c      	mov	r4, r1
 8008410:	2c63      	cmp	r4, #99	@ 0x63
 8008412:	f103 33ff 	add.w	r3, r3, #4294967295
 8008416:	4631      	mov	r1, r6
 8008418:	dcf1      	bgt.n	80083fe <__exponent+0x1c>
 800841a:	3130      	adds	r1, #48	@ 0x30
 800841c:	1e94      	subs	r4, r2, #2
 800841e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008422:	1c41      	adds	r1, r0, #1
 8008424:	4623      	mov	r3, r4
 8008426:	42ab      	cmp	r3, r5
 8008428:	d30a      	bcc.n	8008440 <__exponent+0x5e>
 800842a:	f10d 0309 	add.w	r3, sp, #9
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ac      	cmp	r4, r5
 8008432:	bf88      	it	hi
 8008434:	2300      	movhi	r3, #0
 8008436:	3302      	adds	r3, #2
 8008438:	4403      	add	r3, r0
 800843a:	1a18      	subs	r0, r3, r0
 800843c:	b003      	add	sp, #12
 800843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008440:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008444:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008448:	e7ed      	b.n	8008426 <__exponent+0x44>
 800844a:	2330      	movs	r3, #48	@ 0x30
 800844c:	3130      	adds	r1, #48	@ 0x30
 800844e:	7083      	strb	r3, [r0, #2]
 8008450:	70c1      	strb	r1, [r0, #3]
 8008452:	1d03      	adds	r3, r0, #4
 8008454:	e7f1      	b.n	800843a <__exponent+0x58>
	...

08008458 <_printf_float>:
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845c:	b08d      	sub	sp, #52	@ 0x34
 800845e:	460c      	mov	r4, r1
 8008460:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008464:	4616      	mov	r6, r2
 8008466:	461f      	mov	r7, r3
 8008468:	4605      	mov	r5, r0
 800846a:	f000 fd01 	bl	8008e70 <_localeconv_r>
 800846e:	6803      	ldr	r3, [r0, #0]
 8008470:	9304      	str	r3, [sp, #16]
 8008472:	4618      	mov	r0, r3
 8008474:	f7f7 ff1c 	bl	80002b0 <strlen>
 8008478:	2300      	movs	r3, #0
 800847a:	930a      	str	r3, [sp, #40]	@ 0x28
 800847c:	f8d8 3000 	ldr.w	r3, [r8]
 8008480:	9005      	str	r0, [sp, #20]
 8008482:	3307      	adds	r3, #7
 8008484:	f023 0307 	bic.w	r3, r3, #7
 8008488:	f103 0208 	add.w	r2, r3, #8
 800848c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008490:	f8d4 b000 	ldr.w	fp, [r4]
 8008494:	f8c8 2000 	str.w	r2, [r8]
 8008498:	e9d3 8900 	ldrd	r8, r9, [r3]
 800849c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084a0:	9307      	str	r3, [sp, #28]
 80084a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80084a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ae:	4b9c      	ldr	r3, [pc, #624]	@ (8008720 <_printf_float+0x2c8>)
 80084b0:	f04f 32ff 	mov.w	r2, #4294967295
 80084b4:	f7f8 fb5a 	bl	8000b6c <__aeabi_dcmpun>
 80084b8:	bb70      	cbnz	r0, 8008518 <_printf_float+0xc0>
 80084ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084be:	4b98      	ldr	r3, [pc, #608]	@ (8008720 <_printf_float+0x2c8>)
 80084c0:	f04f 32ff 	mov.w	r2, #4294967295
 80084c4:	f7f8 fb34 	bl	8000b30 <__aeabi_dcmple>
 80084c8:	bb30      	cbnz	r0, 8008518 <_printf_float+0xc0>
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4640      	mov	r0, r8
 80084d0:	4649      	mov	r1, r9
 80084d2:	f7f8 fb23 	bl	8000b1c <__aeabi_dcmplt>
 80084d6:	b110      	cbz	r0, 80084de <_printf_float+0x86>
 80084d8:	232d      	movs	r3, #45	@ 0x2d
 80084da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084de:	4a91      	ldr	r2, [pc, #580]	@ (8008724 <_printf_float+0x2cc>)
 80084e0:	4b91      	ldr	r3, [pc, #580]	@ (8008728 <_printf_float+0x2d0>)
 80084e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084e6:	bf94      	ite	ls
 80084e8:	4690      	movls	r8, r2
 80084ea:	4698      	movhi	r8, r3
 80084ec:	2303      	movs	r3, #3
 80084ee:	6123      	str	r3, [r4, #16]
 80084f0:	f02b 0304 	bic.w	r3, fp, #4
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	f04f 0900 	mov.w	r9, #0
 80084fa:	9700      	str	r7, [sp, #0]
 80084fc:	4633      	mov	r3, r6
 80084fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f9d2 	bl	80088ac <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	f040 808d 	bne.w	8008628 <_printf_float+0x1d0>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	b00d      	add	sp, #52	@ 0x34
 8008514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	4640      	mov	r0, r8
 800851e:	4649      	mov	r1, r9
 8008520:	f7f8 fb24 	bl	8000b6c <__aeabi_dcmpun>
 8008524:	b140      	cbz	r0, 8008538 <_printf_float+0xe0>
 8008526:	464b      	mov	r3, r9
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfbc      	itt	lt
 800852c:	232d      	movlt	r3, #45	@ 0x2d
 800852e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008532:	4a7e      	ldr	r2, [pc, #504]	@ (800872c <_printf_float+0x2d4>)
 8008534:	4b7e      	ldr	r3, [pc, #504]	@ (8008730 <_printf_float+0x2d8>)
 8008536:	e7d4      	b.n	80084e2 <_printf_float+0x8a>
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800853e:	9206      	str	r2, [sp, #24]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	d13b      	bne.n	80085bc <_printf_float+0x164>
 8008544:	2306      	movs	r3, #6
 8008546:	6063      	str	r3, [r4, #4]
 8008548:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800854c:	2300      	movs	r3, #0
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	9303      	str	r3, [sp, #12]
 8008552:	ab0a      	add	r3, sp, #40	@ 0x28
 8008554:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008558:	ab09      	add	r3, sp, #36	@ 0x24
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	ec49 8b10 	vmov	d0, r8, r9
 8008562:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008566:	4628      	mov	r0, r5
 8008568:	f7ff fed6 	bl	8008318 <__cvt>
 800856c:	9b06      	ldr	r3, [sp, #24]
 800856e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008570:	2b47      	cmp	r3, #71	@ 0x47
 8008572:	4680      	mov	r8, r0
 8008574:	d129      	bne.n	80085ca <_printf_float+0x172>
 8008576:	1cc8      	adds	r0, r1, #3
 8008578:	db02      	blt.n	8008580 <_printf_float+0x128>
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	4299      	cmp	r1, r3
 800857e:	dd41      	ble.n	8008604 <_printf_float+0x1ac>
 8008580:	f1aa 0a02 	sub.w	sl, sl, #2
 8008584:	fa5f fa8a 	uxtb.w	sl, sl
 8008588:	3901      	subs	r1, #1
 800858a:	4652      	mov	r2, sl
 800858c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008590:	9109      	str	r1, [sp, #36]	@ 0x24
 8008592:	f7ff ff26 	bl	80083e2 <__exponent>
 8008596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008598:	1813      	adds	r3, r2, r0
 800859a:	2a01      	cmp	r2, #1
 800859c:	4681      	mov	r9, r0
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	dc02      	bgt.n	80085a8 <_printf_float+0x150>
 80085a2:	6822      	ldr	r2, [r4, #0]
 80085a4:	07d2      	lsls	r2, r2, #31
 80085a6:	d501      	bpl.n	80085ac <_printf_float+0x154>
 80085a8:	3301      	adds	r3, #1
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0a2      	beq.n	80084fa <_printf_float+0xa2>
 80085b4:	232d      	movs	r3, #45	@ 0x2d
 80085b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ba:	e79e      	b.n	80084fa <_printf_float+0xa2>
 80085bc:	9a06      	ldr	r2, [sp, #24]
 80085be:	2a47      	cmp	r2, #71	@ 0x47
 80085c0:	d1c2      	bne.n	8008548 <_printf_float+0xf0>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1c0      	bne.n	8008548 <_printf_float+0xf0>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7bd      	b.n	8008546 <_printf_float+0xee>
 80085ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085ce:	d9db      	bls.n	8008588 <_printf_float+0x130>
 80085d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085d4:	d118      	bne.n	8008608 <_printf_float+0x1b0>
 80085d6:	2900      	cmp	r1, #0
 80085d8:	6863      	ldr	r3, [r4, #4]
 80085da:	dd0b      	ble.n	80085f4 <_printf_float+0x19c>
 80085dc:	6121      	str	r1, [r4, #16]
 80085de:	b913      	cbnz	r3, 80085e6 <_printf_float+0x18e>
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	07d0      	lsls	r0, r2, #31
 80085e4:	d502      	bpl.n	80085ec <_printf_float+0x194>
 80085e6:	3301      	adds	r3, #1
 80085e8:	440b      	add	r3, r1
 80085ea:	6123      	str	r3, [r4, #16]
 80085ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085ee:	f04f 0900 	mov.w	r9, #0
 80085f2:	e7db      	b.n	80085ac <_printf_float+0x154>
 80085f4:	b913      	cbnz	r3, 80085fc <_printf_float+0x1a4>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	07d2      	lsls	r2, r2, #31
 80085fa:	d501      	bpl.n	8008600 <_printf_float+0x1a8>
 80085fc:	3302      	adds	r3, #2
 80085fe:	e7f4      	b.n	80085ea <_printf_float+0x192>
 8008600:	2301      	movs	r3, #1
 8008602:	e7f2      	b.n	80085ea <_printf_float+0x192>
 8008604:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860a:	4299      	cmp	r1, r3
 800860c:	db05      	blt.n	800861a <_printf_float+0x1c2>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	6121      	str	r1, [r4, #16]
 8008612:	07d8      	lsls	r0, r3, #31
 8008614:	d5ea      	bpl.n	80085ec <_printf_float+0x194>
 8008616:	1c4b      	adds	r3, r1, #1
 8008618:	e7e7      	b.n	80085ea <_printf_float+0x192>
 800861a:	2900      	cmp	r1, #0
 800861c:	bfd4      	ite	le
 800861e:	f1c1 0202 	rsble	r2, r1, #2
 8008622:	2201      	movgt	r2, #1
 8008624:	4413      	add	r3, r2
 8008626:	e7e0      	b.n	80085ea <_printf_float+0x192>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	055a      	lsls	r2, r3, #21
 800862c:	d407      	bmi.n	800863e <_printf_float+0x1e6>
 800862e:	6923      	ldr	r3, [r4, #16]
 8008630:	4642      	mov	r2, r8
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d12b      	bne.n	8008694 <_printf_float+0x23c>
 800863c:	e767      	b.n	800850e <_printf_float+0xb6>
 800863e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008642:	f240 80dd 	bls.w	8008800 <_printf_float+0x3a8>
 8008646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	f7f8 fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8008652:	2800      	cmp	r0, #0
 8008654:	d033      	beq.n	80086be <_printf_float+0x266>
 8008656:	4a37      	ldr	r2, [pc, #220]	@ (8008734 <_printf_float+0x2dc>)
 8008658:	2301      	movs	r3, #1
 800865a:	4631      	mov	r1, r6
 800865c:	4628      	mov	r0, r5
 800865e:	47b8      	blx	r7
 8008660:	3001      	adds	r0, #1
 8008662:	f43f af54 	beq.w	800850e <_printf_float+0xb6>
 8008666:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800866a:	4543      	cmp	r3, r8
 800866c:	db02      	blt.n	8008674 <_printf_float+0x21c>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	07d8      	lsls	r0, r3, #31
 8008672:	d50f      	bpl.n	8008694 <_printf_float+0x23c>
 8008674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af45 	beq.w	800850e <_printf_float+0xb6>
 8008684:	f04f 0900 	mov.w	r9, #0
 8008688:	f108 38ff 	add.w	r8, r8, #4294967295
 800868c:	f104 0a1a 	add.w	sl, r4, #26
 8008690:	45c8      	cmp	r8, r9
 8008692:	dc09      	bgt.n	80086a8 <_printf_float+0x250>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	079b      	lsls	r3, r3, #30
 8008698:	f100 8103 	bmi.w	80088a2 <_printf_float+0x44a>
 800869c:	68e0      	ldr	r0, [r4, #12]
 800869e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a0:	4298      	cmp	r0, r3
 80086a2:	bfb8      	it	lt
 80086a4:	4618      	movlt	r0, r3
 80086a6:	e734      	b.n	8008512 <_printf_float+0xba>
 80086a8:	2301      	movs	r3, #1
 80086aa:	4652      	mov	r2, sl
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	f43f af2b 	beq.w	800850e <_printf_float+0xb6>
 80086b8:	f109 0901 	add.w	r9, r9, #1
 80086bc:	e7e8      	b.n	8008690 <_printf_float+0x238>
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dc39      	bgt.n	8008738 <_printf_float+0x2e0>
 80086c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008734 <_printf_float+0x2dc>)
 80086c6:	2301      	movs	r3, #1
 80086c8:	4631      	mov	r1, r6
 80086ca:	4628      	mov	r0, r5
 80086cc:	47b8      	blx	r7
 80086ce:	3001      	adds	r0, #1
 80086d0:	f43f af1d 	beq.w	800850e <_printf_float+0xb6>
 80086d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086d8:	ea59 0303 	orrs.w	r3, r9, r3
 80086dc:	d102      	bne.n	80086e4 <_printf_float+0x28c>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	07d9      	lsls	r1, r3, #31
 80086e2:	d5d7      	bpl.n	8008694 <_printf_float+0x23c>
 80086e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	f43f af0d 	beq.w	800850e <_printf_float+0xb6>
 80086f4:	f04f 0a00 	mov.w	sl, #0
 80086f8:	f104 0b1a 	add.w	fp, r4, #26
 80086fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fe:	425b      	negs	r3, r3
 8008700:	4553      	cmp	r3, sl
 8008702:	dc01      	bgt.n	8008708 <_printf_float+0x2b0>
 8008704:	464b      	mov	r3, r9
 8008706:	e793      	b.n	8008630 <_printf_float+0x1d8>
 8008708:	2301      	movs	r3, #1
 800870a:	465a      	mov	r2, fp
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	47b8      	blx	r7
 8008712:	3001      	adds	r0, #1
 8008714:	f43f aefb 	beq.w	800850e <_printf_float+0xb6>
 8008718:	f10a 0a01 	add.w	sl, sl, #1
 800871c:	e7ee      	b.n	80086fc <_printf_float+0x2a4>
 800871e:	bf00      	nop
 8008720:	7fefffff 	.word	0x7fefffff
 8008724:	0800c389 	.word	0x0800c389
 8008728:	0800c38d 	.word	0x0800c38d
 800872c:	0800c391 	.word	0x0800c391
 8008730:	0800c395 	.word	0x0800c395
 8008734:	0800c399 	.word	0x0800c399
 8008738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800873a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800873e:	4553      	cmp	r3, sl
 8008740:	bfa8      	it	ge
 8008742:	4653      	movge	r3, sl
 8008744:	2b00      	cmp	r3, #0
 8008746:	4699      	mov	r9, r3
 8008748:	dc36      	bgt.n	80087b8 <_printf_float+0x360>
 800874a:	f04f 0b00 	mov.w	fp, #0
 800874e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008752:	f104 021a 	add.w	r2, r4, #26
 8008756:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008758:	9306      	str	r3, [sp, #24]
 800875a:	eba3 0309 	sub.w	r3, r3, r9
 800875e:	455b      	cmp	r3, fp
 8008760:	dc31      	bgt.n	80087c6 <_printf_float+0x36e>
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	459a      	cmp	sl, r3
 8008766:	dc3a      	bgt.n	80087de <_printf_float+0x386>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	07da      	lsls	r2, r3, #31
 800876c:	d437      	bmi.n	80087de <_printf_float+0x386>
 800876e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008770:	ebaa 0903 	sub.w	r9, sl, r3
 8008774:	9b06      	ldr	r3, [sp, #24]
 8008776:	ebaa 0303 	sub.w	r3, sl, r3
 800877a:	4599      	cmp	r9, r3
 800877c:	bfa8      	it	ge
 800877e:	4699      	movge	r9, r3
 8008780:	f1b9 0f00 	cmp.w	r9, #0
 8008784:	dc33      	bgt.n	80087ee <_printf_float+0x396>
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800878e:	f104 0b1a 	add.w	fp, r4, #26
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	ebaa 0303 	sub.w	r3, sl, r3
 8008798:	eba3 0309 	sub.w	r3, r3, r9
 800879c:	4543      	cmp	r3, r8
 800879e:	f77f af79 	ble.w	8008694 <_printf_float+0x23c>
 80087a2:	2301      	movs	r3, #1
 80087a4:	465a      	mov	r2, fp
 80087a6:	4631      	mov	r1, r6
 80087a8:	4628      	mov	r0, r5
 80087aa:	47b8      	blx	r7
 80087ac:	3001      	adds	r0, #1
 80087ae:	f43f aeae 	beq.w	800850e <_printf_float+0xb6>
 80087b2:	f108 0801 	add.w	r8, r8, #1
 80087b6:	e7ec      	b.n	8008792 <_printf_float+0x33a>
 80087b8:	4642      	mov	r2, r8
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	d1c2      	bne.n	800874a <_printf_float+0x2f2>
 80087c4:	e6a3      	b.n	800850e <_printf_float+0xb6>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	9206      	str	r2, [sp, #24]
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae9c 	beq.w	800850e <_printf_float+0xb6>
 80087d6:	9a06      	ldr	r2, [sp, #24]
 80087d8:	f10b 0b01 	add.w	fp, fp, #1
 80087dc:	e7bb      	b.n	8008756 <_printf_float+0x2fe>
 80087de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e2:	4631      	mov	r1, r6
 80087e4:	4628      	mov	r0, r5
 80087e6:	47b8      	blx	r7
 80087e8:	3001      	adds	r0, #1
 80087ea:	d1c0      	bne.n	800876e <_printf_float+0x316>
 80087ec:	e68f      	b.n	800850e <_printf_float+0xb6>
 80087ee:	9a06      	ldr	r2, [sp, #24]
 80087f0:	464b      	mov	r3, r9
 80087f2:	4442      	add	r2, r8
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	d1c3      	bne.n	8008786 <_printf_float+0x32e>
 80087fe:	e686      	b.n	800850e <_printf_float+0xb6>
 8008800:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008804:	f1ba 0f01 	cmp.w	sl, #1
 8008808:	dc01      	bgt.n	800880e <_printf_float+0x3b6>
 800880a:	07db      	lsls	r3, r3, #31
 800880c:	d536      	bpl.n	800887c <_printf_float+0x424>
 800880e:	2301      	movs	r3, #1
 8008810:	4642      	mov	r2, r8
 8008812:	4631      	mov	r1, r6
 8008814:	4628      	mov	r0, r5
 8008816:	47b8      	blx	r7
 8008818:	3001      	adds	r0, #1
 800881a:	f43f ae78 	beq.w	800850e <_printf_float+0xb6>
 800881e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f ae70 	beq.w	800850e <_printf_float+0xb6>
 800882e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800883a:	f7f8 f965 	bl	8000b08 <__aeabi_dcmpeq>
 800883e:	b9c0      	cbnz	r0, 8008872 <_printf_float+0x41a>
 8008840:	4653      	mov	r3, sl
 8008842:	f108 0201 	add.w	r2, r8, #1
 8008846:	4631      	mov	r1, r6
 8008848:	4628      	mov	r0, r5
 800884a:	47b8      	blx	r7
 800884c:	3001      	adds	r0, #1
 800884e:	d10c      	bne.n	800886a <_printf_float+0x412>
 8008850:	e65d      	b.n	800850e <_printf_float+0xb6>
 8008852:	2301      	movs	r3, #1
 8008854:	465a      	mov	r2, fp
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f ae56 	beq.w	800850e <_printf_float+0xb6>
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	45d0      	cmp	r8, sl
 8008868:	dbf3      	blt.n	8008852 <_printf_float+0x3fa>
 800886a:	464b      	mov	r3, r9
 800886c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008870:	e6df      	b.n	8008632 <_printf_float+0x1da>
 8008872:	f04f 0800 	mov.w	r8, #0
 8008876:	f104 0b1a 	add.w	fp, r4, #26
 800887a:	e7f4      	b.n	8008866 <_printf_float+0x40e>
 800887c:	2301      	movs	r3, #1
 800887e:	4642      	mov	r2, r8
 8008880:	e7e1      	b.n	8008846 <_printf_float+0x3ee>
 8008882:	2301      	movs	r3, #1
 8008884:	464a      	mov	r2, r9
 8008886:	4631      	mov	r1, r6
 8008888:	4628      	mov	r0, r5
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	f43f ae3e 	beq.w	800850e <_printf_float+0xb6>
 8008892:	f108 0801 	add.w	r8, r8, #1
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800889a:	1a5b      	subs	r3, r3, r1
 800889c:	4543      	cmp	r3, r8
 800889e:	dcf0      	bgt.n	8008882 <_printf_float+0x42a>
 80088a0:	e6fc      	b.n	800869c <_printf_float+0x244>
 80088a2:	f04f 0800 	mov.w	r8, #0
 80088a6:	f104 0919 	add.w	r9, r4, #25
 80088aa:	e7f4      	b.n	8008896 <_printf_float+0x43e>

080088ac <_printf_common>:
 80088ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b0:	4616      	mov	r6, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	688a      	ldr	r2, [r1, #8]
 80088b6:	690b      	ldr	r3, [r1, #16]
 80088b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bfb8      	it	lt
 80088c0:	4613      	movlt	r3, r2
 80088c2:	6033      	str	r3, [r6, #0]
 80088c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088c8:	4607      	mov	r7, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b10a      	cbz	r2, 80088d2 <_printf_common+0x26>
 80088ce:	3301      	adds	r3, #1
 80088d0:	6033      	str	r3, [r6, #0]
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	0699      	lsls	r1, r3, #26
 80088d6:	bf42      	ittt	mi
 80088d8:	6833      	ldrmi	r3, [r6, #0]
 80088da:	3302      	addmi	r3, #2
 80088dc:	6033      	strmi	r3, [r6, #0]
 80088de:	6825      	ldr	r5, [r4, #0]
 80088e0:	f015 0506 	ands.w	r5, r5, #6
 80088e4:	d106      	bne.n	80088f4 <_printf_common+0x48>
 80088e6:	f104 0a19 	add.w	sl, r4, #25
 80088ea:	68e3      	ldr	r3, [r4, #12]
 80088ec:	6832      	ldr	r2, [r6, #0]
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc26      	bgt.n	8008942 <_printf_common+0x96>
 80088f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	3b00      	subs	r3, #0
 80088fc:	bf18      	it	ne
 80088fe:	2301      	movne	r3, #1
 8008900:	0692      	lsls	r2, r2, #26
 8008902:	d42b      	bmi.n	800895c <_printf_common+0xb0>
 8008904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008908:	4641      	mov	r1, r8
 800890a:	4638      	mov	r0, r7
 800890c:	47c8      	blx	r9
 800890e:	3001      	adds	r0, #1
 8008910:	d01e      	beq.n	8008950 <_printf_common+0xa4>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	f003 0306 	and.w	r3, r3, #6
 800891a:	2b04      	cmp	r3, #4
 800891c:	bf02      	ittt	eq
 800891e:	68e5      	ldreq	r5, [r4, #12]
 8008920:	6833      	ldreq	r3, [r6, #0]
 8008922:	1aed      	subeq	r5, r5, r3
 8008924:	68a3      	ldr	r3, [r4, #8]
 8008926:	bf0c      	ite	eq
 8008928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800892c:	2500      	movne	r5, #0
 800892e:	4293      	cmp	r3, r2
 8008930:	bfc4      	itt	gt
 8008932:	1a9b      	subgt	r3, r3, r2
 8008934:	18ed      	addgt	r5, r5, r3
 8008936:	2600      	movs	r6, #0
 8008938:	341a      	adds	r4, #26
 800893a:	42b5      	cmp	r5, r6
 800893c:	d11a      	bne.n	8008974 <_printf_common+0xc8>
 800893e:	2000      	movs	r0, #0
 8008940:	e008      	b.n	8008954 <_printf_common+0xa8>
 8008942:	2301      	movs	r3, #1
 8008944:	4652      	mov	r2, sl
 8008946:	4641      	mov	r1, r8
 8008948:	4638      	mov	r0, r7
 800894a:	47c8      	blx	r9
 800894c:	3001      	adds	r0, #1
 800894e:	d103      	bne.n	8008958 <_printf_common+0xac>
 8008950:	f04f 30ff 	mov.w	r0, #4294967295
 8008954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008958:	3501      	adds	r5, #1
 800895a:	e7c6      	b.n	80088ea <_printf_common+0x3e>
 800895c:	18e1      	adds	r1, r4, r3
 800895e:	1c5a      	adds	r2, r3, #1
 8008960:	2030      	movs	r0, #48	@ 0x30
 8008962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008966:	4422      	add	r2, r4
 8008968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800896c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008970:	3302      	adds	r3, #2
 8008972:	e7c7      	b.n	8008904 <_printf_common+0x58>
 8008974:	2301      	movs	r3, #1
 8008976:	4622      	mov	r2, r4
 8008978:	4641      	mov	r1, r8
 800897a:	4638      	mov	r0, r7
 800897c:	47c8      	blx	r9
 800897e:	3001      	adds	r0, #1
 8008980:	d0e6      	beq.n	8008950 <_printf_common+0xa4>
 8008982:	3601      	adds	r6, #1
 8008984:	e7d9      	b.n	800893a <_printf_common+0x8e>
	...

08008988 <_printf_i>:
 8008988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	7e0f      	ldrb	r7, [r1, #24]
 800898e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008990:	2f78      	cmp	r7, #120	@ 0x78
 8008992:	4691      	mov	r9, r2
 8008994:	4680      	mov	r8, r0
 8008996:	460c      	mov	r4, r1
 8008998:	469a      	mov	sl, r3
 800899a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800899e:	d807      	bhi.n	80089b0 <_printf_i+0x28>
 80089a0:	2f62      	cmp	r7, #98	@ 0x62
 80089a2:	d80a      	bhi.n	80089ba <_printf_i+0x32>
 80089a4:	2f00      	cmp	r7, #0
 80089a6:	f000 80d2 	beq.w	8008b4e <_printf_i+0x1c6>
 80089aa:	2f58      	cmp	r7, #88	@ 0x58
 80089ac:	f000 80b9 	beq.w	8008b22 <_printf_i+0x19a>
 80089b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089b8:	e03a      	b.n	8008a30 <_printf_i+0xa8>
 80089ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089be:	2b15      	cmp	r3, #21
 80089c0:	d8f6      	bhi.n	80089b0 <_printf_i+0x28>
 80089c2:	a101      	add	r1, pc, #4	@ (adr r1, 80089c8 <_printf_i+0x40>)
 80089c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c8:	08008a21 	.word	0x08008a21
 80089cc:	08008a35 	.word	0x08008a35
 80089d0:	080089b1 	.word	0x080089b1
 80089d4:	080089b1 	.word	0x080089b1
 80089d8:	080089b1 	.word	0x080089b1
 80089dc:	080089b1 	.word	0x080089b1
 80089e0:	08008a35 	.word	0x08008a35
 80089e4:	080089b1 	.word	0x080089b1
 80089e8:	080089b1 	.word	0x080089b1
 80089ec:	080089b1 	.word	0x080089b1
 80089f0:	080089b1 	.word	0x080089b1
 80089f4:	08008b35 	.word	0x08008b35
 80089f8:	08008a5f 	.word	0x08008a5f
 80089fc:	08008aef 	.word	0x08008aef
 8008a00:	080089b1 	.word	0x080089b1
 8008a04:	080089b1 	.word	0x080089b1
 8008a08:	08008b57 	.word	0x08008b57
 8008a0c:	080089b1 	.word	0x080089b1
 8008a10:	08008a5f 	.word	0x08008a5f
 8008a14:	080089b1 	.word	0x080089b1
 8008a18:	080089b1 	.word	0x080089b1
 8008a1c:	08008af7 	.word	0x08008af7
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6032      	str	r2, [r6, #0]
 8008a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a30:	2301      	movs	r3, #1
 8008a32:	e09d      	b.n	8008b70 <_printf_i+0x1e8>
 8008a34:	6833      	ldr	r3, [r6, #0]
 8008a36:	6820      	ldr	r0, [r4, #0]
 8008a38:	1d19      	adds	r1, r3, #4
 8008a3a:	6031      	str	r1, [r6, #0]
 8008a3c:	0606      	lsls	r6, r0, #24
 8008a3e:	d501      	bpl.n	8008a44 <_printf_i+0xbc>
 8008a40:	681d      	ldr	r5, [r3, #0]
 8008a42:	e003      	b.n	8008a4c <_printf_i+0xc4>
 8008a44:	0645      	lsls	r5, r0, #25
 8008a46:	d5fb      	bpl.n	8008a40 <_printf_i+0xb8>
 8008a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a4c:	2d00      	cmp	r5, #0
 8008a4e:	da03      	bge.n	8008a58 <_printf_i+0xd0>
 8008a50:	232d      	movs	r3, #45	@ 0x2d
 8008a52:	426d      	negs	r5, r5
 8008a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a58:	4859      	ldr	r0, [pc, #356]	@ (8008bc0 <_printf_i+0x238>)
 8008a5a:	230a      	movs	r3, #10
 8008a5c:	e011      	b.n	8008a82 <_printf_i+0xfa>
 8008a5e:	6821      	ldr	r1, [r4, #0]
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	0608      	lsls	r0, r1, #24
 8008a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a68:	d402      	bmi.n	8008a70 <_printf_i+0xe8>
 8008a6a:	0649      	lsls	r1, r1, #25
 8008a6c:	bf48      	it	mi
 8008a6e:	b2ad      	uxthmi	r5, r5
 8008a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a72:	4853      	ldr	r0, [pc, #332]	@ (8008bc0 <_printf_i+0x238>)
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	bf14      	ite	ne
 8008a78:	230a      	movne	r3, #10
 8008a7a:	2308      	moveq	r3, #8
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a82:	6866      	ldr	r6, [r4, #4]
 8008a84:	60a6      	str	r6, [r4, #8]
 8008a86:	2e00      	cmp	r6, #0
 8008a88:	bfa2      	ittt	ge
 8008a8a:	6821      	ldrge	r1, [r4, #0]
 8008a8c:	f021 0104 	bicge.w	r1, r1, #4
 8008a90:	6021      	strge	r1, [r4, #0]
 8008a92:	b90d      	cbnz	r5, 8008a98 <_printf_i+0x110>
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	d04b      	beq.n	8008b30 <_printf_i+0x1a8>
 8008a98:	4616      	mov	r6, r2
 8008a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8008aa2:	5dc7      	ldrb	r7, [r0, r7]
 8008aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aa8:	462f      	mov	r7, r5
 8008aaa:	42bb      	cmp	r3, r7
 8008aac:	460d      	mov	r5, r1
 8008aae:	d9f4      	bls.n	8008a9a <_printf_i+0x112>
 8008ab0:	2b08      	cmp	r3, #8
 8008ab2:	d10b      	bne.n	8008acc <_printf_i+0x144>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07df      	lsls	r7, r3, #31
 8008ab8:	d508      	bpl.n	8008acc <_printf_i+0x144>
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	6861      	ldr	r1, [r4, #4]
 8008abe:	4299      	cmp	r1, r3
 8008ac0:	bfde      	ittt	le
 8008ac2:	2330      	movle	r3, #48	@ 0x30
 8008ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008acc:	1b92      	subs	r2, r2, r6
 8008ace:	6122      	str	r2, [r4, #16]
 8008ad0:	f8cd a000 	str.w	sl, [sp]
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	aa03      	add	r2, sp, #12
 8008ad8:	4621      	mov	r1, r4
 8008ada:	4640      	mov	r0, r8
 8008adc:	f7ff fee6 	bl	80088ac <_printf_common>
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	d14a      	bne.n	8008b7a <_printf_i+0x1f2>
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	b004      	add	sp, #16
 8008aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	f043 0320 	orr.w	r3, r3, #32
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	4833      	ldr	r0, [pc, #204]	@ (8008bc4 <_printf_i+0x23c>)
 8008af8:	2778      	movs	r7, #120	@ 0x78
 8008afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	6831      	ldr	r1, [r6, #0]
 8008b02:	061f      	lsls	r7, r3, #24
 8008b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b08:	d402      	bmi.n	8008b10 <_printf_i+0x188>
 8008b0a:	065f      	lsls	r7, r3, #25
 8008b0c:	bf48      	it	mi
 8008b0e:	b2ad      	uxthmi	r5, r5
 8008b10:	6031      	str	r1, [r6, #0]
 8008b12:	07d9      	lsls	r1, r3, #31
 8008b14:	bf44      	itt	mi
 8008b16:	f043 0320 	orrmi.w	r3, r3, #32
 8008b1a:	6023      	strmi	r3, [r4, #0]
 8008b1c:	b11d      	cbz	r5, 8008b26 <_printf_i+0x19e>
 8008b1e:	2310      	movs	r3, #16
 8008b20:	e7ac      	b.n	8008a7c <_printf_i+0xf4>
 8008b22:	4827      	ldr	r0, [pc, #156]	@ (8008bc0 <_printf_i+0x238>)
 8008b24:	e7e9      	b.n	8008afa <_printf_i+0x172>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	f023 0320 	bic.w	r3, r3, #32
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	e7f6      	b.n	8008b1e <_printf_i+0x196>
 8008b30:	4616      	mov	r6, r2
 8008b32:	e7bd      	b.n	8008ab0 <_printf_i+0x128>
 8008b34:	6833      	ldr	r3, [r6, #0]
 8008b36:	6825      	ldr	r5, [r4, #0]
 8008b38:	6961      	ldr	r1, [r4, #20]
 8008b3a:	1d18      	adds	r0, r3, #4
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	062e      	lsls	r6, r5, #24
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0x1c0>
 8008b44:	6019      	str	r1, [r3, #0]
 8008b46:	e002      	b.n	8008b4e <_printf_i+0x1c6>
 8008b48:	0668      	lsls	r0, r5, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0x1bc>
 8008b4c:	8019      	strh	r1, [r3, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	6123      	str	r3, [r4, #16]
 8008b52:	4616      	mov	r6, r2
 8008b54:	e7bc      	b.n	8008ad0 <_printf_i+0x148>
 8008b56:	6833      	ldr	r3, [r6, #0]
 8008b58:	1d1a      	adds	r2, r3, #4
 8008b5a:	6032      	str	r2, [r6, #0]
 8008b5c:	681e      	ldr	r6, [r3, #0]
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	2100      	movs	r1, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7f7 fb54 	bl	8000210 <memchr>
 8008b68:	b108      	cbz	r0, 8008b6e <_printf_i+0x1e6>
 8008b6a:	1b80      	subs	r0, r0, r6
 8008b6c:	6060      	str	r0, [r4, #4]
 8008b6e:	6863      	ldr	r3, [r4, #4]
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	2300      	movs	r3, #0
 8008b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b78:	e7aa      	b.n	8008ad0 <_printf_i+0x148>
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4640      	mov	r0, r8
 8008b82:	47d0      	blx	sl
 8008b84:	3001      	adds	r0, #1
 8008b86:	d0ad      	beq.n	8008ae4 <_printf_i+0x15c>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	079b      	lsls	r3, r3, #30
 8008b8c:	d413      	bmi.n	8008bb6 <_printf_i+0x22e>
 8008b8e:	68e0      	ldr	r0, [r4, #12]
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	4298      	cmp	r0, r3
 8008b94:	bfb8      	it	lt
 8008b96:	4618      	movlt	r0, r3
 8008b98:	e7a6      	b.n	8008ae8 <_printf_i+0x160>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	4640      	mov	r0, r8
 8008ba2:	47d0      	blx	sl
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d09d      	beq.n	8008ae4 <_printf_i+0x15c>
 8008ba8:	3501      	adds	r5, #1
 8008baa:	68e3      	ldr	r3, [r4, #12]
 8008bac:	9903      	ldr	r1, [sp, #12]
 8008bae:	1a5b      	subs	r3, r3, r1
 8008bb0:	42ab      	cmp	r3, r5
 8008bb2:	dcf2      	bgt.n	8008b9a <_printf_i+0x212>
 8008bb4:	e7eb      	b.n	8008b8e <_printf_i+0x206>
 8008bb6:	2500      	movs	r5, #0
 8008bb8:	f104 0619 	add.w	r6, r4, #25
 8008bbc:	e7f5      	b.n	8008baa <_printf_i+0x222>
 8008bbe:	bf00      	nop
 8008bc0:	0800c39b 	.word	0x0800c39b
 8008bc4:	0800c3ac 	.word	0x0800c3ac

08008bc8 <std>:
 8008bc8:	2300      	movs	r3, #0
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e9c0 3300 	strd	r3, r3, [r0]
 8008bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bd6:	6083      	str	r3, [r0, #8]
 8008bd8:	8181      	strh	r1, [r0, #12]
 8008bda:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bdc:	81c2      	strh	r2, [r0, #14]
 8008bde:	6183      	str	r3, [r0, #24]
 8008be0:	4619      	mov	r1, r3
 8008be2:	2208      	movs	r2, #8
 8008be4:	305c      	adds	r0, #92	@ 0x5c
 8008be6:	f000 f928 	bl	8008e3a <memset>
 8008bea:	4b0d      	ldr	r3, [pc, #52]	@ (8008c20 <std+0x58>)
 8008bec:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bee:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <std+0x5c>)
 8008bf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c28 <std+0x60>)
 8008bf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8008c2c <std+0x64>)
 8008bf8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8008c30 <std+0x68>)
 8008bfc:	6224      	str	r4, [r4, #32]
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d006      	beq.n	8008c10 <std+0x48>
 8008c02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c06:	4294      	cmp	r4, r2
 8008c08:	d002      	beq.n	8008c10 <std+0x48>
 8008c0a:	33d0      	adds	r3, #208	@ 0xd0
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	d105      	bne.n	8008c1c <std+0x54>
 8008c10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c18:	f000 b99e 	b.w	8008f58 <__retarget_lock_init_recursive>
 8008c1c:	bd10      	pop	{r4, pc}
 8008c1e:	bf00      	nop
 8008c20:	08008db5 	.word	0x08008db5
 8008c24:	08008dd7 	.word	0x08008dd7
 8008c28:	08008e0f 	.word	0x08008e0f
 8008c2c:	08008e33 	.word	0x08008e33
 8008c30:	20000f94 	.word	0x20000f94

08008c34 <stdio_exit_handler>:
 8008c34:	4a02      	ldr	r2, [pc, #8]	@ (8008c40 <stdio_exit_handler+0xc>)
 8008c36:	4903      	ldr	r1, [pc, #12]	@ (8008c44 <stdio_exit_handler+0x10>)
 8008c38:	4803      	ldr	r0, [pc, #12]	@ (8008c48 <stdio_exit_handler+0x14>)
 8008c3a:	f000 b869 	b.w	8008d10 <_fwalk_sglue>
 8008c3e:	bf00      	nop
 8008c40:	200000b8 	.word	0x200000b8
 8008c44:	0800b1f5 	.word	0x0800b1f5
 8008c48:	20000234 	.word	0x20000234

08008c4c <cleanup_stdio>:
 8008c4c:	6841      	ldr	r1, [r0, #4]
 8008c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c80 <cleanup_stdio+0x34>)
 8008c50:	4299      	cmp	r1, r3
 8008c52:	b510      	push	{r4, lr}
 8008c54:	4604      	mov	r4, r0
 8008c56:	d001      	beq.n	8008c5c <cleanup_stdio+0x10>
 8008c58:	f002 facc 	bl	800b1f4 <_fflush_r>
 8008c5c:	68a1      	ldr	r1, [r4, #8]
 8008c5e:	4b09      	ldr	r3, [pc, #36]	@ (8008c84 <cleanup_stdio+0x38>)
 8008c60:	4299      	cmp	r1, r3
 8008c62:	d002      	beq.n	8008c6a <cleanup_stdio+0x1e>
 8008c64:	4620      	mov	r0, r4
 8008c66:	f002 fac5 	bl	800b1f4 <_fflush_r>
 8008c6a:	68e1      	ldr	r1, [r4, #12]
 8008c6c:	4b06      	ldr	r3, [pc, #24]	@ (8008c88 <cleanup_stdio+0x3c>)
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	d004      	beq.n	8008c7c <cleanup_stdio+0x30>
 8008c72:	4620      	mov	r0, r4
 8008c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c78:	f002 babc 	b.w	800b1f4 <_fflush_r>
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000f94 	.word	0x20000f94
 8008c84:	20000ffc 	.word	0x20000ffc
 8008c88:	20001064 	.word	0x20001064

08008c8c <global_stdio_init.part.0>:
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8008cbc <global_stdio_init.part.0+0x30>)
 8008c90:	4c0b      	ldr	r4, [pc, #44]	@ (8008cc0 <global_stdio_init.part.0+0x34>)
 8008c92:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc4 <global_stdio_init.part.0+0x38>)
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	4620      	mov	r0, r4
 8008c98:	2200      	movs	r2, #0
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	f7ff ff94 	bl	8008bc8 <std>
 8008ca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	2109      	movs	r1, #9
 8008ca8:	f7ff ff8e 	bl	8008bc8 <std>
 8008cac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb6:	2112      	movs	r1, #18
 8008cb8:	f7ff bf86 	b.w	8008bc8 <std>
 8008cbc:	200010cc 	.word	0x200010cc
 8008cc0:	20000f94 	.word	0x20000f94
 8008cc4:	08008c35 	.word	0x08008c35

08008cc8 <__sfp_lock_acquire>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	@ (8008cd0 <__sfp_lock_acquire+0x8>)
 8008cca:	f000 b946 	b.w	8008f5a <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	200010d5 	.word	0x200010d5

08008cd4 <__sfp_lock_release>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	@ (8008cdc <__sfp_lock_release+0x8>)
 8008cd6:	f000 b941 	b.w	8008f5c <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	200010d5 	.word	0x200010d5

08008ce0 <__sinit>:
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	f7ff fff0 	bl	8008cc8 <__sfp_lock_acquire>
 8008ce8:	6a23      	ldr	r3, [r4, #32]
 8008cea:	b11b      	cbz	r3, 8008cf4 <__sinit+0x14>
 8008cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf0:	f7ff bff0 	b.w	8008cd4 <__sfp_lock_release>
 8008cf4:	4b04      	ldr	r3, [pc, #16]	@ (8008d08 <__sinit+0x28>)
 8008cf6:	6223      	str	r3, [r4, #32]
 8008cf8:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <__sinit+0x2c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1f5      	bne.n	8008cec <__sinit+0xc>
 8008d00:	f7ff ffc4 	bl	8008c8c <global_stdio_init.part.0>
 8008d04:	e7f2      	b.n	8008cec <__sinit+0xc>
 8008d06:	bf00      	nop
 8008d08:	08008c4d 	.word	0x08008c4d
 8008d0c:	200010cc 	.word	0x200010cc

08008d10 <_fwalk_sglue>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	4607      	mov	r7, r0
 8008d16:	4688      	mov	r8, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	2600      	movs	r6, #0
 8008d1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d20:	f1b9 0901 	subs.w	r9, r9, #1
 8008d24:	d505      	bpl.n	8008d32 <_fwalk_sglue+0x22>
 8008d26:	6824      	ldr	r4, [r4, #0]
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	d1f7      	bne.n	8008d1c <_fwalk_sglue+0xc>
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d907      	bls.n	8008d48 <_fwalk_sglue+0x38>
 8008d38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	d003      	beq.n	8008d48 <_fwalk_sglue+0x38>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4638      	mov	r0, r7
 8008d44:	47c0      	blx	r8
 8008d46:	4306      	orrs	r6, r0
 8008d48:	3568      	adds	r5, #104	@ 0x68
 8008d4a:	e7e9      	b.n	8008d20 <_fwalk_sglue+0x10>

08008d4c <sniprintf>:
 8008d4c:	b40c      	push	{r2, r3}
 8008d4e:	b530      	push	{r4, r5, lr}
 8008d50:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <sniprintf+0x64>)
 8008d52:	1e0c      	subs	r4, r1, #0
 8008d54:	681d      	ldr	r5, [r3, #0]
 8008d56:	b09d      	sub	sp, #116	@ 0x74
 8008d58:	da08      	bge.n	8008d6c <sniprintf+0x20>
 8008d5a:	238b      	movs	r3, #139	@ 0x8b
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d62:	b01d      	add	sp, #116	@ 0x74
 8008d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d68:	b002      	add	sp, #8
 8008d6a:	4770      	bx	lr
 8008d6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d74:	bf14      	ite	ne
 8008d76:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d7a:	4623      	moveq	r3, r4
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	9307      	str	r3, [sp, #28]
 8008d80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d84:	9002      	str	r0, [sp, #8]
 8008d86:	9006      	str	r0, [sp, #24]
 8008d88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d8e:	ab21      	add	r3, sp, #132	@ 0x84
 8008d90:	a902      	add	r1, sp, #8
 8008d92:	4628      	mov	r0, r5
 8008d94:	9301      	str	r3, [sp, #4]
 8008d96:	f002 f8ad 	bl	800aef4 <_svfiprintf_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	bfbc      	itt	lt
 8008d9e:	238b      	movlt	r3, #139	@ 0x8b
 8008da0:	602b      	strlt	r3, [r5, #0]
 8008da2:	2c00      	cmp	r4, #0
 8008da4:	d0dd      	beq.n	8008d62 <sniprintf+0x16>
 8008da6:	9b02      	ldr	r3, [sp, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e7d9      	b.n	8008d62 <sniprintf+0x16>
 8008dae:	bf00      	nop
 8008db0:	20000230 	.word	0x20000230

08008db4 <__sread>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	460c      	mov	r4, r1
 8008db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dbc:	f000 f87e 	bl	8008ebc <_read_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	bfab      	itete	ge
 8008dc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008dc8:	181b      	addge	r3, r3, r0
 8008dca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dce:	bfac      	ite	ge
 8008dd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dd2:	81a3      	strhlt	r3, [r4, #12]
 8008dd4:	bd10      	pop	{r4, pc}

08008dd6 <__swrite>:
 8008dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dda:	461f      	mov	r7, r3
 8008ddc:	898b      	ldrh	r3, [r1, #12]
 8008dde:	05db      	lsls	r3, r3, #23
 8008de0:	4605      	mov	r5, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	4616      	mov	r6, r2
 8008de6:	d505      	bpl.n	8008df4 <__swrite+0x1e>
 8008de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dec:	2302      	movs	r3, #2
 8008dee:	2200      	movs	r2, #0
 8008df0:	f000 f852 	bl	8008e98 <_lseek_r>
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dfe:	81a3      	strh	r3, [r4, #12]
 8008e00:	4632      	mov	r2, r6
 8008e02:	463b      	mov	r3, r7
 8008e04:	4628      	mov	r0, r5
 8008e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0a:	f000 b869 	b.w	8008ee0 <_write_r>

08008e0e <__sseek>:
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	460c      	mov	r4, r1
 8008e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e16:	f000 f83f 	bl	8008e98 <_lseek_r>
 8008e1a:	1c43      	adds	r3, r0, #1
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	bf15      	itete	ne
 8008e20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e2a:	81a3      	strheq	r3, [r4, #12]
 8008e2c:	bf18      	it	ne
 8008e2e:	81a3      	strhne	r3, [r4, #12]
 8008e30:	bd10      	pop	{r4, pc}

08008e32 <__sclose>:
 8008e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e36:	f000 b81f 	b.w	8008e78 <_close_r>

08008e3a <memset>:
 8008e3a:	4402      	add	r2, r0
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d100      	bne.n	8008e44 <memset+0xa>
 8008e42:	4770      	bx	lr
 8008e44:	f803 1b01 	strb.w	r1, [r3], #1
 8008e48:	e7f9      	b.n	8008e3e <memset+0x4>

08008e4a <strncmp>:
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	b16a      	cbz	r2, 8008e6a <strncmp+0x20>
 8008e4e:	3901      	subs	r1, #1
 8008e50:	1884      	adds	r4, r0, r2
 8008e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d103      	bne.n	8008e66 <strncmp+0x1c>
 8008e5e:	42a0      	cmp	r0, r4
 8008e60:	d001      	beq.n	8008e66 <strncmp+0x1c>
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d1f5      	bne.n	8008e52 <strncmp+0x8>
 8008e66:	1ad0      	subs	r0, r2, r3
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	e7fc      	b.n	8008e68 <strncmp+0x1e>
	...

08008e70 <_localeconv_r>:
 8008e70:	4800      	ldr	r0, [pc, #0]	@ (8008e74 <_localeconv_r+0x4>)
 8008e72:	4770      	bx	lr
 8008e74:	200001b4 	.word	0x200001b4

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	@ (8008e94 <_close_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f9 fe03 	bl	8002a8e <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	200010d0 	.word	0x200010d0

08008e98 <_lseek_r>:
 8008e98:	b538      	push	{r3, r4, r5, lr}
 8008e9a:	4d07      	ldr	r5, [pc, #28]	@ (8008eb8 <_lseek_r+0x20>)
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	602a      	str	r2, [r5, #0]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	f7f9 fe18 	bl	8002adc <_lseek>
 8008eac:	1c43      	adds	r3, r0, #1
 8008eae:	d102      	bne.n	8008eb6 <_lseek_r+0x1e>
 8008eb0:	682b      	ldr	r3, [r5, #0]
 8008eb2:	b103      	cbz	r3, 8008eb6 <_lseek_r+0x1e>
 8008eb4:	6023      	str	r3, [r4, #0]
 8008eb6:	bd38      	pop	{r3, r4, r5, pc}
 8008eb8:	200010d0 	.word	0x200010d0

08008ebc <_read_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d07      	ldr	r5, [pc, #28]	@ (8008edc <_read_r+0x20>)
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	602a      	str	r2, [r5, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f7f9 fda6 	bl	8002a1c <_read>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_read_r+0x1e>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_read_r+0x1e>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200010d0 	.word	0x200010d0

08008ee0 <_write_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d07      	ldr	r5, [pc, #28]	@ (8008f00 <_write_r+0x20>)
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	602a      	str	r2, [r5, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f7f9 fdb1 	bl	8002a56 <_write>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_write_r+0x1e>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_write_r+0x1e>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	200010d0 	.word	0x200010d0

08008f04 <__errno>:
 8008f04:	4b01      	ldr	r3, [pc, #4]	@ (8008f0c <__errno+0x8>)
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	20000230 	.word	0x20000230

08008f10 <__libc_init_array>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4d0d      	ldr	r5, [pc, #52]	@ (8008f48 <__libc_init_array+0x38>)
 8008f14:	4c0d      	ldr	r4, [pc, #52]	@ (8008f4c <__libc_init_array+0x3c>)
 8008f16:	1b64      	subs	r4, r4, r5
 8008f18:	10a4      	asrs	r4, r4, #2
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	d109      	bne.n	8008f34 <__libc_init_array+0x24>
 8008f20:	4d0b      	ldr	r5, [pc, #44]	@ (8008f50 <__libc_init_array+0x40>)
 8008f22:	4c0c      	ldr	r4, [pc, #48]	@ (8008f54 <__libc_init_array+0x44>)
 8008f24:	f003 f8a0 	bl	800c068 <_init>
 8008f28:	1b64      	subs	r4, r4, r5
 8008f2a:	10a4      	asrs	r4, r4, #2
 8008f2c:	2600      	movs	r6, #0
 8008f2e:	42a6      	cmp	r6, r4
 8008f30:	d105      	bne.n	8008f3e <__libc_init_array+0x2e>
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f38:	4798      	blx	r3
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	e7ee      	b.n	8008f1c <__libc_init_array+0xc>
 8008f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f42:	4798      	blx	r3
 8008f44:	3601      	adds	r6, #1
 8008f46:	e7f2      	b.n	8008f2e <__libc_init_array+0x1e>
 8008f48:	0800c678 	.word	0x0800c678
 8008f4c:	0800c678 	.word	0x0800c678
 8008f50:	0800c678 	.word	0x0800c678
 8008f54:	0800c67c 	.word	0x0800c67c

08008f58 <__retarget_lock_init_recursive>:
 8008f58:	4770      	bx	lr

08008f5a <__retarget_lock_acquire_recursive>:
 8008f5a:	4770      	bx	lr

08008f5c <__retarget_lock_release_recursive>:
 8008f5c:	4770      	bx	lr

08008f5e <memcpy>:
 8008f5e:	440a      	add	r2, r1
 8008f60:	4291      	cmp	r1, r2
 8008f62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f66:	d100      	bne.n	8008f6a <memcpy+0xc>
 8008f68:	4770      	bx	lr
 8008f6a:	b510      	push	{r4, lr}
 8008f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f74:	4291      	cmp	r1, r2
 8008f76:	d1f9      	bne.n	8008f6c <memcpy+0xe>
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	0000      	movs	r0, r0
 8008f7c:	0000      	movs	r0, r0
	...

08008f80 <nan>:
 8008f80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f88 <nan+0x8>
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	00000000 	.word	0x00000000
 8008f8c:	7ff80000 	.word	0x7ff80000

08008f90 <quorem>:
 8008f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	6903      	ldr	r3, [r0, #16]
 8008f96:	690c      	ldr	r4, [r1, #16]
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	db7e      	blt.n	800909c <quorem+0x10c>
 8008f9e:	3c01      	subs	r4, #1
 8008fa0:	f101 0814 	add.w	r8, r1, #20
 8008fa4:	00a3      	lsls	r3, r4, #2
 8008fa6:	f100 0514 	add.w	r5, r0, #20
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fc2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fc6:	d32e      	bcc.n	8009026 <quorem+0x96>
 8008fc8:	f04f 0a00 	mov.w	sl, #0
 8008fcc:	46c4      	mov	ip, r8
 8008fce:	46ae      	mov	lr, r5
 8008fd0:	46d3      	mov	fp, sl
 8008fd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008fd6:	b298      	uxth	r0, r3
 8008fd8:	fb06 a000 	mla	r0, r6, r0, sl
 8008fdc:	0c02      	lsrs	r2, r0, #16
 8008fde:	0c1b      	lsrs	r3, r3, #16
 8008fe0:	fb06 2303 	mla	r3, r6, r3, r2
 8008fe4:	f8de 2000 	ldr.w	r2, [lr]
 8008fe8:	b280      	uxth	r0, r0
 8008fea:	b292      	uxth	r2, r2
 8008fec:	1a12      	subs	r2, r2, r0
 8008fee:	445a      	add	r2, fp
 8008ff0:	f8de 0000 	ldr.w	r0, [lr]
 8008ff4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ffe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009002:	b292      	uxth	r2, r2
 8009004:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009008:	45e1      	cmp	r9, ip
 800900a:	f84e 2b04 	str.w	r2, [lr], #4
 800900e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009012:	d2de      	bcs.n	8008fd2 <quorem+0x42>
 8009014:	9b00      	ldr	r3, [sp, #0]
 8009016:	58eb      	ldr	r3, [r5, r3]
 8009018:	b92b      	cbnz	r3, 8009026 <quorem+0x96>
 800901a:	9b01      	ldr	r3, [sp, #4]
 800901c:	3b04      	subs	r3, #4
 800901e:	429d      	cmp	r5, r3
 8009020:	461a      	mov	r2, r3
 8009022:	d32f      	bcc.n	8009084 <quorem+0xf4>
 8009024:	613c      	str	r4, [r7, #16]
 8009026:	4638      	mov	r0, r7
 8009028:	f001 fd0e 	bl	800aa48 <__mcmp>
 800902c:	2800      	cmp	r0, #0
 800902e:	db25      	blt.n	800907c <quorem+0xec>
 8009030:	4629      	mov	r1, r5
 8009032:	2000      	movs	r0, #0
 8009034:	f858 2b04 	ldr.w	r2, [r8], #4
 8009038:	f8d1 c000 	ldr.w	ip, [r1]
 800903c:	fa1f fe82 	uxth.w	lr, r2
 8009040:	fa1f f38c 	uxth.w	r3, ip
 8009044:	eba3 030e 	sub.w	r3, r3, lr
 8009048:	4403      	add	r3, r0
 800904a:	0c12      	lsrs	r2, r2, #16
 800904c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009050:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009054:	b29b      	uxth	r3, r3
 8009056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800905a:	45c1      	cmp	r9, r8
 800905c:	f841 3b04 	str.w	r3, [r1], #4
 8009060:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009064:	d2e6      	bcs.n	8009034 <quorem+0xa4>
 8009066:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800906a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800906e:	b922      	cbnz	r2, 800907a <quorem+0xea>
 8009070:	3b04      	subs	r3, #4
 8009072:	429d      	cmp	r5, r3
 8009074:	461a      	mov	r2, r3
 8009076:	d30b      	bcc.n	8009090 <quorem+0x100>
 8009078:	613c      	str	r4, [r7, #16]
 800907a:	3601      	adds	r6, #1
 800907c:	4630      	mov	r0, r6
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	3b04      	subs	r3, #4
 8009088:	2a00      	cmp	r2, #0
 800908a:	d1cb      	bne.n	8009024 <quorem+0x94>
 800908c:	3c01      	subs	r4, #1
 800908e:	e7c6      	b.n	800901e <quorem+0x8e>
 8009090:	6812      	ldr	r2, [r2, #0]
 8009092:	3b04      	subs	r3, #4
 8009094:	2a00      	cmp	r2, #0
 8009096:	d1ef      	bne.n	8009078 <quorem+0xe8>
 8009098:	3c01      	subs	r4, #1
 800909a:	e7ea      	b.n	8009072 <quorem+0xe2>
 800909c:	2000      	movs	r0, #0
 800909e:	e7ee      	b.n	800907e <quorem+0xee>

080090a0 <_dtoa_r>:
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	69c7      	ldr	r7, [r0, #28]
 80090a6:	b099      	sub	sp, #100	@ 0x64
 80090a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090ac:	ec55 4b10 	vmov	r4, r5, d0
 80090b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80090b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80090b4:	4683      	mov	fp, r0
 80090b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80090b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090ba:	b97f      	cbnz	r7, 80090dc <_dtoa_r+0x3c>
 80090bc:	2010      	movs	r0, #16
 80090be:	f001 f937 	bl	800a330 <malloc>
 80090c2:	4602      	mov	r2, r0
 80090c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80090c8:	b920      	cbnz	r0, 80090d4 <_dtoa_r+0x34>
 80090ca:	4ba7      	ldr	r3, [pc, #668]	@ (8009368 <_dtoa_r+0x2c8>)
 80090cc:	21ef      	movs	r1, #239	@ 0xef
 80090ce:	48a7      	ldr	r0, [pc, #668]	@ (800936c <_dtoa_r+0x2cc>)
 80090d0:	f002 f8e2 	bl	800b298 <__assert_func>
 80090d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80090d8:	6007      	str	r7, [r0, #0]
 80090da:	60c7      	str	r7, [r0, #12]
 80090dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090e0:	6819      	ldr	r1, [r3, #0]
 80090e2:	b159      	cbz	r1, 80090fc <_dtoa_r+0x5c>
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	604a      	str	r2, [r1, #4]
 80090e8:	2301      	movs	r3, #1
 80090ea:	4093      	lsls	r3, r2
 80090ec:	608b      	str	r3, [r1, #8]
 80090ee:	4658      	mov	r0, fp
 80090f0:	f001 fa26 	bl	800a540 <_Bfree>
 80090f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	1e2b      	subs	r3, r5, #0
 80090fe:	bfb9      	ittee	lt
 8009100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009104:	9303      	strlt	r3, [sp, #12]
 8009106:	2300      	movge	r3, #0
 8009108:	6033      	strge	r3, [r6, #0]
 800910a:	9f03      	ldr	r7, [sp, #12]
 800910c:	4b98      	ldr	r3, [pc, #608]	@ (8009370 <_dtoa_r+0x2d0>)
 800910e:	bfbc      	itt	lt
 8009110:	2201      	movlt	r2, #1
 8009112:	6032      	strlt	r2, [r6, #0]
 8009114:	43bb      	bics	r3, r7
 8009116:	d112      	bne.n	800913e <_dtoa_r+0x9e>
 8009118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800911a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009124:	4323      	orrs	r3, r4
 8009126:	f000 854d 	beq.w	8009bc4 <_dtoa_r+0xb24>
 800912a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800912c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009384 <_dtoa_r+0x2e4>
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 854f 	beq.w	8009bd4 <_dtoa_r+0xb34>
 8009136:	f10a 0303 	add.w	r3, sl, #3
 800913a:	f000 bd49 	b.w	8009bd0 <_dtoa_r+0xb30>
 800913e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	ec51 0b17 	vmov	r0, r1, d7
 8009148:	2300      	movs	r3, #0
 800914a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800914e:	f7f7 fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8009152:	4680      	mov	r8, r0
 8009154:	b158      	cbz	r0, 800916e <_dtoa_r+0xce>
 8009156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009158:	2301      	movs	r3, #1
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800915e:	b113      	cbz	r3, 8009166 <_dtoa_r+0xc6>
 8009160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009162:	4b84      	ldr	r3, [pc, #528]	@ (8009374 <_dtoa_r+0x2d4>)
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009388 <_dtoa_r+0x2e8>
 800916a:	f000 bd33 	b.w	8009bd4 <_dtoa_r+0xb34>
 800916e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009172:	aa16      	add	r2, sp, #88	@ 0x58
 8009174:	a917      	add	r1, sp, #92	@ 0x5c
 8009176:	4658      	mov	r0, fp
 8009178:	f001 fd86 	bl	800ac88 <__d2b>
 800917c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009180:	4681      	mov	r9, r0
 8009182:	2e00      	cmp	r6, #0
 8009184:	d077      	beq.n	8009276 <_dtoa_r+0x1d6>
 8009186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800918c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800919c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80091a0:	4619      	mov	r1, r3
 80091a2:	2200      	movs	r2, #0
 80091a4:	4b74      	ldr	r3, [pc, #464]	@ (8009378 <_dtoa_r+0x2d8>)
 80091a6:	f7f7 f88f 	bl	80002c8 <__aeabi_dsub>
 80091aa:	a369      	add	r3, pc, #420	@ (adr r3, 8009350 <_dtoa_r+0x2b0>)
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f7f7 fa42 	bl	8000638 <__aeabi_dmul>
 80091b4:	a368      	add	r3, pc, #416	@ (adr r3, 8009358 <_dtoa_r+0x2b8>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f887 	bl	80002cc <__adddf3>
 80091be:	4604      	mov	r4, r0
 80091c0:	4630      	mov	r0, r6
 80091c2:	460d      	mov	r5, r1
 80091c4:	f7f7 f9ce 	bl	8000564 <__aeabi_i2d>
 80091c8:	a365      	add	r3, pc, #404	@ (adr r3, 8009360 <_dtoa_r+0x2c0>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fa33 	bl	8000638 <__aeabi_dmul>
 80091d2:	4602      	mov	r2, r0
 80091d4:	460b      	mov	r3, r1
 80091d6:	4620      	mov	r0, r4
 80091d8:	4629      	mov	r1, r5
 80091da:	f7f7 f877 	bl	80002cc <__adddf3>
 80091de:	4604      	mov	r4, r0
 80091e0:	460d      	mov	r5, r1
 80091e2:	f7f7 fcd9 	bl	8000b98 <__aeabi_d2iz>
 80091e6:	2200      	movs	r2, #0
 80091e8:	4607      	mov	r7, r0
 80091ea:	2300      	movs	r3, #0
 80091ec:	4620      	mov	r0, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	f7f7 fc94 	bl	8000b1c <__aeabi_dcmplt>
 80091f4:	b140      	cbz	r0, 8009208 <_dtoa_r+0x168>
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7f7 f9b4 	bl	8000564 <__aeabi_i2d>
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	f7f7 fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8009204:	b900      	cbnz	r0, 8009208 <_dtoa_r+0x168>
 8009206:	3f01      	subs	r7, #1
 8009208:	2f16      	cmp	r7, #22
 800920a:	d851      	bhi.n	80092b0 <_dtoa_r+0x210>
 800920c:	4b5b      	ldr	r3, [pc, #364]	@ (800937c <_dtoa_r+0x2dc>)
 800920e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800921a:	f7f7 fc7f 	bl	8000b1c <__aeabi_dcmplt>
 800921e:	2800      	cmp	r0, #0
 8009220:	d048      	beq.n	80092b4 <_dtoa_r+0x214>
 8009222:	3f01      	subs	r7, #1
 8009224:	2300      	movs	r3, #0
 8009226:	9312      	str	r3, [sp, #72]	@ 0x48
 8009228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800922a:	1b9b      	subs	r3, r3, r6
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	bf44      	itt	mi
 8009230:	f1c3 0801 	rsbmi	r8, r3, #1
 8009234:	2300      	movmi	r3, #0
 8009236:	9208      	str	r2, [sp, #32]
 8009238:	bf54      	ite	pl
 800923a:	f04f 0800 	movpl.w	r8, #0
 800923e:	9308      	strmi	r3, [sp, #32]
 8009240:	2f00      	cmp	r7, #0
 8009242:	db39      	blt.n	80092b8 <_dtoa_r+0x218>
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009248:	443b      	add	r3, r7
 800924a:	9308      	str	r3, [sp, #32]
 800924c:	2300      	movs	r3, #0
 800924e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009252:	2b09      	cmp	r3, #9
 8009254:	d864      	bhi.n	8009320 <_dtoa_r+0x280>
 8009256:	2b05      	cmp	r3, #5
 8009258:	bfc4      	itt	gt
 800925a:	3b04      	subgt	r3, #4
 800925c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800925e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009260:	f1a3 0302 	sub.w	r3, r3, #2
 8009264:	bfcc      	ite	gt
 8009266:	2400      	movgt	r4, #0
 8009268:	2401      	movle	r4, #1
 800926a:	2b03      	cmp	r3, #3
 800926c:	d863      	bhi.n	8009336 <_dtoa_r+0x296>
 800926e:	e8df f003 	tbb	[pc, r3]
 8009272:	372a      	.short	0x372a
 8009274:	5535      	.short	0x5535
 8009276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800927a:	441e      	add	r6, r3
 800927c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009280:	2b20      	cmp	r3, #32
 8009282:	bfc1      	itttt	gt
 8009284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009288:	409f      	lslgt	r7, r3
 800928a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800928e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009292:	bfd6      	itet	le
 8009294:	f1c3 0320 	rsble	r3, r3, #32
 8009298:	ea47 0003 	orrgt.w	r0, r7, r3
 800929c:	fa04 f003 	lslle.w	r0, r4, r3
 80092a0:	f7f7 f950 	bl	8000544 <__aeabi_ui2d>
 80092a4:	2201      	movs	r2, #1
 80092a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80092aa:	3e01      	subs	r6, #1
 80092ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80092ae:	e777      	b.n	80091a0 <_dtoa_r+0x100>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7b8      	b.n	8009226 <_dtoa_r+0x186>
 80092b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80092b6:	e7b7      	b.n	8009228 <_dtoa_r+0x188>
 80092b8:	427b      	negs	r3, r7
 80092ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80092bc:	2300      	movs	r3, #0
 80092be:	eba8 0807 	sub.w	r8, r8, r7
 80092c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092c4:	e7c4      	b.n	8009250 <_dtoa_r+0x1b0>
 80092c6:	2300      	movs	r3, #0
 80092c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dc35      	bgt.n	800933c <_dtoa_r+0x29c>
 80092d0:	2301      	movs	r3, #1
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	9307      	str	r3, [sp, #28]
 80092d6:	461a      	mov	r2, r3
 80092d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80092da:	e00b      	b.n	80092f4 <_dtoa_r+0x254>
 80092dc:	2301      	movs	r3, #1
 80092de:	e7f3      	b.n	80092c8 <_dtoa_r+0x228>
 80092e0:	2300      	movs	r3, #0
 80092e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	9307      	str	r3, [sp, #28]
 80092f0:	bfb8      	it	lt
 80092f2:	2301      	movlt	r3, #1
 80092f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80092f8:	2100      	movs	r1, #0
 80092fa:	2204      	movs	r2, #4
 80092fc:	f102 0514 	add.w	r5, r2, #20
 8009300:	429d      	cmp	r5, r3
 8009302:	d91f      	bls.n	8009344 <_dtoa_r+0x2a4>
 8009304:	6041      	str	r1, [r0, #4]
 8009306:	4658      	mov	r0, fp
 8009308:	f001 f8da 	bl	800a4c0 <_Balloc>
 800930c:	4682      	mov	sl, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d13c      	bne.n	800938c <_dtoa_r+0x2ec>
 8009312:	4b1b      	ldr	r3, [pc, #108]	@ (8009380 <_dtoa_r+0x2e0>)
 8009314:	4602      	mov	r2, r0
 8009316:	f240 11af 	movw	r1, #431	@ 0x1af
 800931a:	e6d8      	b.n	80090ce <_dtoa_r+0x2e>
 800931c:	2301      	movs	r3, #1
 800931e:	e7e0      	b.n	80092e2 <_dtoa_r+0x242>
 8009320:	2401      	movs	r4, #1
 8009322:	2300      	movs	r3, #0
 8009324:	9309      	str	r3, [sp, #36]	@ 0x24
 8009326:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009328:	f04f 33ff 	mov.w	r3, #4294967295
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	9307      	str	r3, [sp, #28]
 8009330:	2200      	movs	r2, #0
 8009332:	2312      	movs	r3, #18
 8009334:	e7d0      	b.n	80092d8 <_dtoa_r+0x238>
 8009336:	2301      	movs	r3, #1
 8009338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800933a:	e7f5      	b.n	8009328 <_dtoa_r+0x288>
 800933c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	9307      	str	r3, [sp, #28]
 8009342:	e7d7      	b.n	80092f4 <_dtoa_r+0x254>
 8009344:	3101      	adds	r1, #1
 8009346:	0052      	lsls	r2, r2, #1
 8009348:	e7d8      	b.n	80092fc <_dtoa_r+0x25c>
 800934a:	bf00      	nop
 800934c:	f3af 8000 	nop.w
 8009350:	636f4361 	.word	0x636f4361
 8009354:	3fd287a7 	.word	0x3fd287a7
 8009358:	8b60c8b3 	.word	0x8b60c8b3
 800935c:	3fc68a28 	.word	0x3fc68a28
 8009360:	509f79fb 	.word	0x509f79fb
 8009364:	3fd34413 	.word	0x3fd34413
 8009368:	0800c3d2 	.word	0x0800c3d2
 800936c:	0800c3e9 	.word	0x0800c3e9
 8009370:	7ff00000 	.word	0x7ff00000
 8009374:	0800c39a 	.word	0x0800c39a
 8009378:	3ff80000 	.word	0x3ff80000
 800937c:	0800c540 	.word	0x0800c540
 8009380:	0800c441 	.word	0x0800c441
 8009384:	0800c3ce 	.word	0x0800c3ce
 8009388:	0800c399 	.word	0x0800c399
 800938c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009390:	6018      	str	r0, [r3, #0]
 8009392:	9b07      	ldr	r3, [sp, #28]
 8009394:	2b0e      	cmp	r3, #14
 8009396:	f200 80a4 	bhi.w	80094e2 <_dtoa_r+0x442>
 800939a:	2c00      	cmp	r4, #0
 800939c:	f000 80a1 	beq.w	80094e2 <_dtoa_r+0x442>
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	dd33      	ble.n	800940c <_dtoa_r+0x36c>
 80093a4:	4bad      	ldr	r3, [pc, #692]	@ (800965c <_dtoa_r+0x5bc>)
 80093a6:	f007 020f 	and.w	r2, r7, #15
 80093aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ae:	ed93 7b00 	vldr	d7, [r3]
 80093b2:	05f8      	lsls	r0, r7, #23
 80093b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80093b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80093bc:	d516      	bpl.n	80093ec <_dtoa_r+0x34c>
 80093be:	4ba8      	ldr	r3, [pc, #672]	@ (8009660 <_dtoa_r+0x5c0>)
 80093c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093c8:	f7f7 fa60 	bl	800088c <__aeabi_ddiv>
 80093cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093d0:	f004 040f 	and.w	r4, r4, #15
 80093d4:	2603      	movs	r6, #3
 80093d6:	4da2      	ldr	r5, [pc, #648]	@ (8009660 <_dtoa_r+0x5c0>)
 80093d8:	b954      	cbnz	r4, 80093f0 <_dtoa_r+0x350>
 80093da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e2:	f7f7 fa53 	bl	800088c <__aeabi_ddiv>
 80093e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ea:	e028      	b.n	800943e <_dtoa_r+0x39e>
 80093ec:	2602      	movs	r6, #2
 80093ee:	e7f2      	b.n	80093d6 <_dtoa_r+0x336>
 80093f0:	07e1      	lsls	r1, r4, #31
 80093f2:	d508      	bpl.n	8009406 <_dtoa_r+0x366>
 80093f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009404:	3601      	adds	r6, #1
 8009406:	1064      	asrs	r4, r4, #1
 8009408:	3508      	adds	r5, #8
 800940a:	e7e5      	b.n	80093d8 <_dtoa_r+0x338>
 800940c:	f000 80d2 	beq.w	80095b4 <_dtoa_r+0x514>
 8009410:	427c      	negs	r4, r7
 8009412:	4b92      	ldr	r3, [pc, #584]	@ (800965c <_dtoa_r+0x5bc>)
 8009414:	4d92      	ldr	r5, [pc, #584]	@ (8009660 <_dtoa_r+0x5c0>)
 8009416:	f004 020f 	and.w	r2, r4, #15
 800941a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009426:	f7f7 f907 	bl	8000638 <__aeabi_dmul>
 800942a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942e:	1124      	asrs	r4, r4, #4
 8009430:	2300      	movs	r3, #0
 8009432:	2602      	movs	r6, #2
 8009434:	2c00      	cmp	r4, #0
 8009436:	f040 80b2 	bne.w	800959e <_dtoa_r+0x4fe>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1d3      	bne.n	80093e6 <_dtoa_r+0x346>
 800943e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80b7 	beq.w	80095b8 <_dtoa_r+0x518>
 800944a:	4b86      	ldr	r3, [pc, #536]	@ (8009664 <_dtoa_r+0x5c4>)
 800944c:	2200      	movs	r2, #0
 800944e:	4620      	mov	r0, r4
 8009450:	4629      	mov	r1, r5
 8009452:	f7f7 fb63 	bl	8000b1c <__aeabi_dcmplt>
 8009456:	2800      	cmp	r0, #0
 8009458:	f000 80ae 	beq.w	80095b8 <_dtoa_r+0x518>
 800945c:	9b07      	ldr	r3, [sp, #28]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80aa 	beq.w	80095b8 <_dtoa_r+0x518>
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	dd37      	ble.n	80094da <_dtoa_r+0x43a>
 800946a:	1e7b      	subs	r3, r7, #1
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	4620      	mov	r0, r4
 8009470:	4b7d      	ldr	r3, [pc, #500]	@ (8009668 <_dtoa_r+0x5c8>)
 8009472:	2200      	movs	r2, #0
 8009474:	4629      	mov	r1, r5
 8009476:	f7f7 f8df 	bl	8000638 <__aeabi_dmul>
 800947a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800947e:	9c00      	ldr	r4, [sp, #0]
 8009480:	3601      	adds	r6, #1
 8009482:	4630      	mov	r0, r6
 8009484:	f7f7 f86e 	bl	8000564 <__aeabi_i2d>
 8009488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	4b76      	ldr	r3, [pc, #472]	@ (800966c <_dtoa_r+0x5cc>)
 8009492:	2200      	movs	r2, #0
 8009494:	f7f6 ff1a 	bl	80002cc <__adddf3>
 8009498:	4605      	mov	r5, r0
 800949a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800949e:	2c00      	cmp	r4, #0
 80094a0:	f040 808d 	bne.w	80095be <_dtoa_r+0x51e>
 80094a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a8:	4b71      	ldr	r3, [pc, #452]	@ (8009670 <_dtoa_r+0x5d0>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	f7f6 ff0c 	bl	80002c8 <__aeabi_dsub>
 80094b0:	4602      	mov	r2, r0
 80094b2:	460b      	mov	r3, r1
 80094b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4633      	mov	r3, r6
 80094bc:	f7f7 fb4c 	bl	8000b58 <__aeabi_dcmpgt>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 828b 	bne.w	80099dc <_dtoa_r+0x93c>
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	462a      	mov	r2, r5
 80094cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80094d0:	f7f7 fb24 	bl	8000b1c <__aeabi_dcmplt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f040 8128 	bne.w	800972a <_dtoa_r+0x68a>
 80094da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80094de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80094e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f2c0 815a 	blt.w	800979e <_dtoa_r+0x6fe>
 80094ea:	2f0e      	cmp	r7, #14
 80094ec:	f300 8157 	bgt.w	800979e <_dtoa_r+0x6fe>
 80094f0:	4b5a      	ldr	r3, [pc, #360]	@ (800965c <_dtoa_r+0x5bc>)
 80094f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094f6:	ed93 7b00 	vldr	d7, [r3]
 80094fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	ed8d 7b00 	vstr	d7, [sp]
 8009502:	da03      	bge.n	800950c <_dtoa_r+0x46c>
 8009504:	9b07      	ldr	r3, [sp, #28]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f340 8101 	ble.w	800970e <_dtoa_r+0x66e>
 800950c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009510:	4656      	mov	r6, sl
 8009512:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 f9b7 	bl	800088c <__aeabi_ddiv>
 800951e:	f7f7 fb3b 	bl	8000b98 <__aeabi_d2iz>
 8009522:	4680      	mov	r8, r0
 8009524:	f7f7 f81e 	bl	8000564 <__aeabi_i2d>
 8009528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800952c:	f7f7 f884 	bl	8000638 <__aeabi_dmul>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800953c:	f7f6 fec4 	bl	80002c8 <__aeabi_dsub>
 8009540:	f806 4b01 	strb.w	r4, [r6], #1
 8009544:	9d07      	ldr	r5, [sp, #28]
 8009546:	eba6 040a 	sub.w	r4, r6, sl
 800954a:	42a5      	cmp	r5, r4
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	f040 8117 	bne.w	8009782 <_dtoa_r+0x6e2>
 8009554:	f7f6 feba 	bl	80002cc <__adddf3>
 8009558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955c:	4604      	mov	r4, r0
 800955e:	460d      	mov	r5, r1
 8009560:	f7f7 fafa 	bl	8000b58 <__aeabi_dcmpgt>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 80f9 	bne.w	800975c <_dtoa_r+0x6bc>
 800956a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800956e:	4620      	mov	r0, r4
 8009570:	4629      	mov	r1, r5
 8009572:	f7f7 fac9 	bl	8000b08 <__aeabi_dcmpeq>
 8009576:	b118      	cbz	r0, 8009580 <_dtoa_r+0x4e0>
 8009578:	f018 0f01 	tst.w	r8, #1
 800957c:	f040 80ee 	bne.w	800975c <_dtoa_r+0x6bc>
 8009580:	4649      	mov	r1, r9
 8009582:	4658      	mov	r0, fp
 8009584:	f000 ffdc 	bl	800a540 <_Bfree>
 8009588:	2300      	movs	r3, #0
 800958a:	7033      	strb	r3, [r6, #0]
 800958c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800958e:	3701      	adds	r7, #1
 8009590:	601f      	str	r7, [r3, #0]
 8009592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 831d 	beq.w	8009bd4 <_dtoa_r+0xb34>
 800959a:	601e      	str	r6, [r3, #0]
 800959c:	e31a      	b.n	8009bd4 <_dtoa_r+0xb34>
 800959e:	07e2      	lsls	r2, r4, #31
 80095a0:	d505      	bpl.n	80095ae <_dtoa_r+0x50e>
 80095a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095a6:	f7f7 f847 	bl	8000638 <__aeabi_dmul>
 80095aa:	3601      	adds	r6, #1
 80095ac:	2301      	movs	r3, #1
 80095ae:	1064      	asrs	r4, r4, #1
 80095b0:	3508      	adds	r5, #8
 80095b2:	e73f      	b.n	8009434 <_dtoa_r+0x394>
 80095b4:	2602      	movs	r6, #2
 80095b6:	e742      	b.n	800943e <_dtoa_r+0x39e>
 80095b8:	9c07      	ldr	r4, [sp, #28]
 80095ba:	9704      	str	r7, [sp, #16]
 80095bc:	e761      	b.n	8009482 <_dtoa_r+0x3e2>
 80095be:	4b27      	ldr	r3, [pc, #156]	@ (800965c <_dtoa_r+0x5bc>)
 80095c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095ca:	4454      	add	r4, sl
 80095cc:	2900      	cmp	r1, #0
 80095ce:	d053      	beq.n	8009678 <_dtoa_r+0x5d8>
 80095d0:	4928      	ldr	r1, [pc, #160]	@ (8009674 <_dtoa_r+0x5d4>)
 80095d2:	2000      	movs	r0, #0
 80095d4:	f7f7 f95a 	bl	800088c <__aeabi_ddiv>
 80095d8:	4633      	mov	r3, r6
 80095da:	462a      	mov	r2, r5
 80095dc:	f7f6 fe74 	bl	80002c8 <__aeabi_dsub>
 80095e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095e4:	4656      	mov	r6, sl
 80095e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ea:	f7f7 fad5 	bl	8000b98 <__aeabi_d2iz>
 80095ee:	4605      	mov	r5, r0
 80095f0:	f7f6 ffb8 	bl	8000564 <__aeabi_i2d>
 80095f4:	4602      	mov	r2, r0
 80095f6:	460b      	mov	r3, r1
 80095f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fc:	f7f6 fe64 	bl	80002c8 <__aeabi_dsub>
 8009600:	3530      	adds	r5, #48	@ 0x30
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800960a:	f806 5b01 	strb.w	r5, [r6], #1
 800960e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009612:	f7f7 fa83 	bl	8000b1c <__aeabi_dcmplt>
 8009616:	2800      	cmp	r0, #0
 8009618:	d171      	bne.n	80096fe <_dtoa_r+0x65e>
 800961a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800961e:	4911      	ldr	r1, [pc, #68]	@ (8009664 <_dtoa_r+0x5c4>)
 8009620:	2000      	movs	r0, #0
 8009622:	f7f6 fe51 	bl	80002c8 <__aeabi_dsub>
 8009626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800962a:	f7f7 fa77 	bl	8000b1c <__aeabi_dcmplt>
 800962e:	2800      	cmp	r0, #0
 8009630:	f040 8095 	bne.w	800975e <_dtoa_r+0x6be>
 8009634:	42a6      	cmp	r6, r4
 8009636:	f43f af50 	beq.w	80094da <_dtoa_r+0x43a>
 800963a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800963e:	4b0a      	ldr	r3, [pc, #40]	@ (8009668 <_dtoa_r+0x5c8>)
 8009640:	2200      	movs	r2, #0
 8009642:	f7f6 fff9 	bl	8000638 <__aeabi_dmul>
 8009646:	4b08      	ldr	r3, [pc, #32]	@ (8009668 <_dtoa_r+0x5c8>)
 8009648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800964c:	2200      	movs	r2, #0
 800964e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009652:	f7f6 fff1 	bl	8000638 <__aeabi_dmul>
 8009656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800965a:	e7c4      	b.n	80095e6 <_dtoa_r+0x546>
 800965c:	0800c540 	.word	0x0800c540
 8009660:	0800c518 	.word	0x0800c518
 8009664:	3ff00000 	.word	0x3ff00000
 8009668:	40240000 	.word	0x40240000
 800966c:	401c0000 	.word	0x401c0000
 8009670:	40140000 	.word	0x40140000
 8009674:	3fe00000 	.word	0x3fe00000
 8009678:	4631      	mov	r1, r6
 800967a:	4628      	mov	r0, r5
 800967c:	f7f6 ffdc 	bl	8000638 <__aeabi_dmul>
 8009680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009684:	9415      	str	r4, [sp, #84]	@ 0x54
 8009686:	4656      	mov	r6, sl
 8009688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968c:	f7f7 fa84 	bl	8000b98 <__aeabi_d2iz>
 8009690:	4605      	mov	r5, r0
 8009692:	f7f6 ff67 	bl	8000564 <__aeabi_i2d>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800969e:	f7f6 fe13 	bl	80002c8 <__aeabi_dsub>
 80096a2:	3530      	adds	r5, #48	@ 0x30
 80096a4:	f806 5b01 	strb.w	r5, [r6], #1
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096b2:	f04f 0200 	mov.w	r2, #0
 80096b6:	d124      	bne.n	8009702 <_dtoa_r+0x662>
 80096b8:	4bac      	ldr	r3, [pc, #688]	@ (800996c <_dtoa_r+0x8cc>)
 80096ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096be:	f7f6 fe05 	bl	80002cc <__adddf3>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ca:	f7f7 fa45 	bl	8000b58 <__aeabi_dcmpgt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d145      	bne.n	800975e <_dtoa_r+0x6be>
 80096d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096d6:	49a5      	ldr	r1, [pc, #660]	@ (800996c <_dtoa_r+0x8cc>)
 80096d8:	2000      	movs	r0, #0
 80096da:	f7f6 fdf5 	bl	80002c8 <__aeabi_dsub>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096e6:	f7f7 fa19 	bl	8000b1c <__aeabi_dcmplt>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f43f aef5 	beq.w	80094da <_dtoa_r+0x43a>
 80096f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80096f2:	1e73      	subs	r3, r6, #1
 80096f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80096f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096fa:	2b30      	cmp	r3, #48	@ 0x30
 80096fc:	d0f8      	beq.n	80096f0 <_dtoa_r+0x650>
 80096fe:	9f04      	ldr	r7, [sp, #16]
 8009700:	e73e      	b.n	8009580 <_dtoa_r+0x4e0>
 8009702:	4b9b      	ldr	r3, [pc, #620]	@ (8009970 <_dtoa_r+0x8d0>)
 8009704:	f7f6 ff98 	bl	8000638 <__aeabi_dmul>
 8009708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800970c:	e7bc      	b.n	8009688 <_dtoa_r+0x5e8>
 800970e:	d10c      	bne.n	800972a <_dtoa_r+0x68a>
 8009710:	4b98      	ldr	r3, [pc, #608]	@ (8009974 <_dtoa_r+0x8d4>)
 8009712:	2200      	movs	r2, #0
 8009714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009718:	f7f6 ff8e 	bl	8000638 <__aeabi_dmul>
 800971c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009720:	f7f7 fa10 	bl	8000b44 <__aeabi_dcmpge>
 8009724:	2800      	cmp	r0, #0
 8009726:	f000 8157 	beq.w	80099d8 <_dtoa_r+0x938>
 800972a:	2400      	movs	r4, #0
 800972c:	4625      	mov	r5, r4
 800972e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009730:	43db      	mvns	r3, r3
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	4656      	mov	r6, sl
 8009736:	2700      	movs	r7, #0
 8009738:	4621      	mov	r1, r4
 800973a:	4658      	mov	r0, fp
 800973c:	f000 ff00 	bl	800a540 <_Bfree>
 8009740:	2d00      	cmp	r5, #0
 8009742:	d0dc      	beq.n	80096fe <_dtoa_r+0x65e>
 8009744:	b12f      	cbz	r7, 8009752 <_dtoa_r+0x6b2>
 8009746:	42af      	cmp	r7, r5
 8009748:	d003      	beq.n	8009752 <_dtoa_r+0x6b2>
 800974a:	4639      	mov	r1, r7
 800974c:	4658      	mov	r0, fp
 800974e:	f000 fef7 	bl	800a540 <_Bfree>
 8009752:	4629      	mov	r1, r5
 8009754:	4658      	mov	r0, fp
 8009756:	f000 fef3 	bl	800a540 <_Bfree>
 800975a:	e7d0      	b.n	80096fe <_dtoa_r+0x65e>
 800975c:	9704      	str	r7, [sp, #16]
 800975e:	4633      	mov	r3, r6
 8009760:	461e      	mov	r6, r3
 8009762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009766:	2a39      	cmp	r2, #57	@ 0x39
 8009768:	d107      	bne.n	800977a <_dtoa_r+0x6da>
 800976a:	459a      	cmp	sl, r3
 800976c:	d1f8      	bne.n	8009760 <_dtoa_r+0x6c0>
 800976e:	9a04      	ldr	r2, [sp, #16]
 8009770:	3201      	adds	r2, #1
 8009772:	9204      	str	r2, [sp, #16]
 8009774:	2230      	movs	r2, #48	@ 0x30
 8009776:	f88a 2000 	strb.w	r2, [sl]
 800977a:	781a      	ldrb	r2, [r3, #0]
 800977c:	3201      	adds	r2, #1
 800977e:	701a      	strb	r2, [r3, #0]
 8009780:	e7bd      	b.n	80096fe <_dtoa_r+0x65e>
 8009782:	4b7b      	ldr	r3, [pc, #492]	@ (8009970 <_dtoa_r+0x8d0>)
 8009784:	2200      	movs	r2, #0
 8009786:	f7f6 ff57 	bl	8000638 <__aeabi_dmul>
 800978a:	2200      	movs	r2, #0
 800978c:	2300      	movs	r3, #0
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	f7f7 f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 8009796:	2800      	cmp	r0, #0
 8009798:	f43f aebb 	beq.w	8009512 <_dtoa_r+0x472>
 800979c:	e6f0      	b.n	8009580 <_dtoa_r+0x4e0>
 800979e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	f000 80db 	beq.w	800995c <_dtoa_r+0x8bc>
 80097a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097a8:	2a01      	cmp	r2, #1
 80097aa:	f300 80bf 	bgt.w	800992c <_dtoa_r+0x88c>
 80097ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	f000 80b7 	beq.w	8009924 <_dtoa_r+0x884>
 80097b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80097ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80097bc:	4646      	mov	r6, r8
 80097be:	9a08      	ldr	r2, [sp, #32]
 80097c0:	2101      	movs	r1, #1
 80097c2:	441a      	add	r2, r3
 80097c4:	4658      	mov	r0, fp
 80097c6:	4498      	add	r8, r3
 80097c8:	9208      	str	r2, [sp, #32]
 80097ca:	f000 ffb7 	bl	800a73c <__i2b>
 80097ce:	4605      	mov	r5, r0
 80097d0:	b15e      	cbz	r6, 80097ea <_dtoa_r+0x74a>
 80097d2:	9b08      	ldr	r3, [sp, #32]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd08      	ble.n	80097ea <_dtoa_r+0x74a>
 80097d8:	42b3      	cmp	r3, r6
 80097da:	9a08      	ldr	r2, [sp, #32]
 80097dc:	bfa8      	it	ge
 80097de:	4633      	movge	r3, r6
 80097e0:	eba8 0803 	sub.w	r8, r8, r3
 80097e4:	1af6      	subs	r6, r6, r3
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ec:	b1f3      	cbz	r3, 800982c <_dtoa_r+0x78c>
 80097ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 80b7 	beq.w	8009964 <_dtoa_r+0x8c4>
 80097f6:	b18c      	cbz	r4, 800981c <_dtoa_r+0x77c>
 80097f8:	4629      	mov	r1, r5
 80097fa:	4622      	mov	r2, r4
 80097fc:	4658      	mov	r0, fp
 80097fe:	f001 f85d 	bl	800a8bc <__pow5mult>
 8009802:	464a      	mov	r2, r9
 8009804:	4601      	mov	r1, r0
 8009806:	4605      	mov	r5, r0
 8009808:	4658      	mov	r0, fp
 800980a:	f000 ffad 	bl	800a768 <__multiply>
 800980e:	4649      	mov	r1, r9
 8009810:	9004      	str	r0, [sp, #16]
 8009812:	4658      	mov	r0, fp
 8009814:	f000 fe94 	bl	800a540 <_Bfree>
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	4699      	mov	r9, r3
 800981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981e:	1b1a      	subs	r2, r3, r4
 8009820:	d004      	beq.n	800982c <_dtoa_r+0x78c>
 8009822:	4649      	mov	r1, r9
 8009824:	4658      	mov	r0, fp
 8009826:	f001 f849 	bl	800a8bc <__pow5mult>
 800982a:	4681      	mov	r9, r0
 800982c:	2101      	movs	r1, #1
 800982e:	4658      	mov	r0, fp
 8009830:	f000 ff84 	bl	800a73c <__i2b>
 8009834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009836:	4604      	mov	r4, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 81cf 	beq.w	8009bdc <_dtoa_r+0xb3c>
 800983e:	461a      	mov	r2, r3
 8009840:	4601      	mov	r1, r0
 8009842:	4658      	mov	r0, fp
 8009844:	f001 f83a 	bl	800a8bc <__pow5mult>
 8009848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800984a:	2b01      	cmp	r3, #1
 800984c:	4604      	mov	r4, r0
 800984e:	f300 8095 	bgt.w	800997c <_dtoa_r+0x8dc>
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 8087 	bne.w	8009968 <_dtoa_r+0x8c8>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009860:	2b00      	cmp	r3, #0
 8009862:	f040 8089 	bne.w	8009978 <_dtoa_r+0x8d8>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800986c:	0d1b      	lsrs	r3, r3, #20
 800986e:	051b      	lsls	r3, r3, #20
 8009870:	b12b      	cbz	r3, 800987e <_dtoa_r+0x7de>
 8009872:	9b08      	ldr	r3, [sp, #32]
 8009874:	3301      	adds	r3, #1
 8009876:	9308      	str	r3, [sp, #32]
 8009878:	f108 0801 	add.w	r8, r8, #1
 800987c:	2301      	movs	r3, #1
 800987e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 81b0 	beq.w	8009be8 <_dtoa_r+0xb48>
 8009888:	6923      	ldr	r3, [r4, #16]
 800988a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800988e:	6918      	ldr	r0, [r3, #16]
 8009890:	f000 ff08 	bl	800a6a4 <__hi0bits>
 8009894:	f1c0 0020 	rsb	r0, r0, #32
 8009898:	9b08      	ldr	r3, [sp, #32]
 800989a:	4418      	add	r0, r3
 800989c:	f010 001f 	ands.w	r0, r0, #31
 80098a0:	d077      	beq.n	8009992 <_dtoa_r+0x8f2>
 80098a2:	f1c0 0320 	rsb	r3, r0, #32
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	dd6b      	ble.n	8009982 <_dtoa_r+0x8e2>
 80098aa:	9b08      	ldr	r3, [sp, #32]
 80098ac:	f1c0 001c 	rsb	r0, r0, #28
 80098b0:	4403      	add	r3, r0
 80098b2:	4480      	add	r8, r0
 80098b4:	4406      	add	r6, r0
 80098b6:	9308      	str	r3, [sp, #32]
 80098b8:	f1b8 0f00 	cmp.w	r8, #0
 80098bc:	dd05      	ble.n	80098ca <_dtoa_r+0x82a>
 80098be:	4649      	mov	r1, r9
 80098c0:	4642      	mov	r2, r8
 80098c2:	4658      	mov	r0, fp
 80098c4:	f001 f854 	bl	800a970 <__lshift>
 80098c8:	4681      	mov	r9, r0
 80098ca:	9b08      	ldr	r3, [sp, #32]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	dd05      	ble.n	80098dc <_dtoa_r+0x83c>
 80098d0:	4621      	mov	r1, r4
 80098d2:	461a      	mov	r2, r3
 80098d4:	4658      	mov	r0, fp
 80098d6:	f001 f84b 	bl	800a970 <__lshift>
 80098da:	4604      	mov	r4, r0
 80098dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d059      	beq.n	8009996 <_dtoa_r+0x8f6>
 80098e2:	4621      	mov	r1, r4
 80098e4:	4648      	mov	r0, r9
 80098e6:	f001 f8af 	bl	800aa48 <__mcmp>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	da53      	bge.n	8009996 <_dtoa_r+0x8f6>
 80098ee:	1e7b      	subs	r3, r7, #1
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	4649      	mov	r1, r9
 80098f4:	2300      	movs	r3, #0
 80098f6:	220a      	movs	r2, #10
 80098f8:	4658      	mov	r0, fp
 80098fa:	f000 fe43 	bl	800a584 <__multadd>
 80098fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009900:	4681      	mov	r9, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 8172 	beq.w	8009bec <_dtoa_r+0xb4c>
 8009908:	2300      	movs	r3, #0
 800990a:	4629      	mov	r1, r5
 800990c:	220a      	movs	r2, #10
 800990e:	4658      	mov	r0, fp
 8009910:	f000 fe38 	bl	800a584 <__multadd>
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	4605      	mov	r5, r0
 800991a:	dc67      	bgt.n	80099ec <_dtoa_r+0x94c>
 800991c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991e:	2b02      	cmp	r3, #2
 8009920:	dc41      	bgt.n	80099a6 <_dtoa_r+0x906>
 8009922:	e063      	b.n	80099ec <_dtoa_r+0x94c>
 8009924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800992a:	e746      	b.n	80097ba <_dtoa_r+0x71a>
 800992c:	9b07      	ldr	r3, [sp, #28]
 800992e:	1e5c      	subs	r4, r3, #1
 8009930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009932:	42a3      	cmp	r3, r4
 8009934:	bfbf      	itttt	lt
 8009936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800993a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800993c:	1ae3      	sublt	r3, r4, r3
 800993e:	bfb4      	ite	lt
 8009940:	18d2      	addlt	r2, r2, r3
 8009942:	1b1c      	subge	r4, r3, r4
 8009944:	9b07      	ldr	r3, [sp, #28]
 8009946:	bfbc      	itt	lt
 8009948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800994a:	2400      	movlt	r4, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	bfb5      	itete	lt
 8009950:	eba8 0603 	sublt.w	r6, r8, r3
 8009954:	9b07      	ldrge	r3, [sp, #28]
 8009956:	2300      	movlt	r3, #0
 8009958:	4646      	movge	r6, r8
 800995a:	e730      	b.n	80097be <_dtoa_r+0x71e>
 800995c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800995e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009960:	4646      	mov	r6, r8
 8009962:	e735      	b.n	80097d0 <_dtoa_r+0x730>
 8009964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009966:	e75c      	b.n	8009822 <_dtoa_r+0x782>
 8009968:	2300      	movs	r3, #0
 800996a:	e788      	b.n	800987e <_dtoa_r+0x7de>
 800996c:	3fe00000 	.word	0x3fe00000
 8009970:	40240000 	.word	0x40240000
 8009974:	40140000 	.word	0x40140000
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	e780      	b.n	800987e <_dtoa_r+0x7de>
 800997c:	2300      	movs	r3, #0
 800997e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009980:	e782      	b.n	8009888 <_dtoa_r+0x7e8>
 8009982:	d099      	beq.n	80098b8 <_dtoa_r+0x818>
 8009984:	9a08      	ldr	r2, [sp, #32]
 8009986:	331c      	adds	r3, #28
 8009988:	441a      	add	r2, r3
 800998a:	4498      	add	r8, r3
 800998c:	441e      	add	r6, r3
 800998e:	9208      	str	r2, [sp, #32]
 8009990:	e792      	b.n	80098b8 <_dtoa_r+0x818>
 8009992:	4603      	mov	r3, r0
 8009994:	e7f6      	b.n	8009984 <_dtoa_r+0x8e4>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	9704      	str	r7, [sp, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	dc20      	bgt.n	80099e0 <_dtoa_r+0x940>
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	dd1e      	ble.n	80099e4 <_dtoa_r+0x944>
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f47f aec0 	bne.w	800972e <_dtoa_r+0x68e>
 80099ae:	4621      	mov	r1, r4
 80099b0:	2205      	movs	r2, #5
 80099b2:	4658      	mov	r0, fp
 80099b4:	f000 fde6 	bl	800a584 <__multadd>
 80099b8:	4601      	mov	r1, r0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4648      	mov	r0, r9
 80099be:	f001 f843 	bl	800aa48 <__mcmp>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f77f aeb3 	ble.w	800972e <_dtoa_r+0x68e>
 80099c8:	4656      	mov	r6, sl
 80099ca:	2331      	movs	r3, #49	@ 0x31
 80099cc:	f806 3b01 	strb.w	r3, [r6], #1
 80099d0:	9b04      	ldr	r3, [sp, #16]
 80099d2:	3301      	adds	r3, #1
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	e6ae      	b.n	8009736 <_dtoa_r+0x696>
 80099d8:	9c07      	ldr	r4, [sp, #28]
 80099da:	9704      	str	r7, [sp, #16]
 80099dc:	4625      	mov	r5, r4
 80099de:	e7f3      	b.n	80099c8 <_dtoa_r+0x928>
 80099e0:	9b07      	ldr	r3, [sp, #28]
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 8104 	beq.w	8009bf4 <_dtoa_r+0xb54>
 80099ec:	2e00      	cmp	r6, #0
 80099ee:	dd05      	ble.n	80099fc <_dtoa_r+0x95c>
 80099f0:	4629      	mov	r1, r5
 80099f2:	4632      	mov	r2, r6
 80099f4:	4658      	mov	r0, fp
 80099f6:	f000 ffbb 	bl	800a970 <__lshift>
 80099fa:	4605      	mov	r5, r0
 80099fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d05a      	beq.n	8009ab8 <_dtoa_r+0xa18>
 8009a02:	6869      	ldr	r1, [r5, #4]
 8009a04:	4658      	mov	r0, fp
 8009a06:	f000 fd5b 	bl	800a4c0 <_Balloc>
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	b928      	cbnz	r0, 8009a1a <_dtoa_r+0x97a>
 8009a0e:	4b84      	ldr	r3, [pc, #528]	@ (8009c20 <_dtoa_r+0xb80>)
 8009a10:	4602      	mov	r2, r0
 8009a12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009a16:	f7ff bb5a 	b.w	80090ce <_dtoa_r+0x2e>
 8009a1a:	692a      	ldr	r2, [r5, #16]
 8009a1c:	3202      	adds	r2, #2
 8009a1e:	0092      	lsls	r2, r2, #2
 8009a20:	f105 010c 	add.w	r1, r5, #12
 8009a24:	300c      	adds	r0, #12
 8009a26:	f7ff fa9a 	bl	8008f5e <memcpy>
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f000 ff9e 	bl	800a970 <__lshift>
 8009a34:	f10a 0301 	add.w	r3, sl, #1
 8009a38:	9307      	str	r3, [sp, #28]
 8009a3a:	9b00      	ldr	r3, [sp, #0]
 8009a3c:	4453      	add	r3, sl
 8009a3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a40:	9b02      	ldr	r3, [sp, #8]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	462f      	mov	r7, r5
 8009a48:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	9b07      	ldr	r3, [sp, #28]
 8009a4e:	4621      	mov	r1, r4
 8009a50:	3b01      	subs	r3, #1
 8009a52:	4648      	mov	r0, r9
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	f7ff fa9b 	bl	8008f90 <quorem>
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	9002      	str	r0, [sp, #8]
 8009a5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a62:	4648      	mov	r0, r9
 8009a64:	f000 fff0 	bl	800aa48 <__mcmp>
 8009a68:	462a      	mov	r2, r5
 8009a6a:	9008      	str	r0, [sp, #32]
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4658      	mov	r0, fp
 8009a70:	f001 f806 	bl	800aa80 <__mdiff>
 8009a74:	68c2      	ldr	r2, [r0, #12]
 8009a76:	4606      	mov	r6, r0
 8009a78:	bb02      	cbnz	r2, 8009abc <_dtoa_r+0xa1c>
 8009a7a:	4601      	mov	r1, r0
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	f000 ffe3 	bl	800aa48 <__mcmp>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4631      	mov	r1, r6
 8009a86:	4658      	mov	r0, fp
 8009a88:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a8a:	f000 fd59 	bl	800a540 <_Bfree>
 8009a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a92:	9e07      	ldr	r6, [sp, #28]
 8009a94:	ea43 0102 	orr.w	r1, r3, r2
 8009a98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a9a:	4319      	orrs	r1, r3
 8009a9c:	d110      	bne.n	8009ac0 <_dtoa_r+0xa20>
 8009a9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aa2:	d029      	beq.n	8009af8 <_dtoa_r+0xa58>
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dd02      	ble.n	8009ab0 <_dtoa_r+0xa10>
 8009aaa:	9b02      	ldr	r3, [sp, #8]
 8009aac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009ab0:	9b00      	ldr	r3, [sp, #0]
 8009ab2:	f883 8000 	strb.w	r8, [r3]
 8009ab6:	e63f      	b.n	8009738 <_dtoa_r+0x698>
 8009ab8:	4628      	mov	r0, r5
 8009aba:	e7bb      	b.n	8009a34 <_dtoa_r+0x994>
 8009abc:	2201      	movs	r2, #1
 8009abe:	e7e1      	b.n	8009a84 <_dtoa_r+0x9e4>
 8009ac0:	9b08      	ldr	r3, [sp, #32]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	db04      	blt.n	8009ad0 <_dtoa_r+0xa30>
 8009ac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009acc:	430b      	orrs	r3, r1
 8009ace:	d120      	bne.n	8009b12 <_dtoa_r+0xa72>
 8009ad0:	2a00      	cmp	r2, #0
 8009ad2:	dded      	ble.n	8009ab0 <_dtoa_r+0xa10>
 8009ad4:	4649      	mov	r1, r9
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	4658      	mov	r0, fp
 8009ada:	f000 ff49 	bl	800a970 <__lshift>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4681      	mov	r9, r0
 8009ae2:	f000 ffb1 	bl	800aa48 <__mcmp>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	dc03      	bgt.n	8009af2 <_dtoa_r+0xa52>
 8009aea:	d1e1      	bne.n	8009ab0 <_dtoa_r+0xa10>
 8009aec:	f018 0f01 	tst.w	r8, #1
 8009af0:	d0de      	beq.n	8009ab0 <_dtoa_r+0xa10>
 8009af2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009af6:	d1d8      	bne.n	8009aaa <_dtoa_r+0xa0a>
 8009af8:	9a00      	ldr	r2, [sp, #0]
 8009afa:	2339      	movs	r3, #57	@ 0x39
 8009afc:	7013      	strb	r3, [r2, #0]
 8009afe:	4633      	mov	r3, r6
 8009b00:	461e      	mov	r6, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009b08:	2a39      	cmp	r2, #57	@ 0x39
 8009b0a:	d052      	beq.n	8009bb2 <_dtoa_r+0xb12>
 8009b0c:	3201      	adds	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]
 8009b10:	e612      	b.n	8009738 <_dtoa_r+0x698>
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	dd07      	ble.n	8009b26 <_dtoa_r+0xa86>
 8009b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b1a:	d0ed      	beq.n	8009af8 <_dtoa_r+0xa58>
 8009b1c:	9a00      	ldr	r2, [sp, #0]
 8009b1e:	f108 0301 	add.w	r3, r8, #1
 8009b22:	7013      	strb	r3, [r2, #0]
 8009b24:	e608      	b.n	8009738 <_dtoa_r+0x698>
 8009b26:	9b07      	ldr	r3, [sp, #28]
 8009b28:	9a07      	ldr	r2, [sp, #28]
 8009b2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d028      	beq.n	8009b86 <_dtoa_r+0xae6>
 8009b34:	4649      	mov	r1, r9
 8009b36:	2300      	movs	r3, #0
 8009b38:	220a      	movs	r2, #10
 8009b3a:	4658      	mov	r0, fp
 8009b3c:	f000 fd22 	bl	800a584 <__multadd>
 8009b40:	42af      	cmp	r7, r5
 8009b42:	4681      	mov	r9, r0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	f04f 020a 	mov.w	r2, #10
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	4658      	mov	r0, fp
 8009b50:	d107      	bne.n	8009b62 <_dtoa_r+0xac2>
 8009b52:	f000 fd17 	bl	800a584 <__multadd>
 8009b56:	4607      	mov	r7, r0
 8009b58:	4605      	mov	r5, r0
 8009b5a:	9b07      	ldr	r3, [sp, #28]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	9307      	str	r3, [sp, #28]
 8009b60:	e774      	b.n	8009a4c <_dtoa_r+0x9ac>
 8009b62:	f000 fd0f 	bl	800a584 <__multadd>
 8009b66:	4629      	mov	r1, r5
 8009b68:	4607      	mov	r7, r0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f000 fd08 	bl	800a584 <__multadd>
 8009b74:	4605      	mov	r5, r0
 8009b76:	e7f0      	b.n	8009b5a <_dtoa_r+0xaba>
 8009b78:	9b00      	ldr	r3, [sp, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfcc      	ite	gt
 8009b7e:	461e      	movgt	r6, r3
 8009b80:	2601      	movle	r6, #1
 8009b82:	4456      	add	r6, sl
 8009b84:	2700      	movs	r7, #0
 8009b86:	4649      	mov	r1, r9
 8009b88:	2201      	movs	r2, #1
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f000 fef0 	bl	800a970 <__lshift>
 8009b90:	4621      	mov	r1, r4
 8009b92:	4681      	mov	r9, r0
 8009b94:	f000 ff58 	bl	800aa48 <__mcmp>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	dcb0      	bgt.n	8009afe <_dtoa_r+0xa5e>
 8009b9c:	d102      	bne.n	8009ba4 <_dtoa_r+0xb04>
 8009b9e:	f018 0f01 	tst.w	r8, #1
 8009ba2:	d1ac      	bne.n	8009afe <_dtoa_r+0xa5e>
 8009ba4:	4633      	mov	r3, r6
 8009ba6:	461e      	mov	r6, r3
 8009ba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bac:	2a30      	cmp	r2, #48	@ 0x30
 8009bae:	d0fa      	beq.n	8009ba6 <_dtoa_r+0xb06>
 8009bb0:	e5c2      	b.n	8009738 <_dtoa_r+0x698>
 8009bb2:	459a      	cmp	sl, r3
 8009bb4:	d1a4      	bne.n	8009b00 <_dtoa_r+0xa60>
 8009bb6:	9b04      	ldr	r3, [sp, #16]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	9304      	str	r3, [sp, #16]
 8009bbc:	2331      	movs	r3, #49	@ 0x31
 8009bbe:	f88a 3000 	strb.w	r3, [sl]
 8009bc2:	e5b9      	b.n	8009738 <_dtoa_r+0x698>
 8009bc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009c24 <_dtoa_r+0xb84>
 8009bca:	b11b      	cbz	r3, 8009bd4 <_dtoa_r+0xb34>
 8009bcc:	f10a 0308 	add.w	r3, sl, #8
 8009bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	b019      	add	sp, #100	@ 0x64
 8009bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	f77f ae37 	ble.w	8009852 <_dtoa_r+0x7b2>
 8009be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009be6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009be8:	2001      	movs	r0, #1
 8009bea:	e655      	b.n	8009898 <_dtoa_r+0x7f8>
 8009bec:	9b00      	ldr	r3, [sp, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f77f aed6 	ble.w	80099a0 <_dtoa_r+0x900>
 8009bf4:	4656      	mov	r6, sl
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4648      	mov	r0, r9
 8009bfa:	f7ff f9c9 	bl	8008f90 <quorem>
 8009bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c02:	f806 8b01 	strb.w	r8, [r6], #1
 8009c06:	9b00      	ldr	r3, [sp, #0]
 8009c08:	eba6 020a 	sub.w	r2, r6, sl
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	ddb3      	ble.n	8009b78 <_dtoa_r+0xad8>
 8009c10:	4649      	mov	r1, r9
 8009c12:	2300      	movs	r3, #0
 8009c14:	220a      	movs	r2, #10
 8009c16:	4658      	mov	r0, fp
 8009c18:	f000 fcb4 	bl	800a584 <__multadd>
 8009c1c:	4681      	mov	r9, r0
 8009c1e:	e7ea      	b.n	8009bf6 <_dtoa_r+0xb56>
 8009c20:	0800c441 	.word	0x0800c441
 8009c24:	0800c3c5 	.word	0x0800c3c5

08009c28 <_free_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	2900      	cmp	r1, #0
 8009c2e:	d041      	beq.n	8009cb4 <_free_r+0x8c>
 8009c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c34:	1f0c      	subs	r4, r1, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bfb8      	it	lt
 8009c3a:	18e4      	addlt	r4, r4, r3
 8009c3c:	f000 fc34 	bl	800a4a8 <__malloc_lock>
 8009c40:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb8 <_free_r+0x90>)
 8009c42:	6813      	ldr	r3, [r2, #0]
 8009c44:	b933      	cbnz	r3, 8009c54 <_free_r+0x2c>
 8009c46:	6063      	str	r3, [r4, #4]
 8009c48:	6014      	str	r4, [r2, #0]
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c50:	f000 bc30 	b.w	800a4b4 <__malloc_unlock>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d908      	bls.n	8009c6a <_free_r+0x42>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	1821      	adds	r1, r4, r0
 8009c5c:	428b      	cmp	r3, r1
 8009c5e:	bf01      	itttt	eq
 8009c60:	6819      	ldreq	r1, [r3, #0]
 8009c62:	685b      	ldreq	r3, [r3, #4]
 8009c64:	1809      	addeq	r1, r1, r0
 8009c66:	6021      	streq	r1, [r4, #0]
 8009c68:	e7ed      	b.n	8009c46 <_free_r+0x1e>
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b10b      	cbz	r3, 8009c74 <_free_r+0x4c>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d9fa      	bls.n	8009c6a <_free_r+0x42>
 8009c74:	6811      	ldr	r1, [r2, #0]
 8009c76:	1850      	adds	r0, r2, r1
 8009c78:	42a0      	cmp	r0, r4
 8009c7a:	d10b      	bne.n	8009c94 <_free_r+0x6c>
 8009c7c:	6820      	ldr	r0, [r4, #0]
 8009c7e:	4401      	add	r1, r0
 8009c80:	1850      	adds	r0, r2, r1
 8009c82:	4283      	cmp	r3, r0
 8009c84:	6011      	str	r1, [r2, #0]
 8009c86:	d1e0      	bne.n	8009c4a <_free_r+0x22>
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	6053      	str	r3, [r2, #4]
 8009c8e:	4408      	add	r0, r1
 8009c90:	6010      	str	r0, [r2, #0]
 8009c92:	e7da      	b.n	8009c4a <_free_r+0x22>
 8009c94:	d902      	bls.n	8009c9c <_free_r+0x74>
 8009c96:	230c      	movs	r3, #12
 8009c98:	602b      	str	r3, [r5, #0]
 8009c9a:	e7d6      	b.n	8009c4a <_free_r+0x22>
 8009c9c:	6820      	ldr	r0, [r4, #0]
 8009c9e:	1821      	adds	r1, r4, r0
 8009ca0:	428b      	cmp	r3, r1
 8009ca2:	bf04      	itt	eq
 8009ca4:	6819      	ldreq	r1, [r3, #0]
 8009ca6:	685b      	ldreq	r3, [r3, #4]
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	bf04      	itt	eq
 8009cac:	1809      	addeq	r1, r1, r0
 8009cae:	6021      	streq	r1, [r4, #0]
 8009cb0:	6054      	str	r4, [r2, #4]
 8009cb2:	e7ca      	b.n	8009c4a <_free_r+0x22>
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200010dc 	.word	0x200010dc

08009cbc <rshift>:
 8009cbc:	6903      	ldr	r3, [r0, #16]
 8009cbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cca:	f100 0414 	add.w	r4, r0, #20
 8009cce:	dd45      	ble.n	8009d5c <rshift+0xa0>
 8009cd0:	f011 011f 	ands.w	r1, r1, #31
 8009cd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cdc:	d10c      	bne.n	8009cf8 <rshift+0x3c>
 8009cde:	f100 0710 	add.w	r7, r0, #16
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	42b1      	cmp	r1, r6
 8009ce6:	d334      	bcc.n	8009d52 <rshift+0x96>
 8009ce8:	1a9b      	subs	r3, r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	1eea      	subs	r2, r5, #3
 8009cee:	4296      	cmp	r6, r2
 8009cf0:	bf38      	it	cc
 8009cf2:	2300      	movcc	r3, #0
 8009cf4:	4423      	add	r3, r4
 8009cf6:	e015      	b.n	8009d24 <rshift+0x68>
 8009cf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cfc:	f1c1 0820 	rsb	r8, r1, #32
 8009d00:	40cf      	lsrs	r7, r1
 8009d02:	f105 0e04 	add.w	lr, r5, #4
 8009d06:	46a1      	mov	r9, r4
 8009d08:	4576      	cmp	r6, lr
 8009d0a:	46f4      	mov	ip, lr
 8009d0c:	d815      	bhi.n	8009d3a <rshift+0x7e>
 8009d0e:	1a9a      	subs	r2, r3, r2
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	3a04      	subs	r2, #4
 8009d14:	3501      	adds	r5, #1
 8009d16:	42ae      	cmp	r6, r5
 8009d18:	bf38      	it	cc
 8009d1a:	2200      	movcc	r2, #0
 8009d1c:	18a3      	adds	r3, r4, r2
 8009d1e:	50a7      	str	r7, [r4, r2]
 8009d20:	b107      	cbz	r7, 8009d24 <rshift+0x68>
 8009d22:	3304      	adds	r3, #4
 8009d24:	1b1a      	subs	r2, r3, r4
 8009d26:	42a3      	cmp	r3, r4
 8009d28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d2c:	bf08      	it	eq
 8009d2e:	2300      	moveq	r3, #0
 8009d30:	6102      	str	r2, [r0, #16]
 8009d32:	bf08      	it	eq
 8009d34:	6143      	streq	r3, [r0, #20]
 8009d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d3a:	f8dc c000 	ldr.w	ip, [ip]
 8009d3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d42:	ea4c 0707 	orr.w	r7, ip, r7
 8009d46:	f849 7b04 	str.w	r7, [r9], #4
 8009d4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d4e:	40cf      	lsrs	r7, r1
 8009d50:	e7da      	b.n	8009d08 <rshift+0x4c>
 8009d52:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d56:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d5a:	e7c3      	b.n	8009ce4 <rshift+0x28>
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	e7e1      	b.n	8009d24 <rshift+0x68>

08009d60 <__hexdig_fun>:
 8009d60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d64:	2b09      	cmp	r3, #9
 8009d66:	d802      	bhi.n	8009d6e <__hexdig_fun+0xe>
 8009d68:	3820      	subs	r0, #32
 8009d6a:	b2c0      	uxtb	r0, r0
 8009d6c:	4770      	bx	lr
 8009d6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d72:	2b05      	cmp	r3, #5
 8009d74:	d801      	bhi.n	8009d7a <__hexdig_fun+0x1a>
 8009d76:	3847      	subs	r0, #71	@ 0x47
 8009d78:	e7f7      	b.n	8009d6a <__hexdig_fun+0xa>
 8009d7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d801      	bhi.n	8009d86 <__hexdig_fun+0x26>
 8009d82:	3827      	subs	r0, #39	@ 0x27
 8009d84:	e7f1      	b.n	8009d6a <__hexdig_fun+0xa>
 8009d86:	2000      	movs	r0, #0
 8009d88:	4770      	bx	lr
	...

08009d8c <__gethex>:
 8009d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d90:	b085      	sub	sp, #20
 8009d92:	468a      	mov	sl, r1
 8009d94:	9302      	str	r3, [sp, #8]
 8009d96:	680b      	ldr	r3, [r1, #0]
 8009d98:	9001      	str	r0, [sp, #4]
 8009d9a:	4690      	mov	r8, r2
 8009d9c:	1c9c      	adds	r4, r3, #2
 8009d9e:	46a1      	mov	r9, r4
 8009da0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009da4:	2830      	cmp	r0, #48	@ 0x30
 8009da6:	d0fa      	beq.n	8009d9e <__gethex+0x12>
 8009da8:	eba9 0303 	sub.w	r3, r9, r3
 8009dac:	f1a3 0b02 	sub.w	fp, r3, #2
 8009db0:	f7ff ffd6 	bl	8009d60 <__hexdig_fun>
 8009db4:	4605      	mov	r5, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d168      	bne.n	8009e8c <__gethex+0x100>
 8009dba:	49a0      	ldr	r1, [pc, #640]	@ (800a03c <__gethex+0x2b0>)
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4648      	mov	r0, r9
 8009dc0:	f7ff f843 	bl	8008e4a <strncmp>
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d167      	bne.n	8009e9a <__gethex+0x10e>
 8009dca:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009dce:	4626      	mov	r6, r4
 8009dd0:	f7ff ffc6 	bl	8009d60 <__hexdig_fun>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d062      	beq.n	8009e9e <__gethex+0x112>
 8009dd8:	4623      	mov	r3, r4
 8009dda:	7818      	ldrb	r0, [r3, #0]
 8009ddc:	2830      	cmp	r0, #48	@ 0x30
 8009dde:	4699      	mov	r9, r3
 8009de0:	f103 0301 	add.w	r3, r3, #1
 8009de4:	d0f9      	beq.n	8009dda <__gethex+0x4e>
 8009de6:	f7ff ffbb 	bl	8009d60 <__hexdig_fun>
 8009dea:	fab0 f580 	clz	r5, r0
 8009dee:	096d      	lsrs	r5, r5, #5
 8009df0:	f04f 0b01 	mov.w	fp, #1
 8009df4:	464a      	mov	r2, r9
 8009df6:	4616      	mov	r6, r2
 8009df8:	3201      	adds	r2, #1
 8009dfa:	7830      	ldrb	r0, [r6, #0]
 8009dfc:	f7ff ffb0 	bl	8009d60 <__hexdig_fun>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1f8      	bne.n	8009df6 <__gethex+0x6a>
 8009e04:	498d      	ldr	r1, [pc, #564]	@ (800a03c <__gethex+0x2b0>)
 8009e06:	2201      	movs	r2, #1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff f81e 	bl	8008e4a <strncmp>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d13f      	bne.n	8009e92 <__gethex+0x106>
 8009e12:	b944      	cbnz	r4, 8009e26 <__gethex+0x9a>
 8009e14:	1c74      	adds	r4, r6, #1
 8009e16:	4622      	mov	r2, r4
 8009e18:	4616      	mov	r6, r2
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	7830      	ldrb	r0, [r6, #0]
 8009e1e:	f7ff ff9f 	bl	8009d60 <__hexdig_fun>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d1f8      	bne.n	8009e18 <__gethex+0x8c>
 8009e26:	1ba4      	subs	r4, r4, r6
 8009e28:	00a7      	lsls	r7, r4, #2
 8009e2a:	7833      	ldrb	r3, [r6, #0]
 8009e2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e30:	2b50      	cmp	r3, #80	@ 0x50
 8009e32:	d13e      	bne.n	8009eb2 <__gethex+0x126>
 8009e34:	7873      	ldrb	r3, [r6, #1]
 8009e36:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e38:	d033      	beq.n	8009ea2 <__gethex+0x116>
 8009e3a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e3c:	d034      	beq.n	8009ea8 <__gethex+0x11c>
 8009e3e:	1c71      	adds	r1, r6, #1
 8009e40:	2400      	movs	r4, #0
 8009e42:	7808      	ldrb	r0, [r1, #0]
 8009e44:	f7ff ff8c 	bl	8009d60 <__hexdig_fun>
 8009e48:	1e43      	subs	r3, r0, #1
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b18      	cmp	r3, #24
 8009e4e:	d830      	bhi.n	8009eb2 <__gethex+0x126>
 8009e50:	f1a0 0210 	sub.w	r2, r0, #16
 8009e54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e58:	f7ff ff82 	bl	8009d60 <__hexdig_fun>
 8009e5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e60:	fa5f fc8c 	uxtb.w	ip, ip
 8009e64:	f1bc 0f18 	cmp.w	ip, #24
 8009e68:	f04f 030a 	mov.w	r3, #10
 8009e6c:	d91e      	bls.n	8009eac <__gethex+0x120>
 8009e6e:	b104      	cbz	r4, 8009e72 <__gethex+0xe6>
 8009e70:	4252      	negs	r2, r2
 8009e72:	4417      	add	r7, r2
 8009e74:	f8ca 1000 	str.w	r1, [sl]
 8009e78:	b1ed      	cbz	r5, 8009eb6 <__gethex+0x12a>
 8009e7a:	f1bb 0f00 	cmp.w	fp, #0
 8009e7e:	bf0c      	ite	eq
 8009e80:	2506      	moveq	r5, #6
 8009e82:	2500      	movne	r5, #0
 8009e84:	4628      	mov	r0, r5
 8009e86:	b005      	add	sp, #20
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	462c      	mov	r4, r5
 8009e90:	e7b0      	b.n	8009df4 <__gethex+0x68>
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	d1c7      	bne.n	8009e26 <__gethex+0x9a>
 8009e96:	4627      	mov	r7, r4
 8009e98:	e7c7      	b.n	8009e2a <__gethex+0x9e>
 8009e9a:	464e      	mov	r6, r9
 8009e9c:	462f      	mov	r7, r5
 8009e9e:	2501      	movs	r5, #1
 8009ea0:	e7c3      	b.n	8009e2a <__gethex+0x9e>
 8009ea2:	2400      	movs	r4, #0
 8009ea4:	1cb1      	adds	r1, r6, #2
 8009ea6:	e7cc      	b.n	8009e42 <__gethex+0xb6>
 8009ea8:	2401      	movs	r4, #1
 8009eaa:	e7fb      	b.n	8009ea4 <__gethex+0x118>
 8009eac:	fb03 0002 	mla	r0, r3, r2, r0
 8009eb0:	e7ce      	b.n	8009e50 <__gethex+0xc4>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	e7de      	b.n	8009e74 <__gethex+0xe8>
 8009eb6:	eba6 0309 	sub.w	r3, r6, r9
 8009eba:	3b01      	subs	r3, #1
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	2b07      	cmp	r3, #7
 8009ec0:	dc0a      	bgt.n	8009ed8 <__gethex+0x14c>
 8009ec2:	9801      	ldr	r0, [sp, #4]
 8009ec4:	f000 fafc 	bl	800a4c0 <_Balloc>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	b940      	cbnz	r0, 8009ede <__gethex+0x152>
 8009ecc:	4b5c      	ldr	r3, [pc, #368]	@ (800a040 <__gethex+0x2b4>)
 8009ece:	4602      	mov	r2, r0
 8009ed0:	21e4      	movs	r1, #228	@ 0xe4
 8009ed2:	485c      	ldr	r0, [pc, #368]	@ (800a044 <__gethex+0x2b8>)
 8009ed4:	f001 f9e0 	bl	800b298 <__assert_func>
 8009ed8:	3101      	adds	r1, #1
 8009eda:	105b      	asrs	r3, r3, #1
 8009edc:	e7ef      	b.n	8009ebe <__gethex+0x132>
 8009ede:	f100 0a14 	add.w	sl, r0, #20
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	4655      	mov	r5, sl
 8009ee6:	469b      	mov	fp, r3
 8009ee8:	45b1      	cmp	r9, r6
 8009eea:	d337      	bcc.n	8009f5c <__gethex+0x1d0>
 8009eec:	f845 bb04 	str.w	fp, [r5], #4
 8009ef0:	eba5 050a 	sub.w	r5, r5, sl
 8009ef4:	10ad      	asrs	r5, r5, #2
 8009ef6:	6125      	str	r5, [r4, #16]
 8009ef8:	4658      	mov	r0, fp
 8009efa:	f000 fbd3 	bl	800a6a4 <__hi0bits>
 8009efe:	016d      	lsls	r5, r5, #5
 8009f00:	f8d8 6000 	ldr.w	r6, [r8]
 8009f04:	1a2d      	subs	r5, r5, r0
 8009f06:	42b5      	cmp	r5, r6
 8009f08:	dd54      	ble.n	8009fb4 <__gethex+0x228>
 8009f0a:	1bad      	subs	r5, r5, r6
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 ff67 	bl	800ade2 <__any_on>
 8009f14:	4681      	mov	r9, r0
 8009f16:	b178      	cbz	r0, 8009f38 <__gethex+0x1ac>
 8009f18:	1e6b      	subs	r3, r5, #1
 8009f1a:	1159      	asrs	r1, r3, #5
 8009f1c:	f003 021f 	and.w	r2, r3, #31
 8009f20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f24:	f04f 0901 	mov.w	r9, #1
 8009f28:	fa09 f202 	lsl.w	r2, r9, r2
 8009f2c:	420a      	tst	r2, r1
 8009f2e:	d003      	beq.n	8009f38 <__gethex+0x1ac>
 8009f30:	454b      	cmp	r3, r9
 8009f32:	dc36      	bgt.n	8009fa2 <__gethex+0x216>
 8009f34:	f04f 0902 	mov.w	r9, #2
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f7ff febe 	bl	8009cbc <rshift>
 8009f40:	442f      	add	r7, r5
 8009f42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f46:	42bb      	cmp	r3, r7
 8009f48:	da42      	bge.n	8009fd0 <__gethex+0x244>
 8009f4a:	9801      	ldr	r0, [sp, #4]
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f000 faf7 	bl	800a540 <_Bfree>
 8009f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f54:	2300      	movs	r3, #0
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	25a3      	movs	r5, #163	@ 0xa3
 8009f5a:	e793      	b.n	8009e84 <__gethex+0xf8>
 8009f5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f60:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f62:	d012      	beq.n	8009f8a <__gethex+0x1fe>
 8009f64:	2b20      	cmp	r3, #32
 8009f66:	d104      	bne.n	8009f72 <__gethex+0x1e6>
 8009f68:	f845 bb04 	str.w	fp, [r5], #4
 8009f6c:	f04f 0b00 	mov.w	fp, #0
 8009f70:	465b      	mov	r3, fp
 8009f72:	7830      	ldrb	r0, [r6, #0]
 8009f74:	9303      	str	r3, [sp, #12]
 8009f76:	f7ff fef3 	bl	8009d60 <__hexdig_fun>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	f000 000f 	and.w	r0, r0, #15
 8009f80:	4098      	lsls	r0, r3
 8009f82:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f86:	3304      	adds	r3, #4
 8009f88:	e7ae      	b.n	8009ee8 <__gethex+0x15c>
 8009f8a:	45b1      	cmp	r9, r6
 8009f8c:	d8ea      	bhi.n	8009f64 <__gethex+0x1d8>
 8009f8e:	492b      	ldr	r1, [pc, #172]	@ (800a03c <__gethex+0x2b0>)
 8009f90:	9303      	str	r3, [sp, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	4630      	mov	r0, r6
 8009f96:	f7fe ff58 	bl	8008e4a <strncmp>
 8009f9a:	9b03      	ldr	r3, [sp, #12]
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d1e1      	bne.n	8009f64 <__gethex+0x1d8>
 8009fa0:	e7a2      	b.n	8009ee8 <__gethex+0x15c>
 8009fa2:	1ea9      	subs	r1, r5, #2
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 ff1c 	bl	800ade2 <__any_on>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d0c2      	beq.n	8009f34 <__gethex+0x1a8>
 8009fae:	f04f 0903 	mov.w	r9, #3
 8009fb2:	e7c1      	b.n	8009f38 <__gethex+0x1ac>
 8009fb4:	da09      	bge.n	8009fca <__gethex+0x23e>
 8009fb6:	1b75      	subs	r5, r6, r5
 8009fb8:	4621      	mov	r1, r4
 8009fba:	9801      	ldr	r0, [sp, #4]
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	f000 fcd7 	bl	800a970 <__lshift>
 8009fc2:	1b7f      	subs	r7, r7, r5
 8009fc4:	4604      	mov	r4, r0
 8009fc6:	f100 0a14 	add.w	sl, r0, #20
 8009fca:	f04f 0900 	mov.w	r9, #0
 8009fce:	e7b8      	b.n	8009f42 <__gethex+0x1b6>
 8009fd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fd4:	42bd      	cmp	r5, r7
 8009fd6:	dd6f      	ble.n	800a0b8 <__gethex+0x32c>
 8009fd8:	1bed      	subs	r5, r5, r7
 8009fda:	42ae      	cmp	r6, r5
 8009fdc:	dc34      	bgt.n	800a048 <__gethex+0x2bc>
 8009fde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d022      	beq.n	800a02c <__gethex+0x2a0>
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d024      	beq.n	800a034 <__gethex+0x2a8>
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d115      	bne.n	800a01a <__gethex+0x28e>
 8009fee:	42ae      	cmp	r6, r5
 8009ff0:	d113      	bne.n	800a01a <__gethex+0x28e>
 8009ff2:	2e01      	cmp	r6, #1
 8009ff4:	d10b      	bne.n	800a00e <__gethex+0x282>
 8009ff6:	9a02      	ldr	r2, [sp, #8]
 8009ff8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	2301      	movs	r3, #1
 800a000:	6123      	str	r3, [r4, #16]
 800a002:	f8ca 3000 	str.w	r3, [sl]
 800a006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a008:	2562      	movs	r5, #98	@ 0x62
 800a00a:	601c      	str	r4, [r3, #0]
 800a00c:	e73a      	b.n	8009e84 <__gethex+0xf8>
 800a00e:	1e71      	subs	r1, r6, #1
 800a010:	4620      	mov	r0, r4
 800a012:	f000 fee6 	bl	800ade2 <__any_on>
 800a016:	2800      	cmp	r0, #0
 800a018:	d1ed      	bne.n	8009ff6 <__gethex+0x26a>
 800a01a:	9801      	ldr	r0, [sp, #4]
 800a01c:	4621      	mov	r1, r4
 800a01e:	f000 fa8f 	bl	800a540 <_Bfree>
 800a022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a024:	2300      	movs	r3, #0
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	2550      	movs	r5, #80	@ 0x50
 800a02a:	e72b      	b.n	8009e84 <__gethex+0xf8>
 800a02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1f3      	bne.n	800a01a <__gethex+0x28e>
 800a032:	e7e0      	b.n	8009ff6 <__gethex+0x26a>
 800a034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1dd      	bne.n	8009ff6 <__gethex+0x26a>
 800a03a:	e7ee      	b.n	800a01a <__gethex+0x28e>
 800a03c:	0800c230 	.word	0x0800c230
 800a040:	0800c441 	.word	0x0800c441
 800a044:	0800c452 	.word	0x0800c452
 800a048:	1e6f      	subs	r7, r5, #1
 800a04a:	f1b9 0f00 	cmp.w	r9, #0
 800a04e:	d130      	bne.n	800a0b2 <__gethex+0x326>
 800a050:	b127      	cbz	r7, 800a05c <__gethex+0x2d0>
 800a052:	4639      	mov	r1, r7
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fec4 	bl	800ade2 <__any_on>
 800a05a:	4681      	mov	r9, r0
 800a05c:	117a      	asrs	r2, r7, #5
 800a05e:	2301      	movs	r3, #1
 800a060:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a064:	f007 071f 	and.w	r7, r7, #31
 800a068:	40bb      	lsls	r3, r7
 800a06a:	4213      	tst	r3, r2
 800a06c:	4629      	mov	r1, r5
 800a06e:	4620      	mov	r0, r4
 800a070:	bf18      	it	ne
 800a072:	f049 0902 	orrne.w	r9, r9, #2
 800a076:	f7ff fe21 	bl	8009cbc <rshift>
 800a07a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a07e:	1b76      	subs	r6, r6, r5
 800a080:	2502      	movs	r5, #2
 800a082:	f1b9 0f00 	cmp.w	r9, #0
 800a086:	d047      	beq.n	800a118 <__gethex+0x38c>
 800a088:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d015      	beq.n	800a0bc <__gethex+0x330>
 800a090:	2b03      	cmp	r3, #3
 800a092:	d017      	beq.n	800a0c4 <__gethex+0x338>
 800a094:	2b01      	cmp	r3, #1
 800a096:	d109      	bne.n	800a0ac <__gethex+0x320>
 800a098:	f019 0f02 	tst.w	r9, #2
 800a09c:	d006      	beq.n	800a0ac <__gethex+0x320>
 800a09e:	f8da 3000 	ldr.w	r3, [sl]
 800a0a2:	ea49 0903 	orr.w	r9, r9, r3
 800a0a6:	f019 0f01 	tst.w	r9, #1
 800a0aa:	d10e      	bne.n	800a0ca <__gethex+0x33e>
 800a0ac:	f045 0510 	orr.w	r5, r5, #16
 800a0b0:	e032      	b.n	800a118 <__gethex+0x38c>
 800a0b2:	f04f 0901 	mov.w	r9, #1
 800a0b6:	e7d1      	b.n	800a05c <__gethex+0x2d0>
 800a0b8:	2501      	movs	r5, #1
 800a0ba:	e7e2      	b.n	800a082 <__gethex+0x2f6>
 800a0bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0be:	f1c3 0301 	rsb	r3, r3, #1
 800a0c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0f0      	beq.n	800a0ac <__gethex+0x320>
 800a0ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0ce:	f104 0314 	add.w	r3, r4, #20
 800a0d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0da:	f04f 0c00 	mov.w	ip, #0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0e8:	d01b      	beq.n	800a122 <__gethex+0x396>
 800a0ea:	3201      	adds	r2, #1
 800a0ec:	6002      	str	r2, [r0, #0]
 800a0ee:	2d02      	cmp	r5, #2
 800a0f0:	f104 0314 	add.w	r3, r4, #20
 800a0f4:	d13c      	bne.n	800a170 <__gethex+0x3e4>
 800a0f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a0fa:	3a01      	subs	r2, #1
 800a0fc:	42b2      	cmp	r2, r6
 800a0fe:	d109      	bne.n	800a114 <__gethex+0x388>
 800a100:	1171      	asrs	r1, r6, #5
 800a102:	2201      	movs	r2, #1
 800a104:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a108:	f006 061f 	and.w	r6, r6, #31
 800a10c:	fa02 f606 	lsl.w	r6, r2, r6
 800a110:	421e      	tst	r6, r3
 800a112:	d13a      	bne.n	800a18a <__gethex+0x3fe>
 800a114:	f045 0520 	orr.w	r5, r5, #32
 800a118:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11a:	601c      	str	r4, [r3, #0]
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	601f      	str	r7, [r3, #0]
 800a120:	e6b0      	b.n	8009e84 <__gethex+0xf8>
 800a122:	4299      	cmp	r1, r3
 800a124:	f843 cc04 	str.w	ip, [r3, #-4]
 800a128:	d8d9      	bhi.n	800a0de <__gethex+0x352>
 800a12a:	68a3      	ldr	r3, [r4, #8]
 800a12c:	459b      	cmp	fp, r3
 800a12e:	db17      	blt.n	800a160 <__gethex+0x3d4>
 800a130:	6861      	ldr	r1, [r4, #4]
 800a132:	9801      	ldr	r0, [sp, #4]
 800a134:	3101      	adds	r1, #1
 800a136:	f000 f9c3 	bl	800a4c0 <_Balloc>
 800a13a:	4681      	mov	r9, r0
 800a13c:	b918      	cbnz	r0, 800a146 <__gethex+0x3ba>
 800a13e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1a8 <__gethex+0x41c>)
 800a140:	4602      	mov	r2, r0
 800a142:	2184      	movs	r1, #132	@ 0x84
 800a144:	e6c5      	b.n	8009ed2 <__gethex+0x146>
 800a146:	6922      	ldr	r2, [r4, #16]
 800a148:	3202      	adds	r2, #2
 800a14a:	f104 010c 	add.w	r1, r4, #12
 800a14e:	0092      	lsls	r2, r2, #2
 800a150:	300c      	adds	r0, #12
 800a152:	f7fe ff04 	bl	8008f5e <memcpy>
 800a156:	4621      	mov	r1, r4
 800a158:	9801      	ldr	r0, [sp, #4]
 800a15a:	f000 f9f1 	bl	800a540 <_Bfree>
 800a15e:	464c      	mov	r4, r9
 800a160:	6923      	ldr	r3, [r4, #16]
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a168:	6122      	str	r2, [r4, #16]
 800a16a:	2201      	movs	r2, #1
 800a16c:	615a      	str	r2, [r3, #20]
 800a16e:	e7be      	b.n	800a0ee <__gethex+0x362>
 800a170:	6922      	ldr	r2, [r4, #16]
 800a172:	455a      	cmp	r2, fp
 800a174:	dd0b      	ble.n	800a18e <__gethex+0x402>
 800a176:	2101      	movs	r1, #1
 800a178:	4620      	mov	r0, r4
 800a17a:	f7ff fd9f 	bl	8009cbc <rshift>
 800a17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a182:	3701      	adds	r7, #1
 800a184:	42bb      	cmp	r3, r7
 800a186:	f6ff aee0 	blt.w	8009f4a <__gethex+0x1be>
 800a18a:	2501      	movs	r5, #1
 800a18c:	e7c2      	b.n	800a114 <__gethex+0x388>
 800a18e:	f016 061f 	ands.w	r6, r6, #31
 800a192:	d0fa      	beq.n	800a18a <__gethex+0x3fe>
 800a194:	4453      	add	r3, sl
 800a196:	f1c6 0620 	rsb	r6, r6, #32
 800a19a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a19e:	f000 fa81 	bl	800a6a4 <__hi0bits>
 800a1a2:	42b0      	cmp	r0, r6
 800a1a4:	dbe7      	blt.n	800a176 <__gethex+0x3ea>
 800a1a6:	e7f0      	b.n	800a18a <__gethex+0x3fe>
 800a1a8:	0800c441 	.word	0x0800c441

0800a1ac <L_shift>:
 800a1ac:	f1c2 0208 	rsb	r2, r2, #8
 800a1b0:	0092      	lsls	r2, r2, #2
 800a1b2:	b570      	push	{r4, r5, r6, lr}
 800a1b4:	f1c2 0620 	rsb	r6, r2, #32
 800a1b8:	6843      	ldr	r3, [r0, #4]
 800a1ba:	6804      	ldr	r4, [r0, #0]
 800a1bc:	fa03 f506 	lsl.w	r5, r3, r6
 800a1c0:	432c      	orrs	r4, r5
 800a1c2:	40d3      	lsrs	r3, r2
 800a1c4:	6004      	str	r4, [r0, #0]
 800a1c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1ca:	4288      	cmp	r0, r1
 800a1cc:	d3f4      	bcc.n	800a1b8 <L_shift+0xc>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}

0800a1d0 <__match>:
 800a1d0:	b530      	push	{r4, r5, lr}
 800a1d2:	6803      	ldr	r3, [r0, #0]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1da:	b914      	cbnz	r4, 800a1e2 <__match+0x12>
 800a1dc:	6003      	str	r3, [r0, #0]
 800a1de:	2001      	movs	r0, #1
 800a1e0:	bd30      	pop	{r4, r5, pc}
 800a1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1ea:	2d19      	cmp	r5, #25
 800a1ec:	bf98      	it	ls
 800a1ee:	3220      	addls	r2, #32
 800a1f0:	42a2      	cmp	r2, r4
 800a1f2:	d0f0      	beq.n	800a1d6 <__match+0x6>
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	e7f3      	b.n	800a1e0 <__match+0x10>

0800a1f8 <__hexnan>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	680b      	ldr	r3, [r1, #0]
 800a1fe:	6801      	ldr	r1, [r0, #0]
 800a200:	115e      	asrs	r6, r3, #5
 800a202:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a206:	f013 031f 	ands.w	r3, r3, #31
 800a20a:	b087      	sub	sp, #28
 800a20c:	bf18      	it	ne
 800a20e:	3604      	addne	r6, #4
 800a210:	2500      	movs	r5, #0
 800a212:	1f37      	subs	r7, r6, #4
 800a214:	4682      	mov	sl, r0
 800a216:	4690      	mov	r8, r2
 800a218:	9301      	str	r3, [sp, #4]
 800a21a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a21e:	46b9      	mov	r9, r7
 800a220:	463c      	mov	r4, r7
 800a222:	9502      	str	r5, [sp, #8]
 800a224:	46ab      	mov	fp, r5
 800a226:	784a      	ldrb	r2, [r1, #1]
 800a228:	1c4b      	adds	r3, r1, #1
 800a22a:	9303      	str	r3, [sp, #12]
 800a22c:	b342      	cbz	r2, 800a280 <__hexnan+0x88>
 800a22e:	4610      	mov	r0, r2
 800a230:	9105      	str	r1, [sp, #20]
 800a232:	9204      	str	r2, [sp, #16]
 800a234:	f7ff fd94 	bl	8009d60 <__hexdig_fun>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d151      	bne.n	800a2e0 <__hexnan+0xe8>
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	9905      	ldr	r1, [sp, #20]
 800a240:	2a20      	cmp	r2, #32
 800a242:	d818      	bhi.n	800a276 <__hexnan+0x7e>
 800a244:	9b02      	ldr	r3, [sp, #8]
 800a246:	459b      	cmp	fp, r3
 800a248:	dd13      	ble.n	800a272 <__hexnan+0x7a>
 800a24a:	454c      	cmp	r4, r9
 800a24c:	d206      	bcs.n	800a25c <__hexnan+0x64>
 800a24e:	2d07      	cmp	r5, #7
 800a250:	dc04      	bgt.n	800a25c <__hexnan+0x64>
 800a252:	462a      	mov	r2, r5
 800a254:	4649      	mov	r1, r9
 800a256:	4620      	mov	r0, r4
 800a258:	f7ff ffa8 	bl	800a1ac <L_shift>
 800a25c:	4544      	cmp	r4, r8
 800a25e:	d952      	bls.n	800a306 <__hexnan+0x10e>
 800a260:	2300      	movs	r3, #0
 800a262:	f1a4 0904 	sub.w	r9, r4, #4
 800a266:	f844 3c04 	str.w	r3, [r4, #-4]
 800a26a:	f8cd b008 	str.w	fp, [sp, #8]
 800a26e:	464c      	mov	r4, r9
 800a270:	461d      	mov	r5, r3
 800a272:	9903      	ldr	r1, [sp, #12]
 800a274:	e7d7      	b.n	800a226 <__hexnan+0x2e>
 800a276:	2a29      	cmp	r2, #41	@ 0x29
 800a278:	d157      	bne.n	800a32a <__hexnan+0x132>
 800a27a:	3102      	adds	r1, #2
 800a27c:	f8ca 1000 	str.w	r1, [sl]
 800a280:	f1bb 0f00 	cmp.w	fp, #0
 800a284:	d051      	beq.n	800a32a <__hexnan+0x132>
 800a286:	454c      	cmp	r4, r9
 800a288:	d206      	bcs.n	800a298 <__hexnan+0xa0>
 800a28a:	2d07      	cmp	r5, #7
 800a28c:	dc04      	bgt.n	800a298 <__hexnan+0xa0>
 800a28e:	462a      	mov	r2, r5
 800a290:	4649      	mov	r1, r9
 800a292:	4620      	mov	r0, r4
 800a294:	f7ff ff8a 	bl	800a1ac <L_shift>
 800a298:	4544      	cmp	r4, r8
 800a29a:	d936      	bls.n	800a30a <__hexnan+0x112>
 800a29c:	f1a8 0204 	sub.w	r2, r8, #4
 800a2a0:	4623      	mov	r3, r4
 800a2a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2aa:	429f      	cmp	r7, r3
 800a2ac:	d2f9      	bcs.n	800a2a2 <__hexnan+0xaa>
 800a2ae:	1b3b      	subs	r3, r7, r4
 800a2b0:	f023 0303 	bic.w	r3, r3, #3
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	3401      	adds	r4, #1
 800a2b8:	3e03      	subs	r6, #3
 800a2ba:	42b4      	cmp	r4, r6
 800a2bc:	bf88      	it	hi
 800a2be:	2304      	movhi	r3, #4
 800a2c0:	4443      	add	r3, r8
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f843 2b04 	str.w	r2, [r3], #4
 800a2c8:	429f      	cmp	r7, r3
 800a2ca:	d2fb      	bcs.n	800a2c4 <__hexnan+0xcc>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	b91b      	cbnz	r3, 800a2d8 <__hexnan+0xe0>
 800a2d0:	4547      	cmp	r7, r8
 800a2d2:	d128      	bne.n	800a326 <__hexnan+0x12e>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	2005      	movs	r0, #5
 800a2da:	b007      	add	sp, #28
 800a2dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e0:	3501      	adds	r5, #1
 800a2e2:	2d08      	cmp	r5, #8
 800a2e4:	f10b 0b01 	add.w	fp, fp, #1
 800a2e8:	dd06      	ble.n	800a2f8 <__hexnan+0x100>
 800a2ea:	4544      	cmp	r4, r8
 800a2ec:	d9c1      	bls.n	800a272 <__hexnan+0x7a>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2f4:	2501      	movs	r5, #1
 800a2f6:	3c04      	subs	r4, #4
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	f000 000f 	and.w	r0, r0, #15
 800a2fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a302:	6020      	str	r0, [r4, #0]
 800a304:	e7b5      	b.n	800a272 <__hexnan+0x7a>
 800a306:	2508      	movs	r5, #8
 800a308:	e7b3      	b.n	800a272 <__hexnan+0x7a>
 800a30a:	9b01      	ldr	r3, [sp, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d0dd      	beq.n	800a2cc <__hexnan+0xd4>
 800a310:	f1c3 0320 	rsb	r3, r3, #32
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	40da      	lsrs	r2, r3
 800a31a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a31e:	4013      	ands	r3, r2
 800a320:	f846 3c04 	str.w	r3, [r6, #-4]
 800a324:	e7d2      	b.n	800a2cc <__hexnan+0xd4>
 800a326:	3f04      	subs	r7, #4
 800a328:	e7d0      	b.n	800a2cc <__hexnan+0xd4>
 800a32a:	2004      	movs	r0, #4
 800a32c:	e7d5      	b.n	800a2da <__hexnan+0xe2>
	...

0800a330 <malloc>:
 800a330:	4b02      	ldr	r3, [pc, #8]	@ (800a33c <malloc+0xc>)
 800a332:	4601      	mov	r1, r0
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	f000 b825 	b.w	800a384 <_malloc_r>
 800a33a:	bf00      	nop
 800a33c:	20000230 	.word	0x20000230

0800a340 <sbrk_aligned>:
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	4e0f      	ldr	r6, [pc, #60]	@ (800a380 <sbrk_aligned+0x40>)
 800a344:	460c      	mov	r4, r1
 800a346:	6831      	ldr	r1, [r6, #0]
 800a348:	4605      	mov	r5, r0
 800a34a:	b911      	cbnz	r1, 800a352 <sbrk_aligned+0x12>
 800a34c:	f000 ff94 	bl	800b278 <_sbrk_r>
 800a350:	6030      	str	r0, [r6, #0]
 800a352:	4621      	mov	r1, r4
 800a354:	4628      	mov	r0, r5
 800a356:	f000 ff8f 	bl	800b278 <_sbrk_r>
 800a35a:	1c43      	adds	r3, r0, #1
 800a35c:	d103      	bne.n	800a366 <sbrk_aligned+0x26>
 800a35e:	f04f 34ff 	mov.w	r4, #4294967295
 800a362:	4620      	mov	r0, r4
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	1cc4      	adds	r4, r0, #3
 800a368:	f024 0403 	bic.w	r4, r4, #3
 800a36c:	42a0      	cmp	r0, r4
 800a36e:	d0f8      	beq.n	800a362 <sbrk_aligned+0x22>
 800a370:	1a21      	subs	r1, r4, r0
 800a372:	4628      	mov	r0, r5
 800a374:	f000 ff80 	bl	800b278 <_sbrk_r>
 800a378:	3001      	adds	r0, #1
 800a37a:	d1f2      	bne.n	800a362 <sbrk_aligned+0x22>
 800a37c:	e7ef      	b.n	800a35e <sbrk_aligned+0x1e>
 800a37e:	bf00      	nop
 800a380:	200010d8 	.word	0x200010d8

0800a384 <_malloc_r>:
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a388:	1ccd      	adds	r5, r1, #3
 800a38a:	f025 0503 	bic.w	r5, r5, #3
 800a38e:	3508      	adds	r5, #8
 800a390:	2d0c      	cmp	r5, #12
 800a392:	bf38      	it	cc
 800a394:	250c      	movcc	r5, #12
 800a396:	2d00      	cmp	r5, #0
 800a398:	4606      	mov	r6, r0
 800a39a:	db01      	blt.n	800a3a0 <_malloc_r+0x1c>
 800a39c:	42a9      	cmp	r1, r5
 800a39e:	d904      	bls.n	800a3aa <_malloc_r+0x26>
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	6033      	str	r3, [r6, #0]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a480 <_malloc_r+0xfc>
 800a3ae:	f000 f87b 	bl	800a4a8 <__malloc_lock>
 800a3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b6:	461c      	mov	r4, r3
 800a3b8:	bb44      	cbnz	r4, 800a40c <_malloc_r+0x88>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f7ff ffbf 	bl	800a340 <sbrk_aligned>
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	d158      	bne.n	800a47a <_malloc_r+0xf6>
 800a3c8:	f8d8 4000 	ldr.w	r4, [r8]
 800a3cc:	4627      	mov	r7, r4
 800a3ce:	2f00      	cmp	r7, #0
 800a3d0:	d143      	bne.n	800a45a <_malloc_r+0xd6>
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	d04b      	beq.n	800a46e <_malloc_r+0xea>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	4639      	mov	r1, r7
 800a3da:	4630      	mov	r0, r6
 800a3dc:	eb04 0903 	add.w	r9, r4, r3
 800a3e0:	f000 ff4a 	bl	800b278 <_sbrk_r>
 800a3e4:	4581      	cmp	r9, r0
 800a3e6:	d142      	bne.n	800a46e <_malloc_r+0xea>
 800a3e8:	6821      	ldr	r1, [r4, #0]
 800a3ea:	1a6d      	subs	r5, r5, r1
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ffa6 	bl	800a340 <sbrk_aligned>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d03a      	beq.n	800a46e <_malloc_r+0xea>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	442b      	add	r3, r5
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	bb62      	cbnz	r2, 800a460 <_malloc_r+0xdc>
 800a406:	f8c8 7000 	str.w	r7, [r8]
 800a40a:	e00f      	b.n	800a42c <_malloc_r+0xa8>
 800a40c:	6822      	ldr	r2, [r4, #0]
 800a40e:	1b52      	subs	r2, r2, r5
 800a410:	d420      	bmi.n	800a454 <_malloc_r+0xd0>
 800a412:	2a0b      	cmp	r2, #11
 800a414:	d917      	bls.n	800a446 <_malloc_r+0xc2>
 800a416:	1961      	adds	r1, r4, r5
 800a418:	42a3      	cmp	r3, r4
 800a41a:	6025      	str	r5, [r4, #0]
 800a41c:	bf18      	it	ne
 800a41e:	6059      	strne	r1, [r3, #4]
 800a420:	6863      	ldr	r3, [r4, #4]
 800a422:	bf08      	it	eq
 800a424:	f8c8 1000 	streq.w	r1, [r8]
 800a428:	5162      	str	r2, [r4, r5]
 800a42a:	604b      	str	r3, [r1, #4]
 800a42c:	4630      	mov	r0, r6
 800a42e:	f000 f841 	bl	800a4b4 <__malloc_unlock>
 800a432:	f104 000b 	add.w	r0, r4, #11
 800a436:	1d23      	adds	r3, r4, #4
 800a438:	f020 0007 	bic.w	r0, r0, #7
 800a43c:	1ac2      	subs	r2, r0, r3
 800a43e:	bf1c      	itt	ne
 800a440:	1a1b      	subne	r3, r3, r0
 800a442:	50a3      	strne	r3, [r4, r2]
 800a444:	e7af      	b.n	800a3a6 <_malloc_r+0x22>
 800a446:	6862      	ldr	r2, [r4, #4]
 800a448:	42a3      	cmp	r3, r4
 800a44a:	bf0c      	ite	eq
 800a44c:	f8c8 2000 	streq.w	r2, [r8]
 800a450:	605a      	strne	r2, [r3, #4]
 800a452:	e7eb      	b.n	800a42c <_malloc_r+0xa8>
 800a454:	4623      	mov	r3, r4
 800a456:	6864      	ldr	r4, [r4, #4]
 800a458:	e7ae      	b.n	800a3b8 <_malloc_r+0x34>
 800a45a:	463c      	mov	r4, r7
 800a45c:	687f      	ldr	r7, [r7, #4]
 800a45e:	e7b6      	b.n	800a3ce <_malloc_r+0x4a>
 800a460:	461a      	mov	r2, r3
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	42a3      	cmp	r3, r4
 800a466:	d1fb      	bne.n	800a460 <_malloc_r+0xdc>
 800a468:	2300      	movs	r3, #0
 800a46a:	6053      	str	r3, [r2, #4]
 800a46c:	e7de      	b.n	800a42c <_malloc_r+0xa8>
 800a46e:	230c      	movs	r3, #12
 800a470:	6033      	str	r3, [r6, #0]
 800a472:	4630      	mov	r0, r6
 800a474:	f000 f81e 	bl	800a4b4 <__malloc_unlock>
 800a478:	e794      	b.n	800a3a4 <_malloc_r+0x20>
 800a47a:	6005      	str	r5, [r0, #0]
 800a47c:	e7d6      	b.n	800a42c <_malloc_r+0xa8>
 800a47e:	bf00      	nop
 800a480:	200010dc 	.word	0x200010dc

0800a484 <__ascii_mbtowc>:
 800a484:	b082      	sub	sp, #8
 800a486:	b901      	cbnz	r1, 800a48a <__ascii_mbtowc+0x6>
 800a488:	a901      	add	r1, sp, #4
 800a48a:	b142      	cbz	r2, 800a49e <__ascii_mbtowc+0x1a>
 800a48c:	b14b      	cbz	r3, 800a4a2 <__ascii_mbtowc+0x1e>
 800a48e:	7813      	ldrb	r3, [r2, #0]
 800a490:	600b      	str	r3, [r1, #0]
 800a492:	7812      	ldrb	r2, [r2, #0]
 800a494:	1e10      	subs	r0, r2, #0
 800a496:	bf18      	it	ne
 800a498:	2001      	movne	r0, #1
 800a49a:	b002      	add	sp, #8
 800a49c:	4770      	bx	lr
 800a49e:	4610      	mov	r0, r2
 800a4a0:	e7fb      	b.n	800a49a <__ascii_mbtowc+0x16>
 800a4a2:	f06f 0001 	mvn.w	r0, #1
 800a4a6:	e7f8      	b.n	800a49a <__ascii_mbtowc+0x16>

0800a4a8 <__malloc_lock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	@ (800a4b0 <__malloc_lock+0x8>)
 800a4aa:	f7fe bd56 	b.w	8008f5a <__retarget_lock_acquire_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	200010d4 	.word	0x200010d4

0800a4b4 <__malloc_unlock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	@ (800a4bc <__malloc_unlock+0x8>)
 800a4b6:	f7fe bd51 	b.w	8008f5c <__retarget_lock_release_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	200010d4 	.word	0x200010d4

0800a4c0 <_Balloc>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	69c6      	ldr	r6, [r0, #28]
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	b976      	cbnz	r6, 800a4e8 <_Balloc+0x28>
 800a4ca:	2010      	movs	r0, #16
 800a4cc:	f7ff ff30 	bl	800a330 <malloc>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	61e0      	str	r0, [r4, #28]
 800a4d4:	b920      	cbnz	r0, 800a4e0 <_Balloc+0x20>
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <_Balloc+0x78>)
 800a4d8:	4818      	ldr	r0, [pc, #96]	@ (800a53c <_Balloc+0x7c>)
 800a4da:	216b      	movs	r1, #107	@ 0x6b
 800a4dc:	f000 fedc 	bl	800b298 <__assert_func>
 800a4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e4:	6006      	str	r6, [r0, #0]
 800a4e6:	60c6      	str	r6, [r0, #12]
 800a4e8:	69e6      	ldr	r6, [r4, #28]
 800a4ea:	68f3      	ldr	r3, [r6, #12]
 800a4ec:	b183      	cbz	r3, 800a510 <_Balloc+0x50>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4f6:	b9b8      	cbnz	r0, 800a528 <_Balloc+0x68>
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a4fe:	1d72      	adds	r2, r6, #5
 800a500:	0092      	lsls	r2, r2, #2
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fee6 	bl	800b2d4 <_calloc_r>
 800a508:	b160      	cbz	r0, 800a524 <_Balloc+0x64>
 800a50a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a50e:	e00e      	b.n	800a52e <_Balloc+0x6e>
 800a510:	2221      	movs	r2, #33	@ 0x21
 800a512:	2104      	movs	r1, #4
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fedd 	bl	800b2d4 <_calloc_r>
 800a51a:	69e3      	ldr	r3, [r4, #28]
 800a51c:	60f0      	str	r0, [r6, #12]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e4      	bne.n	800a4ee <_Balloc+0x2e>
 800a524:	2000      	movs	r0, #0
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	6802      	ldr	r2, [r0, #0]
 800a52a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a52e:	2300      	movs	r3, #0
 800a530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a534:	e7f7      	b.n	800a526 <_Balloc+0x66>
 800a536:	bf00      	nop
 800a538:	0800c3d2 	.word	0x0800c3d2
 800a53c:	0800c4b2 	.word	0x0800c4b2

0800a540 <_Bfree>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	69c6      	ldr	r6, [r0, #28]
 800a544:	4605      	mov	r5, r0
 800a546:	460c      	mov	r4, r1
 800a548:	b976      	cbnz	r6, 800a568 <_Bfree+0x28>
 800a54a:	2010      	movs	r0, #16
 800a54c:	f7ff fef0 	bl	800a330 <malloc>
 800a550:	4602      	mov	r2, r0
 800a552:	61e8      	str	r0, [r5, #28]
 800a554:	b920      	cbnz	r0, 800a560 <_Bfree+0x20>
 800a556:	4b09      	ldr	r3, [pc, #36]	@ (800a57c <_Bfree+0x3c>)
 800a558:	4809      	ldr	r0, [pc, #36]	@ (800a580 <_Bfree+0x40>)
 800a55a:	218f      	movs	r1, #143	@ 0x8f
 800a55c:	f000 fe9c 	bl	800b298 <__assert_func>
 800a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a564:	6006      	str	r6, [r0, #0]
 800a566:	60c6      	str	r6, [r0, #12]
 800a568:	b13c      	cbz	r4, 800a57a <_Bfree+0x3a>
 800a56a:	69eb      	ldr	r3, [r5, #28]
 800a56c:	6862      	ldr	r2, [r4, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a574:	6021      	str	r1, [r4, #0]
 800a576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	0800c3d2 	.word	0x0800c3d2
 800a580:	0800c4b2 	.word	0x0800c4b2

0800a584 <__multadd>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	690d      	ldr	r5, [r1, #16]
 800a58a:	4607      	mov	r7, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	461e      	mov	r6, r3
 800a590:	f101 0c14 	add.w	ip, r1, #20
 800a594:	2000      	movs	r0, #0
 800a596:	f8dc 3000 	ldr.w	r3, [ip]
 800a59a:	b299      	uxth	r1, r3
 800a59c:	fb02 6101 	mla	r1, r2, r1, r6
 800a5a0:	0c1e      	lsrs	r6, r3, #16
 800a5a2:	0c0b      	lsrs	r3, r1, #16
 800a5a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a5a8:	b289      	uxth	r1, r1
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5b0:	4285      	cmp	r5, r0
 800a5b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ba:	dcec      	bgt.n	800a596 <__multadd+0x12>
 800a5bc:	b30e      	cbz	r6, 800a602 <__multadd+0x7e>
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	42ab      	cmp	r3, r5
 800a5c2:	dc19      	bgt.n	800a5f8 <__multadd+0x74>
 800a5c4:	6861      	ldr	r1, [r4, #4]
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	f7ff ff79 	bl	800a4c0 <_Balloc>
 800a5ce:	4680      	mov	r8, r0
 800a5d0:	b928      	cbnz	r0, 800a5de <__multadd+0x5a>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <__multadd+0x84>)
 800a5d6:	480d      	ldr	r0, [pc, #52]	@ (800a60c <__multadd+0x88>)
 800a5d8:	21ba      	movs	r1, #186	@ 0xba
 800a5da:	f000 fe5d 	bl	800b298 <__assert_func>
 800a5de:	6922      	ldr	r2, [r4, #16]
 800a5e0:	3202      	adds	r2, #2
 800a5e2:	f104 010c 	add.w	r1, r4, #12
 800a5e6:	0092      	lsls	r2, r2, #2
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	f7fe fcb8 	bl	8008f5e <memcpy>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ffa5 	bl	800a540 <_Bfree>
 800a5f6:	4644      	mov	r4, r8
 800a5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	615e      	str	r6, [r3, #20]
 800a600:	6125      	str	r5, [r4, #16]
 800a602:	4620      	mov	r0, r4
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	0800c441 	.word	0x0800c441
 800a60c:	0800c4b2 	.word	0x0800c4b2

0800a610 <__s2b>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	4615      	mov	r5, r2
 800a618:	461f      	mov	r7, r3
 800a61a:	2209      	movs	r2, #9
 800a61c:	3308      	adds	r3, #8
 800a61e:	4606      	mov	r6, r0
 800a620:	fb93 f3f2 	sdiv	r3, r3, r2
 800a624:	2100      	movs	r1, #0
 800a626:	2201      	movs	r2, #1
 800a628:	429a      	cmp	r2, r3
 800a62a:	db09      	blt.n	800a640 <__s2b+0x30>
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff ff47 	bl	800a4c0 <_Balloc>
 800a632:	b940      	cbnz	r0, 800a646 <__s2b+0x36>
 800a634:	4602      	mov	r2, r0
 800a636:	4b19      	ldr	r3, [pc, #100]	@ (800a69c <__s2b+0x8c>)
 800a638:	4819      	ldr	r0, [pc, #100]	@ (800a6a0 <__s2b+0x90>)
 800a63a:	21d3      	movs	r1, #211	@ 0xd3
 800a63c:	f000 fe2c 	bl	800b298 <__assert_func>
 800a640:	0052      	lsls	r2, r2, #1
 800a642:	3101      	adds	r1, #1
 800a644:	e7f0      	b.n	800a628 <__s2b+0x18>
 800a646:	9b08      	ldr	r3, [sp, #32]
 800a648:	6143      	str	r3, [r0, #20]
 800a64a:	2d09      	cmp	r5, #9
 800a64c:	f04f 0301 	mov.w	r3, #1
 800a650:	6103      	str	r3, [r0, #16]
 800a652:	dd16      	ble.n	800a682 <__s2b+0x72>
 800a654:	f104 0909 	add.w	r9, r4, #9
 800a658:	46c8      	mov	r8, r9
 800a65a:	442c      	add	r4, r5
 800a65c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a660:	4601      	mov	r1, r0
 800a662:	3b30      	subs	r3, #48	@ 0x30
 800a664:	220a      	movs	r2, #10
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ff8c 	bl	800a584 <__multadd>
 800a66c:	45a0      	cmp	r8, r4
 800a66e:	d1f5      	bne.n	800a65c <__s2b+0x4c>
 800a670:	f1a5 0408 	sub.w	r4, r5, #8
 800a674:	444c      	add	r4, r9
 800a676:	1b2d      	subs	r5, r5, r4
 800a678:	1963      	adds	r3, r4, r5
 800a67a:	42bb      	cmp	r3, r7
 800a67c:	db04      	blt.n	800a688 <__s2b+0x78>
 800a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a682:	340a      	adds	r4, #10
 800a684:	2509      	movs	r5, #9
 800a686:	e7f6      	b.n	800a676 <__s2b+0x66>
 800a688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a68c:	4601      	mov	r1, r0
 800a68e:	3b30      	subs	r3, #48	@ 0x30
 800a690:	220a      	movs	r2, #10
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ff76 	bl	800a584 <__multadd>
 800a698:	e7ee      	b.n	800a678 <__s2b+0x68>
 800a69a:	bf00      	nop
 800a69c:	0800c441 	.word	0x0800c441
 800a6a0:	0800c4b2 	.word	0x0800c4b2

0800a6a4 <__hi0bits>:
 800a6a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	bf36      	itet	cc
 800a6ac:	0403      	lslcc	r3, r0, #16
 800a6ae:	2000      	movcs	r0, #0
 800a6b0:	2010      	movcc	r0, #16
 800a6b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6b6:	bf3c      	itt	cc
 800a6b8:	021b      	lslcc	r3, r3, #8
 800a6ba:	3008      	addcc	r0, #8
 800a6bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c0:	bf3c      	itt	cc
 800a6c2:	011b      	lslcc	r3, r3, #4
 800a6c4:	3004      	addcc	r0, #4
 800a6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ca:	bf3c      	itt	cc
 800a6cc:	009b      	lslcc	r3, r3, #2
 800a6ce:	3002      	addcc	r0, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	db05      	blt.n	800a6e0 <__hi0bits+0x3c>
 800a6d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6d8:	f100 0001 	add.w	r0, r0, #1
 800a6dc:	bf08      	it	eq
 800a6de:	2020      	moveq	r0, #32
 800a6e0:	4770      	bx	lr

0800a6e2 <__lo0bits>:
 800a6e2:	6803      	ldr	r3, [r0, #0]
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f013 0007 	ands.w	r0, r3, #7
 800a6ea:	d00b      	beq.n	800a704 <__lo0bits+0x22>
 800a6ec:	07d9      	lsls	r1, r3, #31
 800a6ee:	d421      	bmi.n	800a734 <__lo0bits+0x52>
 800a6f0:	0798      	lsls	r0, r3, #30
 800a6f2:	bf49      	itett	mi
 800a6f4:	085b      	lsrmi	r3, r3, #1
 800a6f6:	089b      	lsrpl	r3, r3, #2
 800a6f8:	2001      	movmi	r0, #1
 800a6fa:	6013      	strmi	r3, [r2, #0]
 800a6fc:	bf5c      	itt	pl
 800a6fe:	6013      	strpl	r3, [r2, #0]
 800a700:	2002      	movpl	r0, #2
 800a702:	4770      	bx	lr
 800a704:	b299      	uxth	r1, r3
 800a706:	b909      	cbnz	r1, 800a70c <__lo0bits+0x2a>
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	2010      	movs	r0, #16
 800a70c:	b2d9      	uxtb	r1, r3
 800a70e:	b909      	cbnz	r1, 800a714 <__lo0bits+0x32>
 800a710:	3008      	adds	r0, #8
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	0719      	lsls	r1, r3, #28
 800a716:	bf04      	itt	eq
 800a718:	091b      	lsreq	r3, r3, #4
 800a71a:	3004      	addeq	r0, #4
 800a71c:	0799      	lsls	r1, r3, #30
 800a71e:	bf04      	itt	eq
 800a720:	089b      	lsreq	r3, r3, #2
 800a722:	3002      	addeq	r0, #2
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	d403      	bmi.n	800a730 <__lo0bits+0x4e>
 800a728:	085b      	lsrs	r3, r3, #1
 800a72a:	f100 0001 	add.w	r0, r0, #1
 800a72e:	d003      	beq.n	800a738 <__lo0bits+0x56>
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	4770      	bx	lr
 800a734:	2000      	movs	r0, #0
 800a736:	4770      	bx	lr
 800a738:	2020      	movs	r0, #32
 800a73a:	4770      	bx	lr

0800a73c <__i2b>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	2101      	movs	r1, #1
 800a742:	f7ff febd 	bl	800a4c0 <_Balloc>
 800a746:	4602      	mov	r2, r0
 800a748:	b928      	cbnz	r0, 800a756 <__i2b+0x1a>
 800a74a:	4b05      	ldr	r3, [pc, #20]	@ (800a760 <__i2b+0x24>)
 800a74c:	4805      	ldr	r0, [pc, #20]	@ (800a764 <__i2b+0x28>)
 800a74e:	f240 1145 	movw	r1, #325	@ 0x145
 800a752:	f000 fda1 	bl	800b298 <__assert_func>
 800a756:	2301      	movs	r3, #1
 800a758:	6144      	str	r4, [r0, #20]
 800a75a:	6103      	str	r3, [r0, #16]
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	bf00      	nop
 800a760:	0800c441 	.word	0x0800c441
 800a764:	0800c4b2 	.word	0x0800c4b2

0800a768 <__multiply>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	4614      	mov	r4, r2
 800a76e:	690a      	ldr	r2, [r1, #16]
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	bfa8      	it	ge
 800a776:	4623      	movge	r3, r4
 800a778:	460f      	mov	r7, r1
 800a77a:	bfa4      	itt	ge
 800a77c:	460c      	movge	r4, r1
 800a77e:	461f      	movge	r7, r3
 800a780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a784:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	6861      	ldr	r1, [r4, #4]
 800a78c:	eb0a 0609 	add.w	r6, sl, r9
 800a790:	42b3      	cmp	r3, r6
 800a792:	b085      	sub	sp, #20
 800a794:	bfb8      	it	lt
 800a796:	3101      	addlt	r1, #1
 800a798:	f7ff fe92 	bl	800a4c0 <_Balloc>
 800a79c:	b930      	cbnz	r0, 800a7ac <__multiply+0x44>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	4b44      	ldr	r3, [pc, #272]	@ (800a8b4 <__multiply+0x14c>)
 800a7a2:	4845      	ldr	r0, [pc, #276]	@ (800a8b8 <__multiply+0x150>)
 800a7a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a7a8:	f000 fd76 	bl	800b298 <__assert_func>
 800a7ac:	f100 0514 	add.w	r5, r0, #20
 800a7b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4543      	cmp	r3, r8
 800a7ba:	d321      	bcc.n	800a800 <__multiply+0x98>
 800a7bc:	f107 0114 	add.w	r1, r7, #20
 800a7c0:	f104 0214 	add.w	r2, r4, #20
 800a7c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a7c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a7cc:	9302      	str	r3, [sp, #8]
 800a7ce:	1b13      	subs	r3, r2, r4
 800a7d0:	3b15      	subs	r3, #21
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	f104 0715 	add.w	r7, r4, #21
 800a7dc:	42ba      	cmp	r2, r7
 800a7de:	bf38      	it	cc
 800a7e0:	2304      	movcc	r3, #4
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	9b02      	ldr	r3, [sp, #8]
 800a7e6:	9103      	str	r1, [sp, #12]
 800a7e8:	428b      	cmp	r3, r1
 800a7ea:	d80c      	bhi.n	800a806 <__multiply+0x9e>
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	dd03      	ble.n	800a7f8 <__multiply+0x90>
 800a7f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d05b      	beq.n	800a8b0 <__multiply+0x148>
 800a7f8:	6106      	str	r6, [r0, #16]
 800a7fa:	b005      	add	sp, #20
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	f843 2b04 	str.w	r2, [r3], #4
 800a804:	e7d8      	b.n	800a7b8 <__multiply+0x50>
 800a806:	f8b1 a000 	ldrh.w	sl, [r1]
 800a80a:	f1ba 0f00 	cmp.w	sl, #0
 800a80e:	d024      	beq.n	800a85a <__multiply+0xf2>
 800a810:	f104 0e14 	add.w	lr, r4, #20
 800a814:	46a9      	mov	r9, r5
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a81e:	f8d9 3000 	ldr.w	r3, [r9]
 800a822:	fa1f fb87 	uxth.w	fp, r7
 800a826:	b29b      	uxth	r3, r3
 800a828:	fb0a 330b 	mla	r3, sl, fp, r3
 800a82c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a830:	f8d9 7000 	ldr.w	r7, [r9]
 800a834:	4463      	add	r3, ip
 800a836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a83a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a83e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a842:	b29b      	uxth	r3, r3
 800a844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a848:	4572      	cmp	r2, lr
 800a84a:	f849 3b04 	str.w	r3, [r9], #4
 800a84e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a852:	d8e2      	bhi.n	800a81a <__multiply+0xb2>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f845 c003 	str.w	ip, [r5, r3]
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a860:	3104      	adds	r1, #4
 800a862:	f1b9 0f00 	cmp.w	r9, #0
 800a866:	d021      	beq.n	800a8ac <__multiply+0x144>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	f104 0c14 	add.w	ip, r4, #20
 800a86e:	46ae      	mov	lr, r5
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	f8bc b000 	ldrh.w	fp, [ip]
 800a878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a87c:	fb09 770b 	mla	r7, r9, fp, r7
 800a880:	4457      	add	r7, sl
 800a882:	b29b      	uxth	r3, r3
 800a884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a888:	f84e 3b04 	str.w	r3, [lr], #4
 800a88c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a894:	f8be 3000 	ldrh.w	r3, [lr]
 800a898:	fb09 330a 	mla	r3, r9, sl, r3
 800a89c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a8a0:	4562      	cmp	r2, ip
 800a8a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8a6:	d8e5      	bhi.n	800a874 <__multiply+0x10c>
 800a8a8:	9f01      	ldr	r7, [sp, #4]
 800a8aa:	51eb      	str	r3, [r5, r7]
 800a8ac:	3504      	adds	r5, #4
 800a8ae:	e799      	b.n	800a7e4 <__multiply+0x7c>
 800a8b0:	3e01      	subs	r6, #1
 800a8b2:	e79b      	b.n	800a7ec <__multiply+0x84>
 800a8b4:	0800c441 	.word	0x0800c441
 800a8b8:	0800c4b2 	.word	0x0800c4b2

0800a8bc <__pow5mult>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	4615      	mov	r5, r2
 800a8c2:	f012 0203 	ands.w	r2, r2, #3
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	460e      	mov	r6, r1
 800a8ca:	d007      	beq.n	800a8dc <__pow5mult+0x20>
 800a8cc:	4c25      	ldr	r4, [pc, #148]	@ (800a964 <__pow5mult+0xa8>)
 800a8ce:	3a01      	subs	r2, #1
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8d6:	f7ff fe55 	bl	800a584 <__multadd>
 800a8da:	4606      	mov	r6, r0
 800a8dc:	10ad      	asrs	r5, r5, #2
 800a8de:	d03d      	beq.n	800a95c <__pow5mult+0xa0>
 800a8e0:	69fc      	ldr	r4, [r7, #28]
 800a8e2:	b97c      	cbnz	r4, 800a904 <__pow5mult+0x48>
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f7ff fd23 	bl	800a330 <malloc>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	61f8      	str	r0, [r7, #28]
 800a8ee:	b928      	cbnz	r0, 800a8fc <__pow5mult+0x40>
 800a8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a968 <__pow5mult+0xac>)
 800a8f2:	481e      	ldr	r0, [pc, #120]	@ (800a96c <__pow5mult+0xb0>)
 800a8f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8f8:	f000 fcce 	bl	800b298 <__assert_func>
 800a8fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a900:	6004      	str	r4, [r0, #0]
 800a902:	60c4      	str	r4, [r0, #12]
 800a904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a90c:	b94c      	cbnz	r4, 800a922 <__pow5mult+0x66>
 800a90e:	f240 2171 	movw	r1, #625	@ 0x271
 800a912:	4638      	mov	r0, r7
 800a914:	f7ff ff12 	bl	800a73c <__i2b>
 800a918:	2300      	movs	r3, #0
 800a91a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a91e:	4604      	mov	r4, r0
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	07eb      	lsls	r3, r5, #31
 800a928:	d50a      	bpl.n	800a940 <__pow5mult+0x84>
 800a92a:	4631      	mov	r1, r6
 800a92c:	4622      	mov	r2, r4
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ff1a 	bl	800a768 <__multiply>
 800a934:	4631      	mov	r1, r6
 800a936:	4680      	mov	r8, r0
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff fe01 	bl	800a540 <_Bfree>
 800a93e:	4646      	mov	r6, r8
 800a940:	106d      	asrs	r5, r5, #1
 800a942:	d00b      	beq.n	800a95c <__pow5mult+0xa0>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	b938      	cbnz	r0, 800a958 <__pow5mult+0x9c>
 800a948:	4622      	mov	r2, r4
 800a94a:	4621      	mov	r1, r4
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff ff0b 	bl	800a768 <__multiply>
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f8c0 9000 	str.w	r9, [r0]
 800a958:	4604      	mov	r4, r0
 800a95a:	e7e4      	b.n	800a926 <__pow5mult+0x6a>
 800a95c:	4630      	mov	r0, r6
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a962:	bf00      	nop
 800a964:	0800c50c 	.word	0x0800c50c
 800a968:	0800c3d2 	.word	0x0800c3d2
 800a96c:	0800c4b2 	.word	0x0800c4b2

0800a970 <__lshift>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	460c      	mov	r4, r1
 800a976:	6849      	ldr	r1, [r1, #4]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	4607      	mov	r7, r0
 800a982:	4691      	mov	r9, r2
 800a984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a988:	f108 0601 	add.w	r6, r8, #1
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	db0b      	blt.n	800a9a8 <__lshift+0x38>
 800a990:	4638      	mov	r0, r7
 800a992:	f7ff fd95 	bl	800a4c0 <_Balloc>
 800a996:	4605      	mov	r5, r0
 800a998:	b948      	cbnz	r0, 800a9ae <__lshift+0x3e>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b28      	ldr	r3, [pc, #160]	@ (800aa40 <__lshift+0xd0>)
 800a99e:	4829      	ldr	r0, [pc, #164]	@ (800aa44 <__lshift+0xd4>)
 800a9a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a9a4:	f000 fc78 	bl	800b298 <__assert_func>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	e7ee      	b.n	800a98c <__lshift+0x1c>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f100 0114 	add.w	r1, r0, #20
 800a9b4:	f100 0210 	add.w	r2, r0, #16
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4553      	cmp	r3, sl
 800a9bc:	db33      	blt.n	800aa26 <__lshift+0xb6>
 800a9be:	6920      	ldr	r0, [r4, #16]
 800a9c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9c4:	f104 0314 	add.w	r3, r4, #20
 800a9c8:	f019 091f 	ands.w	r9, r9, #31
 800a9cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9d4:	d02b      	beq.n	800aa2e <__lshift+0xbe>
 800a9d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9da:	468a      	mov	sl, r1
 800a9dc:	2200      	movs	r2, #0
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9e4:	4310      	orrs	r0, r2
 800a9e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ee:	459c      	cmp	ip, r3
 800a9f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9f4:	d8f3      	bhi.n	800a9de <__lshift+0x6e>
 800a9f6:	ebac 0304 	sub.w	r3, ip, r4
 800a9fa:	3b15      	subs	r3, #21
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	3304      	adds	r3, #4
 800aa02:	f104 0015 	add.w	r0, r4, #21
 800aa06:	4584      	cmp	ip, r0
 800aa08:	bf38      	it	cc
 800aa0a:	2304      	movcc	r3, #4
 800aa0c:	50ca      	str	r2, [r1, r3]
 800aa0e:	b10a      	cbz	r2, 800aa14 <__lshift+0xa4>
 800aa10:	f108 0602 	add.w	r6, r8, #2
 800aa14:	3e01      	subs	r6, #1
 800aa16:	4638      	mov	r0, r7
 800aa18:	612e      	str	r6, [r5, #16]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	f7ff fd90 	bl	800a540 <_Bfree>
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	e7c5      	b.n	800a9ba <__lshift+0x4a>
 800aa2e:	3904      	subs	r1, #4
 800aa30:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa34:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa38:	459c      	cmp	ip, r3
 800aa3a:	d8f9      	bhi.n	800aa30 <__lshift+0xc0>
 800aa3c:	e7ea      	b.n	800aa14 <__lshift+0xa4>
 800aa3e:	bf00      	nop
 800aa40:	0800c441 	.word	0x0800c441
 800aa44:	0800c4b2 	.word	0x0800c4b2

0800aa48 <__mcmp>:
 800aa48:	690a      	ldr	r2, [r1, #16]
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6900      	ldr	r0, [r0, #16]
 800aa4e:	1a80      	subs	r0, r0, r2
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	d10e      	bne.n	800aa72 <__mcmp+0x2a>
 800aa54:	3314      	adds	r3, #20
 800aa56:	3114      	adds	r1, #20
 800aa58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa68:	4295      	cmp	r5, r2
 800aa6a:	d003      	beq.n	800aa74 <__mcmp+0x2c>
 800aa6c:	d205      	bcs.n	800aa7a <__mcmp+0x32>
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	bd30      	pop	{r4, r5, pc}
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d3f3      	bcc.n	800aa60 <__mcmp+0x18>
 800aa78:	e7fb      	b.n	800aa72 <__mcmp+0x2a>
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	e7f9      	b.n	800aa72 <__mcmp+0x2a>
	...

0800aa80 <__mdiff>:
 800aa80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4689      	mov	r9, r1
 800aa86:	4606      	mov	r6, r0
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4648      	mov	r0, r9
 800aa8c:	4614      	mov	r4, r2
 800aa8e:	f7ff ffdb 	bl	800aa48 <__mcmp>
 800aa92:	1e05      	subs	r5, r0, #0
 800aa94:	d112      	bne.n	800aabc <__mdiff+0x3c>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff fd11 	bl	800a4c0 <_Balloc>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	b928      	cbnz	r0, 800aaae <__mdiff+0x2e>
 800aaa2:	4b3f      	ldr	r3, [pc, #252]	@ (800aba0 <__mdiff+0x120>)
 800aaa4:	f240 2137 	movw	r1, #567	@ 0x237
 800aaa8:	483e      	ldr	r0, [pc, #248]	@ (800aba4 <__mdiff+0x124>)
 800aaaa:	f000 fbf5 	bl	800b298 <__assert_func>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aab4:	4610      	mov	r0, r2
 800aab6:	b003      	add	sp, #12
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	bfbc      	itt	lt
 800aabe:	464b      	movlt	r3, r9
 800aac0:	46a1      	movlt	r9, r4
 800aac2:	4630      	mov	r0, r6
 800aac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aac8:	bfba      	itte	lt
 800aaca:	461c      	movlt	r4, r3
 800aacc:	2501      	movlt	r5, #1
 800aace:	2500      	movge	r5, #0
 800aad0:	f7ff fcf6 	bl	800a4c0 <_Balloc>
 800aad4:	4602      	mov	r2, r0
 800aad6:	b918      	cbnz	r0, 800aae0 <__mdiff+0x60>
 800aad8:	4b31      	ldr	r3, [pc, #196]	@ (800aba0 <__mdiff+0x120>)
 800aada:	f240 2145 	movw	r1, #581	@ 0x245
 800aade:	e7e3      	b.n	800aaa8 <__mdiff+0x28>
 800aae0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aae4:	6926      	ldr	r6, [r4, #16]
 800aae6:	60c5      	str	r5, [r0, #12]
 800aae8:	f109 0310 	add.w	r3, r9, #16
 800aaec:	f109 0514 	add.w	r5, r9, #20
 800aaf0:	f104 0e14 	add.w	lr, r4, #20
 800aaf4:	f100 0b14 	add.w	fp, r0, #20
 800aaf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aafc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	46d9      	mov	r9, fp
 800ab04:	f04f 0c00 	mov.w	ip, #0
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	fa1f f38a 	uxth.w	r3, sl
 800ab18:	4619      	mov	r1, r3
 800ab1a:	b283      	uxth	r3, r0
 800ab1c:	1acb      	subs	r3, r1, r3
 800ab1e:	0c00      	lsrs	r0, r0, #16
 800ab20:	4463      	add	r3, ip
 800ab22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab30:	4576      	cmp	r6, lr
 800ab32:	f849 3b04 	str.w	r3, [r9], #4
 800ab36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab3a:	d8e5      	bhi.n	800ab08 <__mdiff+0x88>
 800ab3c:	1b33      	subs	r3, r6, r4
 800ab3e:	3b15      	subs	r3, #21
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	3415      	adds	r4, #21
 800ab46:	3304      	adds	r3, #4
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	bf38      	it	cc
 800ab4c:	2304      	movcc	r3, #4
 800ab4e:	441d      	add	r5, r3
 800ab50:	445b      	add	r3, fp
 800ab52:	461e      	mov	r6, r3
 800ab54:	462c      	mov	r4, r5
 800ab56:	4544      	cmp	r4, r8
 800ab58:	d30e      	bcc.n	800ab78 <__mdiff+0xf8>
 800ab5a:	f108 0103 	add.w	r1, r8, #3
 800ab5e:	1b49      	subs	r1, r1, r5
 800ab60:	f021 0103 	bic.w	r1, r1, #3
 800ab64:	3d03      	subs	r5, #3
 800ab66:	45a8      	cmp	r8, r5
 800ab68:	bf38      	it	cc
 800ab6a:	2100      	movcc	r1, #0
 800ab6c:	440b      	add	r3, r1
 800ab6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab72:	b191      	cbz	r1, 800ab9a <__mdiff+0x11a>
 800ab74:	6117      	str	r7, [r2, #16]
 800ab76:	e79d      	b.n	800aab4 <__mdiff+0x34>
 800ab78:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab7c:	46e6      	mov	lr, ip
 800ab7e:	0c08      	lsrs	r0, r1, #16
 800ab80:	fa1c fc81 	uxtah	ip, ip, r1
 800ab84:	4471      	add	r1, lr
 800ab86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab8a:	b289      	uxth	r1, r1
 800ab8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab90:	f846 1b04 	str.w	r1, [r6], #4
 800ab94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab98:	e7dd      	b.n	800ab56 <__mdiff+0xd6>
 800ab9a:	3f01      	subs	r7, #1
 800ab9c:	e7e7      	b.n	800ab6e <__mdiff+0xee>
 800ab9e:	bf00      	nop
 800aba0:	0800c441 	.word	0x0800c441
 800aba4:	0800c4b2 	.word	0x0800c4b2

0800aba8 <__ulp>:
 800aba8:	b082      	sub	sp, #8
 800abaa:	ed8d 0b00 	vstr	d0, [sp]
 800abae:	9a01      	ldr	r2, [sp, #4]
 800abb0:	4b0f      	ldr	r3, [pc, #60]	@ (800abf0 <__ulp+0x48>)
 800abb2:	4013      	ands	r3, r2
 800abb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc08      	bgt.n	800abce <__ulp+0x26>
 800abbc:	425b      	negs	r3, r3
 800abbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800abc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abc6:	da04      	bge.n	800abd2 <__ulp+0x2a>
 800abc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800abcc:	4113      	asrs	r3, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	e008      	b.n	800abe4 <__ulp+0x3c>
 800abd2:	f1a2 0314 	sub.w	r3, r2, #20
 800abd6:	2b1e      	cmp	r3, #30
 800abd8:	bfda      	itte	le
 800abda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800abde:	40da      	lsrle	r2, r3
 800abe0:	2201      	movgt	r2, #1
 800abe2:	2300      	movs	r3, #0
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	b002      	add	sp, #8
 800abee:	4770      	bx	lr
 800abf0:	7ff00000 	.word	0x7ff00000

0800abf4 <__b2d>:
 800abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf8:	6906      	ldr	r6, [r0, #16]
 800abfa:	f100 0814 	add.w	r8, r0, #20
 800abfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac02:	1f37      	subs	r7, r6, #4
 800ac04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f7ff fd4b 	bl	800a6a4 <__hi0bits>
 800ac0e:	f1c0 0320 	rsb	r3, r0, #32
 800ac12:	280a      	cmp	r0, #10
 800ac14:	600b      	str	r3, [r1, #0]
 800ac16:	491b      	ldr	r1, [pc, #108]	@ (800ac84 <__b2d+0x90>)
 800ac18:	dc15      	bgt.n	800ac46 <__b2d+0x52>
 800ac1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac22:	45b8      	cmp	r8, r7
 800ac24:	ea43 0501 	orr.w	r5, r3, r1
 800ac28:	bf34      	ite	cc
 800ac2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac2e:	2300      	movcs	r3, #0
 800ac30:	3015      	adds	r0, #21
 800ac32:	fa02 f000 	lsl.w	r0, r2, r0
 800ac36:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac3a:	4303      	orrs	r3, r0
 800ac3c:	461c      	mov	r4, r3
 800ac3e:	ec45 4b10 	vmov	d0, r4, r5
 800ac42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac46:	45b8      	cmp	r8, r7
 800ac48:	bf3a      	itte	cc
 800ac4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac52:	2300      	movcs	r3, #0
 800ac54:	380b      	subs	r0, #11
 800ac56:	d012      	beq.n	800ac7e <__b2d+0x8a>
 800ac58:	f1c0 0120 	rsb	r1, r0, #32
 800ac5c:	fa23 f401 	lsr.w	r4, r3, r1
 800ac60:	4082      	lsls	r2, r0
 800ac62:	4322      	orrs	r2, r4
 800ac64:	4547      	cmp	r7, r8
 800ac66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac6a:	bf8c      	ite	hi
 800ac6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac70:	2200      	movls	r2, #0
 800ac72:	4083      	lsls	r3, r0
 800ac74:	40ca      	lsrs	r2, r1
 800ac76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	e7de      	b.n	800ac3c <__b2d+0x48>
 800ac7e:	ea42 0501 	orr.w	r5, r2, r1
 800ac82:	e7db      	b.n	800ac3c <__b2d+0x48>
 800ac84:	3ff00000 	.word	0x3ff00000

0800ac88 <__d2b>:
 800ac88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	2101      	movs	r1, #1
 800ac90:	ec59 8b10 	vmov	r8, r9, d0
 800ac94:	4616      	mov	r6, r2
 800ac96:	f7ff fc13 	bl	800a4c0 <_Balloc>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	b930      	cbnz	r0, 800acac <__d2b+0x24>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	4b23      	ldr	r3, [pc, #140]	@ (800ad30 <__d2b+0xa8>)
 800aca2:	4824      	ldr	r0, [pc, #144]	@ (800ad34 <__d2b+0xac>)
 800aca4:	f240 310f 	movw	r1, #783	@ 0x30f
 800aca8:	f000 faf6 	bl	800b298 <__assert_func>
 800acac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb4:	b10d      	cbz	r5, 800acba <__d2b+0x32>
 800acb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	f1b8 0300 	subs.w	r3, r8, #0
 800acc0:	d023      	beq.n	800ad0a <__d2b+0x82>
 800acc2:	4668      	mov	r0, sp
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	f7ff fd0c 	bl	800a6e2 <__lo0bits>
 800acca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acce:	b1d0      	cbz	r0, 800ad06 <__d2b+0x7e>
 800acd0:	f1c0 0320 	rsb	r3, r0, #32
 800acd4:	fa02 f303 	lsl.w	r3, r2, r3
 800acd8:	430b      	orrs	r3, r1
 800acda:	40c2      	lsrs	r2, r0
 800acdc:	6163      	str	r3, [r4, #20]
 800acde:	9201      	str	r2, [sp, #4]
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	61a3      	str	r3, [r4, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bf0c      	ite	eq
 800ace8:	2201      	moveq	r2, #1
 800acea:	2202      	movne	r2, #2
 800acec:	6122      	str	r2, [r4, #16]
 800acee:	b1a5      	cbz	r5, 800ad1a <__d2b+0x92>
 800acf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acf4:	4405      	add	r5, r0
 800acf6:	603d      	str	r5, [r7, #0]
 800acf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acfc:	6030      	str	r0, [r6, #0]
 800acfe:	4620      	mov	r0, r4
 800ad00:	b003      	add	sp, #12
 800ad02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad06:	6161      	str	r1, [r4, #20]
 800ad08:	e7ea      	b.n	800ace0 <__d2b+0x58>
 800ad0a:	a801      	add	r0, sp, #4
 800ad0c:	f7ff fce9 	bl	800a6e2 <__lo0bits>
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	6163      	str	r3, [r4, #20]
 800ad14:	3020      	adds	r0, #32
 800ad16:	2201      	movs	r2, #1
 800ad18:	e7e8      	b.n	800acec <__d2b+0x64>
 800ad1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad22:	6038      	str	r0, [r7, #0]
 800ad24:	6918      	ldr	r0, [r3, #16]
 800ad26:	f7ff fcbd 	bl	800a6a4 <__hi0bits>
 800ad2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad2e:	e7e5      	b.n	800acfc <__d2b+0x74>
 800ad30:	0800c441 	.word	0x0800c441
 800ad34:	0800c4b2 	.word	0x0800c4b2

0800ad38 <__ratio>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	e9cd 1000 	strd	r1, r0, [sp]
 800ad42:	a902      	add	r1, sp, #8
 800ad44:	f7ff ff56 	bl	800abf4 <__b2d>
 800ad48:	9800      	ldr	r0, [sp, #0]
 800ad4a:	a903      	add	r1, sp, #12
 800ad4c:	ec55 4b10 	vmov	r4, r5, d0
 800ad50:	f7ff ff50 	bl	800abf4 <__b2d>
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	6919      	ldr	r1, [r3, #16]
 800ad58:	9b00      	ldr	r3, [sp, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	1ac9      	subs	r1, r1, r3
 800ad5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	ec5b ab10 	vmov	sl, fp, d0
 800ad68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bfce      	itee	gt
 800ad70:	462a      	movgt	r2, r5
 800ad72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad76:	465a      	movle	r2, fp
 800ad78:	462f      	mov	r7, r5
 800ad7a:	46d9      	mov	r9, fp
 800ad7c:	bfcc      	ite	gt
 800ad7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad86:	464b      	mov	r3, r9
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fd7d 	bl	800088c <__aeabi_ddiv>
 800ad92:	ec41 0b10 	vmov	d0, r0, r1
 800ad96:	b005      	add	sp, #20
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad9c <__copybits>:
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	b570      	push	{r4, r5, r6, lr}
 800ada0:	1149      	asrs	r1, r1, #5
 800ada2:	6914      	ldr	r4, [r2, #16]
 800ada4:	3101      	adds	r1, #1
 800ada6:	f102 0314 	add.w	r3, r2, #20
 800adaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adb2:	1f05      	subs	r5, r0, #4
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	d30c      	bcc.n	800add2 <__copybits+0x36>
 800adb8:	1aa3      	subs	r3, r4, r2
 800adba:	3b11      	subs	r3, #17
 800adbc:	f023 0303 	bic.w	r3, r3, #3
 800adc0:	3211      	adds	r2, #17
 800adc2:	42a2      	cmp	r2, r4
 800adc4:	bf88      	it	hi
 800adc6:	2300      	movhi	r3, #0
 800adc8:	4418      	add	r0, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	4288      	cmp	r0, r1
 800adce:	d305      	bcc.n	800addc <__copybits+0x40>
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	f853 6b04 	ldr.w	r6, [r3], #4
 800add6:	f845 6f04 	str.w	r6, [r5, #4]!
 800adda:	e7eb      	b.n	800adb4 <__copybits+0x18>
 800addc:	f840 3b04 	str.w	r3, [r0], #4
 800ade0:	e7f4      	b.n	800adcc <__copybits+0x30>

0800ade2 <__any_on>:
 800ade2:	f100 0214 	add.w	r2, r0, #20
 800ade6:	6900      	ldr	r0, [r0, #16]
 800ade8:	114b      	asrs	r3, r1, #5
 800adea:	4298      	cmp	r0, r3
 800adec:	b510      	push	{r4, lr}
 800adee:	db11      	blt.n	800ae14 <__any_on+0x32>
 800adf0:	dd0a      	ble.n	800ae08 <__any_on+0x26>
 800adf2:	f011 011f 	ands.w	r1, r1, #31
 800adf6:	d007      	beq.n	800ae08 <__any_on+0x26>
 800adf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adfc:	fa24 f001 	lsr.w	r0, r4, r1
 800ae00:	fa00 f101 	lsl.w	r1, r0, r1
 800ae04:	428c      	cmp	r4, r1
 800ae06:	d10b      	bne.n	800ae20 <__any_on+0x3e>
 800ae08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d803      	bhi.n	800ae18 <__any_on+0x36>
 800ae10:	2000      	movs	r0, #0
 800ae12:	bd10      	pop	{r4, pc}
 800ae14:	4603      	mov	r3, r0
 800ae16:	e7f7      	b.n	800ae08 <__any_on+0x26>
 800ae18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d0f5      	beq.n	800ae0c <__any_on+0x2a>
 800ae20:	2001      	movs	r0, #1
 800ae22:	e7f6      	b.n	800ae12 <__any_on+0x30>

0800ae24 <__ascii_wctomb>:
 800ae24:	4603      	mov	r3, r0
 800ae26:	4608      	mov	r0, r1
 800ae28:	b141      	cbz	r1, 800ae3c <__ascii_wctomb+0x18>
 800ae2a:	2aff      	cmp	r2, #255	@ 0xff
 800ae2c:	d904      	bls.n	800ae38 <__ascii_wctomb+0x14>
 800ae2e:	228a      	movs	r2, #138	@ 0x8a
 800ae30:	601a      	str	r2, [r3, #0]
 800ae32:	f04f 30ff 	mov.w	r0, #4294967295
 800ae36:	4770      	bx	lr
 800ae38:	700a      	strb	r2, [r1, #0]
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	4770      	bx	lr

0800ae3e <__ssputs_r>:
 800ae3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae42:	688e      	ldr	r6, [r1, #8]
 800ae44:	461f      	mov	r7, r3
 800ae46:	42be      	cmp	r6, r7
 800ae48:	680b      	ldr	r3, [r1, #0]
 800ae4a:	4682      	mov	sl, r0
 800ae4c:	460c      	mov	r4, r1
 800ae4e:	4690      	mov	r8, r2
 800ae50:	d82d      	bhi.n	800aeae <__ssputs_r+0x70>
 800ae52:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae56:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae5a:	d026      	beq.n	800aeaa <__ssputs_r+0x6c>
 800ae5c:	6965      	ldr	r5, [r4, #20]
 800ae5e:	6909      	ldr	r1, [r1, #16]
 800ae60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae64:	eba3 0901 	sub.w	r9, r3, r1
 800ae68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae6c:	1c7b      	adds	r3, r7, #1
 800ae6e:	444b      	add	r3, r9
 800ae70:	106d      	asrs	r5, r5, #1
 800ae72:	429d      	cmp	r5, r3
 800ae74:	bf38      	it	cc
 800ae76:	461d      	movcc	r5, r3
 800ae78:	0553      	lsls	r3, r2, #21
 800ae7a:	d527      	bpl.n	800aecc <__ssputs_r+0x8e>
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	f7ff fa81 	bl	800a384 <_malloc_r>
 800ae82:	4606      	mov	r6, r0
 800ae84:	b360      	cbz	r0, 800aee0 <__ssputs_r+0xa2>
 800ae86:	6921      	ldr	r1, [r4, #16]
 800ae88:	464a      	mov	r2, r9
 800ae8a:	f7fe f868 	bl	8008f5e <memcpy>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ae94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	6126      	str	r6, [r4, #16]
 800ae9c:	6165      	str	r5, [r4, #20]
 800ae9e:	444e      	add	r6, r9
 800aea0:	eba5 0509 	sub.w	r5, r5, r9
 800aea4:	6026      	str	r6, [r4, #0]
 800aea6:	60a5      	str	r5, [r4, #8]
 800aea8:	463e      	mov	r6, r7
 800aeaa:	42be      	cmp	r6, r7
 800aeac:	d900      	bls.n	800aeb0 <__ssputs_r+0x72>
 800aeae:	463e      	mov	r6, r7
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	4632      	mov	r2, r6
 800aeb4:	4641      	mov	r1, r8
 800aeb6:	f000 f9c5 	bl	800b244 <memmove>
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	1b9b      	subs	r3, r3, r6
 800aebe:	60a3      	str	r3, [r4, #8]
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	4433      	add	r3, r6
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	2000      	movs	r0, #0
 800aec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aecc:	462a      	mov	r2, r5
 800aece:	f000 fa15 	bl	800b2fc <_realloc_r>
 800aed2:	4606      	mov	r6, r0
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d1e0      	bne.n	800ae9a <__ssputs_r+0x5c>
 800aed8:	6921      	ldr	r1, [r4, #16]
 800aeda:	4650      	mov	r0, sl
 800aedc:	f7fe fea4 	bl	8009c28 <_free_r>
 800aee0:	230c      	movs	r3, #12
 800aee2:	f8ca 3000 	str.w	r3, [sl]
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	e7e9      	b.n	800aec8 <__ssputs_r+0x8a>

0800aef4 <_svfiprintf_r>:
 800aef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef8:	4698      	mov	r8, r3
 800aefa:	898b      	ldrh	r3, [r1, #12]
 800aefc:	061b      	lsls	r3, r3, #24
 800aefe:	b09d      	sub	sp, #116	@ 0x74
 800af00:	4607      	mov	r7, r0
 800af02:	460d      	mov	r5, r1
 800af04:	4614      	mov	r4, r2
 800af06:	d510      	bpl.n	800af2a <_svfiprintf_r+0x36>
 800af08:	690b      	ldr	r3, [r1, #16]
 800af0a:	b973      	cbnz	r3, 800af2a <_svfiprintf_r+0x36>
 800af0c:	2140      	movs	r1, #64	@ 0x40
 800af0e:	f7ff fa39 	bl	800a384 <_malloc_r>
 800af12:	6028      	str	r0, [r5, #0]
 800af14:	6128      	str	r0, [r5, #16]
 800af16:	b930      	cbnz	r0, 800af26 <_svfiprintf_r+0x32>
 800af18:	230c      	movs	r3, #12
 800af1a:	603b      	str	r3, [r7, #0]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b01d      	add	sp, #116	@ 0x74
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	2340      	movs	r3, #64	@ 0x40
 800af28:	616b      	str	r3, [r5, #20]
 800af2a:	2300      	movs	r3, #0
 800af2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af2e:	2320      	movs	r3, #32
 800af30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af34:	f8cd 800c 	str.w	r8, [sp, #12]
 800af38:	2330      	movs	r3, #48	@ 0x30
 800af3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0d8 <_svfiprintf_r+0x1e4>
 800af3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af42:	f04f 0901 	mov.w	r9, #1
 800af46:	4623      	mov	r3, r4
 800af48:	469a      	mov	sl, r3
 800af4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af4e:	b10a      	cbz	r2, 800af54 <_svfiprintf_r+0x60>
 800af50:	2a25      	cmp	r2, #37	@ 0x25
 800af52:	d1f9      	bne.n	800af48 <_svfiprintf_r+0x54>
 800af54:	ebba 0b04 	subs.w	fp, sl, r4
 800af58:	d00b      	beq.n	800af72 <_svfiprintf_r+0x7e>
 800af5a:	465b      	mov	r3, fp
 800af5c:	4622      	mov	r2, r4
 800af5e:	4629      	mov	r1, r5
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff ff6c 	bl	800ae3e <__ssputs_r>
 800af66:	3001      	adds	r0, #1
 800af68:	f000 80a7 	beq.w	800b0ba <_svfiprintf_r+0x1c6>
 800af6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af6e:	445a      	add	r2, fp
 800af70:	9209      	str	r2, [sp, #36]	@ 0x24
 800af72:	f89a 3000 	ldrb.w	r3, [sl]
 800af76:	2b00      	cmp	r3, #0
 800af78:	f000 809f 	beq.w	800b0ba <_svfiprintf_r+0x1c6>
 800af7c:	2300      	movs	r3, #0
 800af7e:	f04f 32ff 	mov.w	r2, #4294967295
 800af82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af86:	f10a 0a01 	add.w	sl, sl, #1
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	9307      	str	r3, [sp, #28]
 800af8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af92:	931a      	str	r3, [sp, #104]	@ 0x68
 800af94:	4654      	mov	r4, sl
 800af96:	2205      	movs	r2, #5
 800af98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9c:	484e      	ldr	r0, [pc, #312]	@ (800b0d8 <_svfiprintf_r+0x1e4>)
 800af9e:	f7f5 f937 	bl	8000210 <memchr>
 800afa2:	9a04      	ldr	r2, [sp, #16]
 800afa4:	b9d8      	cbnz	r0, 800afde <_svfiprintf_r+0xea>
 800afa6:	06d0      	lsls	r0, r2, #27
 800afa8:	bf44      	itt	mi
 800afaa:	2320      	movmi	r3, #32
 800afac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afb0:	0711      	lsls	r1, r2, #28
 800afb2:	bf44      	itt	mi
 800afb4:	232b      	movmi	r3, #43	@ 0x2b
 800afb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800afc0:	d015      	beq.n	800afee <_svfiprintf_r+0xfa>
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	4654      	mov	r4, sl
 800afc6:	2000      	movs	r0, #0
 800afc8:	f04f 0c0a 	mov.w	ip, #10
 800afcc:	4621      	mov	r1, r4
 800afce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afd2:	3b30      	subs	r3, #48	@ 0x30
 800afd4:	2b09      	cmp	r3, #9
 800afd6:	d94b      	bls.n	800b070 <_svfiprintf_r+0x17c>
 800afd8:	b1b0      	cbz	r0, 800b008 <_svfiprintf_r+0x114>
 800afda:	9207      	str	r2, [sp, #28]
 800afdc:	e014      	b.n	800b008 <_svfiprintf_r+0x114>
 800afde:	eba0 0308 	sub.w	r3, r0, r8
 800afe2:	fa09 f303 	lsl.w	r3, r9, r3
 800afe6:	4313      	orrs	r3, r2
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	46a2      	mov	sl, r4
 800afec:	e7d2      	b.n	800af94 <_svfiprintf_r+0xa0>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	1d19      	adds	r1, r3, #4
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	9103      	str	r1, [sp, #12]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfbb      	ittet	lt
 800affa:	425b      	neglt	r3, r3
 800affc:	f042 0202 	orrlt.w	r2, r2, #2
 800b000:	9307      	strge	r3, [sp, #28]
 800b002:	9307      	strlt	r3, [sp, #28]
 800b004:	bfb8      	it	lt
 800b006:	9204      	strlt	r2, [sp, #16]
 800b008:	7823      	ldrb	r3, [r4, #0]
 800b00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b00c:	d10a      	bne.n	800b024 <_svfiprintf_r+0x130>
 800b00e:	7863      	ldrb	r3, [r4, #1]
 800b010:	2b2a      	cmp	r3, #42	@ 0x2a
 800b012:	d132      	bne.n	800b07a <_svfiprintf_r+0x186>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	1d1a      	adds	r2, r3, #4
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	9203      	str	r2, [sp, #12]
 800b01c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b020:	3402      	adds	r4, #2
 800b022:	9305      	str	r3, [sp, #20]
 800b024:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b0e8 <_svfiprintf_r+0x1f4>
 800b028:	7821      	ldrb	r1, [r4, #0]
 800b02a:	2203      	movs	r2, #3
 800b02c:	4650      	mov	r0, sl
 800b02e:	f7f5 f8ef 	bl	8000210 <memchr>
 800b032:	b138      	cbz	r0, 800b044 <_svfiprintf_r+0x150>
 800b034:	9b04      	ldr	r3, [sp, #16]
 800b036:	eba0 000a 	sub.w	r0, r0, sl
 800b03a:	2240      	movs	r2, #64	@ 0x40
 800b03c:	4082      	lsls	r2, r0
 800b03e:	4313      	orrs	r3, r2
 800b040:	3401      	adds	r4, #1
 800b042:	9304      	str	r3, [sp, #16]
 800b044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b048:	4824      	ldr	r0, [pc, #144]	@ (800b0dc <_svfiprintf_r+0x1e8>)
 800b04a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b04e:	2206      	movs	r2, #6
 800b050:	f7f5 f8de 	bl	8000210 <memchr>
 800b054:	2800      	cmp	r0, #0
 800b056:	d036      	beq.n	800b0c6 <_svfiprintf_r+0x1d2>
 800b058:	4b21      	ldr	r3, [pc, #132]	@ (800b0e0 <_svfiprintf_r+0x1ec>)
 800b05a:	bb1b      	cbnz	r3, 800b0a4 <_svfiprintf_r+0x1b0>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	3307      	adds	r3, #7
 800b060:	f023 0307 	bic.w	r3, r3, #7
 800b064:	3308      	adds	r3, #8
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b06a:	4433      	add	r3, r6
 800b06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b06e:	e76a      	b.n	800af46 <_svfiprintf_r+0x52>
 800b070:	fb0c 3202 	mla	r2, ip, r2, r3
 800b074:	460c      	mov	r4, r1
 800b076:	2001      	movs	r0, #1
 800b078:	e7a8      	b.n	800afcc <_svfiprintf_r+0xd8>
 800b07a:	2300      	movs	r3, #0
 800b07c:	3401      	adds	r4, #1
 800b07e:	9305      	str	r3, [sp, #20]
 800b080:	4619      	mov	r1, r3
 800b082:	f04f 0c0a 	mov.w	ip, #10
 800b086:	4620      	mov	r0, r4
 800b088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b08c:	3a30      	subs	r2, #48	@ 0x30
 800b08e:	2a09      	cmp	r2, #9
 800b090:	d903      	bls.n	800b09a <_svfiprintf_r+0x1a6>
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0c6      	beq.n	800b024 <_svfiprintf_r+0x130>
 800b096:	9105      	str	r1, [sp, #20]
 800b098:	e7c4      	b.n	800b024 <_svfiprintf_r+0x130>
 800b09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b09e:	4604      	mov	r4, r0
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e7f0      	b.n	800b086 <_svfiprintf_r+0x192>
 800b0a4:	ab03      	add	r3, sp, #12
 800b0a6:	9300      	str	r3, [sp, #0]
 800b0a8:	462a      	mov	r2, r5
 800b0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e4 <_svfiprintf_r+0x1f0>)
 800b0ac:	a904      	add	r1, sp, #16
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7fd f9d2 	bl	8008458 <_printf_float>
 800b0b4:	1c42      	adds	r2, r0, #1
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	d1d6      	bne.n	800b068 <_svfiprintf_r+0x174>
 800b0ba:	89ab      	ldrh	r3, [r5, #12]
 800b0bc:	065b      	lsls	r3, r3, #25
 800b0be:	f53f af2d 	bmi.w	800af1c <_svfiprintf_r+0x28>
 800b0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0c4:	e72c      	b.n	800af20 <_svfiprintf_r+0x2c>
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	462a      	mov	r2, r5
 800b0cc:	4b05      	ldr	r3, [pc, #20]	@ (800b0e4 <_svfiprintf_r+0x1f0>)
 800b0ce:	a904      	add	r1, sp, #16
 800b0d0:	4638      	mov	r0, r7
 800b0d2:	f7fd fc59 	bl	8008988 <_printf_i>
 800b0d6:	e7ed      	b.n	800b0b4 <_svfiprintf_r+0x1c0>
 800b0d8:	0800c608 	.word	0x0800c608
 800b0dc:	0800c612 	.word	0x0800c612
 800b0e0:	08008459 	.word	0x08008459
 800b0e4:	0800ae3f 	.word	0x0800ae3f
 800b0e8:	0800c60e 	.word	0x0800c60e

0800b0ec <__sflush_r>:
 800b0ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	0716      	lsls	r6, r2, #28
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d454      	bmi.n	800b1a6 <__sflush_r+0xba>
 800b0fc:	684b      	ldr	r3, [r1, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dc02      	bgt.n	800b108 <__sflush_r+0x1c>
 800b102:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b104:	2b00      	cmp	r3, #0
 800b106:	dd48      	ble.n	800b19a <__sflush_r+0xae>
 800b108:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b10a:	2e00      	cmp	r6, #0
 800b10c:	d045      	beq.n	800b19a <__sflush_r+0xae>
 800b10e:	2300      	movs	r3, #0
 800b110:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b114:	682f      	ldr	r7, [r5, #0]
 800b116:	6a21      	ldr	r1, [r4, #32]
 800b118:	602b      	str	r3, [r5, #0]
 800b11a:	d030      	beq.n	800b17e <__sflush_r+0x92>
 800b11c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	0759      	lsls	r1, r3, #29
 800b122:	d505      	bpl.n	800b130 <__sflush_r+0x44>
 800b124:	6863      	ldr	r3, [r4, #4]
 800b126:	1ad2      	subs	r2, r2, r3
 800b128:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b12a:	b10b      	cbz	r3, 800b130 <__sflush_r+0x44>
 800b12c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b12e:	1ad2      	subs	r2, r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	4628      	mov	r0, r5
 800b138:	47b0      	blx	r6
 800b13a:	1c43      	adds	r3, r0, #1
 800b13c:	89a3      	ldrh	r3, [r4, #12]
 800b13e:	d106      	bne.n	800b14e <__sflush_r+0x62>
 800b140:	6829      	ldr	r1, [r5, #0]
 800b142:	291d      	cmp	r1, #29
 800b144:	d82b      	bhi.n	800b19e <__sflush_r+0xb2>
 800b146:	4a2a      	ldr	r2, [pc, #168]	@ (800b1f0 <__sflush_r+0x104>)
 800b148:	410a      	asrs	r2, r1
 800b14a:	07d6      	lsls	r6, r2, #31
 800b14c:	d427      	bmi.n	800b19e <__sflush_r+0xb2>
 800b14e:	2200      	movs	r2, #0
 800b150:	6062      	str	r2, [r4, #4]
 800b152:	04d9      	lsls	r1, r3, #19
 800b154:	6922      	ldr	r2, [r4, #16]
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	d504      	bpl.n	800b164 <__sflush_r+0x78>
 800b15a:	1c42      	adds	r2, r0, #1
 800b15c:	d101      	bne.n	800b162 <__sflush_r+0x76>
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	b903      	cbnz	r3, 800b164 <__sflush_r+0x78>
 800b162:	6560      	str	r0, [r4, #84]	@ 0x54
 800b164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b166:	602f      	str	r7, [r5, #0]
 800b168:	b1b9      	cbz	r1, 800b19a <__sflush_r+0xae>
 800b16a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b16e:	4299      	cmp	r1, r3
 800b170:	d002      	beq.n	800b178 <__sflush_r+0x8c>
 800b172:	4628      	mov	r0, r5
 800b174:	f7fe fd58 	bl	8009c28 <_free_r>
 800b178:	2300      	movs	r3, #0
 800b17a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b17c:	e00d      	b.n	800b19a <__sflush_r+0xae>
 800b17e:	2301      	movs	r3, #1
 800b180:	4628      	mov	r0, r5
 800b182:	47b0      	blx	r6
 800b184:	4602      	mov	r2, r0
 800b186:	1c50      	adds	r0, r2, #1
 800b188:	d1c9      	bne.n	800b11e <__sflush_r+0x32>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0c6      	beq.n	800b11e <__sflush_r+0x32>
 800b190:	2b1d      	cmp	r3, #29
 800b192:	d001      	beq.n	800b198 <__sflush_r+0xac>
 800b194:	2b16      	cmp	r3, #22
 800b196:	d11e      	bne.n	800b1d6 <__sflush_r+0xea>
 800b198:	602f      	str	r7, [r5, #0]
 800b19a:	2000      	movs	r0, #0
 800b19c:	e022      	b.n	800b1e4 <__sflush_r+0xf8>
 800b19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a2:	b21b      	sxth	r3, r3
 800b1a4:	e01b      	b.n	800b1de <__sflush_r+0xf2>
 800b1a6:	690f      	ldr	r7, [r1, #16]
 800b1a8:	2f00      	cmp	r7, #0
 800b1aa:	d0f6      	beq.n	800b19a <__sflush_r+0xae>
 800b1ac:	0793      	lsls	r3, r2, #30
 800b1ae:	680e      	ldr	r6, [r1, #0]
 800b1b0:	bf08      	it	eq
 800b1b2:	694b      	ldreq	r3, [r1, #20]
 800b1b4:	600f      	str	r7, [r1, #0]
 800b1b6:	bf18      	it	ne
 800b1b8:	2300      	movne	r3, #0
 800b1ba:	eba6 0807 	sub.w	r8, r6, r7
 800b1be:	608b      	str	r3, [r1, #8]
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	dde9      	ble.n	800b19a <__sflush_r+0xae>
 800b1c6:	6a21      	ldr	r1, [r4, #32]
 800b1c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1ca:	4643      	mov	r3, r8
 800b1cc:	463a      	mov	r2, r7
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	47b0      	blx	r6
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	dc08      	bgt.n	800b1e8 <__sflush_r+0xfc>
 800b1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1de:	81a3      	strh	r3, [r4, #12]
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e8:	4407      	add	r7, r0
 800b1ea:	eba8 0800 	sub.w	r8, r8, r0
 800b1ee:	e7e7      	b.n	800b1c0 <__sflush_r+0xd4>
 800b1f0:	dfbffffe 	.word	0xdfbffffe

0800b1f4 <_fflush_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	690b      	ldr	r3, [r1, #16]
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b913      	cbnz	r3, 800b204 <_fflush_r+0x10>
 800b1fe:	2500      	movs	r5, #0
 800b200:	4628      	mov	r0, r5
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	b118      	cbz	r0, 800b20e <_fflush_r+0x1a>
 800b206:	6a03      	ldr	r3, [r0, #32]
 800b208:	b90b      	cbnz	r3, 800b20e <_fflush_r+0x1a>
 800b20a:	f7fd fd69 	bl	8008ce0 <__sinit>
 800b20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0f3      	beq.n	800b1fe <_fflush_r+0xa>
 800b216:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b218:	07d0      	lsls	r0, r2, #31
 800b21a:	d404      	bmi.n	800b226 <_fflush_r+0x32>
 800b21c:	0599      	lsls	r1, r3, #22
 800b21e:	d402      	bmi.n	800b226 <_fflush_r+0x32>
 800b220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b222:	f7fd fe9a 	bl	8008f5a <__retarget_lock_acquire_recursive>
 800b226:	4628      	mov	r0, r5
 800b228:	4621      	mov	r1, r4
 800b22a:	f7ff ff5f 	bl	800b0ec <__sflush_r>
 800b22e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b230:	07da      	lsls	r2, r3, #31
 800b232:	4605      	mov	r5, r0
 800b234:	d4e4      	bmi.n	800b200 <_fflush_r+0xc>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	059b      	lsls	r3, r3, #22
 800b23a:	d4e1      	bmi.n	800b200 <_fflush_r+0xc>
 800b23c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b23e:	f7fd fe8d 	bl	8008f5c <__retarget_lock_release_recursive>
 800b242:	e7dd      	b.n	800b200 <_fflush_r+0xc>

0800b244 <memmove>:
 800b244:	4288      	cmp	r0, r1
 800b246:	b510      	push	{r4, lr}
 800b248:	eb01 0402 	add.w	r4, r1, r2
 800b24c:	d902      	bls.n	800b254 <memmove+0x10>
 800b24e:	4284      	cmp	r4, r0
 800b250:	4623      	mov	r3, r4
 800b252:	d807      	bhi.n	800b264 <memmove+0x20>
 800b254:	1e43      	subs	r3, r0, #1
 800b256:	42a1      	cmp	r1, r4
 800b258:	d008      	beq.n	800b26c <memmove+0x28>
 800b25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b262:	e7f8      	b.n	800b256 <memmove+0x12>
 800b264:	4402      	add	r2, r0
 800b266:	4601      	mov	r1, r0
 800b268:	428a      	cmp	r2, r1
 800b26a:	d100      	bne.n	800b26e <memmove+0x2a>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b272:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b276:	e7f7      	b.n	800b268 <memmove+0x24>

0800b278 <_sbrk_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d06      	ldr	r5, [pc, #24]	@ (800b294 <_sbrk_r+0x1c>)
 800b27c:	2300      	movs	r3, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	4608      	mov	r0, r1
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f7f7 fc38 	bl	8002af8 <_sbrk>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_sbrk_r+0x1a>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_sbrk_r+0x1a>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	200010d0 	.word	0x200010d0

0800b298 <__assert_func>:
 800b298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b29a:	4614      	mov	r4, r2
 800b29c:	461a      	mov	r2, r3
 800b29e:	4b09      	ldr	r3, [pc, #36]	@ (800b2c4 <__assert_func+0x2c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	68d8      	ldr	r0, [r3, #12]
 800b2a6:	b954      	cbnz	r4, 800b2be <__assert_func+0x26>
 800b2a8:	4b07      	ldr	r3, [pc, #28]	@ (800b2c8 <__assert_func+0x30>)
 800b2aa:	461c      	mov	r4, r3
 800b2ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2b0:	9100      	str	r1, [sp, #0]
 800b2b2:	462b      	mov	r3, r5
 800b2b4:	4905      	ldr	r1, [pc, #20]	@ (800b2cc <__assert_func+0x34>)
 800b2b6:	f000 f84f 	bl	800b358 <fiprintf>
 800b2ba:	f000 f85f 	bl	800b37c <abort>
 800b2be:	4b04      	ldr	r3, [pc, #16]	@ (800b2d0 <__assert_func+0x38>)
 800b2c0:	e7f4      	b.n	800b2ac <__assert_func+0x14>
 800b2c2:	bf00      	nop
 800b2c4:	20000230 	.word	0x20000230
 800b2c8:	0800c654 	.word	0x0800c654
 800b2cc:	0800c626 	.word	0x0800c626
 800b2d0:	0800c619 	.word	0x0800c619

0800b2d4 <_calloc_r>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	fba1 5402 	umull	r5, r4, r1, r2
 800b2da:	b93c      	cbnz	r4, 800b2ec <_calloc_r+0x18>
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7ff f851 	bl	800a384 <_malloc_r>
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	b928      	cbnz	r0, 800b2f2 <_calloc_r+0x1e>
 800b2e6:	2600      	movs	r6, #0
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	220c      	movs	r2, #12
 800b2ee:	6002      	str	r2, [r0, #0]
 800b2f0:	e7f9      	b.n	800b2e6 <_calloc_r+0x12>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	f7fd fda0 	bl	8008e3a <memset>
 800b2fa:	e7f5      	b.n	800b2e8 <_calloc_r+0x14>

0800b2fc <_realloc_r>:
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	4680      	mov	r8, r0
 800b302:	4615      	mov	r5, r2
 800b304:	460c      	mov	r4, r1
 800b306:	b921      	cbnz	r1, 800b312 <_realloc_r+0x16>
 800b308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b30c:	4611      	mov	r1, r2
 800b30e:	f7ff b839 	b.w	800a384 <_malloc_r>
 800b312:	b92a      	cbnz	r2, 800b320 <_realloc_r+0x24>
 800b314:	f7fe fc88 	bl	8009c28 <_free_r>
 800b318:	2400      	movs	r4, #0
 800b31a:	4620      	mov	r0, r4
 800b31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b320:	f000 f833 	bl	800b38a <_malloc_usable_size_r>
 800b324:	4285      	cmp	r5, r0
 800b326:	4606      	mov	r6, r0
 800b328:	d802      	bhi.n	800b330 <_realloc_r+0x34>
 800b32a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b32e:	d8f4      	bhi.n	800b31a <_realloc_r+0x1e>
 800b330:	4629      	mov	r1, r5
 800b332:	4640      	mov	r0, r8
 800b334:	f7ff f826 	bl	800a384 <_malloc_r>
 800b338:	4607      	mov	r7, r0
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d0ec      	beq.n	800b318 <_realloc_r+0x1c>
 800b33e:	42b5      	cmp	r5, r6
 800b340:	462a      	mov	r2, r5
 800b342:	4621      	mov	r1, r4
 800b344:	bf28      	it	cs
 800b346:	4632      	movcs	r2, r6
 800b348:	f7fd fe09 	bl	8008f5e <memcpy>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4640      	mov	r0, r8
 800b350:	f7fe fc6a 	bl	8009c28 <_free_r>
 800b354:	463c      	mov	r4, r7
 800b356:	e7e0      	b.n	800b31a <_realloc_r+0x1e>

0800b358 <fiprintf>:
 800b358:	b40e      	push	{r1, r2, r3}
 800b35a:	b503      	push	{r0, r1, lr}
 800b35c:	4601      	mov	r1, r0
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	4805      	ldr	r0, [pc, #20]	@ (800b378 <fiprintf+0x20>)
 800b362:	f853 2b04 	ldr.w	r2, [r3], #4
 800b366:	6800      	ldr	r0, [r0, #0]
 800b368:	9301      	str	r3, [sp, #4]
 800b36a:	f000 f83f 	bl	800b3ec <_vfiprintf_r>
 800b36e:	b002      	add	sp, #8
 800b370:	f85d eb04 	ldr.w	lr, [sp], #4
 800b374:	b003      	add	sp, #12
 800b376:	4770      	bx	lr
 800b378:	20000230 	.word	0x20000230

0800b37c <abort>:
 800b37c:	b508      	push	{r3, lr}
 800b37e:	2006      	movs	r0, #6
 800b380:	f000 fa08 	bl	800b794 <raise>
 800b384:	2001      	movs	r0, #1
 800b386:	f7f7 fb3e 	bl	8002a06 <_exit>

0800b38a <_malloc_usable_size_r>:
 800b38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b38e:	1f18      	subs	r0, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	bfbc      	itt	lt
 800b394:	580b      	ldrlt	r3, [r1, r0]
 800b396:	18c0      	addlt	r0, r0, r3
 800b398:	4770      	bx	lr

0800b39a <__sfputc_r>:
 800b39a:	6893      	ldr	r3, [r2, #8]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	b410      	push	{r4}
 800b3a2:	6093      	str	r3, [r2, #8]
 800b3a4:	da08      	bge.n	800b3b8 <__sfputc_r+0x1e>
 800b3a6:	6994      	ldr	r4, [r2, #24]
 800b3a8:	42a3      	cmp	r3, r4
 800b3aa:	db01      	blt.n	800b3b0 <__sfputc_r+0x16>
 800b3ac:	290a      	cmp	r1, #10
 800b3ae:	d103      	bne.n	800b3b8 <__sfputc_r+0x1e>
 800b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b4:	f000 b932 	b.w	800b61c <__swbuf_r>
 800b3b8:	6813      	ldr	r3, [r2, #0]
 800b3ba:	1c58      	adds	r0, r3, #1
 800b3bc:	6010      	str	r0, [r2, #0]
 800b3be:	7019      	strb	r1, [r3, #0]
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3c6:	4770      	bx	lr

0800b3c8 <__sfputs_r>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	460f      	mov	r7, r1
 800b3ce:	4614      	mov	r4, r2
 800b3d0:	18d5      	adds	r5, r2, r3
 800b3d2:	42ac      	cmp	r4, r5
 800b3d4:	d101      	bne.n	800b3da <__sfputs_r+0x12>
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	e007      	b.n	800b3ea <__sfputs_r+0x22>
 800b3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3de:	463a      	mov	r2, r7
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7ff ffda 	bl	800b39a <__sfputc_r>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d1f3      	bne.n	800b3d2 <__sfputs_r+0xa>
 800b3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3ec <_vfiprintf_r>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	460d      	mov	r5, r1
 800b3f2:	b09d      	sub	sp, #116	@ 0x74
 800b3f4:	4614      	mov	r4, r2
 800b3f6:	4698      	mov	r8, r3
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	b118      	cbz	r0, 800b404 <_vfiprintf_r+0x18>
 800b3fc:	6a03      	ldr	r3, [r0, #32]
 800b3fe:	b90b      	cbnz	r3, 800b404 <_vfiprintf_r+0x18>
 800b400:	f7fd fc6e 	bl	8008ce0 <__sinit>
 800b404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b406:	07d9      	lsls	r1, r3, #31
 800b408:	d405      	bmi.n	800b416 <_vfiprintf_r+0x2a>
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	059a      	lsls	r2, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_vfiprintf_r+0x2a>
 800b410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b412:	f7fd fda2 	bl	8008f5a <__retarget_lock_acquire_recursive>
 800b416:	89ab      	ldrh	r3, [r5, #12]
 800b418:	071b      	lsls	r3, r3, #28
 800b41a:	d501      	bpl.n	800b420 <_vfiprintf_r+0x34>
 800b41c:	692b      	ldr	r3, [r5, #16]
 800b41e:	b99b      	cbnz	r3, 800b448 <_vfiprintf_r+0x5c>
 800b420:	4629      	mov	r1, r5
 800b422:	4630      	mov	r0, r6
 800b424:	f000 f938 	bl	800b698 <__swsetup_r>
 800b428:	b170      	cbz	r0, 800b448 <_vfiprintf_r+0x5c>
 800b42a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42c:	07dc      	lsls	r4, r3, #31
 800b42e:	d504      	bpl.n	800b43a <_vfiprintf_r+0x4e>
 800b430:	f04f 30ff 	mov.w	r0, #4294967295
 800b434:	b01d      	add	sp, #116	@ 0x74
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	0598      	lsls	r0, r3, #22
 800b43e:	d4f7      	bmi.n	800b430 <_vfiprintf_r+0x44>
 800b440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b442:	f7fd fd8b 	bl	8008f5c <__retarget_lock_release_recursive>
 800b446:	e7f3      	b.n	800b430 <_vfiprintf_r+0x44>
 800b448:	2300      	movs	r3, #0
 800b44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44c:	2320      	movs	r3, #32
 800b44e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b452:	f8cd 800c 	str.w	r8, [sp, #12]
 800b456:	2330      	movs	r3, #48	@ 0x30
 800b458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b608 <_vfiprintf_r+0x21c>
 800b45c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b460:	f04f 0901 	mov.w	r9, #1
 800b464:	4623      	mov	r3, r4
 800b466:	469a      	mov	sl, r3
 800b468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46c:	b10a      	cbz	r2, 800b472 <_vfiprintf_r+0x86>
 800b46e:	2a25      	cmp	r2, #37	@ 0x25
 800b470:	d1f9      	bne.n	800b466 <_vfiprintf_r+0x7a>
 800b472:	ebba 0b04 	subs.w	fp, sl, r4
 800b476:	d00b      	beq.n	800b490 <_vfiprintf_r+0xa4>
 800b478:	465b      	mov	r3, fp
 800b47a:	4622      	mov	r2, r4
 800b47c:	4629      	mov	r1, r5
 800b47e:	4630      	mov	r0, r6
 800b480:	f7ff ffa2 	bl	800b3c8 <__sfputs_r>
 800b484:	3001      	adds	r0, #1
 800b486:	f000 80a7 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b48c:	445a      	add	r2, fp
 800b48e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b490:	f89a 3000 	ldrb.w	r3, [sl]
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 809f 	beq.w	800b5d8 <_vfiprintf_r+0x1ec>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a4:	f10a 0a01 	add.w	sl, sl, #1
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b2:	4654      	mov	r4, sl
 800b4b4:	2205      	movs	r2, #5
 800b4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ba:	4853      	ldr	r0, [pc, #332]	@ (800b608 <_vfiprintf_r+0x21c>)
 800b4bc:	f7f4 fea8 	bl	8000210 <memchr>
 800b4c0:	9a04      	ldr	r2, [sp, #16]
 800b4c2:	b9d8      	cbnz	r0, 800b4fc <_vfiprintf_r+0x110>
 800b4c4:	06d1      	lsls	r1, r2, #27
 800b4c6:	bf44      	itt	mi
 800b4c8:	2320      	movmi	r3, #32
 800b4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ce:	0713      	lsls	r3, r2, #28
 800b4d0:	bf44      	itt	mi
 800b4d2:	232b      	movmi	r3, #43	@ 0x2b
 800b4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4de:	d015      	beq.n	800b50c <_vfiprintf_r+0x120>
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	f04f 0c0a 	mov.w	ip, #10
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4f0:	3b30      	subs	r3, #48	@ 0x30
 800b4f2:	2b09      	cmp	r3, #9
 800b4f4:	d94b      	bls.n	800b58e <_vfiprintf_r+0x1a2>
 800b4f6:	b1b0      	cbz	r0, 800b526 <_vfiprintf_r+0x13a>
 800b4f8:	9207      	str	r2, [sp, #28]
 800b4fa:	e014      	b.n	800b526 <_vfiprintf_r+0x13a>
 800b4fc:	eba0 0308 	sub.w	r3, r0, r8
 800b500:	fa09 f303 	lsl.w	r3, r9, r3
 800b504:	4313      	orrs	r3, r2
 800b506:	9304      	str	r3, [sp, #16]
 800b508:	46a2      	mov	sl, r4
 800b50a:	e7d2      	b.n	800b4b2 <_vfiprintf_r+0xc6>
 800b50c:	9b03      	ldr	r3, [sp, #12]
 800b50e:	1d19      	adds	r1, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	9103      	str	r1, [sp, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	bfbb      	ittet	lt
 800b518:	425b      	neglt	r3, r3
 800b51a:	f042 0202 	orrlt.w	r2, r2, #2
 800b51e:	9307      	strge	r3, [sp, #28]
 800b520:	9307      	strlt	r3, [sp, #28]
 800b522:	bfb8      	it	lt
 800b524:	9204      	strlt	r2, [sp, #16]
 800b526:	7823      	ldrb	r3, [r4, #0]
 800b528:	2b2e      	cmp	r3, #46	@ 0x2e
 800b52a:	d10a      	bne.n	800b542 <_vfiprintf_r+0x156>
 800b52c:	7863      	ldrb	r3, [r4, #1]
 800b52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b530:	d132      	bne.n	800b598 <_vfiprintf_r+0x1ac>
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	1d1a      	adds	r2, r3, #4
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	9203      	str	r2, [sp, #12]
 800b53a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b53e:	3402      	adds	r4, #2
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b618 <_vfiprintf_r+0x22c>
 800b546:	7821      	ldrb	r1, [r4, #0]
 800b548:	2203      	movs	r2, #3
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7f4 fe60 	bl	8000210 <memchr>
 800b550:	b138      	cbz	r0, 800b562 <_vfiprintf_r+0x176>
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	eba0 000a 	sub.w	r0, r0, sl
 800b558:	2240      	movs	r2, #64	@ 0x40
 800b55a:	4082      	lsls	r2, r0
 800b55c:	4313      	orrs	r3, r2
 800b55e:	3401      	adds	r4, #1
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b566:	4829      	ldr	r0, [pc, #164]	@ (800b60c <_vfiprintf_r+0x220>)
 800b568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b56c:	2206      	movs	r2, #6
 800b56e:	f7f4 fe4f 	bl	8000210 <memchr>
 800b572:	2800      	cmp	r0, #0
 800b574:	d03f      	beq.n	800b5f6 <_vfiprintf_r+0x20a>
 800b576:	4b26      	ldr	r3, [pc, #152]	@ (800b610 <_vfiprintf_r+0x224>)
 800b578:	bb1b      	cbnz	r3, 800b5c2 <_vfiprintf_r+0x1d6>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	3307      	adds	r3, #7
 800b57e:	f023 0307 	bic.w	r3, r3, #7
 800b582:	3308      	adds	r3, #8
 800b584:	9303      	str	r3, [sp, #12]
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	443b      	add	r3, r7
 800b58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58c:	e76a      	b.n	800b464 <_vfiprintf_r+0x78>
 800b58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b592:	460c      	mov	r4, r1
 800b594:	2001      	movs	r0, #1
 800b596:	e7a8      	b.n	800b4ea <_vfiprintf_r+0xfe>
 800b598:	2300      	movs	r3, #0
 800b59a:	3401      	adds	r4, #1
 800b59c:	9305      	str	r3, [sp, #20]
 800b59e:	4619      	mov	r1, r3
 800b5a0:	f04f 0c0a 	mov.w	ip, #10
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5aa:	3a30      	subs	r2, #48	@ 0x30
 800b5ac:	2a09      	cmp	r2, #9
 800b5ae:	d903      	bls.n	800b5b8 <_vfiprintf_r+0x1cc>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0c6      	beq.n	800b542 <_vfiprintf_r+0x156>
 800b5b4:	9105      	str	r1, [sp, #20]
 800b5b6:	e7c4      	b.n	800b542 <_vfiprintf_r+0x156>
 800b5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5bc:	4604      	mov	r4, r0
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e7f0      	b.n	800b5a4 <_vfiprintf_r+0x1b8>
 800b5c2:	ab03      	add	r3, sp, #12
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	462a      	mov	r2, r5
 800b5c8:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <_vfiprintf_r+0x228>)
 800b5ca:	a904      	add	r1, sp, #16
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7fc ff43 	bl	8008458 <_printf_float>
 800b5d2:	4607      	mov	r7, r0
 800b5d4:	1c78      	adds	r0, r7, #1
 800b5d6:	d1d6      	bne.n	800b586 <_vfiprintf_r+0x19a>
 800b5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5da:	07d9      	lsls	r1, r3, #31
 800b5dc:	d405      	bmi.n	800b5ea <_vfiprintf_r+0x1fe>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	059a      	lsls	r2, r3, #22
 800b5e2:	d402      	bmi.n	800b5ea <_vfiprintf_r+0x1fe>
 800b5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e6:	f7fd fcb9 	bl	8008f5c <__retarget_lock_release_recursive>
 800b5ea:	89ab      	ldrh	r3, [r5, #12]
 800b5ec:	065b      	lsls	r3, r3, #25
 800b5ee:	f53f af1f 	bmi.w	800b430 <_vfiprintf_r+0x44>
 800b5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5f4:	e71e      	b.n	800b434 <_vfiprintf_r+0x48>
 800b5f6:	ab03      	add	r3, sp, #12
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4b05      	ldr	r3, [pc, #20]	@ (800b614 <_vfiprintf_r+0x228>)
 800b5fe:	a904      	add	r1, sp, #16
 800b600:	4630      	mov	r0, r6
 800b602:	f7fd f9c1 	bl	8008988 <_printf_i>
 800b606:	e7e4      	b.n	800b5d2 <_vfiprintf_r+0x1e6>
 800b608:	0800c608 	.word	0x0800c608
 800b60c:	0800c612 	.word	0x0800c612
 800b610:	08008459 	.word	0x08008459
 800b614:	0800b3c9 	.word	0x0800b3c9
 800b618:	0800c60e 	.word	0x0800c60e

0800b61c <__swbuf_r>:
 800b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61e:	460e      	mov	r6, r1
 800b620:	4614      	mov	r4, r2
 800b622:	4605      	mov	r5, r0
 800b624:	b118      	cbz	r0, 800b62e <__swbuf_r+0x12>
 800b626:	6a03      	ldr	r3, [r0, #32]
 800b628:	b90b      	cbnz	r3, 800b62e <__swbuf_r+0x12>
 800b62a:	f7fd fb59 	bl	8008ce0 <__sinit>
 800b62e:	69a3      	ldr	r3, [r4, #24]
 800b630:	60a3      	str	r3, [r4, #8]
 800b632:	89a3      	ldrh	r3, [r4, #12]
 800b634:	071a      	lsls	r2, r3, #28
 800b636:	d501      	bpl.n	800b63c <__swbuf_r+0x20>
 800b638:	6923      	ldr	r3, [r4, #16]
 800b63a:	b943      	cbnz	r3, 800b64e <__swbuf_r+0x32>
 800b63c:	4621      	mov	r1, r4
 800b63e:	4628      	mov	r0, r5
 800b640:	f000 f82a 	bl	800b698 <__swsetup_r>
 800b644:	b118      	cbz	r0, 800b64e <__swbuf_r+0x32>
 800b646:	f04f 37ff 	mov.w	r7, #4294967295
 800b64a:	4638      	mov	r0, r7
 800b64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	6922      	ldr	r2, [r4, #16]
 800b652:	1a98      	subs	r0, r3, r2
 800b654:	6963      	ldr	r3, [r4, #20]
 800b656:	b2f6      	uxtb	r6, r6
 800b658:	4283      	cmp	r3, r0
 800b65a:	4637      	mov	r7, r6
 800b65c:	dc05      	bgt.n	800b66a <__swbuf_r+0x4e>
 800b65e:	4621      	mov	r1, r4
 800b660:	4628      	mov	r0, r5
 800b662:	f7ff fdc7 	bl	800b1f4 <_fflush_r>
 800b666:	2800      	cmp	r0, #0
 800b668:	d1ed      	bne.n	800b646 <__swbuf_r+0x2a>
 800b66a:	68a3      	ldr	r3, [r4, #8]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	60a3      	str	r3, [r4, #8]
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	1c5a      	adds	r2, r3, #1
 800b674:	6022      	str	r2, [r4, #0]
 800b676:	701e      	strb	r6, [r3, #0]
 800b678:	6962      	ldr	r2, [r4, #20]
 800b67a:	1c43      	adds	r3, r0, #1
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d004      	beq.n	800b68a <__swbuf_r+0x6e>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	07db      	lsls	r3, r3, #31
 800b684:	d5e1      	bpl.n	800b64a <__swbuf_r+0x2e>
 800b686:	2e0a      	cmp	r6, #10
 800b688:	d1df      	bne.n	800b64a <__swbuf_r+0x2e>
 800b68a:	4621      	mov	r1, r4
 800b68c:	4628      	mov	r0, r5
 800b68e:	f7ff fdb1 	bl	800b1f4 <_fflush_r>
 800b692:	2800      	cmp	r0, #0
 800b694:	d0d9      	beq.n	800b64a <__swbuf_r+0x2e>
 800b696:	e7d6      	b.n	800b646 <__swbuf_r+0x2a>

0800b698 <__swsetup_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4b29      	ldr	r3, [pc, #164]	@ (800b740 <__swsetup_r+0xa8>)
 800b69c:	4605      	mov	r5, r0
 800b69e:	6818      	ldr	r0, [r3, #0]
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	b118      	cbz	r0, 800b6ac <__swsetup_r+0x14>
 800b6a4:	6a03      	ldr	r3, [r0, #32]
 800b6a6:	b90b      	cbnz	r3, 800b6ac <__swsetup_r+0x14>
 800b6a8:	f7fd fb1a 	bl	8008ce0 <__sinit>
 800b6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b0:	0719      	lsls	r1, r3, #28
 800b6b2:	d422      	bmi.n	800b6fa <__swsetup_r+0x62>
 800b6b4:	06da      	lsls	r2, r3, #27
 800b6b6:	d407      	bmi.n	800b6c8 <__swsetup_r+0x30>
 800b6b8:	2209      	movs	r2, #9
 800b6ba:	602a      	str	r2, [r5, #0]
 800b6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c6:	e033      	b.n	800b730 <__swsetup_r+0x98>
 800b6c8:	0758      	lsls	r0, r3, #29
 800b6ca:	d512      	bpl.n	800b6f2 <__swsetup_r+0x5a>
 800b6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6ce:	b141      	cbz	r1, 800b6e2 <__swsetup_r+0x4a>
 800b6d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6d4:	4299      	cmp	r1, r3
 800b6d6:	d002      	beq.n	800b6de <__swsetup_r+0x46>
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f7fe faa5 	bl	8009c28 <_free_r>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	6063      	str	r3, [r4, #4]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f043 0308 	orr.w	r3, r3, #8
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	6923      	ldr	r3, [r4, #16]
 800b6fc:	b94b      	cbnz	r3, 800b712 <__swsetup_r+0x7a>
 800b6fe:	89a3      	ldrh	r3, [r4, #12]
 800b700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b708:	d003      	beq.n	800b712 <__swsetup_r+0x7a>
 800b70a:	4621      	mov	r1, r4
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 f883 	bl	800b818 <__smakebuf_r>
 800b712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b716:	f013 0201 	ands.w	r2, r3, #1
 800b71a:	d00a      	beq.n	800b732 <__swsetup_r+0x9a>
 800b71c:	2200      	movs	r2, #0
 800b71e:	60a2      	str	r2, [r4, #8]
 800b720:	6962      	ldr	r2, [r4, #20]
 800b722:	4252      	negs	r2, r2
 800b724:	61a2      	str	r2, [r4, #24]
 800b726:	6922      	ldr	r2, [r4, #16]
 800b728:	b942      	cbnz	r2, 800b73c <__swsetup_r+0xa4>
 800b72a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b72e:	d1c5      	bne.n	800b6bc <__swsetup_r+0x24>
 800b730:	bd38      	pop	{r3, r4, r5, pc}
 800b732:	0799      	lsls	r1, r3, #30
 800b734:	bf58      	it	pl
 800b736:	6962      	ldrpl	r2, [r4, #20]
 800b738:	60a2      	str	r2, [r4, #8]
 800b73a:	e7f4      	b.n	800b726 <__swsetup_r+0x8e>
 800b73c:	2000      	movs	r0, #0
 800b73e:	e7f7      	b.n	800b730 <__swsetup_r+0x98>
 800b740:	20000230 	.word	0x20000230

0800b744 <_raise_r>:
 800b744:	291f      	cmp	r1, #31
 800b746:	b538      	push	{r3, r4, r5, lr}
 800b748:	4605      	mov	r5, r0
 800b74a:	460c      	mov	r4, r1
 800b74c:	d904      	bls.n	800b758 <_raise_r+0x14>
 800b74e:	2316      	movs	r3, #22
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	f04f 30ff 	mov.w	r0, #4294967295
 800b756:	bd38      	pop	{r3, r4, r5, pc}
 800b758:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b75a:	b112      	cbz	r2, 800b762 <_raise_r+0x1e>
 800b75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b760:	b94b      	cbnz	r3, 800b776 <_raise_r+0x32>
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f830 	bl	800b7c8 <_getpid_r>
 800b768:	4622      	mov	r2, r4
 800b76a:	4601      	mov	r1, r0
 800b76c:	4628      	mov	r0, r5
 800b76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b772:	f000 b817 	b.w	800b7a4 <_kill_r>
 800b776:	2b01      	cmp	r3, #1
 800b778:	d00a      	beq.n	800b790 <_raise_r+0x4c>
 800b77a:	1c59      	adds	r1, r3, #1
 800b77c:	d103      	bne.n	800b786 <_raise_r+0x42>
 800b77e:	2316      	movs	r3, #22
 800b780:	6003      	str	r3, [r0, #0]
 800b782:	2001      	movs	r0, #1
 800b784:	e7e7      	b.n	800b756 <_raise_r+0x12>
 800b786:	2100      	movs	r1, #0
 800b788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b78c:	4620      	mov	r0, r4
 800b78e:	4798      	blx	r3
 800b790:	2000      	movs	r0, #0
 800b792:	e7e0      	b.n	800b756 <_raise_r+0x12>

0800b794 <raise>:
 800b794:	4b02      	ldr	r3, [pc, #8]	@ (800b7a0 <raise+0xc>)
 800b796:	4601      	mov	r1, r0
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f7ff bfd3 	b.w	800b744 <_raise_r>
 800b79e:	bf00      	nop
 800b7a0:	20000230 	.word	0x20000230

0800b7a4 <_kill_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4d07      	ldr	r5, [pc, #28]	@ (800b7c4 <_kill_r+0x20>)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	4608      	mov	r0, r1
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	f7f7 f918 	bl	80029e6 <_kill>
 800b7b6:	1c43      	adds	r3, r0, #1
 800b7b8:	d102      	bne.n	800b7c0 <_kill_r+0x1c>
 800b7ba:	682b      	ldr	r3, [r5, #0]
 800b7bc:	b103      	cbz	r3, 800b7c0 <_kill_r+0x1c>
 800b7be:	6023      	str	r3, [r4, #0]
 800b7c0:	bd38      	pop	{r3, r4, r5, pc}
 800b7c2:	bf00      	nop
 800b7c4:	200010d0 	.word	0x200010d0

0800b7c8 <_getpid_r>:
 800b7c8:	f7f7 b905 	b.w	80029d6 <_getpid>

0800b7cc <__swhatbuf_r>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	460c      	mov	r4, r1
 800b7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d4:	2900      	cmp	r1, #0
 800b7d6:	b096      	sub	sp, #88	@ 0x58
 800b7d8:	4615      	mov	r5, r2
 800b7da:	461e      	mov	r6, r3
 800b7dc:	da0d      	bge.n	800b7fa <__swhatbuf_r+0x2e>
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7e4:	f04f 0100 	mov.w	r1, #0
 800b7e8:	bf14      	ite	ne
 800b7ea:	2340      	movne	r3, #64	@ 0x40
 800b7ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7f0:	2000      	movs	r0, #0
 800b7f2:	6031      	str	r1, [r6, #0]
 800b7f4:	602b      	str	r3, [r5, #0]
 800b7f6:	b016      	add	sp, #88	@ 0x58
 800b7f8:	bd70      	pop	{r4, r5, r6, pc}
 800b7fa:	466a      	mov	r2, sp
 800b7fc:	f000 f848 	bl	800b890 <_fstat_r>
 800b800:	2800      	cmp	r0, #0
 800b802:	dbec      	blt.n	800b7de <__swhatbuf_r+0x12>
 800b804:	9901      	ldr	r1, [sp, #4]
 800b806:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b80a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b80e:	4259      	negs	r1, r3
 800b810:	4159      	adcs	r1, r3
 800b812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b816:	e7eb      	b.n	800b7f0 <__swhatbuf_r+0x24>

0800b818 <__smakebuf_r>:
 800b818:	898b      	ldrh	r3, [r1, #12]
 800b81a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b81c:	079d      	lsls	r5, r3, #30
 800b81e:	4606      	mov	r6, r0
 800b820:	460c      	mov	r4, r1
 800b822:	d507      	bpl.n	800b834 <__smakebuf_r+0x1c>
 800b824:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	2301      	movs	r3, #1
 800b82e:	6163      	str	r3, [r4, #20]
 800b830:	b003      	add	sp, #12
 800b832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b834:	ab01      	add	r3, sp, #4
 800b836:	466a      	mov	r2, sp
 800b838:	f7ff ffc8 	bl	800b7cc <__swhatbuf_r>
 800b83c:	9f00      	ldr	r7, [sp, #0]
 800b83e:	4605      	mov	r5, r0
 800b840:	4639      	mov	r1, r7
 800b842:	4630      	mov	r0, r6
 800b844:	f7fe fd9e 	bl	800a384 <_malloc_r>
 800b848:	b948      	cbnz	r0, 800b85e <__smakebuf_r+0x46>
 800b84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84e:	059a      	lsls	r2, r3, #22
 800b850:	d4ee      	bmi.n	800b830 <__smakebuf_r+0x18>
 800b852:	f023 0303 	bic.w	r3, r3, #3
 800b856:	f043 0302 	orr.w	r3, r3, #2
 800b85a:	81a3      	strh	r3, [r4, #12]
 800b85c:	e7e2      	b.n	800b824 <__smakebuf_r+0xc>
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	6020      	str	r0, [r4, #0]
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	9b01      	ldr	r3, [sp, #4]
 800b86a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b86e:	b15b      	cbz	r3, 800b888 <__smakebuf_r+0x70>
 800b870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b874:	4630      	mov	r0, r6
 800b876:	f000 f81d 	bl	800b8b4 <_isatty_r>
 800b87a:	b128      	cbz	r0, 800b888 <__smakebuf_r+0x70>
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	f043 0301 	orr.w	r3, r3, #1
 800b886:	81a3      	strh	r3, [r4, #12]
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	431d      	orrs	r5, r3
 800b88c:	81a5      	strh	r5, [r4, #12]
 800b88e:	e7cf      	b.n	800b830 <__smakebuf_r+0x18>

0800b890 <_fstat_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4d07      	ldr	r5, [pc, #28]	@ (800b8b0 <_fstat_r+0x20>)
 800b894:	2300      	movs	r3, #0
 800b896:	4604      	mov	r4, r0
 800b898:	4608      	mov	r0, r1
 800b89a:	4611      	mov	r1, r2
 800b89c:	602b      	str	r3, [r5, #0]
 800b89e:	f7f7 f902 	bl	8002aa6 <_fstat>
 800b8a2:	1c43      	adds	r3, r0, #1
 800b8a4:	d102      	bne.n	800b8ac <_fstat_r+0x1c>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	b103      	cbz	r3, 800b8ac <_fstat_r+0x1c>
 800b8aa:	6023      	str	r3, [r4, #0]
 800b8ac:	bd38      	pop	{r3, r4, r5, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200010d0 	.word	0x200010d0

0800b8b4 <_isatty_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d06      	ldr	r5, [pc, #24]	@ (800b8d0 <_isatty_r+0x1c>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	f7f7 f901 	bl	8002ac6 <_isatty>
 800b8c4:	1c43      	adds	r3, r0, #1
 800b8c6:	d102      	bne.n	800b8ce <_isatty_r+0x1a>
 800b8c8:	682b      	ldr	r3, [r5, #0]
 800b8ca:	b103      	cbz	r3, 800b8ce <_isatty_r+0x1a>
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	200010d0 	.word	0x200010d0

0800b8d4 <powf>:
 800b8d4:	b508      	push	{r3, lr}
 800b8d6:	ed2d 8b04 	vpush	{d8-d9}
 800b8da:	eeb0 8a60 	vmov.f32	s16, s1
 800b8de:	eeb0 9a40 	vmov.f32	s18, s0
 800b8e2:	f000 f859 	bl	800b998 <__ieee754_powf>
 800b8e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ee:	eef0 8a40 	vmov.f32	s17, s0
 800b8f2:	d63e      	bvs.n	800b972 <powf+0x9e>
 800b8f4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fc:	d112      	bne.n	800b924 <powf+0x50>
 800b8fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b906:	d039      	beq.n	800b97c <powf+0xa8>
 800b908:	eeb0 0a48 	vmov.f32	s0, s16
 800b90c:	f000 f839 	bl	800b982 <finitef>
 800b910:	b378      	cbz	r0, 800b972 <powf+0x9e>
 800b912:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91a:	d52a      	bpl.n	800b972 <powf+0x9e>
 800b91c:	f7fd faf2 	bl	8008f04 <__errno>
 800b920:	2322      	movs	r3, #34	@ 0x22
 800b922:	e014      	b.n	800b94e <powf+0x7a>
 800b924:	f000 f82d 	bl	800b982 <finitef>
 800b928:	b998      	cbnz	r0, 800b952 <powf+0x7e>
 800b92a:	eeb0 0a49 	vmov.f32	s0, s18
 800b92e:	f000 f828 	bl	800b982 <finitef>
 800b932:	b170      	cbz	r0, 800b952 <powf+0x7e>
 800b934:	eeb0 0a48 	vmov.f32	s0, s16
 800b938:	f000 f823 	bl	800b982 <finitef>
 800b93c:	b148      	cbz	r0, 800b952 <powf+0x7e>
 800b93e:	eef4 8a68 	vcmp.f32	s17, s17
 800b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b946:	d7e9      	bvc.n	800b91c <powf+0x48>
 800b948:	f7fd fadc 	bl	8008f04 <__errno>
 800b94c:	2321      	movs	r3, #33	@ 0x21
 800b94e:	6003      	str	r3, [r0, #0]
 800b950:	e00f      	b.n	800b972 <powf+0x9e>
 800b952:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b95a:	d10a      	bne.n	800b972 <powf+0x9e>
 800b95c:	eeb0 0a49 	vmov.f32	s0, s18
 800b960:	f000 f80f 	bl	800b982 <finitef>
 800b964:	b128      	cbz	r0, 800b972 <powf+0x9e>
 800b966:	eeb0 0a48 	vmov.f32	s0, s16
 800b96a:	f000 f80a 	bl	800b982 <finitef>
 800b96e:	2800      	cmp	r0, #0
 800b970:	d1d4      	bne.n	800b91c <powf+0x48>
 800b972:	eeb0 0a68 	vmov.f32	s0, s17
 800b976:	ecbd 8b04 	vpop	{d8-d9}
 800b97a:	bd08      	pop	{r3, pc}
 800b97c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b980:	e7f7      	b.n	800b972 <powf+0x9e>

0800b982 <finitef>:
 800b982:	ee10 3a10 	vmov	r3, s0
 800b986:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b98a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b98e:	bfac      	ite	ge
 800b990:	2000      	movge	r0, #0
 800b992:	2001      	movlt	r0, #1
 800b994:	4770      	bx	lr
	...

0800b998 <__ieee754_powf>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	ee10 4a90 	vmov	r4, s1
 800b9a0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800b9a4:	ed2d 8b02 	vpush	{d8}
 800b9a8:	ee10 6a10 	vmov	r6, s0
 800b9ac:	eeb0 8a40 	vmov.f32	s16, s0
 800b9b0:	eef0 8a60 	vmov.f32	s17, s1
 800b9b4:	d10c      	bne.n	800b9d0 <__ieee754_powf+0x38>
 800b9b6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800b9ba:	0076      	lsls	r6, r6, #1
 800b9bc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b9c0:	f240 829c 	bls.w	800befc <__ieee754_powf+0x564>
 800b9c4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b9c8:	ecbd 8b02 	vpop	{d8}
 800b9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800b9d4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b9d8:	d802      	bhi.n	800b9e0 <__ieee754_powf+0x48>
 800b9da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b9de:	d908      	bls.n	800b9f2 <__ieee754_powf+0x5a>
 800b9e0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b9e4:	d1ee      	bne.n	800b9c4 <__ieee754_powf+0x2c>
 800b9e6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b9ea:	0064      	lsls	r4, r4, #1
 800b9ec:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b9f0:	e7e6      	b.n	800b9c0 <__ieee754_powf+0x28>
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	da1e      	bge.n	800ba34 <__ieee754_powf+0x9c>
 800b9f6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800b9fa:	d22b      	bcs.n	800ba54 <__ieee754_powf+0xbc>
 800b9fc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ba00:	d332      	bcc.n	800ba68 <__ieee754_powf+0xd0>
 800ba02:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ba06:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ba0a:	fa49 f503 	asr.w	r5, r9, r3
 800ba0e:	fa05 f303 	lsl.w	r3, r5, r3
 800ba12:	454b      	cmp	r3, r9
 800ba14:	d126      	bne.n	800ba64 <__ieee754_powf+0xcc>
 800ba16:	f005 0501 	and.w	r5, r5, #1
 800ba1a:	f1c5 0502 	rsb	r5, r5, #2
 800ba1e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ba22:	d122      	bne.n	800ba6a <__ieee754_powf+0xd2>
 800ba24:	2c00      	cmp	r4, #0
 800ba26:	f280 826f 	bge.w	800bf08 <__ieee754_powf+0x570>
 800ba2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba2e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ba32:	e7c9      	b.n	800b9c8 <__ieee754_powf+0x30>
 800ba34:	2500      	movs	r5, #0
 800ba36:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ba3a:	d1f0      	bne.n	800ba1e <__ieee754_powf+0x86>
 800ba3c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ba40:	f000 825c 	beq.w	800befc <__ieee754_powf+0x564>
 800ba44:	d908      	bls.n	800ba58 <__ieee754_powf+0xc0>
 800ba46:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800bda8 <__ieee754_powf+0x410>
 800ba4a:	2c00      	cmp	r4, #0
 800ba4c:	bfa8      	it	ge
 800ba4e:	eeb0 0a68 	vmovge.f32	s0, s17
 800ba52:	e7b9      	b.n	800b9c8 <__ieee754_powf+0x30>
 800ba54:	2502      	movs	r5, #2
 800ba56:	e7ee      	b.n	800ba36 <__ieee754_powf+0x9e>
 800ba58:	2c00      	cmp	r4, #0
 800ba5a:	f280 8252 	bge.w	800bf02 <__ieee754_powf+0x56a>
 800ba5e:	eeb1 0a68 	vneg.f32	s0, s17
 800ba62:	e7b1      	b.n	800b9c8 <__ieee754_powf+0x30>
 800ba64:	2500      	movs	r5, #0
 800ba66:	e7da      	b.n	800ba1e <__ieee754_powf+0x86>
 800ba68:	2500      	movs	r5, #0
 800ba6a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ba6e:	d102      	bne.n	800ba76 <__ieee754_powf+0xde>
 800ba70:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ba74:	e7a8      	b.n	800b9c8 <__ieee754_powf+0x30>
 800ba76:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ba7a:	d109      	bne.n	800ba90 <__ieee754_powf+0xf8>
 800ba7c:	2e00      	cmp	r6, #0
 800ba7e:	db07      	blt.n	800ba90 <__ieee754_powf+0xf8>
 800ba80:	eeb0 0a48 	vmov.f32	s0, s16
 800ba84:	ecbd 8b02 	vpop	{d8}
 800ba88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	f000 bae8 	b.w	800c060 <__ieee754_sqrtf>
 800ba90:	eeb0 0a48 	vmov.f32	s0, s16
 800ba94:	f000 fa50 	bl	800bf38 <fabsf>
 800ba98:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800ba9c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800baa0:	4647      	mov	r7, r8
 800baa2:	d002      	beq.n	800baaa <__ieee754_powf+0x112>
 800baa4:	f1b8 0f00 	cmp.w	r8, #0
 800baa8:	d117      	bne.n	800bada <__ieee754_powf+0x142>
 800baaa:	2c00      	cmp	r4, #0
 800baac:	bfbc      	itt	lt
 800baae:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bab2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	da86      	bge.n	800b9c8 <__ieee754_powf+0x30>
 800baba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800babe:	ea58 0805 	orrs.w	r8, r8, r5
 800bac2:	d104      	bne.n	800bace <__ieee754_powf+0x136>
 800bac4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bac8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bacc:	e77c      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bace:	2d01      	cmp	r5, #1
 800bad0:	f47f af7a 	bne.w	800b9c8 <__ieee754_powf+0x30>
 800bad4:	eeb1 0a40 	vneg.f32	s0, s0
 800bad8:	e776      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bada:	0ff0      	lsrs	r0, r6, #31
 800badc:	3801      	subs	r0, #1
 800bade:	ea55 0300 	orrs.w	r3, r5, r0
 800bae2:	d104      	bne.n	800baee <__ieee754_powf+0x156>
 800bae4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bae8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800baec:	e76c      	b.n	800b9c8 <__ieee754_powf+0x30>
 800baee:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800baf2:	d973      	bls.n	800bbdc <__ieee754_powf+0x244>
 800baf4:	4bad      	ldr	r3, [pc, #692]	@ (800bdac <__ieee754_powf+0x414>)
 800baf6:	4598      	cmp	r8, r3
 800baf8:	d808      	bhi.n	800bb0c <__ieee754_powf+0x174>
 800bafa:	2c00      	cmp	r4, #0
 800bafc:	da0b      	bge.n	800bb16 <__ieee754_powf+0x17e>
 800bafe:	2000      	movs	r0, #0
 800bb00:	ecbd 8b02 	vpop	{d8}
 800bb04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb08:	f000 baa4 	b.w	800c054 <__math_oflowf>
 800bb0c:	4ba8      	ldr	r3, [pc, #672]	@ (800bdb0 <__ieee754_powf+0x418>)
 800bb0e:	4598      	cmp	r8, r3
 800bb10:	d908      	bls.n	800bb24 <__ieee754_powf+0x18c>
 800bb12:	2c00      	cmp	r4, #0
 800bb14:	dcf3      	bgt.n	800bafe <__ieee754_powf+0x166>
 800bb16:	2000      	movs	r0, #0
 800bb18:	ecbd 8b02 	vpop	{d8}
 800bb1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb20:	f000 ba92 	b.w	800c048 <__math_uflowf>
 800bb24:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bb28:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bb2c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800bdb4 <__ieee754_powf+0x41c>
 800bb30:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bb34:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bb38:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb3c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bb40:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bb44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb48:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800bdb8 <__ieee754_powf+0x420>
 800bb4c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bb50:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800bdbc <__ieee754_powf+0x424>
 800bb54:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb58:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800bdc0 <__ieee754_powf+0x428>
 800bb5c:	eef0 6a67 	vmov.f32	s13, s15
 800bb60:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bb64:	ee16 3a90 	vmov	r3, s13
 800bb68:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bb6c:	f023 030f 	bic.w	r3, r3, #15
 800bb70:	ee06 3a90 	vmov	s13, r3
 800bb74:	eee0 6a47 	vfms.f32	s13, s0, s14
 800bb78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb7c:	3d01      	subs	r5, #1
 800bb7e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800bb82:	4305      	orrs	r5, r0
 800bb84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb88:	f024 040f 	bic.w	r4, r4, #15
 800bb8c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800bb90:	bf18      	it	ne
 800bb92:	eeb0 8a47 	vmovne.f32	s16, s14
 800bb96:	ee07 4a10 	vmov	s14, r4
 800bb9a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bb9e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bbaa:	ee07 4a10 	vmov	s14, r4
 800bbae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbb2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bbb6:	ee17 1a10 	vmov	r1, s14
 800bbba:	2900      	cmp	r1, #0
 800bbbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bbc0:	f340 80dd 	ble.w	800bd7e <__ieee754_powf+0x3e6>
 800bbc4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bbc8:	f240 80ca 	bls.w	800bd60 <__ieee754_powf+0x3c8>
 800bbcc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	bf4c      	ite	mi
 800bbd6:	2001      	movmi	r0, #1
 800bbd8:	2000      	movpl	r0, #0
 800bbda:	e791      	b.n	800bb00 <__ieee754_powf+0x168>
 800bbdc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bbe0:	bf01      	itttt	eq
 800bbe2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800bdc4 <__ieee754_powf+0x42c>
 800bbe6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bbea:	f06f 0317 	mvneq.w	r3, #23
 800bbee:	ee17 7a90 	vmoveq	r7, s15
 800bbf2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800bbf6:	bf18      	it	ne
 800bbf8:	2300      	movne	r3, #0
 800bbfa:	3a7f      	subs	r2, #127	@ 0x7f
 800bbfc:	441a      	add	r2, r3
 800bbfe:	4b72      	ldr	r3, [pc, #456]	@ (800bdc8 <__ieee754_powf+0x430>)
 800bc00:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800bc04:	429f      	cmp	r7, r3
 800bc06:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800bc0a:	dd06      	ble.n	800bc1a <__ieee754_powf+0x282>
 800bc0c:	4b6f      	ldr	r3, [pc, #444]	@ (800bdcc <__ieee754_powf+0x434>)
 800bc0e:	429f      	cmp	r7, r3
 800bc10:	f340 80a4 	ble.w	800bd5c <__ieee754_powf+0x3c4>
 800bc14:	3201      	adds	r2, #1
 800bc16:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	4b6c      	ldr	r3, [pc, #432]	@ (800bdd0 <__ieee754_powf+0x438>)
 800bc1e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bc22:	ee07 1a10 	vmov	s14, r1
 800bc26:	edd3 5a00 	vldr	s11, [r3]
 800bc2a:	4b6a      	ldr	r3, [pc, #424]	@ (800bdd4 <__ieee754_powf+0x43c>)
 800bc2c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bc30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc34:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bc38:	1049      	asrs	r1, r1, #1
 800bc3a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800bc3e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800bc42:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800bc46:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bc4a:	ee07 1a90 	vmov	s15, r1
 800bc4e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bc52:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bc56:	ee15 7a10 	vmov	r7, s10
 800bc5a:	401f      	ands	r7, r3
 800bc5c:	ee06 7a90 	vmov	s13, r7
 800bc60:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bc64:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bc68:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bc6c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bc70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bdd8 <__ieee754_powf+0x440>
 800bc74:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800bddc <__ieee754_powf+0x444>
 800bc78:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bc7c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800bde0 <__ieee754_powf+0x448>
 800bc80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bc84:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800bdb4 <__ieee754_powf+0x41c>
 800bc88:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bc8c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800bde4 <__ieee754_powf+0x44c>
 800bc90:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bc94:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800bde8 <__ieee754_powf+0x450>
 800bc98:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bc9c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bca0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bca4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bca8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bcac:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800bcb0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bcb4:	eef0 5a67 	vmov.f32	s11, s15
 800bcb8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bcbc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800bcc0:	ee15 1a90 	vmov	r1, s11
 800bcc4:	4019      	ands	r1, r3
 800bcc6:	ee05 1a90 	vmov	s11, r1
 800bcca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bcce:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800bcd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcd6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bcda:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bcde:	eeb0 6a67 	vmov.f32	s12, s15
 800bce2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bce6:	ee16 1a10 	vmov	r1, s12
 800bcea:	4019      	ands	r1, r3
 800bcec:	ee06 1a10 	vmov	s12, r1
 800bcf0:	eeb0 7a46 	vmov.f32	s14, s12
 800bcf4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800bcf8:	493c      	ldr	r1, [pc, #240]	@ (800bdec <__ieee754_powf+0x454>)
 800bcfa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800bcfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd02:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800bdf0 <__ieee754_powf+0x458>
 800bd06:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800bdf4 <__ieee754_powf+0x45c>
 800bd0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd0e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bdf8 <__ieee754_powf+0x460>
 800bd12:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd16:	ed91 7a00 	vldr	s14, [r1]
 800bd1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd1e:	ee07 2a10 	vmov	s14, r2
 800bd22:	eef0 6a67 	vmov.f32	s13, s15
 800bd26:	4a35      	ldr	r2, [pc, #212]	@ (800bdfc <__ieee754_powf+0x464>)
 800bd28:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bd2c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800bd30:	ed92 5a00 	vldr	s10, [r2]
 800bd34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd38:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd3c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800bd40:	ee16 2a90 	vmov	r2, s13
 800bd44:	4013      	ands	r3, r2
 800bd46:	ee06 3a90 	vmov	s13, r3
 800bd4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bd4e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800bd52:	eea6 7a65 	vfms.f32	s14, s12, s11
 800bd56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd5a:	e70f      	b.n	800bb7c <__ieee754_powf+0x1e4>
 800bd5c:	2601      	movs	r6, #1
 800bd5e:	e75d      	b.n	800bc1c <__ieee754_powf+0x284>
 800bd60:	d152      	bne.n	800be08 <__ieee754_powf+0x470>
 800bd62:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800be00 <__ieee754_powf+0x468>
 800bd66:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd6a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bd6e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd76:	f73f af29 	bgt.w	800bbcc <__ieee754_powf+0x234>
 800bd7a:	2386      	movs	r3, #134	@ 0x86
 800bd7c:	e048      	b.n	800be10 <__ieee754_powf+0x478>
 800bd7e:	4a21      	ldr	r2, [pc, #132]	@ (800be04 <__ieee754_powf+0x46c>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d907      	bls.n	800bd94 <__ieee754_powf+0x3fc>
 800bd84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8c:	bf4c      	ite	mi
 800bd8e:	2001      	movmi	r0, #1
 800bd90:	2000      	movpl	r0, #0
 800bd92:	e6c1      	b.n	800bb18 <__ieee754_powf+0x180>
 800bd94:	d138      	bne.n	800be08 <__ieee754_powf+0x470>
 800bd96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd9a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda2:	dbea      	blt.n	800bd7a <__ieee754_powf+0x3e2>
 800bda4:	e7ee      	b.n	800bd84 <__ieee754_powf+0x3ec>
 800bda6:	bf00      	nop
 800bda8:	00000000 	.word	0x00000000
 800bdac:	3f7ffff3 	.word	0x3f7ffff3
 800bdb0:	3f800007 	.word	0x3f800007
 800bdb4:	3eaaaaab 	.word	0x3eaaaaab
 800bdb8:	3fb8aa3b 	.word	0x3fb8aa3b
 800bdbc:	36eca570 	.word	0x36eca570
 800bdc0:	3fb8aa00 	.word	0x3fb8aa00
 800bdc4:	4b800000 	.word	0x4b800000
 800bdc8:	001cc471 	.word	0x001cc471
 800bdcc:	005db3d6 	.word	0x005db3d6
 800bdd0:	0800c668 	.word	0x0800c668
 800bdd4:	fffff000 	.word	0xfffff000
 800bdd8:	3e6c3255 	.word	0x3e6c3255
 800bddc:	3e53f142 	.word	0x3e53f142
 800bde0:	3e8ba305 	.word	0x3e8ba305
 800bde4:	3edb6db7 	.word	0x3edb6db7
 800bde8:	3f19999a 	.word	0x3f19999a
 800bdec:	0800c658 	.word	0x0800c658
 800bdf0:	3f76384f 	.word	0x3f76384f
 800bdf4:	3f763800 	.word	0x3f763800
 800bdf8:	369dc3a0 	.word	0x369dc3a0
 800bdfc:	0800c660 	.word	0x0800c660
 800be00:	3338aa3c 	.word	0x3338aa3c
 800be04:	43160000 	.word	0x43160000
 800be08:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800be0c:	d971      	bls.n	800bef2 <__ieee754_powf+0x55a>
 800be0e:	15db      	asrs	r3, r3, #23
 800be10:	3b7e      	subs	r3, #126	@ 0x7e
 800be12:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800be16:	4118      	asrs	r0, r3
 800be18:	4408      	add	r0, r1
 800be1a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800be1e:	4a3c      	ldr	r2, [pc, #240]	@ (800bf10 <__ieee754_powf+0x578>)
 800be20:	3b7f      	subs	r3, #127	@ 0x7f
 800be22:	411a      	asrs	r2, r3
 800be24:	4002      	ands	r2, r0
 800be26:	ee07 2a10 	vmov	s14, r2
 800be2a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800be2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800be32:	f1c3 0317 	rsb	r3, r3, #23
 800be36:	4118      	asrs	r0, r3
 800be38:	2900      	cmp	r1, #0
 800be3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be3e:	bfb8      	it	lt
 800be40:	4240      	neglt	r0, r0
 800be42:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800be46:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800bf14 <__ieee754_powf+0x57c>
 800be4a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800bf18 <__ieee754_powf+0x580>
 800be4e:	ee17 3a10 	vmov	r3, s14
 800be52:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800be56:	f023 030f 	bic.w	r3, r3, #15
 800be5a:	ee07 3a10 	vmov	s14, r3
 800be5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be62:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be66:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800be6a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800bf1c <__ieee754_powf+0x584>
 800be6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be72:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800be76:	eef0 6a67 	vmov.f32	s13, s15
 800be7a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800be7e:	eef0 5a66 	vmov.f32	s11, s13
 800be82:	eee7 5a46 	vfms.f32	s11, s14, s12
 800be86:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be8a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800be8e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800bf20 <__ieee754_powf+0x588>
 800be92:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800bf24 <__ieee754_powf+0x58c>
 800be96:	eea7 6a25 	vfma.f32	s12, s14, s11
 800be9a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800bf28 <__ieee754_powf+0x590>
 800be9e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bea2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800bf2c <__ieee754_powf+0x594>
 800bea6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800beaa:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800bf30 <__ieee754_powf+0x598>
 800beae:	eee6 5a07 	vfma.f32	s11, s12, s14
 800beb2:	eeb0 6a66 	vmov.f32	s12, s13
 800beb6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800beba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800bebe:	ee66 5a86 	vmul.f32	s11, s13, s12
 800bec2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800bec6:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800beca:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800bece:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bed2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bed6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800beda:	ee10 3a10 	vmov	r3, s0
 800bede:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800bee2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bee6:	da06      	bge.n	800bef6 <__ieee754_powf+0x55e>
 800bee8:	f000 f82e 	bl	800bf48 <scalbnf>
 800beec:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bef0:	e56a      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e7a5      	b.n	800be42 <__ieee754_powf+0x4aa>
 800bef6:	ee00 3a10 	vmov	s0, r3
 800befa:	e7f7      	b.n	800beec <__ieee754_powf+0x554>
 800befc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf00:	e562      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bf02:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800bf34 <__ieee754_powf+0x59c>
 800bf06:	e55f      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bf08:	eeb0 0a48 	vmov.f32	s0, s16
 800bf0c:	e55c      	b.n	800b9c8 <__ieee754_powf+0x30>
 800bf0e:	bf00      	nop
 800bf10:	ff800000 	.word	0xff800000
 800bf14:	3f317218 	.word	0x3f317218
 800bf18:	3f317200 	.word	0x3f317200
 800bf1c:	35bfbe8c 	.word	0x35bfbe8c
 800bf20:	b5ddea0e 	.word	0xb5ddea0e
 800bf24:	3331bb4c 	.word	0x3331bb4c
 800bf28:	388ab355 	.word	0x388ab355
 800bf2c:	bb360b61 	.word	0xbb360b61
 800bf30:	3e2aaaab 	.word	0x3e2aaaab
 800bf34:	00000000 	.word	0x00000000

0800bf38 <fabsf>:
 800bf38:	ee10 3a10 	vmov	r3, s0
 800bf3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bf40:	ee00 3a10 	vmov	s0, r3
 800bf44:	4770      	bx	lr
	...

0800bf48 <scalbnf>:
 800bf48:	ee10 3a10 	vmov	r3, s0
 800bf4c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bf50:	d02b      	beq.n	800bfaa <scalbnf+0x62>
 800bf52:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bf56:	d302      	bcc.n	800bf5e <scalbnf+0x16>
 800bf58:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bf5c:	4770      	bx	lr
 800bf5e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bf62:	d123      	bne.n	800bfac <scalbnf+0x64>
 800bf64:	4b24      	ldr	r3, [pc, #144]	@ (800bff8 <scalbnf+0xb0>)
 800bf66:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bffc <scalbnf+0xb4>
 800bf6a:	4298      	cmp	r0, r3
 800bf6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bf70:	db17      	blt.n	800bfa2 <scalbnf+0x5a>
 800bf72:	ee10 3a10 	vmov	r3, s0
 800bf76:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf7a:	3a19      	subs	r2, #25
 800bf7c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bf80:	4288      	cmp	r0, r1
 800bf82:	dd15      	ble.n	800bfb0 <scalbnf+0x68>
 800bf84:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c000 <scalbnf+0xb8>
 800bf88:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c004 <scalbnf+0xbc>
 800bf8c:	ee10 3a10 	vmov	r3, s0
 800bf90:	eeb0 7a67 	vmov.f32	s14, s15
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	bfb8      	it	lt
 800bf98:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf9c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bfa0:	4770      	bx	lr
 800bfa2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c008 <scalbnf+0xc0>
 800bfa6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfaa:	4770      	bx	lr
 800bfac:	0dd2      	lsrs	r2, r2, #23
 800bfae:	e7e5      	b.n	800bf7c <scalbnf+0x34>
 800bfb0:	4410      	add	r0, r2
 800bfb2:	28fe      	cmp	r0, #254	@ 0xfe
 800bfb4:	dce6      	bgt.n	800bf84 <scalbnf+0x3c>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	dd06      	ble.n	800bfc8 <scalbnf+0x80>
 800bfba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfbe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bfc2:	ee00 3a10 	vmov	s0, r3
 800bfc6:	4770      	bx	lr
 800bfc8:	f110 0f16 	cmn.w	r0, #22
 800bfcc:	da09      	bge.n	800bfe2 <scalbnf+0x9a>
 800bfce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c008 <scalbnf+0xc0>
 800bfd2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c00c <scalbnf+0xc4>
 800bfd6:	ee10 3a10 	vmov	r3, s0
 800bfda:	eeb0 7a67 	vmov.f32	s14, s15
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	e7d9      	b.n	800bf96 <scalbnf+0x4e>
 800bfe2:	3019      	adds	r0, #25
 800bfe4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bfe8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bfec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c010 <scalbnf+0xc8>
 800bff0:	ee07 3a90 	vmov	s15, r3
 800bff4:	e7d7      	b.n	800bfa6 <scalbnf+0x5e>
 800bff6:	bf00      	nop
 800bff8:	ffff3cb0 	.word	0xffff3cb0
 800bffc:	4c000000 	.word	0x4c000000
 800c000:	7149f2ca 	.word	0x7149f2ca
 800c004:	f149f2ca 	.word	0xf149f2ca
 800c008:	0da24260 	.word	0x0da24260
 800c00c:	8da24260 	.word	0x8da24260
 800c010:	33000000 	.word	0x33000000

0800c014 <with_errnof>:
 800c014:	b510      	push	{r4, lr}
 800c016:	ed2d 8b02 	vpush	{d8}
 800c01a:	eeb0 8a40 	vmov.f32	s16, s0
 800c01e:	4604      	mov	r4, r0
 800c020:	f7fc ff70 	bl	8008f04 <__errno>
 800c024:	eeb0 0a48 	vmov.f32	s0, s16
 800c028:	ecbd 8b02 	vpop	{d8}
 800c02c:	6004      	str	r4, [r0, #0]
 800c02e:	bd10      	pop	{r4, pc}

0800c030 <xflowf>:
 800c030:	b130      	cbz	r0, 800c040 <xflowf+0x10>
 800c032:	eef1 7a40 	vneg.f32	s15, s0
 800c036:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c03a:	2022      	movs	r0, #34	@ 0x22
 800c03c:	f7ff bfea 	b.w	800c014 <with_errnof>
 800c040:	eef0 7a40 	vmov.f32	s15, s0
 800c044:	e7f7      	b.n	800c036 <xflowf+0x6>
	...

0800c048 <__math_uflowf>:
 800c048:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c050 <__math_uflowf+0x8>
 800c04c:	f7ff bff0 	b.w	800c030 <xflowf>
 800c050:	10000000 	.word	0x10000000

0800c054 <__math_oflowf>:
 800c054:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c05c <__math_oflowf+0x8>
 800c058:	f7ff bfea 	b.w	800c030 <xflowf>
 800c05c:	70000000 	.word	0x70000000

0800c060 <__ieee754_sqrtf>:
 800c060:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c064:	4770      	bx	lr
	...

0800c068 <_init>:
 800c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c06a:	bf00      	nop
 800c06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c06e:	bc08      	pop	{r3}
 800c070:	469e      	mov	lr, r3
 800c072:	4770      	bx	lr

0800c074 <_fini>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr
