
Nucleo_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf00  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800d0d0  0800d0d0  0000e0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d788  0800d788  0000f280  2**0
                  CONTENTS
  4 .ARM          00000008  0800d788  0800d788  0000e788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d790  0800d790  0000f280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d790  0800d790  0000e790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d794  0800d794  0000e794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  0800d798  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  20000280  0800da18  0000f280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f08  0800da18  0000ff08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b03  00000000  00000000  0000f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b36  00000000  00000000  00020db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caf  00000000  00000000  00024940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002125f  00000000  00000000  000255ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148cb  00000000  00000000  0004684e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2cb5  00000000  00000000  0005b119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ddce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cdc  00000000  00000000  0011de14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00123af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d0b8 	.word	0x0800d0b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0800d0b8 	.word	0x0800d0b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <USART2_IRQHandler>:
bool calibrating_compass = 0;

HAL_StatusTypeDef result;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART2_IRQHandler(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart2);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <USART2_IRQHandler+0x10>)
 800102a:	f005 fe29 	bl	8006c80 <HAL_UART_IRQHandler>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200003f0 	.word	0x200003f0

08001038 <store_flash_data>:

void store_flash_data(){
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
	// Store altitude offset, magnetic offsets, mission time
	HAL_FLASH_Unlock();
 8001040:	f002 fc00 	bl	8003844 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(SECTOR, FLASH_VOLTAGE_RANGE_2);
 8001044:	2101      	movs	r1, #1
 8001046:	200b      	movs	r0, #11
 8001048:	f002 fd6e 	bl	8003b28 <FLASH_Erase_Sector>
	HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	@ 0x64
 800104e:	f002 f9dd 	bl	800340c <HAL_Delay>

	uint32_t altitude_offset_bits, mag_x_offset_bits, mag_y_offset_bits, mag_z_offset_bits;

	// Copy the float data into the 32-bit unsigned integer variables
	memcpy(&altitude_offset_bits, &altitude_offset, sizeof(altitude_offset));
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <store_flash_data+0x98>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	617b      	str	r3, [r7, #20]
	memcpy(&mag_x_offset_bits, &mag_x_offset, sizeof(mag_x_offset));
 8001058:	4b1e      	ldr	r3, [pc, #120]	@ (80010d4 <store_flash_data+0x9c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
	memcpy(&mag_y_offset_bits, &mag_y_offset, sizeof(mag_y_offset));
 800105e:	4b1e      	ldr	r3, [pc, #120]	@ (80010d8 <store_flash_data+0xa0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	60fb      	str	r3, [r7, #12]
	memcpy(&mag_z_offset_bits, &mag_z_offset, sizeof(mag_z_offset));
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <store_flash_data+0xa4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60bb      	str	r3, [r7, #8]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ALTITUDE_OFFSET_ADDRESS, altitude_offset_bits);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2200      	movs	r2, #0
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001076:	491a      	ldr	r1, [pc, #104]	@ (80010e0 <store_flash_data+0xa8>)
 8001078:	2002      	movs	r0, #2
 800107a:	f002 fb8f 	bl	800379c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_X_OFFSET_ADDRESS, mag_x_offset_bits);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	2200      	movs	r2, #0
 8001082:	469a      	mov	sl, r3
 8001084:	4693      	mov	fp, r2
 8001086:	4652      	mov	r2, sl
 8001088:	465b      	mov	r3, fp
 800108a:	4916      	ldr	r1, [pc, #88]	@ (80010e4 <store_flash_data+0xac>)
 800108c:	2002      	movs	r0, #2
 800108e:	f002 fb85 	bl	800379c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Y_OFFSET_ADDRESS, mag_y_offset_bits);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	4698      	mov	r8, r3
 8001098:	4691      	mov	r9, r2
 800109a:	4642      	mov	r2, r8
 800109c:	464b      	mov	r3, r9
 800109e:	4912      	ldr	r1, [pc, #72]	@ (80010e8 <store_flash_data+0xb0>)
 80010a0:	2002      	movs	r0, #2
 80010a2:	f002 fb7b 	bl	800379c <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Z_OFFSET_ADDRESS, mag_z_offset_bits);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2200      	movs	r2, #0
 80010aa:	461c      	mov	r4, r3
 80010ac:	4615      	mov	r5, r2
 80010ae:	4622      	mov	r2, r4
 80010b0:	462b      	mov	r3, r5
 80010b2:	490e      	ldr	r1, [pc, #56]	@ (80010ec <store_flash_data+0xb4>)
 80010b4:	2002      	movs	r0, #2
 80010b6:	f002 fb71 	bl	800379c <HAL_FLASH_Program>
	HAL_Delay(100);
 80010ba:	2064      	movs	r0, #100	@ 0x64
 80010bc:	f002 f9a6 	bl	800340c <HAL_Delay>

	HAL_FLASH_Lock();
 80010c0:	f002 fbe2 	bl	8003888 <HAL_FLASH_Lock>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010ce:	bf00      	nop
 80010d0:	2000009c 	.word	0x2000009c
 80010d4:	20000c68 	.word	0x20000c68
 80010d8:	20000c6c 	.word	0x20000c6c
 80010dc:	20000c70 	.word	0x20000c70
 80010e0:	080e0000 	.word	0x080e0000
 80010e4:	080e0004 	.word	0x080e0004
 80010e8:	080e0008 	.word	0x080e0008
 80010ec:	080e000c 	.word	0x080e000c

080010f0 <load_flash_data>:

void load_flash_data(){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80010f4:	f002 fba6 	bl	8003844 <HAL_FLASH_Unlock>

//	altitude_offset = * (float*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = *(float*)FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (float*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (float*) FLASH_MAG_Z_OFFSET_ADDRESS;
	memcpy(&altitude_offset, (float*)FLASH_ALTITUDE_OFFSET_ADDRESS, sizeof(float));
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <load_flash_data+0x30>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <load_flash_data+0x34>)
 80010fe:	6013      	str	r3, [r2, #0]
	memcpy(&mag_x_offset, (float*)FLASH_MAG_X_OFFSET_ADDRESS, sizeof(float));
 8001100:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <load_flash_data+0x38>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a09      	ldr	r2, [pc, #36]	@ (800112c <load_flash_data+0x3c>)
 8001106:	6013      	str	r3, [r2, #0]
	memcpy(&mag_y_offset, (float*)FLASH_MAG_Y_OFFSET_ADDRESS, sizeof(float));
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <load_flash_data+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <load_flash_data+0x44>)
 800110e:	6013      	str	r3, [r2, #0]
	memcpy(&mag_z_offset, (float*)FLASH_MAG_Z_OFFSET_ADDRESS, sizeof(float));
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <load_flash_data+0x48>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a09      	ldr	r2, [pc, #36]	@ (800113c <load_flash_data+0x4c>)
 8001116:	6013      	str	r3, [r2, #0]

	HAL_FLASH_Lock();
 8001118:	f002 fbb6 	bl	8003888 <HAL_FLASH_Lock>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	080e0000 	.word	0x080e0000
 8001124:	2000009c 	.word	0x2000009c
 8001128:	080e0004 	.word	0x080e0004
 800112c:	20000c68 	.word	0x20000c68
 8001130:	080e0008 	.word	0x080e0008
 8001134:	20000c6c 	.word	0x20000c6c
 8001138:	080e000c 	.word	0x080e000c
 800113c:	20000c70 	.word	0x20000c70

08001140 <set_gps>:

uint8_t set_gps(char* buf, uint8_t order){
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <set_gps+0x18>
		return 0;
 8001154:	2300      	movs	r3, #0
 8001156:	e0c8      	b.n	80012ea <set_gps+0x1aa>

	switch(order) {
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	2b09      	cmp	r3, #9
 800115c:	f200 80bd 	bhi.w	80012da <set_gps+0x19a>
 8001160:	a201      	add	r2, pc, #4	@ (adr r2, 8001168 <set_gps+0x28>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001191 	.word	0x08001191
 800116c:	080011c9 	.word	0x080011c9
 8001170:	0800121d 	.word	0x0800121d
 8001174:	08001245 	.word	0x08001245
 8001178:	08001267 	.word	0x08001267
 800117c:	0800128f 	.word	0x0800128f
 8001180:	080012db 	.word	0x080012db
 8001184:	080012b1 	.word	0x080012b1
 8001188:	080012db 	.word	0x080012db
 800118c:	080012c1 	.word	0x080012c1
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff f88d 	bl	80002b0 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	2b04      	cmp	r3, #4
 800119a:	d913      	bls.n	80011c4 <set_gps+0x84>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b47      	cmp	r3, #71	@ 0x47
 80011a2:	d10f      	bne.n	80011c4 <set_gps+0x84>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3302      	adds	r3, #2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b47      	cmp	r3, #71	@ 0x47
 80011ac:	d10a      	bne.n	80011c4 <set_gps+0x84>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3303      	adds	r3, #3
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b47      	cmp	r3, #71	@ 0x47
 80011b6:	d105      	bne.n	80011c4 <set_gps+0x84>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b41      	cmp	r3, #65	@ 0x41
 80011c0:	f000 808d 	beq.w	80012de <set_gps+0x19e>
			return 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e090      	b.n	80012ea <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4618      	mov	r0, r3
 80011d6:	f006 ffa3 	bl	8008120 <atoi>
 80011da:	4603      	mov	r3, r0
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b45      	ldr	r3, [pc, #276]	@ (80012f4 <set_gps+0x1b4>)
 80011e0:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3302      	adds	r3, #2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 ff95 	bl	8008120 <atoi>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <set_gps+0x1b8>)
 80011fc:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3304      	adds	r3, #4
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4618      	mov	r0, r3
 800120e:	f006 ff87 	bl	8008120 <atoi>
 8001212:	4603      	mov	r3, r0
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <set_gps+0x1bc>)
 8001218:	701a      	strb	r2, [r3, #0]

		break;
 800121a:	e065      	b.n	80012e8 <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f006 ff7c 	bl	800811a <atof>
 8001222:	ec51 0b10 	vmov	r0, r1, d0
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	4b35      	ldr	r3, [pc, #212]	@ (8001300 <set_gps+0x1c0>)
 800122c:	f7ff fb2e 	bl	800088c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcf6 	bl	8000c28 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <set_gps+0x1c4>)
 8001240:	6013      	str	r3, [r2, #0]
		break;
 8001242:	e051      	b.n	80012e8 <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	4b2f      	ldr	r3, [pc, #188]	@ (8001308 <set_gps+0x1c8>)
 800124a:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 800124c:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <set_gps+0x1c8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b53      	cmp	r3, #83	@ 0x53
 8001252:	d146      	bne.n	80012e2 <set_gps+0x1a2>
			gps_latitude*= -1;
 8001254:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <set_gps+0x1c4>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eef1 7a67 	vneg.f32	s15, s15
 800125e:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <set_gps+0x1c4>)
 8001260:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001264:	e03d      	b.n	80012e2 <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f006 ff57 	bl	800811a <atof>
 800126c:	ec51 0b10 	vmov	r0, r1, d0
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b22      	ldr	r3, [pc, #136]	@ (8001300 <set_gps+0x1c0>)
 8001276:	f7ff fb09 	bl	800088c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fcd1 	bl	8000c28 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4a20      	ldr	r2, [pc, #128]	@ (800130c <set_gps+0x1cc>)
 800128a:	6013      	str	r3, [r2, #0]
		break;
 800128c:	e02c      	b.n	80012e8 <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <set_gps+0x1d0>)
 8001294:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 8001296:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <set_gps+0x1d0>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b57      	cmp	r3, #87	@ 0x57
 800129c:	d123      	bne.n	80012e6 <set_gps+0x1a6>
			gps_longitude*= -1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	@ (800130c <set_gps+0x1cc>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eef1 7a67 	vneg.f32	s15, s15
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <set_gps+0x1cc>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80012ae:	e01a      	b.n	80012e6 <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f006 ff35 	bl	8008120 <atoi>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <set_gps+0x1d4>)
 80012bc:	701a      	strb	r2, [r3, #0]
		break;
 80012be:	e013      	b.n	80012e8 <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f006 ff2a 	bl	800811a <atof>
 80012c6:	ec53 2b10 	vmov	r2, r3, d0
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fcab 	bl	8000c28 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <set_gps+0x1d8>)
 80012d6:	6013      	str	r3, [r2, #0]
		break;
 80012d8:	e006      	b.n	80012e8 <set_gps+0x1a8>
	default:
		break;
 80012da:	bf00      	nop
 80012dc:	e004      	b.n	80012e8 <set_gps+0x1a8>
		break;
 80012de:	bf00      	nop
 80012e0:	e002      	b.n	80012e8 <set_gps+0x1a8>
		break;
 80012e2:	bf00      	nop
 80012e4:	e000      	b.n	80012e8 <set_gps+0x1a8>
		break;
 80012e6:	bf00      	nop
	}

	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200009a4 	.word	0x200009a4
 80012f8:	200009a5 	.word	0x200009a5
 80012fc:	200009a6 	.word	0x200009a6
 8001300:	40590000 	.word	0x40590000
 8001304:	200009ac 	.word	0x200009ac
 8001308:	20000bb7 	.word	0x20000bb7
 800130c:	200009b0 	.word	0x200009b0
 8001310:	20000bb8 	.word	0x20000bb8
 8001314:	200009b4 	.word	0x200009b4
 8001318:	200009a8 	.word	0x200009a8

0800131c <parse_nmea>:

bool parse_nmea(char *buf){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e032      	b.n	8001398 <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b2c      	cmp	r3, #44	@ 0x2c
 800133c:	d123      	bne.n	8001386 <parse_nmea+0x6a>
			if (last != i){
 800133e:	7bba      	ldrb	r2, [r7, #14]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d018      	beq.n	8001378 <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 8001346:	22ff      	movs	r2, #255	@ 0xff
 8001348:	2100      	movs	r1, #0
 800134a:	4818      	ldr	r0, [pc, #96]	@ (80013ac <parse_nmea+0x90>)
 800134c:	f008 fb11 	bl	8009972 <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	18d1      	adds	r1, r2, r3
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4813      	ldr	r0, [pc, #76]	@ (80013ac <parse_nmea+0x90>)
 8001360:	f008 fbbb 	bl	8009ada <memcpy>
				if(set_gps(parse_buf, order)){
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	4619      	mov	r1, r3
 8001368:	4810      	ldr	r0, [pc, #64]	@ (80013ac <parse_nmea+0x90>)
 800136a:	f7ff fee9 	bl	8001140 <set_gps>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <parse_nmea+0x5c>
					return false;
 8001374:	2300      	movs	r3, #0
 8001376:	e015      	b.n	80013a4 <parse_nmea+0x88>
				}
			}
			last = i + 1;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	3301      	adds	r3, #1
 800137c:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 800137e:	7b7b      	ldrb	r3, [r7, #13]
 8001380:	3301      	adds	r3, #1
 8001382:	737b      	strb	r3, [r7, #13]
 8001384:	e005      	b.n	8001392 <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001390:	d006      	beq.n	80013a0 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	3301      	adds	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2bff      	cmp	r3, #255	@ 0xff
 800139c:	d1c9      	bne.n	8001332 <parse_nmea+0x16>
 800139e:	e000      	b.n	80013a2 <parse_nmea+0x86>
			break;
 80013a0:	bf00      	nop
		}
	}

	return true;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000ab8 	.word	0x20000ab8

080013b0 <calculate_altitude>:

float calculate_altitude(float pressure) {
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f8e4 	bl	8000588 <__aeabi_f2d>
 80013c0:	a323      	add	r3, pc, #140	@ (adr r3, 8001450 <calculate_altitude+0xa0>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff fa61 	bl	800088c <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fc29 	bl	8000c28 <__aeabi_d2f>
 80013d6:	4603      	mov	r3, r0
 80013d8:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001448 <calculate_altitude+0x98>
 80013dc:	ee00 3a10 	vmov	s0, r3
 80013e0:	f00b f836 	bl	800c450 <powf>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff f8c8 	bl	8000588 <__aeabi_f2d>
 80013f8:	a311      	add	r3, pc, #68	@ (adr r3, 8001440 <calculate_altitude+0x90>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f91b 	bl	8000638 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4614      	mov	r4, r2
 8001408:	461d      	mov	r5, r3
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <calculate_altitude+0x9c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8ba 	bl	8000588 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7fe ff56 	bl	80002cc <__adddf3>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbfe 	bl	8000c28 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	ee07 3a90 	vmov	s15, r3
}
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	f3af 8000 	nop.w
 8001440:	a3d70a3d 	.word	0xa3d70a3d
 8001444:	40e5a558 	.word	0x40e5a558
 8001448:	3e42d45b 	.word	0x3e42d45b
 800144c:	2000009c 	.word	0x2000009c
 8001450:	2f1a9fbe 	.word	0x2f1a9fbe
 8001454:	405954dd 	.word	0x405954dd

08001458 <read_MMC5603>:

void read_MMC5603(void) {
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	if (HAL_I2C_Master_Transmit(&hi2c2, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001462:	1dfa      	adds	r2, r7, #7
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2160      	movs	r1, #96	@ 0x60
 800146e:	4880      	ldr	r0, [pc, #512]	@ (8001670 <read_MMC5603+0x218>)
 8001470:	f002 fe94 	bl	800419c <HAL_I2C_Master_Transmit>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 80ea 	bne.w	8001650 <read_MMC5603+0x1f8>
	}

//	HAL_Delay(10);

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c2, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 800147c:	f107 0208 	add.w	r2, r7, #8
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2309      	movs	r3, #9
 8001488:	2160      	movs	r1, #96	@ 0x60
 800148a:	4879      	ldr	r0, [pc, #484]	@ (8001670 <read_MMC5603+0x218>)
 800148c:	f002 ff84 	bl	8004398 <HAL_I2C_Master_Receive>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80de 	bne.w	8001654 <read_MMC5603+0x1fc>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 8001498:	7a3b      	ldrb	r3, [r7, #8]
 800149a:	031a      	lsls	r2, r3, #12
 800149c:	7a7b      	ldrb	r3, [r7, #9]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4313      	orrs	r3, r2
 80014a2:	7bba      	ldrb	r2, [r7, #14]
 80014a4:	0912      	lsrs	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 80014ac:	7abb      	ldrb	r3, [r7, #10]
 80014ae:	031a      	lsls	r2, r3, #12
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4313      	orrs	r3, r2
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	0912      	lsrs	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 80014c0:	7b3b      	ldrb	r3, [r7, #12]
 80014c2:	031a      	lsls	r2, r3, #12
 80014c4:	7b7b      	ldrb	r3, [r7, #13]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4313      	orrs	r3, r2
 80014ca:	7c3a      	ldrb	r2, [r7, #16]
 80014cc:	0912      	lsrs	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	4313      	orrs	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80014da:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80014e2:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 80014ea:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625 - mag_x_offset;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f6:	ee17 0a90 	vmov	r0, s15
 80014fa:	f7ff f845 	bl	8000588 <__aeabi_f2d>
 80014fe:	a358      	add	r3, pc, #352	@ (adr r3, 8001660 <read_MMC5603+0x208>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f898 	bl	8000638 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <read_MMC5603+0x21c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe fed1 	bl	80002c8 <__aeabi_dsub>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb7b 	bl	8000c28 <__aeabi_d2f>
 8001532:	4603      	mov	r3, r0
 8001534:	4a50      	ldr	r2, [pc, #320]	@ (8001678 <read_MMC5603+0x220>)
 8001536:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625 - mag_y_offset;
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ee17 0a90 	vmov	r0, s15
 8001546:	f7ff f81f 	bl	8000588 <__aeabi_f2d>
 800154a:	a345      	add	r3, pc, #276	@ (adr r3, 8001660 <read_MMC5603+0x208>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f872 	bl	8000638 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4614      	mov	r4, r2
 800155a:	461d      	mov	r5, r3
 800155c:	4b47      	ldr	r3, [pc, #284]	@ (800167c <read_MMC5603+0x224>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f811 	bl	8000588 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4620      	mov	r0, r4
 800156c:	4629      	mov	r1, r5
 800156e:	f7fe feab 	bl	80002c8 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fb55 	bl	8000c28 <__aeabi_d2f>
 800157e:	4603      	mov	r3, r0
 8001580:	4a3f      	ldr	r2, [pc, #252]	@ (8001680 <read_MMC5603+0x228>)
 8001582:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625 - mag_z_offset;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158e:	ee17 0a90 	vmov	r0, s15
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
 8001596:	a332      	add	r3, pc, #200	@ (adr r3, 8001660 <read_MMC5603+0x208>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f84c 	bl	8000638 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4614      	mov	r4, r2
 80015a6:	461d      	mov	r5, r3
 80015a8:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <read_MMC5603+0x22c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffeb 	bl	8000588 <__aeabi_f2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7fe fe85 	bl	80002c8 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fb2f 	bl	8000c28 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001688 <read_MMC5603+0x230>)
 80015ce:	6013      	str	r3, [r2, #0]

	direction = atan2(mag_y, mag_x) * 180 / PI;
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <read_MMC5603+0x228>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffd7 	bl	8000588 <__aeabi_f2d>
 80015da:	4604      	mov	r4, r0
 80015dc:	460d      	mov	r5, r1
 80015de:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <read_MMC5603+0x220>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffd0 	bl	8000588 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b11 	vmov	d1, r2, r3
 80015f0:	ec45 4b10 	vmov	d0, r4, r5
 80015f4:	f00a ff2a 	bl	800c44c <atan2>
 80015f8:	ec51 0b10 	vmov	r0, r1, d0
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <read_MMC5603+0x234>)
 8001602:	f7ff f819 	bl	8000638 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	a316      	add	r3, pc, #88	@ (adr r3, 8001668 <read_MMC5603+0x210>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f93a 	bl	800088c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fb02 	bl	8000c28 <__aeabi_d2f>
 8001624:	4603      	mov	r3, r0
 8001626:	4a1a      	ldr	r2, [pc, #104]	@ (8001690 <read_MMC5603+0x238>)
 8001628:	6013      	str	r3, [r2, #0]
	if (direction < 0){
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <read_MMC5603+0x238>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	d50d      	bpl.n	8001656 <read_MMC5603+0x1fe>
		direction += 360;
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <read_MMC5603+0x238>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001694 <read_MMC5603+0x23c>
 8001644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <read_MMC5603+0x238>)
 800164a:	edc3 7a00 	vstr	s15, [r3]
 800164e:	e002      	b.n	8001656 <read_MMC5603+0x1fe>
		return;
 8001650:	bf00      	nop
 8001652:	e000      	b.n	8001656 <read_MMC5603+0x1fe>
		return;
 8001654:	bf00      	nop
	}
}
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bdb0      	pop	{r4, r5, r7, pc}
 800165c:	f3af 8000 	nop.w
 8001660:	d2f1a9fc 	.word	0xd2f1a9fc
 8001664:	3f10624d 	.word	0x3f10624d
 8001668:	fc8b007a 	.word	0xfc8b007a
 800166c:	400921fa 	.word	0x400921fa
 8001670:	2000039c 	.word	0x2000039c
 8001674:	20000c68 	.word	0x20000c68
 8001678:	20000994 	.word	0x20000994
 800167c:	20000c6c 	.word	0x20000c6c
 8001680:	20000998 	.word	0x20000998
 8001684:	20000c70 	.word	0x20000c70
 8001688:	2000099c 	.word	0x2000099c
 800168c:	40668000 	.word	0x40668000
 8001690:	20000c64 	.word	0x20000c64
 8001694:	43b40000 	.word	0x43b40000

08001698 <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2309      	movs	r3, #9
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	2301      	movs	r3, #1
 80016ae:	2201      	movs	r2, #1
 80016b0:	21c0      	movs	r1, #192	@ 0xc0
 80016b2:	482b      	ldr	r0, [pc, #172]	@ (8001760 <read_MPL3115A2+0xc8>)
 80016b4:	f003 f99c 	bl	80049f0 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 80016b8:	793b      	ldrb	r3, [r7, #4]
 80016ba:	041a      	lsls	r2, r3, #16
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4313      	orrs	r3, r2
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	091b      	lsrs	r3, r3, #4
 80016cc:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7fe ff38 	bl	8000544 <__aeabi_ui2d>
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b22      	ldr	r3, [pc, #136]	@ (8001764 <read_MPL3115A2+0xcc>)
 80016da:	f7ff f8d7 	bl	800088c <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <read_MPL3115A2+0xd0>)
 80016ec:	f7ff f8ce 	bl	800088c <__aeabi_ddiv>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f7ff fa96 	bl	8000c28 <__aeabi_d2f>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <read_MPL3115A2+0xd4>)
 8001700:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7a3b      	ldrb	r3, [r7, #8]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8001710:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001714:	111b      	asrs	r3, r3, #4
 8001716:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8001718:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff21 	bl	8000564 <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <read_MPL3115A2+0xd8>)
 8001728:	f7ff f8b0 	bl	800088c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff fa78 	bl	8000c28 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <read_MPL3115A2+0xdc>)
 800173c:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <read_MPL3115A2+0xd4>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	f7ff fe32 	bl	80013b0 <calculate_altitude>
 800174c:	eef0 7a40 	vmov.f32	s15, s0
 8001750:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <read_MPL3115A2+0xe0>)
 8001752:	edc3 7a00 	vstr	s15, [r3]
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000039c 	.word	0x2000039c
 8001764:	40100000 	.word	0x40100000
 8001768:	408f4000 	.word	0x408f4000
 800176c:	20000974 	.word	0x20000974
 8001770:	40300000 	.word	0x40300000
 8001774:	20000970 	.word	0x20000970
 8001778:	2000096c 	.word	0x2000096c
 800177c:	00000000 	.word	0x00000000

08001780 <read_MPU6050>:

void read_MPU6050(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8001786:	233b      	movs	r3, #59	@ 0x3b
 8001788:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 800178a:	2343      	movs	r3, #67	@ 0x43
 800178c:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDRESS, 3, 5);
 800179a:	2305      	movs	r3, #5
 800179c:	2203      	movs	r2, #3
 800179e:	21d0      	movs	r1, #208	@ 0xd0
 80017a0:	4871      	ldr	r0, [pc, #452]	@ (8001968 <read_MPU6050+0x1e8>)
 80017a2:	f003 fb57 	bl	8004e54 <HAL_I2C_IsDeviceReady>
 80017a6:	4603      	mov	r3, r0
 80017a8:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 80017aa:	7c7b      	ldrb	r3, [r7, #17]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f040 80d2 	bne.w	8001956 <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &imu_addr, 1, 100);
 80017b2:	f107 0209 	add.w	r2, r7, #9
 80017b6:	2364      	movs	r3, #100	@ 0x64
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	21d0      	movs	r1, #208	@ 0xd0
 80017be:	486a      	ldr	r0, [pc, #424]	@ (8001968 <read_MPU6050+0x1e8>)
 80017c0:	f002 fcec 	bl	800419c <HAL_I2C_Master_Transmit>
 80017c4:	4603      	mov	r3, r0
 80017c6:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 80017c8:	7c7b      	ldrb	r3, [r7, #17]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d15a      	bne.n	8001884 <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 80017ce:	463a      	mov	r2, r7
 80017d0:	2364      	movs	r3, #100	@ 0x64
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2306      	movs	r3, #6
 80017d6:	21d0      	movs	r1, #208	@ 0xd0
 80017d8:	4863      	ldr	r0, [pc, #396]	@ (8001968 <read_MPU6050+0x1e8>)
 80017da:	f002 fddd 	bl	8004398 <HAL_I2C_Master_Receive>
 80017de:	4603      	mov	r3, r0
 80017e0:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80017e2:	7c7b      	ldrb	r3, [r7, #17]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d14d      	bne.n	8001884 <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 80017e8:	783b      	ldrb	r3, [r7, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 80017f6:	78bb      	ldrb	r3, [r7, #2]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b21a      	sxth	r2, r3
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	4313      	orrs	r3, r2
 8001802:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 8001804:	793b      	ldrb	r3, [r7, #4]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b21a      	sxth	r2, r3
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 8001812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fea4 	bl	8000564 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b52      	ldr	r3, [pc, #328]	@ (800196c <read_MPU6050+0x1ec>)
 8001822:	f7ff f833 	bl	800088c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9fb 	bl	8000c28 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	4a4e      	ldr	r2, [pc, #312]	@ (8001970 <read_MPU6050+0x1f0>)
 8001836:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 8001838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe91 	bl	8000564 <__aeabi_i2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b49      	ldr	r3, [pc, #292]	@ (800196c <read_MPU6050+0x1ec>)
 8001848:	f7ff f820 	bl	800088c <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f9e8 	bl	8000c28 <__aeabi_d2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4a46      	ldr	r2, [pc, #280]	@ (8001974 <read_MPU6050+0x1f4>)
 800185c:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 800185e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe7e 	bl	8000564 <__aeabi_i2d>
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <read_MPU6050+0x1ec>)
 800186e:	f7ff f80d 	bl	800088c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f9d5 	bl	8000c28 <__aeabi_d2f>
 800187e:	4603      	mov	r3, r0
 8001880:	4a3d      	ldr	r2, [pc, #244]	@ (8001978 <read_MPU6050+0x1f8>)
 8001882:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 8001884:	f107 0208 	add.w	r2, r7, #8
 8001888:	2364      	movs	r3, #100	@ 0x64
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	21d0      	movs	r1, #208	@ 0xd0
 8001890:	4835      	ldr	r0, [pc, #212]	@ (8001968 <read_MPU6050+0x1e8>)
 8001892:	f002 fc83 	bl	800419c <HAL_I2C_Master_Transmit>
 8001896:	4603      	mov	r3, r0
 8001898:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 800189a:	7c7b      	ldrb	r3, [r7, #17]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d15a      	bne.n	8001956 <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, MPU6050_ADDRESS, mpu_buf, 6, 100);
 80018a0:	463a      	mov	r2, r7
 80018a2:	2364      	movs	r3, #100	@ 0x64
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2306      	movs	r3, #6
 80018a8:	21d0      	movs	r1, #208	@ 0xd0
 80018aa:	482f      	ldr	r0, [pc, #188]	@ (8001968 <read_MPU6050+0x1e8>)
 80018ac:	f002 fd74 	bl	8004398 <HAL_I2C_Master_Receive>
 80018b0:	4603      	mov	r3, r0
 80018b2:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 80018b4:	7c7b      	ldrb	r3, [r7, #17]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d14d      	bne.n	8001956 <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 80018ba:	783b      	ldrb	r3, [r7, #0]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b21a      	sxth	r2, r3
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	b21b      	sxth	r3, r3
 80018c4:	4313      	orrs	r3, r2
 80018c6:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	b21b      	sxth	r3, r3
 80018d2:	4313      	orrs	r3, r2
 80018d4:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 80018d6:	793b      	ldrb	r3, [r7, #4]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	797b      	ldrb	r3, [r7, #5]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 80018e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe3b 	bl	8000564 <__aeabi_i2d>
 80018ee:	a31c      	add	r3, pc, #112	@ (adr r3, 8001960 <read_MPU6050+0x1e0>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe ffca 	bl	800088c <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f992 	bl	8000c28 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <read_MPU6050+0x1fc>)
 8001908:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 800190a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe28 	bl	8000564 <__aeabi_i2d>
 8001914:	a312      	add	r3, pc, #72	@ (adr r3, 8001960 <read_MPU6050+0x1e0>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe ffb7 	bl	800088c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f97f 	bl	8000c28 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <read_MPU6050+0x200>)
 800192e:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe15 	bl	8000564 <__aeabi_i2d>
 800193a:	a309      	add	r3, pc, #36	@ (adr r3, 8001960 <read_MPU6050+0x1e0>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe ffa4 	bl	800088c <__aeabi_ddiv>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f96c 	bl	8000c28 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	4a0c      	ldr	r2, [pc, #48]	@ (8001984 <read_MPU6050+0x204>)
 8001954:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	00000000 	.word	0x00000000
 8001964:	40606000 	.word	0x40606000
 8001968:	2000039c 	.word	0x2000039c
 800196c:	40d00000 	.word	0x40d00000
 8001970:	20000988 	.word	0x20000988
 8001974:	2000098c 	.word	0x2000098c
 8001978:	20000990 	.word	0x20000990
 800197c:	2000097c 	.word	0x2000097c
 8001980:	20000980 	.word	0x20000980
 8001984:	20000984 	.word	0x20000984

08001988 <read_PA1010D>:

void read_PA1010D(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
	uint8_t pa1010d_i;
	uint8_t pa1010d_bytebuf;

	/* PA1010D (GPS) */
	if (HAL_I2C_IsDeviceReady(&hi2c2, PA1010D_ADDRESS, 3, HAL_MAX_DELAY) == HAL_OK){
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	2203      	movs	r2, #3
 8001994:	2120      	movs	r1, #32
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <read_PA1010D+0x60>)
 8001998:	f003 fa5c 	bl	8004e54 <HAL_I2C_IsDeviceReady>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11d      	bne.n	80019de <read_PA1010D+0x56>
		for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e012      	b.n	80019ce <read_PA1010D+0x46>
			HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
 80019a8:	1dba      	adds	r2, r7, #6
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	2120      	movs	r1, #32
 80019b4:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <read_PA1010D+0x60>)
 80019b6:	f002 fcef 	bl	8004398 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	2b24      	cmp	r3, #36	@ 0x24
 80019be:	d00a      	beq.n	80019d6 <read_PA1010D+0x4e>
				break;
			}
			pa_buf[pa1010d_i] = pa1010d_bytebuf;
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	79b9      	ldrb	r1, [r7, #6]
 80019c4:	4a09      	ldr	r2, [pc, #36]	@ (80019ec <read_PA1010D+0x64>)
 80019c6:	54d1      	strb	r1, [r2, r3]
		for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	3301      	adds	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2bff      	cmp	r3, #255	@ 0xff
 80019d2:	d1e9      	bne.n	80019a8 <read_PA1010D+0x20>
 80019d4:	e000      	b.n	80019d8 <read_PA1010D+0x50>
				break;
 80019d6:	bf00      	nop
		}
		parse_nmea(pa_buf);
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <read_PA1010D+0x64>)
 80019da:	f7ff fc9f 	bl	800131c <parse_nmea>
	}
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000039c 	.word	0x2000039c
 80019ec:	200009b8 	.word	0x200009b8

080019f0 <init_MMC5603>:

	}

}

void init_MMC5603(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 80019f6:	2364      	movs	r3, #100	@ 0x64
 80019f8:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 80019fe:	2380      	movs	r3, #128	@ 0x80
 8001a00:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 8001a02:	2310      	movs	r3, #16
 8001a04:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	1d7b      	adds	r3, r7, #5
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	221c      	movs	r2, #28
 8001a18:	2160      	movs	r1, #96	@ 0x60
 8001a1a:	482f      	ldr	r0, [pc, #188]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001a1c:	f002 feee 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8001a20:	2014      	movs	r0, #20
 8001a22:	f001 fcf3 	bl	800340c <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 8001a26:	2308      	movs	r3, #8
 8001a28:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	1cfb      	adds	r3, r7, #3
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	221b      	movs	r2, #27
 8001a3c:	2160      	movs	r1, #96	@ 0x60
 8001a3e:	4826      	ldr	r0, [pc, #152]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001a40:	f002 fedc 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f001 fce1 	bl	800340c <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 8001a4a:	2310      	movs	r3, #16
 8001a4c:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	1cbb      	adds	r3, r7, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	221b      	movs	r2, #27
 8001a60:	2160      	movs	r1, #96	@ 0x60
 8001a62:	481d      	ldr	r0, [pc, #116]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001a64:	f002 feca 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8001a68:	2001      	movs	r0, #1
 8001a6a:	f001 fccf 	bl	800340c <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	221a      	movs	r2, #26
 8001a80:	2160      	movs	r1, #96	@ 0x60
 8001a82:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001a84:	f002 feba 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f001 fcbf 	bl	800340c <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	221b      	movs	r2, #27
 8001aa0:	2160      	movs	r1, #96	@ 0x60
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001aa4:	f002 feaa 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f001 fcaf 	bl	800340c <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c2, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	221d      	movs	r2, #29
 8001ac0:	2160      	movs	r1, #96	@ 0x60
 8001ac2:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <init_MMC5603+0xe8>)
 8001ac4:	f002 fe9a 	bl	80047fc <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f001 fc9f 	bl	800340c <HAL_Delay>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000039c 	.word	0x2000039c

08001adc <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	1dfb      	adds	r3, r7, #7
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2301      	movs	r3, #1
 8001af6:	220c      	movs	r2, #12
 8001af8:	21c0      	movs	r1, #192	@ 0xc0
 8001afa:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <init_MPL3115A2+0x50>)
 8001afc:	f002 ff78 	bl	80049f0 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2bc4      	cmp	r3, #196	@ 0xc4
 8001b04:	d10e      	bne.n	8001b24 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 8001b06:	2339      	movs	r3, #57	@ 0x39
 8001b08:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2226      	movs	r2, #38	@ 0x26
 8001b1c:	21c0      	movs	r1, #192	@ 0xc0
 8001b1e:	4803      	ldr	r0, [pc, #12]	@ (8001b2c <init_MPL3115A2+0x50>)
 8001b20:	f002 fe6c 	bl	80047fc <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000039c 	.word	0x2000039c

08001b30 <init_MPU6050>:

void init_MPU6050(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	717b      	strb	r3, [r7, #5]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 8001b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2301      	movs	r3, #1
 8001b52:	226b      	movs	r2, #107	@ 0x6b
 8001b54:	21d0      	movs	r1, #208	@ 0xd0
 8001b56:	4817      	ldr	r0, [pc, #92]	@ (8001bb4 <init_MPU6050+0x84>)
 8001b58:	f002 fe50 	bl	80047fc <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 8001b5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2301      	movs	r3, #1
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	1dbb      	adds	r3, r7, #6
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2219      	movs	r2, #25
 8001b6e:	21d0      	movs	r1, #208	@ 0xd0
 8001b70:	4810      	ldr	r0, [pc, #64]	@ (8001bb4 <init_MPU6050+0x84>)
 8001b72:	f002 fe43 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	1d7b      	adds	r3, r7, #5
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	221b      	movs	r2, #27
 8001b88:	21d0      	movs	r1, #208	@ 0xd0
 8001b8a:	480a      	ldr	r0, [pc, #40]	@ (8001bb4 <init_MPU6050+0x84>)
 8001b8c:	f002 fe36 	bl	80047fc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 8001b90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	2301      	movs	r3, #1
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	1d7b      	adds	r3, r7, #5
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	21d0      	movs	r1, #208	@ 0xd0
 8001ba4:	4803      	ldr	r0, [pc, #12]	@ (8001bb4 <init_MPU6050+0x84>)
 8001ba6:	f002 fe29 	bl	80047fc <HAL_I2C_Mem_Write>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000039c 	.word	0x2000039c

08001bb8 <init_PA1010D>:

void init_PA1010D(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
	uint8_t pa1010d_bytebuf;

	HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 8001bbe:	4827      	ldr	r0, [pc, #156]	@ (8001c5c <init_PA1010D+0xa4>)
 8001bc0:	f7fe fb76 	bl	80002b0 <strlen>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <init_PA1010D+0xa4>)
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	4823      	ldr	r0, [pc, #140]	@ (8001c60 <init_PA1010D+0xa8>)
 8001bd4:	f002 fae2 	bl	800419c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
 8001bd8:	4822      	ldr	r0, [pc, #136]	@ (8001c64 <init_PA1010D+0xac>)
 8001bda:	f7fe fb69 	bl	80002b0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c64 <init_PA1010D+0xac>)
 8001bea:	2120      	movs	r1, #32
 8001bec:	481c      	ldr	r0, [pc, #112]	@ (8001c60 <init_PA1010D+0xa8>)
 8001bee:	f002 fad5 	bl	800419c <HAL_I2C_Master_Transmit>
//	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c2, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);

//	HAL_Delay(10000);
	//Wait for stabilization
	for(int j=0; j<10; j++){
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e029      	b.n	8001c4c <init_PA1010D+0x94>
		for(int i=0; i<255; i++){
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	e014      	b.n	8001c28 <init_PA1010D+0x70>
			HAL_I2C_Master_Receive(&hi2c2, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
 8001bfe:	1dfa      	adds	r2, r7, #7
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2301      	movs	r3, #1
 8001c08:	2120      	movs	r1, #32
 8001c0a:	4815      	ldr	r0, [pc, #84]	@ (8001c60 <init_PA1010D+0xa8>)
 8001c0c:	f002 fbc4 	bl	8004398 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b24      	cmp	r3, #36	@ 0x24
 8001c14:	d00c      	beq.n	8001c30 <init_PA1010D+0x78>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 8001c16:	79f9      	ldrb	r1, [r7, #7]
 8001c18:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <init_PA1010D+0xb0>)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c2c:	dde7      	ble.n	8001bfe <init_PA1010D+0x46>
 8001c2e:	e000      	b.n	8001c32 <init_PA1010D+0x7a>
				break;
 8001c30:	bf00      	nop
		}
		if (j>5){
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	dd02      	ble.n	8001c3e <init_PA1010D+0x86>
			parse_nmea(pa_buf);
 8001c38:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <init_PA1010D+0xb0>)
 8001c3a:	f7ff fb6f 	bl	800131c <parse_nmea>
		}
		HAL_Delay(500);
 8001c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c42:	f001 fbe3 	bl	800340c <HAL_Delay>
	for(int j=0; j<10; j++){
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b09      	cmp	r3, #9
 8001c50:	ddd2      	ble.n	8001bf8 <init_PA1010D+0x40>
	}
}
 8001c52:	bf00      	nop
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000068 	.word	0x20000068
 8001c60:	2000039c 	.word	0x2000039c
 8001c64:	20000054 	.word	0x20000054
 8001c68:	200009b8 	.word	0x200009b8

08001c6c <read_sensors>:
	uint8_t ina_config[2] = {0b00000001, 0b00011101};
	HAL_I2C_Mem_Write(&hi2c2, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);
}

void read_sensors(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	read_MPU6050(); // Accel/ tilt
 8001c70:	f7ff fd86 	bl	8001780 <read_MPU6050>
	read_MPL3115A2(); // Temperature/ Pressure
 8001c74:	f7ff fd10 	bl	8001698 <read_MPL3115A2>
	read_MMC5603(); // Magnetic Field
 8001c78:	f7ff fbee 	bl	8001458 <read_MMC5603>
	read_PA1010D(); // GPS
 8001c7c:	f7ff fe84 	bl	8001988 <read_PA1010D>
//	read_INA219(); // Voltage
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <init_sensors>:

void init_sensors(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	init_MPU6050(); // Must be first
 8001c88:	f7ff ff52 	bl	8001b30 <init_MPU6050>
	init_MPL3115A2();
 8001c8c:	f7ff ff26 	bl	8001adc <init_MPL3115A2>
	init_MMC5603();
 8001c90:	f7ff feae 	bl	80019f0 <init_MMC5603>
	init_PA1010D();
 8001c94:	f7ff ff90 	bl	8001bb8 <init_PA1010D>
//	init_INA219();
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <init_commands>:

void init_commands(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <init_commands+0x80>)
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d20 <init_commands+0x84>)
 8001ca4:	210e      	movs	r1, #14
 8001ca6:	481f      	ldr	r0, [pc, #124]	@ (8001d24 <init_commands+0x88>)
 8001ca8:	f007 fdec 	bl	8009884 <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <init_commands+0x80>)
 8001cae:	4a1e      	ldr	r2, [pc, #120]	@ (8001d28 <init_commands+0x8c>)
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	481e      	ldr	r0, [pc, #120]	@ (8001d2c <init_commands+0x90>)
 8001cb4:	f007 fde6 	bl	8009884 <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <init_commands+0x80>)
 8001cba:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <init_commands+0x94>)
 8001cbc:	210d      	movs	r1, #13
 8001cbe:	481d      	ldr	r0, [pc, #116]	@ (8001d34 <init_commands+0x98>)
 8001cc0:	f007 fde0 	bl	8009884 <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL", TEAM_ID);
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <init_commands+0x80>)
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <init_commands+0x9c>)
 8001cc8:	210e      	movs	r1, #14
 8001cca:	481c      	ldr	r0, [pc, #112]	@ (8001d3c <init_commands+0xa0>)
 8001ccc:	f007 fdda 	bl	8009884 <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <init_commands+0x80>)
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d40 <init_commands+0xa4>)
 8001cd4:	2110      	movs	r1, #16
 8001cd6:	481b      	ldr	r0, [pc, #108]	@ (8001d44 <init_commands+0xa8>)
 8001cd8:	f007 fdd4 	bl	8009884 <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <init_commands+0x80>)
 8001cde:	4a1a      	ldr	r2, [pc, #104]	@ (8001d48 <init_commands+0xac>)
 8001ce0:	2111      	movs	r1, #17
 8001ce2:	481a      	ldr	r0, [pc, #104]	@ (8001d4c <init_commands+0xb0>)
 8001ce4:	f007 fdce 	bl	8009884 <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <init_commands+0x80>)
 8001cea:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <init_commands+0xb4>)
 8001cec:	210f      	movs	r1, #15
 8001cee:	4819      	ldr	r0, [pc, #100]	@ (8001d54 <init_commands+0xb8>)
 8001cf0:	f007 fdc8 	bl	8009884 <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <init_commands+0x80>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <init_commands+0xbc>)
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <init_commands+0xc0>)
 8001cfc:	f007 fdc2 	bl	8009884 <sniprintf>
	snprintf(cal_comp_on_command, sizeof(cal_comp_on_command), "CMD,%s,CC,ON", TEAM_ID);
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <init_commands+0x80>)
 8001d02:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <init_commands+0xc4>)
 8001d04:	210f      	movs	r1, #15
 8001d06:	4817      	ldr	r0, [pc, #92]	@ (8001d64 <init_commands+0xc8>)
 8001d08:	f007 fdbc 	bl	8009884 <sniprintf>
	snprintf(cal_comp_off_command, sizeof(cal_comp_off_command), "CMD,%s,CC,OFF", TEAM_ID);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <init_commands+0x80>)
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <init_commands+0xcc>)
 8001d10:	2110      	movs	r1, #16
 8001d12:	4816      	ldr	r0, [pc, #88]	@ (8001d6c <init_commands+0xd0>)
 8001d14:	f007 fdb6 	bl	8009884 <sniprintf>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	0800d0d0 	.word	0x0800d0d0
 8001d20:	0800d0d8 	.word	0x0800d0d8
 8001d24:	20000bbc 	.word	0x20000bbc
 8001d28:	0800d0e4 	.word	0x0800d0e4
 8001d2c:	20000bcc 	.word	0x20000bcc
 8001d30:	0800d0f4 	.word	0x0800d0f4
 8001d34:	20000bdc 	.word	0x20000bdc
 8001d38:	0800d100 	.word	0x0800d100
 8001d3c:	20000bec 	.word	0x20000bec
 8001d40:	0800d10c 	.word	0x0800d10c
 8001d44:	20000bfc 	.word	0x20000bfc
 8001d48:	0800d11c 	.word	0x0800d11c
 8001d4c:	20000c0c 	.word	0x20000c0c
 8001d50:	0800d12c 	.word	0x0800d12c
 8001d54:	20000c20 	.word	0x20000c20
 8001d58:	0800d13c 	.word	0x0800d13c
 8001d5c:	20000c30 	.word	0x20000c30
 8001d60:	0800d14c 	.word	0x0800d14c
 8001d64:	20000c40 	.word	0x20000c40
 8001d68:	0800d15c 	.word	0x0800d15c
 8001d6c:	20000c50 	.word	0x20000c50

08001d70 <calculate_checksum>:

uint8_t calculate_checksum(const char *data) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8001d7c:	e006      	b.n	8001d8c <calculate_checksum+0x1c>
		checksum += *data++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	4413      	add	r3, r2
 8001d8a:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f4      	bne.n	8001d7e <calculate_checksum+0xe>
	}
	return checksum % 256;
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <send_packet>:

void send_packet(){
 8001da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001da8:	f2ad 5d2c 	subw	sp, sp, #1324	@ 0x52c
 8001dac:	af2e      	add	r7, sp, #184	@ 0xb8

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	packet_count += 1;
 8001dae:	4b92      	ldr	r3, [pc, #584]	@ (8001ff8 <send_packet+0x254>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001ff8 <send_packet+0x254>)
 8001dbe:	801a      	strh	r2, [r3, #0]

	snprintf(data, sizeof(data),
 8001dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001ffc <send_packet+0x258>)
 8001dc2:	f993 3000 	ldrsb.w	r3, [r3]
 8001dc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001dca:	4b8d      	ldr	r3, [pc, #564]	@ (8002000 <send_packet+0x25c>)
 8001dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001dd4:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <send_packet+0x260>)
 8001dd6:	f993 3000 	ldrsb.w	r3, [r3]
 8001dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ddc:	4b86      	ldr	r3, [pc, #536]	@ (8001ff8 <send_packet+0x254>)
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001de4:	4b88      	ldr	r3, [pc, #544]	@ (8002008 <send_packet+0x264>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dea:	4b88      	ldr	r3, [pc, #544]	@ (800200c <send_packet+0x268>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbca 	bl	8000588 <__aeabi_f2d>
 8001df4:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8001df8:	4b85      	ldr	r3, [pc, #532]	@ (8002010 <send_packet+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fbc3 	bl	8000588 <__aeabi_f2d>
 8001e02:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8001e06:	4b83      	ldr	r3, [pc, #524]	@ (8002014 <send_packet+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8001e14:	4b80      	ldr	r3, [pc, #512]	@ (8002018 <send_packet+0x274>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbb5 	bl	8000588 <__aeabi_f2d>
 8001e1e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001e22:	4b7e      	ldr	r3, [pc, #504]	@ (800201c <send_packet+0x278>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fbae 	bl	8000588 <__aeabi_f2d>
 8001e2c:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001e30:	4b7b      	ldr	r3, [pc, #492]	@ (8002020 <send_packet+0x27c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fba7 	bl	8000588 <__aeabi_f2d>
 8001e3a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001e3e:	4b79      	ldr	r3, [pc, #484]	@ (8002024 <send_packet+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fba0 	bl	8000588 <__aeabi_f2d>
 8001e48:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001e4c:	4b76      	ldr	r3, [pc, #472]	@ (8002028 <send_packet+0x284>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb99 	bl	8000588 <__aeabi_f2d>
 8001e56:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001e5a:	4b74      	ldr	r3, [pc, #464]	@ (800202c <send_packet+0x288>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb92 	bl	8000588 <__aeabi_f2d>
 8001e64:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001e68:	4b71      	ldr	r3, [pc, #452]	@ (8002030 <send_packet+0x28c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fb8b 	bl	8000588 <__aeabi_f2d>
 8001e72:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001e76:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <send_packet+0x290>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fb84 	bl	8000588 <__aeabi_f2d>
 8001e80:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001e84:	4b6c      	ldr	r3, [pc, #432]	@ (8002038 <send_packet+0x294>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb7d 	bl	8000588 <__aeabi_f2d>
 8001e8e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001e92:	4b6a      	ldr	r3, [pc, #424]	@ (800203c <send_packet+0x298>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb76 	bl	8000588 <__aeabi_f2d>
 8001e9c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ea0:	4b67      	ldr	r3, [pc, #412]	@ (8002040 <send_packet+0x29c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fb6f 	bl	8000588 <__aeabi_f2d>
 8001eaa:	4682      	mov	sl, r0
 8001eac:	468b      	mov	fp, r1
 8001eae:	4b65      	ldr	r3, [pc, #404]	@ (8002044 <send_packet+0x2a0>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001eb4:	4b64      	ldr	r3, [pc, #400]	@ (8002048 <send_packet+0x2a4>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b64      	ldr	r3, [pc, #400]	@ (800204c <send_packet+0x2a8>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	4b63      	ldr	r3, [pc, #396]	@ (8002050 <send_packet+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb5f 	bl	8000588 <__aeabi_f2d>
 8001eca:	4680      	mov	r8, r0
 8001ecc:	4689      	mov	r9, r1
 8001ece:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <send_packet+0x2b0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb58 	bl	8000588 <__aeabi_f2d>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	460d      	mov	r5, r1
 8001edc:	4b5e      	ldr	r3, [pc, #376]	@ (8002058 <send_packet+0x2b4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fb51 	bl	8000588 <__aeabi_f2d>
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <send_packet+0x2b8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	f107 068c 	add.w	r6, r7, #140	@ 0x8c
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <send_packet+0x2bc>)
 8001ef2:	932d      	str	r3, [sp, #180]	@ 0xb4
 8001ef4:	922c      	str	r2, [sp, #176]	@ 0xb0
 8001ef6:	e9cd 012a 	strd	r0, r1, [sp, #168]	@ 0xa8
 8001efa:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 8001efe:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	9224      	str	r2, [sp, #144]	@ 0x90
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	9223      	str	r2, [sp, #140]	@ 0x8c
 8001f0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001f0c:	9222      	str	r2, [sp, #136]	@ 0x88
 8001f0e:	e9cd ab20 	strd	sl, fp, [sp, #128]	@ 0x80
 8001f12:	ed97 7b02 	vldr	d7, [r7, #8]
 8001f16:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8001f1a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001f1e:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 8001f22:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f26:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8001f2a:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f2e:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 8001f32:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001f36:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8001f3a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001f3e:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8001f42:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001f46:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8001f4a:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8001f4e:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 8001f52:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001f56:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8001f5a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001f5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001f62:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8001f66:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001f6a:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8001f6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f72:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8001f76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <send_packet+0x2c0>)
 8001f7c:	9305      	str	r3, [sp, #20]
 8001f7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001f80:	9204      	str	r2, [sp, #16]
 8001f82:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001f84:	9203      	str	r2, [sp, #12]
 8001f86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f88:	9202      	str	r2, [sp, #8]
 8001f8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f8e:	9201      	str	r2, [sp, #4]
 8001f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <send_packet+0x2c4>)
 8001f98:	4a34      	ldr	r2, [pc, #208]	@ (800206c <send_packet+0x2c8>)
 8001f9a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001f9e:	4630      	mov	r0, r6
 8001fa0:	f007 fc70 	bl	8009884 <sniprintf>
		 mode, state, altitude, temperature, pressure, voltage,
		 gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z, mag_x, mag_y, mag_z,
		 auto_gyro_rotation_rate, gps_time_hr, gps_time_min, gps_time_sec,
		 gps_altitude, gps_latitude, gps_longitude, gps_sats, cmd_echo);

	uint8_t checksum = calculate_checksum(data);
 8001fa4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fee1 	bl	8001d70 <calculate_checksum>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 8001fb4:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001fb8:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001fbc:	f507 701b 	add.w	r0, r7, #620	@ 0x26c
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <send_packet+0x2cc>)
 8001fc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fca:	f007 fc5b 	bl	8009884 <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart2, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 8001fce:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe f96c 	bl	80002b0 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f507 711b 	add.w	r1, r7, #620	@ 0x26c
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	4823      	ldr	r0, [pc, #140]	@ (8002074 <send_packet+0x2d0>)
 8001fe6:	f004 fd63 	bl	8006ab0 <HAL_UART_Transmit>
}
 8001fea:	bf00      	nop
 8001fec:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000968 	.word	0x20000968
 8001ffc:	20000964 	.word	0x20000964
 8002000:	20000965 	.word	0x20000965
 8002004:	20000966 	.word	0x20000966
 8002008:	20000000 	.word	0x20000000
 800200c:	2000096c 	.word	0x2000096c
 8002010:	20000970 	.word	0x20000970
 8002014:	20000974 	.word	0x20000974
 8002018:	20000978 	.word	0x20000978
 800201c:	2000097c 	.word	0x2000097c
 8002020:	20000980 	.word	0x20000980
 8002024:	20000984 	.word	0x20000984
 8002028:	20000988 	.word	0x20000988
 800202c:	2000098c 	.word	0x2000098c
 8002030:	20000990 	.word	0x20000990
 8002034:	20000994 	.word	0x20000994
 8002038:	20000998 	.word	0x20000998
 800203c:	2000099c 	.word	0x2000099c
 8002040:	200009a0 	.word	0x200009a0
 8002044:	200009a4 	.word	0x200009a4
 8002048:	200009a5 	.word	0x200009a5
 800204c:	200009a6 	.word	0x200009a6
 8002050:	200009a8 	.word	0x200009a8
 8002054:	200009ac 	.word	0x200009ac
 8002058:	200009b0 	.word	0x200009b0
 800205c:	200009b4 	.word	0x200009b4
 8002060:	20000014 	.word	0x20000014
 8002064:	20000004 	.word	0x20000004
 8002068:	0800d0d0 	.word	0x0800d0d0
 800206c:	0800d16c 	.word	0x0800d16c
 8002070:	0800d1f4 	.word	0x0800d1f4
 8002074:	200003f0 	.word	0x200003f0

08002078 <handle_state>:

void handle_state(){
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	// States: ‘LAUNCH_PAD’,‘ASCENT’, ‘APOGEE’, ‘DESCENT’, ‘PROBE_RELEASE’, ‘LANDED’
	uint8_t current_movement;

	// Determine ascending, descending, or stationary
	if (altitude < prev_alt + 0.5 && altitude > prev_alt - 0.5){
 800207e:	4b44      	ldr	r3, [pc, #272]	@ (8002190 <handle_state+0x118>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa80 	bl	8000588 <__aeabi_f2d>
 8002088:	4604      	mov	r4, r0
 800208a:	460d      	mov	r5, r1
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <handle_state+0x11c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa79 	bl	8000588 <__aeabi_f2d>
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <handle_state+0x120>)
 800209c:	f7fe f916 	bl	80002cc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe fd38 	bl	8000b1c <__aeabi_dcmplt>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01c      	beq.n	80020ec <handle_state+0x74>
 80020b2:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <handle_state+0x118>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa66 	bl	8000588 <__aeabi_f2d>
 80020bc:	4604      	mov	r4, r0
 80020be:	460d      	mov	r5, r1
 80020c0:	4b34      	ldr	r3, [pc, #208]	@ (8002194 <handle_state+0x11c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa5f 	bl	8000588 <__aeabi_f2d>
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b32      	ldr	r3, [pc, #200]	@ (8002198 <handle_state+0x120>)
 80020d0:	f7fe f8fa 	bl	80002c8 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe fd3c 	bl	8000b58 <__aeabi_dcmpgt>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <handle_state+0x74>
		current_movement = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	e00f      	b.n	800210c <handle_state+0x94>
	}
	else if (altitude < prev_alt) {
 80020ec:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <handle_state+0x118>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <handle_state+0x11c>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d502      	bpl.n	8002108 <handle_state+0x90>
		current_movement = -1;
 8002102:	23ff      	movs	r3, #255	@ 0xff
 8002104:	71fb      	strb	r3, [r7, #7]
 8002106:	e001      	b.n	800210c <handle_state+0x94>
	}
	else {
		current_movement = 1;
 8002108:	2301      	movs	r3, #1
 800210a:	71fb      	strb	r3, [r7, #7]
		strncpy(state, "PROBE_RELEASE", strlen("PROBE_RELEASE"));
		// Deploy Auto Gyro
	}

	// Ascent if ascending and probe not released
	else if (current_movement == 1){
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d10a      	bne.n	8002128 <handle_state+0xb0>
		memset(state, 0, sizeof(state));
 8002112:	220e      	movs	r2, #14
 8002114:	2100      	movs	r1, #0
 8002116:	4821      	ldr	r0, [pc, #132]	@ (800219c <handle_state+0x124>)
 8002118:	f007 fc2b 	bl	8009972 <memset>
		strncpy(state, "ASCENDING", strlen("ASCENDING"));
 800211c:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <handle_state+0x124>)
 800211e:	4a20      	ldr	r2, [pc, #128]	@ (80021a0 <handle_state+0x128>)
 8002120:	ca07      	ldmia	r2, {r0, r1, r2}
 8002122:	c303      	stmia	r3!, {r0, r1}
 8002124:	701a      	strb	r2, [r3, #0]
 8002126:	e02b      	b.n	8002180 <handle_state+0x108>
	}

	// Apogee if current state is ascent and now stationary or descending
	else if ((strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0 || strncmp(state, "PROBE_RELEASE", strlen("PROBE_RELEASE")) == 0) && current_movement != 1){
 8002128:	2209      	movs	r2, #9
 800212a:	491d      	ldr	r1, [pc, #116]	@ (80021a0 <handle_state+0x128>)
 800212c:	481b      	ldr	r0, [pc, #108]	@ (800219c <handle_state+0x124>)
 800212e:	f007 fc37 	bl	80099a0 <strncmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <handle_state+0xd0>
 8002138:	220d      	movs	r2, #13
 800213a:	491a      	ldr	r1, [pc, #104]	@ (80021a4 <handle_state+0x12c>)
 800213c:	4817      	ldr	r0, [pc, #92]	@ (800219c <handle_state+0x124>)
 800213e:	f007 fc2f 	bl	80099a0 <strncmp>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <handle_state+0xf0>
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d00c      	beq.n	8002168 <handle_state+0xf0>
		memset(state, 0, sizeof(state));
 800214e:	220e      	movs	r2, #14
 8002150:	2100      	movs	r1, #0
 8002152:	4812      	ldr	r0, [pc, #72]	@ (800219c <handle_state+0x124>)
 8002154:	f007 fc0d 	bl	8009972 <memset>
		strncpy(state, "APOGEE", strlen("APOGEE"));
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <handle_state+0x124>)
 800215a:	4a13      	ldr	r2, [pc, #76]	@ (80021a8 <handle_state+0x130>)
 800215c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002160:	6018      	str	r0, [r3, #0]
 8002162:	3304      	adds	r3, #4
 8002164:	8019      	strh	r1, [r3, #0]
 8002166:	e00b      	b.n	8002180 <handle_state+0x108>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
	}

	// Landed if not moving
	else{
		memset(state, 0, sizeof(state));
 8002168:	220e      	movs	r2, #14
 800216a:	2100      	movs	r1, #0
 800216c:	480b      	ldr	r0, [pc, #44]	@ (800219c <handle_state+0x124>)
 800216e:	f007 fc00 	bl	8009972 <memset>
		strncpy(state, "LANDED", strlen("LANDED"));
 8002172:	4b0a      	ldr	r3, [pc, #40]	@ (800219c <handle_state+0x124>)
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <handle_state+0x134>)
 8002176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217a:	6018      	str	r0, [r3, #0]
 800217c:	3304      	adds	r3, #4
 800217e:	8019      	strh	r1, [r3, #0]
		// Activate audio beacon and stop telemetry transmission
	}

	prev_alt = altitude;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <handle_state+0x118>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a03      	ldr	r2, [pc, #12]	@ (8002194 <handle_state+0x11c>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	2000096c 	.word	0x2000096c
 8002194:	20000c60 	.word	0x20000c60
 8002198:	3fe00000 	.word	0x3fe00000
 800219c:	20000004 	.word	0x20000004
 80021a0:	0800d1fc 	.word	0x0800d1fc
 80021a4:	0800d208 	.word	0x0800d208
 80021a8:	0800d218 	.word	0x0800d218
 80021ac:	0800d220 	.word	0x0800d220

080021b0 <read_transmit_telemetry>:

void read_transmit_telemetry (){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	if (mode == 'F') {
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <read_transmit_telemetry+0x18>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b46      	cmp	r3, #70	@ 0x46
 80021ba:	d101      	bne.n	80021c0 <read_transmit_telemetry+0x10>
		read_sensors();
 80021bc:	f7ff fd56 	bl	8001c6c <read_sensors>
	}

	send_packet();
 80021c0:	f7ff fdf0 	bl	8001da4 <send_packet>
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000000 	.word	0x20000000

080021cc <set_cmd_echo>:

void set_cmd_echo(const char *cmd)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	memset(cmd_echo, '\0', sizeof(cmd_echo));
 80021d4:	2240      	movs	r2, #64	@ 0x40
 80021d6:	2100      	movs	r1, #0
 80021d8:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <set_cmd_echo+0x2c>)
 80021da:	f007 fbca 	bl	8009972 <memset>
	strncpy(cmd_echo, cmd, strlen(cmd));
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe f866 	bl	80002b0 <strlen>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4803      	ldr	r0, [pc, #12]	@ (80021f8 <set_cmd_echo+0x2c>)
 80021ec:	f007 fbea 	bl	80099c4 <strncpy>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000014 	.word	0x20000014

080021fc <handle_command>:

void handle_command(const char *cmd) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	@ 0x28
 8002200:	af02      	add	r7, sp, #8
 8002202:	6078      	str	r0, [r7, #4]

	// SIM command
	if (strncmp(cmd, sim_command, strlen(sim_command)) == 0) {
 8002204:	48b3      	ldr	r0, [pc, #716]	@ (80024d4 <handle_command+0x2d8>)
 8002206:	f7fe f853 	bl	80002b0 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	461a      	mov	r2, r3
 800220e:	49b1      	ldr	r1, [pc, #708]	@ (80024d4 <handle_command+0x2d8>)
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f007 fbc5 	bl	80099a0 <strncmp>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d12a      	bne.n	8002272 <handle_command+0x76>

		// disable
		if (cmd[13] == 'D'){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	330d      	adds	r3, #13
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b44      	cmp	r3, #68	@ 0x44
 8002224:	d108      	bne.n	8002238 <handle_command+0x3c>
			set_cmd_echo("SIMDISABLE");
 8002226:	48ac      	ldr	r0, [pc, #688]	@ (80024d8 <handle_command+0x2dc>)
 8002228:	f7ff ffd0 	bl	80021cc <set_cmd_echo>
			mode = 'F';
 800222c:	4bab      	ldr	r3, [pc, #684]	@ (80024dc <handle_command+0x2e0>)
 800222e:	2246      	movs	r2, #70	@ 0x46
 8002230:	701a      	strb	r2, [r3, #0]
			sim_enabled = false;
 8002232:	4bab      	ldr	r3, [pc, #684]	@ (80024e0 <handle_command+0x2e4>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
		}

		// enable
		if (cmd[13] == 'E'){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	330d      	adds	r3, #13
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b45      	cmp	r3, #69	@ 0x45
 8002240:	d105      	bne.n	800224e <handle_command+0x52>
			set_cmd_echo("SIMENABLE");
 8002242:	48a8      	ldr	r0, [pc, #672]	@ (80024e4 <handle_command+0x2e8>)
 8002244:	f7ff ffc2 	bl	80021cc <set_cmd_echo>
			sim_enabled = true;
 8002248:	4ba5      	ldr	r3, [pc, #660]	@ (80024e0 <handle_command+0x2e4>)
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
		}

		// activate
		if (cmd[13] == 'A' && sim_enabled == true){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	330d      	adds	r3, #13
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b41      	cmp	r3, #65	@ 0x41
 8002256:	f040 8200 	bne.w	800265a <handle_command+0x45e>
 800225a:	4ba1      	ldr	r3, [pc, #644]	@ (80024e0 <handle_command+0x2e4>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b01      	cmp	r3, #1
 8002260:	f040 81fb 	bne.w	800265a <handle_command+0x45e>
			mode = 'S';
 8002264:	4b9d      	ldr	r3, [pc, #628]	@ (80024dc <handle_command+0x2e0>)
 8002266:	2253      	movs	r2, #83	@ 0x53
 8002268:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("SIMACTIVATE");
 800226a:	489f      	ldr	r0, [pc, #636]	@ (80024e8 <handle_command+0x2ec>)
 800226c:	f7ff ffae 	bl	80021cc <set_cmd_echo>
			calibrating_compass = 0;
			set_cmd_echo("CCOFF");
			sim_enabled = false;
		}

}
 8002270:	e1f3      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, simp_command, strlen(simp_command)) == 0) {
 8002272:	489e      	ldr	r0, [pc, #632]	@ (80024ec <handle_command+0x2f0>)
 8002274:	f7fe f81c 	bl	80002b0 <strlen>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	499b      	ldr	r1, [pc, #620]	@ (80024ec <handle_command+0x2f0>)
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f007 fb8e 	bl	80099a0 <strncmp>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d157      	bne.n	800233a <handle_command+0x13e>
		if (mode == 'S') {
 800228a:	4b94      	ldr	r3, [pc, #592]	@ (80024dc <handle_command+0x2e0>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b53      	cmp	r3, #83	@ 0x53
 8002290:	d14f      	bne.n	8002332 <handle_command+0x136>
			strncpy(pressure_str, &cmd[14], 6);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f103 010e 	add.w	r1, r3, #14
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	2206      	movs	r2, #6
 800229e:	4618      	mov	r0, r3
 80022a0:	f007 fb90 	bl	80099c4 <strncpy>
			pressure_str[6] = '\0';
 80022a4:	2300      	movs	r3, #0
 80022a6:	77bb      	strb	r3, [r7, #30]
			read_sensors();
 80022a8:	f7ff fce0 	bl	8001c6c <read_sensors>
			pressure = atof(pressure_str)/1000;
 80022ac:	f107 0318 	add.w	r3, r7, #24
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 ff32 	bl	800811a <atof>
 80022b6:	ec51 0b10 	vmov	r0, r1, d0
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4b8c      	ldr	r3, [pc, #560]	@ (80024f0 <handle_command+0x2f4>)
 80022c0:	f7fe fae4 	bl	800088c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fe fcac 	bl	8000c28 <__aeabi_d2f>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4a88      	ldr	r2, [pc, #544]	@ (80024f4 <handle_command+0x2f8>)
 80022d4:	6013      	str	r3, [r2, #0]
			altitude = calculate_altitude(pressure);
 80022d6:	4b87      	ldr	r3, [pc, #540]	@ (80024f4 <handle_command+0x2f8>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb0 0a67 	vmov.f32	s0, s15
 80022e0:	f7ff f866 	bl	80013b0 <calculate_altitude>
 80022e4:	eef0 7a40 	vmov.f32	s15, s0
 80022e8:	4b83      	ldr	r3, [pc, #524]	@ (80024f8 <handle_command+0x2fc>)
 80022ea:	edc3 7a00 	vstr	s15, [r3]
			char temp[12] = "SIMP";
 80022ee:	4a83      	ldr	r2, [pc, #524]	@ (80024fc <handle_command+0x300>)
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022f8:	6018      	str	r0, [r3, #0]
 80022fa:	3304      	adds	r3, #4
 80022fc:	7019      	strb	r1, [r3, #0]
 80022fe:	f107 0311 	add.w	r3, r7, #17
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f8c3 2003 	str.w	r2, [r3, #3]
			strcat(temp, pressure_str);
 800230a:	f107 0218 	add.w	r2, r7, #24
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f007 fb34 	bl	8009982 <strcat>
			set_cmd_echo(temp);
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff54 	bl	80021cc <set_cmd_echo>
			memset(pressure_str, '\0', sizeof(pressure_str));
 8002324:	f107 0318 	add.w	r3, r7, #24
 8002328:	2207      	movs	r2, #7
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f007 fb20 	bl	8009972 <memset>
		sim_enabled = false;
 8002332:	4b6b      	ldr	r3, [pc, #428]	@ (80024e0 <handle_command+0x2e4>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
}
 8002338:	e18f      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, set_time_command, strlen(set_time_command)) == 0) {
 800233a:	4871      	ldr	r0, [pc, #452]	@ (8002500 <handle_command+0x304>)
 800233c:	f7fd ffb8 	bl	80002b0 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	496e      	ldr	r1, [pc, #440]	@ (8002500 <handle_command+0x304>)
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f007 fb2a 	bl	80099a0 <strncmp>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d178      	bne.n	8002444 <handle_command+0x248>
		if (cmd[12]=='G') {
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	330c      	adds	r3, #12
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b47      	cmp	r3, #71	@ 0x47
 800235a:	d112      	bne.n	8002382 <handle_command+0x186>
			mission_time_hr = (int16_t)gps_time_hr;
 800235c:	4b69      	ldr	r3, [pc, #420]	@ (8002504 <handle_command+0x308>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b25a      	sxtb	r2, r3
 8002362:	4b69      	ldr	r3, [pc, #420]	@ (8002508 <handle_command+0x30c>)
 8002364:	701a      	strb	r2, [r3, #0]
			mission_time_min = (int16_t)gps_time_min;
 8002366:	4b69      	ldr	r3, [pc, #420]	@ (800250c <handle_command+0x310>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25a      	sxtb	r2, r3
 800236c:	4b68      	ldr	r3, [pc, #416]	@ (8002510 <handle_command+0x314>)
 800236e:	701a      	strb	r2, [r3, #0]
			mission_time_sec = (int16_t)gps_time_sec;
 8002370:	4b68      	ldr	r3, [pc, #416]	@ (8002514 <handle_command+0x318>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25a      	sxtb	r2, r3
 8002376:	4b68      	ldr	r3, [pc, #416]	@ (8002518 <handle_command+0x31c>)
 8002378:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("STGPS");
 800237a:	4868      	ldr	r0, [pc, #416]	@ (800251c <handle_command+0x320>)
 800237c:	f7ff ff26 	bl	80021cc <set_cmd_echo>
}
 8002380:	e16b      	b.n	800265a <handle_command+0x45e>
			memset(temp, 0, sizeof(temp));
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	2203      	movs	r2, #3
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f007 faf1 	bl	8009972 <memset>
			temp[0] = cmd[12];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	330c      	adds	r3, #12
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[13];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	330d      	adds	r3, #13
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	727b      	strb	r3, [r7, #9]
			mission_time_hr = atoi(temp);
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	4618      	mov	r0, r3
 80023a6:	f005 febb 	bl	8008120 <atoi>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b25a      	sxtb	r2, r3
 80023ae:	4b56      	ldr	r3, [pc, #344]	@ (8002508 <handle_command+0x30c>)
 80023b0:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	2203      	movs	r2, #3
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f007 fad9 	bl	8009972 <memset>
			temp[0] = cmd[15];
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	330f      	adds	r3, #15
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[16];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3310      	adds	r3, #16
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	727b      	strb	r3, [r7, #9]
			mission_time_min = atoi(temp);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 fea3 	bl	8008120 <atoi>
 80023da:	4603      	mov	r3, r0
 80023dc:	b25a      	sxtb	r2, r3
 80023de:	4b4c      	ldr	r3, [pc, #304]	@ (8002510 <handle_command+0x314>)
 80023e0:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	2203      	movs	r2, #3
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f007 fac1 	bl	8009972 <memset>
			temp[0] = cmd[18];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3312      	adds	r3, #18
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[19];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3313      	adds	r3, #19
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	727b      	strb	r3, [r7, #9]
			mission_time_sec = atoi(temp);
 8002400:	f107 0308 	add.w	r3, r7, #8
 8002404:	4618      	mov	r0, r3
 8002406:	f005 fe8b 	bl	8008120 <atoi>
 800240a:	4603      	mov	r3, r0
 800240c:	b25a      	sxtb	r2, r3
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <handle_command+0x31c>)
 8002410:	701a      	strb	r2, [r3, #0]
			memset(cmd_echo, '\0', sizeof(cmd_echo));
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	2100      	movs	r1, #0
 8002416:	4842      	ldr	r0, [pc, #264]	@ (8002520 <handle_command+0x324>)
 8002418:	f007 faab 	bl	8009972 <memset>
			snprintf(cmd_echo, 11, "ST%02d:%02d:%02", mission_time_hr, mission_time_min, mission_time_sec);
 800241c:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <handle_command+0x30c>)
 800241e:	f993 3000 	ldrsb.w	r3, [r3]
 8002422:	4619      	mov	r1, r3
 8002424:	4b3a      	ldr	r3, [pc, #232]	@ (8002510 <handle_command+0x314>)
 8002426:	f993 3000 	ldrsb.w	r3, [r3]
 800242a:	461a      	mov	r2, r3
 800242c:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <handle_command+0x31c>)
 800242e:	f993 3000 	ldrsb.w	r3, [r3]
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	460b      	mov	r3, r1
 8002438:	4a3a      	ldr	r2, [pc, #232]	@ (8002524 <handle_command+0x328>)
 800243a:	210b      	movs	r1, #11
 800243c:	4838      	ldr	r0, [pc, #224]	@ (8002520 <handle_command+0x324>)
 800243e:	f007 fa21 	bl	8009884 <sniprintf>
}
 8002442:	e10a      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, cal_alt_command, strlen(cal_alt_command)) == 0) {
 8002444:	4838      	ldr	r0, [pc, #224]	@ (8002528 <handle_command+0x32c>)
 8002446:	f7fd ff33 	bl	80002b0 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	4936      	ldr	r1, [pc, #216]	@ (8002528 <handle_command+0x32c>)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f007 faa5 	bl	80099a0 <strncmp>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d125      	bne.n	80024a8 <handle_command+0x2ac>
		altitude_offset -= altitude;
 800245c:	4b33      	ldr	r3, [pc, #204]	@ (800252c <handle_command+0x330>)
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <handle_command+0x2fc>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800246c:	4b2f      	ldr	r3, [pc, #188]	@ (800252c <handle_command+0x330>)
 800246e:	edc3 7a00 	vstr	s15, [r3]
		store_flash_data();
 8002472:	f7fe fde1 	bl	8001038 <store_flash_data>
		set_cmd_echo("CAL");
 8002476:	482e      	ldr	r0, [pc, #184]	@ (8002530 <handle_command+0x334>)
 8002478:	f7ff fea8 	bl	80021cc <set_cmd_echo>
		if (strncmp(state, "PRE-LAUNCH", strlen("PRE-LAUNCH")) == 0) {
 800247c:	220a      	movs	r2, #10
 800247e:	492d      	ldr	r1, [pc, #180]	@ (8002534 <handle_command+0x338>)
 8002480:	482d      	ldr	r0, [pc, #180]	@ (8002538 <handle_command+0x33c>)
 8002482:	f007 fa8d 	bl	80099a0 <strncmp>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <handle_command+0x2a4>
			memset(state, 0, sizeof(state));
 800248c:	220e      	movs	r2, #14
 800248e:	2100      	movs	r1, #0
 8002490:	4829      	ldr	r0, [pc, #164]	@ (8002538 <handle_command+0x33c>)
 8002492:	f007 fa6e 	bl	8009972 <memset>
			strncpy(state, "LAUNCH-READY", strlen("LAUNCH-READY"));
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <handle_command+0x33c>)
 8002498:	4a28      	ldr	r2, [pc, #160]	@ (800253c <handle_command+0x340>)
 800249a:	ca07      	ldmia	r2, {r0, r1, r2}
 800249c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		sim_enabled = false;
 80024a0:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <handle_command+0x2e4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	e0d8      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, bcn_on_command, strlen(bcn_on_command)) == 0) {
 80024a8:	4825      	ldr	r0, [pc, #148]	@ (8002540 <handle_command+0x344>)
 80024aa:	f7fd ff01 	bl	80002b0 <strlen>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4923      	ldr	r1, [pc, #140]	@ (8002540 <handle_command+0x344>)
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f007 fa73 	bl	80099a0 <strncmp>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d145      	bne.n	800254c <handle_command+0x350>
		beacon_status = 1;
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <handle_command+0x348>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
		set_cmd_echo("BCNON");
 80024c6:	4820      	ldr	r0, [pc, #128]	@ (8002548 <handle_command+0x34c>)
 80024c8:	f7ff fe80 	bl	80021cc <set_cmd_echo>
		sim_enabled = false;
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <handle_command+0x2e4>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	e0c2      	b.n	800265a <handle_command+0x45e>
 80024d4:	20000bbc 	.word	0x20000bbc
 80024d8:	0800d228 	.word	0x0800d228
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000c88 	.word	0x20000c88
 80024e4:	0800d234 	.word	0x0800d234
 80024e8:	0800d240 	.word	0x0800d240
 80024ec:	20000bcc 	.word	0x20000bcc
 80024f0:	408f4000 	.word	0x408f4000
 80024f4:	20000974 	.word	0x20000974
 80024f8:	2000096c 	.word	0x2000096c
 80024fc:	0800d2b4 	.word	0x0800d2b4
 8002500:	20000bdc 	.word	0x20000bdc
 8002504:	200009a4 	.word	0x200009a4
 8002508:	20000964 	.word	0x20000964
 800250c:	200009a5 	.word	0x200009a5
 8002510:	20000965 	.word	0x20000965
 8002514:	200009a6 	.word	0x200009a6
 8002518:	20000966 	.word	0x20000966
 800251c:	0800d24c 	.word	0x0800d24c
 8002520:	20000014 	.word	0x20000014
 8002524:	0800d254 	.word	0x0800d254
 8002528:	20000bec 	.word	0x20000bec
 800252c:	2000009c 	.word	0x2000009c
 8002530:	0800d264 	.word	0x0800d264
 8002534:	0800d268 	.word	0x0800d268
 8002538:	20000004 	.word	0x20000004
 800253c:	0800d274 	.word	0x0800d274
 8002540:	20000bfc 	.word	0x20000bfc
 8002544:	20000c84 	.word	0x20000c84
 8002548:	0800d284 	.word	0x0800d284
	else if (strncmp(cmd, bcn_off_command, strlen(bcn_off_command)) == 0) {
 800254c:	4845      	ldr	r0, [pc, #276]	@ (8002664 <handle_command+0x468>)
 800254e:	f7fd feaf 	bl	80002b0 <strlen>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4943      	ldr	r1, [pc, #268]	@ (8002664 <handle_command+0x468>)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f007 fa21 	bl	80099a0 <strncmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d109      	bne.n	8002578 <handle_command+0x37c>
		beacon_status = 0;
 8002564:	4b40      	ldr	r3, [pc, #256]	@ (8002668 <handle_command+0x46c>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
		set_cmd_echo("BCNOFF");
 800256a:	4840      	ldr	r0, [pc, #256]	@ (800266c <handle_command+0x470>)
 800256c:	f7ff fe2e 	bl	80021cc <set_cmd_echo>
		sim_enabled = false;
 8002570:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <handle_command+0x474>)
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
}
 8002576:	e070      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, tel_on_command, strlen(tel_on_command)) == 0) {
 8002578:	483e      	ldr	r0, [pc, #248]	@ (8002674 <handle_command+0x478>)
 800257a:	f7fd fe99 	bl	80002b0 <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	493c      	ldr	r1, [pc, #240]	@ (8002674 <handle_command+0x478>)
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f007 fa0b 	bl	80099a0 <strncmp>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d109      	bne.n	80025a4 <handle_command+0x3a8>
		telemetry_status = 1;
 8002590:	4b39      	ldr	r3, [pc, #228]	@ (8002678 <handle_command+0x47c>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXON");
 8002596:	4839      	ldr	r0, [pc, #228]	@ (800267c <handle_command+0x480>)
 8002598:	f7ff fe18 	bl	80021cc <set_cmd_echo>
		sim_enabled = false;
 800259c:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <handle_command+0x474>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
}
 80025a2:	e05a      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, tel_off_command, strlen(tel_off_command)) == 0) {
 80025a4:	4836      	ldr	r0, [pc, #216]	@ (8002680 <handle_command+0x484>)
 80025a6:	f7fd fe83 	bl	80002b0 <strlen>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4934      	ldr	r1, [pc, #208]	@ (8002680 <handle_command+0x484>)
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f007 f9f5 	bl	80099a0 <strncmp>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <handle_command+0x3d4>
		telemetry_status = 0;
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <handle_command+0x47c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXOFF");
 80025c2:	4830      	ldr	r0, [pc, #192]	@ (8002684 <handle_command+0x488>)
 80025c4:	f7ff fe02 	bl	80021cc <set_cmd_echo>
		sim_enabled = false;
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <handle_command+0x474>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
}
 80025ce:	e044      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, cal_comp_on_command, strlen(cal_comp_on_command)) == 0) {
 80025d0:	482d      	ldr	r0, [pc, #180]	@ (8002688 <handle_command+0x48c>)
 80025d2:	f7fd fe6d 	bl	80002b0 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	492b      	ldr	r1, [pc, #172]	@ (8002688 <handle_command+0x48c>)
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f007 f9df 	bl	80099a0 <strncmp>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d121      	bne.n	800262c <handle_command+0x430>
		mag_x_min = mag_x;
 80025e8:	4b28      	ldr	r3, [pc, #160]	@ (800268c <handle_command+0x490>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a28      	ldr	r2, [pc, #160]	@ (8002690 <handle_command+0x494>)
 80025ee:	6013      	str	r3, [r2, #0]
		mag_x_max = mag_x;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <handle_command+0x490>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a27      	ldr	r2, [pc, #156]	@ (8002694 <handle_command+0x498>)
 80025f6:	6013      	str	r3, [r2, #0]
		mag_y_min = mag_y;
 80025f8:	4b27      	ldr	r3, [pc, #156]	@ (8002698 <handle_command+0x49c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a27      	ldr	r2, [pc, #156]	@ (800269c <handle_command+0x4a0>)
 80025fe:	6013      	str	r3, [r2, #0]
		mag_y_max = mag_y;
 8002600:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <handle_command+0x49c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a26      	ldr	r2, [pc, #152]	@ (80026a0 <handle_command+0x4a4>)
 8002606:	6013      	str	r3, [r2, #0]
		mag_z_min = mag_z;
 8002608:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <handle_command+0x4a8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a26      	ldr	r2, [pc, #152]	@ (80026a8 <handle_command+0x4ac>)
 800260e:	6013      	str	r3, [r2, #0]
		mag_z_max = mag_z;
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <handle_command+0x4a8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	@ (80026ac <handle_command+0x4b0>)
 8002616:	6013      	str	r3, [r2, #0]
		calibrating_compass = 1;
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <handle_command+0x4b4>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
		set_cmd_echo("CCON");
 800261e:	4825      	ldr	r0, [pc, #148]	@ (80026b4 <handle_command+0x4b8>)
 8002620:	f7ff fdd4 	bl	80021cc <set_cmd_echo>
		sim_enabled = false;
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <handle_command+0x474>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
}
 800262a:	e016      	b.n	800265a <handle_command+0x45e>
	else if (strncmp(cmd, cal_comp_off_command, strlen(cal_comp_off_command)) == 0) {
 800262c:	4822      	ldr	r0, [pc, #136]	@ (80026b8 <handle_command+0x4bc>)
 800262e:	f7fd fe3f 	bl	80002b0 <strlen>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4920      	ldr	r1, [pc, #128]	@ (80026b8 <handle_command+0x4bc>)
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f007 f9b1 	bl	80099a0 <strncmp>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10a      	bne.n	800265a <handle_command+0x45e>
			store_flash_data();
 8002644:	f7fe fcf8 	bl	8001038 <store_flash_data>
			calibrating_compass = 0;
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <handle_command+0x4b4>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("CCOFF");
 800264e:	481b      	ldr	r0, [pc, #108]	@ (80026bc <handle_command+0x4c0>)
 8002650:	f7ff fdbc 	bl	80021cc <set_cmd_echo>
			sim_enabled = false;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <handle_command+0x474>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
}
 800265a:	bf00      	nop
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000c0c 	.word	0x20000c0c
 8002668:	20000c84 	.word	0x20000c84
 800266c:	0800d28c 	.word	0x0800d28c
 8002670:	20000c88 	.word	0x20000c88
 8002674:	20000c20 	.word	0x20000c20
 8002678:	200000a8 	.word	0x200000a8
 800267c:	0800d294 	.word	0x0800d294
 8002680:	20000c30 	.word	0x20000c30
 8002684:	0800d29c 	.word	0x0800d29c
 8002688:	20000c40 	.word	0x20000c40
 800268c:	20000994 	.word	0x20000994
 8002690:	20000c74 	.word	0x20000c74
 8002694:	20000c80 	.word	0x20000c80
 8002698:	20000998 	.word	0x20000998
 800269c:	20000c78 	.word	0x20000c78
 80026a0:	200000a0 	.word	0x200000a0
 80026a4:	2000099c 	.word	0x2000099c
 80026a8:	20000c7c 	.word	0x20000c7c
 80026ac:	200000a4 	.word	0x200000a4
 80026b0:	20000d91 	.word	0x20000d91
 80026b4:	0800d2a4 	.word	0x0800d2a4
 80026b8:	20000c50 	.word	0x20000c50
 80026bc:	0800d2ac 	.word	0x0800d2ac

080026c0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);
 80026cc:	4a20      	ldr	r2, [pc, #128]	@ (8002750 <HAL_UARTEx_RxEventCallback+0x90>)
 80026ce:	4b21      	ldr	r3, [pc, #132]	@ (8002754 <HAL_UARTEx_RxEventCallback+0x94>)
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	23ff      	movs	r3, #255	@ 0xff
 80026d6:	461a      	mov	r2, r3
 80026d8:	f007 f9ff 	bl	8009ada <memcpy>

	memset(rx_data, 0, sizeof(rx_data));
 80026dc:	22ff      	movs	r2, #255	@ 0xff
 80026de:	2100      	movs	r1, #0
 80026e0:	481c      	ldr	r0, [pc, #112]	@ (8002754 <HAL_UARTEx_RxEventCallback+0x94>)
 80026e2:	f007 f946 	bl	8009972 <memset>

	if (rx_packet[0] == '~') {
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_UARTEx_RxEventCallback+0x90>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80026ec:	d122      	bne.n	8002734 <HAL_UARTEx_RxEventCallback+0x74>
		// Calculate where the comma and checksum should be
		char *comma_pos = &rx_packet[Size - 3];  // Comma is 3 characters from the end (2 for checksum, 1 for comma)
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_UARTEx_RxEventCallback+0x90>)
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

		// Ensure the expected comma is at the right position
		if (*comma_pos == ',') {
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80026fe:	d119      	bne.n	8002734 <HAL_UARTEx_RxEventCallback+0x74>
			// Null-terminate the data part (exclude comma and checksum)
			*comma_pos = '\0';
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]

			// Extract and convert the received checksum (2 characters after the comma)
			uint8_t received_checksum = (uint8_t)strtol(&rx_packet[Size - 2], NULL, 16);  // Convert checksum to integer
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	3b02      	subs	r3, #2
 800270a:	4a11      	ldr	r2, [pc, #68]	@ (8002750 <HAL_UARTEx_RxEventCallback+0x90>)
 800270c:	4413      	add	r3, r2
 800270e:	2210      	movs	r2, #16
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f006 fb92 	bl	8008e3c <strtol>
 8002718:	4603      	mov	r3, r0
 800271a:	72fb      	strb	r3, [r7, #11]
			// Calculate checksum of the data part (after '~' and before comma)
			uint8_t calculated_checksum = calculate_checksum(&rx_packet[1]);
 800271c:	480e      	ldr	r0, [pc, #56]	@ (8002758 <HAL_UARTEx_RxEventCallback+0x98>)
 800271e:	f7ff fb27 	bl	8001d70 <calculate_checksum>
 8002722:	4603      	mov	r3, r0
 8002724:	72bb      	strb	r3, [r7, #10]
			// Compare calculated checksum with the received one
			if (calculated_checksum == received_checksum) {
 8002726:	7aba      	ldrb	r2, [r7, #10]
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	429a      	cmp	r2, r3
 800272c:	d102      	bne.n	8002734 <HAL_UARTEx_RxEventCallback+0x74>
				// Checksum is valid, process the command
				handle_command(&rx_packet[1]);
 800272e:	480a      	ldr	r0, [pc, #40]	@ (8002758 <HAL_UARTEx_RxEventCallback+0x98>)
 8002730:	f7ff fd64 	bl	80021fc <handle_command>
			}
		}
	}

	// Call function for next packet
	uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 8002734:	22ff      	movs	r2, #255	@ 0xff
 8002736:	4907      	ldr	r1, [pc, #28]	@ (8002754 <HAL_UARTEx_RxEventCallback+0x94>)
 8002738:	4808      	ldr	r0, [pc, #32]	@ (800275c <HAL_UARTEx_RxEventCallback+0x9c>)
 800273a:	f004 fa44 	bl	8006bc6 <HAL_UARTEx_ReceiveToIdle_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002744:	701a      	strb	r2, [r3, #0]

}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000029c 	.word	0x2000029c
 8002754:	20000c8c 	.word	0x20000c8c
 8002758:	2000029d 	.word	0x2000029d
 800275c:	200003f0 	.word	0x200003f0
 8002760:	20000d8b 	.word	0x20000d8b

08002764 <calibrate_mmc>:

void calibrate_mmc(){
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	read_MMC5603();
 8002768:	f7fe fe76 	bl	8001458 <read_MMC5603>
	if (mag_x < mag_x_min){
 800276c:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <calibrate_mmc+0x11c>)
 800276e:	ed93 7a00 	vldr	s14, [r3]
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <calibrate_mmc+0x120>)
 8002774:	edd3 7a00 	vldr	s15, [r3]
 8002778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	d503      	bpl.n	800278a <calibrate_mmc+0x26>
		mag_x_min = mag_x;
 8002782:	4b3f      	ldr	r3, [pc, #252]	@ (8002880 <calibrate_mmc+0x11c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a3f      	ldr	r2, [pc, #252]	@ (8002884 <calibrate_mmc+0x120>)
 8002788:	6013      	str	r3, [r2, #0]
	}
	if (mag_x > mag_x_max){
 800278a:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <calibrate_mmc+0x11c>)
 800278c:	ed93 7a00 	vldr	s14, [r3]
 8002790:	4b3d      	ldr	r3, [pc, #244]	@ (8002888 <calibrate_mmc+0x124>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	dd03      	ble.n	80027a8 <calibrate_mmc+0x44>
		mag_x_max = mag_x;
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <calibrate_mmc+0x11c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a38      	ldr	r2, [pc, #224]	@ (8002888 <calibrate_mmc+0x124>)
 80027a6:	6013      	str	r3, [r2, #0]
	}
	if (mag_y < mag_y_min){
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <calibrate_mmc+0x128>)
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <calibrate_mmc+0x12c>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027bc:	d503      	bpl.n	80027c6 <calibrate_mmc+0x62>
		mag_y_min = mag_y;
 80027be:	4b33      	ldr	r3, [pc, #204]	@ (800288c <calibrate_mmc+0x128>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a33      	ldr	r2, [pc, #204]	@ (8002890 <calibrate_mmc+0x12c>)
 80027c4:	6013      	str	r3, [r2, #0]
	}
	if (mag_y > mag_y_max){
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <calibrate_mmc+0x128>)
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <calibrate_mmc+0x130>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027da:	dd03      	ble.n	80027e4 <calibrate_mmc+0x80>
		mag_y_max = mag_y;
 80027dc:	4b2b      	ldr	r3, [pc, #172]	@ (800288c <calibrate_mmc+0x128>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002894 <calibrate_mmc+0x130>)
 80027e2:	6013      	str	r3, [r2, #0]
	}
	if (mag_z < mag_z_min){
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <calibrate_mmc+0x134>)
 80027e6:	ed93 7a00 	vldr	s14, [r3]
 80027ea:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <calibrate_mmc+0x138>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d503      	bpl.n	8002802 <calibrate_mmc+0x9e>
		mag_z_min = mag_z;
 80027fa:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <calibrate_mmc+0x134>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a27      	ldr	r2, [pc, #156]	@ (800289c <calibrate_mmc+0x138>)
 8002800:	6013      	str	r3, [r2, #0]
	}
	if (mag_z > mag_z_max){
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <calibrate_mmc+0x134>)
 8002804:	ed93 7a00 	vldr	s14, [r3]
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <calibrate_mmc+0x13c>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	dd03      	ble.n	8002820 <calibrate_mmc+0xbc>
		mag_z_max = mag_z;
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <calibrate_mmc+0x134>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a20      	ldr	r2, [pc, #128]	@ (80028a0 <calibrate_mmc+0x13c>)
 800281e:	6013      	str	r3, [r2, #0]
	}

	mag_x_offset = (mag_x_min + mag_x_max) / 2;
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <calibrate_mmc+0x120>)
 8002822:	ed93 7a00 	vldr	s14, [r3]
 8002826:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <calibrate_mmc+0x124>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002830:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002838:	4b1a      	ldr	r3, [pc, #104]	@ (80028a4 <calibrate_mmc+0x140>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
	mag_y_offset = (mag_y_min + mag_y_max) / 2;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <calibrate_mmc+0x12c>)
 8002840:	ed93 7a00 	vldr	s14, [r3]
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <calibrate_mmc+0x130>)
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800284e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002856:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <calibrate_mmc+0x144>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	mag_z_offset = (mag_z_min + mag_z_max) / 2;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <calibrate_mmc+0x138>)
 800285e:	ed93 7a00 	vldr	s14, [r3]
 8002862:	4b0f      	ldr	r3, [pc, #60]	@ (80028a0 <calibrate_mmc+0x13c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <calibrate_mmc+0x148>)
 8002876:	edc3 7a00 	vstr	s15, [r3]
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000994 	.word	0x20000994
 8002884:	20000c74 	.word	0x20000c74
 8002888:	20000c80 	.word	0x20000c80
 800288c:	20000998 	.word	0x20000998
 8002890:	20000c78 	.word	0x20000c78
 8002894:	200000a0 	.word	0x200000a0
 8002898:	2000099c 	.word	0x2000099c
 800289c:	20000c7c 	.word	0x20000c7c
 80028a0:	200000a4 	.word	0x200000a4
 80028a4:	20000c68 	.word	0x20000c68
 80028a8:	20000c6c 	.word	0x20000c6c
 80028ac:	20000c70 	.word	0x20000c70

080028b0 <ms_interrupt>:

void ms_interrupt(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0

	// If in compass calibration mode
	if (calibrating_compass == 1){
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <ms_interrupt+0xf4>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d102      	bne.n	80028c2 <ms_interrupt+0x12>
		calibrate_mmc();
 80028bc:	f7ff ff52 	bl	8002764 <calibrate_mmc>
		return;
 80028c0:	e06f      	b.n	80029a2 <ms_interrupt+0xf2>
	}

	// Only read data after everything is initialized
	if (started == 1){
 80028c2:	4b39      	ldr	r3, [pc, #228]	@ (80029a8 <ms_interrupt+0xf8>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d104      	bne.n	80028d4 <ms_interrupt+0x24>
		ms_elapsed++;
 80028ca:	4b38      	ldr	r3, [pc, #224]	@ (80029ac <ms_interrupt+0xfc>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a36      	ldr	r2, [pc, #216]	@ (80029ac <ms_interrupt+0xfc>)
 80028d2:	6013      	str	r3, [r2, #0]
	}

	if (ms_elapsed >= 1000){
 80028d4:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <ms_interrupt+0xfc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028dc:	d361      	bcc.n	80029a2 <ms_interrupt+0xf2>
		ms_elapsed -= 1000;
 80028de:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <ms_interrupt+0xfc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80028e6:	4a31      	ldr	r2, [pc, #196]	@ (80029ac <ms_interrupt+0xfc>)
 80028e8:	6013      	str	r3, [r2, #0]

		// Occurs every second
		// Handle Mission Time
		mission_time_sec++;
 80028ea:	4b31      	ldr	r3, [pc, #196]	@ (80029b0 <ms_interrupt+0x100>)
 80028ec:	f993 3000 	ldrsb.w	r3, [r3]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	b25a      	sxtb	r2, r3
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <ms_interrupt+0x100>)
 80028fa:	701a      	strb	r2, [r3, #0]
		if ( mission_time_sec >= 60 ){
 80028fc:	4b2c      	ldr	r3, [pc, #176]	@ (80029b0 <ms_interrupt+0x100>)
 80028fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002902:	2b3b      	cmp	r3, #59	@ 0x3b
 8002904:	dd11      	ble.n	800292a <ms_interrupt+0x7a>
			mission_time_sec -= 60;
 8002906:	4b2a      	ldr	r3, [pc, #168]	@ (80029b0 <ms_interrupt+0x100>)
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3b3c      	subs	r3, #60	@ 0x3c
 8002910:	b2db      	uxtb	r3, r3
 8002912:	b25a      	sxtb	r2, r3
 8002914:	4b26      	ldr	r3, [pc, #152]	@ (80029b0 <ms_interrupt+0x100>)
 8002916:	701a      	strb	r2, [r3, #0]
			mission_time_min += 1;
 8002918:	4b26      	ldr	r3, [pc, #152]	@ (80029b4 <ms_interrupt+0x104>)
 800291a:	f993 3000 	ldrsb.w	r3, [r3]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	b25a      	sxtb	r2, r3
 8002926:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <ms_interrupt+0x104>)
 8002928:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_min >= 60 ){
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <ms_interrupt+0x104>)
 800292c:	f993 3000 	ldrsb.w	r3, [r3]
 8002930:	2b3b      	cmp	r3, #59	@ 0x3b
 8002932:	dd11      	ble.n	8002958 <ms_interrupt+0xa8>
			mission_time_min -= 60;
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <ms_interrupt+0x104>)
 8002936:	f993 3000 	ldrsb.w	r3, [r3]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3b3c      	subs	r3, #60	@ 0x3c
 800293e:	b2db      	uxtb	r3, r3
 8002940:	b25a      	sxtb	r2, r3
 8002942:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <ms_interrupt+0x104>)
 8002944:	701a      	strb	r2, [r3, #0]
			mission_time_hr += 1;
 8002946:	4b1c      	ldr	r3, [pc, #112]	@ (80029b8 <ms_interrupt+0x108>)
 8002948:	f993 3000 	ldrsb.w	r3, [r3]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	b25a      	sxtb	r2, r3
 8002954:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <ms_interrupt+0x108>)
 8002956:	701a      	strb	r2, [r3, #0]
		}
		if ( mission_time_hr >= 24 ){
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <ms_interrupt+0x108>)
 800295a:	f993 3000 	ldrsb.w	r3, [r3]
 800295e:	2b17      	cmp	r3, #23
 8002960:	dd08      	ble.n	8002974 <ms_interrupt+0xc4>
			mission_time_hr -= 24;
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <ms_interrupt+0x108>)
 8002964:	f993 3000 	ldrsb.w	r3, [r3]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b18      	subs	r3, #24
 800296c:	b2db      	uxtb	r3, r3
 800296e:	b25a      	sxtb	r2, r3
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <ms_interrupt+0x108>)
 8002972:	701a      	strb	r2, [r3, #0]
		}

		handle_state();
 8002974:	f7ff fb80 	bl	8002078 <handle_state>

		// Control Telemetry
		if (telemetry_status == 1){
 8002978:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <ms_interrupt+0x10c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <ms_interrupt+0xd4>
			read_transmit_telemetry();
 8002980:	f7ff fc16 	bl	80021b0 <read_transmit_telemetry>
		}

		// Control Beacon
		if (beacon_status == 1) {
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <ms_interrupt+0x110>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <ms_interrupt+0xe8>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2110      	movs	r1, #16
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <ms_interrupt+0x114>)
 8002992:	f001 faa5 	bl	8003ee0 <HAL_GPIO_WritePin>
 8002996:	e004      	b.n	80029a2 <ms_interrupt+0xf2>
		}

		else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2110      	movs	r1, #16
 800299c:	4809      	ldr	r0, [pc, #36]	@ (80029c4 <ms_interrupt+0x114>)
 800299e:	f001 fa9f 	bl	8003ee0 <HAL_GPIO_WritePin>
		}

	}
}
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000d91 	.word	0x20000d91
 80029a8:	20000d90 	.word	0x20000d90
 80029ac:	20000d8c 	.word	0x20000d8c
 80029b0:	20000966 	.word	0x20000966
 80029b4:	20000965 	.word	0x20000965
 80029b8:	20000964 	.word	0x20000964
 80029bc:	200000a8 	.word	0x200000a8
 80029c0:	20000c84 	.word	0x20000c84
 80029c4:	40020400 	.word	0x40020400

080029c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029cc:	f000 fcac 	bl	8003328 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029d0:	f000 f834 	bl	8002a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d4:	f000 f958 	bl	8002c88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80029d8:	f000 f8fc 	bl	8002bd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80029dc:	f000 f924 	bl	8002c28 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80029e0:	f000 f8c6 	bl	8002b70 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80029e4:	f000 f896 	bl	8002b14 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

//  store_flash_data();
  load_flash_data();
 80029e8:	f7fe fb82 	bl	80010f0 <load_flash_data>

  result = HAL_I2C_IsDeviceReady(&hi2c2, MPU6050_ADDRESS, 3, 5);
 80029ec:	2305      	movs	r3, #5
 80029ee:	2203      	movs	r2, #3
 80029f0:	21d0      	movs	r1, #208	@ 0xd0
 80029f2:	480c      	ldr	r0, [pc, #48]	@ (8002a24 <main+0x5c>)
 80029f4:	f002 fa2e 	bl	8004e54 <HAL_I2C_IsDeviceReady>
 80029f8:	4603      	mov	r3, r0
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <main+0x60>)
 80029fe:	701a      	strb	r2, [r3, #0]

  init_sensors();
 8002a00:	f7ff f940 	bl	8001c84 <init_sensors>
  init_commands();
 8002a04:	f7ff f94a 	bl	8001c9c <init_commands>

  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart2, rx_data, RX_BFR_SIZE);
 8002a08:	22ff      	movs	r2, #255	@ 0xff
 8002a0a:	4908      	ldr	r1, [pc, #32]	@ (8002a2c <main+0x64>)
 8002a0c:	4808      	ldr	r0, [pc, #32]	@ (8002a30 <main+0x68>)
 8002a0e:	f004 f8da 	bl	8006bc6 <HAL_UARTEx_ReceiveToIdle_IT>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <main+0x6c>)
 8002a18:	701a      	strb	r2, [r3, #0]

  started = 1;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <main+0x70>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a20:	bf00      	nop
 8002a22:	e7fd      	b.n	8002a20 <main+0x58>
 8002a24:	2000039c 	.word	0x2000039c
 8002a28:	20000d92 	.word	0x20000d92
 8002a2c:	20000c8c 	.word	0x20000c8c
 8002a30:	200003f0 	.word	0x200003f0
 8002a34:	20000d8b 	.word	0x20000d8b
 8002a38:	20000d90 	.word	0x20000d90

08002a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b094      	sub	sp, #80	@ 0x50
 8002a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	2234      	movs	r2, #52	@ 0x34
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f006 ff91 	bl	8009972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	4b29      	ldr	r3, [pc, #164]	@ (8002b0c <SystemClock_Config+0xd0>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <SystemClock_Config+0xd0>)
 8002a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a70:	4b26      	ldr	r3, [pc, #152]	@ (8002b0c <SystemClock_Config+0xd0>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <SystemClock_Config+0xd4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <SystemClock_Config+0xd4>)
 8002a86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <SystemClock_Config+0xd4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a9c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002aa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002aa6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002aac:	2308      	movs	r3, #8
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8002ab0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002aba:	2308      	movs	r3, #8
 8002abc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac2:	f107 031c 	add.w	r3, r7, #28
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fd1e 	bl	8006508 <HAL_RCC_OscConfig>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002ad2:	f000 f995 	bl	8002e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad6:	230f      	movs	r3, #15
 8002ad8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ada:	2302      	movs	r3, #2
 8002adc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002aec:	f107 0308 	add.w	r3, r7, #8
 8002af0:	2103      	movs	r1, #3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 f91a 	bl	8005d2c <HAL_RCC_ClockConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002afe:	f000 f97f 	bl	8002e00 <Error_Handler>
  }
}
 8002b02:	bf00      	nop
 8002b04:	3750      	adds	r7, #80	@ 0x50
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40007000 	.word	0x40007000

08002b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b1a:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <MX_I2C2_Init+0x54>)
 8002b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b20:	4a12      	ldr	r2, [pc, #72]	@ (8002b6c <MX_I2C2_Init+0x58>)
 8002b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <MX_I2C2_Init+0x50>)
 8002b52:	f001 f9df 	bl	8003f14 <HAL_I2C_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002b5c:	f000 f950 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	2000039c 	.word	0x2000039c
 8002b68:	40005800 	.word	0x40005800
 8002b6c:	000186a0 	.word	0x000186a0

08002b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2026      	movs	r0, #38	@ 0x26
 8002b7a:	f000 fd46 	bl	800360a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7e:	2026      	movs	r0, #38	@ 0x26
 8002b80:	f000 fd5f 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <MX_USART2_UART_Init+0x60>)
 8002b88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002b8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b92:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b98:	4b0c      	ldr	r3, [pc, #48]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002baa:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bb6:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <MX_USART2_UART_Init+0x5c>)
 8002bb8:	f003 ff2a 	bl	8006a10 <HAL_UART_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002bc2:	f000 f91d 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200003f0 	.word	0x200003f0
 8002bd0:	40004400 	.word	0x40004400

08002bd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002bda:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <MX_USART3_UART_Init+0x50>)
 8002bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002bfa:	220c      	movs	r2, #12
 8002bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bfe:	4b08      	ldr	r3, [pc, #32]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c0a:	4805      	ldr	r0, [pc, #20]	@ (8002c20 <MX_USART3_UART_Init+0x4c>)
 8002c0c:	f003 ff00 	bl	8006a10 <HAL_UART_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c16:	f000 f8f3 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000438 	.word	0x20000438
 8002c24:	40004800 	.word	0x40004800

08002c28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c34:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c36:	2206      	movs	r2, #6
 8002c38:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c40:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c46:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c48:	2202      	movs	r2, #2
 8002c4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c52:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c58:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c64:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c6a:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c70:	4804      	ldr	r0, [pc, #16]	@ (8002c84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c72:	f002 ff21 	bl	8005ab8 <HAL_PCD_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8002c7c:	f000 f8c0 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000480 	.word	0x20000480

08002c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	@ 0x30
 8002c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	4b53      	ldr	r3, [pc, #332]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca6:	4a52      	ldr	r2, [pc, #328]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cae:	4b50      	ldr	r3, [pc, #320]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a4b      	ldr	r2, [pc, #300]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cc4:	f043 0320 	orr.w	r3, r3, #32
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b49      	ldr	r3, [pc, #292]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	4b45      	ldr	r3, [pc, #276]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4a44      	ldr	r2, [pc, #272]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce6:	4b42      	ldr	r3, [pc, #264]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d02:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b37      	ldr	r3, [pc, #220]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a36      	ldr	r2, [pc, #216]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	4a28      	ldr	r2, [pc, #160]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <MX_GPIO_Init+0x168>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002d62:	2200      	movs	r2, #0
 8002d64:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002d68:	4822      	ldr	r0, [pc, #136]	@ (8002df4 <MX_GPIO_Init+0x16c>)
 8002d6a:	f001 f8b9 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2140      	movs	r1, #64	@ 0x40
 8002d72:	4821      	ldr	r0, [pc, #132]	@ (8002df8 <MX_GPIO_Init+0x170>)
 8002d74:	f001 f8b4 	bl	8003ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	481b      	ldr	r0, [pc, #108]	@ (8002dfc <MX_GPIO_Init+0x174>)
 8002d90:	f000 ff12 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002d94:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 031c 	add.w	r3, r7, #28
 8002daa:	4619      	mov	r1, r3
 8002dac:	4811      	ldr	r0, [pc, #68]	@ (8002df4 <MX_GPIO_Init+0x16c>)
 8002dae:	f000 ff03 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002db2:	2340      	movs	r3, #64	@ 0x40
 8002db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 031c 	add.w	r3, r7, #28
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	480b      	ldr	r0, [pc, #44]	@ (8002df8 <MX_GPIO_Init+0x170>)
 8002dca:	f000 fef5 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	@ (8002df8 <MX_GPIO_Init+0x170>)
 8002de2:	f000 fee9 	bl	8003bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002de6:	bf00      	nop
 8002de8:	3730      	adds	r7, #48	@ 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40020800 	.word	0x40020800

08002e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <Error_Handler+0x8>

08002e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_MspInit+0x4c>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08a      	sub	sp, #40	@ 0x28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	@ (8002ee0 <HAL_I2C_MspInit+0x84>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d12b      	bne.n	8002ed6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b18      	ldr	r3, [pc, #96]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a17      	ldr	r2, [pc, #92]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e88:	f043 0320 	orr.w	r3, r3, #32
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e9e:	2312      	movs	r3, #18
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002eaa:	2304      	movs	r3, #4
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	480c      	ldr	r0, [pc, #48]	@ (8002ee8 <HAL_I2C_MspInit+0x8c>)
 8002eb6:	f000 fe7f 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	4a08      	ldr	r2, [pc, #32]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ec4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eca:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <HAL_I2C_MspInit+0x88>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40005800 	.word	0x40005800
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40021400 	.word	0x40021400

08002eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	@ 0x30
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <HAL_UART_MspInit+0xe8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d12c      	bne.n	8002f68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	4a30      	ldr	r2, [pc, #192]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a29      	ldr	r2, [pc, #164]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f34:	f043 0308 	orr.w	r3, r3, #8
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b27      	ldr	r3, [pc, #156]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f46:	2360      	movs	r3, #96	@ 0x60
 8002f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f52:	2303      	movs	r3, #3
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f56:	2307      	movs	r3, #7
 8002f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f5a:	f107 031c 	add.w	r3, r7, #28
 8002f5e:	4619      	mov	r1, r3
 8002f60:	481e      	ldr	r0, [pc, #120]	@ (8002fdc <HAL_UART_MspInit+0xf0>)
 8002f62:	f000 fe29 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f66:	e031      	b.n	8002fcc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <HAL_UART_MspInit+0xf4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d12c      	bne.n	8002fcc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a17      	ldr	r2, [pc, #92]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	4a10      	ldr	r2, [pc, #64]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <HAL_UART_MspInit+0xec>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002faa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fbc:	2307      	movs	r3, #7
 8002fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4805      	ldr	r0, [pc, #20]	@ (8002fdc <HAL_UART_MspInit+0xf0>)
 8002fc8:	f000 fdf6 	bl	8003bb8 <HAL_GPIO_Init>
}
 8002fcc:	bf00      	nop
 8002fce:	3730      	adds	r7, #48	@ 0x30
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40004800 	.word	0x40004800

08002fe4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b098      	sub	sp, #96	@ 0x60
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ffc:	f107 0310 	add.w	r3, r7, #16
 8003000:	223c      	movs	r2, #60	@ 0x3c
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f006 fcb4 	bl	8009972 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003012:	d14d      	bne.n	80030b0 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003014:	2320      	movs	r3, #32
 8003016:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003018:	2300      	movs	r3, #0
 800301a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4618      	mov	r0, r3
 8003022:	f003 f8a3 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 800302c:	f7ff fee8 	bl	8002e00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	4a1f      	ldr	r2, [pc, #124]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003040:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800304c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003050:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305a:	2303      	movs	r3, #3
 800305c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800305e:	230a      	movs	r3, #10
 8003060:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003066:	4619      	mov	r1, r3
 8003068:	4814      	ldr	r0, [pc, #80]	@ (80030bc <HAL_PCD_MspInit+0xd8>)
 800306a:	f000 fda5 	bl	8003bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800306e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003074:	2300      	movs	r3, #0
 8003076:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800307c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003080:	4619      	mov	r1, r3
 8003082:	480e      	ldr	r0, [pc, #56]	@ (80030bc <HAL_PCD_MspInit+0xd8>)
 8003084:	f000 fd98 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 800308a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308c:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 800308e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003092:	6353      	str	r3, [r2, #52]	@ 0x34
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	4b07      	ldr	r3, [pc, #28]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 800309e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a4:	4b04      	ldr	r3, [pc, #16]	@ (80030b8 <HAL_PCD_MspInit+0xd4>)
 80030a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80030b0:	bf00      	nop
 80030b2:	3760      	adds	r7, #96	@ 0x60
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020000 	.word	0x40020000

080030c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030c4:	bf00      	nop
 80030c6:	e7fd      	b.n	80030c4 <NMI_Handler+0x4>

080030c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <HardFault_Handler+0x4>

080030d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <MemManage_Handler+0x4>

080030d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <BusFault_Handler+0x4>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <UsageFault_Handler+0x4>

080030e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003116:	f000 f959 	bl	80033cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  ms_interrupt();
 800311a:	f7ff fbc9 	bl	80028b0 <ms_interrupt>

  /* USER CODE END SysTick_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}

08003122 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  return 1;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <_kill>:

int _kill(int pid, int sig)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800313c:	f006 fca0 	bl	8009a80 <__errno>
 8003140:	4603      	mov	r3, r0
 8003142:	2216      	movs	r2, #22
 8003144:	601a      	str	r2, [r3, #0]
  return -1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <_exit>:

void _exit (int status)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800315a:	f04f 31ff 	mov.w	r1, #4294967295
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffe7 	bl	8003132 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <_exit+0x12>

08003168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e00a      	b.n	8003190 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800317a:	f3af 8000 	nop.w
 800317e:	4601      	mov	r1, r0
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	60ba      	str	r2, [r7, #8]
 8003186:	b2ca      	uxtb	r2, r1
 8003188:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3301      	adds	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	dbf0      	blt.n	800317a <_read+0x12>
  }

  return len;
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e009      	b.n	80031c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	60ba      	str	r2, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3301      	adds	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbf1      	blt.n	80031b4 <_write+0x12>
  }
  return len;
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_close>:

int _close(int file)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003202:	605a      	str	r2, [r3, #4]
  return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_isatty>:

int _isatty(int file)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <_sbrk+0x5c>)
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <_sbrk+0x60>)
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <_sbrk+0x64>)
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <_sbrk+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003266:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003274:	f006 fc04 	bl	8009a80 <__errno>
 8003278:	4603      	mov	r3, r0
 800327a:	220c      	movs	r2, #12
 800327c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e009      	b.n	8003298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003284:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328a:	4b07      	ldr	r3, [pc, #28]	@ (80032a8 <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	4a05      	ldr	r2, [pc, #20]	@ (80032a8 <_sbrk+0x64>)
 8003294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20040000 	.word	0x20040000
 80032a4:	00000400 	.word	0x00000400
 80032a8:	20000d94 	.word	0x20000d94
 80032ac:	20000f08 	.word	0x20000f08

080032b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <SystemInit+0x20>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	4a05      	ldr	r2, [pc, #20]	@ (80032d0 <SystemInit+0x20>)
 80032bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800330c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032d8:	f7ff ffea 	bl	80032b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032dc:	480c      	ldr	r0, [pc, #48]	@ (8003310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032de:	490d      	ldr	r1, [pc, #52]	@ (8003314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e4:	e002      	b.n	80032ec <LoopCopyDataInit>

080032e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ea:	3304      	adds	r3, #4

080032ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032f0:	d3f9      	bcc.n	80032e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032f2:	4a0a      	ldr	r2, [pc, #40]	@ (800331c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f8:	e001      	b.n	80032fe <LoopFillZerobss>

080032fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032fc:	3204      	adds	r2, #4

080032fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003300:	d3fb      	bcc.n	80032fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003302:	f006 fbc3 	bl	8009a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7ff fb5f 	bl	80029c8 <main>
  bx  lr    
 800330a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800330c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003314:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8003318:	0800d798 	.word	0x0800d798
  ldr r2, =_sbss
 800331c:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003320:	20000f08 	.word	0x20000f08

08003324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC_IRQHandler>
	...

08003328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_Init+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0d      	ldr	r2, [pc, #52]	@ (8003368 <HAL_Init+0x40>)
 8003332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <HAL_Init+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <HAL_Init+0x40>)
 800333e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003344:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <HAL_Init+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a07      	ldr	r2, [pc, #28]	@ (8003368 <HAL_Init+0x40>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800334e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003350:	2003      	movs	r0, #3
 8003352:	f000 f94f 	bl	80035f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003356:	2000      	movs	r0, #0
 8003358:	f000 f808 	bl	800336c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800335c:	f7ff fd56 	bl	8002e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00

0800336c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003374:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_InitTick+0x54>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <HAL_InitTick+0x58>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003382:	fbb3 f3f1 	udiv	r3, r3, r1
 8003386:	fbb2 f3f3 	udiv	r3, r2, r3
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f967 	bl	800365e <HAL_SYSTICK_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e00e      	b.n	80033b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	d80a      	bhi.n	80033b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a0:	2200      	movs	r2, #0
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295
 80033a8:	f000 f92f 	bl	800360a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033ac:	4a06      	ldr	r2, [pc, #24]	@ (80033c8 <HAL_InitTick+0x5c>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200000ac 	.word	0x200000ac
 80033c4:	200000b4 	.word	0x200000b4
 80033c8:	200000b0 	.word	0x200000b0

080033cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_IncTick+0x20>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_IncTick+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	@ (80033f0 <HAL_IncTick+0x24>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200000b4 	.word	0x200000b4
 80033f0:	20000d98 	.word	0x20000d98

080033f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_GetTick+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000d98 	.word	0x20000d98

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff ffee 	bl	80033f4 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d005      	beq.n	8003432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003426:	4b0a      	ldr	r3, [pc, #40]	@ (8003450 <HAL_Delay+0x44>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003432:	bf00      	nop
 8003434:	f7ff ffde 	bl	80033f4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f7      	bhi.n	8003434 <HAL_Delay+0x28>
  {
  }
}
 8003444:	bf00      	nop
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200000b4 	.word	0x200000b4

08003454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003464:	4b0c      	ldr	r3, [pc, #48]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003470:	4013      	ands	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800347c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003486:	4a04      	ldr	r2, [pc, #16]	@ (8003498 <__NVIC_SetPriorityGrouping+0x44>)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	60d3      	str	r3, [r2, #12]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a0:	4b04      	ldr	r3, [pc, #16]	@ (80034b4 <__NVIC_GetPriorityGrouping+0x18>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0307 	and.w	r3, r3, #7
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0b      	blt.n	80034e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	@ (80034f0 <__NVIC_EnableIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	6039      	str	r1, [r7, #0]
 80034fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003504:	2b00      	cmp	r3, #0
 8003506:	db0a      	blt.n	800351e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2da      	uxtb	r2, r3
 800350c:	490c      	ldr	r1, [pc, #48]	@ (8003540 <__NVIC_SetPriority+0x4c>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	0112      	lsls	r2, r2, #4
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	440b      	add	r3, r1
 8003518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800351c:	e00a      	b.n	8003534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4908      	ldr	r1, [pc, #32]	@ (8003544 <__NVIC_SetPriority+0x50>)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	3b04      	subs	r3, #4
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	440b      	add	r3, r1
 8003532:	761a      	strb	r2, [r3, #24]
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	e000e100 	.word	0xe000e100
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003548:	b480      	push	{r7}
 800354a:	b089      	sub	sp, #36	@ 0x24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f1c3 0307 	rsb	r3, r3, #7
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf28      	it	cs
 8003566:	2304      	movcs	r3, #4
 8003568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3304      	adds	r3, #4
 800356e:	2b06      	cmp	r3, #6
 8003570:	d902      	bls.n	8003578 <NVIC_EncodePriority+0x30>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3b03      	subs	r3, #3
 8003576:	e000      	b.n	800357a <NVIC_EncodePriority+0x32>
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	401a      	ands	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003590:	f04f 31ff 	mov.w	r1, #4294967295
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	43d9      	mvns	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	4313      	orrs	r3, r2
         );
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3724      	adds	r7, #36	@ 0x24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c0:	d301      	bcc.n	80035c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00f      	b.n	80035e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c6:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <SysTick_Config+0x40>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ce:	210f      	movs	r1, #15
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f7ff ff8e 	bl	80034f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d8:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <SysTick_Config+0x40>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <SysTick_Config+0x40>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000e010 	.word	0xe000e010

080035f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff29 	bl	8003454 <__NVIC_SetPriorityGrouping>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361c:	f7ff ff3e 	bl	800349c <__NVIC_GetPriorityGrouping>
 8003620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ff8e 	bl	8003548 <NVIC_EncodePriority>
 800362c:	4602      	mov	r2, r0
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff5d 	bl	80034f4 <__NVIC_SetPriority>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff31 	bl	80034b8 <__NVIC_EnableIRQ>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffa2 	bl	80035b0 <SysTick_Config>
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff feb6 	bl	80033f4 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d008      	beq.n	80036a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2280      	movs	r2, #128	@ 0x80
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e052      	b.n	800374e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0216 	bic.w	r2, r2, #22
 80036b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d103      	bne.n	80036d8 <HAL_DMA_Abort+0x62>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0208 	bic.w	r2, r2, #8
 80036e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f8:	e013      	b.n	8003722 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fa:	f7ff fe7b 	bl	80033f4 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b05      	cmp	r3, #5
 8003706:	d90c      	bls.n	8003722 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e015      	b.n	800374e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e4      	bne.n	80036fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	223f      	movs	r2, #63	@ 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2280      	movs	r2, #128	@ 0x80
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e00c      	b.n	800378e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2205      	movs	r2, #5
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037ae:	4b23      	ldr	r3, [pc, #140]	@ (800383c <HAL_FLASH_Program+0xa0>)
 80037b0:	7e1b      	ldrb	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_FLASH_Program+0x1e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e03b      	b.n	8003832 <HAL_FLASH_Program+0x96>
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_FLASH_Program+0xa0>)
 80037bc:	2201      	movs	r2, #1
 80037be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037c0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80037c4:	f000 f870 	bl	80038a8 <FLASH_WaitForLastOperation>
 80037c8:	4603      	mov	r3, r0
 80037ca:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d12b      	bne.n	800382a <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80037d8:	783b      	ldrb	r3, [r7, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	68b8      	ldr	r0, [r7, #8]
 80037de:	f000 f91b 	bl	8003a18 <FLASH_Program_Byte>
 80037e2:	e016      	b.n	8003812 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d105      	bne.n	80037f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80037ea:	883b      	ldrh	r3, [r7, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	68b8      	ldr	r0, [r7, #8]
 80037f0:	f000 f8ee 	bl	80039d0 <FLASH_Program_HalfWord>
 80037f4:	e00d      	b.n	8003812 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d105      	bne.n	8003808 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4619      	mov	r1, r3
 8003800:	68b8      	ldr	r0, [r7, #8]
 8003802:	f000 f8c3 	bl	800398c <FLASH_Program_Word>
 8003806:	e004      	b.n	8003812 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	f000 f88b 	bl	8003928 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003812:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003816:	f000 f847 	bl	80038a8 <FLASH_WaitForLastOperation>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800381e:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <HAL_FLASH_Program+0xa4>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <HAL_FLASH_Program+0xa4>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800382a:	4b04      	ldr	r3, [pc, #16]	@ (800383c <HAL_FLASH_Program+0xa0>)
 800382c:	2200      	movs	r2, #0
 800382e:	761a      	strb	r2, [r3, #24]

  return status;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000d9c 	.word	0x20000d9c
 8003840:	40023c00 	.word	0x40023c00

08003844 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <HAL_FLASH_Unlock+0x38>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0b      	bge.n	800386e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003856:	4b09      	ldr	r3, [pc, #36]	@ (800387c <HAL_FLASH_Unlock+0x38>)
 8003858:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <HAL_FLASH_Unlock+0x3c>)
 800385a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800385c:	4b07      	ldr	r3, [pc, #28]	@ (800387c <HAL_FLASH_Unlock+0x38>)
 800385e:	4a09      	ldr	r2, [pc, #36]	@ (8003884 <HAL_FLASH_Unlock+0x40>)
 8003860:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003862:	4b06      	ldr	r3, [pc, #24]	@ (800387c <HAL_FLASH_Unlock+0x38>)
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	da01      	bge.n	800386e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800386e:	79fb      	ldrb	r3, [r7, #7]
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40023c00 	.word	0x40023c00
 8003880:	45670123 	.word	0x45670123
 8003884:	cdef89ab 	.word	0xcdef89ab

08003888 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_FLASH_Lock+0x1c>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_FLASH_Lock+0x1c>)
 8003892:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003896:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40023c00 	.word	0x40023c00

080038a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003920 <FLASH_WaitForLastOperation+0x78>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80038ba:	f7ff fd9b 	bl	80033f4 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80038c0:	e010      	b.n	80038e4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d00c      	beq.n	80038e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <FLASH_WaitForLastOperation+0x38>
 80038d0:	f7ff fd90 	bl	80033f4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d201      	bcs.n	80038e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e019      	b.n	8003918 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <FLASH_WaitForLastOperation+0x7c>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e8      	bne.n	80038c2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <FLASH_WaitForLastOperation+0x7c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <FLASH_WaitForLastOperation+0x7c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003902:	4b08      	ldr	r3, [pc, #32]	@ (8003924 <FLASH_WaitForLastOperation+0x7c>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800390e:	f000 f8a5 	bl	8003a5c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003916:	2300      	movs	r3, #0

}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000d9c 	.word	0x20000d9c
 8003924:	40023c00 	.word	0x40023c00

08003928 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 800393a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4a10      	ldr	r2, [pc, #64]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 8003946:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800394a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800394c:	4b0e      	ldr	r3, [pc, #56]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <FLASH_Program_DoubleWord+0x60>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800395e:	f3bf 8f6f 	isb	sy
}
 8003962:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003964:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	000a      	movs	r2, r1
 8003972:	2300      	movs	r3, #0
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	3104      	adds	r1, #4
 8003978:	4613      	mov	r3, r2
 800397a:	600b      	str	r3, [r1, #0]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40023c00 	.word	0x40023c00

0800398c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <FLASH_Program_Word+0x40>)
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <FLASH_Program_Word+0x40>)
 800399c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <FLASH_Program_Word+0x40>)
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <FLASH_Program_Word+0x40>)
 80039a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <FLASH_Program_Word+0x40>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <FLASH_Program_Word+0x40>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80039dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80039f4:	4b07      	ldr	r3, [pc, #28]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4a06      	ldr	r2, [pc, #24]	@ (8003a14 <FLASH_Program_HalfWord+0x44>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	801a      	strh	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40023c00 	.word	0x40023c00

08003a18 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	4a0b      	ldr	r2, [pc, #44]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a32:	4a09      	ldr	r2, [pc, #36]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a38:	4b07      	ldr	r3, [pc, #28]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	@ (8003a58 <FLASH_Program_Byte+0x40>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	701a      	strb	r2, [r3, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023c00 	.word	0x40023c00

08003a5c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003a60:	4b2f      	ldr	r3, [pc, #188]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f043 0310 	orr.w	r3, r3, #16
 8003a74:	4a2b      	ldr	r2, [pc, #172]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003a76:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003a78:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003a7e:	4b28      	ldr	r3, [pc, #160]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003a8a:	4b26      	ldr	r3, [pc, #152]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	4a24      	ldr	r2, [pc, #144]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003a94:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003a96:	4b22      	ldr	r3, [pc, #136]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003a98:	2220      	movs	r2, #32
 8003a9a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003a9c:	4b20      	ldr	r3, [pc, #128]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003ab2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003ac6:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	4a15      	ldr	r2, [pc, #84]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003ad0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003ad2:	4b13      	ldr	r3, [pc, #76]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003ad4:	2280      	movs	r2, #128	@ 0x80
 8003ad6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003aee:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003af6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003af8:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	4a05      	ldr	r2, [pc, #20]	@ (8003b24 <FLASH_SetErrorCode+0xc8>)
 8003b0e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <FLASH_SetErrorCode+0xc4>)
 8003b12:	2202      	movs	r2, #2
 8003b14:	60da      	str	r2, [r3, #12]
  }
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	40023c00 	.word	0x40023c00
 8003b24:	20000d9c 	.word	0x20000d9c

08003b28 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e010      	b.n	8003b66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d103      	bne.n	8003b52 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e009      	b.n	8003b66 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d103      	bne.n	8003b60 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003b58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e002      	b.n	8003b66 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003b60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b66:	4b13      	ldr	r3, [pc, #76]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003b72:	4b10      	ldr	r3, [pc, #64]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b74:	691a      	ldr	r2, [r3, #16]
 8003b76:	490f      	ldr	r1, [pc, #60]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003b88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4313      	orrs	r3, r2
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	@ (8003bb4 <FLASH_Erase_Sector+0x8c>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba6:	6113      	str	r3, [r2, #16]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	@ 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	e165      	b.n	8003ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	f040 8154 	bne.w	8003e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d005      	beq.n	8003c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d130      	bne.n	8003c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	2203      	movs	r2, #3
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c40:	2201      	movs	r2, #1
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 0201 	and.w	r2, r3, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0303 	and.w	r3, r3, #3
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d017      	beq.n	8003ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d123      	bne.n	8003cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	08da      	lsrs	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3208      	adds	r2, #8
 8003cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	220f      	movs	r2, #15
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	08da      	lsrs	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3208      	adds	r2, #8
 8003cf6:	69b9      	ldr	r1, [r7, #24]
 8003cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0203 	and.w	r2, r3, #3
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80ae 	beq.w	8003e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb8 <HAL_GPIO_Init+0x300>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb8 <HAL_GPIO_Init+0x300>)
 8003d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb8 <HAL_GPIO_Init+0x300>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d5a:	4a58      	ldr	r2, [pc, #352]	@ (8003ebc <HAL_GPIO_Init+0x304>)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	3302      	adds	r3, #2
 8003d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	220f      	movs	r2, #15
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec0 <HAL_GPIO_Init+0x308>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d025      	beq.n	8003dd2 <HAL_GPIO_Init+0x21a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4e      	ldr	r2, [pc, #312]	@ (8003ec4 <HAL_GPIO_Init+0x30c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01f      	beq.n	8003dce <HAL_GPIO_Init+0x216>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec8 <HAL_GPIO_Init+0x310>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d019      	beq.n	8003dca <HAL_GPIO_Init+0x212>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4c      	ldr	r2, [pc, #304]	@ (8003ecc <HAL_GPIO_Init+0x314>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_Init+0x20e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ed0 <HAL_GPIO_Init+0x318>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <HAL_GPIO_Init+0x20a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed4 <HAL_GPIO_Init+0x31c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_Init+0x206>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a49      	ldr	r2, [pc, #292]	@ (8003ed8 <HAL_GPIO_Init+0x320>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_GPIO_Init+0x202>
 8003db6:	2306      	movs	r3, #6
 8003db8:	e00c      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dba:	2307      	movs	r3, #7
 8003dbc:	e00a      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dbe:	2305      	movs	r3, #5
 8003dc0:	e008      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dc2:	2304      	movs	r3, #4
 8003dc4:	e006      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e004      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x21c>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	f002 0203 	and.w	r2, r2, #3
 8003dda:	0092      	lsls	r2, r2, #2
 8003ddc:	4093      	lsls	r3, r2
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de4:	4935      	ldr	r1, [pc, #212]	@ (8003ebc <HAL_GPIO_Init+0x304>)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003df2:	4b3a      	ldr	r3, [pc, #232]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e16:	4a31      	ldr	r2, [pc, #196]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e40:	4a26      	ldr	r2, [pc, #152]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e46:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e70:	4b1a      	ldr	r3, [pc, #104]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e94:	4a11      	ldr	r2, [pc, #68]	@ (8003edc <HAL_GPIO_Init+0x324>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	2b0f      	cmp	r3, #15
 8003ea4:	f67f ae96 	bls.w	8003bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3724      	adds	r7, #36	@ 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40013800 	.word	0x40013800
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	40020400 	.word	0x40020400
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	40020c00 	.word	0x40020c00
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40021400 	.word	0x40021400
 8003ed8:	40021800 	.word	0x40021800
 8003edc:	40013c00 	.word	0x40013c00

08003ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
 8003eec:	4613      	mov	r3, r2
 8003eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef0:	787b      	ldrb	r3, [r7, #1]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003efc:	e003      	b.n	8003f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	041a      	lsls	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	619a      	str	r2, [r3, #24]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e12b      	b.n	800417e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fe ff8e 	bl	8002e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	@ 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0201 	bic.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f78:	f002 f8d0 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8003f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4a81      	ldr	r2, [pc, #516]	@ (8004188 <HAL_I2C_Init+0x274>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d807      	bhi.n	8003f98 <HAL_I2C_Init+0x84>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4a80      	ldr	r2, [pc, #512]	@ (800418c <HAL_I2C_Init+0x278>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	bf94      	ite	ls
 8003f90:	2301      	movls	r3, #1
 8003f92:	2300      	movhi	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e006      	b.n	8003fa6 <HAL_I2C_Init+0x92>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a7d      	ldr	r2, [pc, #500]	@ (8004190 <HAL_I2C_Init+0x27c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	bf94      	ite	ls
 8003fa0:	2301      	movls	r3, #1
 8003fa2:	2300      	movhi	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0e7      	b.n	800417e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a78      	ldr	r2, [pc, #480]	@ (8004194 <HAL_I2C_Init+0x280>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	0c9b      	lsrs	r3, r3, #18
 8003fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a6a      	ldr	r2, [pc, #424]	@ (8004188 <HAL_I2C_Init+0x274>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d802      	bhi.n	8003fe8 <HAL_I2C_Init+0xd4>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	e009      	b.n	8003ffc <HAL_I2C_Init+0xe8>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	4a69      	ldr	r2, [pc, #420]	@ (8004198 <HAL_I2C_Init+0x284>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	099b      	lsrs	r3, r3, #6
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	430b      	orrs	r3, r1
 8004002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800400e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	495c      	ldr	r1, [pc, #368]	@ (8004188 <HAL_I2C_Init+0x274>)
 8004018:	428b      	cmp	r3, r1
 800401a:	d819      	bhi.n	8004050 <HAL_I2C_Init+0x13c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1e59      	subs	r1, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	fbb1 f3f3 	udiv	r3, r1, r3
 800402a:	1c59      	adds	r1, r3, #1
 800402c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004030:	400b      	ands	r3, r1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_I2C_Init+0x138>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1e59      	subs	r1, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fbb1 f3f3 	udiv	r3, r1, r3
 8004044:	3301      	adds	r3, #1
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	e051      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 800404c:	2304      	movs	r3, #4
 800404e:	e04f      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <HAL_I2C_Init+0x168>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e58      	subs	r0, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	440b      	add	r3, r1
 8004066:	fbb0 f3f3 	udiv	r3, r0, r3
 800406a:	3301      	adds	r3, #1
 800406c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	e012      	b.n	80040a2 <HAL_I2C_Init+0x18e>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_Init+0x196>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e022      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10e      	bne.n	80040d0 <HAL_I2C_Init+0x1bc>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1e58      	subs	r0, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	440b      	add	r3, r1
 80040c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c4:	3301      	adds	r3, #1
 80040c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ce:	e00f      	b.n	80040f0 <HAL_I2C_Init+0x1dc>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	0099      	lsls	r1, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	6809      	ldr	r1, [r1, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800411e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6911      	ldr	r1, [r2, #16]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	430b      	orrs	r3, r1
 8004132:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	000186a0 	.word	0x000186a0
 800418c:	001e847f 	.word	0x001e847f
 8004190:	003d08ff 	.word	0x003d08ff
 8004194:	431bde83 	.word	0x431bde83
 8004198:	10624dd3 	.word	0x10624dd3

0800419c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	461a      	mov	r2, r3
 80041a8:	460b      	mov	r3, r1
 80041aa:	817b      	strh	r3, [r7, #10]
 80041ac:	4613      	mov	r3, r2
 80041ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff f920 	bl	80033f4 <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 80e0 	bne.w	8004384 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2319      	movs	r3, #25
 80041ca:	2201      	movs	r2, #1
 80041cc:	4970      	ldr	r1, [pc, #448]	@ (8004390 <HAL_I2C_Master_Transmit+0x1f4>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f001 fa3c 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
 80041dc:	e0d3      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_I2C_Master_Transmit+0x50>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0cc      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d007      	beq.n	8004212 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004220:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2221      	movs	r2, #33	@ 0x21
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2210      	movs	r2, #16
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a50      	ldr	r2, [pc, #320]	@ (8004394 <HAL_I2C_Master_Transmit+0x1f8>)
 8004252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004254:	8979      	ldrh	r1, [r7, #10]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	6a3a      	ldr	r2, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 ff28 	bl	80050b0 <I2C_MasterRequestWrite>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e08d      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004280:	e066      	b.n	8004350 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	6a39      	ldr	r1, [r7, #32]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f001 fafa 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	2b04      	cmp	r3, #4
 8004298:	d107      	bne.n	80042aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11b      	bne.n	8004324 <HAL_I2C_Master_Transmit+0x188>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6a39      	ldr	r1, [r7, #32]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 faf1 	bl	8005910 <I2C_WaitOnBTFFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00d      	beq.n	8004350 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	2b04      	cmp	r3, #4
 800433a:	d107      	bne.n	800434c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e01a      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	d194      	bne.n	8004282 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	00100002 	.word	0x00100002
 8004394:	ffff0000 	.word	0xffff0000

08004398 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	@ 0x30
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	460b      	mov	r3, r1
 80043a6:	817b      	strh	r3, [r7, #10]
 80043a8:	4613      	mov	r3, r2
 80043aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7ff f822 	bl	80033f4 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	f040 8217 	bne.w	80047ee <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2319      	movs	r3, #25
 80043c6:	2201      	movs	r2, #1
 80043c8:	497c      	ldr	r1, [pc, #496]	@ (80045bc <HAL_I2C_Master_Receive+0x224>)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f001 f93e 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
 80043d8:	e20a      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_I2C_Master_Receive+0x50>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e203      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d007      	beq.n	800440e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0201 	orr.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800441c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2222      	movs	r2, #34	@ 0x22
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2210      	movs	r2, #16
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	893a      	ldrh	r2, [r7, #8]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a5c      	ldr	r2, [pc, #368]	@ (80045c0 <HAL_I2C_Master_Receive+0x228>)
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004450:	8979      	ldrh	r1, [r7, #10]
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 feac 	bl	80051b4 <I2C_MasterRequestRead>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1c4      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	d113      	bne.n	8004496 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	623b      	str	r3, [r7, #32]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	e198      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b01      	cmp	r3, #1
 800449c:	d11b      	bne.n	80044d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e178      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d11b      	bne.n	8004516 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	e158      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004524:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800453c:	e144      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004542:	2b03      	cmp	r3, #3
 8004544:	f200 80f1 	bhi.w	800472a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454c:	2b01      	cmp	r3, #1
 800454e:	d123      	bne.n	8004598 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004552:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f001 fa23 	bl	80059a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e145      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004596:	e117      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459c:	2b02      	cmp	r3, #2
 800459e:	d14e      	bne.n	800463e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	2200      	movs	r2, #0
 80045a8:	4906      	ldr	r1, [pc, #24]	@ (80045c4 <HAL_I2C_Master_Receive+0x22c>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 f84e 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e11a      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
 80045ba:	bf00      	nop
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000
 80045c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800463c:	e0c4      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	496c      	ldr	r1, [pc, #432]	@ (80047f8 <HAL_I2C_Master_Receive+0x460>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 ffff 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0cb      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	2200      	movs	r2, #0
 80046a2:	4955      	ldr	r1, [pc, #340]	@ (80047f8 <HAL_I2C_Master_Receive+0x460>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 ffd1 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e09d      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004728:	e04e      	b.n	80047c8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f001 f936 	bl	80059a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e058      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d124      	bne.n	80047c8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004794:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	1c5a      	adds	r2, r3, #1
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f47f aeb6 	bne.w	800453e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	e000      	b.n	80047f0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
  }
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3728      	adds	r7, #40	@ 0x28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	00010004 	.word	0x00010004

080047fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004816:	f7fe fded 	bl	80033f4 <HAL_GetTick>
 800481a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	f040 80d9 	bne.w	80049dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2319      	movs	r3, #25
 8004830:	2201      	movs	r2, #1
 8004832:	496d      	ldr	r1, [pc, #436]	@ (80049e8 <HAL_I2C_Mem_Write+0x1ec>)
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 ff09 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	e0cc      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Mem_Write+0x56>
 800484e:	2302      	movs	r3, #2
 8004850:	e0c5      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d007      	beq.n	8004878 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2221      	movs	r2, #33	@ 0x21
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2240      	movs	r2, #64	@ 0x40
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a4d      	ldr	r2, [pc, #308]	@ (80049ec <HAL_I2C_Mem_Write+0x1f0>)
 80048b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	8979      	ldrh	r1, [r7, #10]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4603      	mov	r3, r0
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 fd40 	bl	8005350 <I2C_RequestMemoryWrite>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d052      	beq.n	800497c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e081      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 ffce 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d107      	bne.n	8004902 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e06b      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d11b      	bne.n	800497c <HAL_I2C_Mem_Write+0x180>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004948:	2b00      	cmp	r3, #0
 800494a:	d017      	beq.n	800497c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1aa      	bne.n	80048da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 ffc1 	bl	8005910 <I2C_WaitOnBTFFlagUntilTimeout>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00d      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2b04      	cmp	r3, #4
 800499a:	d107      	bne.n	80049ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e016      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	00100002 	.word	0x00100002
 80049ec:	ffff0000 	.word	0xffff0000

080049f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08c      	sub	sp, #48	@ 0x30
 80049f4:	af02      	add	r7, sp, #8
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	461a      	mov	r2, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	817b      	strh	r3, [r7, #10]
 8004a02:	460b      	mov	r3, r1
 8004a04:	813b      	strh	r3, [r7, #8]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a0a:	f7fe fcf3 	bl	80033f4 <HAL_GetTick>
 8004a0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	f040 8214 	bne.w	8004e46 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2319      	movs	r3, #25
 8004a24:	2201      	movs	r2, #1
 8004a26:	497b      	ldr	r1, [pc, #492]	@ (8004c14 <HAL_I2C_Mem_Read+0x224>)
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fe0f 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
 8004a36:	e207      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2C_Mem_Read+0x56>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e200      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d007      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2222      	movs	r2, #34	@ 0x22
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2240      	movs	r2, #64	@ 0x40
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8004c18 <HAL_I2C_Mem_Read+0x228>)
 8004aac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004aae:	88f8      	ldrh	r0, [r7, #6]
 8004ab0:	893a      	ldrh	r2, [r7, #8]
 8004ab2:	8979      	ldrh	r1, [r7, #10]
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	9301      	str	r3, [sp, #4]
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fcdc 	bl	800547c <I2C_RequestMemoryRead>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e1bc      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d113      	bne.n	8004afe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e190      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d11b      	bne.n	8004b3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e170      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d11b      	bne.n	8004b7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b66:	2300      	movs	r3, #0
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	e150      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b94:	e144      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	f200 80f1 	bhi.w	8004d82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d123      	bne.n	8004bf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004baa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fef7 	bl	80059a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e145      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bee:	e117      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d14e      	bne.n	8004c96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4906      	ldr	r1, [pc, #24]	@ (8004c1c <HAL_I2C_Mem_Read+0x22c>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fd22 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e11a      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
 8004c12:	bf00      	nop
 8004c14:	00100002 	.word	0x00100002
 8004c18:	ffff0000 	.word	0xffff0000
 8004c1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c94:	e0c4      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	496c      	ldr	r1, [pc, #432]	@ (8004e50 <HAL_I2C_Mem_Read+0x460>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fcd3 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0cb      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4955      	ldr	r1, [pc, #340]	@ (8004e50 <HAL_I2C_Mem_Read+0x460>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fca5 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09d      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d80:	e04e      	b.n	8004e20 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fe0a 	bl	80059a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e058      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d124      	bne.n	8004e20 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f47f aeb6 	bne.w	8004b96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	e000      	b.n	8004e48 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e46:	2302      	movs	r3, #2
  }
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3728      	adds	r7, #40	@ 0x28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	00010004 	.word	0x00010004

08004e54 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	@ 0x28
 8004e58:	af02      	add	r7, sp, #8
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	607a      	str	r2, [r7, #4]
 8004e5e:	603b      	str	r3, [r7, #0]
 8004e60:	460b      	mov	r3, r1
 8004e62:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e64:	f7fe fac6 	bl	80033f4 <HAL_GetTick>
 8004e68:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	f040 8111 	bne.w	800509e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2319      	movs	r3, #25
 8004e82:	2201      	movs	r2, #1
 8004e84:	4988      	ldr	r1, [pc, #544]	@ (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fbe0 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e92:	2302      	movs	r3, #2
 8004e94:	e104      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_IsDeviceReady+0x50>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0fd      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d007      	beq.n	8004eca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2224      	movs	r2, #36	@ 0x24
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a70      	ldr	r2, [pc, #448]	@ (80050ac <HAL_I2C_IsDeviceReady+0x258>)
 8004eec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004efc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fb9e 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f24:	d103      	bne.n	8004f2e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b6      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f32:	897b      	ldrh	r3, [r7, #10]
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f40:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f42:	f7fe fa57 	bl	80033f4 <HAL_GetTick>
 8004f46:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6c:	bf0c      	ite	eq
 8004f6e:	2301      	moveq	r3, #1
 8004f70:	2300      	movne	r3, #0
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f76:	e025      	b.n	8004fc4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f78:	f7fe fa3c 	bl	80033f4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d302      	bcc.n	8004f8e <HAL_I2C_IsDeviceReady+0x13a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	22a0      	movs	r2, #160	@ 0xa0
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fba:	bf0c      	ite	eq
 8004fbc:	2301      	moveq	r3, #1
 8004fbe:	2300      	movne	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fce:	d005      	beq.n	8004fdc <HAL_I2C_IsDeviceReady+0x188>
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <HAL_I2C_IsDeviceReady+0x188>
 8004fd6:	7dbb      	ldrb	r3, [r7, #22]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0cd      	beq.n	8004f78 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d129      	bne.n	8005046 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005000:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2319      	movs	r3, #25
 800501e:	2201      	movs	r2, #1
 8005020:	4921      	ldr	r1, [pc, #132]	@ (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fb12 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e036      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e02c      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005054:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800505e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	2319      	movs	r3, #25
 8005066:	2201      	movs	r2, #1
 8005068:	490f      	ldr	r1, [pc, #60]	@ (80050a8 <HAL_I2C_IsDeviceReady+0x254>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 faee 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e012      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3301      	adds	r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	f4ff af32 	bcc.w	8004eee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	00100002 	.word	0x00100002
 80050ac:	ffff0000 	.word	0xffff0000

080050b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	460b      	mov	r3, r1
 80050be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d006      	beq.n	80050da <I2C_MasterRequestWrite+0x2a>
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <I2C_MasterRequestWrite+0x2a>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050d8:	d108      	bne.n	80050ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e00b      	b.n	8005104 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	2b12      	cmp	r3, #18
 80050f2:	d107      	bne.n	8005104 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005102:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fa9b 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800512a:	d103      	bne.n	8005134 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e035      	b.n	80051a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005140:	d108      	bne.n	8005154 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005142:	897b      	ldrh	r3, [r7, #10]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005150:	611a      	str	r2, [r3, #16]
 8005152:	e01b      	b.n	800518c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005154:	897b      	ldrh	r3, [r7, #10]
 8005156:	11db      	asrs	r3, r3, #7
 8005158:	b2db      	uxtb	r3, r3
 800515a:	f003 0306 	and.w	r3, r3, #6
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f063 030f 	orn	r3, r3, #15
 8005164:	b2da      	uxtb	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	490e      	ldr	r1, [pc, #56]	@ (80051ac <I2C_MasterRequestWrite+0xfc>)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fae4 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e010      	b.n	80051a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005182:	897b      	ldrh	r3, [r7, #10]
 8005184:	b2da      	uxtb	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4907      	ldr	r1, [pc, #28]	@ (80051b0 <I2C_MasterRequestWrite+0x100>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fad4 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	00010008 	.word	0x00010008
 80051b0:	00010002 	.word	0x00010002

080051b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	460b      	mov	r3, r1
 80051c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d006      	beq.n	80051ee <I2C_MasterRequestRead+0x3a>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d003      	beq.n	80051ee <I2C_MasterRequestRead+0x3a>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051ec:	d108      	bne.n	8005200 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e00b      	b.n	8005218 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	2b11      	cmp	r3, #17
 8005206:	d107      	bne.n	8005218 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005216:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 fa11 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00d      	beq.n	800524c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800523a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523e:	d103      	bne.n	8005248 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e079      	b.n	8005340 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005254:	d108      	bne.n	8005268 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005256:	897b      	ldrh	r3, [r7, #10]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f043 0301 	orr.w	r3, r3, #1
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	611a      	str	r2, [r3, #16]
 8005266:	e05f      	b.n	8005328 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005268:	897b      	ldrh	r3, [r7, #10]
 800526a:	11db      	asrs	r3, r3, #7
 800526c:	b2db      	uxtb	r3, r3
 800526e:	f003 0306 	and.w	r3, r3, #6
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f063 030f 	orn	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4930      	ldr	r1, [pc, #192]	@ (8005348 <I2C_MasterRequestRead+0x194>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fa5a 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e054      	b.n	8005340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	4929      	ldr	r1, [pc, #164]	@ (800534c <I2C_MasterRequestRead+0x198>)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fa4a 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e044      	b.n	8005340 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	613b      	str	r3, [r7, #16]
 80052ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 f9af 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005302:	d103      	bne.n	800530c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800530a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e017      	b.n	8005340 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005310:	897b      	ldrh	r3, [r7, #10]
 8005312:	11db      	asrs	r3, r3, #7
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0306 	and.w	r3, r3, #6
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f063 030e 	orn	r3, r3, #14
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4907      	ldr	r1, [pc, #28]	@ (800534c <I2C_MasterRequestRead+0x198>)
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fa06 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	00010008 	.word	0x00010008
 800534c:	00010002 	.word	0x00010002

08005350 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	4608      	mov	r0, r1
 800535a:	4611      	mov	r1, r2
 800535c:	461a      	mov	r2, r3
 800535e:	4603      	mov	r3, r0
 8005360:	817b      	strh	r3, [r7, #10]
 8005362:	460b      	mov	r3, r1
 8005364:	813b      	strh	r3, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005378:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	2200      	movs	r2, #0
 8005382:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f960 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00d      	beq.n	80053ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a0:	d103      	bne.n	80053aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e05f      	b.n	800546e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	6a3a      	ldr	r2, [r7, #32]
 80053c2:	492d      	ldr	r1, [pc, #180]	@ (8005478 <I2C_RequestMemoryWrite+0x128>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f9bb 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e04c      	b.n	800546e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ec:	6a39      	ldr	r1, [r7, #32]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 fa46 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d107      	bne.n	8005412 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005410:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e02b      	b.n	800546e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800541c:	893b      	ldrh	r3, [r7, #8]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	e021      	b.n	800546c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	b29b      	uxth	r3, r3
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005438:	6a39      	ldr	r1, [r7, #32]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fa20 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544a:	2b04      	cmp	r3, #4
 800544c:	d107      	bne.n	800545e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e005      	b.n	800546e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005462:	893b      	ldrh	r3, [r7, #8]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	00010002 	.word	0x00010002

0800547c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af02      	add	r7, sp, #8
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	461a      	mov	r2, r3
 800548a:	4603      	mov	r3, r0
 800548c:	817b      	strh	r3, [r7, #10]
 800548e:	460b      	mov	r3, r1
 8005490:	813b      	strh	r3, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	2200      	movs	r2, #0
 80054be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 f8c2 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054dc:	d103      	bne.n	80054e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e0aa      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ea:	897b      	ldrh	r3, [r7, #10]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	4952      	ldr	r1, [pc, #328]	@ (8005648 <I2C_RequestMemoryRead+0x1cc>)
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f91d 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e097      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005528:	6a39      	ldr	r1, [r7, #32]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f9a8 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	2b04      	cmp	r3, #4
 800553c:	d107      	bne.n	800554e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e076      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d105      	bne.n	8005564 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005558:	893b      	ldrh	r3, [r7, #8]
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	611a      	str	r2, [r3, #16]
 8005562:	e021      	b.n	80055a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005564:	893b      	ldrh	r3, [r7, #8]
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	b29b      	uxth	r3, r3
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	6a39      	ldr	r1, [r7, #32]
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f982 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00d      	beq.n	800559e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005586:	2b04      	cmp	r3, #4
 8005588:	d107      	bne.n	800559a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e050      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800559e:	893b      	ldrh	r3, [r7, #8]
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055aa:	6a39      	ldr	r1, [r7, #32]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f967 	bl	8005880 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d107      	bne.n	80055d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e035      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f82b 	bl	800564c <I2C_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00d      	beq.n	8005618 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800560a:	d103      	bne.n	8005614 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e013      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005618:	897b      	ldrh	r3, [r7, #10]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	4906      	ldr	r1, [pc, #24]	@ (8005648 <I2C_RequestMemoryRead+0x1cc>)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f886 	bl	8005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	00010002 	.word	0x00010002

0800564c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	4613      	mov	r3, r2
 800565a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800565c:	e048      	b.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005664:	d044      	beq.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005666:	f7fd fec5 	bl	80033f4 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d302      	bcc.n	800567c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d139      	bne.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10d      	bne.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	43da      	mvns	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	bf0c      	ite	eq
 8005698:	2301      	moveq	r3, #1
 800569a:	2300      	movne	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	e00c      	b.n	80056bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	43da      	mvns	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d116      	bne.n	80056f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e023      	b.n	8005738 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	0c1b      	lsrs	r3, r3, #16
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d10d      	bne.n	8005716 <I2C_WaitOnFlagUntilTimeout+0xca>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	43da      	mvns	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	e00c      	b.n	8005730 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	43da      	mvns	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4013      	ands	r3, r2
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf0c      	ite	eq
 8005728:	2301      	moveq	r3, #1
 800572a:	2300      	movne	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	429a      	cmp	r2, r3
 8005734:	d093      	beq.n	800565e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800574e:	e071      	b.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d123      	bne.n	80057a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800576e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005778:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005794:	f043 0204 	orr.w	r2, r3, #4
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e067      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d041      	beq.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b0:	f7fd fe20 	bl	80033f4 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d302      	bcc.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d136      	bne.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10c      	bne.n	80057ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4013      	ands	r3, r2
 80057dc:	b29b      	uxth	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e00b      	b.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	43da      	mvns	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d016      	beq.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	f043 0220 	orr.w	r2, r3, #32
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e021      	b.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10c      	bne.n	8005858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	43da      	mvns	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4013      	ands	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	bf14      	ite	ne
 8005850:	2301      	movne	r3, #1
 8005852:	2300      	moveq	r3, #0
 8005854:	b2db      	uxtb	r3, r3
 8005856:	e00b      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	43da      	mvns	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf14      	ite	ne
 800586a:	2301      	movne	r3, #1
 800586c:	2300      	moveq	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f47f af6d 	bne.w	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800588c:	e034      	b.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f8e3 	bl	8005a5a <I2C_IsAcknowledgeFailed>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e034      	b.n	8005908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d028      	beq.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7fd fda5 	bl	80033f4 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11d      	bne.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d016      	beq.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e007      	b.n	8005908 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d1c3      	bne.n	800588e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800591c:	e034      	b.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f89b 	bl	8005a5a <I2C_IsAcknowledgeFailed>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e034      	b.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d028      	beq.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005936:	f7fd fd5d 	bl	80033f4 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	d302      	bcc.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11d      	bne.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d016      	beq.n	8005988 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	f043 0220 	orr.w	r2, r3, #32
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e007      	b.n	8005998 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b04      	cmp	r3, #4
 8005994:	d1c3      	bne.n	800591e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059ac:	e049      	b.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b10      	cmp	r3, #16
 80059ba:	d119      	bne.n	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0210 	mvn.w	r2, #16
 80059c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e030      	b.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f0:	f7fd fd00 	bl	80033f4 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d302      	bcc.n	8005a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d11d      	bne.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a10:	2b40      	cmp	r3, #64	@ 0x40
 8005a12:	d016      	beq.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e007      	b.n	8005a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b40      	cmp	r3, #64	@ 0x40
 8005a4e:	d1ae      	bne.n	80059ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a70:	d11b      	bne.n	8005aaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	f043 0204 	orr.w	r2, r3, #4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e108      	b.n	8005cdc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7fd fa7d 	bl	8002fe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2203      	movs	r2, #3
 8005aee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005af8:	d102      	bne.n	8005b00 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f002 f873 	bl	8007bf0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	7c1a      	ldrb	r2, [r3, #16]
 8005b12:	f88d 2000 	strb.w	r2, [sp]
 8005b16:	3304      	adds	r3, #4
 8005b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b1a:	f002 f805 	bl	8007b28 <USB_CoreInit>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e0d5      	b.n	8005cdc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2100      	movs	r1, #0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 f86b 	bl	8007c12 <USB_SetCurrentMode>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0c6      	b.n	8005cdc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e04a      	b.n	8005bea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3315      	adds	r3, #21
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b68:	7bfa      	ldrb	r2, [r7, #15]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3314      	adds	r3, #20
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	b298      	uxth	r0, r3
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	332e      	adds	r3, #46	@ 0x2e
 8005b90:	4602      	mov	r2, r0
 8005b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ba8:	7bfa      	ldrb	r2, [r7, #15]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	331c      	adds	r3, #28
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	3320      	adds	r3, #32
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bd0:	7bfa      	ldrb	r2, [r7, #15]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	3324      	adds	r3, #36	@ 0x24
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	3301      	adds	r3, #1
 8005be8:	73fb      	strb	r3, [r7, #15]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	791b      	ldrb	r3, [r3, #4]
 8005bee:	7bfa      	ldrb	r2, [r7, #15]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d3af      	bcc.n	8005b54 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e044      	b.n	8005c84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005bfa:	7bfa      	ldrb	r2, [r7, #15]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c3c:	7bfa      	ldrb	r2, [r7, #15]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c52:	7bfa      	ldrb	r2, [r7, #15]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	3301      	adds	r3, #1
 8005c82:	73fb      	strb	r3, [r7, #15]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	791b      	ldrb	r3, [r3, #4]
 8005c88:	7bfa      	ldrb	r2, [r7, #15]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d3b5      	bcc.n	8005bfa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	7c1a      	ldrb	r2, [r3, #16]
 8005c96:	f88d 2000 	strb.w	r2, [sp]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c9e:	f002 f805 	bl	8007cac <USB_DevInit>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e013      	b.n	8005cdc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	7b1b      	ldrb	r3, [r3, #12]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d102      	bne.n	8005cd0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f80a 	bl	8005ce4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 f9c0 	bl	800805a <USB_DevDisconnect>

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	f043 0303 	orr.w	r3, r3, #3
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0cc      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d40:	4b68      	ldr	r3, [pc, #416]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d90c      	bls.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4e:	4b65      	ldr	r3, [pc, #404]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d56:	4b63      	ldr	r3, [pc, #396]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0307 	and.w	r3, r3, #7
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d001      	beq.n	8005d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e0b8      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d80:	4b59      	ldr	r3, [pc, #356]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	4a58      	ldr	r2, [pc, #352]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d98:	4b53      	ldr	r3, [pc, #332]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	4a52      	ldr	r2, [pc, #328]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da4:	4b50      	ldr	r3, [pc, #320]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	494d      	ldr	r1, [pc, #308]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d044      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d107      	bne.n	8005dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dca:	4b47      	ldr	r3, [pc, #284]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d119      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e07f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d003      	beq.n	8005dea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d107      	bne.n	8005dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dea:	4b3f      	ldr	r3, [pc, #252]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d109      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e06f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e067      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e0a:	4b37      	ldr	r3, [pc, #220]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f023 0203 	bic.w	r2, r3, #3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	4934      	ldr	r1, [pc, #208]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e1c:	f7fd faea 	bl	80033f4 <HAL_GetTick>
 8005e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e22:	e00a      	b.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e24:	f7fd fae6 	bl	80033f4 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e04f      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 020c 	and.w	r2, r3, #12
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1eb      	bne.n	8005e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d20c      	bcs.n	8005e74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b20      	ldr	r3, [pc, #128]	@ (8005ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e032      	b.n	8005eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0304 	and.w	r3, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e80:	4b19      	ldr	r3, [pc, #100]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4916      	ldr	r1, [pc, #88]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d009      	beq.n	8005eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	490e      	ldr	r1, [pc, #56]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005eb2:	f000 f821 	bl	8005ef8 <HAL_RCC_GetSysClockFreq>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	490a      	ldr	r1, [pc, #40]	@ (8005eec <HAL_RCC_ClockConfig+0x1c0>)
 8005ec4:	5ccb      	ldrb	r3, [r1, r3]
 8005ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eca:	4a09      	ldr	r2, [pc, #36]	@ (8005ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005ece:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fa4a 	bl	800336c <HAL_InitTick>

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40023c00 	.word	0x40023c00
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	0800d2c0 	.word	0x0800d2c0
 8005ef0:	200000ac 	.word	0x200000ac
 8005ef4:	200000b0 	.word	0x200000b0

08005ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b094      	sub	sp, #80	@ 0x50
 8005efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f10:	4b79      	ldr	r3, [pc, #484]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 030c 	and.w	r3, r3, #12
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d00d      	beq.n	8005f38 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	f200 80e1 	bhi.w	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x34>
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d003      	beq.n	8005f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f2a:	e0db      	b.n	80060e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f2c:	4b73      	ldr	r3, [pc, #460]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 8005f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f30:	e0db      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f32:	4b73      	ldr	r3, [pc, #460]	@ (8006100 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f36:	e0d8      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f38:	4b6f      	ldr	r3, [pc, #444]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f42:	4b6d      	ldr	r3, [pc, #436]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d063      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	099b      	lsrs	r3, r3, #6
 8005f54:	2200      	movs	r2, #0
 8005f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f62:	2300      	movs	r3, #0
 8005f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	f04f 0000 	mov.w	r0, #0
 8005f72:	f04f 0100 	mov.w	r1, #0
 8005f76:	0159      	lsls	r1, r3, #5
 8005f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f7c:	0150      	lsls	r0, r2, #5
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4621      	mov	r1, r4
 8005f84:	1a51      	subs	r1, r2, r1
 8005f86:	6139      	str	r1, [r7, #16]
 8005f88:	4629      	mov	r1, r5
 8005f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	018b      	lsls	r3, r1, #6
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	018a      	lsls	r2, r1, #6
 8005faa:	4651      	mov	r1, sl
 8005fac:	ebb2 0801 	subs.w	r8, r2, r1
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fca:	4690      	mov	r8, r2
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	eb18 0303 	adds.w	r3, r8, r3
 8005fd4:	60bb      	str	r3, [r7, #8]
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	eb49 0303 	adc.w	r3, r9, r3
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	f04f 0200 	mov.w	r2, #0
 8005fe2:	f04f 0300 	mov.w	r3, #0
 8005fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fea:	4629      	mov	r1, r5
 8005fec:	024b      	lsls	r3, r1, #9
 8005fee:	4621      	mov	r1, r4
 8005ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	024a      	lsls	r2, r1, #9
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ffe:	2200      	movs	r2, #0
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006008:	f7fa fe5e 	bl	8000cc8 <__aeabi_uldivmod>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4613      	mov	r3, r2
 8006012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006014:	e058      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006016:	4b38      	ldr	r3, [pc, #224]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	099b      	lsrs	r3, r3, #6
 800601c:	2200      	movs	r2, #0
 800601e:	4618      	mov	r0, r3
 8006020:	4611      	mov	r1, r2
 8006022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	f04f 0000 	mov.w	r0, #0
 8006038:	f04f 0100 	mov.w	r1, #0
 800603c:	0159      	lsls	r1, r3, #5
 800603e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006042:	0150      	lsls	r0, r2, #5
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4641      	mov	r1, r8
 800604a:	ebb2 0a01 	subs.w	sl, r2, r1
 800604e:	4649      	mov	r1, r9
 8006050:	eb63 0b01 	sbc.w	fp, r3, r1
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006068:	ebb2 040a 	subs.w	r4, r2, sl
 800606c:	eb63 050b 	sbc.w	r5, r3, fp
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	00eb      	lsls	r3, r5, #3
 800607a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800607e:	00e2      	lsls	r2, r4, #3
 8006080:	4614      	mov	r4, r2
 8006082:	461d      	mov	r5, r3
 8006084:	4643      	mov	r3, r8
 8006086:	18e3      	adds	r3, r4, r3
 8006088:	603b      	str	r3, [r7, #0]
 800608a:	464b      	mov	r3, r9
 800608c:	eb45 0303 	adc.w	r3, r5, r3
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800609e:	4629      	mov	r1, r5
 80060a0:	028b      	lsls	r3, r1, #10
 80060a2:	4621      	mov	r1, r4
 80060a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060a8:	4621      	mov	r1, r4
 80060aa:	028a      	lsls	r2, r1, #10
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060b2:	2200      	movs	r2, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	61fa      	str	r2, [r7, #28]
 80060b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060bc:	f7fa fe04 	bl	8000cc8 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060c8:	4b0b      	ldr	r3, [pc, #44]	@ (80060f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	3301      	adds	r3, #1
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80060d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060e2:	e002      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <HAL_RCC_GetSysClockFreq+0x204>)
 80060e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3750      	adds	r7, #80	@ 0x50
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060f6:	bf00      	nop
 80060f8:	40023800 	.word	0x40023800
 80060fc:	00f42400 	.word	0x00f42400
 8006100:	007a1200 	.word	0x007a1200

08006104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006108:	4b03      	ldr	r3, [pc, #12]	@ (8006118 <HAL_RCC_GetHCLKFreq+0x14>)
 800610a:	681b      	ldr	r3, [r3, #0]
}
 800610c:	4618      	mov	r0, r3
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	200000ac 	.word	0x200000ac

0800611c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006120:	f7ff fff0 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 8006124:	4602      	mov	r2, r0
 8006126:	4b05      	ldr	r3, [pc, #20]	@ (800613c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	0a9b      	lsrs	r3, r3, #10
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	4903      	ldr	r1, [pc, #12]	@ (8006140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006132:	5ccb      	ldrb	r3, [r1, r3]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40023800 	.word	0x40023800
 8006140:	0800d2d0 	.word	0x0800d2d0

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006148:	f7ff ffdc 	bl	8006104 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b05      	ldr	r3, [pc, #20]	@ (8006164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0b5b      	lsrs	r3, r3, #13
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4903      	ldr	r1, [pc, #12]	@ (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006160:	4618      	mov	r0, r3
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40023800 	.word	0x40023800
 8006168:	0800d2d0 	.word	0x0800d2d0

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d010      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800618c:	4b87      	ldr	r3, [pc, #540]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800618e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006192:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	4984      	ldr	r1, [pc, #528]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80061ba:	4b7c      	ldr	r3, [pc, #496]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061c0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	4978      	ldr	r1, [pc, #480]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8083 	beq.w	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	2300      	movs	r3, #0
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	4b6f      	ldr	r3, [pc, #444]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f2:	4a6e      	ldr	r2, [pc, #440]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80061fa:	4b6c      	ldr	r3, [pc, #432]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006206:	4b6a      	ldr	r3, [pc, #424]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a69      	ldr	r2, [pc, #420]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800620c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006210:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006212:	f7fd f8ef 	bl	80033f4 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006218:	e008      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800621a:	f7fd f8eb 	bl	80033f4 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e162      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800622c:	4b60      	ldr	r3, [pc, #384]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f0      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006238:	4b5c      	ldr	r3, [pc, #368]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006240:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02f      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	429a      	cmp	r2, r3
 8006254:	d028      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006256:	4b55      	ldr	r3, [pc, #340]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006260:	4b54      	ldr	r3, [pc, #336]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006266:	4b53      	ldr	r3, [pc, #332]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800626c:	4a4f      	ldr	r2, [pc, #316]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006272:	4b4e      	ldr	r3, [pc, #312]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b01      	cmp	r3, #1
 800627c:	d114      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800627e:	f7fd f8b9 	bl	80033f4 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006284:	e00a      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fd f8b5 	bl	80033f4 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e12a      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800629c:	4b43      	ldr	r3, [pc, #268]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d0ee      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b4:	d10d      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80062b6:	4b3d      	ldr	r3, [pc, #244]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80062c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ca:	4938      	ldr	r1, [pc, #224]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	608b      	str	r3, [r1, #8]
 80062d0:	e005      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x172>
 80062d2:	4b36      	ldr	r3, [pc, #216]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	4a35      	ldr	r2, [pc, #212]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80062dc:	6093      	str	r3, [r2, #8]
 80062de:	4b33      	ldr	r3, [pc, #204]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	4930      	ldr	r1, [pc, #192]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8006302:	4b2d      	ldr	r3, [pc, #180]	@ (80063b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006304:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006312:	4b26      	ldr	r3, [pc, #152]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006314:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006318:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	4922      	ldr	r1, [pc, #136]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d011      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006334:	4b1d      	ldr	r3, [pc, #116]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800633a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	491a      	ldr	r1, [pc, #104]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006352:	d101      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8006354:	2301      	movs	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006364:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800636a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	490e      	ldr	r1, [pc, #56]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d004      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b80      	cmp	r3, #128	@ 0x80
 8006386:	f040 8091 	bne.w	80064ac <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800638a:	4b0c      	ldr	r3, [pc, #48]	@ (80063bc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006390:	f7fd f830 	bl	80033f4 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006396:	e013      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006398:	f7fd f82c 	bl	80033f4 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d90c      	bls.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e0a3      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80063aa:	bf00      	nop
 80063ac:	40023800 	.word	0x40023800
 80063b0:	40007000 	.word	0x40007000
 80063b4:	42470e40 	.word	0x42470e40
 80063b8:	424711e0 	.word	0x424711e0
 80063bc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063c0:	4b4e      	ldr	r3, [pc, #312]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e5      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80063cc:	4a4c      	ldr	r2, [pc, #304]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d023      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d019      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006410:	d00e      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	d019      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d115      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800642e:	d110      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	071b      	lsls	r3, r3, #28
 800644a:	492c      	ldr	r1, [pc, #176]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d010      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	061b      	lsls	r3, r3, #24
 8006470:	431a      	orrs	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	071b      	lsls	r3, r3, #28
 8006478:	4920      	ldr	r1, [pc, #128]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006480:	4b20      	ldr	r3, [pc, #128]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006486:	f7fc ffb5 	bl	80033f4 <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800648e:	f7fc ffb1 	bl	80033f4 <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e028      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064a0:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064b8:	4b10      	ldr	r3, [pc, #64]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	490d      	ldr	r1, [pc, #52]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064da:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	4904      	ldr	r1, [pc, #16]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40023800 	.word	0x40023800
 8006500:	424710d8 	.word	0x424710d8
 8006504:	42470068 	.word	0x42470068

08006508 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e273      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d075      	beq.n	8006612 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006526:	4b88      	ldr	r3, [pc, #544]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 030c 	and.w	r3, r3, #12
 800652e:	2b04      	cmp	r3, #4
 8006530:	d00c      	beq.n	800654c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006532:	4b85      	ldr	r3, [pc, #532]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 030c 	and.w	r3, r3, #12
        || \
 800653a:	2b08      	cmp	r3, #8
 800653c:	d112      	bne.n	8006564 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653e:	4b82      	ldr	r3, [pc, #520]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800654a:	d10b      	bne.n	8006564 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	4b7e      	ldr	r3, [pc, #504]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05b      	beq.n	8006610 <HAL_RCC_OscConfig+0x108>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d157      	bne.n	8006610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e24e      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800656c:	d106      	bne.n	800657c <HAL_RCC_OscConfig+0x74>
 800656e:	4b76      	ldr	r3, [pc, #472]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a75      	ldr	r2, [pc, #468]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e01d      	b.n	80065b8 <HAL_RCC_OscConfig+0xb0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006584:	d10c      	bne.n	80065a0 <HAL_RCC_OscConfig+0x98>
 8006586:	4b70      	ldr	r3, [pc, #448]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6f      	ldr	r2, [pc, #444]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800658c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	4b6d      	ldr	r3, [pc, #436]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6c      	ldr	r2, [pc, #432]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	e00b      	b.n	80065b8 <HAL_RCC_OscConfig+0xb0>
 80065a0:	4b69      	ldr	r3, [pc, #420]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a68      	ldr	r2, [pc, #416]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	4b66      	ldr	r3, [pc, #408]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a65      	ldr	r2, [pc, #404]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80065b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fc ff18 	bl	80033f4 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065c8:	f7fc ff14 	bl	80033f4 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b64      	cmp	r3, #100	@ 0x64
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e213      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	4b5b      	ldr	r3, [pc, #364]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0xc0>
 80065e6:	e014      	b.n	8006612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fc ff04 	bl	80033f4 <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f0:	f7fc ff00 	bl	80033f4 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	@ 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e1ff      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006602:	4b51      	ldr	r3, [pc, #324]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f0      	bne.n	80065f0 <HAL_RCC_OscConfig+0xe8>
 800660e:	e000      	b.n	8006612 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d063      	beq.n	80066e6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800661e:	4b4a      	ldr	r3, [pc, #296]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 030c 	and.w	r3, r3, #12
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00b      	beq.n	8006642 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800662a:	4b47      	ldr	r3, [pc, #284]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006632:	2b08      	cmp	r3, #8
 8006634:	d11c      	bne.n	8006670 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006636:	4b44      	ldr	r3, [pc, #272]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d116      	bne.n	8006670 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006642:	4b41      	ldr	r3, [pc, #260]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_RCC_OscConfig+0x152>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d001      	beq.n	800665a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e1d3      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665a:	4b3b      	ldr	r3, [pc, #236]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	4937      	ldr	r1, [pc, #220]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800666a:	4313      	orrs	r3, r2
 800666c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666e:	e03a      	b.n	80066e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d020      	beq.n	80066ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006678:	4b34      	ldr	r3, [pc, #208]	@ (800674c <HAL_RCC_OscConfig+0x244>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667e:	f7fc feb9 	bl	80033f4 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006686:	f7fc feb5 	bl	80033f4 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e1b4      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006698:	4b2b      	ldr	r3, [pc, #172]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a4:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4925      	ldr	r1, [pc, #148]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
 80066b8:	e015      	b.n	80066e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ba:	4b24      	ldr	r3, [pc, #144]	@ (800674c <HAL_RCC_OscConfig+0x244>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fc fe98 	bl	80033f4 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c8:	f7fc fe94 	bl	80033f4 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e193      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066da:	4b1b      	ldr	r3, [pc, #108]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0308 	and.w	r3, r3, #8
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d036      	beq.n	8006760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066fa:	4b15      	ldr	r3, [pc, #84]	@ (8006750 <HAL_RCC_OscConfig+0x248>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006700:	f7fc fe78 	bl	80033f4 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006708:	f7fc fe74 	bl	80033f4 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e173      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <HAL_RCC_OscConfig+0x240>)
 800671c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <HAL_RCC_OscConfig+0x200>
 8006726:	e01b      	b.n	8006760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006728:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <HAL_RCC_OscConfig+0x248>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800672e:	f7fc fe61 	bl	80033f4 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006734:	e00e      	b.n	8006754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006736:	f7fc fe5d 	bl	80033f4 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d907      	bls.n	8006754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e15c      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
 8006748:	40023800 	.word	0x40023800
 800674c:	42470000 	.word	0x42470000
 8006750:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006754:	4b8a      	ldr	r3, [pc, #552]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1ea      	bne.n	8006736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8097 	beq.w	800689c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006772:	4b83      	ldr	r3, [pc, #524]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	4b7f      	ldr	r3, [pc, #508]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	4a7e      	ldr	r2, [pc, #504]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800678c:	6413      	str	r3, [r2, #64]	@ 0x40
 800678e:	4b7c      	ldr	r3, [pc, #496]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006796:	60bb      	str	r3, [r7, #8]
 8006798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679e:	4b79      	ldr	r3, [pc, #484]	@ (8006984 <HAL_RCC_OscConfig+0x47c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d118      	bne.n	80067dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067aa:	4b76      	ldr	r3, [pc, #472]	@ (8006984 <HAL_RCC_OscConfig+0x47c>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a75      	ldr	r2, [pc, #468]	@ (8006984 <HAL_RCC_OscConfig+0x47c>)
 80067b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b6:	f7fc fe1d 	bl	80033f4 <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067be:	f7fc fe19 	bl	80033f4 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e118      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d0:	4b6c      	ldr	r3, [pc, #432]	@ (8006984 <HAL_RCC_OscConfig+0x47c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d106      	bne.n	80067f2 <HAL_RCC_OscConfig+0x2ea>
 80067e4:	4b66      	ldr	r3, [pc, #408]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 80067e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e8:	4a65      	ldr	r2, [pc, #404]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f0:	e01c      	b.n	800682c <HAL_RCC_OscConfig+0x324>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	d10c      	bne.n	8006814 <HAL_RCC_OscConfig+0x30c>
 80067fa:	4b61      	ldr	r3, [pc, #388]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fe:	4a60      	ldr	r2, [pc, #384]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006800:	f043 0304 	orr.w	r3, r3, #4
 8006804:	6713      	str	r3, [r2, #112]	@ 0x70
 8006806:	4b5e      	ldr	r3, [pc, #376]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680a:	4a5d      	ldr	r2, [pc, #372]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	6713      	str	r3, [r2, #112]	@ 0x70
 8006812:	e00b      	b.n	800682c <HAL_RCC_OscConfig+0x324>
 8006814:	4b5a      	ldr	r3, [pc, #360]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006818:	4a59      	ldr	r2, [pc, #356]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006820:	4b57      	ldr	r3, [pc, #348]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006824:	4a56      	ldr	r2, [pc, #344]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006826:	f023 0304 	bic.w	r3, r3, #4
 800682a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006834:	f7fc fdde 	bl	80033f4 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683a:	e00a      	b.n	8006852 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683c:	f7fc fdda 	bl	80033f4 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800684a:	4293      	cmp	r3, r2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e0d7      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006852:	4b4b      	ldr	r3, [pc, #300]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0ee      	beq.n	800683c <HAL_RCC_OscConfig+0x334>
 800685e:	e014      	b.n	800688a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fc fdc8 	bl	80033f4 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006866:	e00a      	b.n	800687e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006868:	f7fc fdc4 	bl	80033f4 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e0c1      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687e:	4b40      	ldr	r3, [pc, #256]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1ee      	bne.n	8006868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800688a:	7dfb      	ldrb	r3, [r7, #23]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d105      	bne.n	800689c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006890:	4b3b      	ldr	r3, [pc, #236]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006894:	4a3a      	ldr	r2, [pc, #232]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800689a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80ad 	beq.w	8006a00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068a6:	4b36      	ldr	r3, [pc, #216]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 030c 	and.w	r3, r3, #12
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d060      	beq.n	8006974 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d145      	bne.n	8006946 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068ba:	4b33      	ldr	r3, [pc, #204]	@ (8006988 <HAL_RCC_OscConfig+0x480>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc fd98 	bl	80033f4 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c8:	f7fc fd94 	bl	80033f4 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e093      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068da:	4b29      	ldr	r3, [pc, #164]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	019b      	lsls	r3, r3, #6
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	3b01      	subs	r3, #1
 8006900:	041b      	lsls	r3, r3, #16
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	061b      	lsls	r3, r3, #24
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	071b      	lsls	r3, r3, #28
 8006912:	491b      	ldr	r1, [pc, #108]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006914:	4313      	orrs	r3, r2
 8006916:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <HAL_RCC_OscConfig+0x480>)
 800691a:	2201      	movs	r2, #1
 800691c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fc fd69 	bl	80033f4 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006924:	e008      	b.n	8006938 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006926:	f7fc fd65 	bl	80033f4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d901      	bls.n	8006938 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e064      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006938:	4b11      	ldr	r3, [pc, #68]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0f0      	beq.n	8006926 <HAL_RCC_OscConfig+0x41e>
 8006944:	e05c      	b.n	8006a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006946:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <HAL_RCC_OscConfig+0x480>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fc fd52 	bl	80033f4 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006954:	f7fc fd4e 	bl	80033f4 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e04d      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	4b06      	ldr	r3, [pc, #24]	@ (8006980 <HAL_RCC_OscConfig+0x478>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x44c>
 8006972:	e045      	b.n	8006a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d107      	bne.n	800698c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e040      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
 8006980:	40023800 	.word	0x40023800
 8006984:	40007000 	.word	0x40007000
 8006988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800698c:	4b1f      	ldr	r3, [pc, #124]	@ (8006a0c <HAL_RCC_OscConfig+0x504>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d030      	beq.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d129      	bne.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d122      	bne.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069bc:	4013      	ands	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d119      	bne.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	3b01      	subs	r3, #1
 80069d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d10f      	bne.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d107      	bne.n	80069fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d001      	beq.n	8006a00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40023800 	.word	0x40023800

08006a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e042      	b.n	8006aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fc fa58 	bl	8002eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	@ 0x24
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fdf3 	bl	8007640 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	4613      	mov	r3, r2
 8006abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d175      	bne.n	8006bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_UART_Transmit+0x2c>
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e06e      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2221      	movs	r2, #33	@ 0x21
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aee:	f7fc fc81 	bl	80033f4 <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b08:	d108      	bne.n	8006b1c <HAL_UART_Transmit+0x6c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e003      	b.n	8006b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b24:	e02e      	b.n	8006b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	@ 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fb55 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e03a      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	3302      	adds	r3, #2
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	e007      	b.n	8006b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3301      	adds	r3, #1
 8006b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cb      	bne.n	8006b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2140      	movs	r1, #64	@ 0x40
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fb21 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08c      	sub	sp, #48	@ 0x30
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d14a      	bne.n	8006c76 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e043      	b.n	8006c78 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fb45 	bl	8007292 <UART_Start_Receive_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d12c      	bne.n	8006c70 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d125      	bne.n	8006c6a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	330c      	adds	r3, #12
 8006c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	617b      	str	r3, [r7, #20]
   return(result);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f043 0310 	orr.w	r3, r3, #16
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c54:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6a39      	ldr	r1, [r7, #32]
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e5      	bne.n	8006c34 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8006c68:	e002      	b.n	8006c70 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006c70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c74:	e000      	b.n	8006c78 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006c76:	2302      	movs	r3, #2
  }
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	@ 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b0ba      	sub	sp, #232	@ 0xe8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10f      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x66>
 8006cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fbf0 	bl	80074c4 <UART_Receive_IT>
      return;
 8006ce4:	e25b      	b.n	800719e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80de 	beq.w	8006eac <HAL_UART_IRQHandler+0x22c>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d106      	bne.n	8006d0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80d1 	beq.w	8006eac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <HAL_UART_IRQHandler+0xae>
 8006d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d26:	f043 0201 	orr.w	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00b      	beq.n	8006d52 <HAL_UART_IRQHandler+0xd2>
 8006d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	f043 0202 	orr.w	r2, r3, #2
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <HAL_UART_IRQHandler+0xf6>
 8006d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6e:	f043 0204 	orr.w	r2, r3, #4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <HAL_UART_IRQHandler+0x126>
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d105      	bne.n	8006d9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9e:	f043 0208 	orr.w	r2, r3, #8
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 81f2 	beq.w	8007194 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d008      	beq.n	8006dce <HAL_UART_IRQHandler+0x14e>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb7b 	bl	80074c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd8:	2b40      	cmp	r3, #64	@ 0x40
 8006dda:	bf0c      	ite	eq
 8006ddc:	2301      	moveq	r3, #1
 8006dde:	2300      	movne	r3, #0
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dea:	f003 0308 	and.w	r3, r3, #8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <HAL_UART_IRQHandler+0x17a>
 8006df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04f      	beq.n	8006e9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa83 	bl	8007306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0a:	2b40      	cmp	r3, #64	@ 0x40
 8006e0c:	d141      	bne.n	8006e92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3314      	adds	r3, #20
 8006e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1d9      	bne.n	8006e0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d013      	beq.n	8006e8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e66:	4a7e      	ldr	r2, [pc, #504]	@ (8007060 <HAL_UART_IRQHandler+0x3e0>)
 8006e68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fc fc71 	bl	8003756 <HAL_DMA_Abort_IT>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d016      	beq.n	8006ea8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e84:	4610      	mov	r0, r2
 8006e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e88:	e00e      	b.n	8006ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f99e 	bl	80071cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e00a      	b.n	8006ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f99a 	bl	80071cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e98:	e006      	b.n	8006ea8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f996 	bl	80071cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ea6:	e175      	b.n	8007194 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	bf00      	nop
    return;
 8006eaa:	e173      	b.n	8007194 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	f040 814f 	bne.w	8007154 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eba:	f003 0310 	and.w	r3, r3, #16
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 8148 	beq.w	8007154 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8141 	beq.w	8007154 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef2:	2b40      	cmp	r3, #64	@ 0x40
 8006ef4:	f040 80b6 	bne.w	8007064 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8145 	beq.w	8007198 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f16:	429a      	cmp	r2, r3
 8006f18:	f080 813e 	bcs.w	8007198 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f2e:	f000 8088 	beq.w	8007042 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006f5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1d9      	bne.n	8006f32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3314      	adds	r3, #20
 8006f84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3314      	adds	r3, #20
 8006f9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fa2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e1      	bne.n	8006f7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3314      	adds	r3, #20
 8006fc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3314      	adds	r3, #20
 8006fda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e3      	bne.n	8006fba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007012:	f023 0310 	bic.w	r3, r3, #16
 8007016:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	330c      	adds	r3, #12
 8007020:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007024:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007026:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800702a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e3      	bne.n	8007000 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	4618      	mov	r0, r3
 800703e:	f7fc fb1a 	bl	8003676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007050:	b29b      	uxth	r3, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	b29b      	uxth	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7fb fb31 	bl	80026c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800705e:	e09b      	b.n	8007198 <HAL_UART_IRQHandler+0x518>
 8007060:	080073cd 	.word	0x080073cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800706c:	b29b      	uxth	r3, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 808e 	beq.w	800719c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8089 	beq.w	800719c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	330c      	adds	r3, #12
 8007090:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80070ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80070b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e3      	bne.n	800708a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	623b      	str	r3, [r7, #32]
   return(result);
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3314      	adds	r3, #20
 80070e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ee:	e841 2300 	strex	r3, r2, [r1]
 80070f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1e3      	bne.n	80070c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2220      	movs	r2, #32
 80070fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	e853 3f00 	ldrex	r3, [r3]
 8007116:	60fb      	str	r3, [r7, #12]
   return(result);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0310 	bic.w	r3, r3, #16
 800711e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800712c:	61fa      	str	r2, [r7, #28]
 800712e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	69b9      	ldr	r1, [r7, #24]
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	617b      	str	r3, [r7, #20]
   return(result);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e3      	bne.n	8007108 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007146:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fb fab7 	bl	80026c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007152:	e023      	b.n	800719c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <HAL_UART_IRQHandler+0x4f4>
 8007160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f941 	bl	80073f4 <UART_Transmit_IT>
    return;
 8007172:	e014      	b.n	800719e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00e      	beq.n	800719e <HAL_UART_IRQHandler+0x51e>
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f981 	bl	8007494 <UART_EndTransmit_IT>
    return;
 8007192:	e004      	b.n	800719e <HAL_UART_IRQHandler+0x51e>
    return;
 8007194:	bf00      	nop
 8007196:	e002      	b.n	800719e <HAL_UART_IRQHandler+0x51e>
      return;
 8007198:	bf00      	nop
 800719a:	e000      	b.n	800719e <HAL_UART_IRQHandler+0x51e>
      return;
 800719c:	bf00      	nop
  }
}
 800719e:	37e8      	adds	r7, #232	@ 0xe8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	e03b      	b.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f8:	d037      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fc f8fb 	bl	80033f4 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	6a3a      	ldr	r2, [r7, #32]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <UART_WaitOnFlagUntilTimeout+0x30>
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e03a      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d023      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d020      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d01d      	beq.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b08      	cmp	r3, #8
 800723a:	d116      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f857 	bl	8007306 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2208      	movs	r2, #8
 800725c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e00f      	b.n	800728a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	4013      	ands	r3, r2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	bf0c      	ite	eq
 800727a:	2301      	moveq	r3, #1
 800727c:	2300      	movne	r3, #0
 800727e:	b2db      	uxtb	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	79fb      	ldrb	r3, [r7, #7]
 8007284:	429a      	cmp	r2, r3
 8007286:	d0b4      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007292:	b480      	push	{r7}
 8007294:	b085      	sub	sp, #20
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	60b9      	str	r1, [r7, #8]
 800729c:	4613      	mov	r3, r2
 800729e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	88fa      	ldrh	r2, [r7, #6]
 80072aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2222      	movs	r2, #34	@ 0x22
 80072bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d007      	beq.n	80072d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0220 	orr.w	r2, r2, #32
 80072f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007306:	b480      	push	{r7}
 8007308:	b095      	sub	sp, #84	@ 0x54
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800732e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800733c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	61fb      	str	r3, [r7, #28]
   return(result);
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3314      	adds	r3, #20
 8007360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007362:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800737a:	2b01      	cmp	r3, #1
 800737c:	d119      	bne.n	80073b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	60bb      	str	r3, [r7, #8]
   return(result);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	647b      	str	r3, [r7, #68]	@ 0x44
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739e:	61ba      	str	r2, [r7, #24]
 80073a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	613b      	str	r3, [r7, #16]
   return(result);
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e5      	bne.n	800737e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80073c0:	bf00      	nop
 80073c2:	3754      	adds	r7, #84	@ 0x54
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fef0 	bl	80071cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b21      	cmp	r3, #33	@ 0x21
 8007406:	d13e      	bne.n	8007486 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007410:	d114      	bne.n	800743c <UART_Transmit_IT+0x48>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d110      	bne.n	800743c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800742e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	1c9a      	adds	r2, r3, #2
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	621a      	str	r2, [r3, #32]
 800743a:	e008      	b.n	800744e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	1c59      	adds	r1, r3, #1
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6211      	str	r1, [r2, #32]
 8007446:	781a      	ldrb	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29b      	uxth	r3, r3
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10f      	bne.n	8007482 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68da      	ldr	r2, [r3, #12]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007470:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007480:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007486:	2302      	movs	r3, #2
  }
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff fe75 	bl	80071a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08c      	sub	sp, #48	@ 0x30
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b22      	cmp	r3, #34	@ 0x22
 80074d6:	f040 80ae 	bne.w	8007636 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e2:	d117      	bne.n	8007514 <UART_Receive_IT+0x50>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d113      	bne.n	8007514 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	b29a      	uxth	r2, r3
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	1c9a      	adds	r2, r3, #2
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	629a      	str	r2, [r3, #40]	@ 0x28
 8007512:	e026      	b.n	8007562 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007526:	d007      	beq.n	8007538 <UART_Receive_IT+0x74>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <UART_Receive_IT+0x82>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d106      	bne.n	8007546 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	b2da      	uxtb	r2, r3
 8007540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29b      	uxth	r3, r3
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	4619      	mov	r1, r3
 8007570:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007572:	2b00      	cmp	r3, #0
 8007574:	d15d      	bne.n	8007632 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0220 	bic.w	r2, r2, #32
 8007584:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007594:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	695a      	ldr	r2, [r3, #20]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0201 	bic.w	r2, r2, #1
 80075a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d135      	bne.n	8007628 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	330c      	adds	r3, #12
 80075c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	613b      	str	r3, [r7, #16]
   return(result);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	f023 0310 	bic.w	r3, r3, #16
 80075d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	330c      	adds	r3, #12
 80075e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e2:	623a      	str	r2, [r7, #32]
 80075e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	69f9      	ldr	r1, [r7, #28]
 80075e8:	6a3a      	ldr	r2, [r7, #32]
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e5      	bne.n	80075c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b10      	cmp	r3, #16
 8007602:	d10a      	bne.n	800761a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fb f84d 	bl	80026c0 <HAL_UARTEx_RxEventCallback>
 8007626:	e002      	b.n	800762e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fdc5 	bl	80071b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e002      	b.n	8007638 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e000      	b.n	8007638 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007636:	2302      	movs	r3, #2
  }
}
 8007638:	4618      	mov	r0, r3
 800763a:	3730      	adds	r7, #48	@ 0x30
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007644:	b0c0      	sub	sp, #256	@ 0x100
 8007646:	af00      	add	r7, sp, #0
 8007648:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765c:	68d9      	ldr	r1, [r3, #12]
 800765e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	ea40 0301 	orr.w	r3, r0, r1
 8007668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	431a      	orrs	r2, r3
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	431a      	orrs	r2, r3
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007698:	f021 010c 	bic.w	r1, r1, #12
 800769c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076a6:	430b      	orrs	r3, r1
 80076a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	6999      	ldr	r1, [r3, #24]
 80076bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	ea40 0301 	orr.w	r3, r0, r1
 80076c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b8f      	ldr	r3, [pc, #572]	@ (800790c <UART_SetConfig+0x2cc>)
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d005      	beq.n	80076e0 <UART_SetConfig+0xa0>
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	4b8d      	ldr	r3, [pc, #564]	@ (8007910 <UART_SetConfig+0x2d0>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d104      	bne.n	80076ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80076e0:	f7fe fd30 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80076e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80076e8:	e003      	b.n	80076f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076ea:	f7fe fd17 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 80076ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076fc:	f040 810c 	bne.w	8007918 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007704:	2200      	movs	r2, #0
 8007706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800770a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800770e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007712:	4622      	mov	r2, r4
 8007714:	462b      	mov	r3, r5
 8007716:	1891      	adds	r1, r2, r2
 8007718:	65b9      	str	r1, [r7, #88]	@ 0x58
 800771a:	415b      	adcs	r3, r3
 800771c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800771e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007722:	4621      	mov	r1, r4
 8007724:	eb12 0801 	adds.w	r8, r2, r1
 8007728:	4629      	mov	r1, r5
 800772a:	eb43 0901 	adc.w	r9, r3, r1
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800773a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800773e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007742:	4690      	mov	r8, r2
 8007744:	4699      	mov	r9, r3
 8007746:	4623      	mov	r3, r4
 8007748:	eb18 0303 	adds.w	r3, r8, r3
 800774c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007750:	462b      	mov	r3, r5
 8007752:	eb49 0303 	adc.w	r3, r9, r3
 8007756:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800775a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007766:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800776a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800776e:	460b      	mov	r3, r1
 8007770:	18db      	adds	r3, r3, r3
 8007772:	653b      	str	r3, [r7, #80]	@ 0x50
 8007774:	4613      	mov	r3, r2
 8007776:	eb42 0303 	adc.w	r3, r2, r3
 800777a:	657b      	str	r3, [r7, #84]	@ 0x54
 800777c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007780:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007784:	f7f9 faa0 	bl	8000cc8 <__aeabi_uldivmod>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	4b61      	ldr	r3, [pc, #388]	@ (8007914 <UART_SetConfig+0x2d4>)
 800778e:	fba3 2302 	umull	r2, r3, r3, r2
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	011c      	lsls	r4, r3, #4
 8007796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800779a:	2200      	movs	r2, #0
 800779c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80077a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80077a8:	4642      	mov	r2, r8
 80077aa:	464b      	mov	r3, r9
 80077ac:	1891      	adds	r1, r2, r2
 80077ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80077b0:	415b      	adcs	r3, r3
 80077b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80077b8:	4641      	mov	r1, r8
 80077ba:	eb12 0a01 	adds.w	sl, r2, r1
 80077be:	4649      	mov	r1, r9
 80077c0:	eb43 0b01 	adc.w	fp, r3, r1
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80077d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80077d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077d8:	4692      	mov	sl, r2
 80077da:	469b      	mov	fp, r3
 80077dc:	4643      	mov	r3, r8
 80077de:	eb1a 0303 	adds.w	r3, sl, r3
 80077e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077e6:	464b      	mov	r3, r9
 80077e8:	eb4b 0303 	adc.w	r3, fp, r3
 80077ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007800:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007804:	460b      	mov	r3, r1
 8007806:	18db      	adds	r3, r3, r3
 8007808:	643b      	str	r3, [r7, #64]	@ 0x40
 800780a:	4613      	mov	r3, r2
 800780c:	eb42 0303 	adc.w	r3, r2, r3
 8007810:	647b      	str	r3, [r7, #68]	@ 0x44
 8007812:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007816:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800781a:	f7f9 fa55 	bl	8000cc8 <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4611      	mov	r1, r2
 8007824:	4b3b      	ldr	r3, [pc, #236]	@ (8007914 <UART_SetConfig+0x2d4>)
 8007826:	fba3 2301 	umull	r2, r3, r3, r1
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	2264      	movs	r2, #100	@ 0x64
 800782e:	fb02 f303 	mul.w	r3, r2, r3
 8007832:	1acb      	subs	r3, r1, r3
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800783a:	4b36      	ldr	r3, [pc, #216]	@ (8007914 <UART_SetConfig+0x2d4>)
 800783c:	fba3 2302 	umull	r2, r3, r3, r2
 8007840:	095b      	lsrs	r3, r3, #5
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007848:	441c      	add	r4, r3
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007854:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007858:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	1891      	adds	r1, r2, r2
 8007862:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007864:	415b      	adcs	r3, r3
 8007866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007868:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800786c:	4641      	mov	r1, r8
 800786e:	1851      	adds	r1, r2, r1
 8007870:	6339      	str	r1, [r7, #48]	@ 0x30
 8007872:	4649      	mov	r1, r9
 8007874:	414b      	adcs	r3, r1
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007884:	4659      	mov	r1, fp
 8007886:	00cb      	lsls	r3, r1, #3
 8007888:	4651      	mov	r1, sl
 800788a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800788e:	4651      	mov	r1, sl
 8007890:	00ca      	lsls	r2, r1, #3
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	4603      	mov	r3, r0
 8007898:	4642      	mov	r2, r8
 800789a:	189b      	adds	r3, r3, r2
 800789c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078a0:	464b      	mov	r3, r9
 80078a2:	460a      	mov	r2, r1
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80078bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078c0:	460b      	mov	r3, r1
 80078c2:	18db      	adds	r3, r3, r3
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078c6:	4613      	mov	r3, r2
 80078c8:	eb42 0303 	adc.w	r3, r2, r3
 80078cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80078d6:	f7f9 f9f7 	bl	8000cc8 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <UART_SetConfig+0x2d4>)
 80078e0:	fba3 1302 	umull	r1, r3, r3, r2
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	2164      	movs	r1, #100	@ 0x64
 80078e8:	fb01 f303 	mul.w	r3, r1, r3
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	3332      	adds	r3, #50	@ 0x32
 80078f2:	4a08      	ldr	r2, [pc, #32]	@ (8007914 <UART_SetConfig+0x2d4>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	095b      	lsrs	r3, r3, #5
 80078fa:	f003 0207 	and.w	r2, r3, #7
 80078fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4422      	add	r2, r4
 8007906:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007908:	e106      	b.n	8007b18 <UART_SetConfig+0x4d8>
 800790a:	bf00      	nop
 800790c:	40011000 	.word	0x40011000
 8007910:	40011400 	.word	0x40011400
 8007914:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800791c:	2200      	movs	r2, #0
 800791e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007922:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007926:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800792a:	4642      	mov	r2, r8
 800792c:	464b      	mov	r3, r9
 800792e:	1891      	adds	r1, r2, r2
 8007930:	6239      	str	r1, [r7, #32]
 8007932:	415b      	adcs	r3, r3
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
 8007936:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800793a:	4641      	mov	r1, r8
 800793c:	1854      	adds	r4, r2, r1
 800793e:	4649      	mov	r1, r9
 8007940:	eb43 0501 	adc.w	r5, r3, r1
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	f04f 0300 	mov.w	r3, #0
 800794c:	00eb      	lsls	r3, r5, #3
 800794e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007952:	00e2      	lsls	r2, r4, #3
 8007954:	4614      	mov	r4, r2
 8007956:	461d      	mov	r5, r3
 8007958:	4643      	mov	r3, r8
 800795a:	18e3      	adds	r3, r4, r3
 800795c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007960:	464b      	mov	r3, r9
 8007962:	eb45 0303 	adc.w	r3, r5, r3
 8007966:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800796a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007976:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007986:	4629      	mov	r1, r5
 8007988:	008b      	lsls	r3, r1, #2
 800798a:	4621      	mov	r1, r4
 800798c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007990:	4621      	mov	r1, r4
 8007992:	008a      	lsls	r2, r1, #2
 8007994:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007998:	f7f9 f996 	bl	8000cc8 <__aeabi_uldivmod>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4b60      	ldr	r3, [pc, #384]	@ (8007b24 <UART_SetConfig+0x4e4>)
 80079a2:	fba3 2302 	umull	r2, r3, r3, r2
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	011c      	lsls	r4, r3, #4
 80079aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80079b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80079bc:	4642      	mov	r2, r8
 80079be:	464b      	mov	r3, r9
 80079c0:	1891      	adds	r1, r2, r2
 80079c2:	61b9      	str	r1, [r7, #24]
 80079c4:	415b      	adcs	r3, r3
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079cc:	4641      	mov	r1, r8
 80079ce:	1851      	adds	r1, r2, r1
 80079d0:	6139      	str	r1, [r7, #16]
 80079d2:	4649      	mov	r1, r9
 80079d4:	414b      	adcs	r3, r1
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	f04f 0200 	mov.w	r2, #0
 80079dc:	f04f 0300 	mov.w	r3, #0
 80079e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079e4:	4659      	mov	r1, fp
 80079e6:	00cb      	lsls	r3, r1, #3
 80079e8:	4651      	mov	r1, sl
 80079ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079ee:	4651      	mov	r1, sl
 80079f0:	00ca      	lsls	r2, r1, #3
 80079f2:	4610      	mov	r0, r2
 80079f4:	4619      	mov	r1, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	4642      	mov	r2, r8
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a00:	464b      	mov	r3, r9
 8007a02:	460a      	mov	r2, r1
 8007a04:	eb42 0303 	adc.w	r3, r2, r3
 8007a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a24:	4649      	mov	r1, r9
 8007a26:	008b      	lsls	r3, r1, #2
 8007a28:	4641      	mov	r1, r8
 8007a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a2e:	4641      	mov	r1, r8
 8007a30:	008a      	lsls	r2, r1, #2
 8007a32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a36:	f7f9 f947 	bl	8000cc8 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4b38      	ldr	r3, [pc, #224]	@ (8007b24 <UART_SetConfig+0x4e4>)
 8007a42:	fba3 2301 	umull	r2, r3, r3, r1
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	2264      	movs	r2, #100	@ 0x64
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
 8007a4e:	1acb      	subs	r3, r1, r3
 8007a50:	011b      	lsls	r3, r3, #4
 8007a52:	3332      	adds	r3, #50	@ 0x32
 8007a54:	4a33      	ldr	r2, [pc, #204]	@ (8007b24 <UART_SetConfig+0x4e4>)
 8007a56:	fba2 2303 	umull	r2, r3, r2, r3
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007a60:	441c      	add	r4, r3
 8007a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a66:	2200      	movs	r2, #0
 8007a68:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a80:	4641      	mov	r1, r8
 8007a82:	1851      	adds	r1, r2, r1
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	4649      	mov	r1, r9
 8007a88:	414b      	adcs	r3, r1
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a98:	4659      	mov	r1, fp
 8007a9a:	00cb      	lsls	r3, r1, #3
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aa2:	4651      	mov	r1, sl
 8007aa4:	00ca      	lsls	r2, r1, #3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	4642      	mov	r2, r8
 8007aae:	189b      	adds	r3, r3, r2
 8007ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	460a      	mov	r2, r1
 8007ab6:	eb42 0303 	adc.w	r3, r2, r3
 8007aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ac6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	008b      	lsls	r3, r1, #2
 8007ad8:	4641      	mov	r1, r8
 8007ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ade:	4641      	mov	r1, r8
 8007ae0:	008a      	lsls	r2, r1, #2
 8007ae2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ae6:	f7f9 f8ef 	bl	8000cc8 <__aeabi_uldivmod>
 8007aea:	4602      	mov	r2, r0
 8007aec:	460b      	mov	r3, r1
 8007aee:	4b0d      	ldr	r3, [pc, #52]	@ (8007b24 <UART_SetConfig+0x4e4>)
 8007af0:	fba3 1302 	umull	r1, r3, r3, r2
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	2164      	movs	r1, #100	@ 0x64
 8007af8:	fb01 f303 	mul.w	r3, r1, r3
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	3332      	adds	r3, #50	@ 0x32
 8007b02:	4a08      	ldr	r2, [pc, #32]	@ (8007b24 <UART_SetConfig+0x4e4>)
 8007b04:	fba2 2303 	umull	r2, r3, r2, r3
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f003 020f 	and.w	r2, r3, #15
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4422      	add	r2, r4
 8007b16:	609a      	str	r2, [r3, #8]
}
 8007b18:	bf00      	nop
 8007b1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b24:	51eb851f 	.word	0x51eb851f

08007b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b28:	b084      	sub	sp, #16
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	f107 001c 	add.w	r0, r7, #28
 8007b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d123      	bne.n	8007b8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d105      	bne.n	8007b7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa9a 	bl	80080b8 <USB_CoreReset>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
 8007b88:	e01b      	b.n	8007bc2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa8e 	bl	80080b8 <USB_CoreReset>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ba0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bb4:	e005      	b.n	8007bc2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bc2:	7fbb      	ldrb	r3, [r7, #30]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d10b      	bne.n	8007be0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f043 0206 	orr.w	r2, r3, #6
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f043 0220 	orr.w	r2, r3, #32
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bec:	b004      	add	sp, #16
 8007bee:	4770      	bx	lr

08007bf0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f023 0201 	bic.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c2e:	78fb      	ldrb	r3, [r7, #3]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d115      	bne.n	8007c60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c40:	200a      	movs	r0, #10
 8007c42:	f7fb fbe3 	bl	800340c <HAL_Delay>
      ms += 10U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	330a      	adds	r3, #10
 8007c4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa25 	bl	800809c <USB_GetMode>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d01e      	beq.n	8007c96 <USB_SetCurrentMode+0x84>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c5c:	d9f0      	bls.n	8007c40 <USB_SetCurrentMode+0x2e>
 8007c5e:	e01a      	b.n	8007c96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c60:	78fb      	ldrb	r3, [r7, #3]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d115      	bne.n	8007c92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c72:	200a      	movs	r0, #10
 8007c74:	f7fb fbca 	bl	800340c <HAL_Delay>
      ms += 10U;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	330a      	adds	r3, #10
 8007c7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa0c 	bl	800809c <USB_GetMode>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <USB_SetCurrentMode+0x84>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c8e:	d9f0      	bls.n	8007c72 <USB_SetCurrentMode+0x60>
 8007c90:	e001      	b.n	8007c96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e005      	b.n	8007ca2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2bc8      	cmp	r3, #200	@ 0xc8
 8007c9a:	d101      	bne.n	8007ca0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e000      	b.n	8007ca2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cac:	b084      	sub	sp, #16
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b086      	sub	sp, #24
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	e009      	b.n	8007ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3340      	adds	r3, #64	@ 0x40
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	2b0e      	cmp	r3, #14
 8007ce4:	d9f2      	bls.n	8007ccc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007ce6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d11c      	bne.n	8007d28 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cfc:	f043 0302 	orr.w	r3, r3, #2
 8007d00:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d06:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e005      	b.n	8007d34 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d10d      	bne.n	8007d64 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007d48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007d50:	2100      	movs	r1, #0
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f968 	bl	8008028 <USB_SetDevSpeed>
 8007d58:	e008      	b.n	8007d6c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f963 	bl	8008028 <USB_SetDevSpeed>
 8007d62:	e003      	b.n	8007d6c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d64:	2103      	movs	r1, #3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f95e 	bl	8008028 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d6c:	2110      	movs	r1, #16
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f8fa 	bl	8007f68 <USB_FlushTxFifo>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f924 	bl	8007fcc <USB_FlushRxFifo>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d94:	461a      	mov	r2, r3
 8007d96:	2300      	movs	r3, #0
 8007d98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	461a      	mov	r2, r3
 8007da2:	2300      	movs	r3, #0
 8007da4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dac:	461a      	mov	r2, r3
 8007dae:	2300      	movs	r3, #0
 8007db0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	e043      	b.n	8007e40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dce:	d118      	bne.n	8007e02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007de2:	461a      	mov	r2, r3
 8007de4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	e013      	b.n	8007e14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e008      	b.n	8007e14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2300      	movs	r3, #0
 8007e12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e20:	461a      	mov	r2, r3
 8007e22:	2300      	movs	r3, #0
 8007e24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e32:	461a      	mov	r2, r3
 8007e34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e44:	461a      	mov	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d3b5      	bcc.n	8007db8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	e043      	b.n	8007eda <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e68:	d118      	bne.n	8007e9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	e013      	b.n	8007eae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e008      	b.n	8007eae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ede:	461a      	mov	r2, r3
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d3b5      	bcc.n	8007e52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007f06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d105      	bne.n	8007f1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	f043 0210 	orr.w	r2, r3, #16
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	4b10      	ldr	r3, [pc, #64]	@ (8007f64 <USB_DevInit+0x2b8>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007f28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f043 0208 	orr.w	r2, r3, #8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007f3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d107      	bne.n	8007f54 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f4c:	f043 0304 	orr.w	r3, r3, #4
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f60:	b004      	add	sp, #16
 8007f62:	4770      	bx	lr
 8007f64:	803c3800 	.word	0x803c3800

08007f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f82:	d901      	bls.n	8007f88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e01b      	b.n	8007fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	daf2      	bge.n	8007f76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	019b      	lsls	r3, r3, #6
 8007f98:	f043 0220 	orr.w	r2, r3, #32
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fac:	d901      	bls.n	8007fb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e006      	b.n	8007fc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d0f0      	beq.n	8007fa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fe4:	d901      	bls.n	8007fea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e018      	b.n	800801c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	daf2      	bge.n	8007fd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2210      	movs	r2, #16
 8007ffa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008008:	d901      	bls.n	800800e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e006      	b.n	800801c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0310 	and.w	r3, r3, #16
 8008016:	2b10      	cmp	r3, #16
 8008018:	d0f0      	beq.n	8007ffc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008048:	4313      	orrs	r3, r2
 800804a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008074:	f023 0303 	bic.w	r3, r3, #3
 8008078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008088:	f043 0302 	orr.w	r3, r3, #2
 800808c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f003 0301 	and.w	r3, r3, #1
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080d0:	d901      	bls.n	80080d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e01b      	b.n	800810e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	daf2      	bge.n	80080c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f043 0201 	orr.w	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	3301      	adds	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080fa:	d901      	bls.n	8008100 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e006      	b.n	800810e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b01      	cmp	r3, #1
 800810a:	d0f0      	beq.n	80080ee <USB_CoreReset+0x36>

  return HAL_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3714      	adds	r7, #20
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <atof>:
 800811a:	2100      	movs	r1, #0
 800811c:	f000 be08 	b.w	8008d30 <strtod>

08008120 <atoi>:
 8008120:	220a      	movs	r2, #10
 8008122:	2100      	movs	r1, #0
 8008124:	f000 be8a 	b.w	8008e3c <strtol>

08008128 <sulp>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4604      	mov	r4, r0
 800812c:	460d      	mov	r5, r1
 800812e:	ec45 4b10 	vmov	d0, r4, r5
 8008132:	4616      	mov	r6, r2
 8008134:	f003 faf4 	bl	800b720 <__ulp>
 8008138:	ec51 0b10 	vmov	r0, r1, d0
 800813c:	b17e      	cbz	r6, 800815e <sulp+0x36>
 800813e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008142:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd09      	ble.n	800815e <sulp+0x36>
 800814a:	051b      	lsls	r3, r3, #20
 800814c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008150:	2400      	movs	r4, #0
 8008152:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008156:	4622      	mov	r2, r4
 8008158:	462b      	mov	r3, r5
 800815a:	f7f8 fa6d 	bl	8000638 <__aeabi_dmul>
 800815e:	ec41 0b10 	vmov	d0, r0, r1
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	0000      	movs	r0, r0
	...

08008168 <_strtod_l>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	b09f      	sub	sp, #124	@ 0x7c
 800816e:	460c      	mov	r4, r1
 8008170:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008172:	2200      	movs	r2, #0
 8008174:	921a      	str	r2, [sp, #104]	@ 0x68
 8008176:	9005      	str	r0, [sp, #20]
 8008178:	f04f 0a00 	mov.w	sl, #0
 800817c:	f04f 0b00 	mov.w	fp, #0
 8008180:	460a      	mov	r2, r1
 8008182:	9219      	str	r2, [sp, #100]	@ 0x64
 8008184:	7811      	ldrb	r1, [r2, #0]
 8008186:	292b      	cmp	r1, #43	@ 0x2b
 8008188:	d04a      	beq.n	8008220 <_strtod_l+0xb8>
 800818a:	d838      	bhi.n	80081fe <_strtod_l+0x96>
 800818c:	290d      	cmp	r1, #13
 800818e:	d832      	bhi.n	80081f6 <_strtod_l+0x8e>
 8008190:	2908      	cmp	r1, #8
 8008192:	d832      	bhi.n	80081fa <_strtod_l+0x92>
 8008194:	2900      	cmp	r1, #0
 8008196:	d03b      	beq.n	8008210 <_strtod_l+0xa8>
 8008198:	2200      	movs	r2, #0
 800819a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800819c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800819e:	782a      	ldrb	r2, [r5, #0]
 80081a0:	2a30      	cmp	r2, #48	@ 0x30
 80081a2:	f040 80b3 	bne.w	800830c <_strtod_l+0x1a4>
 80081a6:	786a      	ldrb	r2, [r5, #1]
 80081a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081ac:	2a58      	cmp	r2, #88	@ 0x58
 80081ae:	d16e      	bne.n	800828e <_strtod_l+0x126>
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4a8e      	ldr	r2, [pc, #568]	@ (80083f4 <_strtod_l+0x28c>)
 80081bc:	9805      	ldr	r0, [sp, #20]
 80081be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80081c0:	a919      	add	r1, sp, #100	@ 0x64
 80081c2:	f002 fb9f 	bl	800a904 <__gethex>
 80081c6:	f010 060f 	ands.w	r6, r0, #15
 80081ca:	4604      	mov	r4, r0
 80081cc:	d005      	beq.n	80081da <_strtod_l+0x72>
 80081ce:	2e06      	cmp	r6, #6
 80081d0:	d128      	bne.n	8008224 <_strtod_l+0xbc>
 80081d2:	3501      	adds	r5, #1
 80081d4:	2300      	movs	r3, #0
 80081d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80081d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 858e 	bne.w	8008cfe <_strtod_l+0xb96>
 80081e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081e4:	b1cb      	cbz	r3, 800821a <_strtod_l+0xb2>
 80081e6:	4652      	mov	r2, sl
 80081e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081ec:	ec43 2b10 	vmov	d0, r2, r3
 80081f0:	b01f      	add	sp, #124	@ 0x7c
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	2920      	cmp	r1, #32
 80081f8:	d1ce      	bne.n	8008198 <_strtod_l+0x30>
 80081fa:	3201      	adds	r2, #1
 80081fc:	e7c1      	b.n	8008182 <_strtod_l+0x1a>
 80081fe:	292d      	cmp	r1, #45	@ 0x2d
 8008200:	d1ca      	bne.n	8008198 <_strtod_l+0x30>
 8008202:	2101      	movs	r1, #1
 8008204:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008206:	1c51      	adds	r1, r2, #1
 8008208:	9119      	str	r1, [sp, #100]	@ 0x64
 800820a:	7852      	ldrb	r2, [r2, #1]
 800820c:	2a00      	cmp	r2, #0
 800820e:	d1c5      	bne.n	800819c <_strtod_l+0x34>
 8008210:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008212:	9419      	str	r4, [sp, #100]	@ 0x64
 8008214:	2b00      	cmp	r3, #0
 8008216:	f040 8570 	bne.w	8008cfa <_strtod_l+0xb92>
 800821a:	4652      	mov	r2, sl
 800821c:	465b      	mov	r3, fp
 800821e:	e7e5      	b.n	80081ec <_strtod_l+0x84>
 8008220:	2100      	movs	r1, #0
 8008222:	e7ef      	b.n	8008204 <_strtod_l+0x9c>
 8008224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008226:	b13a      	cbz	r2, 8008238 <_strtod_l+0xd0>
 8008228:	2135      	movs	r1, #53	@ 0x35
 800822a:	a81c      	add	r0, sp, #112	@ 0x70
 800822c:	f003 fb72 	bl	800b914 <__copybits>
 8008230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	f002 ff40 	bl	800b0b8 <_Bfree>
 8008238:	3e01      	subs	r6, #1
 800823a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800823c:	2e04      	cmp	r6, #4
 800823e:	d806      	bhi.n	800824e <_strtod_l+0xe6>
 8008240:	e8df f006 	tbb	[pc, r6]
 8008244:	201d0314 	.word	0x201d0314
 8008248:	14          	.byte	0x14
 8008249:	00          	.byte	0x00
 800824a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800824e:	05e1      	lsls	r1, r4, #23
 8008250:	bf48      	it	mi
 8008252:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800825a:	0d1b      	lsrs	r3, r3, #20
 800825c:	051b      	lsls	r3, r3, #20
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1bb      	bne.n	80081da <_strtod_l+0x72>
 8008262:	f001 fc0d 	bl	8009a80 <__errno>
 8008266:	2322      	movs	r3, #34	@ 0x22
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	e7b6      	b.n	80081da <_strtod_l+0x72>
 800826c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008270:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008278:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800827c:	e7e7      	b.n	800824e <_strtod_l+0xe6>
 800827e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80083fc <_strtod_l+0x294>
 8008282:	e7e4      	b.n	800824e <_strtod_l+0xe6>
 8008284:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008288:	f04f 3aff 	mov.w	sl, #4294967295
 800828c:	e7df      	b.n	800824e <_strtod_l+0xe6>
 800828e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	9219      	str	r2, [sp, #100]	@ 0x64
 8008294:	785b      	ldrb	r3, [r3, #1]
 8008296:	2b30      	cmp	r3, #48	@ 0x30
 8008298:	d0f9      	beq.n	800828e <_strtod_l+0x126>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d09d      	beq.n	80081da <_strtod_l+0x72>
 800829e:	2301      	movs	r3, #1
 80082a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80082a6:	2300      	movs	r3, #0
 80082a8:	9308      	str	r3, [sp, #32]
 80082aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ac:	461f      	mov	r7, r3
 80082ae:	220a      	movs	r2, #10
 80082b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80082b2:	7805      	ldrb	r5, [r0, #0]
 80082b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80082b8:	b2d9      	uxtb	r1, r3
 80082ba:	2909      	cmp	r1, #9
 80082bc:	d928      	bls.n	8008310 <_strtod_l+0x1a8>
 80082be:	494e      	ldr	r1, [pc, #312]	@ (80083f8 <_strtod_l+0x290>)
 80082c0:	2201      	movs	r2, #1
 80082c2:	f001 fb6d 	bl	80099a0 <strncmp>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d032      	beq.n	8008330 <_strtod_l+0x1c8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	462a      	mov	r2, r5
 80082ce:	4681      	mov	r9, r0
 80082d0:	463d      	mov	r5, r7
 80082d2:	4603      	mov	r3, r0
 80082d4:	2a65      	cmp	r2, #101	@ 0x65
 80082d6:	d001      	beq.n	80082dc <_strtod_l+0x174>
 80082d8:	2a45      	cmp	r2, #69	@ 0x45
 80082da:	d114      	bne.n	8008306 <_strtod_l+0x19e>
 80082dc:	b91d      	cbnz	r5, 80082e6 <_strtod_l+0x17e>
 80082de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082e0:	4302      	orrs	r2, r0
 80082e2:	d095      	beq.n	8008210 <_strtod_l+0xa8>
 80082e4:	2500      	movs	r5, #0
 80082e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082e8:	1c62      	adds	r2, r4, #1
 80082ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ec:	7862      	ldrb	r2, [r4, #1]
 80082ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80082f0:	d077      	beq.n	80083e2 <_strtod_l+0x27a>
 80082f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80082f4:	d07b      	beq.n	80083ee <_strtod_l+0x286>
 80082f6:	f04f 0c00 	mov.w	ip, #0
 80082fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082fe:	2909      	cmp	r1, #9
 8008300:	f240 8082 	bls.w	8008408 <_strtod_l+0x2a0>
 8008304:	9419      	str	r4, [sp, #100]	@ 0x64
 8008306:	f04f 0800 	mov.w	r8, #0
 800830a:	e0a2      	b.n	8008452 <_strtod_l+0x2ea>
 800830c:	2300      	movs	r3, #0
 800830e:	e7c7      	b.n	80082a0 <_strtod_l+0x138>
 8008310:	2f08      	cmp	r7, #8
 8008312:	bfd5      	itete	le
 8008314:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008316:	9908      	ldrgt	r1, [sp, #32]
 8008318:	fb02 3301 	mlale	r3, r2, r1, r3
 800831c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008320:	f100 0001 	add.w	r0, r0, #1
 8008324:	bfd4      	ite	le
 8008326:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008328:	9308      	strgt	r3, [sp, #32]
 800832a:	3701      	adds	r7, #1
 800832c:	9019      	str	r0, [sp, #100]	@ 0x64
 800832e:	e7bf      	b.n	80082b0 <_strtod_l+0x148>
 8008330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	9219      	str	r2, [sp, #100]	@ 0x64
 8008336:	785a      	ldrb	r2, [r3, #1]
 8008338:	b37f      	cbz	r7, 800839a <_strtod_l+0x232>
 800833a:	4681      	mov	r9, r0
 800833c:	463d      	mov	r5, r7
 800833e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008342:	2b09      	cmp	r3, #9
 8008344:	d912      	bls.n	800836c <_strtod_l+0x204>
 8008346:	2301      	movs	r3, #1
 8008348:	e7c4      	b.n	80082d4 <_strtod_l+0x16c>
 800834a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800834c:	1c5a      	adds	r2, r3, #1
 800834e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008350:	785a      	ldrb	r2, [r3, #1]
 8008352:	3001      	adds	r0, #1
 8008354:	2a30      	cmp	r2, #48	@ 0x30
 8008356:	d0f8      	beq.n	800834a <_strtod_l+0x1e2>
 8008358:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800835c:	2b08      	cmp	r3, #8
 800835e:	f200 84d3 	bhi.w	8008d08 <_strtod_l+0xba0>
 8008362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008364:	930c      	str	r3, [sp, #48]	@ 0x30
 8008366:	4681      	mov	r9, r0
 8008368:	2000      	movs	r0, #0
 800836a:	4605      	mov	r5, r0
 800836c:	3a30      	subs	r2, #48	@ 0x30
 800836e:	f100 0301 	add.w	r3, r0, #1
 8008372:	d02a      	beq.n	80083ca <_strtod_l+0x262>
 8008374:	4499      	add	r9, r3
 8008376:	eb00 0c05 	add.w	ip, r0, r5
 800837a:	462b      	mov	r3, r5
 800837c:	210a      	movs	r1, #10
 800837e:	4563      	cmp	r3, ip
 8008380:	d10d      	bne.n	800839e <_strtod_l+0x236>
 8008382:	1c69      	adds	r1, r5, #1
 8008384:	4401      	add	r1, r0
 8008386:	4428      	add	r0, r5
 8008388:	2808      	cmp	r0, #8
 800838a:	dc16      	bgt.n	80083ba <_strtod_l+0x252>
 800838c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800838e:	230a      	movs	r3, #10
 8008390:	fb03 2300 	mla	r3, r3, r0, r2
 8008394:	930a      	str	r3, [sp, #40]	@ 0x28
 8008396:	2300      	movs	r3, #0
 8008398:	e018      	b.n	80083cc <_strtod_l+0x264>
 800839a:	4638      	mov	r0, r7
 800839c:	e7da      	b.n	8008354 <_strtod_l+0x1ec>
 800839e:	2b08      	cmp	r3, #8
 80083a0:	f103 0301 	add.w	r3, r3, #1
 80083a4:	dc03      	bgt.n	80083ae <_strtod_l+0x246>
 80083a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80083a8:	434e      	muls	r6, r1
 80083aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80083ac:	e7e7      	b.n	800837e <_strtod_l+0x216>
 80083ae:	2b10      	cmp	r3, #16
 80083b0:	bfde      	ittt	le
 80083b2:	9e08      	ldrle	r6, [sp, #32]
 80083b4:	434e      	mulle	r6, r1
 80083b6:	9608      	strle	r6, [sp, #32]
 80083b8:	e7e1      	b.n	800837e <_strtod_l+0x216>
 80083ba:	280f      	cmp	r0, #15
 80083bc:	dceb      	bgt.n	8008396 <_strtod_l+0x22e>
 80083be:	9808      	ldr	r0, [sp, #32]
 80083c0:	230a      	movs	r3, #10
 80083c2:	fb03 2300 	mla	r3, r3, r0, r2
 80083c6:	9308      	str	r3, [sp, #32]
 80083c8:	e7e5      	b.n	8008396 <_strtod_l+0x22e>
 80083ca:	4629      	mov	r1, r5
 80083cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083ce:	1c50      	adds	r0, r2, #1
 80083d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80083d2:	7852      	ldrb	r2, [r2, #1]
 80083d4:	4618      	mov	r0, r3
 80083d6:	460d      	mov	r5, r1
 80083d8:	e7b1      	b.n	800833e <_strtod_l+0x1d6>
 80083da:	f04f 0900 	mov.w	r9, #0
 80083de:	2301      	movs	r3, #1
 80083e0:	e77d      	b.n	80082de <_strtod_l+0x176>
 80083e2:	f04f 0c00 	mov.w	ip, #0
 80083e6:	1ca2      	adds	r2, r4, #2
 80083e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80083ea:	78a2      	ldrb	r2, [r4, #2]
 80083ec:	e785      	b.n	80082fa <_strtod_l+0x192>
 80083ee:	f04f 0c01 	mov.w	ip, #1
 80083f2:	e7f8      	b.n	80083e6 <_strtod_l+0x27e>
 80083f4:	0800d2f0 	.word	0x0800d2f0
 80083f8:	0800d2d8 	.word	0x0800d2d8
 80083fc:	7ff00000 	.word	0x7ff00000
 8008400:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008402:	1c51      	adds	r1, r2, #1
 8008404:	9119      	str	r1, [sp, #100]	@ 0x64
 8008406:	7852      	ldrb	r2, [r2, #1]
 8008408:	2a30      	cmp	r2, #48	@ 0x30
 800840a:	d0f9      	beq.n	8008400 <_strtod_l+0x298>
 800840c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008410:	2908      	cmp	r1, #8
 8008412:	f63f af78 	bhi.w	8008306 <_strtod_l+0x19e>
 8008416:	3a30      	subs	r2, #48	@ 0x30
 8008418:	920e      	str	r2, [sp, #56]	@ 0x38
 800841a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800841c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800841e:	f04f 080a 	mov.w	r8, #10
 8008422:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008424:	1c56      	adds	r6, r2, #1
 8008426:	9619      	str	r6, [sp, #100]	@ 0x64
 8008428:	7852      	ldrb	r2, [r2, #1]
 800842a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800842e:	f1be 0f09 	cmp.w	lr, #9
 8008432:	d939      	bls.n	80084a8 <_strtod_l+0x340>
 8008434:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008436:	1a76      	subs	r6, r6, r1
 8008438:	2e08      	cmp	r6, #8
 800843a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800843e:	dc03      	bgt.n	8008448 <_strtod_l+0x2e0>
 8008440:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008442:	4588      	cmp	r8, r1
 8008444:	bfa8      	it	ge
 8008446:	4688      	movge	r8, r1
 8008448:	f1bc 0f00 	cmp.w	ip, #0
 800844c:	d001      	beq.n	8008452 <_strtod_l+0x2ea>
 800844e:	f1c8 0800 	rsb	r8, r8, #0
 8008452:	2d00      	cmp	r5, #0
 8008454:	d14e      	bne.n	80084f4 <_strtod_l+0x38c>
 8008456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008458:	4308      	orrs	r0, r1
 800845a:	f47f aebe 	bne.w	80081da <_strtod_l+0x72>
 800845e:	2b00      	cmp	r3, #0
 8008460:	f47f aed6 	bne.w	8008210 <_strtod_l+0xa8>
 8008464:	2a69      	cmp	r2, #105	@ 0x69
 8008466:	d028      	beq.n	80084ba <_strtod_l+0x352>
 8008468:	dc25      	bgt.n	80084b6 <_strtod_l+0x34e>
 800846a:	2a49      	cmp	r2, #73	@ 0x49
 800846c:	d025      	beq.n	80084ba <_strtod_l+0x352>
 800846e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008470:	f47f aece 	bne.w	8008210 <_strtod_l+0xa8>
 8008474:	499b      	ldr	r1, [pc, #620]	@ (80086e4 <_strtod_l+0x57c>)
 8008476:	a819      	add	r0, sp, #100	@ 0x64
 8008478:	f002 fc66 	bl	800ad48 <__match>
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f aec7 	beq.w	8008210 <_strtod_l+0xa8>
 8008482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b28      	cmp	r3, #40	@ 0x28
 8008488:	d12e      	bne.n	80084e8 <_strtod_l+0x380>
 800848a:	4997      	ldr	r1, [pc, #604]	@ (80086e8 <_strtod_l+0x580>)
 800848c:	aa1c      	add	r2, sp, #112	@ 0x70
 800848e:	a819      	add	r0, sp, #100	@ 0x64
 8008490:	f002 fc6e 	bl	800ad70 <__hexnan>
 8008494:	2805      	cmp	r0, #5
 8008496:	d127      	bne.n	80084e8 <_strtod_l+0x380>
 8008498:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800849a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800849e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80084a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80084a6:	e698      	b.n	80081da <_strtod_l+0x72>
 80084a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084aa:	fb08 2101 	mla	r1, r8, r1, r2
 80084ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80084b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80084b4:	e7b5      	b.n	8008422 <_strtod_l+0x2ba>
 80084b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80084b8:	e7da      	b.n	8008470 <_strtod_l+0x308>
 80084ba:	498c      	ldr	r1, [pc, #560]	@ (80086ec <_strtod_l+0x584>)
 80084bc:	a819      	add	r0, sp, #100	@ 0x64
 80084be:	f002 fc43 	bl	800ad48 <__match>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f43f aea4 	beq.w	8008210 <_strtod_l+0xa8>
 80084c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084ca:	4989      	ldr	r1, [pc, #548]	@ (80086f0 <_strtod_l+0x588>)
 80084cc:	3b01      	subs	r3, #1
 80084ce:	a819      	add	r0, sp, #100	@ 0x64
 80084d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80084d2:	f002 fc39 	bl	800ad48 <__match>
 80084d6:	b910      	cbnz	r0, 80084de <_strtod_l+0x376>
 80084d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084da:	3301      	adds	r3, #1
 80084dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80084de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008700 <_strtod_l+0x598>
 80084e2:	f04f 0a00 	mov.w	sl, #0
 80084e6:	e678      	b.n	80081da <_strtod_l+0x72>
 80084e8:	4882      	ldr	r0, [pc, #520]	@ (80086f4 <_strtod_l+0x58c>)
 80084ea:	f001 fb05 	bl	8009af8 <nan>
 80084ee:	ec5b ab10 	vmov	sl, fp, d0
 80084f2:	e672      	b.n	80081da <_strtod_l+0x72>
 80084f4:	eba8 0309 	sub.w	r3, r8, r9
 80084f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fc:	2f00      	cmp	r7, #0
 80084fe:	bf08      	it	eq
 8008500:	462f      	moveq	r7, r5
 8008502:	2d10      	cmp	r5, #16
 8008504:	462c      	mov	r4, r5
 8008506:	bfa8      	it	ge
 8008508:	2410      	movge	r4, #16
 800850a:	f7f8 f81b 	bl	8000544 <__aeabi_ui2d>
 800850e:	2d09      	cmp	r5, #9
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	dc13      	bgt.n	800853e <_strtod_l+0x3d6>
 8008516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	f43f ae5e 	beq.w	80081da <_strtod_l+0x72>
 800851e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008520:	dd78      	ble.n	8008614 <_strtod_l+0x4ac>
 8008522:	2b16      	cmp	r3, #22
 8008524:	dc5f      	bgt.n	80085e6 <_strtod_l+0x47e>
 8008526:	4974      	ldr	r1, [pc, #464]	@ (80086f8 <_strtod_l+0x590>)
 8008528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800852c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008530:	4652      	mov	r2, sl
 8008532:	465b      	mov	r3, fp
 8008534:	f7f8 f880 	bl	8000638 <__aeabi_dmul>
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	e64d      	b.n	80081da <_strtod_l+0x72>
 800853e:	4b6e      	ldr	r3, [pc, #440]	@ (80086f8 <_strtod_l+0x590>)
 8008540:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008544:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008548:	f7f8 f876 	bl	8000638 <__aeabi_dmul>
 800854c:	4682      	mov	sl, r0
 800854e:	9808      	ldr	r0, [sp, #32]
 8008550:	468b      	mov	fp, r1
 8008552:	f7f7 fff7 	bl	8000544 <__aeabi_ui2d>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	4650      	mov	r0, sl
 800855c:	4659      	mov	r1, fp
 800855e:	f7f7 feb5 	bl	80002cc <__adddf3>
 8008562:	2d0f      	cmp	r5, #15
 8008564:	4682      	mov	sl, r0
 8008566:	468b      	mov	fp, r1
 8008568:	ddd5      	ble.n	8008516 <_strtod_l+0x3ae>
 800856a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856c:	1b2c      	subs	r4, r5, r4
 800856e:	441c      	add	r4, r3
 8008570:	2c00      	cmp	r4, #0
 8008572:	f340 8096 	ble.w	80086a2 <_strtod_l+0x53a>
 8008576:	f014 030f 	ands.w	r3, r4, #15
 800857a:	d00a      	beq.n	8008592 <_strtod_l+0x42a>
 800857c:	495e      	ldr	r1, [pc, #376]	@ (80086f8 <_strtod_l+0x590>)
 800857e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858a:	f7f8 f855 	bl	8000638 <__aeabi_dmul>
 800858e:	4682      	mov	sl, r0
 8008590:	468b      	mov	fp, r1
 8008592:	f034 040f 	bics.w	r4, r4, #15
 8008596:	d073      	beq.n	8008680 <_strtod_l+0x518>
 8008598:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800859c:	dd48      	ble.n	8008630 <_strtod_l+0x4c8>
 800859e:	2400      	movs	r4, #0
 80085a0:	46a0      	mov	r8, r4
 80085a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80085a4:	46a1      	mov	r9, r4
 80085a6:	9a05      	ldr	r2, [sp, #20]
 80085a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008700 <_strtod_l+0x598>
 80085ac:	2322      	movs	r3, #34	@ 0x22
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	f04f 0a00 	mov.w	sl, #0
 80085b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f43f ae0f 	beq.w	80081da <_strtod_l+0x72>
 80085bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085be:	9805      	ldr	r0, [sp, #20]
 80085c0:	f002 fd7a 	bl	800b0b8 <_Bfree>
 80085c4:	9805      	ldr	r0, [sp, #20]
 80085c6:	4649      	mov	r1, r9
 80085c8:	f002 fd76 	bl	800b0b8 <_Bfree>
 80085cc:	9805      	ldr	r0, [sp, #20]
 80085ce:	4641      	mov	r1, r8
 80085d0:	f002 fd72 	bl	800b0b8 <_Bfree>
 80085d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085d6:	9805      	ldr	r0, [sp, #20]
 80085d8:	f002 fd6e 	bl	800b0b8 <_Bfree>
 80085dc:	9805      	ldr	r0, [sp, #20]
 80085de:	4621      	mov	r1, r4
 80085e0:	f002 fd6a 	bl	800b0b8 <_Bfree>
 80085e4:	e5f9      	b.n	80081da <_strtod_l+0x72>
 80085e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085ec:	4293      	cmp	r3, r2
 80085ee:	dbbc      	blt.n	800856a <_strtod_l+0x402>
 80085f0:	4c41      	ldr	r4, [pc, #260]	@ (80086f8 <_strtod_l+0x590>)
 80085f2:	f1c5 050f 	rsb	r5, r5, #15
 80085f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085fa:	4652      	mov	r2, sl
 80085fc:	465b      	mov	r3, fp
 80085fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008602:	f7f8 f819 	bl	8000638 <__aeabi_dmul>
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	1b5d      	subs	r5, r3, r5
 800860a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800860e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008612:	e78f      	b.n	8008534 <_strtod_l+0x3cc>
 8008614:	3316      	adds	r3, #22
 8008616:	dba8      	blt.n	800856a <_strtod_l+0x402>
 8008618:	4b37      	ldr	r3, [pc, #220]	@ (80086f8 <_strtod_l+0x590>)
 800861a:	eba9 0808 	sub.w	r8, r9, r8
 800861e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008622:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008626:	4650      	mov	r0, sl
 8008628:	4659      	mov	r1, fp
 800862a:	f7f8 f92f 	bl	800088c <__aeabi_ddiv>
 800862e:	e783      	b.n	8008538 <_strtod_l+0x3d0>
 8008630:	4b32      	ldr	r3, [pc, #200]	@ (80086fc <_strtod_l+0x594>)
 8008632:	9308      	str	r3, [sp, #32]
 8008634:	2300      	movs	r3, #0
 8008636:	1124      	asrs	r4, r4, #4
 8008638:	4650      	mov	r0, sl
 800863a:	4659      	mov	r1, fp
 800863c:	461e      	mov	r6, r3
 800863e:	2c01      	cmp	r4, #1
 8008640:	dc21      	bgt.n	8008686 <_strtod_l+0x51e>
 8008642:	b10b      	cbz	r3, 8008648 <_strtod_l+0x4e0>
 8008644:	4682      	mov	sl, r0
 8008646:	468b      	mov	fp, r1
 8008648:	492c      	ldr	r1, [pc, #176]	@ (80086fc <_strtod_l+0x594>)
 800864a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800864e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008652:	4652      	mov	r2, sl
 8008654:	465b      	mov	r3, fp
 8008656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800865a:	f7f7 ffed 	bl	8000638 <__aeabi_dmul>
 800865e:	4b28      	ldr	r3, [pc, #160]	@ (8008700 <_strtod_l+0x598>)
 8008660:	460a      	mov	r2, r1
 8008662:	400b      	ands	r3, r1
 8008664:	4927      	ldr	r1, [pc, #156]	@ (8008704 <_strtod_l+0x59c>)
 8008666:	428b      	cmp	r3, r1
 8008668:	4682      	mov	sl, r0
 800866a:	d898      	bhi.n	800859e <_strtod_l+0x436>
 800866c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008670:	428b      	cmp	r3, r1
 8008672:	bf86      	itte	hi
 8008674:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008708 <_strtod_l+0x5a0>
 8008678:	f04f 3aff 	movhi.w	sl, #4294967295
 800867c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008680:	2300      	movs	r3, #0
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	e07a      	b.n	800877c <_strtod_l+0x614>
 8008686:	07e2      	lsls	r2, r4, #31
 8008688:	d505      	bpl.n	8008696 <_strtod_l+0x52e>
 800868a:	9b08      	ldr	r3, [sp, #32]
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	f7f7 ffd2 	bl	8000638 <__aeabi_dmul>
 8008694:	2301      	movs	r3, #1
 8008696:	9a08      	ldr	r2, [sp, #32]
 8008698:	3208      	adds	r2, #8
 800869a:	3601      	adds	r6, #1
 800869c:	1064      	asrs	r4, r4, #1
 800869e:	9208      	str	r2, [sp, #32]
 80086a0:	e7cd      	b.n	800863e <_strtod_l+0x4d6>
 80086a2:	d0ed      	beq.n	8008680 <_strtod_l+0x518>
 80086a4:	4264      	negs	r4, r4
 80086a6:	f014 020f 	ands.w	r2, r4, #15
 80086aa:	d00a      	beq.n	80086c2 <_strtod_l+0x55a>
 80086ac:	4b12      	ldr	r3, [pc, #72]	@ (80086f8 <_strtod_l+0x590>)
 80086ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f8 f8e7 	bl	800088c <__aeabi_ddiv>
 80086be:	4682      	mov	sl, r0
 80086c0:	468b      	mov	fp, r1
 80086c2:	1124      	asrs	r4, r4, #4
 80086c4:	d0dc      	beq.n	8008680 <_strtod_l+0x518>
 80086c6:	2c1f      	cmp	r4, #31
 80086c8:	dd20      	ble.n	800870c <_strtod_l+0x5a4>
 80086ca:	2400      	movs	r4, #0
 80086cc:	46a0      	mov	r8, r4
 80086ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80086d0:	46a1      	mov	r9, r4
 80086d2:	9a05      	ldr	r2, [sp, #20]
 80086d4:	2322      	movs	r3, #34	@ 0x22
 80086d6:	f04f 0a00 	mov.w	sl, #0
 80086da:	f04f 0b00 	mov.w	fp, #0
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e768      	b.n	80085b4 <_strtod_l+0x44c>
 80086e2:	bf00      	nop
 80086e4:	0800d43e 	.word	0x0800d43e
 80086e8:	0800d2dc 	.word	0x0800d2dc
 80086ec:	0800d436 	.word	0x0800d436
 80086f0:	0800d470 	.word	0x0800d470
 80086f4:	0800d6fc 	.word	0x0800d6fc
 80086f8:	0800d5e8 	.word	0x0800d5e8
 80086fc:	0800d5c0 	.word	0x0800d5c0
 8008700:	7ff00000 	.word	0x7ff00000
 8008704:	7ca00000 	.word	0x7ca00000
 8008708:	7fefffff 	.word	0x7fefffff
 800870c:	f014 0310 	ands.w	r3, r4, #16
 8008710:	bf18      	it	ne
 8008712:	236a      	movne	r3, #106	@ 0x6a
 8008714:	4ea9      	ldr	r6, [pc, #676]	@ (80089bc <_strtod_l+0x854>)
 8008716:	9308      	str	r3, [sp, #32]
 8008718:	4650      	mov	r0, sl
 800871a:	4659      	mov	r1, fp
 800871c:	2300      	movs	r3, #0
 800871e:	07e2      	lsls	r2, r4, #31
 8008720:	d504      	bpl.n	800872c <_strtod_l+0x5c4>
 8008722:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008726:	f7f7 ff87 	bl	8000638 <__aeabi_dmul>
 800872a:	2301      	movs	r3, #1
 800872c:	1064      	asrs	r4, r4, #1
 800872e:	f106 0608 	add.w	r6, r6, #8
 8008732:	d1f4      	bne.n	800871e <_strtod_l+0x5b6>
 8008734:	b10b      	cbz	r3, 800873a <_strtod_l+0x5d2>
 8008736:	4682      	mov	sl, r0
 8008738:	468b      	mov	fp, r1
 800873a:	9b08      	ldr	r3, [sp, #32]
 800873c:	b1b3      	cbz	r3, 800876c <_strtod_l+0x604>
 800873e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008742:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008746:	2b00      	cmp	r3, #0
 8008748:	4659      	mov	r1, fp
 800874a:	dd0f      	ble.n	800876c <_strtod_l+0x604>
 800874c:	2b1f      	cmp	r3, #31
 800874e:	dd55      	ble.n	80087fc <_strtod_l+0x694>
 8008750:	2b34      	cmp	r3, #52	@ 0x34
 8008752:	bfde      	ittt	le
 8008754:	f04f 33ff 	movle.w	r3, #4294967295
 8008758:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800875c:	4093      	lslle	r3, r2
 800875e:	f04f 0a00 	mov.w	sl, #0
 8008762:	bfcc      	ite	gt
 8008764:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008768:	ea03 0b01 	andle.w	fp, r3, r1
 800876c:	2200      	movs	r2, #0
 800876e:	2300      	movs	r3, #0
 8008770:	4650      	mov	r0, sl
 8008772:	4659      	mov	r1, fp
 8008774:	f7f8 f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 8008778:	2800      	cmp	r0, #0
 800877a:	d1a6      	bne.n	80086ca <_strtod_l+0x562>
 800877c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008782:	9805      	ldr	r0, [sp, #20]
 8008784:	462b      	mov	r3, r5
 8008786:	463a      	mov	r2, r7
 8008788:	f002 fcfe 	bl	800b188 <__s2b>
 800878c:	900a      	str	r0, [sp, #40]	@ 0x28
 800878e:	2800      	cmp	r0, #0
 8008790:	f43f af05 	beq.w	800859e <_strtod_l+0x436>
 8008794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008796:	2a00      	cmp	r2, #0
 8008798:	eba9 0308 	sub.w	r3, r9, r8
 800879c:	bfa8      	it	ge
 800879e:	2300      	movge	r3, #0
 80087a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80087a2:	2400      	movs	r4, #0
 80087a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80087aa:	46a0      	mov	r8, r4
 80087ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ae:	9805      	ldr	r0, [sp, #20]
 80087b0:	6859      	ldr	r1, [r3, #4]
 80087b2:	f002 fc41 	bl	800b038 <_Balloc>
 80087b6:	4681      	mov	r9, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f43f aef4 	beq.w	80085a6 <_strtod_l+0x43e>
 80087be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	3202      	adds	r2, #2
 80087c4:	f103 010c 	add.w	r1, r3, #12
 80087c8:	0092      	lsls	r2, r2, #2
 80087ca:	300c      	adds	r0, #12
 80087cc:	f001 f985 	bl	8009ada <memcpy>
 80087d0:	ec4b ab10 	vmov	d0, sl, fp
 80087d4:	9805      	ldr	r0, [sp, #20]
 80087d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80087d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80087da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80087de:	f003 f80f 	bl	800b800 <__d2b>
 80087e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80087e4:	2800      	cmp	r0, #0
 80087e6:	f43f aede 	beq.w	80085a6 <_strtod_l+0x43e>
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	2101      	movs	r1, #1
 80087ee:	f002 fd61 	bl	800b2b4 <__i2b>
 80087f2:	4680      	mov	r8, r0
 80087f4:	b948      	cbnz	r0, 800880a <_strtod_l+0x6a2>
 80087f6:	f04f 0800 	mov.w	r8, #0
 80087fa:	e6d4      	b.n	80085a6 <_strtod_l+0x43e>
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	ea03 0a0a 	and.w	sl, r3, sl
 8008808:	e7b0      	b.n	800876c <_strtod_l+0x604>
 800880a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800880c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800880e:	2d00      	cmp	r5, #0
 8008810:	bfab      	itete	ge
 8008812:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008814:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008816:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008818:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800881a:	bfac      	ite	ge
 800881c:	18ef      	addge	r7, r5, r3
 800881e:	1b5e      	sublt	r6, r3, r5
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	1aed      	subs	r5, r5, r3
 8008824:	4415      	add	r5, r2
 8008826:	4b66      	ldr	r3, [pc, #408]	@ (80089c0 <_strtod_l+0x858>)
 8008828:	3d01      	subs	r5, #1
 800882a:	429d      	cmp	r5, r3
 800882c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008830:	da50      	bge.n	80088d4 <_strtod_l+0x76c>
 8008832:	1b5b      	subs	r3, r3, r5
 8008834:	2b1f      	cmp	r3, #31
 8008836:	eba2 0203 	sub.w	r2, r2, r3
 800883a:	f04f 0101 	mov.w	r1, #1
 800883e:	dc3d      	bgt.n	80088bc <_strtod_l+0x754>
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008846:	2300      	movs	r3, #0
 8008848:	9310      	str	r3, [sp, #64]	@ 0x40
 800884a:	18bd      	adds	r5, r7, r2
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	42af      	cmp	r7, r5
 8008850:	4416      	add	r6, r2
 8008852:	441e      	add	r6, r3
 8008854:	463b      	mov	r3, r7
 8008856:	bfa8      	it	ge
 8008858:	462b      	movge	r3, r5
 800885a:	42b3      	cmp	r3, r6
 800885c:	bfa8      	it	ge
 800885e:	4633      	movge	r3, r6
 8008860:	2b00      	cmp	r3, #0
 8008862:	bfc2      	ittt	gt
 8008864:	1aed      	subgt	r5, r5, r3
 8008866:	1af6      	subgt	r6, r6, r3
 8008868:	1aff      	subgt	r7, r7, r3
 800886a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd16      	ble.n	800889e <_strtod_l+0x736>
 8008870:	4641      	mov	r1, r8
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	461a      	mov	r2, r3
 8008876:	f002 fddd 	bl	800b434 <__pow5mult>
 800887a:	4680      	mov	r8, r0
 800887c:	2800      	cmp	r0, #0
 800887e:	d0ba      	beq.n	80087f6 <_strtod_l+0x68e>
 8008880:	4601      	mov	r1, r0
 8008882:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008884:	9805      	ldr	r0, [sp, #20]
 8008886:	f002 fd2b 	bl	800b2e0 <__multiply>
 800888a:	900e      	str	r0, [sp, #56]	@ 0x38
 800888c:	2800      	cmp	r0, #0
 800888e:	f43f ae8a 	beq.w	80085a6 <_strtod_l+0x43e>
 8008892:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008894:	9805      	ldr	r0, [sp, #20]
 8008896:	f002 fc0f 	bl	800b0b8 <_Bfree>
 800889a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889c:	931a      	str	r3, [sp, #104]	@ 0x68
 800889e:	2d00      	cmp	r5, #0
 80088a0:	dc1d      	bgt.n	80088de <_strtod_l+0x776>
 80088a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	dd23      	ble.n	80088f0 <_strtod_l+0x788>
 80088a8:	4649      	mov	r1, r9
 80088aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80088ac:	9805      	ldr	r0, [sp, #20]
 80088ae:	f002 fdc1 	bl	800b434 <__pow5mult>
 80088b2:	4681      	mov	r9, r0
 80088b4:	b9e0      	cbnz	r0, 80088f0 <_strtod_l+0x788>
 80088b6:	f04f 0900 	mov.w	r9, #0
 80088ba:	e674      	b.n	80085a6 <_strtod_l+0x43e>
 80088bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80088c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80088c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80088c8:	35e2      	adds	r5, #226	@ 0xe2
 80088ca:	fa01 f305 	lsl.w	r3, r1, r5
 80088ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80088d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80088d2:	e7ba      	b.n	800884a <_strtod_l+0x6e2>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80088d8:	2301      	movs	r3, #1
 80088da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088dc:	e7b5      	b.n	800884a <_strtod_l+0x6e2>
 80088de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088e0:	9805      	ldr	r0, [sp, #20]
 80088e2:	462a      	mov	r2, r5
 80088e4:	f002 fe00 	bl	800b4e8 <__lshift>
 80088e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d1d9      	bne.n	80088a2 <_strtod_l+0x73a>
 80088ee:	e65a      	b.n	80085a6 <_strtod_l+0x43e>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd07      	ble.n	8008904 <_strtod_l+0x79c>
 80088f4:	4649      	mov	r1, r9
 80088f6:	9805      	ldr	r0, [sp, #20]
 80088f8:	4632      	mov	r2, r6
 80088fa:	f002 fdf5 	bl	800b4e8 <__lshift>
 80088fe:	4681      	mov	r9, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	d0d8      	beq.n	80088b6 <_strtod_l+0x74e>
 8008904:	2f00      	cmp	r7, #0
 8008906:	dd08      	ble.n	800891a <_strtod_l+0x7b2>
 8008908:	4641      	mov	r1, r8
 800890a:	9805      	ldr	r0, [sp, #20]
 800890c:	463a      	mov	r2, r7
 800890e:	f002 fdeb 	bl	800b4e8 <__lshift>
 8008912:	4680      	mov	r8, r0
 8008914:	2800      	cmp	r0, #0
 8008916:	f43f ae46 	beq.w	80085a6 <_strtod_l+0x43e>
 800891a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800891c:	9805      	ldr	r0, [sp, #20]
 800891e:	464a      	mov	r2, r9
 8008920:	f002 fe6a 	bl	800b5f8 <__mdiff>
 8008924:	4604      	mov	r4, r0
 8008926:	2800      	cmp	r0, #0
 8008928:	f43f ae3d 	beq.w	80085a6 <_strtod_l+0x43e>
 800892c:	68c3      	ldr	r3, [r0, #12]
 800892e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008930:	2300      	movs	r3, #0
 8008932:	60c3      	str	r3, [r0, #12]
 8008934:	4641      	mov	r1, r8
 8008936:	f002 fe43 	bl	800b5c0 <__mcmp>
 800893a:	2800      	cmp	r0, #0
 800893c:	da46      	bge.n	80089cc <_strtod_l+0x864>
 800893e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008940:	ea53 030a 	orrs.w	r3, r3, sl
 8008944:	d16c      	bne.n	8008a20 <_strtod_l+0x8b8>
 8008946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800894a:	2b00      	cmp	r3, #0
 800894c:	d168      	bne.n	8008a20 <_strtod_l+0x8b8>
 800894e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008952:	0d1b      	lsrs	r3, r3, #20
 8008954:	051b      	lsls	r3, r3, #20
 8008956:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800895a:	d961      	bls.n	8008a20 <_strtod_l+0x8b8>
 800895c:	6963      	ldr	r3, [r4, #20]
 800895e:	b913      	cbnz	r3, 8008966 <_strtod_l+0x7fe>
 8008960:	6923      	ldr	r3, [r4, #16]
 8008962:	2b01      	cmp	r3, #1
 8008964:	dd5c      	ble.n	8008a20 <_strtod_l+0x8b8>
 8008966:	4621      	mov	r1, r4
 8008968:	2201      	movs	r2, #1
 800896a:	9805      	ldr	r0, [sp, #20]
 800896c:	f002 fdbc 	bl	800b4e8 <__lshift>
 8008970:	4641      	mov	r1, r8
 8008972:	4604      	mov	r4, r0
 8008974:	f002 fe24 	bl	800b5c0 <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	dd51      	ble.n	8008a20 <_strtod_l+0x8b8>
 800897c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008980:	9a08      	ldr	r2, [sp, #32]
 8008982:	0d1b      	lsrs	r3, r3, #20
 8008984:	051b      	lsls	r3, r3, #20
 8008986:	2a00      	cmp	r2, #0
 8008988:	d06b      	beq.n	8008a62 <_strtod_l+0x8fa>
 800898a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800898e:	d868      	bhi.n	8008a62 <_strtod_l+0x8fa>
 8008990:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008994:	f67f ae9d 	bls.w	80086d2 <_strtod_l+0x56a>
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <_strtod_l+0x85c>)
 800899a:	4650      	mov	r0, sl
 800899c:	4659      	mov	r1, fp
 800899e:	2200      	movs	r2, #0
 80089a0:	f7f7 fe4a 	bl	8000638 <__aeabi_dmul>
 80089a4:	4b08      	ldr	r3, [pc, #32]	@ (80089c8 <_strtod_l+0x860>)
 80089a6:	400b      	ands	r3, r1
 80089a8:	4682      	mov	sl, r0
 80089aa:	468b      	mov	fp, r1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f47f ae05 	bne.w	80085bc <_strtod_l+0x454>
 80089b2:	9a05      	ldr	r2, [sp, #20]
 80089b4:	2322      	movs	r3, #34	@ 0x22
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	e600      	b.n	80085bc <_strtod_l+0x454>
 80089ba:	bf00      	nop
 80089bc:	0800d308 	.word	0x0800d308
 80089c0:	fffffc02 	.word	0xfffffc02
 80089c4:	39500000 	.word	0x39500000
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80089d0:	d165      	bne.n	8008a9e <_strtod_l+0x936>
 80089d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80089d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d8:	b35a      	cbz	r2, 8008a32 <_strtod_l+0x8ca>
 80089da:	4a9f      	ldr	r2, [pc, #636]	@ (8008c58 <_strtod_l+0xaf0>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d12b      	bne.n	8008a38 <_strtod_l+0x8d0>
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	4651      	mov	r1, sl
 80089e4:	b303      	cbz	r3, 8008a28 <_strtod_l+0x8c0>
 80089e6:	4b9d      	ldr	r3, [pc, #628]	@ (8008c5c <_strtod_l+0xaf4>)
 80089e8:	465a      	mov	r2, fp
 80089ea:	4013      	ands	r3, r2
 80089ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295
 80089f4:	d81b      	bhi.n	8008a2e <_strtod_l+0x8c6>
 80089f6:	0d1b      	lsrs	r3, r3, #20
 80089f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	4299      	cmp	r1, r3
 8008a02:	d119      	bne.n	8008a38 <_strtod_l+0x8d0>
 8008a04:	4b96      	ldr	r3, [pc, #600]	@ (8008c60 <_strtod_l+0xaf8>)
 8008a06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d102      	bne.n	8008a12 <_strtod_l+0x8aa>
 8008a0c:	3101      	adds	r1, #1
 8008a0e:	f43f adca 	beq.w	80085a6 <_strtod_l+0x43e>
 8008a12:	4b92      	ldr	r3, [pc, #584]	@ (8008c5c <_strtod_l+0xaf4>)
 8008a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a16:	401a      	ands	r2, r3
 8008a18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008a1c:	f04f 0a00 	mov.w	sl, #0
 8008a20:	9b08      	ldr	r3, [sp, #32]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1b8      	bne.n	8008998 <_strtod_l+0x830>
 8008a26:	e5c9      	b.n	80085bc <_strtod_l+0x454>
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2c:	e7e8      	b.n	8008a00 <_strtod_l+0x898>
 8008a2e:	4613      	mov	r3, r2
 8008a30:	e7e6      	b.n	8008a00 <_strtod_l+0x898>
 8008a32:	ea53 030a 	orrs.w	r3, r3, sl
 8008a36:	d0a1      	beq.n	800897c <_strtod_l+0x814>
 8008a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a3a:	b1db      	cbz	r3, 8008a74 <_strtod_l+0x90c>
 8008a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a3e:	4213      	tst	r3, r2
 8008a40:	d0ee      	beq.n	8008a20 <_strtod_l+0x8b8>
 8008a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a44:	9a08      	ldr	r2, [sp, #32]
 8008a46:	4650      	mov	r0, sl
 8008a48:	4659      	mov	r1, fp
 8008a4a:	b1bb      	cbz	r3, 8008a7c <_strtod_l+0x914>
 8008a4c:	f7ff fb6c 	bl	8008128 <sulp>
 8008a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a54:	ec53 2b10 	vmov	r2, r3, d0
 8008a58:	f7f7 fc38 	bl	80002cc <__adddf3>
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	e7de      	b.n	8008a20 <_strtod_l+0x8b8>
 8008a62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a72:	e7d5      	b.n	8008a20 <_strtod_l+0x8b8>
 8008a74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a76:	ea13 0f0a 	tst.w	r3, sl
 8008a7a:	e7e1      	b.n	8008a40 <_strtod_l+0x8d8>
 8008a7c:	f7ff fb54 	bl	8008128 <sulp>
 8008a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a84:	ec53 2b10 	vmov	r2, r3, d0
 8008a88:	f7f7 fc1e 	bl	80002c8 <__aeabi_dsub>
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4682      	mov	sl, r0
 8008a92:	468b      	mov	fp, r1
 8008a94:	f7f8 f838 	bl	8000b08 <__aeabi_dcmpeq>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d0c1      	beq.n	8008a20 <_strtod_l+0x8b8>
 8008a9c:	e619      	b.n	80086d2 <_strtod_l+0x56a>
 8008a9e:	4641      	mov	r1, r8
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f002 ff05 	bl	800b8b0 <__ratio>
 8008aa6:	ec57 6b10 	vmov	r6, r7, d0
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	4639      	mov	r1, r7
 8008ab4:	f7f8 f83c 	bl	8000b30 <__aeabi_dcmple>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d06f      	beq.n	8008b9c <_strtod_l+0xa34>
 8008abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d17a      	bne.n	8008bb8 <_strtod_l+0xa50>
 8008ac2:	f1ba 0f00 	cmp.w	sl, #0
 8008ac6:	d158      	bne.n	8008b7a <_strtod_l+0xa12>
 8008ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d15a      	bne.n	8008b88 <_strtod_l+0xa20>
 8008ad2:	4b64      	ldr	r3, [pc, #400]	@ (8008c64 <_strtod_l+0xafc>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f8 f81f 	bl	8000b1c <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d159      	bne.n	8008b96 <_strtod_l+0xa2e>
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4b60      	ldr	r3, [pc, #384]	@ (8008c68 <_strtod_l+0xb00>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f7f7 fda5 	bl	8000638 <__aeabi_dmul>
 8008aee:	4606      	mov	r6, r0
 8008af0:	460f      	mov	r7, r1
 8008af2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008af6:	9606      	str	r6, [sp, #24]
 8008af8:	9307      	str	r3, [sp, #28]
 8008afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008afe:	4d57      	ldr	r5, [pc, #348]	@ (8008c5c <_strtod_l+0xaf4>)
 8008b00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b06:	401d      	ands	r5, r3
 8008b08:	4b58      	ldr	r3, [pc, #352]	@ (8008c6c <_strtod_l+0xb04>)
 8008b0a:	429d      	cmp	r5, r3
 8008b0c:	f040 80b2 	bne.w	8008c74 <_strtod_l+0xb0c>
 8008b10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b16:	ec4b ab10 	vmov	d0, sl, fp
 8008b1a:	f002 fe01 	bl	800b720 <__ulp>
 8008b1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b22:	ec51 0b10 	vmov	r0, r1, d0
 8008b26:	f7f7 fd87 	bl	8000638 <__aeabi_dmul>
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	f7f7 fbcd 	bl	80002cc <__adddf3>
 8008b32:	460b      	mov	r3, r1
 8008b34:	4949      	ldr	r1, [pc, #292]	@ (8008c5c <_strtod_l+0xaf4>)
 8008b36:	4a4e      	ldr	r2, [pc, #312]	@ (8008c70 <_strtod_l+0xb08>)
 8008b38:	4019      	ands	r1, r3
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	d942      	bls.n	8008bc6 <_strtod_l+0xa5e>
 8008b40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b42:	4b47      	ldr	r3, [pc, #284]	@ (8008c60 <_strtod_l+0xaf8>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d103      	bne.n	8008b50 <_strtod_l+0x9e8>
 8008b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f43f ad2b 	beq.w	80085a6 <_strtod_l+0x43e>
 8008b50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c60 <_strtod_l+0xaf8>
 8008b54:	f04f 3aff 	mov.w	sl, #4294967295
 8008b58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b5a:	9805      	ldr	r0, [sp, #20]
 8008b5c:	f002 faac 	bl	800b0b8 <_Bfree>
 8008b60:	9805      	ldr	r0, [sp, #20]
 8008b62:	4649      	mov	r1, r9
 8008b64:	f002 faa8 	bl	800b0b8 <_Bfree>
 8008b68:	9805      	ldr	r0, [sp, #20]
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	f002 faa4 	bl	800b0b8 <_Bfree>
 8008b70:	9805      	ldr	r0, [sp, #20]
 8008b72:	4621      	mov	r1, r4
 8008b74:	f002 faa0 	bl	800b0b8 <_Bfree>
 8008b78:	e618      	b.n	80087ac <_strtod_l+0x644>
 8008b7a:	f1ba 0f01 	cmp.w	sl, #1
 8008b7e:	d103      	bne.n	8008b88 <_strtod_l+0xa20>
 8008b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f43f ada5 	beq.w	80086d2 <_strtod_l+0x56a>
 8008b88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008c38 <_strtod_l+0xad0>
 8008b8c:	4f35      	ldr	r7, [pc, #212]	@ (8008c64 <_strtod_l+0xafc>)
 8008b8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b92:	2600      	movs	r6, #0
 8008b94:	e7b1      	b.n	8008afa <_strtod_l+0x992>
 8008b96:	4f34      	ldr	r7, [pc, #208]	@ (8008c68 <_strtod_l+0xb00>)
 8008b98:	2600      	movs	r6, #0
 8008b9a:	e7aa      	b.n	8008af2 <_strtod_l+0x98a>
 8008b9c:	4b32      	ldr	r3, [pc, #200]	@ (8008c68 <_strtod_l+0xb00>)
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f7f7 fd48 	bl	8000638 <__aeabi_dmul>
 8008ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d09f      	beq.n	8008af2 <_strtod_l+0x98a>
 8008bb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008bb6:	e7a0      	b.n	8008afa <_strtod_l+0x992>
 8008bb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008c40 <_strtod_l+0xad8>
 8008bbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bc0:	ec57 6b17 	vmov	r6, r7, d7
 8008bc4:	e799      	b.n	8008afa <_strtod_l+0x992>
 8008bc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1c1      	bne.n	8008b58 <_strtod_l+0x9f0>
 8008bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bd8:	0d1b      	lsrs	r3, r3, #20
 8008bda:	051b      	lsls	r3, r3, #20
 8008bdc:	429d      	cmp	r5, r3
 8008bde:	d1bb      	bne.n	8008b58 <_strtod_l+0x9f0>
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f8 f888 	bl	8000cf8 <__aeabi_d2lz>
 8008be8:	f7f7 fcf8 	bl	80005dc <__aeabi_l2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 fb68 	bl	80002c8 <__aeabi_dsub>
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c06:	ea46 060a 	orr.w	r6, r6, sl
 8008c0a:	431e      	orrs	r6, r3
 8008c0c:	d06f      	beq.n	8008cee <_strtod_l+0xb86>
 8008c0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c48 <_strtod_l+0xae0>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 ff82 	bl	8000b1c <__aeabi_dcmplt>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f47f accf 	bne.w	80085bc <_strtod_l+0x454>
 8008c1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c50 <_strtod_l+0xae8>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c28:	f7f7 ff96 	bl	8000b58 <__aeabi_dcmpgt>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d093      	beq.n	8008b58 <_strtod_l+0x9f0>
 8008c30:	e4c4      	b.n	80085bc <_strtod_l+0x454>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	bff00000 	.word	0xbff00000
 8008c40:	00000000 	.word	0x00000000
 8008c44:	3ff00000 	.word	0x3ff00000
 8008c48:	94a03595 	.word	0x94a03595
 8008c4c:	3fdfffff 	.word	0x3fdfffff
 8008c50:	35afe535 	.word	0x35afe535
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	000fffff 	.word	0x000fffff
 8008c5c:	7ff00000 	.word	0x7ff00000
 8008c60:	7fefffff 	.word	0x7fefffff
 8008c64:	3ff00000 	.word	0x3ff00000
 8008c68:	3fe00000 	.word	0x3fe00000
 8008c6c:	7fe00000 	.word	0x7fe00000
 8008c70:	7c9fffff 	.word	0x7c9fffff
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	b323      	cbz	r3, 8008cc2 <_strtod_l+0xb5a>
 8008c78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c7c:	d821      	bhi.n	8008cc2 <_strtod_l+0xb5a>
 8008c7e:	a328      	add	r3, pc, #160	@ (adr r3, 8008d20 <_strtod_l+0xbb8>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	4630      	mov	r0, r6
 8008c86:	4639      	mov	r1, r7
 8008c88:	f7f7 ff52 	bl	8000b30 <__aeabi_dcmple>
 8008c8c:	b1a0      	cbz	r0, 8008cb8 <_strtod_l+0xb50>
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7f7 ffa9 	bl	8000be8 <__aeabi_d2uiz>
 8008c96:	2801      	cmp	r0, #1
 8008c98:	bf38      	it	cc
 8008c9a:	2001      	movcc	r0, #1
 8008c9c:	f7f7 fc52 	bl	8000544 <__aeabi_ui2d>
 8008ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	b9fb      	cbnz	r3, 8008ce8 <_strtod_l+0xb80>
 8008ca8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008cac:	9014      	str	r0, [sp, #80]	@ 0x50
 8008cae:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008cb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008cb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008cba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008cbe:	1b5b      	subs	r3, r3, r5
 8008cc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008cc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008cca:	f002 fd29 	bl	800b720 <__ulp>
 8008cce:	4650      	mov	r0, sl
 8008cd0:	ec53 2b10 	vmov	r2, r3, d0
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	f7f7 fcaf 	bl	8000638 <__aeabi_dmul>
 8008cda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008cde:	f7f7 faf5 	bl	80002cc <__adddf3>
 8008ce2:	4682      	mov	sl, r0
 8008ce4:	468b      	mov	fp, r1
 8008ce6:	e770      	b.n	8008bca <_strtod_l+0xa62>
 8008ce8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008cec:	e7e0      	b.n	8008cb0 <_strtod_l+0xb48>
 8008cee:	a30e      	add	r3, pc, #56	@ (adr r3, 8008d28 <_strtod_l+0xbc0>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	f7f7 ff12 	bl	8000b1c <__aeabi_dcmplt>
 8008cf8:	e798      	b.n	8008c2c <_strtod_l+0xac4>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	f7ff ba6d 	b.w	80081e2 <_strtod_l+0x7a>
 8008d08:	2a65      	cmp	r2, #101	@ 0x65
 8008d0a:	f43f ab66 	beq.w	80083da <_strtod_l+0x272>
 8008d0e:	2a45      	cmp	r2, #69	@ 0x45
 8008d10:	f43f ab63 	beq.w	80083da <_strtod_l+0x272>
 8008d14:	2301      	movs	r3, #1
 8008d16:	f7ff bb9e 	b.w	8008456 <_strtod_l+0x2ee>
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	ffc00000 	.word	0xffc00000
 8008d24:	41dfffff 	.word	0x41dfffff
 8008d28:	94a03595 	.word	0x94a03595
 8008d2c:	3fcfffff 	.word	0x3fcfffff

08008d30 <strtod>:
 8008d30:	460a      	mov	r2, r1
 8008d32:	4601      	mov	r1, r0
 8008d34:	4802      	ldr	r0, [pc, #8]	@ (8008d40 <strtod+0x10>)
 8008d36:	4b03      	ldr	r3, [pc, #12]	@ (8008d44 <strtod+0x14>)
 8008d38:	6800      	ldr	r0, [r0, #0]
 8008d3a:	f7ff ba15 	b.w	8008168 <_strtod_l>
 8008d3e:	bf00      	nop
 8008d40:	20000230 	.word	0x20000230
 8008d44:	200000c4 	.word	0x200000c4

08008d48 <_strtol_l.constprop.0>:
 8008d48:	2b24      	cmp	r3, #36	@ 0x24
 8008d4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d4e:	4686      	mov	lr, r0
 8008d50:	4690      	mov	r8, r2
 8008d52:	d801      	bhi.n	8008d58 <_strtol_l.constprop.0+0x10>
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d106      	bne.n	8008d66 <_strtol_l.constprop.0+0x1e>
 8008d58:	f000 fe92 	bl	8009a80 <__errno>
 8008d5c:	2316      	movs	r3, #22
 8008d5e:	6003      	str	r3, [r0, #0]
 8008d60:	2000      	movs	r0, #0
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	4834      	ldr	r0, [pc, #208]	@ (8008e38 <_strtol_l.constprop.0+0xf0>)
 8008d68:	460d      	mov	r5, r1
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d70:	5d06      	ldrb	r6, [r0, r4]
 8008d72:	f016 0608 	ands.w	r6, r6, #8
 8008d76:	d1f8      	bne.n	8008d6a <_strtol_l.constprop.0+0x22>
 8008d78:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d7a:	d12d      	bne.n	8008dd8 <_strtol_l.constprop.0+0x90>
 8008d7c:	782c      	ldrb	r4, [r5, #0]
 8008d7e:	2601      	movs	r6, #1
 8008d80:	1c95      	adds	r5, r2, #2
 8008d82:	f033 0210 	bics.w	r2, r3, #16
 8008d86:	d109      	bne.n	8008d9c <_strtol_l.constprop.0+0x54>
 8008d88:	2c30      	cmp	r4, #48	@ 0x30
 8008d8a:	d12a      	bne.n	8008de2 <_strtol_l.constprop.0+0x9a>
 8008d8c:	782a      	ldrb	r2, [r5, #0]
 8008d8e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d92:	2a58      	cmp	r2, #88	@ 0x58
 8008d94:	d125      	bne.n	8008de2 <_strtol_l.constprop.0+0x9a>
 8008d96:	786c      	ldrb	r4, [r5, #1]
 8008d98:	2310      	movs	r3, #16
 8008d9a:	3502      	adds	r5, #2
 8008d9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008da0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008da4:	2200      	movs	r2, #0
 8008da6:	fbbc f9f3 	udiv	r9, ip, r3
 8008daa:	4610      	mov	r0, r2
 8008dac:	fb03 ca19 	mls	sl, r3, r9, ip
 8008db0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008db4:	2f09      	cmp	r7, #9
 8008db6:	d81b      	bhi.n	8008df0 <_strtol_l.constprop.0+0xa8>
 8008db8:	463c      	mov	r4, r7
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	dd27      	ble.n	8008e0e <_strtol_l.constprop.0+0xc6>
 8008dbe:	1c57      	adds	r7, r2, #1
 8008dc0:	d007      	beq.n	8008dd2 <_strtol_l.constprop.0+0x8a>
 8008dc2:	4581      	cmp	r9, r0
 8008dc4:	d320      	bcc.n	8008e08 <_strtol_l.constprop.0+0xc0>
 8008dc6:	d101      	bne.n	8008dcc <_strtol_l.constprop.0+0x84>
 8008dc8:	45a2      	cmp	sl, r4
 8008dca:	db1d      	blt.n	8008e08 <_strtol_l.constprop.0+0xc0>
 8008dcc:	fb00 4003 	mla	r0, r0, r3, r4
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd6:	e7eb      	b.n	8008db0 <_strtol_l.constprop.0+0x68>
 8008dd8:	2c2b      	cmp	r4, #43	@ 0x2b
 8008dda:	bf04      	itt	eq
 8008ddc:	782c      	ldrbeq	r4, [r5, #0]
 8008dde:	1c95      	addeq	r5, r2, #2
 8008de0:	e7cf      	b.n	8008d82 <_strtol_l.constprop.0+0x3a>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1da      	bne.n	8008d9c <_strtol_l.constprop.0+0x54>
 8008de6:	2c30      	cmp	r4, #48	@ 0x30
 8008de8:	bf0c      	ite	eq
 8008dea:	2308      	moveq	r3, #8
 8008dec:	230a      	movne	r3, #10
 8008dee:	e7d5      	b.n	8008d9c <_strtol_l.constprop.0+0x54>
 8008df0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008df4:	2f19      	cmp	r7, #25
 8008df6:	d801      	bhi.n	8008dfc <_strtol_l.constprop.0+0xb4>
 8008df8:	3c37      	subs	r4, #55	@ 0x37
 8008dfa:	e7de      	b.n	8008dba <_strtol_l.constprop.0+0x72>
 8008dfc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008e00:	2f19      	cmp	r7, #25
 8008e02:	d804      	bhi.n	8008e0e <_strtol_l.constprop.0+0xc6>
 8008e04:	3c57      	subs	r4, #87	@ 0x57
 8008e06:	e7d8      	b.n	8008dba <_strtol_l.constprop.0+0x72>
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	e7e1      	b.n	8008dd2 <_strtol_l.constprop.0+0x8a>
 8008e0e:	1c53      	adds	r3, r2, #1
 8008e10:	d108      	bne.n	8008e24 <_strtol_l.constprop.0+0xdc>
 8008e12:	2322      	movs	r3, #34	@ 0x22
 8008e14:	f8ce 3000 	str.w	r3, [lr]
 8008e18:	4660      	mov	r0, ip
 8008e1a:	f1b8 0f00 	cmp.w	r8, #0
 8008e1e:	d0a0      	beq.n	8008d62 <_strtol_l.constprop.0+0x1a>
 8008e20:	1e69      	subs	r1, r5, #1
 8008e22:	e006      	b.n	8008e32 <_strtol_l.constprop.0+0xea>
 8008e24:	b106      	cbz	r6, 8008e28 <_strtol_l.constprop.0+0xe0>
 8008e26:	4240      	negs	r0, r0
 8008e28:	f1b8 0f00 	cmp.w	r8, #0
 8008e2c:	d099      	beq.n	8008d62 <_strtol_l.constprop.0+0x1a>
 8008e2e:	2a00      	cmp	r2, #0
 8008e30:	d1f6      	bne.n	8008e20 <_strtol_l.constprop.0+0xd8>
 8008e32:	f8c8 1000 	str.w	r1, [r8]
 8008e36:	e794      	b.n	8008d62 <_strtol_l.constprop.0+0x1a>
 8008e38:	0800d331 	.word	0x0800d331

08008e3c <strtol>:
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	460a      	mov	r2, r1
 8008e40:	4601      	mov	r1, r0
 8008e42:	4802      	ldr	r0, [pc, #8]	@ (8008e4c <strtol+0x10>)
 8008e44:	6800      	ldr	r0, [r0, #0]
 8008e46:	f7ff bf7f 	b.w	8008d48 <_strtol_l.constprop.0>
 8008e4a:	bf00      	nop
 8008e4c:	20000230 	.word	0x20000230

08008e50 <__cvt>:
 8008e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	ec57 6b10 	vmov	r6, r7, d0
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	463b      	mov	r3, r7
 8008e60:	bfbb      	ittet	lt
 8008e62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e66:	461f      	movlt	r7, r3
 8008e68:	2300      	movge	r3, #0
 8008e6a:	232d      	movlt	r3, #45	@ 0x2d
 8008e6c:	700b      	strb	r3, [r1, #0]
 8008e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e74:	4691      	mov	r9, r2
 8008e76:	f023 0820 	bic.w	r8, r3, #32
 8008e7a:	bfbc      	itt	lt
 8008e7c:	4632      	movlt	r2, r6
 8008e7e:	4616      	movlt	r6, r2
 8008e80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e84:	d005      	beq.n	8008e92 <__cvt+0x42>
 8008e86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e8a:	d100      	bne.n	8008e8e <__cvt+0x3e>
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	2102      	movs	r1, #2
 8008e90:	e000      	b.n	8008e94 <__cvt+0x44>
 8008e92:	2103      	movs	r1, #3
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	ab02      	add	r3, sp, #8
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	ec47 6b10 	vmov	d0, r6, r7
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	f000 feb8 	bl	8009c18 <_dtoa_r>
 8008ea8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008eac:	4605      	mov	r5, r0
 8008eae:	d119      	bne.n	8008ee4 <__cvt+0x94>
 8008eb0:	f019 0f01 	tst.w	r9, #1
 8008eb4:	d00e      	beq.n	8008ed4 <__cvt+0x84>
 8008eb6:	eb00 0904 	add.w	r9, r0, r4
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	f7f7 fe21 	bl	8000b08 <__aeabi_dcmpeq>
 8008ec6:	b108      	cbz	r0, 8008ecc <__cvt+0x7c>
 8008ec8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ecc:	2230      	movs	r2, #48	@ 0x30
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	454b      	cmp	r3, r9
 8008ed2:	d31e      	bcc.n	8008f12 <__cvt+0xc2>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ed8:	1b5b      	subs	r3, r3, r5
 8008eda:	4628      	mov	r0, r5
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	b004      	add	sp, #16
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ee8:	eb00 0904 	add.w	r9, r0, r4
 8008eec:	d1e5      	bne.n	8008eba <__cvt+0x6a>
 8008eee:	7803      	ldrb	r3, [r0, #0]
 8008ef0:	2b30      	cmp	r3, #48	@ 0x30
 8008ef2:	d10a      	bne.n	8008f0a <__cvt+0xba>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fe04 	bl	8000b08 <__aeabi_dcmpeq>
 8008f00:	b918      	cbnz	r0, 8008f0a <__cvt+0xba>
 8008f02:	f1c4 0401 	rsb	r4, r4, #1
 8008f06:	f8ca 4000 	str.w	r4, [sl]
 8008f0a:	f8da 3000 	ldr.w	r3, [sl]
 8008f0e:	4499      	add	r9, r3
 8008f10:	e7d3      	b.n	8008eba <__cvt+0x6a>
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	9103      	str	r1, [sp, #12]
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7d9      	b.n	8008ece <__cvt+0x7e>

08008f1a <__exponent>:
 8008f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	bfba      	itte	lt
 8008f20:	4249      	neglt	r1, r1
 8008f22:	232d      	movlt	r3, #45	@ 0x2d
 8008f24:	232b      	movge	r3, #43	@ 0x2b
 8008f26:	2909      	cmp	r1, #9
 8008f28:	7002      	strb	r2, [r0, #0]
 8008f2a:	7043      	strb	r3, [r0, #1]
 8008f2c:	dd29      	ble.n	8008f82 <__exponent+0x68>
 8008f2e:	f10d 0307 	add.w	r3, sp, #7
 8008f32:	461d      	mov	r5, r3
 8008f34:	270a      	movs	r7, #10
 8008f36:	461a      	mov	r2, r3
 8008f38:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f3c:	fb07 1416 	mls	r4, r7, r6, r1
 8008f40:	3430      	adds	r4, #48	@ 0x30
 8008f42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f46:	460c      	mov	r4, r1
 8008f48:	2c63      	cmp	r4, #99	@ 0x63
 8008f4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f4e:	4631      	mov	r1, r6
 8008f50:	dcf1      	bgt.n	8008f36 <__exponent+0x1c>
 8008f52:	3130      	adds	r1, #48	@ 0x30
 8008f54:	1e94      	subs	r4, r2, #2
 8008f56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f5a:	1c41      	adds	r1, r0, #1
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d30a      	bcc.n	8008f78 <__exponent+0x5e>
 8008f62:	f10d 0309 	add.w	r3, sp, #9
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ac      	cmp	r4, r5
 8008f6a:	bf88      	it	hi
 8008f6c:	2300      	movhi	r3, #0
 8008f6e:	3302      	adds	r3, #2
 8008f70:	4403      	add	r3, r0
 8008f72:	1a18      	subs	r0, r3, r0
 8008f74:	b003      	add	sp, #12
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f80:	e7ed      	b.n	8008f5e <__exponent+0x44>
 8008f82:	2330      	movs	r3, #48	@ 0x30
 8008f84:	3130      	adds	r1, #48	@ 0x30
 8008f86:	7083      	strb	r3, [r0, #2]
 8008f88:	70c1      	strb	r1, [r0, #3]
 8008f8a:	1d03      	adds	r3, r0, #4
 8008f8c:	e7f1      	b.n	8008f72 <__exponent+0x58>
	...

08008f90 <_printf_float>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	b08d      	sub	sp, #52	@ 0x34
 8008f96:	460c      	mov	r4, r1
 8008f98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	f000 fd23 	bl	80099ec <_localeconv_r>
 8008fa6:	6803      	ldr	r3, [r0, #0]
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f7 f980 	bl	80002b0 <strlen>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	3307      	adds	r3, #7
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	f103 0208 	add.w	r2, r3, #8
 8008fc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8008fcc:	f8c8 2000 	str.w	r2, [r8]
 8008fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8009258 <_printf_float+0x2c8>)
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	f7f7 fdbe 	bl	8000b6c <__aeabi_dcmpun>
 8008ff0:	bb70      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8008ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff6:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <_printf_float+0x2c8>)
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffc:	f7f7 fd98 	bl	8000b30 <__aeabi_dcmple>
 8009000:	bb30      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fd87 	bl	8000b1c <__aeabi_dcmplt>
 800900e:	b110      	cbz	r0, 8009016 <_printf_float+0x86>
 8009010:	232d      	movs	r3, #45	@ 0x2d
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009016:	4a91      	ldr	r2, [pc, #580]	@ (800925c <_printf_float+0x2cc>)
 8009018:	4b91      	ldr	r3, [pc, #580]	@ (8009260 <_printf_float+0x2d0>)
 800901a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800901e:	bf94      	ite	ls
 8009020:	4690      	movls	r8, r2
 8009022:	4698      	movhi	r8, r3
 8009024:	2303      	movs	r3, #3
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	f02b 0304 	bic.w	r3, fp, #4
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	9700      	str	r7, [sp, #0]
 8009034:	4633      	mov	r3, r6
 8009036:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f9d2 	bl	80093e4 <_printf_common>
 8009040:	3001      	adds	r0, #1
 8009042:	f040 808d 	bne.w	8009160 <_printf_float+0x1d0>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	b00d      	add	sp, #52	@ 0x34
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd88 	bl	8000b6c <__aeabi_dcmpun>
 800905c:	b140      	cbz	r0, 8009070 <_printf_float+0xe0>
 800905e:	464b      	mov	r3, r9
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbc      	itt	lt
 8009064:	232d      	movlt	r3, #45	@ 0x2d
 8009066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800906a:	4a7e      	ldr	r2, [pc, #504]	@ (8009264 <_printf_float+0x2d4>)
 800906c:	4b7e      	ldr	r3, [pc, #504]	@ (8009268 <_printf_float+0x2d8>)
 800906e:	e7d4      	b.n	800901a <_printf_float+0x8a>
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009076:	9206      	str	r2, [sp, #24]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	d13b      	bne.n	80090f4 <_printf_float+0x164>
 800907c:	2306      	movs	r3, #6
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009084:	2300      	movs	r3, #0
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	ab0a      	add	r3, sp, #40	@ 0x28
 800908c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009090:	ab09      	add	r3, sp, #36	@ 0x24
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	ec49 8b10 	vmov	d0, r8, r9
 800909a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff fed6 	bl	8008e50 <__cvt>
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090a8:	2b47      	cmp	r3, #71	@ 0x47
 80090aa:	4680      	mov	r8, r0
 80090ac:	d129      	bne.n	8009102 <_printf_float+0x172>
 80090ae:	1cc8      	adds	r0, r1, #3
 80090b0:	db02      	blt.n	80090b8 <_printf_float+0x128>
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	4299      	cmp	r1, r3
 80090b6:	dd41      	ble.n	800913c <_printf_float+0x1ac>
 80090b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80090bc:	fa5f fa8a 	uxtb.w	sl, sl
 80090c0:	3901      	subs	r1, #1
 80090c2:	4652      	mov	r2, sl
 80090c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80090ca:	f7ff ff26 	bl	8008f1a <__exponent>
 80090ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090d0:	1813      	adds	r3, r2, r0
 80090d2:	2a01      	cmp	r2, #1
 80090d4:	4681      	mov	r9, r0
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	dc02      	bgt.n	80090e0 <_printf_float+0x150>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	07d2      	lsls	r2, r2, #31
 80090de:	d501      	bpl.n	80090e4 <_printf_float+0x154>
 80090e0:	3301      	adds	r3, #1
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0a2      	beq.n	8009032 <_printf_float+0xa2>
 80090ec:	232d      	movs	r3, #45	@ 0x2d
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f2:	e79e      	b.n	8009032 <_printf_float+0xa2>
 80090f4:	9a06      	ldr	r2, [sp, #24]
 80090f6:	2a47      	cmp	r2, #71	@ 0x47
 80090f8:	d1c2      	bne.n	8009080 <_printf_float+0xf0>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1c0      	bne.n	8009080 <_printf_float+0xf0>
 80090fe:	2301      	movs	r3, #1
 8009100:	e7bd      	b.n	800907e <_printf_float+0xee>
 8009102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009106:	d9db      	bls.n	80090c0 <_printf_float+0x130>
 8009108:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800910c:	d118      	bne.n	8009140 <_printf_float+0x1b0>
 800910e:	2900      	cmp	r1, #0
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	dd0b      	ble.n	800912c <_printf_float+0x19c>
 8009114:	6121      	str	r1, [r4, #16]
 8009116:	b913      	cbnz	r3, 800911e <_printf_float+0x18e>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	07d0      	lsls	r0, r2, #31
 800911c:	d502      	bpl.n	8009124 <_printf_float+0x194>
 800911e:	3301      	adds	r3, #1
 8009120:	440b      	add	r3, r1
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009126:	f04f 0900 	mov.w	r9, #0
 800912a:	e7db      	b.n	80090e4 <_printf_float+0x154>
 800912c:	b913      	cbnz	r3, 8009134 <_printf_float+0x1a4>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	07d2      	lsls	r2, r2, #31
 8009132:	d501      	bpl.n	8009138 <_printf_float+0x1a8>
 8009134:	3302      	adds	r3, #2
 8009136:	e7f4      	b.n	8009122 <_printf_float+0x192>
 8009138:	2301      	movs	r3, #1
 800913a:	e7f2      	b.n	8009122 <_printf_float+0x192>
 800913c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	4299      	cmp	r1, r3
 8009144:	db05      	blt.n	8009152 <_printf_float+0x1c2>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6121      	str	r1, [r4, #16]
 800914a:	07d8      	lsls	r0, r3, #31
 800914c:	d5ea      	bpl.n	8009124 <_printf_float+0x194>
 800914e:	1c4b      	adds	r3, r1, #1
 8009150:	e7e7      	b.n	8009122 <_printf_float+0x192>
 8009152:	2900      	cmp	r1, #0
 8009154:	bfd4      	ite	le
 8009156:	f1c1 0202 	rsble	r2, r1, #2
 800915a:	2201      	movgt	r2, #1
 800915c:	4413      	add	r3, r2
 800915e:	e7e0      	b.n	8009122 <_printf_float+0x192>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	055a      	lsls	r2, r3, #21
 8009164:	d407      	bmi.n	8009176 <_printf_float+0x1e6>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4642      	mov	r2, r8
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	d12b      	bne.n	80091cc <_printf_float+0x23c>
 8009174:	e767      	b.n	8009046 <_printf_float+0xb6>
 8009176:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800917a:	f240 80dd 	bls.w	8009338 <_printf_float+0x3a8>
 800917e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	f7f7 fcbf 	bl	8000b08 <__aeabi_dcmpeq>
 800918a:	2800      	cmp	r0, #0
 800918c:	d033      	beq.n	80091f6 <_printf_float+0x266>
 800918e:	4a37      	ldr	r2, [pc, #220]	@ (800926c <_printf_float+0x2dc>)
 8009190:	2301      	movs	r3, #1
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f af54 	beq.w	8009046 <_printf_float+0xb6>
 800919e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091a2:	4543      	cmp	r3, r8
 80091a4:	db02      	blt.n	80091ac <_printf_float+0x21c>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07d8      	lsls	r0, r3, #31
 80091aa:	d50f      	bpl.n	80091cc <_printf_float+0x23c>
 80091ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af45 	beq.w	8009046 <_printf_float+0xb6>
 80091bc:	f04f 0900 	mov.w	r9, #0
 80091c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80091c4:	f104 0a1a 	add.w	sl, r4, #26
 80091c8:	45c8      	cmp	r8, r9
 80091ca:	dc09      	bgt.n	80091e0 <_printf_float+0x250>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	f100 8103 	bmi.w	80093da <_printf_float+0x44a>
 80091d4:	68e0      	ldr	r0, [r4, #12]
 80091d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d8:	4298      	cmp	r0, r3
 80091da:	bfb8      	it	lt
 80091dc:	4618      	movlt	r0, r3
 80091de:	e734      	b.n	800904a <_printf_float+0xba>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4652      	mov	r2, sl
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f af2b 	beq.w	8009046 <_printf_float+0xb6>
 80091f0:	f109 0901 	add.w	r9, r9, #1
 80091f4:	e7e8      	b.n	80091c8 <_printf_float+0x238>
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc39      	bgt.n	8009270 <_printf_float+0x2e0>
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <_printf_float+0x2dc>)
 80091fe:	2301      	movs	r3, #1
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f af1d 	beq.w	8009046 <_printf_float+0xb6>
 800920c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009210:	ea59 0303 	orrs.w	r3, r9, r3
 8009214:	d102      	bne.n	800921c <_printf_float+0x28c>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d5d7      	bpl.n	80091cc <_printf_float+0x23c>
 800921c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	47b8      	blx	r7
 8009226:	3001      	adds	r0, #1
 8009228:	f43f af0d 	beq.w	8009046 <_printf_float+0xb6>
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	f104 0b1a 	add.w	fp, r4, #26
 8009234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009236:	425b      	negs	r3, r3
 8009238:	4553      	cmp	r3, sl
 800923a:	dc01      	bgt.n	8009240 <_printf_float+0x2b0>
 800923c:	464b      	mov	r3, r9
 800923e:	e793      	b.n	8009168 <_printf_float+0x1d8>
 8009240:	2301      	movs	r3, #1
 8009242:	465a      	mov	r2, fp
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f aefb 	beq.w	8009046 <_printf_float+0xb6>
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	e7ee      	b.n	8009234 <_printf_float+0x2a4>
 8009256:	bf00      	nop
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	0800d431 	.word	0x0800d431
 8009260:	0800d435 	.word	0x0800d435
 8009264:	0800d439 	.word	0x0800d439
 8009268:	0800d43d 	.word	0x0800d43d
 800926c:	0800d441 	.word	0x0800d441
 8009270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009272:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009276:	4553      	cmp	r3, sl
 8009278:	bfa8      	it	ge
 800927a:	4653      	movge	r3, sl
 800927c:	2b00      	cmp	r3, #0
 800927e:	4699      	mov	r9, r3
 8009280:	dc36      	bgt.n	80092f0 <_printf_float+0x360>
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800928a:	f104 021a 	add.w	r2, r4, #26
 800928e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009290:	9306      	str	r3, [sp, #24]
 8009292:	eba3 0309 	sub.w	r3, r3, r9
 8009296:	455b      	cmp	r3, fp
 8009298:	dc31      	bgt.n	80092fe <_printf_float+0x36e>
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	459a      	cmp	sl, r3
 800929e:	dc3a      	bgt.n	8009316 <_printf_float+0x386>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d437      	bmi.n	8009316 <_printf_float+0x386>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	ebaa 0903 	sub.w	r9, sl, r3
 80092ac:	9b06      	ldr	r3, [sp, #24]
 80092ae:	ebaa 0303 	sub.w	r3, sl, r3
 80092b2:	4599      	cmp	r9, r3
 80092b4:	bfa8      	it	ge
 80092b6:	4699      	movge	r9, r3
 80092b8:	f1b9 0f00 	cmp.w	r9, #0
 80092bc:	dc33      	bgt.n	8009326 <_printf_float+0x396>
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c6:	f104 0b1a 	add.w	fp, r4, #26
 80092ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092cc:	ebaa 0303 	sub.w	r3, sl, r3
 80092d0:	eba3 0309 	sub.w	r3, r3, r9
 80092d4:	4543      	cmp	r3, r8
 80092d6:	f77f af79 	ble.w	80091cc <_printf_float+0x23c>
 80092da:	2301      	movs	r3, #1
 80092dc:	465a      	mov	r2, fp
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f aeae 	beq.w	8009046 <_printf_float+0xb6>
 80092ea:	f108 0801 	add.w	r8, r8, #1
 80092ee:	e7ec      	b.n	80092ca <_printf_float+0x33a>
 80092f0:	4642      	mov	r2, r8
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d1c2      	bne.n	8009282 <_printf_float+0x2f2>
 80092fc:	e6a3      	b.n	8009046 <_printf_float+0xb6>
 80092fe:	2301      	movs	r3, #1
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	9206      	str	r2, [sp, #24]
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f ae9c 	beq.w	8009046 <_printf_float+0xb6>
 800930e:	9a06      	ldr	r2, [sp, #24]
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	e7bb      	b.n	800928e <_printf_float+0x2fe>
 8009316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	d1c0      	bne.n	80092a6 <_printf_float+0x316>
 8009324:	e68f      	b.n	8009046 <_printf_float+0xb6>
 8009326:	9a06      	ldr	r2, [sp, #24]
 8009328:	464b      	mov	r3, r9
 800932a:	4442      	add	r2, r8
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	d1c3      	bne.n	80092be <_printf_float+0x32e>
 8009336:	e686      	b.n	8009046 <_printf_float+0xb6>
 8009338:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800933c:	f1ba 0f01 	cmp.w	sl, #1
 8009340:	dc01      	bgt.n	8009346 <_printf_float+0x3b6>
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d536      	bpl.n	80093b4 <_printf_float+0x424>
 8009346:	2301      	movs	r3, #1
 8009348:	4642      	mov	r2, r8
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	f43f ae78 	beq.w	8009046 <_printf_float+0xb6>
 8009356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f ae70 	beq.w	8009046 <_printf_float+0xb6>
 8009366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009372:	f7f7 fbc9 	bl	8000b08 <__aeabi_dcmpeq>
 8009376:	b9c0      	cbnz	r0, 80093aa <_printf_float+0x41a>
 8009378:	4653      	mov	r3, sl
 800937a:	f108 0201 	add.w	r2, r8, #1
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	d10c      	bne.n	80093a2 <_printf_float+0x412>
 8009388:	e65d      	b.n	8009046 <_printf_float+0xb6>
 800938a:	2301      	movs	r3, #1
 800938c:	465a      	mov	r2, fp
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	47b8      	blx	r7
 8009394:	3001      	adds	r0, #1
 8009396:	f43f ae56 	beq.w	8009046 <_printf_float+0xb6>
 800939a:	f108 0801 	add.w	r8, r8, #1
 800939e:	45d0      	cmp	r8, sl
 80093a0:	dbf3      	blt.n	800938a <_printf_float+0x3fa>
 80093a2:	464b      	mov	r3, r9
 80093a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093a8:	e6df      	b.n	800916a <_printf_float+0x1da>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	f104 0b1a 	add.w	fp, r4, #26
 80093b2:	e7f4      	b.n	800939e <_printf_float+0x40e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4642      	mov	r2, r8
 80093b8:	e7e1      	b.n	800937e <_printf_float+0x3ee>
 80093ba:	2301      	movs	r3, #1
 80093bc:	464a      	mov	r2, r9
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae3e 	beq.w	8009046 <_printf_float+0xb6>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093d2:	1a5b      	subs	r3, r3, r1
 80093d4:	4543      	cmp	r3, r8
 80093d6:	dcf0      	bgt.n	80093ba <_printf_float+0x42a>
 80093d8:	e6fc      	b.n	80091d4 <_printf_float+0x244>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	f104 0919 	add.w	r9, r4, #25
 80093e2:	e7f4      	b.n	80093ce <_printf_float+0x43e>

080093e4 <_printf_common>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	4616      	mov	r6, r2
 80093ea:	4698      	mov	r8, r3
 80093ec:	688a      	ldr	r2, [r1, #8]
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfb8      	it	lt
 80093f8:	4613      	movlt	r3, r2
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009400:	4607      	mov	r7, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b10a      	cbz	r2, 800940a <_printf_common+0x26>
 8009406:	3301      	adds	r3, #1
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	0699      	lsls	r1, r3, #26
 800940e:	bf42      	ittt	mi
 8009410:	6833      	ldrmi	r3, [r6, #0]
 8009412:	3302      	addmi	r3, #2
 8009414:	6033      	strmi	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	f015 0506 	ands.w	r5, r5, #6
 800941c:	d106      	bne.n	800942c <_printf_common+0x48>
 800941e:	f104 0a19 	add.w	sl, r4, #25
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	6832      	ldr	r2, [r6, #0]
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ab      	cmp	r3, r5
 800942a:	dc26      	bgt.n	800947a <_printf_common+0x96>
 800942c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	3b00      	subs	r3, #0
 8009434:	bf18      	it	ne
 8009436:	2301      	movne	r3, #1
 8009438:	0692      	lsls	r2, r2, #26
 800943a:	d42b      	bmi.n	8009494 <_printf_common+0xb0>
 800943c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009440:	4641      	mov	r1, r8
 8009442:	4638      	mov	r0, r7
 8009444:	47c8      	blx	r9
 8009446:	3001      	adds	r0, #1
 8009448:	d01e      	beq.n	8009488 <_printf_common+0xa4>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	2b04      	cmp	r3, #4
 8009454:	bf02      	ittt	eq
 8009456:	68e5      	ldreq	r5, [r4, #12]
 8009458:	6833      	ldreq	r3, [r6, #0]
 800945a:	1aed      	subeq	r5, r5, r3
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	bf0c      	ite	eq
 8009460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009464:	2500      	movne	r5, #0
 8009466:	4293      	cmp	r3, r2
 8009468:	bfc4      	itt	gt
 800946a:	1a9b      	subgt	r3, r3, r2
 800946c:	18ed      	addgt	r5, r5, r3
 800946e:	2600      	movs	r6, #0
 8009470:	341a      	adds	r4, #26
 8009472:	42b5      	cmp	r5, r6
 8009474:	d11a      	bne.n	80094ac <_printf_common+0xc8>
 8009476:	2000      	movs	r0, #0
 8009478:	e008      	b.n	800948c <_printf_common+0xa8>
 800947a:	2301      	movs	r3, #1
 800947c:	4652      	mov	r2, sl
 800947e:	4641      	mov	r1, r8
 8009480:	4638      	mov	r0, r7
 8009482:	47c8      	blx	r9
 8009484:	3001      	adds	r0, #1
 8009486:	d103      	bne.n	8009490 <_printf_common+0xac>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	3501      	adds	r5, #1
 8009492:	e7c6      	b.n	8009422 <_printf_common+0x3e>
 8009494:	18e1      	adds	r1, r4, r3
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	2030      	movs	r0, #48	@ 0x30
 800949a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800949e:	4422      	add	r2, r4
 80094a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094a8:	3302      	adds	r3, #2
 80094aa:	e7c7      	b.n	800943c <_printf_common+0x58>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4622      	mov	r2, r4
 80094b0:	4641      	mov	r1, r8
 80094b2:	4638      	mov	r0, r7
 80094b4:	47c8      	blx	r9
 80094b6:	3001      	adds	r0, #1
 80094b8:	d0e6      	beq.n	8009488 <_printf_common+0xa4>
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7d9      	b.n	8009472 <_printf_common+0x8e>
	...

080094c0 <_printf_i>:
 80094c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	7e0f      	ldrb	r7, [r1, #24]
 80094c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094c8:	2f78      	cmp	r7, #120	@ 0x78
 80094ca:	4691      	mov	r9, r2
 80094cc:	4680      	mov	r8, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	469a      	mov	sl, r3
 80094d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094d6:	d807      	bhi.n	80094e8 <_printf_i+0x28>
 80094d8:	2f62      	cmp	r7, #98	@ 0x62
 80094da:	d80a      	bhi.n	80094f2 <_printf_i+0x32>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	f000 80d2 	beq.w	8009686 <_printf_i+0x1c6>
 80094e2:	2f58      	cmp	r7, #88	@ 0x58
 80094e4:	f000 80b9 	beq.w	800965a <_printf_i+0x19a>
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094f0:	e03a      	b.n	8009568 <_printf_i+0xa8>
 80094f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094f6:	2b15      	cmp	r3, #21
 80094f8:	d8f6      	bhi.n	80094e8 <_printf_i+0x28>
 80094fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009500 <_printf_i+0x40>)
 80094fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009500:	08009559 	.word	0x08009559
 8009504:	0800956d 	.word	0x0800956d
 8009508:	080094e9 	.word	0x080094e9
 800950c:	080094e9 	.word	0x080094e9
 8009510:	080094e9 	.word	0x080094e9
 8009514:	080094e9 	.word	0x080094e9
 8009518:	0800956d 	.word	0x0800956d
 800951c:	080094e9 	.word	0x080094e9
 8009520:	080094e9 	.word	0x080094e9
 8009524:	080094e9 	.word	0x080094e9
 8009528:	080094e9 	.word	0x080094e9
 800952c:	0800966d 	.word	0x0800966d
 8009530:	08009597 	.word	0x08009597
 8009534:	08009627 	.word	0x08009627
 8009538:	080094e9 	.word	0x080094e9
 800953c:	080094e9 	.word	0x080094e9
 8009540:	0800968f 	.word	0x0800968f
 8009544:	080094e9 	.word	0x080094e9
 8009548:	08009597 	.word	0x08009597
 800954c:	080094e9 	.word	0x080094e9
 8009550:	080094e9 	.word	0x080094e9
 8009554:	0800962f 	.word	0x0800962f
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6032      	str	r2, [r6, #0]
 8009560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009568:	2301      	movs	r3, #1
 800956a:	e09d      	b.n	80096a8 <_printf_i+0x1e8>
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6031      	str	r1, [r6, #0]
 8009574:	0606      	lsls	r6, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xbc>
 8009578:	681d      	ldr	r5, [r3, #0]
 800957a:	e003      	b.n	8009584 <_printf_i+0xc4>
 800957c:	0645      	lsls	r5, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xb8>
 8009580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009584:	2d00      	cmp	r5, #0
 8009586:	da03      	bge.n	8009590 <_printf_i+0xd0>
 8009588:	232d      	movs	r3, #45	@ 0x2d
 800958a:	426d      	negs	r5, r5
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009590:	4859      	ldr	r0, [pc, #356]	@ (80096f8 <_printf_i+0x238>)
 8009592:	230a      	movs	r3, #10
 8009594:	e011      	b.n	80095ba <_printf_i+0xfa>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	0608      	lsls	r0, r1, #24
 800959c:	f853 5b04 	ldr.w	r5, [r3], #4
 80095a0:	d402      	bmi.n	80095a8 <_printf_i+0xe8>
 80095a2:	0649      	lsls	r1, r1, #25
 80095a4:	bf48      	it	mi
 80095a6:	b2ad      	uxthmi	r5, r5
 80095a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095aa:	4853      	ldr	r0, [pc, #332]	@ (80096f8 <_printf_i+0x238>)
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	bf14      	ite	ne
 80095b0:	230a      	movne	r3, #10
 80095b2:	2308      	moveq	r3, #8
 80095b4:	2100      	movs	r1, #0
 80095b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ba:	6866      	ldr	r6, [r4, #4]
 80095bc:	60a6      	str	r6, [r4, #8]
 80095be:	2e00      	cmp	r6, #0
 80095c0:	bfa2      	ittt	ge
 80095c2:	6821      	ldrge	r1, [r4, #0]
 80095c4:	f021 0104 	bicge.w	r1, r1, #4
 80095c8:	6021      	strge	r1, [r4, #0]
 80095ca:	b90d      	cbnz	r5, 80095d0 <_printf_i+0x110>
 80095cc:	2e00      	cmp	r6, #0
 80095ce:	d04b      	beq.n	8009668 <_printf_i+0x1a8>
 80095d0:	4616      	mov	r6, r2
 80095d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80095d6:	fb03 5711 	mls	r7, r3, r1, r5
 80095da:	5dc7      	ldrb	r7, [r0, r7]
 80095dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095e0:	462f      	mov	r7, r5
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	460d      	mov	r5, r1
 80095e6:	d9f4      	bls.n	80095d2 <_printf_i+0x112>
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d10b      	bne.n	8009604 <_printf_i+0x144>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	07df      	lsls	r7, r3, #31
 80095f0:	d508      	bpl.n	8009604 <_printf_i+0x144>
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	6861      	ldr	r1, [r4, #4]
 80095f6:	4299      	cmp	r1, r3
 80095f8:	bfde      	ittt	le
 80095fa:	2330      	movle	r3, #48	@ 0x30
 80095fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009604:	1b92      	subs	r2, r2, r6
 8009606:	6122      	str	r2, [r4, #16]
 8009608:	f8cd a000 	str.w	sl, [sp]
 800960c:	464b      	mov	r3, r9
 800960e:	aa03      	add	r2, sp, #12
 8009610:	4621      	mov	r1, r4
 8009612:	4640      	mov	r0, r8
 8009614:	f7ff fee6 	bl	80093e4 <_printf_common>
 8009618:	3001      	adds	r0, #1
 800961a:	d14a      	bne.n	80096b2 <_printf_i+0x1f2>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b004      	add	sp, #16
 8009622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f043 0320 	orr.w	r3, r3, #32
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	4833      	ldr	r0, [pc, #204]	@ (80096fc <_printf_i+0x23c>)
 8009630:	2778      	movs	r7, #120	@ 0x78
 8009632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6831      	ldr	r1, [r6, #0]
 800963a:	061f      	lsls	r7, r3, #24
 800963c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0x188>
 8009642:	065f      	lsls	r7, r3, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	6031      	str	r1, [r6, #0]
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	bf44      	itt	mi
 800964e:	f043 0320 	orrmi.w	r3, r3, #32
 8009652:	6023      	strmi	r3, [r4, #0]
 8009654:	b11d      	cbz	r5, 800965e <_printf_i+0x19e>
 8009656:	2310      	movs	r3, #16
 8009658:	e7ac      	b.n	80095b4 <_printf_i+0xf4>
 800965a:	4827      	ldr	r0, [pc, #156]	@ (80096f8 <_printf_i+0x238>)
 800965c:	e7e9      	b.n	8009632 <_printf_i+0x172>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	f023 0320 	bic.w	r3, r3, #32
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	e7f6      	b.n	8009656 <_printf_i+0x196>
 8009668:	4616      	mov	r6, r2
 800966a:	e7bd      	b.n	80095e8 <_printf_i+0x128>
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	6961      	ldr	r1, [r4, #20]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	6030      	str	r0, [r6, #0]
 8009676:	062e      	lsls	r6, r5, #24
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	d501      	bpl.n	8009680 <_printf_i+0x1c0>
 800967c:	6019      	str	r1, [r3, #0]
 800967e:	e002      	b.n	8009686 <_printf_i+0x1c6>
 8009680:	0668      	lsls	r0, r5, #25
 8009682:	d5fb      	bpl.n	800967c <_printf_i+0x1bc>
 8009684:	8019      	strh	r1, [r3, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	6123      	str	r3, [r4, #16]
 800968a:	4616      	mov	r6, r2
 800968c:	e7bc      	b.n	8009608 <_printf_i+0x148>
 800968e:	6833      	ldr	r3, [r6, #0]
 8009690:	1d1a      	adds	r2, r3, #4
 8009692:	6032      	str	r2, [r6, #0]
 8009694:	681e      	ldr	r6, [r3, #0]
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	2100      	movs	r1, #0
 800969a:	4630      	mov	r0, r6
 800969c:	f7f6 fdb8 	bl	8000210 <memchr>
 80096a0:	b108      	cbz	r0, 80096a6 <_printf_i+0x1e6>
 80096a2:	1b80      	subs	r0, r0, r6
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	2300      	movs	r3, #0
 80096ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096b0:	e7aa      	b.n	8009608 <_printf_i+0x148>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	4632      	mov	r2, r6
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	47d0      	blx	sl
 80096bc:	3001      	adds	r0, #1
 80096be:	d0ad      	beq.n	800961c <_printf_i+0x15c>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	079b      	lsls	r3, r3, #30
 80096c4:	d413      	bmi.n	80096ee <_printf_i+0x22e>
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bfb8      	it	lt
 80096ce:	4618      	movlt	r0, r3
 80096d0:	e7a6      	b.n	8009620 <_printf_i+0x160>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4632      	mov	r2, r6
 80096d6:	4649      	mov	r1, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	47d0      	blx	sl
 80096dc:	3001      	adds	r0, #1
 80096de:	d09d      	beq.n	800961c <_printf_i+0x15c>
 80096e0:	3501      	adds	r5, #1
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	9903      	ldr	r1, [sp, #12]
 80096e6:	1a5b      	subs	r3, r3, r1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	dcf2      	bgt.n	80096d2 <_printf_i+0x212>
 80096ec:	e7eb      	b.n	80096c6 <_printf_i+0x206>
 80096ee:	2500      	movs	r5, #0
 80096f0:	f104 0619 	add.w	r6, r4, #25
 80096f4:	e7f5      	b.n	80096e2 <_printf_i+0x222>
 80096f6:	bf00      	nop
 80096f8:	0800d443 	.word	0x0800d443
 80096fc:	0800d454 	.word	0x0800d454

08009700 <std>:
 8009700:	2300      	movs	r3, #0
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	e9c0 3300 	strd	r3, r3, [r0]
 800970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970e:	6083      	str	r3, [r0, #8]
 8009710:	8181      	strh	r1, [r0, #12]
 8009712:	6643      	str	r3, [r0, #100]	@ 0x64
 8009714:	81c2      	strh	r2, [r0, #14]
 8009716:	6183      	str	r3, [r0, #24]
 8009718:	4619      	mov	r1, r3
 800971a:	2208      	movs	r2, #8
 800971c:	305c      	adds	r0, #92	@ 0x5c
 800971e:	f000 f928 	bl	8009972 <memset>
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <std+0x58>)
 8009724:	6263      	str	r3, [r4, #36]	@ 0x24
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <std+0x5c>)
 8009728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <std+0x60>)
 800972c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800972e:	4b0d      	ldr	r3, [pc, #52]	@ (8009764 <std+0x64>)
 8009730:	6323      	str	r3, [r4, #48]	@ 0x30
 8009732:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <std+0x68>)
 8009734:	6224      	str	r4, [r4, #32]
 8009736:	429c      	cmp	r4, r3
 8009738:	d006      	beq.n	8009748 <std+0x48>
 800973a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800973e:	4294      	cmp	r4, r2
 8009740:	d002      	beq.n	8009748 <std+0x48>
 8009742:	33d0      	adds	r3, #208	@ 0xd0
 8009744:	429c      	cmp	r4, r3
 8009746:	d105      	bne.n	8009754 <std+0x54>
 8009748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009750:	f000 b9c0 	b.w	8009ad4 <__retarget_lock_init_recursive>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	bf00      	nop
 8009758:	080098ed 	.word	0x080098ed
 800975c:	0800990f 	.word	0x0800990f
 8009760:	08009947 	.word	0x08009947
 8009764:	0800996b 	.word	0x0800996b
 8009768:	20000dbc 	.word	0x20000dbc

0800976c <stdio_exit_handler>:
 800976c:	4a02      	ldr	r2, [pc, #8]	@ (8009778 <stdio_exit_handler+0xc>)
 800976e:	4903      	ldr	r1, [pc, #12]	@ (800977c <stdio_exit_handler+0x10>)
 8009770:	4803      	ldr	r0, [pc, #12]	@ (8009780 <stdio_exit_handler+0x14>)
 8009772:	f000 b869 	b.w	8009848 <_fwalk_sglue>
 8009776:	bf00      	nop
 8009778:	200000b8 	.word	0x200000b8
 800977c:	0800bd6d 	.word	0x0800bd6d
 8009780:	20000234 	.word	0x20000234

08009784 <cleanup_stdio>:
 8009784:	6841      	ldr	r1, [r0, #4]
 8009786:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <cleanup_stdio+0x34>)
 8009788:	4299      	cmp	r1, r3
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	d001      	beq.n	8009794 <cleanup_stdio+0x10>
 8009790:	f002 faec 	bl	800bd6c <_fflush_r>
 8009794:	68a1      	ldr	r1, [r4, #8]
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <cleanup_stdio+0x38>)
 8009798:	4299      	cmp	r1, r3
 800979a:	d002      	beq.n	80097a2 <cleanup_stdio+0x1e>
 800979c:	4620      	mov	r0, r4
 800979e:	f002 fae5 	bl	800bd6c <_fflush_r>
 80097a2:	68e1      	ldr	r1, [r4, #12]
 80097a4:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <cleanup_stdio+0x3c>)
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d004      	beq.n	80097b4 <cleanup_stdio+0x30>
 80097aa:	4620      	mov	r0, r4
 80097ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b0:	f002 badc 	b.w	800bd6c <_fflush_r>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	bf00      	nop
 80097b8:	20000dbc 	.word	0x20000dbc
 80097bc:	20000e24 	.word	0x20000e24
 80097c0:	20000e8c 	.word	0x20000e8c

080097c4 <global_stdio_init.part.0>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <global_stdio_init.part.0+0x30>)
 80097c8:	4c0b      	ldr	r4, [pc, #44]	@ (80097f8 <global_stdio_init.part.0+0x34>)
 80097ca:	4a0c      	ldr	r2, [pc, #48]	@ (80097fc <global_stdio_init.part.0+0x38>)
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	4620      	mov	r0, r4
 80097d0:	2200      	movs	r2, #0
 80097d2:	2104      	movs	r1, #4
 80097d4:	f7ff ff94 	bl	8009700 <std>
 80097d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097dc:	2201      	movs	r2, #1
 80097de:	2109      	movs	r1, #9
 80097e0:	f7ff ff8e 	bl	8009700 <std>
 80097e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097e8:	2202      	movs	r2, #2
 80097ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ee:	2112      	movs	r1, #18
 80097f0:	f7ff bf86 	b.w	8009700 <std>
 80097f4:	20000ef4 	.word	0x20000ef4
 80097f8:	20000dbc 	.word	0x20000dbc
 80097fc:	0800976d 	.word	0x0800976d

08009800 <__sfp_lock_acquire>:
 8009800:	4801      	ldr	r0, [pc, #4]	@ (8009808 <__sfp_lock_acquire+0x8>)
 8009802:	f000 b968 	b.w	8009ad6 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	20000efd 	.word	0x20000efd

0800980c <__sfp_lock_release>:
 800980c:	4801      	ldr	r0, [pc, #4]	@ (8009814 <__sfp_lock_release+0x8>)
 800980e:	f000 b963 	b.w	8009ad8 <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	20000efd 	.word	0x20000efd

08009818 <__sinit>:
 8009818:	b510      	push	{r4, lr}
 800981a:	4604      	mov	r4, r0
 800981c:	f7ff fff0 	bl	8009800 <__sfp_lock_acquire>
 8009820:	6a23      	ldr	r3, [r4, #32]
 8009822:	b11b      	cbz	r3, 800982c <__sinit+0x14>
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	f7ff bff0 	b.w	800980c <__sfp_lock_release>
 800982c:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <__sinit+0x28>)
 800982e:	6223      	str	r3, [r4, #32]
 8009830:	4b04      	ldr	r3, [pc, #16]	@ (8009844 <__sinit+0x2c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1f5      	bne.n	8009824 <__sinit+0xc>
 8009838:	f7ff ffc4 	bl	80097c4 <global_stdio_init.part.0>
 800983c:	e7f2      	b.n	8009824 <__sinit+0xc>
 800983e:	bf00      	nop
 8009840:	08009785 	.word	0x08009785
 8009844:	20000ef4 	.word	0x20000ef4

08009848 <_fwalk_sglue>:
 8009848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4607      	mov	r7, r0
 800984e:	4688      	mov	r8, r1
 8009850:	4614      	mov	r4, r2
 8009852:	2600      	movs	r6, #0
 8009854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009858:	f1b9 0901 	subs.w	r9, r9, #1
 800985c:	d505      	bpl.n	800986a <_fwalk_sglue+0x22>
 800985e:	6824      	ldr	r4, [r4, #0]
 8009860:	2c00      	cmp	r4, #0
 8009862:	d1f7      	bne.n	8009854 <_fwalk_sglue+0xc>
 8009864:	4630      	mov	r0, r6
 8009866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d907      	bls.n	8009880 <_fwalk_sglue+0x38>
 8009870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009874:	3301      	adds	r3, #1
 8009876:	d003      	beq.n	8009880 <_fwalk_sglue+0x38>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	47c0      	blx	r8
 800987e:	4306      	orrs	r6, r0
 8009880:	3568      	adds	r5, #104	@ 0x68
 8009882:	e7e9      	b.n	8009858 <_fwalk_sglue+0x10>

08009884 <sniprintf>:
 8009884:	b40c      	push	{r2, r3}
 8009886:	b530      	push	{r4, r5, lr}
 8009888:	4b17      	ldr	r3, [pc, #92]	@ (80098e8 <sniprintf+0x64>)
 800988a:	1e0c      	subs	r4, r1, #0
 800988c:	681d      	ldr	r5, [r3, #0]
 800988e:	b09d      	sub	sp, #116	@ 0x74
 8009890:	da08      	bge.n	80098a4 <sniprintf+0x20>
 8009892:	238b      	movs	r3, #139	@ 0x8b
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	f04f 30ff 	mov.w	r0, #4294967295
 800989a:	b01d      	add	sp, #116	@ 0x74
 800989c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098a0:	b002      	add	sp, #8
 80098a2:	4770      	bx	lr
 80098a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80098a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098ac:	bf14      	ite	ne
 80098ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098b2:	4623      	moveq	r3, r4
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80098bc:	9002      	str	r0, [sp, #8]
 80098be:	9006      	str	r0, [sp, #24]
 80098c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80098c6:	ab21      	add	r3, sp, #132	@ 0x84
 80098c8:	a902      	add	r1, sp, #8
 80098ca:	4628      	mov	r0, r5
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	f002 f8cd 	bl	800ba6c <_svfiprintf_r>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	bfbc      	itt	lt
 80098d6:	238b      	movlt	r3, #139	@ 0x8b
 80098d8:	602b      	strlt	r3, [r5, #0]
 80098da:	2c00      	cmp	r4, #0
 80098dc:	d0dd      	beq.n	800989a <sniprintf+0x16>
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e7d9      	b.n	800989a <sniprintf+0x16>
 80098e6:	bf00      	nop
 80098e8:	20000230 	.word	0x20000230

080098ec <__sread>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	460c      	mov	r4, r1
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	f000 f8a0 	bl	8009a38 <_read_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	bfab      	itete	ge
 80098fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009900:	181b      	addge	r3, r3, r0
 8009902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009906:	bfac      	ite	ge
 8009908:	6563      	strge	r3, [r4, #84]	@ 0x54
 800990a:	81a3      	strhlt	r3, [r4, #12]
 800990c:	bd10      	pop	{r4, pc}

0800990e <__swrite>:
 800990e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009912:	461f      	mov	r7, r3
 8009914:	898b      	ldrh	r3, [r1, #12]
 8009916:	05db      	lsls	r3, r3, #23
 8009918:	4605      	mov	r5, r0
 800991a:	460c      	mov	r4, r1
 800991c:	4616      	mov	r6, r2
 800991e:	d505      	bpl.n	800992c <__swrite+0x1e>
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2302      	movs	r3, #2
 8009926:	2200      	movs	r2, #0
 8009928:	f000 f874 	bl	8009a14 <_lseek_r>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	4628      	mov	r0, r5
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	f000 b88b 	b.w	8009a5c <_write_r>

08009946 <__sseek>:
 8009946:	b510      	push	{r4, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994e:	f000 f861 	bl	8009a14 <_lseek_r>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	bf15      	itete	ne
 8009958:	6560      	strne	r0, [r4, #84]	@ 0x54
 800995a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800995e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009962:	81a3      	strheq	r3, [r4, #12]
 8009964:	bf18      	it	ne
 8009966:	81a3      	strhne	r3, [r4, #12]
 8009968:	bd10      	pop	{r4, pc}

0800996a <__sclose>:
 800996a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996e:	f000 b841 	b.w	80099f4 <_close_r>

08009972 <memset>:
 8009972:	4402      	add	r2, r0
 8009974:	4603      	mov	r3, r0
 8009976:	4293      	cmp	r3, r2
 8009978:	d100      	bne.n	800997c <memset+0xa>
 800997a:	4770      	bx	lr
 800997c:	f803 1b01 	strb.w	r1, [r3], #1
 8009980:	e7f9      	b.n	8009976 <memset+0x4>

08009982 <strcat>:
 8009982:	b510      	push	{r4, lr}
 8009984:	4602      	mov	r2, r0
 8009986:	7814      	ldrb	r4, [r2, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	3201      	adds	r2, #1
 800998c:	2c00      	cmp	r4, #0
 800998e:	d1fa      	bne.n	8009986 <strcat+0x4>
 8009990:	3b01      	subs	r3, #1
 8009992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800999a:	2a00      	cmp	r2, #0
 800999c:	d1f9      	bne.n	8009992 <strcat+0x10>
 800999e:	bd10      	pop	{r4, pc}

080099a0 <strncmp>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	b16a      	cbz	r2, 80099c0 <strncmp+0x20>
 80099a4:	3901      	subs	r1, #1
 80099a6:	1884      	adds	r4, r0, r2
 80099a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d103      	bne.n	80099bc <strncmp+0x1c>
 80099b4:	42a0      	cmp	r0, r4
 80099b6:	d001      	beq.n	80099bc <strncmp+0x1c>
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	d1f5      	bne.n	80099a8 <strncmp+0x8>
 80099bc:	1ad0      	subs	r0, r2, r3
 80099be:	bd10      	pop	{r4, pc}
 80099c0:	4610      	mov	r0, r2
 80099c2:	e7fc      	b.n	80099be <strncmp+0x1e>

080099c4 <strncpy>:
 80099c4:	b510      	push	{r4, lr}
 80099c6:	3901      	subs	r1, #1
 80099c8:	4603      	mov	r3, r0
 80099ca:	b132      	cbz	r2, 80099da <strncpy+0x16>
 80099cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80099d0:	f803 4b01 	strb.w	r4, [r3], #1
 80099d4:	3a01      	subs	r2, #1
 80099d6:	2c00      	cmp	r4, #0
 80099d8:	d1f7      	bne.n	80099ca <strncpy+0x6>
 80099da:	441a      	add	r2, r3
 80099dc:	2100      	movs	r1, #0
 80099de:	4293      	cmp	r3, r2
 80099e0:	d100      	bne.n	80099e4 <strncpy+0x20>
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	f803 1b01 	strb.w	r1, [r3], #1
 80099e8:	e7f9      	b.n	80099de <strncpy+0x1a>
	...

080099ec <_localeconv_r>:
 80099ec:	4800      	ldr	r0, [pc, #0]	@ (80099f0 <_localeconv_r+0x4>)
 80099ee:	4770      	bx	lr
 80099f0:	200001b4 	.word	0x200001b4

080099f4 <_close_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d06      	ldr	r5, [pc, #24]	@ (8009a10 <_close_r+0x1c>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	602b      	str	r3, [r5, #0]
 8009a00:	f7f9 fbeb 	bl	80031da <_close>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_close_r+0x1a>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_close_r+0x1a>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20000ef8 	.word	0x20000ef8

08009a14 <_lseek_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	@ (8009a34 <_lseek_r+0x20>)
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f7f9 fc00 	bl	8003228 <_lseek>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_lseek_r+0x1e>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_lseek_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	20000ef8 	.word	0x20000ef8

08009a38 <_read_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	@ (8009a58 <_read_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f9 fb8e 	bl	8003168 <_read>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_read_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_read_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000ef8 	.word	0x20000ef8

08009a5c <_write_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	@ (8009a7c <_write_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7f9 fb99 	bl	80031a2 <_write>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_write_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_write_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000ef8 	.word	0x20000ef8

08009a80 <__errno>:
 8009a80:	4b01      	ldr	r3, [pc, #4]	@ (8009a88 <__errno+0x8>)
 8009a82:	6818      	ldr	r0, [r3, #0]
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20000230 	.word	0x20000230

08009a8c <__libc_init_array>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8009ac4 <__libc_init_array+0x38>)
 8009a90:	4c0d      	ldr	r4, [pc, #52]	@ (8009ac8 <__libc_init_array+0x3c>)
 8009a92:	1b64      	subs	r4, r4, r5
 8009a94:	10a4      	asrs	r4, r4, #2
 8009a96:	2600      	movs	r6, #0
 8009a98:	42a6      	cmp	r6, r4
 8009a9a:	d109      	bne.n	8009ab0 <__libc_init_array+0x24>
 8009a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8009acc <__libc_init_array+0x40>)
 8009a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ad0 <__libc_init_array+0x44>)
 8009aa0:	f003 fb0a 	bl	800d0b8 <_init>
 8009aa4:	1b64      	subs	r4, r4, r5
 8009aa6:	10a4      	asrs	r4, r4, #2
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	42a6      	cmp	r6, r4
 8009aac:	d105      	bne.n	8009aba <__libc_init_array+0x2e>
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ab4:	4798      	blx	r3
 8009ab6:	3601      	adds	r6, #1
 8009ab8:	e7ee      	b.n	8009a98 <__libc_init_array+0xc>
 8009aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009abe:	4798      	blx	r3
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	e7f2      	b.n	8009aaa <__libc_init_array+0x1e>
 8009ac4:	0800d790 	.word	0x0800d790
 8009ac8:	0800d790 	.word	0x0800d790
 8009acc:	0800d790 	.word	0x0800d790
 8009ad0:	0800d794 	.word	0x0800d794

08009ad4 <__retarget_lock_init_recursive>:
 8009ad4:	4770      	bx	lr

08009ad6 <__retarget_lock_acquire_recursive>:
 8009ad6:	4770      	bx	lr

08009ad8 <__retarget_lock_release_recursive>:
 8009ad8:	4770      	bx	lr

08009ada <memcpy>:
 8009ada:	440a      	add	r2, r1
 8009adc:	4291      	cmp	r1, r2
 8009ade:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ae2:	d100      	bne.n	8009ae6 <memcpy+0xc>
 8009ae4:	4770      	bx	lr
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af0:	4291      	cmp	r1, r2
 8009af2:	d1f9      	bne.n	8009ae8 <memcpy+0xe>
 8009af4:	bd10      	pop	{r4, pc}
	...

08009af8 <nan>:
 8009af8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b00 <nan+0x8>
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	00000000 	.word	0x00000000
 8009b04:	7ff80000 	.word	0x7ff80000

08009b08 <quorem>:
 8009b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	6903      	ldr	r3, [r0, #16]
 8009b0e:	690c      	ldr	r4, [r1, #16]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	4607      	mov	r7, r0
 8009b14:	db7e      	blt.n	8009c14 <quorem+0x10c>
 8009b16:	3c01      	subs	r4, #1
 8009b18:	f101 0814 	add.w	r8, r1, #20
 8009b1c:	00a3      	lsls	r3, r4, #2
 8009b1e:	f100 0514 	add.w	r5, r0, #20
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b32:	3301      	adds	r3, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b3e:	d32e      	bcc.n	8009b9e <quorem+0x96>
 8009b40:	f04f 0a00 	mov.w	sl, #0
 8009b44:	46c4      	mov	ip, r8
 8009b46:	46ae      	mov	lr, r5
 8009b48:	46d3      	mov	fp, sl
 8009b4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b4e:	b298      	uxth	r0, r3
 8009b50:	fb06 a000 	mla	r0, r6, r0, sl
 8009b54:	0c02      	lsrs	r2, r0, #16
 8009b56:	0c1b      	lsrs	r3, r3, #16
 8009b58:	fb06 2303 	mla	r3, r6, r3, r2
 8009b5c:	f8de 2000 	ldr.w	r2, [lr]
 8009b60:	b280      	uxth	r0, r0
 8009b62:	b292      	uxth	r2, r2
 8009b64:	1a12      	subs	r2, r2, r0
 8009b66:	445a      	add	r2, fp
 8009b68:	f8de 0000 	ldr.w	r0, [lr]
 8009b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b76:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b7a:	b292      	uxth	r2, r2
 8009b7c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b80:	45e1      	cmp	r9, ip
 8009b82:	f84e 2b04 	str.w	r2, [lr], #4
 8009b86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b8a:	d2de      	bcs.n	8009b4a <quorem+0x42>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	58eb      	ldr	r3, [r5, r3]
 8009b90:	b92b      	cbnz	r3, 8009b9e <quorem+0x96>
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	429d      	cmp	r5, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	d32f      	bcc.n	8009bfc <quorem+0xf4>
 8009b9c:	613c      	str	r4, [r7, #16]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f001 fd0e 	bl	800b5c0 <__mcmp>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	db25      	blt.n	8009bf4 <quorem+0xec>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	2000      	movs	r0, #0
 8009bac:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bb0:	f8d1 c000 	ldr.w	ip, [r1]
 8009bb4:	fa1f fe82 	uxth.w	lr, r2
 8009bb8:	fa1f f38c 	uxth.w	r3, ip
 8009bbc:	eba3 030e 	sub.w	r3, r3, lr
 8009bc0:	4403      	add	r3, r0
 8009bc2:	0c12      	lsrs	r2, r2, #16
 8009bc4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009bc8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd2:	45c1      	cmp	r9, r8
 8009bd4:	f841 3b04 	str.w	r3, [r1], #4
 8009bd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009bdc:	d2e6      	bcs.n	8009bac <quorem+0xa4>
 8009bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009be6:	b922      	cbnz	r2, 8009bf2 <quorem+0xea>
 8009be8:	3b04      	subs	r3, #4
 8009bea:	429d      	cmp	r5, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	d30b      	bcc.n	8009c08 <quorem+0x100>
 8009bf0:	613c      	str	r4, [r7, #16]
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	b003      	add	sp, #12
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	2a00      	cmp	r2, #0
 8009c02:	d1cb      	bne.n	8009b9c <quorem+0x94>
 8009c04:	3c01      	subs	r4, #1
 8009c06:	e7c6      	b.n	8009b96 <quorem+0x8e>
 8009c08:	6812      	ldr	r2, [r2, #0]
 8009c0a:	3b04      	subs	r3, #4
 8009c0c:	2a00      	cmp	r2, #0
 8009c0e:	d1ef      	bne.n	8009bf0 <quorem+0xe8>
 8009c10:	3c01      	subs	r4, #1
 8009c12:	e7ea      	b.n	8009bea <quorem+0xe2>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e7ee      	b.n	8009bf6 <quorem+0xee>

08009c18 <_dtoa_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	69c7      	ldr	r7, [r0, #28]
 8009c1e:	b099      	sub	sp, #100	@ 0x64
 8009c20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009c24:	ec55 4b10 	vmov	r4, r5, d0
 8009c28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009c2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c2c:	4683      	mov	fp, r0
 8009c2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c32:	b97f      	cbnz	r7, 8009c54 <_dtoa_r+0x3c>
 8009c34:	2010      	movs	r0, #16
 8009c36:	f001 f937 	bl	800aea8 <malloc>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c40:	b920      	cbnz	r0, 8009c4c <_dtoa_r+0x34>
 8009c42:	4ba7      	ldr	r3, [pc, #668]	@ (8009ee0 <_dtoa_r+0x2c8>)
 8009c44:	21ef      	movs	r1, #239	@ 0xef
 8009c46:	48a7      	ldr	r0, [pc, #668]	@ (8009ee4 <_dtoa_r+0x2cc>)
 8009c48:	f002 f8e2 	bl	800be10 <__assert_func>
 8009c4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c50:	6007      	str	r7, [r0, #0]
 8009c52:	60c7      	str	r7, [r0, #12]
 8009c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	b159      	cbz	r1, 8009c74 <_dtoa_r+0x5c>
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	604a      	str	r2, [r1, #4]
 8009c60:	2301      	movs	r3, #1
 8009c62:	4093      	lsls	r3, r2
 8009c64:	608b      	str	r3, [r1, #8]
 8009c66:	4658      	mov	r0, fp
 8009c68:	f001 fa26 	bl	800b0b8 <_Bfree>
 8009c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	1e2b      	subs	r3, r5, #0
 8009c76:	bfb9      	ittee	lt
 8009c78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c7c:	9303      	strlt	r3, [sp, #12]
 8009c7e:	2300      	movge	r3, #0
 8009c80:	6033      	strge	r3, [r6, #0]
 8009c82:	9f03      	ldr	r7, [sp, #12]
 8009c84:	4b98      	ldr	r3, [pc, #608]	@ (8009ee8 <_dtoa_r+0x2d0>)
 8009c86:	bfbc      	itt	lt
 8009c88:	2201      	movlt	r2, #1
 8009c8a:	6032      	strlt	r2, [r6, #0]
 8009c8c:	43bb      	bics	r3, r7
 8009c8e:	d112      	bne.n	8009cb6 <_dtoa_r+0x9e>
 8009c90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c9c:	4323      	orrs	r3, r4
 8009c9e:	f000 854d 	beq.w	800a73c <_dtoa_r+0xb24>
 8009ca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ca4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009efc <_dtoa_r+0x2e4>
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 854f 	beq.w	800a74c <_dtoa_r+0xb34>
 8009cae:	f10a 0303 	add.w	r3, sl, #3
 8009cb2:	f000 bd49 	b.w	800a748 <_dtoa_r+0xb30>
 8009cb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	ec51 0b17 	vmov	r0, r1, d7
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009cc6:	f7f6 ff1f 	bl	8000b08 <__aeabi_dcmpeq>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	b158      	cbz	r0, 8009ce6 <_dtoa_r+0xce>
 8009cce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cd6:	b113      	cbz	r3, 8009cde <_dtoa_r+0xc6>
 8009cd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009cda:	4b84      	ldr	r3, [pc, #528]	@ (8009eec <_dtoa_r+0x2d4>)
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009f00 <_dtoa_r+0x2e8>
 8009ce2:	f000 bd33 	b.w	800a74c <_dtoa_r+0xb34>
 8009ce6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009cea:	aa16      	add	r2, sp, #88	@ 0x58
 8009cec:	a917      	add	r1, sp, #92	@ 0x5c
 8009cee:	4658      	mov	r0, fp
 8009cf0:	f001 fd86 	bl	800b800 <__d2b>
 8009cf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009cf8:	4681      	mov	r9, r0
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d077      	beq.n	8009dee <_dtoa_r+0x1d6>
 8009cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d18:	4619      	mov	r1, r3
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4b74      	ldr	r3, [pc, #464]	@ (8009ef0 <_dtoa_r+0x2d8>)
 8009d1e:	f7f6 fad3 	bl	80002c8 <__aeabi_dsub>
 8009d22:	a369      	add	r3, pc, #420	@ (adr r3, 8009ec8 <_dtoa_r+0x2b0>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fc86 	bl	8000638 <__aeabi_dmul>
 8009d2c:	a368      	add	r3, pc, #416	@ (adr r3, 8009ed0 <_dtoa_r+0x2b8>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 facb 	bl	80002cc <__adddf3>
 8009d36:	4604      	mov	r4, r0
 8009d38:	4630      	mov	r0, r6
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	f7f6 fc12 	bl	8000564 <__aeabi_i2d>
 8009d40:	a365      	add	r3, pc, #404	@ (adr r3, 8009ed8 <_dtoa_r+0x2c0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fc77 	bl	8000638 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fabb 	bl	80002cc <__adddf3>
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 ff1d 	bl	8000b98 <__aeabi_d2iz>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4607      	mov	r7, r0
 8009d62:	2300      	movs	r3, #0
 8009d64:	4620      	mov	r0, r4
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 fed8 	bl	8000b1c <__aeabi_dcmplt>
 8009d6c:	b140      	cbz	r0, 8009d80 <_dtoa_r+0x168>
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f7f6 fbf8 	bl	8000564 <__aeabi_i2d>
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fec6 	bl	8000b08 <__aeabi_dcmpeq>
 8009d7c:	b900      	cbnz	r0, 8009d80 <_dtoa_r+0x168>
 8009d7e:	3f01      	subs	r7, #1
 8009d80:	2f16      	cmp	r7, #22
 8009d82:	d851      	bhi.n	8009e28 <_dtoa_r+0x210>
 8009d84:	4b5b      	ldr	r3, [pc, #364]	@ (8009ef4 <_dtoa_r+0x2dc>)
 8009d86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d92:	f7f6 fec3 	bl	8000b1c <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d048      	beq.n	8009e2c <_dtoa_r+0x214>
 8009d9a:	3f01      	subs	r7, #1
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009da0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009da2:	1b9b      	subs	r3, r3, r6
 8009da4:	1e5a      	subs	r2, r3, #1
 8009da6:	bf44      	itt	mi
 8009da8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009dac:	2300      	movmi	r3, #0
 8009dae:	9208      	str	r2, [sp, #32]
 8009db0:	bf54      	ite	pl
 8009db2:	f04f 0800 	movpl.w	r8, #0
 8009db6:	9308      	strmi	r3, [sp, #32]
 8009db8:	2f00      	cmp	r7, #0
 8009dba:	db39      	blt.n	8009e30 <_dtoa_r+0x218>
 8009dbc:	9b08      	ldr	r3, [sp, #32]
 8009dbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009dc0:	443b      	add	r3, r7
 8009dc2:	9308      	str	r3, [sp, #32]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dca:	2b09      	cmp	r3, #9
 8009dcc:	d864      	bhi.n	8009e98 <_dtoa_r+0x280>
 8009dce:	2b05      	cmp	r3, #5
 8009dd0:	bfc4      	itt	gt
 8009dd2:	3b04      	subgt	r3, #4
 8009dd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dd8:	f1a3 0302 	sub.w	r3, r3, #2
 8009ddc:	bfcc      	ite	gt
 8009dde:	2400      	movgt	r4, #0
 8009de0:	2401      	movle	r4, #1
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d863      	bhi.n	8009eae <_dtoa_r+0x296>
 8009de6:	e8df f003 	tbb	[pc, r3]
 8009dea:	372a      	.short	0x372a
 8009dec:	5535      	.short	0x5535
 8009dee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009df2:	441e      	add	r6, r3
 8009df4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	bfc1      	itttt	gt
 8009dfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e00:	409f      	lslgt	r7, r3
 8009e02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e0a:	bfd6      	itet	le
 8009e0c:	f1c3 0320 	rsble	r3, r3, #32
 8009e10:	ea47 0003 	orrgt.w	r0, r7, r3
 8009e14:	fa04 f003 	lslle.w	r0, r4, r3
 8009e18:	f7f6 fb94 	bl	8000544 <__aeabi_ui2d>
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e22:	3e01      	subs	r6, #1
 8009e24:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e26:	e777      	b.n	8009d18 <_dtoa_r+0x100>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e7b8      	b.n	8009d9e <_dtoa_r+0x186>
 8009e2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009e2e:	e7b7      	b.n	8009da0 <_dtoa_r+0x188>
 8009e30:	427b      	negs	r3, r7
 8009e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e34:	2300      	movs	r3, #0
 8009e36:	eba8 0807 	sub.w	r8, r8, r7
 8009e3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e3c:	e7c4      	b.n	8009dc8 <_dtoa_r+0x1b0>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dc35      	bgt.n	8009eb4 <_dtoa_r+0x29c>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e52:	e00b      	b.n	8009e6c <_dtoa_r+0x254>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e7f3      	b.n	8009e40 <_dtoa_r+0x228>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e5e:	18fb      	adds	r3, r7, r3
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	9307      	str	r3, [sp, #28]
 8009e68:	bfb8      	it	lt
 8009e6a:	2301      	movlt	r3, #1
 8009e6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009e70:	2100      	movs	r1, #0
 8009e72:	2204      	movs	r2, #4
 8009e74:	f102 0514 	add.w	r5, r2, #20
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	d91f      	bls.n	8009ebc <_dtoa_r+0x2a4>
 8009e7c:	6041      	str	r1, [r0, #4]
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f001 f8da 	bl	800b038 <_Balloc>
 8009e84:	4682      	mov	sl, r0
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d13c      	bne.n	8009f04 <_dtoa_r+0x2ec>
 8009e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef8 <_dtoa_r+0x2e0>)
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e92:	e6d8      	b.n	8009c46 <_dtoa_r+0x2e>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7e0      	b.n	8009e5a <_dtoa_r+0x242>
 8009e98:	2401      	movs	r4, #1
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea4:	9300      	str	r3, [sp, #0]
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2312      	movs	r3, #18
 8009eac:	e7d0      	b.n	8009e50 <_dtoa_r+0x238>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eb2:	e7f5      	b.n	8009ea0 <_dtoa_r+0x288>
 8009eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	9307      	str	r3, [sp, #28]
 8009eba:	e7d7      	b.n	8009e6c <_dtoa_r+0x254>
 8009ebc:	3101      	adds	r1, #1
 8009ebe:	0052      	lsls	r2, r2, #1
 8009ec0:	e7d8      	b.n	8009e74 <_dtoa_r+0x25c>
 8009ec2:	bf00      	nop
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	636f4361 	.word	0x636f4361
 8009ecc:	3fd287a7 	.word	0x3fd287a7
 8009ed0:	8b60c8b3 	.word	0x8b60c8b3
 8009ed4:	3fc68a28 	.word	0x3fc68a28
 8009ed8:	509f79fb 	.word	0x509f79fb
 8009edc:	3fd34413 	.word	0x3fd34413
 8009ee0:	0800d47a 	.word	0x0800d47a
 8009ee4:	0800d491 	.word	0x0800d491
 8009ee8:	7ff00000 	.word	0x7ff00000
 8009eec:	0800d442 	.word	0x0800d442
 8009ef0:	3ff80000 	.word	0x3ff80000
 8009ef4:	0800d5e8 	.word	0x0800d5e8
 8009ef8:	0800d4e9 	.word	0x0800d4e9
 8009efc:	0800d476 	.word	0x0800d476
 8009f00:	0800d441 	.word	0x0800d441
 8009f04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f08:	6018      	str	r0, [r3, #0]
 8009f0a:	9b07      	ldr	r3, [sp, #28]
 8009f0c:	2b0e      	cmp	r3, #14
 8009f0e:	f200 80a4 	bhi.w	800a05a <_dtoa_r+0x442>
 8009f12:	2c00      	cmp	r4, #0
 8009f14:	f000 80a1 	beq.w	800a05a <_dtoa_r+0x442>
 8009f18:	2f00      	cmp	r7, #0
 8009f1a:	dd33      	ble.n	8009f84 <_dtoa_r+0x36c>
 8009f1c:	4bad      	ldr	r3, [pc, #692]	@ (800a1d4 <_dtoa_r+0x5bc>)
 8009f1e:	f007 020f 	and.w	r2, r7, #15
 8009f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f26:	ed93 7b00 	vldr	d7, [r3]
 8009f2a:	05f8      	lsls	r0, r7, #23
 8009f2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009f30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f34:	d516      	bpl.n	8009f64 <_dtoa_r+0x34c>
 8009f36:	4ba8      	ldr	r3, [pc, #672]	@ (800a1d8 <_dtoa_r+0x5c0>)
 8009f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f40:	f7f6 fca4 	bl	800088c <__aeabi_ddiv>
 8009f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f48:	f004 040f 	and.w	r4, r4, #15
 8009f4c:	2603      	movs	r6, #3
 8009f4e:	4da2      	ldr	r5, [pc, #648]	@ (800a1d8 <_dtoa_r+0x5c0>)
 8009f50:	b954      	cbnz	r4, 8009f68 <_dtoa_r+0x350>
 8009f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5a:	f7f6 fc97 	bl	800088c <__aeabi_ddiv>
 8009f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f62:	e028      	b.n	8009fb6 <_dtoa_r+0x39e>
 8009f64:	2602      	movs	r6, #2
 8009f66:	e7f2      	b.n	8009f4e <_dtoa_r+0x336>
 8009f68:	07e1      	lsls	r1, r4, #31
 8009f6a:	d508      	bpl.n	8009f7e <_dtoa_r+0x366>
 8009f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f74:	f7f6 fb60 	bl	8000638 <__aeabi_dmul>
 8009f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	1064      	asrs	r4, r4, #1
 8009f80:	3508      	adds	r5, #8
 8009f82:	e7e5      	b.n	8009f50 <_dtoa_r+0x338>
 8009f84:	f000 80d2 	beq.w	800a12c <_dtoa_r+0x514>
 8009f88:	427c      	negs	r4, r7
 8009f8a:	4b92      	ldr	r3, [pc, #584]	@ (800a1d4 <_dtoa_r+0x5bc>)
 8009f8c:	4d92      	ldr	r5, [pc, #584]	@ (800a1d8 <_dtoa_r+0x5c0>)
 8009f8e:	f004 020f 	and.w	r2, r4, #15
 8009f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f9e:	f7f6 fb4b 	bl	8000638 <__aeabi_dmul>
 8009fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa6:	1124      	asrs	r4, r4, #4
 8009fa8:	2300      	movs	r3, #0
 8009faa:	2602      	movs	r6, #2
 8009fac:	2c00      	cmp	r4, #0
 8009fae:	f040 80b2 	bne.w	800a116 <_dtoa_r+0x4fe>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1d3      	bne.n	8009f5e <_dtoa_r+0x346>
 8009fb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009fb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 80b7 	beq.w	800a130 <_dtoa_r+0x518>
 8009fc2:	4b86      	ldr	r3, [pc, #536]	@ (800a1dc <_dtoa_r+0x5c4>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 fda7 	bl	8000b1c <__aeabi_dcmplt>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	f000 80ae 	beq.w	800a130 <_dtoa_r+0x518>
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 80aa 	beq.w	800a130 <_dtoa_r+0x518>
 8009fdc:	9b00      	ldr	r3, [sp, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	dd37      	ble.n	800a052 <_dtoa_r+0x43a>
 8009fe2:	1e7b      	subs	r3, r7, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4b7d      	ldr	r3, [pc, #500]	@ (800a1e0 <_dtoa_r+0x5c8>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 fb23 	bl	8000638 <__aeabi_dmul>
 8009ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff6:	9c00      	ldr	r4, [sp, #0]
 8009ff8:	3601      	adds	r6, #1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f7f6 fab2 	bl	8000564 <__aeabi_i2d>
 800a000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a004:	f7f6 fb18 	bl	8000638 <__aeabi_dmul>
 800a008:	4b76      	ldr	r3, [pc, #472]	@ (800a1e4 <_dtoa_r+0x5cc>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	f7f6 f95e 	bl	80002cc <__adddf3>
 800a010:	4605      	mov	r5, r0
 800a012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a016:	2c00      	cmp	r4, #0
 800a018:	f040 808d 	bne.w	800a136 <_dtoa_r+0x51e>
 800a01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a020:	4b71      	ldr	r3, [pc, #452]	@ (800a1e8 <_dtoa_r+0x5d0>)
 800a022:	2200      	movs	r2, #0
 800a024:	f7f6 f950 	bl	80002c8 <__aeabi_dsub>
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a030:	462a      	mov	r2, r5
 800a032:	4633      	mov	r3, r6
 800a034:	f7f6 fd90 	bl	8000b58 <__aeabi_dcmpgt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	f040 828b 	bne.w	800a554 <_dtoa_r+0x93c>
 800a03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a042:	462a      	mov	r2, r5
 800a044:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a048:	f7f6 fd68 	bl	8000b1c <__aeabi_dcmplt>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 8128 	bne.w	800a2a2 <_dtoa_r+0x68a>
 800a052:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a05a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f2c0 815a 	blt.w	800a316 <_dtoa_r+0x6fe>
 800a062:	2f0e      	cmp	r7, #14
 800a064:	f300 8157 	bgt.w	800a316 <_dtoa_r+0x6fe>
 800a068:	4b5a      	ldr	r3, [pc, #360]	@ (800a1d4 <_dtoa_r+0x5bc>)
 800a06a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a06e:	ed93 7b00 	vldr	d7, [r3]
 800a072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a074:	2b00      	cmp	r3, #0
 800a076:	ed8d 7b00 	vstr	d7, [sp]
 800a07a:	da03      	bge.n	800a084 <_dtoa_r+0x46c>
 800a07c:	9b07      	ldr	r3, [sp, #28]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f340 8101 	ble.w	800a286 <_dtoa_r+0x66e>
 800a084:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a088:	4656      	mov	r6, sl
 800a08a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fbfb 	bl	800088c <__aeabi_ddiv>
 800a096:	f7f6 fd7f 	bl	8000b98 <__aeabi_d2iz>
 800a09a:	4680      	mov	r8, r0
 800a09c:	f7f6 fa62 	bl	8000564 <__aeabi_i2d>
 800a0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0a4:	f7f6 fac8 	bl	8000638 <__aeabi_dmul>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a0b4:	f7f6 f908 	bl	80002c8 <__aeabi_dsub>
 800a0b8:	f806 4b01 	strb.w	r4, [r6], #1
 800a0bc:	9d07      	ldr	r5, [sp, #28]
 800a0be:	eba6 040a 	sub.w	r4, r6, sl
 800a0c2:	42a5      	cmp	r5, r4
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	f040 8117 	bne.w	800a2fa <_dtoa_r+0x6e2>
 800a0cc:	f7f6 f8fe 	bl	80002cc <__adddf3>
 800a0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	f7f6 fd3e 	bl	8000b58 <__aeabi_dcmpgt>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f040 80f9 	bne.w	800a2d4 <_dtoa_r+0x6bc>
 800a0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7f6 fd0d 	bl	8000b08 <__aeabi_dcmpeq>
 800a0ee:	b118      	cbz	r0, 800a0f8 <_dtoa_r+0x4e0>
 800a0f0:	f018 0f01 	tst.w	r8, #1
 800a0f4:	f040 80ee 	bne.w	800a2d4 <_dtoa_r+0x6bc>
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f000 ffdc 	bl	800b0b8 <_Bfree>
 800a100:	2300      	movs	r3, #0
 800a102:	7033      	strb	r3, [r6, #0]
 800a104:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a106:	3701      	adds	r7, #1
 800a108:	601f      	str	r7, [r3, #0]
 800a10a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 831d 	beq.w	800a74c <_dtoa_r+0xb34>
 800a112:	601e      	str	r6, [r3, #0]
 800a114:	e31a      	b.n	800a74c <_dtoa_r+0xb34>
 800a116:	07e2      	lsls	r2, r4, #31
 800a118:	d505      	bpl.n	800a126 <_dtoa_r+0x50e>
 800a11a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a11e:	f7f6 fa8b 	bl	8000638 <__aeabi_dmul>
 800a122:	3601      	adds	r6, #1
 800a124:	2301      	movs	r3, #1
 800a126:	1064      	asrs	r4, r4, #1
 800a128:	3508      	adds	r5, #8
 800a12a:	e73f      	b.n	8009fac <_dtoa_r+0x394>
 800a12c:	2602      	movs	r6, #2
 800a12e:	e742      	b.n	8009fb6 <_dtoa_r+0x39e>
 800a130:	9c07      	ldr	r4, [sp, #28]
 800a132:	9704      	str	r7, [sp, #16]
 800a134:	e761      	b.n	8009ffa <_dtoa_r+0x3e2>
 800a136:	4b27      	ldr	r3, [pc, #156]	@ (800a1d4 <_dtoa_r+0x5bc>)
 800a138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a13e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a142:	4454      	add	r4, sl
 800a144:	2900      	cmp	r1, #0
 800a146:	d053      	beq.n	800a1f0 <_dtoa_r+0x5d8>
 800a148:	4928      	ldr	r1, [pc, #160]	@ (800a1ec <_dtoa_r+0x5d4>)
 800a14a:	2000      	movs	r0, #0
 800a14c:	f7f6 fb9e 	bl	800088c <__aeabi_ddiv>
 800a150:	4633      	mov	r3, r6
 800a152:	462a      	mov	r2, r5
 800a154:	f7f6 f8b8 	bl	80002c8 <__aeabi_dsub>
 800a158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a15c:	4656      	mov	r6, sl
 800a15e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a162:	f7f6 fd19 	bl	8000b98 <__aeabi_d2iz>
 800a166:	4605      	mov	r5, r0
 800a168:	f7f6 f9fc 	bl	8000564 <__aeabi_i2d>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a174:	f7f6 f8a8 	bl	80002c8 <__aeabi_dsub>
 800a178:	3530      	adds	r5, #48	@ 0x30
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a182:	f806 5b01 	strb.w	r5, [r6], #1
 800a186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a18a:	f7f6 fcc7 	bl	8000b1c <__aeabi_dcmplt>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d171      	bne.n	800a276 <_dtoa_r+0x65e>
 800a192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a196:	4911      	ldr	r1, [pc, #68]	@ (800a1dc <_dtoa_r+0x5c4>)
 800a198:	2000      	movs	r0, #0
 800a19a:	f7f6 f895 	bl	80002c8 <__aeabi_dsub>
 800a19e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1a2:	f7f6 fcbb 	bl	8000b1c <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f040 8095 	bne.w	800a2d6 <_dtoa_r+0x6be>
 800a1ac:	42a6      	cmp	r6, r4
 800a1ae:	f43f af50 	beq.w	800a052 <_dtoa_r+0x43a>
 800a1b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a1e0 <_dtoa_r+0x5c8>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7f6 fa3d 	bl	8000638 <__aeabi_dmul>
 800a1be:	4b08      	ldr	r3, [pc, #32]	@ (800a1e0 <_dtoa_r+0x5c8>)
 800a1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1ca:	f7f6 fa35 	bl	8000638 <__aeabi_dmul>
 800a1ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d2:	e7c4      	b.n	800a15e <_dtoa_r+0x546>
 800a1d4:	0800d5e8 	.word	0x0800d5e8
 800a1d8:	0800d5c0 	.word	0x0800d5c0
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	40240000 	.word	0x40240000
 800a1e4:	401c0000 	.word	0x401c0000
 800a1e8:	40140000 	.word	0x40140000
 800a1ec:	3fe00000 	.word	0x3fe00000
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f7f6 fa20 	bl	8000638 <__aeabi_dmul>
 800a1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1fc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a1fe:	4656      	mov	r6, sl
 800a200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a204:	f7f6 fcc8 	bl	8000b98 <__aeabi_d2iz>
 800a208:	4605      	mov	r5, r0
 800a20a:	f7f6 f9ab 	bl	8000564 <__aeabi_i2d>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a216:	f7f6 f857 	bl	80002c8 <__aeabi_dsub>
 800a21a:	3530      	adds	r5, #48	@ 0x30
 800a21c:	f806 5b01 	strb.w	r5, [r6], #1
 800a220:	4602      	mov	r2, r0
 800a222:	460b      	mov	r3, r1
 800a224:	42a6      	cmp	r6, r4
 800a226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a22a:	f04f 0200 	mov.w	r2, #0
 800a22e:	d124      	bne.n	800a27a <_dtoa_r+0x662>
 800a230:	4bac      	ldr	r3, [pc, #688]	@ (800a4e4 <_dtoa_r+0x8cc>)
 800a232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a236:	f7f6 f849 	bl	80002cc <__adddf3>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a242:	f7f6 fc89 	bl	8000b58 <__aeabi_dcmpgt>
 800a246:	2800      	cmp	r0, #0
 800a248:	d145      	bne.n	800a2d6 <_dtoa_r+0x6be>
 800a24a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a24e:	49a5      	ldr	r1, [pc, #660]	@ (800a4e4 <_dtoa_r+0x8cc>)
 800a250:	2000      	movs	r0, #0
 800a252:	f7f6 f839 	bl	80002c8 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a25e:	f7f6 fc5d 	bl	8000b1c <__aeabi_dcmplt>
 800a262:	2800      	cmp	r0, #0
 800a264:	f43f aef5 	beq.w	800a052 <_dtoa_r+0x43a>
 800a268:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a26a:	1e73      	subs	r3, r6, #1
 800a26c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a26e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a272:	2b30      	cmp	r3, #48	@ 0x30
 800a274:	d0f8      	beq.n	800a268 <_dtoa_r+0x650>
 800a276:	9f04      	ldr	r7, [sp, #16]
 800a278:	e73e      	b.n	800a0f8 <_dtoa_r+0x4e0>
 800a27a:	4b9b      	ldr	r3, [pc, #620]	@ (800a4e8 <_dtoa_r+0x8d0>)
 800a27c:	f7f6 f9dc 	bl	8000638 <__aeabi_dmul>
 800a280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a284:	e7bc      	b.n	800a200 <_dtoa_r+0x5e8>
 800a286:	d10c      	bne.n	800a2a2 <_dtoa_r+0x68a>
 800a288:	4b98      	ldr	r3, [pc, #608]	@ (800a4ec <_dtoa_r+0x8d4>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a290:	f7f6 f9d2 	bl	8000638 <__aeabi_dmul>
 800a294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a298:	f7f6 fc54 	bl	8000b44 <__aeabi_dcmpge>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	f000 8157 	beq.w	800a550 <_dtoa_r+0x938>
 800a2a2:	2400      	movs	r4, #0
 800a2a4:	4625      	mov	r5, r4
 800a2a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2a8:	43db      	mvns	r3, r3
 800a2aa:	9304      	str	r3, [sp, #16]
 800a2ac:	4656      	mov	r6, sl
 800a2ae:	2700      	movs	r7, #0
 800a2b0:	4621      	mov	r1, r4
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 ff00 	bl	800b0b8 <_Bfree>
 800a2b8:	2d00      	cmp	r5, #0
 800a2ba:	d0dc      	beq.n	800a276 <_dtoa_r+0x65e>
 800a2bc:	b12f      	cbz	r7, 800a2ca <_dtoa_r+0x6b2>
 800a2be:	42af      	cmp	r7, r5
 800a2c0:	d003      	beq.n	800a2ca <_dtoa_r+0x6b2>
 800a2c2:	4639      	mov	r1, r7
 800a2c4:	4658      	mov	r0, fp
 800a2c6:	f000 fef7 	bl	800b0b8 <_Bfree>
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4658      	mov	r0, fp
 800a2ce:	f000 fef3 	bl	800b0b8 <_Bfree>
 800a2d2:	e7d0      	b.n	800a276 <_dtoa_r+0x65e>
 800a2d4:	9704      	str	r7, [sp, #16]
 800a2d6:	4633      	mov	r3, r6
 800a2d8:	461e      	mov	r6, r3
 800a2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2de:	2a39      	cmp	r2, #57	@ 0x39
 800a2e0:	d107      	bne.n	800a2f2 <_dtoa_r+0x6da>
 800a2e2:	459a      	cmp	sl, r3
 800a2e4:	d1f8      	bne.n	800a2d8 <_dtoa_r+0x6c0>
 800a2e6:	9a04      	ldr	r2, [sp, #16]
 800a2e8:	3201      	adds	r2, #1
 800a2ea:	9204      	str	r2, [sp, #16]
 800a2ec:	2230      	movs	r2, #48	@ 0x30
 800a2ee:	f88a 2000 	strb.w	r2, [sl]
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	3201      	adds	r2, #1
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	e7bd      	b.n	800a276 <_dtoa_r+0x65e>
 800a2fa:	4b7b      	ldr	r3, [pc, #492]	@ (800a4e8 <_dtoa_r+0x8d0>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f7f6 f99b 	bl	8000638 <__aeabi_dmul>
 800a302:	2200      	movs	r2, #0
 800a304:	2300      	movs	r3, #0
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	f7f6 fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f43f aebb 	beq.w	800a08a <_dtoa_r+0x472>
 800a314:	e6f0      	b.n	800a0f8 <_dtoa_r+0x4e0>
 800a316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a318:	2a00      	cmp	r2, #0
 800a31a:	f000 80db 	beq.w	800a4d4 <_dtoa_r+0x8bc>
 800a31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a320:	2a01      	cmp	r2, #1
 800a322:	f300 80bf 	bgt.w	800a4a4 <_dtoa_r+0x88c>
 800a326:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a328:	2a00      	cmp	r2, #0
 800a32a:	f000 80b7 	beq.w	800a49c <_dtoa_r+0x884>
 800a32e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a332:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a334:	4646      	mov	r6, r8
 800a336:	9a08      	ldr	r2, [sp, #32]
 800a338:	2101      	movs	r1, #1
 800a33a:	441a      	add	r2, r3
 800a33c:	4658      	mov	r0, fp
 800a33e:	4498      	add	r8, r3
 800a340:	9208      	str	r2, [sp, #32]
 800a342:	f000 ffb7 	bl	800b2b4 <__i2b>
 800a346:	4605      	mov	r5, r0
 800a348:	b15e      	cbz	r6, 800a362 <_dtoa_r+0x74a>
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dd08      	ble.n	800a362 <_dtoa_r+0x74a>
 800a350:	42b3      	cmp	r3, r6
 800a352:	9a08      	ldr	r2, [sp, #32]
 800a354:	bfa8      	it	ge
 800a356:	4633      	movge	r3, r6
 800a358:	eba8 0803 	sub.w	r8, r8, r3
 800a35c:	1af6      	subs	r6, r6, r3
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	9308      	str	r3, [sp, #32]
 800a362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a364:	b1f3      	cbz	r3, 800a3a4 <_dtoa_r+0x78c>
 800a366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f000 80b7 	beq.w	800a4dc <_dtoa_r+0x8c4>
 800a36e:	b18c      	cbz	r4, 800a394 <_dtoa_r+0x77c>
 800a370:	4629      	mov	r1, r5
 800a372:	4622      	mov	r2, r4
 800a374:	4658      	mov	r0, fp
 800a376:	f001 f85d 	bl	800b434 <__pow5mult>
 800a37a:	464a      	mov	r2, r9
 800a37c:	4601      	mov	r1, r0
 800a37e:	4605      	mov	r5, r0
 800a380:	4658      	mov	r0, fp
 800a382:	f000 ffad 	bl	800b2e0 <__multiply>
 800a386:	4649      	mov	r1, r9
 800a388:	9004      	str	r0, [sp, #16]
 800a38a:	4658      	mov	r0, fp
 800a38c:	f000 fe94 	bl	800b0b8 <_Bfree>
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	4699      	mov	r9, r3
 800a394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a396:	1b1a      	subs	r2, r3, r4
 800a398:	d004      	beq.n	800a3a4 <_dtoa_r+0x78c>
 800a39a:	4649      	mov	r1, r9
 800a39c:	4658      	mov	r0, fp
 800a39e:	f001 f849 	bl	800b434 <__pow5mult>
 800a3a2:	4681      	mov	r9, r0
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4658      	mov	r0, fp
 800a3a8:	f000 ff84 	bl	800b2b4 <__i2b>
 800a3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 81cf 	beq.w	800a754 <_dtoa_r+0xb3c>
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	4658      	mov	r0, fp
 800a3bc:	f001 f83a 	bl	800b434 <__pow5mult>
 800a3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	f300 8095 	bgt.w	800a4f4 <_dtoa_r+0x8dc>
 800a3ca:	9b02      	ldr	r3, [sp, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 8087 	bne.w	800a4e0 <_dtoa_r+0x8c8>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f040 8089 	bne.w	800a4f0 <_dtoa_r+0x8d8>
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a3e4:	0d1b      	lsrs	r3, r3, #20
 800a3e6:	051b      	lsls	r3, r3, #20
 800a3e8:	b12b      	cbz	r3, 800a3f6 <_dtoa_r+0x7de>
 800a3ea:	9b08      	ldr	r3, [sp, #32]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	9308      	str	r3, [sp, #32]
 800a3f0:	f108 0801 	add.w	r8, r8, #1
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 81b0 	beq.w	800a760 <_dtoa_r+0xb48>
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a406:	6918      	ldr	r0, [r3, #16]
 800a408:	f000 ff08 	bl	800b21c <__hi0bits>
 800a40c:	f1c0 0020 	rsb	r0, r0, #32
 800a410:	9b08      	ldr	r3, [sp, #32]
 800a412:	4418      	add	r0, r3
 800a414:	f010 001f 	ands.w	r0, r0, #31
 800a418:	d077      	beq.n	800a50a <_dtoa_r+0x8f2>
 800a41a:	f1c0 0320 	rsb	r3, r0, #32
 800a41e:	2b04      	cmp	r3, #4
 800a420:	dd6b      	ble.n	800a4fa <_dtoa_r+0x8e2>
 800a422:	9b08      	ldr	r3, [sp, #32]
 800a424:	f1c0 001c 	rsb	r0, r0, #28
 800a428:	4403      	add	r3, r0
 800a42a:	4480      	add	r8, r0
 800a42c:	4406      	add	r6, r0
 800a42e:	9308      	str	r3, [sp, #32]
 800a430:	f1b8 0f00 	cmp.w	r8, #0
 800a434:	dd05      	ble.n	800a442 <_dtoa_r+0x82a>
 800a436:	4649      	mov	r1, r9
 800a438:	4642      	mov	r2, r8
 800a43a:	4658      	mov	r0, fp
 800a43c:	f001 f854 	bl	800b4e8 <__lshift>
 800a440:	4681      	mov	r9, r0
 800a442:	9b08      	ldr	r3, [sp, #32]
 800a444:	2b00      	cmp	r3, #0
 800a446:	dd05      	ble.n	800a454 <_dtoa_r+0x83c>
 800a448:	4621      	mov	r1, r4
 800a44a:	461a      	mov	r2, r3
 800a44c:	4658      	mov	r0, fp
 800a44e:	f001 f84b 	bl	800b4e8 <__lshift>
 800a452:	4604      	mov	r4, r0
 800a454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a456:	2b00      	cmp	r3, #0
 800a458:	d059      	beq.n	800a50e <_dtoa_r+0x8f6>
 800a45a:	4621      	mov	r1, r4
 800a45c:	4648      	mov	r0, r9
 800a45e:	f001 f8af 	bl	800b5c0 <__mcmp>
 800a462:	2800      	cmp	r0, #0
 800a464:	da53      	bge.n	800a50e <_dtoa_r+0x8f6>
 800a466:	1e7b      	subs	r3, r7, #1
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	4649      	mov	r1, r9
 800a46c:	2300      	movs	r3, #0
 800a46e:	220a      	movs	r2, #10
 800a470:	4658      	mov	r0, fp
 800a472:	f000 fe43 	bl	800b0fc <__multadd>
 800a476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a478:	4681      	mov	r9, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 8172 	beq.w	800a764 <_dtoa_r+0xb4c>
 800a480:	2300      	movs	r3, #0
 800a482:	4629      	mov	r1, r5
 800a484:	220a      	movs	r2, #10
 800a486:	4658      	mov	r0, fp
 800a488:	f000 fe38 	bl	800b0fc <__multadd>
 800a48c:	9b00      	ldr	r3, [sp, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	4605      	mov	r5, r0
 800a492:	dc67      	bgt.n	800a564 <_dtoa_r+0x94c>
 800a494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a496:	2b02      	cmp	r3, #2
 800a498:	dc41      	bgt.n	800a51e <_dtoa_r+0x906>
 800a49a:	e063      	b.n	800a564 <_dtoa_r+0x94c>
 800a49c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a49e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4a2:	e746      	b.n	800a332 <_dtoa_r+0x71a>
 800a4a4:	9b07      	ldr	r3, [sp, #28]
 800a4a6:	1e5c      	subs	r4, r3, #1
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4aa:	42a3      	cmp	r3, r4
 800a4ac:	bfbf      	itttt	lt
 800a4ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a4b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a4b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a4b4:	1ae3      	sublt	r3, r4, r3
 800a4b6:	bfb4      	ite	lt
 800a4b8:	18d2      	addlt	r2, r2, r3
 800a4ba:	1b1c      	subge	r4, r3, r4
 800a4bc:	9b07      	ldr	r3, [sp, #28]
 800a4be:	bfbc      	itt	lt
 800a4c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a4c2:	2400      	movlt	r4, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	bfb5      	itete	lt
 800a4c8:	eba8 0603 	sublt.w	r6, r8, r3
 800a4cc:	9b07      	ldrge	r3, [sp, #28]
 800a4ce:	2300      	movlt	r3, #0
 800a4d0:	4646      	movge	r6, r8
 800a4d2:	e730      	b.n	800a336 <_dtoa_r+0x71e>
 800a4d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a4d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a4d8:	4646      	mov	r6, r8
 800a4da:	e735      	b.n	800a348 <_dtoa_r+0x730>
 800a4dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4de:	e75c      	b.n	800a39a <_dtoa_r+0x782>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	e788      	b.n	800a3f6 <_dtoa_r+0x7de>
 800a4e4:	3fe00000 	.word	0x3fe00000
 800a4e8:	40240000 	.word	0x40240000
 800a4ec:	40140000 	.word	0x40140000
 800a4f0:	9b02      	ldr	r3, [sp, #8]
 800a4f2:	e780      	b.n	800a3f6 <_dtoa_r+0x7de>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4f8:	e782      	b.n	800a400 <_dtoa_r+0x7e8>
 800a4fa:	d099      	beq.n	800a430 <_dtoa_r+0x818>
 800a4fc:	9a08      	ldr	r2, [sp, #32]
 800a4fe:	331c      	adds	r3, #28
 800a500:	441a      	add	r2, r3
 800a502:	4498      	add	r8, r3
 800a504:	441e      	add	r6, r3
 800a506:	9208      	str	r2, [sp, #32]
 800a508:	e792      	b.n	800a430 <_dtoa_r+0x818>
 800a50a:	4603      	mov	r3, r0
 800a50c:	e7f6      	b.n	800a4fc <_dtoa_r+0x8e4>
 800a50e:	9b07      	ldr	r3, [sp, #28]
 800a510:	9704      	str	r7, [sp, #16]
 800a512:	2b00      	cmp	r3, #0
 800a514:	dc20      	bgt.n	800a558 <_dtoa_r+0x940>
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	dd1e      	ble.n	800a55c <_dtoa_r+0x944>
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f47f aec0 	bne.w	800a2a6 <_dtoa_r+0x68e>
 800a526:	4621      	mov	r1, r4
 800a528:	2205      	movs	r2, #5
 800a52a:	4658      	mov	r0, fp
 800a52c:	f000 fde6 	bl	800b0fc <__multadd>
 800a530:	4601      	mov	r1, r0
 800a532:	4604      	mov	r4, r0
 800a534:	4648      	mov	r0, r9
 800a536:	f001 f843 	bl	800b5c0 <__mcmp>
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f77f aeb3 	ble.w	800a2a6 <_dtoa_r+0x68e>
 800a540:	4656      	mov	r6, sl
 800a542:	2331      	movs	r3, #49	@ 0x31
 800a544:	f806 3b01 	strb.w	r3, [r6], #1
 800a548:	9b04      	ldr	r3, [sp, #16]
 800a54a:	3301      	adds	r3, #1
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	e6ae      	b.n	800a2ae <_dtoa_r+0x696>
 800a550:	9c07      	ldr	r4, [sp, #28]
 800a552:	9704      	str	r7, [sp, #16]
 800a554:	4625      	mov	r5, r4
 800a556:	e7f3      	b.n	800a540 <_dtoa_r+0x928>
 800a558:	9b07      	ldr	r3, [sp, #28]
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8104 	beq.w	800a76c <_dtoa_r+0xb54>
 800a564:	2e00      	cmp	r6, #0
 800a566:	dd05      	ble.n	800a574 <_dtoa_r+0x95c>
 800a568:	4629      	mov	r1, r5
 800a56a:	4632      	mov	r2, r6
 800a56c:	4658      	mov	r0, fp
 800a56e:	f000 ffbb 	bl	800b4e8 <__lshift>
 800a572:	4605      	mov	r5, r0
 800a574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a576:	2b00      	cmp	r3, #0
 800a578:	d05a      	beq.n	800a630 <_dtoa_r+0xa18>
 800a57a:	6869      	ldr	r1, [r5, #4]
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fd5b 	bl	800b038 <_Balloc>
 800a582:	4606      	mov	r6, r0
 800a584:	b928      	cbnz	r0, 800a592 <_dtoa_r+0x97a>
 800a586:	4b84      	ldr	r3, [pc, #528]	@ (800a798 <_dtoa_r+0xb80>)
 800a588:	4602      	mov	r2, r0
 800a58a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a58e:	f7ff bb5a 	b.w	8009c46 <_dtoa_r+0x2e>
 800a592:	692a      	ldr	r2, [r5, #16]
 800a594:	3202      	adds	r2, #2
 800a596:	0092      	lsls	r2, r2, #2
 800a598:	f105 010c 	add.w	r1, r5, #12
 800a59c:	300c      	adds	r0, #12
 800a59e:	f7ff fa9c 	bl	8009ada <memcpy>
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4658      	mov	r0, fp
 800a5a8:	f000 ff9e 	bl	800b4e8 <__lshift>
 800a5ac:	f10a 0301 	add.w	r3, sl, #1
 800a5b0:	9307      	str	r3, [sp, #28]
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	4453      	add	r3, sl
 800a5b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5b8:	9b02      	ldr	r3, [sp, #8]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	462f      	mov	r7, r5
 800a5c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5c2:	4605      	mov	r5, r0
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	4648      	mov	r0, r9
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	f7ff fa9b 	bl	8009b08 <quorem>
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	9002      	str	r0, [sp, #8]
 800a5d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a5da:	4648      	mov	r0, r9
 800a5dc:	f000 fff0 	bl	800b5c0 <__mcmp>
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	9008      	str	r0, [sp, #32]
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	f001 f806 	bl	800b5f8 <__mdiff>
 800a5ec:	68c2      	ldr	r2, [r0, #12]
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	bb02      	cbnz	r2, 800a634 <_dtoa_r+0xa1c>
 800a5f2:	4601      	mov	r1, r0
 800a5f4:	4648      	mov	r0, r9
 800a5f6:	f000 ffe3 	bl	800b5c0 <__mcmp>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4658      	mov	r0, fp
 800a600:	920e      	str	r2, [sp, #56]	@ 0x38
 800a602:	f000 fd59 	bl	800b0b8 <_Bfree>
 800a606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a60a:	9e07      	ldr	r6, [sp, #28]
 800a60c:	ea43 0102 	orr.w	r1, r3, r2
 800a610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a612:	4319      	orrs	r1, r3
 800a614:	d110      	bne.n	800a638 <_dtoa_r+0xa20>
 800a616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a61a:	d029      	beq.n	800a670 <_dtoa_r+0xa58>
 800a61c:	9b08      	ldr	r3, [sp, #32]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd02      	ble.n	800a628 <_dtoa_r+0xa10>
 800a622:	9b02      	ldr	r3, [sp, #8]
 800a624:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a628:	9b00      	ldr	r3, [sp, #0]
 800a62a:	f883 8000 	strb.w	r8, [r3]
 800a62e:	e63f      	b.n	800a2b0 <_dtoa_r+0x698>
 800a630:	4628      	mov	r0, r5
 800a632:	e7bb      	b.n	800a5ac <_dtoa_r+0x994>
 800a634:	2201      	movs	r2, #1
 800a636:	e7e1      	b.n	800a5fc <_dtoa_r+0x9e4>
 800a638:	9b08      	ldr	r3, [sp, #32]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	db04      	blt.n	800a648 <_dtoa_r+0xa30>
 800a63e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a640:	430b      	orrs	r3, r1
 800a642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a644:	430b      	orrs	r3, r1
 800a646:	d120      	bne.n	800a68a <_dtoa_r+0xa72>
 800a648:	2a00      	cmp	r2, #0
 800a64a:	dded      	ble.n	800a628 <_dtoa_r+0xa10>
 800a64c:	4649      	mov	r1, r9
 800a64e:	2201      	movs	r2, #1
 800a650:	4658      	mov	r0, fp
 800a652:	f000 ff49 	bl	800b4e8 <__lshift>
 800a656:	4621      	mov	r1, r4
 800a658:	4681      	mov	r9, r0
 800a65a:	f000 ffb1 	bl	800b5c0 <__mcmp>
 800a65e:	2800      	cmp	r0, #0
 800a660:	dc03      	bgt.n	800a66a <_dtoa_r+0xa52>
 800a662:	d1e1      	bne.n	800a628 <_dtoa_r+0xa10>
 800a664:	f018 0f01 	tst.w	r8, #1
 800a668:	d0de      	beq.n	800a628 <_dtoa_r+0xa10>
 800a66a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a66e:	d1d8      	bne.n	800a622 <_dtoa_r+0xa0a>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	2339      	movs	r3, #57	@ 0x39
 800a674:	7013      	strb	r3, [r2, #0]
 800a676:	4633      	mov	r3, r6
 800a678:	461e      	mov	r6, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a680:	2a39      	cmp	r2, #57	@ 0x39
 800a682:	d052      	beq.n	800a72a <_dtoa_r+0xb12>
 800a684:	3201      	adds	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	e612      	b.n	800a2b0 <_dtoa_r+0x698>
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	dd07      	ble.n	800a69e <_dtoa_r+0xa86>
 800a68e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a692:	d0ed      	beq.n	800a670 <_dtoa_r+0xa58>
 800a694:	9a00      	ldr	r2, [sp, #0]
 800a696:	f108 0301 	add.w	r3, r8, #1
 800a69a:	7013      	strb	r3, [r2, #0]
 800a69c:	e608      	b.n	800a2b0 <_dtoa_r+0x698>
 800a69e:	9b07      	ldr	r3, [sp, #28]
 800a6a0:	9a07      	ldr	r2, [sp, #28]
 800a6a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d028      	beq.n	800a6fe <_dtoa_r+0xae6>
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	220a      	movs	r2, #10
 800a6b2:	4658      	mov	r0, fp
 800a6b4:	f000 fd22 	bl	800b0fc <__multadd>
 800a6b8:	42af      	cmp	r7, r5
 800a6ba:	4681      	mov	r9, r0
 800a6bc:	f04f 0300 	mov.w	r3, #0
 800a6c0:	f04f 020a 	mov.w	r2, #10
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4658      	mov	r0, fp
 800a6c8:	d107      	bne.n	800a6da <_dtoa_r+0xac2>
 800a6ca:	f000 fd17 	bl	800b0fc <__multadd>
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	9b07      	ldr	r3, [sp, #28]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	9307      	str	r3, [sp, #28]
 800a6d8:	e774      	b.n	800a5c4 <_dtoa_r+0x9ac>
 800a6da:	f000 fd0f 	bl	800b0fc <__multadd>
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	220a      	movs	r2, #10
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f000 fd08 	bl	800b0fc <__multadd>
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	e7f0      	b.n	800a6d2 <_dtoa_r+0xaba>
 800a6f0:	9b00      	ldr	r3, [sp, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bfcc      	ite	gt
 800a6f6:	461e      	movgt	r6, r3
 800a6f8:	2601      	movle	r6, #1
 800a6fa:	4456      	add	r6, sl
 800a6fc:	2700      	movs	r7, #0
 800a6fe:	4649      	mov	r1, r9
 800a700:	2201      	movs	r2, #1
 800a702:	4658      	mov	r0, fp
 800a704:	f000 fef0 	bl	800b4e8 <__lshift>
 800a708:	4621      	mov	r1, r4
 800a70a:	4681      	mov	r9, r0
 800a70c:	f000 ff58 	bl	800b5c0 <__mcmp>
 800a710:	2800      	cmp	r0, #0
 800a712:	dcb0      	bgt.n	800a676 <_dtoa_r+0xa5e>
 800a714:	d102      	bne.n	800a71c <_dtoa_r+0xb04>
 800a716:	f018 0f01 	tst.w	r8, #1
 800a71a:	d1ac      	bne.n	800a676 <_dtoa_r+0xa5e>
 800a71c:	4633      	mov	r3, r6
 800a71e:	461e      	mov	r6, r3
 800a720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a724:	2a30      	cmp	r2, #48	@ 0x30
 800a726:	d0fa      	beq.n	800a71e <_dtoa_r+0xb06>
 800a728:	e5c2      	b.n	800a2b0 <_dtoa_r+0x698>
 800a72a:	459a      	cmp	sl, r3
 800a72c:	d1a4      	bne.n	800a678 <_dtoa_r+0xa60>
 800a72e:	9b04      	ldr	r3, [sp, #16]
 800a730:	3301      	adds	r3, #1
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	2331      	movs	r3, #49	@ 0x31
 800a736:	f88a 3000 	strb.w	r3, [sl]
 800a73a:	e5b9      	b.n	800a2b0 <_dtoa_r+0x698>
 800a73c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a73e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a79c <_dtoa_r+0xb84>
 800a742:	b11b      	cbz	r3, 800a74c <_dtoa_r+0xb34>
 800a744:	f10a 0308 	add.w	r3, sl, #8
 800a748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	4650      	mov	r0, sl
 800a74e:	b019      	add	sp, #100	@ 0x64
 800a750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a756:	2b01      	cmp	r3, #1
 800a758:	f77f ae37 	ble.w	800a3ca <_dtoa_r+0x7b2>
 800a75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a760:	2001      	movs	r0, #1
 800a762:	e655      	b.n	800a410 <_dtoa_r+0x7f8>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	f77f aed6 	ble.w	800a518 <_dtoa_r+0x900>
 800a76c:	4656      	mov	r6, sl
 800a76e:	4621      	mov	r1, r4
 800a770:	4648      	mov	r0, r9
 800a772:	f7ff f9c9 	bl	8009b08 <quorem>
 800a776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a77a:	f806 8b01 	strb.w	r8, [r6], #1
 800a77e:	9b00      	ldr	r3, [sp, #0]
 800a780:	eba6 020a 	sub.w	r2, r6, sl
 800a784:	4293      	cmp	r3, r2
 800a786:	ddb3      	ble.n	800a6f0 <_dtoa_r+0xad8>
 800a788:	4649      	mov	r1, r9
 800a78a:	2300      	movs	r3, #0
 800a78c:	220a      	movs	r2, #10
 800a78e:	4658      	mov	r0, fp
 800a790:	f000 fcb4 	bl	800b0fc <__multadd>
 800a794:	4681      	mov	r9, r0
 800a796:	e7ea      	b.n	800a76e <_dtoa_r+0xb56>
 800a798:	0800d4e9 	.word	0x0800d4e9
 800a79c:	0800d46d 	.word	0x0800d46d

0800a7a0 <_free_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	2900      	cmp	r1, #0
 800a7a6:	d041      	beq.n	800a82c <_free_r+0x8c>
 800a7a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ac:	1f0c      	subs	r4, r1, #4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	bfb8      	it	lt
 800a7b2:	18e4      	addlt	r4, r4, r3
 800a7b4:	f000 fc34 	bl	800b020 <__malloc_lock>
 800a7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a830 <_free_r+0x90>)
 800a7ba:	6813      	ldr	r3, [r2, #0]
 800a7bc:	b933      	cbnz	r3, 800a7cc <_free_r+0x2c>
 800a7be:	6063      	str	r3, [r4, #4]
 800a7c0:	6014      	str	r4, [r2, #0]
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c8:	f000 bc30 	b.w	800b02c <__malloc_unlock>
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d908      	bls.n	800a7e2 <_free_r+0x42>
 800a7d0:	6820      	ldr	r0, [r4, #0]
 800a7d2:	1821      	adds	r1, r4, r0
 800a7d4:	428b      	cmp	r3, r1
 800a7d6:	bf01      	itttt	eq
 800a7d8:	6819      	ldreq	r1, [r3, #0]
 800a7da:	685b      	ldreq	r3, [r3, #4]
 800a7dc:	1809      	addeq	r1, r1, r0
 800a7de:	6021      	streq	r1, [r4, #0]
 800a7e0:	e7ed      	b.n	800a7be <_free_r+0x1e>
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	b10b      	cbz	r3, 800a7ec <_free_r+0x4c>
 800a7e8:	42a3      	cmp	r3, r4
 800a7ea:	d9fa      	bls.n	800a7e2 <_free_r+0x42>
 800a7ec:	6811      	ldr	r1, [r2, #0]
 800a7ee:	1850      	adds	r0, r2, r1
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d10b      	bne.n	800a80c <_free_r+0x6c>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	4401      	add	r1, r0
 800a7f8:	1850      	adds	r0, r2, r1
 800a7fa:	4283      	cmp	r3, r0
 800a7fc:	6011      	str	r1, [r2, #0]
 800a7fe:	d1e0      	bne.n	800a7c2 <_free_r+0x22>
 800a800:	6818      	ldr	r0, [r3, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	6053      	str	r3, [r2, #4]
 800a806:	4408      	add	r0, r1
 800a808:	6010      	str	r0, [r2, #0]
 800a80a:	e7da      	b.n	800a7c2 <_free_r+0x22>
 800a80c:	d902      	bls.n	800a814 <_free_r+0x74>
 800a80e:	230c      	movs	r3, #12
 800a810:	602b      	str	r3, [r5, #0]
 800a812:	e7d6      	b.n	800a7c2 <_free_r+0x22>
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	1821      	adds	r1, r4, r0
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf04      	itt	eq
 800a81c:	6819      	ldreq	r1, [r3, #0]
 800a81e:	685b      	ldreq	r3, [r3, #4]
 800a820:	6063      	str	r3, [r4, #4]
 800a822:	bf04      	itt	eq
 800a824:	1809      	addeq	r1, r1, r0
 800a826:	6021      	streq	r1, [r4, #0]
 800a828:	6054      	str	r4, [r2, #4]
 800a82a:	e7ca      	b.n	800a7c2 <_free_r+0x22>
 800a82c:	bd38      	pop	{r3, r4, r5, pc}
 800a82e:	bf00      	nop
 800a830:	20000f04 	.word	0x20000f04

0800a834 <rshift>:
 800a834:	6903      	ldr	r3, [r0, #16]
 800a836:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a83a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a83e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a842:	f100 0414 	add.w	r4, r0, #20
 800a846:	dd45      	ble.n	800a8d4 <rshift+0xa0>
 800a848:	f011 011f 	ands.w	r1, r1, #31
 800a84c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a850:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a854:	d10c      	bne.n	800a870 <rshift+0x3c>
 800a856:	f100 0710 	add.w	r7, r0, #16
 800a85a:	4629      	mov	r1, r5
 800a85c:	42b1      	cmp	r1, r6
 800a85e:	d334      	bcc.n	800a8ca <rshift+0x96>
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	1eea      	subs	r2, r5, #3
 800a866:	4296      	cmp	r6, r2
 800a868:	bf38      	it	cc
 800a86a:	2300      	movcc	r3, #0
 800a86c:	4423      	add	r3, r4
 800a86e:	e015      	b.n	800a89c <rshift+0x68>
 800a870:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a874:	f1c1 0820 	rsb	r8, r1, #32
 800a878:	40cf      	lsrs	r7, r1
 800a87a:	f105 0e04 	add.w	lr, r5, #4
 800a87e:	46a1      	mov	r9, r4
 800a880:	4576      	cmp	r6, lr
 800a882:	46f4      	mov	ip, lr
 800a884:	d815      	bhi.n	800a8b2 <rshift+0x7e>
 800a886:	1a9a      	subs	r2, r3, r2
 800a888:	0092      	lsls	r2, r2, #2
 800a88a:	3a04      	subs	r2, #4
 800a88c:	3501      	adds	r5, #1
 800a88e:	42ae      	cmp	r6, r5
 800a890:	bf38      	it	cc
 800a892:	2200      	movcc	r2, #0
 800a894:	18a3      	adds	r3, r4, r2
 800a896:	50a7      	str	r7, [r4, r2]
 800a898:	b107      	cbz	r7, 800a89c <rshift+0x68>
 800a89a:	3304      	adds	r3, #4
 800a89c:	1b1a      	subs	r2, r3, r4
 800a89e:	42a3      	cmp	r3, r4
 800a8a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8a4:	bf08      	it	eq
 800a8a6:	2300      	moveq	r3, #0
 800a8a8:	6102      	str	r2, [r0, #16]
 800a8aa:	bf08      	it	eq
 800a8ac:	6143      	streq	r3, [r0, #20]
 800a8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	f8dc c000 	ldr.w	ip, [ip]
 800a8b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8ba:	ea4c 0707 	orr.w	r7, ip, r7
 800a8be:	f849 7b04 	str.w	r7, [r9], #4
 800a8c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8c6:	40cf      	lsrs	r7, r1
 800a8c8:	e7da      	b.n	800a880 <rshift+0x4c>
 800a8ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8d2:	e7c3      	b.n	800a85c <rshift+0x28>
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	e7e1      	b.n	800a89c <rshift+0x68>

0800a8d8 <__hexdig_fun>:
 800a8d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d802      	bhi.n	800a8e6 <__hexdig_fun+0xe>
 800a8e0:	3820      	subs	r0, #32
 800a8e2:	b2c0      	uxtb	r0, r0
 800a8e4:	4770      	bx	lr
 800a8e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d801      	bhi.n	800a8f2 <__hexdig_fun+0x1a>
 800a8ee:	3847      	subs	r0, #71	@ 0x47
 800a8f0:	e7f7      	b.n	800a8e2 <__hexdig_fun+0xa>
 800a8f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a8f6:	2b05      	cmp	r3, #5
 800a8f8:	d801      	bhi.n	800a8fe <__hexdig_fun+0x26>
 800a8fa:	3827      	subs	r0, #39	@ 0x27
 800a8fc:	e7f1      	b.n	800a8e2 <__hexdig_fun+0xa>
 800a8fe:	2000      	movs	r0, #0
 800a900:	4770      	bx	lr
	...

0800a904 <__gethex>:
 800a904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a908:	b085      	sub	sp, #20
 800a90a:	468a      	mov	sl, r1
 800a90c:	9302      	str	r3, [sp, #8]
 800a90e:	680b      	ldr	r3, [r1, #0]
 800a910:	9001      	str	r0, [sp, #4]
 800a912:	4690      	mov	r8, r2
 800a914:	1c9c      	adds	r4, r3, #2
 800a916:	46a1      	mov	r9, r4
 800a918:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a91c:	2830      	cmp	r0, #48	@ 0x30
 800a91e:	d0fa      	beq.n	800a916 <__gethex+0x12>
 800a920:	eba9 0303 	sub.w	r3, r9, r3
 800a924:	f1a3 0b02 	sub.w	fp, r3, #2
 800a928:	f7ff ffd6 	bl	800a8d8 <__hexdig_fun>
 800a92c:	4605      	mov	r5, r0
 800a92e:	2800      	cmp	r0, #0
 800a930:	d168      	bne.n	800aa04 <__gethex+0x100>
 800a932:	49a0      	ldr	r1, [pc, #640]	@ (800abb4 <__gethex+0x2b0>)
 800a934:	2201      	movs	r2, #1
 800a936:	4648      	mov	r0, r9
 800a938:	f7ff f832 	bl	80099a0 <strncmp>
 800a93c:	4607      	mov	r7, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	d167      	bne.n	800aa12 <__gethex+0x10e>
 800a942:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a946:	4626      	mov	r6, r4
 800a948:	f7ff ffc6 	bl	800a8d8 <__hexdig_fun>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	d062      	beq.n	800aa16 <__gethex+0x112>
 800a950:	4623      	mov	r3, r4
 800a952:	7818      	ldrb	r0, [r3, #0]
 800a954:	2830      	cmp	r0, #48	@ 0x30
 800a956:	4699      	mov	r9, r3
 800a958:	f103 0301 	add.w	r3, r3, #1
 800a95c:	d0f9      	beq.n	800a952 <__gethex+0x4e>
 800a95e:	f7ff ffbb 	bl	800a8d8 <__hexdig_fun>
 800a962:	fab0 f580 	clz	r5, r0
 800a966:	096d      	lsrs	r5, r5, #5
 800a968:	f04f 0b01 	mov.w	fp, #1
 800a96c:	464a      	mov	r2, r9
 800a96e:	4616      	mov	r6, r2
 800a970:	3201      	adds	r2, #1
 800a972:	7830      	ldrb	r0, [r6, #0]
 800a974:	f7ff ffb0 	bl	800a8d8 <__hexdig_fun>
 800a978:	2800      	cmp	r0, #0
 800a97a:	d1f8      	bne.n	800a96e <__gethex+0x6a>
 800a97c:	498d      	ldr	r1, [pc, #564]	@ (800abb4 <__gethex+0x2b0>)
 800a97e:	2201      	movs	r2, #1
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff f80d 	bl	80099a0 <strncmp>
 800a986:	2800      	cmp	r0, #0
 800a988:	d13f      	bne.n	800aa0a <__gethex+0x106>
 800a98a:	b944      	cbnz	r4, 800a99e <__gethex+0x9a>
 800a98c:	1c74      	adds	r4, r6, #1
 800a98e:	4622      	mov	r2, r4
 800a990:	4616      	mov	r6, r2
 800a992:	3201      	adds	r2, #1
 800a994:	7830      	ldrb	r0, [r6, #0]
 800a996:	f7ff ff9f 	bl	800a8d8 <__hexdig_fun>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d1f8      	bne.n	800a990 <__gethex+0x8c>
 800a99e:	1ba4      	subs	r4, r4, r6
 800a9a0:	00a7      	lsls	r7, r4, #2
 800a9a2:	7833      	ldrb	r3, [r6, #0]
 800a9a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a9a8:	2b50      	cmp	r3, #80	@ 0x50
 800a9aa:	d13e      	bne.n	800aa2a <__gethex+0x126>
 800a9ac:	7873      	ldrb	r3, [r6, #1]
 800a9ae:	2b2b      	cmp	r3, #43	@ 0x2b
 800a9b0:	d033      	beq.n	800aa1a <__gethex+0x116>
 800a9b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a9b4:	d034      	beq.n	800aa20 <__gethex+0x11c>
 800a9b6:	1c71      	adds	r1, r6, #1
 800a9b8:	2400      	movs	r4, #0
 800a9ba:	7808      	ldrb	r0, [r1, #0]
 800a9bc:	f7ff ff8c 	bl	800a8d8 <__hexdig_fun>
 800a9c0:	1e43      	subs	r3, r0, #1
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b18      	cmp	r3, #24
 800a9c6:	d830      	bhi.n	800aa2a <__gethex+0x126>
 800a9c8:	f1a0 0210 	sub.w	r2, r0, #16
 800a9cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9d0:	f7ff ff82 	bl	800a8d8 <__hexdig_fun>
 800a9d4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9d8:	fa5f fc8c 	uxtb.w	ip, ip
 800a9dc:	f1bc 0f18 	cmp.w	ip, #24
 800a9e0:	f04f 030a 	mov.w	r3, #10
 800a9e4:	d91e      	bls.n	800aa24 <__gethex+0x120>
 800a9e6:	b104      	cbz	r4, 800a9ea <__gethex+0xe6>
 800a9e8:	4252      	negs	r2, r2
 800a9ea:	4417      	add	r7, r2
 800a9ec:	f8ca 1000 	str.w	r1, [sl]
 800a9f0:	b1ed      	cbz	r5, 800aa2e <__gethex+0x12a>
 800a9f2:	f1bb 0f00 	cmp.w	fp, #0
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2506      	moveq	r5, #6
 800a9fa:	2500      	movne	r5, #0
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	b005      	add	sp, #20
 800aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa04:	2500      	movs	r5, #0
 800aa06:	462c      	mov	r4, r5
 800aa08:	e7b0      	b.n	800a96c <__gethex+0x68>
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	d1c7      	bne.n	800a99e <__gethex+0x9a>
 800aa0e:	4627      	mov	r7, r4
 800aa10:	e7c7      	b.n	800a9a2 <__gethex+0x9e>
 800aa12:	464e      	mov	r6, r9
 800aa14:	462f      	mov	r7, r5
 800aa16:	2501      	movs	r5, #1
 800aa18:	e7c3      	b.n	800a9a2 <__gethex+0x9e>
 800aa1a:	2400      	movs	r4, #0
 800aa1c:	1cb1      	adds	r1, r6, #2
 800aa1e:	e7cc      	b.n	800a9ba <__gethex+0xb6>
 800aa20:	2401      	movs	r4, #1
 800aa22:	e7fb      	b.n	800aa1c <__gethex+0x118>
 800aa24:	fb03 0002 	mla	r0, r3, r2, r0
 800aa28:	e7ce      	b.n	800a9c8 <__gethex+0xc4>
 800aa2a:	4631      	mov	r1, r6
 800aa2c:	e7de      	b.n	800a9ec <__gethex+0xe8>
 800aa2e:	eba6 0309 	sub.w	r3, r6, r9
 800aa32:	3b01      	subs	r3, #1
 800aa34:	4629      	mov	r1, r5
 800aa36:	2b07      	cmp	r3, #7
 800aa38:	dc0a      	bgt.n	800aa50 <__gethex+0x14c>
 800aa3a:	9801      	ldr	r0, [sp, #4]
 800aa3c:	f000 fafc 	bl	800b038 <_Balloc>
 800aa40:	4604      	mov	r4, r0
 800aa42:	b940      	cbnz	r0, 800aa56 <__gethex+0x152>
 800aa44:	4b5c      	ldr	r3, [pc, #368]	@ (800abb8 <__gethex+0x2b4>)
 800aa46:	4602      	mov	r2, r0
 800aa48:	21e4      	movs	r1, #228	@ 0xe4
 800aa4a:	485c      	ldr	r0, [pc, #368]	@ (800abbc <__gethex+0x2b8>)
 800aa4c:	f001 f9e0 	bl	800be10 <__assert_func>
 800aa50:	3101      	adds	r1, #1
 800aa52:	105b      	asrs	r3, r3, #1
 800aa54:	e7ef      	b.n	800aa36 <__gethex+0x132>
 800aa56:	f100 0a14 	add.w	sl, r0, #20
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4655      	mov	r5, sl
 800aa5e:	469b      	mov	fp, r3
 800aa60:	45b1      	cmp	r9, r6
 800aa62:	d337      	bcc.n	800aad4 <__gethex+0x1d0>
 800aa64:	f845 bb04 	str.w	fp, [r5], #4
 800aa68:	eba5 050a 	sub.w	r5, r5, sl
 800aa6c:	10ad      	asrs	r5, r5, #2
 800aa6e:	6125      	str	r5, [r4, #16]
 800aa70:	4658      	mov	r0, fp
 800aa72:	f000 fbd3 	bl	800b21c <__hi0bits>
 800aa76:	016d      	lsls	r5, r5, #5
 800aa78:	f8d8 6000 	ldr.w	r6, [r8]
 800aa7c:	1a2d      	subs	r5, r5, r0
 800aa7e:	42b5      	cmp	r5, r6
 800aa80:	dd54      	ble.n	800ab2c <__gethex+0x228>
 800aa82:	1bad      	subs	r5, r5, r6
 800aa84:	4629      	mov	r1, r5
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 ff67 	bl	800b95a <__any_on>
 800aa8c:	4681      	mov	r9, r0
 800aa8e:	b178      	cbz	r0, 800aab0 <__gethex+0x1ac>
 800aa90:	1e6b      	subs	r3, r5, #1
 800aa92:	1159      	asrs	r1, r3, #5
 800aa94:	f003 021f 	and.w	r2, r3, #31
 800aa98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa9c:	f04f 0901 	mov.w	r9, #1
 800aaa0:	fa09 f202 	lsl.w	r2, r9, r2
 800aaa4:	420a      	tst	r2, r1
 800aaa6:	d003      	beq.n	800aab0 <__gethex+0x1ac>
 800aaa8:	454b      	cmp	r3, r9
 800aaaa:	dc36      	bgt.n	800ab1a <__gethex+0x216>
 800aaac:	f04f 0902 	mov.w	r9, #2
 800aab0:	4629      	mov	r1, r5
 800aab2:	4620      	mov	r0, r4
 800aab4:	f7ff febe 	bl	800a834 <rshift>
 800aab8:	442f      	add	r7, r5
 800aaba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aabe:	42bb      	cmp	r3, r7
 800aac0:	da42      	bge.n	800ab48 <__gethex+0x244>
 800aac2:	9801      	ldr	r0, [sp, #4]
 800aac4:	4621      	mov	r1, r4
 800aac6:	f000 faf7 	bl	800b0b8 <_Bfree>
 800aaca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aacc:	2300      	movs	r3, #0
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	25a3      	movs	r5, #163	@ 0xa3
 800aad2:	e793      	b.n	800a9fc <__gethex+0xf8>
 800aad4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aad8:	2a2e      	cmp	r2, #46	@ 0x2e
 800aada:	d012      	beq.n	800ab02 <__gethex+0x1fe>
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d104      	bne.n	800aaea <__gethex+0x1e6>
 800aae0:	f845 bb04 	str.w	fp, [r5], #4
 800aae4:	f04f 0b00 	mov.w	fp, #0
 800aae8:	465b      	mov	r3, fp
 800aaea:	7830      	ldrb	r0, [r6, #0]
 800aaec:	9303      	str	r3, [sp, #12]
 800aaee:	f7ff fef3 	bl	800a8d8 <__hexdig_fun>
 800aaf2:	9b03      	ldr	r3, [sp, #12]
 800aaf4:	f000 000f 	and.w	r0, r0, #15
 800aaf8:	4098      	lsls	r0, r3
 800aafa:	ea4b 0b00 	orr.w	fp, fp, r0
 800aafe:	3304      	adds	r3, #4
 800ab00:	e7ae      	b.n	800aa60 <__gethex+0x15c>
 800ab02:	45b1      	cmp	r9, r6
 800ab04:	d8ea      	bhi.n	800aadc <__gethex+0x1d8>
 800ab06:	492b      	ldr	r1, [pc, #172]	@ (800abb4 <__gethex+0x2b0>)
 800ab08:	9303      	str	r3, [sp, #12]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f7fe ff47 	bl	80099a0 <strncmp>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d1e1      	bne.n	800aadc <__gethex+0x1d8>
 800ab18:	e7a2      	b.n	800aa60 <__gethex+0x15c>
 800ab1a:	1ea9      	subs	r1, r5, #2
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 ff1c 	bl	800b95a <__any_on>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0c2      	beq.n	800aaac <__gethex+0x1a8>
 800ab26:	f04f 0903 	mov.w	r9, #3
 800ab2a:	e7c1      	b.n	800aab0 <__gethex+0x1ac>
 800ab2c:	da09      	bge.n	800ab42 <__gethex+0x23e>
 800ab2e:	1b75      	subs	r5, r6, r5
 800ab30:	4621      	mov	r1, r4
 800ab32:	9801      	ldr	r0, [sp, #4]
 800ab34:	462a      	mov	r2, r5
 800ab36:	f000 fcd7 	bl	800b4e8 <__lshift>
 800ab3a:	1b7f      	subs	r7, r7, r5
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	f100 0a14 	add.w	sl, r0, #20
 800ab42:	f04f 0900 	mov.w	r9, #0
 800ab46:	e7b8      	b.n	800aaba <__gethex+0x1b6>
 800ab48:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab4c:	42bd      	cmp	r5, r7
 800ab4e:	dd6f      	ble.n	800ac30 <__gethex+0x32c>
 800ab50:	1bed      	subs	r5, r5, r7
 800ab52:	42ae      	cmp	r6, r5
 800ab54:	dc34      	bgt.n	800abc0 <__gethex+0x2bc>
 800ab56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d022      	beq.n	800aba4 <__gethex+0x2a0>
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d024      	beq.n	800abac <__gethex+0x2a8>
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d115      	bne.n	800ab92 <__gethex+0x28e>
 800ab66:	42ae      	cmp	r6, r5
 800ab68:	d113      	bne.n	800ab92 <__gethex+0x28e>
 800ab6a:	2e01      	cmp	r6, #1
 800ab6c:	d10b      	bne.n	800ab86 <__gethex+0x282>
 800ab6e:	9a02      	ldr	r2, [sp, #8]
 800ab70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab74:	6013      	str	r3, [r2, #0]
 800ab76:	2301      	movs	r3, #1
 800ab78:	6123      	str	r3, [r4, #16]
 800ab7a:	f8ca 3000 	str.w	r3, [sl]
 800ab7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab80:	2562      	movs	r5, #98	@ 0x62
 800ab82:	601c      	str	r4, [r3, #0]
 800ab84:	e73a      	b.n	800a9fc <__gethex+0xf8>
 800ab86:	1e71      	subs	r1, r6, #1
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 fee6 	bl	800b95a <__any_on>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1ed      	bne.n	800ab6e <__gethex+0x26a>
 800ab92:	9801      	ldr	r0, [sp, #4]
 800ab94:	4621      	mov	r1, r4
 800ab96:	f000 fa8f 	bl	800b0b8 <_Bfree>
 800ab9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	6013      	str	r3, [r2, #0]
 800aba0:	2550      	movs	r5, #80	@ 0x50
 800aba2:	e72b      	b.n	800a9fc <__gethex+0xf8>
 800aba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d1f3      	bne.n	800ab92 <__gethex+0x28e>
 800abaa:	e7e0      	b.n	800ab6e <__gethex+0x26a>
 800abac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1dd      	bne.n	800ab6e <__gethex+0x26a>
 800abb2:	e7ee      	b.n	800ab92 <__gethex+0x28e>
 800abb4:	0800d2d8 	.word	0x0800d2d8
 800abb8:	0800d4e9 	.word	0x0800d4e9
 800abbc:	0800d4fa 	.word	0x0800d4fa
 800abc0:	1e6f      	subs	r7, r5, #1
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	d130      	bne.n	800ac2a <__gethex+0x326>
 800abc8:	b127      	cbz	r7, 800abd4 <__gethex+0x2d0>
 800abca:	4639      	mov	r1, r7
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 fec4 	bl	800b95a <__any_on>
 800abd2:	4681      	mov	r9, r0
 800abd4:	117a      	asrs	r2, r7, #5
 800abd6:	2301      	movs	r3, #1
 800abd8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abdc:	f007 071f 	and.w	r7, r7, #31
 800abe0:	40bb      	lsls	r3, r7
 800abe2:	4213      	tst	r3, r2
 800abe4:	4629      	mov	r1, r5
 800abe6:	4620      	mov	r0, r4
 800abe8:	bf18      	it	ne
 800abea:	f049 0902 	orrne.w	r9, r9, #2
 800abee:	f7ff fe21 	bl	800a834 <rshift>
 800abf2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800abf6:	1b76      	subs	r6, r6, r5
 800abf8:	2502      	movs	r5, #2
 800abfa:	f1b9 0f00 	cmp.w	r9, #0
 800abfe:	d047      	beq.n	800ac90 <__gethex+0x38c>
 800ac00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d015      	beq.n	800ac34 <__gethex+0x330>
 800ac08:	2b03      	cmp	r3, #3
 800ac0a:	d017      	beq.n	800ac3c <__gethex+0x338>
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d109      	bne.n	800ac24 <__gethex+0x320>
 800ac10:	f019 0f02 	tst.w	r9, #2
 800ac14:	d006      	beq.n	800ac24 <__gethex+0x320>
 800ac16:	f8da 3000 	ldr.w	r3, [sl]
 800ac1a:	ea49 0903 	orr.w	r9, r9, r3
 800ac1e:	f019 0f01 	tst.w	r9, #1
 800ac22:	d10e      	bne.n	800ac42 <__gethex+0x33e>
 800ac24:	f045 0510 	orr.w	r5, r5, #16
 800ac28:	e032      	b.n	800ac90 <__gethex+0x38c>
 800ac2a:	f04f 0901 	mov.w	r9, #1
 800ac2e:	e7d1      	b.n	800abd4 <__gethex+0x2d0>
 800ac30:	2501      	movs	r5, #1
 800ac32:	e7e2      	b.n	800abfa <__gethex+0x2f6>
 800ac34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac36:	f1c3 0301 	rsb	r3, r3, #1
 800ac3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d0f0      	beq.n	800ac24 <__gethex+0x320>
 800ac42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac46:	f104 0314 	add.w	r3, r4, #20
 800ac4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac52:	f04f 0c00 	mov.w	ip, #0
 800ac56:	4618      	mov	r0, r3
 800ac58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac60:	d01b      	beq.n	800ac9a <__gethex+0x396>
 800ac62:	3201      	adds	r2, #1
 800ac64:	6002      	str	r2, [r0, #0]
 800ac66:	2d02      	cmp	r5, #2
 800ac68:	f104 0314 	add.w	r3, r4, #20
 800ac6c:	d13c      	bne.n	800ace8 <__gethex+0x3e4>
 800ac6e:	f8d8 2000 	ldr.w	r2, [r8]
 800ac72:	3a01      	subs	r2, #1
 800ac74:	42b2      	cmp	r2, r6
 800ac76:	d109      	bne.n	800ac8c <__gethex+0x388>
 800ac78:	1171      	asrs	r1, r6, #5
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac80:	f006 061f 	and.w	r6, r6, #31
 800ac84:	fa02 f606 	lsl.w	r6, r2, r6
 800ac88:	421e      	tst	r6, r3
 800ac8a:	d13a      	bne.n	800ad02 <__gethex+0x3fe>
 800ac8c:	f045 0520 	orr.w	r5, r5, #32
 800ac90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac92:	601c      	str	r4, [r3, #0]
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	601f      	str	r7, [r3, #0]
 800ac98:	e6b0      	b.n	800a9fc <__gethex+0xf8>
 800ac9a:	4299      	cmp	r1, r3
 800ac9c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aca0:	d8d9      	bhi.n	800ac56 <__gethex+0x352>
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	459b      	cmp	fp, r3
 800aca6:	db17      	blt.n	800acd8 <__gethex+0x3d4>
 800aca8:	6861      	ldr	r1, [r4, #4]
 800acaa:	9801      	ldr	r0, [sp, #4]
 800acac:	3101      	adds	r1, #1
 800acae:	f000 f9c3 	bl	800b038 <_Balloc>
 800acb2:	4681      	mov	r9, r0
 800acb4:	b918      	cbnz	r0, 800acbe <__gethex+0x3ba>
 800acb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ad20 <__gethex+0x41c>)
 800acb8:	4602      	mov	r2, r0
 800acba:	2184      	movs	r1, #132	@ 0x84
 800acbc:	e6c5      	b.n	800aa4a <__gethex+0x146>
 800acbe:	6922      	ldr	r2, [r4, #16]
 800acc0:	3202      	adds	r2, #2
 800acc2:	f104 010c 	add.w	r1, r4, #12
 800acc6:	0092      	lsls	r2, r2, #2
 800acc8:	300c      	adds	r0, #12
 800acca:	f7fe ff06 	bl	8009ada <memcpy>
 800acce:	4621      	mov	r1, r4
 800acd0:	9801      	ldr	r0, [sp, #4]
 800acd2:	f000 f9f1 	bl	800b0b8 <_Bfree>
 800acd6:	464c      	mov	r4, r9
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ace0:	6122      	str	r2, [r4, #16]
 800ace2:	2201      	movs	r2, #1
 800ace4:	615a      	str	r2, [r3, #20]
 800ace6:	e7be      	b.n	800ac66 <__gethex+0x362>
 800ace8:	6922      	ldr	r2, [r4, #16]
 800acea:	455a      	cmp	r2, fp
 800acec:	dd0b      	ble.n	800ad06 <__gethex+0x402>
 800acee:	2101      	movs	r1, #1
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7ff fd9f 	bl	800a834 <rshift>
 800acf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acfa:	3701      	adds	r7, #1
 800acfc:	42bb      	cmp	r3, r7
 800acfe:	f6ff aee0 	blt.w	800aac2 <__gethex+0x1be>
 800ad02:	2501      	movs	r5, #1
 800ad04:	e7c2      	b.n	800ac8c <__gethex+0x388>
 800ad06:	f016 061f 	ands.w	r6, r6, #31
 800ad0a:	d0fa      	beq.n	800ad02 <__gethex+0x3fe>
 800ad0c:	4453      	add	r3, sl
 800ad0e:	f1c6 0620 	rsb	r6, r6, #32
 800ad12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad16:	f000 fa81 	bl	800b21c <__hi0bits>
 800ad1a:	42b0      	cmp	r0, r6
 800ad1c:	dbe7      	blt.n	800acee <__gethex+0x3ea>
 800ad1e:	e7f0      	b.n	800ad02 <__gethex+0x3fe>
 800ad20:	0800d4e9 	.word	0x0800d4e9

0800ad24 <L_shift>:
 800ad24:	f1c2 0208 	rsb	r2, r2, #8
 800ad28:	0092      	lsls	r2, r2, #2
 800ad2a:	b570      	push	{r4, r5, r6, lr}
 800ad2c:	f1c2 0620 	rsb	r6, r2, #32
 800ad30:	6843      	ldr	r3, [r0, #4]
 800ad32:	6804      	ldr	r4, [r0, #0]
 800ad34:	fa03 f506 	lsl.w	r5, r3, r6
 800ad38:	432c      	orrs	r4, r5
 800ad3a:	40d3      	lsrs	r3, r2
 800ad3c:	6004      	str	r4, [r0, #0]
 800ad3e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad42:	4288      	cmp	r0, r1
 800ad44:	d3f4      	bcc.n	800ad30 <L_shift+0xc>
 800ad46:	bd70      	pop	{r4, r5, r6, pc}

0800ad48 <__match>:
 800ad48:	b530      	push	{r4, r5, lr}
 800ad4a:	6803      	ldr	r3, [r0, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad52:	b914      	cbnz	r4, 800ad5a <__match+0x12>
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	2001      	movs	r0, #1
 800ad58:	bd30      	pop	{r4, r5, pc}
 800ad5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ad62:	2d19      	cmp	r5, #25
 800ad64:	bf98      	it	ls
 800ad66:	3220      	addls	r2, #32
 800ad68:	42a2      	cmp	r2, r4
 800ad6a:	d0f0      	beq.n	800ad4e <__match+0x6>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e7f3      	b.n	800ad58 <__match+0x10>

0800ad70 <__hexnan>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	680b      	ldr	r3, [r1, #0]
 800ad76:	6801      	ldr	r1, [r0, #0]
 800ad78:	115e      	asrs	r6, r3, #5
 800ad7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad7e:	f013 031f 	ands.w	r3, r3, #31
 800ad82:	b087      	sub	sp, #28
 800ad84:	bf18      	it	ne
 800ad86:	3604      	addne	r6, #4
 800ad88:	2500      	movs	r5, #0
 800ad8a:	1f37      	subs	r7, r6, #4
 800ad8c:	4682      	mov	sl, r0
 800ad8e:	4690      	mov	r8, r2
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad96:	46b9      	mov	r9, r7
 800ad98:	463c      	mov	r4, r7
 800ad9a:	9502      	str	r5, [sp, #8]
 800ad9c:	46ab      	mov	fp, r5
 800ad9e:	784a      	ldrb	r2, [r1, #1]
 800ada0:	1c4b      	adds	r3, r1, #1
 800ada2:	9303      	str	r3, [sp, #12]
 800ada4:	b342      	cbz	r2, 800adf8 <__hexnan+0x88>
 800ada6:	4610      	mov	r0, r2
 800ada8:	9105      	str	r1, [sp, #20]
 800adaa:	9204      	str	r2, [sp, #16]
 800adac:	f7ff fd94 	bl	800a8d8 <__hexdig_fun>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d151      	bne.n	800ae58 <__hexnan+0xe8>
 800adb4:	9a04      	ldr	r2, [sp, #16]
 800adb6:	9905      	ldr	r1, [sp, #20]
 800adb8:	2a20      	cmp	r2, #32
 800adba:	d818      	bhi.n	800adee <__hexnan+0x7e>
 800adbc:	9b02      	ldr	r3, [sp, #8]
 800adbe:	459b      	cmp	fp, r3
 800adc0:	dd13      	ble.n	800adea <__hexnan+0x7a>
 800adc2:	454c      	cmp	r4, r9
 800adc4:	d206      	bcs.n	800add4 <__hexnan+0x64>
 800adc6:	2d07      	cmp	r5, #7
 800adc8:	dc04      	bgt.n	800add4 <__hexnan+0x64>
 800adca:	462a      	mov	r2, r5
 800adcc:	4649      	mov	r1, r9
 800adce:	4620      	mov	r0, r4
 800add0:	f7ff ffa8 	bl	800ad24 <L_shift>
 800add4:	4544      	cmp	r4, r8
 800add6:	d952      	bls.n	800ae7e <__hexnan+0x10e>
 800add8:	2300      	movs	r3, #0
 800adda:	f1a4 0904 	sub.w	r9, r4, #4
 800adde:	f844 3c04 	str.w	r3, [r4, #-4]
 800ade2:	f8cd b008 	str.w	fp, [sp, #8]
 800ade6:	464c      	mov	r4, r9
 800ade8:	461d      	mov	r5, r3
 800adea:	9903      	ldr	r1, [sp, #12]
 800adec:	e7d7      	b.n	800ad9e <__hexnan+0x2e>
 800adee:	2a29      	cmp	r2, #41	@ 0x29
 800adf0:	d157      	bne.n	800aea2 <__hexnan+0x132>
 800adf2:	3102      	adds	r1, #2
 800adf4:	f8ca 1000 	str.w	r1, [sl]
 800adf8:	f1bb 0f00 	cmp.w	fp, #0
 800adfc:	d051      	beq.n	800aea2 <__hexnan+0x132>
 800adfe:	454c      	cmp	r4, r9
 800ae00:	d206      	bcs.n	800ae10 <__hexnan+0xa0>
 800ae02:	2d07      	cmp	r5, #7
 800ae04:	dc04      	bgt.n	800ae10 <__hexnan+0xa0>
 800ae06:	462a      	mov	r2, r5
 800ae08:	4649      	mov	r1, r9
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f7ff ff8a 	bl	800ad24 <L_shift>
 800ae10:	4544      	cmp	r4, r8
 800ae12:	d936      	bls.n	800ae82 <__hexnan+0x112>
 800ae14:	f1a8 0204 	sub.w	r2, r8, #4
 800ae18:	4623      	mov	r3, r4
 800ae1a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae1e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae22:	429f      	cmp	r7, r3
 800ae24:	d2f9      	bcs.n	800ae1a <__hexnan+0xaa>
 800ae26:	1b3b      	subs	r3, r7, r4
 800ae28:	f023 0303 	bic.w	r3, r3, #3
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	3401      	adds	r4, #1
 800ae30:	3e03      	subs	r6, #3
 800ae32:	42b4      	cmp	r4, r6
 800ae34:	bf88      	it	hi
 800ae36:	2304      	movhi	r3, #4
 800ae38:	4443      	add	r3, r8
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f843 2b04 	str.w	r2, [r3], #4
 800ae40:	429f      	cmp	r7, r3
 800ae42:	d2fb      	bcs.n	800ae3c <__hexnan+0xcc>
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	b91b      	cbnz	r3, 800ae50 <__hexnan+0xe0>
 800ae48:	4547      	cmp	r7, r8
 800ae4a:	d128      	bne.n	800ae9e <__hexnan+0x12e>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	2005      	movs	r0, #5
 800ae52:	b007      	add	sp, #28
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	3501      	adds	r5, #1
 800ae5a:	2d08      	cmp	r5, #8
 800ae5c:	f10b 0b01 	add.w	fp, fp, #1
 800ae60:	dd06      	ble.n	800ae70 <__hexnan+0x100>
 800ae62:	4544      	cmp	r4, r8
 800ae64:	d9c1      	bls.n	800adea <__hexnan+0x7a>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae6c:	2501      	movs	r5, #1
 800ae6e:	3c04      	subs	r4, #4
 800ae70:	6822      	ldr	r2, [r4, #0]
 800ae72:	f000 000f 	and.w	r0, r0, #15
 800ae76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae7a:	6020      	str	r0, [r4, #0]
 800ae7c:	e7b5      	b.n	800adea <__hexnan+0x7a>
 800ae7e:	2508      	movs	r5, #8
 800ae80:	e7b3      	b.n	800adea <__hexnan+0x7a>
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0dd      	beq.n	800ae44 <__hexnan+0xd4>
 800ae88:	f1c3 0320 	rsb	r3, r3, #32
 800ae8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae90:	40da      	lsrs	r2, r3
 800ae92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae96:	4013      	ands	r3, r2
 800ae98:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae9c:	e7d2      	b.n	800ae44 <__hexnan+0xd4>
 800ae9e:	3f04      	subs	r7, #4
 800aea0:	e7d0      	b.n	800ae44 <__hexnan+0xd4>
 800aea2:	2004      	movs	r0, #4
 800aea4:	e7d5      	b.n	800ae52 <__hexnan+0xe2>
	...

0800aea8 <malloc>:
 800aea8:	4b02      	ldr	r3, [pc, #8]	@ (800aeb4 <malloc+0xc>)
 800aeaa:	4601      	mov	r1, r0
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	f000 b825 	b.w	800aefc <_malloc_r>
 800aeb2:	bf00      	nop
 800aeb4:	20000230 	.word	0x20000230

0800aeb8 <sbrk_aligned>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4e0f      	ldr	r6, [pc, #60]	@ (800aef8 <sbrk_aligned+0x40>)
 800aebc:	460c      	mov	r4, r1
 800aebe:	6831      	ldr	r1, [r6, #0]
 800aec0:	4605      	mov	r5, r0
 800aec2:	b911      	cbnz	r1, 800aeca <sbrk_aligned+0x12>
 800aec4:	f000 ff94 	bl	800bdf0 <_sbrk_r>
 800aec8:	6030      	str	r0, [r6, #0]
 800aeca:	4621      	mov	r1, r4
 800aecc:	4628      	mov	r0, r5
 800aece:	f000 ff8f 	bl	800bdf0 <_sbrk_r>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d103      	bne.n	800aede <sbrk_aligned+0x26>
 800aed6:	f04f 34ff 	mov.w	r4, #4294967295
 800aeda:	4620      	mov	r0, r4
 800aedc:	bd70      	pop	{r4, r5, r6, pc}
 800aede:	1cc4      	adds	r4, r0, #3
 800aee0:	f024 0403 	bic.w	r4, r4, #3
 800aee4:	42a0      	cmp	r0, r4
 800aee6:	d0f8      	beq.n	800aeda <sbrk_aligned+0x22>
 800aee8:	1a21      	subs	r1, r4, r0
 800aeea:	4628      	mov	r0, r5
 800aeec:	f000 ff80 	bl	800bdf0 <_sbrk_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	d1f2      	bne.n	800aeda <sbrk_aligned+0x22>
 800aef4:	e7ef      	b.n	800aed6 <sbrk_aligned+0x1e>
 800aef6:	bf00      	nop
 800aef8:	20000f00 	.word	0x20000f00

0800aefc <_malloc_r>:
 800aefc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af00:	1ccd      	adds	r5, r1, #3
 800af02:	f025 0503 	bic.w	r5, r5, #3
 800af06:	3508      	adds	r5, #8
 800af08:	2d0c      	cmp	r5, #12
 800af0a:	bf38      	it	cc
 800af0c:	250c      	movcc	r5, #12
 800af0e:	2d00      	cmp	r5, #0
 800af10:	4606      	mov	r6, r0
 800af12:	db01      	blt.n	800af18 <_malloc_r+0x1c>
 800af14:	42a9      	cmp	r1, r5
 800af16:	d904      	bls.n	800af22 <_malloc_r+0x26>
 800af18:	230c      	movs	r3, #12
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	2000      	movs	r0, #0
 800af1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aff8 <_malloc_r+0xfc>
 800af26:	f000 f87b 	bl	800b020 <__malloc_lock>
 800af2a:	f8d8 3000 	ldr.w	r3, [r8]
 800af2e:	461c      	mov	r4, r3
 800af30:	bb44      	cbnz	r4, 800af84 <_malloc_r+0x88>
 800af32:	4629      	mov	r1, r5
 800af34:	4630      	mov	r0, r6
 800af36:	f7ff ffbf 	bl	800aeb8 <sbrk_aligned>
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	4604      	mov	r4, r0
 800af3e:	d158      	bne.n	800aff2 <_malloc_r+0xf6>
 800af40:	f8d8 4000 	ldr.w	r4, [r8]
 800af44:	4627      	mov	r7, r4
 800af46:	2f00      	cmp	r7, #0
 800af48:	d143      	bne.n	800afd2 <_malloc_r+0xd6>
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	d04b      	beq.n	800afe6 <_malloc_r+0xea>
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	4639      	mov	r1, r7
 800af52:	4630      	mov	r0, r6
 800af54:	eb04 0903 	add.w	r9, r4, r3
 800af58:	f000 ff4a 	bl	800bdf0 <_sbrk_r>
 800af5c:	4581      	cmp	r9, r0
 800af5e:	d142      	bne.n	800afe6 <_malloc_r+0xea>
 800af60:	6821      	ldr	r1, [r4, #0]
 800af62:	1a6d      	subs	r5, r5, r1
 800af64:	4629      	mov	r1, r5
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ffa6 	bl	800aeb8 <sbrk_aligned>
 800af6c:	3001      	adds	r0, #1
 800af6e:	d03a      	beq.n	800afe6 <_malloc_r+0xea>
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	442b      	add	r3, r5
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	f8d8 3000 	ldr.w	r3, [r8]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	bb62      	cbnz	r2, 800afd8 <_malloc_r+0xdc>
 800af7e:	f8c8 7000 	str.w	r7, [r8]
 800af82:	e00f      	b.n	800afa4 <_malloc_r+0xa8>
 800af84:	6822      	ldr	r2, [r4, #0]
 800af86:	1b52      	subs	r2, r2, r5
 800af88:	d420      	bmi.n	800afcc <_malloc_r+0xd0>
 800af8a:	2a0b      	cmp	r2, #11
 800af8c:	d917      	bls.n	800afbe <_malloc_r+0xc2>
 800af8e:	1961      	adds	r1, r4, r5
 800af90:	42a3      	cmp	r3, r4
 800af92:	6025      	str	r5, [r4, #0]
 800af94:	bf18      	it	ne
 800af96:	6059      	strne	r1, [r3, #4]
 800af98:	6863      	ldr	r3, [r4, #4]
 800af9a:	bf08      	it	eq
 800af9c:	f8c8 1000 	streq.w	r1, [r8]
 800afa0:	5162      	str	r2, [r4, r5]
 800afa2:	604b      	str	r3, [r1, #4]
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 f841 	bl	800b02c <__malloc_unlock>
 800afaa:	f104 000b 	add.w	r0, r4, #11
 800afae:	1d23      	adds	r3, r4, #4
 800afb0:	f020 0007 	bic.w	r0, r0, #7
 800afb4:	1ac2      	subs	r2, r0, r3
 800afb6:	bf1c      	itt	ne
 800afb8:	1a1b      	subne	r3, r3, r0
 800afba:	50a3      	strne	r3, [r4, r2]
 800afbc:	e7af      	b.n	800af1e <_malloc_r+0x22>
 800afbe:	6862      	ldr	r2, [r4, #4]
 800afc0:	42a3      	cmp	r3, r4
 800afc2:	bf0c      	ite	eq
 800afc4:	f8c8 2000 	streq.w	r2, [r8]
 800afc8:	605a      	strne	r2, [r3, #4]
 800afca:	e7eb      	b.n	800afa4 <_malloc_r+0xa8>
 800afcc:	4623      	mov	r3, r4
 800afce:	6864      	ldr	r4, [r4, #4]
 800afd0:	e7ae      	b.n	800af30 <_malloc_r+0x34>
 800afd2:	463c      	mov	r4, r7
 800afd4:	687f      	ldr	r7, [r7, #4]
 800afd6:	e7b6      	b.n	800af46 <_malloc_r+0x4a>
 800afd8:	461a      	mov	r2, r3
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d1fb      	bne.n	800afd8 <_malloc_r+0xdc>
 800afe0:	2300      	movs	r3, #0
 800afe2:	6053      	str	r3, [r2, #4]
 800afe4:	e7de      	b.n	800afa4 <_malloc_r+0xa8>
 800afe6:	230c      	movs	r3, #12
 800afe8:	6033      	str	r3, [r6, #0]
 800afea:	4630      	mov	r0, r6
 800afec:	f000 f81e 	bl	800b02c <__malloc_unlock>
 800aff0:	e794      	b.n	800af1c <_malloc_r+0x20>
 800aff2:	6005      	str	r5, [r0, #0]
 800aff4:	e7d6      	b.n	800afa4 <_malloc_r+0xa8>
 800aff6:	bf00      	nop
 800aff8:	20000f04 	.word	0x20000f04

0800affc <__ascii_mbtowc>:
 800affc:	b082      	sub	sp, #8
 800affe:	b901      	cbnz	r1, 800b002 <__ascii_mbtowc+0x6>
 800b000:	a901      	add	r1, sp, #4
 800b002:	b142      	cbz	r2, 800b016 <__ascii_mbtowc+0x1a>
 800b004:	b14b      	cbz	r3, 800b01a <__ascii_mbtowc+0x1e>
 800b006:	7813      	ldrb	r3, [r2, #0]
 800b008:	600b      	str	r3, [r1, #0]
 800b00a:	7812      	ldrb	r2, [r2, #0]
 800b00c:	1e10      	subs	r0, r2, #0
 800b00e:	bf18      	it	ne
 800b010:	2001      	movne	r0, #1
 800b012:	b002      	add	sp, #8
 800b014:	4770      	bx	lr
 800b016:	4610      	mov	r0, r2
 800b018:	e7fb      	b.n	800b012 <__ascii_mbtowc+0x16>
 800b01a:	f06f 0001 	mvn.w	r0, #1
 800b01e:	e7f8      	b.n	800b012 <__ascii_mbtowc+0x16>

0800b020 <__malloc_lock>:
 800b020:	4801      	ldr	r0, [pc, #4]	@ (800b028 <__malloc_lock+0x8>)
 800b022:	f7fe bd58 	b.w	8009ad6 <__retarget_lock_acquire_recursive>
 800b026:	bf00      	nop
 800b028:	20000efc 	.word	0x20000efc

0800b02c <__malloc_unlock>:
 800b02c:	4801      	ldr	r0, [pc, #4]	@ (800b034 <__malloc_unlock+0x8>)
 800b02e:	f7fe bd53 	b.w	8009ad8 <__retarget_lock_release_recursive>
 800b032:	bf00      	nop
 800b034:	20000efc 	.word	0x20000efc

0800b038 <_Balloc>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	69c6      	ldr	r6, [r0, #28]
 800b03c:	4604      	mov	r4, r0
 800b03e:	460d      	mov	r5, r1
 800b040:	b976      	cbnz	r6, 800b060 <_Balloc+0x28>
 800b042:	2010      	movs	r0, #16
 800b044:	f7ff ff30 	bl	800aea8 <malloc>
 800b048:	4602      	mov	r2, r0
 800b04a:	61e0      	str	r0, [r4, #28]
 800b04c:	b920      	cbnz	r0, 800b058 <_Balloc+0x20>
 800b04e:	4b18      	ldr	r3, [pc, #96]	@ (800b0b0 <_Balloc+0x78>)
 800b050:	4818      	ldr	r0, [pc, #96]	@ (800b0b4 <_Balloc+0x7c>)
 800b052:	216b      	movs	r1, #107	@ 0x6b
 800b054:	f000 fedc 	bl	800be10 <__assert_func>
 800b058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b05c:	6006      	str	r6, [r0, #0]
 800b05e:	60c6      	str	r6, [r0, #12]
 800b060:	69e6      	ldr	r6, [r4, #28]
 800b062:	68f3      	ldr	r3, [r6, #12]
 800b064:	b183      	cbz	r3, 800b088 <_Balloc+0x50>
 800b066:	69e3      	ldr	r3, [r4, #28]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b06e:	b9b8      	cbnz	r0, 800b0a0 <_Balloc+0x68>
 800b070:	2101      	movs	r1, #1
 800b072:	fa01 f605 	lsl.w	r6, r1, r5
 800b076:	1d72      	adds	r2, r6, #5
 800b078:	0092      	lsls	r2, r2, #2
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fee6 	bl	800be4c <_calloc_r>
 800b080:	b160      	cbz	r0, 800b09c <_Balloc+0x64>
 800b082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b086:	e00e      	b.n	800b0a6 <_Balloc+0x6e>
 800b088:	2221      	movs	r2, #33	@ 0x21
 800b08a:	2104      	movs	r1, #4
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fedd 	bl	800be4c <_calloc_r>
 800b092:	69e3      	ldr	r3, [r4, #28]
 800b094:	60f0      	str	r0, [r6, #12]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1e4      	bne.n	800b066 <_Balloc+0x2e>
 800b09c:	2000      	movs	r0, #0
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	6802      	ldr	r2, [r0, #0]
 800b0a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0ac:	e7f7      	b.n	800b09e <_Balloc+0x66>
 800b0ae:	bf00      	nop
 800b0b0:	0800d47a 	.word	0x0800d47a
 800b0b4:	0800d55a 	.word	0x0800d55a

0800b0b8 <_Bfree>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	69c6      	ldr	r6, [r0, #28]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b976      	cbnz	r6, 800b0e0 <_Bfree+0x28>
 800b0c2:	2010      	movs	r0, #16
 800b0c4:	f7ff fef0 	bl	800aea8 <malloc>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	61e8      	str	r0, [r5, #28]
 800b0cc:	b920      	cbnz	r0, 800b0d8 <_Bfree+0x20>
 800b0ce:	4b09      	ldr	r3, [pc, #36]	@ (800b0f4 <_Bfree+0x3c>)
 800b0d0:	4809      	ldr	r0, [pc, #36]	@ (800b0f8 <_Bfree+0x40>)
 800b0d2:	218f      	movs	r1, #143	@ 0x8f
 800b0d4:	f000 fe9c 	bl	800be10 <__assert_func>
 800b0d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0dc:	6006      	str	r6, [r0, #0]
 800b0de:	60c6      	str	r6, [r0, #12]
 800b0e0:	b13c      	cbz	r4, 800b0f2 <_Bfree+0x3a>
 800b0e2:	69eb      	ldr	r3, [r5, #28]
 800b0e4:	6862      	ldr	r2, [r4, #4]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0ec:	6021      	str	r1, [r4, #0]
 800b0ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	0800d47a 	.word	0x0800d47a
 800b0f8:	0800d55a 	.word	0x0800d55a

0800b0fc <__multadd>:
 800b0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b100:	690d      	ldr	r5, [r1, #16]
 800b102:	4607      	mov	r7, r0
 800b104:	460c      	mov	r4, r1
 800b106:	461e      	mov	r6, r3
 800b108:	f101 0c14 	add.w	ip, r1, #20
 800b10c:	2000      	movs	r0, #0
 800b10e:	f8dc 3000 	ldr.w	r3, [ip]
 800b112:	b299      	uxth	r1, r3
 800b114:	fb02 6101 	mla	r1, r2, r1, r6
 800b118:	0c1e      	lsrs	r6, r3, #16
 800b11a:	0c0b      	lsrs	r3, r1, #16
 800b11c:	fb02 3306 	mla	r3, r2, r6, r3
 800b120:	b289      	uxth	r1, r1
 800b122:	3001      	adds	r0, #1
 800b124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b128:	4285      	cmp	r5, r0
 800b12a:	f84c 1b04 	str.w	r1, [ip], #4
 800b12e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b132:	dcec      	bgt.n	800b10e <__multadd+0x12>
 800b134:	b30e      	cbz	r6, 800b17a <__multadd+0x7e>
 800b136:	68a3      	ldr	r3, [r4, #8]
 800b138:	42ab      	cmp	r3, r5
 800b13a:	dc19      	bgt.n	800b170 <__multadd+0x74>
 800b13c:	6861      	ldr	r1, [r4, #4]
 800b13e:	4638      	mov	r0, r7
 800b140:	3101      	adds	r1, #1
 800b142:	f7ff ff79 	bl	800b038 <_Balloc>
 800b146:	4680      	mov	r8, r0
 800b148:	b928      	cbnz	r0, 800b156 <__multadd+0x5a>
 800b14a:	4602      	mov	r2, r0
 800b14c:	4b0c      	ldr	r3, [pc, #48]	@ (800b180 <__multadd+0x84>)
 800b14e:	480d      	ldr	r0, [pc, #52]	@ (800b184 <__multadd+0x88>)
 800b150:	21ba      	movs	r1, #186	@ 0xba
 800b152:	f000 fe5d 	bl	800be10 <__assert_func>
 800b156:	6922      	ldr	r2, [r4, #16]
 800b158:	3202      	adds	r2, #2
 800b15a:	f104 010c 	add.w	r1, r4, #12
 800b15e:	0092      	lsls	r2, r2, #2
 800b160:	300c      	adds	r0, #12
 800b162:	f7fe fcba 	bl	8009ada <memcpy>
 800b166:	4621      	mov	r1, r4
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff ffa5 	bl	800b0b8 <_Bfree>
 800b16e:	4644      	mov	r4, r8
 800b170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b174:	3501      	adds	r5, #1
 800b176:	615e      	str	r6, [r3, #20]
 800b178:	6125      	str	r5, [r4, #16]
 800b17a:	4620      	mov	r0, r4
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	0800d4e9 	.word	0x0800d4e9
 800b184:	0800d55a 	.word	0x0800d55a

0800b188 <__s2b>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	460c      	mov	r4, r1
 800b18e:	4615      	mov	r5, r2
 800b190:	461f      	mov	r7, r3
 800b192:	2209      	movs	r2, #9
 800b194:	3308      	adds	r3, #8
 800b196:	4606      	mov	r6, r0
 800b198:	fb93 f3f2 	sdiv	r3, r3, r2
 800b19c:	2100      	movs	r1, #0
 800b19e:	2201      	movs	r2, #1
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	db09      	blt.n	800b1b8 <__s2b+0x30>
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	f7ff ff47 	bl	800b038 <_Balloc>
 800b1aa:	b940      	cbnz	r0, 800b1be <__s2b+0x36>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	4b19      	ldr	r3, [pc, #100]	@ (800b214 <__s2b+0x8c>)
 800b1b0:	4819      	ldr	r0, [pc, #100]	@ (800b218 <__s2b+0x90>)
 800b1b2:	21d3      	movs	r1, #211	@ 0xd3
 800b1b4:	f000 fe2c 	bl	800be10 <__assert_func>
 800b1b8:	0052      	lsls	r2, r2, #1
 800b1ba:	3101      	adds	r1, #1
 800b1bc:	e7f0      	b.n	800b1a0 <__s2b+0x18>
 800b1be:	9b08      	ldr	r3, [sp, #32]
 800b1c0:	6143      	str	r3, [r0, #20]
 800b1c2:	2d09      	cmp	r5, #9
 800b1c4:	f04f 0301 	mov.w	r3, #1
 800b1c8:	6103      	str	r3, [r0, #16]
 800b1ca:	dd16      	ble.n	800b1fa <__s2b+0x72>
 800b1cc:	f104 0909 	add.w	r9, r4, #9
 800b1d0:	46c8      	mov	r8, r9
 800b1d2:	442c      	add	r4, r5
 800b1d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b1d8:	4601      	mov	r1, r0
 800b1da:	3b30      	subs	r3, #48	@ 0x30
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff8c 	bl	800b0fc <__multadd>
 800b1e4:	45a0      	cmp	r8, r4
 800b1e6:	d1f5      	bne.n	800b1d4 <__s2b+0x4c>
 800b1e8:	f1a5 0408 	sub.w	r4, r5, #8
 800b1ec:	444c      	add	r4, r9
 800b1ee:	1b2d      	subs	r5, r5, r4
 800b1f0:	1963      	adds	r3, r4, r5
 800b1f2:	42bb      	cmp	r3, r7
 800b1f4:	db04      	blt.n	800b200 <__s2b+0x78>
 800b1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1fa:	340a      	adds	r4, #10
 800b1fc:	2509      	movs	r5, #9
 800b1fe:	e7f6      	b.n	800b1ee <__s2b+0x66>
 800b200:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b204:	4601      	mov	r1, r0
 800b206:	3b30      	subs	r3, #48	@ 0x30
 800b208:	220a      	movs	r2, #10
 800b20a:	4630      	mov	r0, r6
 800b20c:	f7ff ff76 	bl	800b0fc <__multadd>
 800b210:	e7ee      	b.n	800b1f0 <__s2b+0x68>
 800b212:	bf00      	nop
 800b214:	0800d4e9 	.word	0x0800d4e9
 800b218:	0800d55a 	.word	0x0800d55a

0800b21c <__hi0bits>:
 800b21c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b220:	4603      	mov	r3, r0
 800b222:	bf36      	itet	cc
 800b224:	0403      	lslcc	r3, r0, #16
 800b226:	2000      	movcs	r0, #0
 800b228:	2010      	movcc	r0, #16
 800b22a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b22e:	bf3c      	itt	cc
 800b230:	021b      	lslcc	r3, r3, #8
 800b232:	3008      	addcc	r0, #8
 800b234:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b238:	bf3c      	itt	cc
 800b23a:	011b      	lslcc	r3, r3, #4
 800b23c:	3004      	addcc	r0, #4
 800b23e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b242:	bf3c      	itt	cc
 800b244:	009b      	lslcc	r3, r3, #2
 800b246:	3002      	addcc	r0, #2
 800b248:	2b00      	cmp	r3, #0
 800b24a:	db05      	blt.n	800b258 <__hi0bits+0x3c>
 800b24c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b250:	f100 0001 	add.w	r0, r0, #1
 800b254:	bf08      	it	eq
 800b256:	2020      	moveq	r0, #32
 800b258:	4770      	bx	lr

0800b25a <__lo0bits>:
 800b25a:	6803      	ldr	r3, [r0, #0]
 800b25c:	4602      	mov	r2, r0
 800b25e:	f013 0007 	ands.w	r0, r3, #7
 800b262:	d00b      	beq.n	800b27c <__lo0bits+0x22>
 800b264:	07d9      	lsls	r1, r3, #31
 800b266:	d421      	bmi.n	800b2ac <__lo0bits+0x52>
 800b268:	0798      	lsls	r0, r3, #30
 800b26a:	bf49      	itett	mi
 800b26c:	085b      	lsrmi	r3, r3, #1
 800b26e:	089b      	lsrpl	r3, r3, #2
 800b270:	2001      	movmi	r0, #1
 800b272:	6013      	strmi	r3, [r2, #0]
 800b274:	bf5c      	itt	pl
 800b276:	6013      	strpl	r3, [r2, #0]
 800b278:	2002      	movpl	r0, #2
 800b27a:	4770      	bx	lr
 800b27c:	b299      	uxth	r1, r3
 800b27e:	b909      	cbnz	r1, 800b284 <__lo0bits+0x2a>
 800b280:	0c1b      	lsrs	r3, r3, #16
 800b282:	2010      	movs	r0, #16
 800b284:	b2d9      	uxtb	r1, r3
 800b286:	b909      	cbnz	r1, 800b28c <__lo0bits+0x32>
 800b288:	3008      	adds	r0, #8
 800b28a:	0a1b      	lsrs	r3, r3, #8
 800b28c:	0719      	lsls	r1, r3, #28
 800b28e:	bf04      	itt	eq
 800b290:	091b      	lsreq	r3, r3, #4
 800b292:	3004      	addeq	r0, #4
 800b294:	0799      	lsls	r1, r3, #30
 800b296:	bf04      	itt	eq
 800b298:	089b      	lsreq	r3, r3, #2
 800b29a:	3002      	addeq	r0, #2
 800b29c:	07d9      	lsls	r1, r3, #31
 800b29e:	d403      	bmi.n	800b2a8 <__lo0bits+0x4e>
 800b2a0:	085b      	lsrs	r3, r3, #1
 800b2a2:	f100 0001 	add.w	r0, r0, #1
 800b2a6:	d003      	beq.n	800b2b0 <__lo0bits+0x56>
 800b2a8:	6013      	str	r3, [r2, #0]
 800b2aa:	4770      	bx	lr
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	4770      	bx	lr
 800b2b0:	2020      	movs	r0, #32
 800b2b2:	4770      	bx	lr

0800b2b4 <__i2b>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	f7ff febd 	bl	800b038 <_Balloc>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	b928      	cbnz	r0, 800b2ce <__i2b+0x1a>
 800b2c2:	4b05      	ldr	r3, [pc, #20]	@ (800b2d8 <__i2b+0x24>)
 800b2c4:	4805      	ldr	r0, [pc, #20]	@ (800b2dc <__i2b+0x28>)
 800b2c6:	f240 1145 	movw	r1, #325	@ 0x145
 800b2ca:	f000 fda1 	bl	800be10 <__assert_func>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	6144      	str	r4, [r0, #20]
 800b2d2:	6103      	str	r3, [r0, #16]
 800b2d4:	bd10      	pop	{r4, pc}
 800b2d6:	bf00      	nop
 800b2d8:	0800d4e9 	.word	0x0800d4e9
 800b2dc:	0800d55a 	.word	0x0800d55a

0800b2e0 <__multiply>:
 800b2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	690a      	ldr	r2, [r1, #16]
 800b2e8:	6923      	ldr	r3, [r4, #16]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	bfa8      	it	ge
 800b2ee:	4623      	movge	r3, r4
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	bfa4      	itt	ge
 800b2f4:	460c      	movge	r4, r1
 800b2f6:	461f      	movge	r7, r3
 800b2f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b2fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b300:	68a3      	ldr	r3, [r4, #8]
 800b302:	6861      	ldr	r1, [r4, #4]
 800b304:	eb0a 0609 	add.w	r6, sl, r9
 800b308:	42b3      	cmp	r3, r6
 800b30a:	b085      	sub	sp, #20
 800b30c:	bfb8      	it	lt
 800b30e:	3101      	addlt	r1, #1
 800b310:	f7ff fe92 	bl	800b038 <_Balloc>
 800b314:	b930      	cbnz	r0, 800b324 <__multiply+0x44>
 800b316:	4602      	mov	r2, r0
 800b318:	4b44      	ldr	r3, [pc, #272]	@ (800b42c <__multiply+0x14c>)
 800b31a:	4845      	ldr	r0, [pc, #276]	@ (800b430 <__multiply+0x150>)
 800b31c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b320:	f000 fd76 	bl	800be10 <__assert_func>
 800b324:	f100 0514 	add.w	r5, r0, #20
 800b328:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b32c:	462b      	mov	r3, r5
 800b32e:	2200      	movs	r2, #0
 800b330:	4543      	cmp	r3, r8
 800b332:	d321      	bcc.n	800b378 <__multiply+0x98>
 800b334:	f107 0114 	add.w	r1, r7, #20
 800b338:	f104 0214 	add.w	r2, r4, #20
 800b33c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b340:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b344:	9302      	str	r3, [sp, #8]
 800b346:	1b13      	subs	r3, r2, r4
 800b348:	3b15      	subs	r3, #21
 800b34a:	f023 0303 	bic.w	r3, r3, #3
 800b34e:	3304      	adds	r3, #4
 800b350:	f104 0715 	add.w	r7, r4, #21
 800b354:	42ba      	cmp	r2, r7
 800b356:	bf38      	it	cc
 800b358:	2304      	movcc	r3, #4
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	9103      	str	r1, [sp, #12]
 800b360:	428b      	cmp	r3, r1
 800b362:	d80c      	bhi.n	800b37e <__multiply+0x9e>
 800b364:	2e00      	cmp	r6, #0
 800b366:	dd03      	ble.n	800b370 <__multiply+0x90>
 800b368:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d05b      	beq.n	800b428 <__multiply+0x148>
 800b370:	6106      	str	r6, [r0, #16]
 800b372:	b005      	add	sp, #20
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	f843 2b04 	str.w	r2, [r3], #4
 800b37c:	e7d8      	b.n	800b330 <__multiply+0x50>
 800b37e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b382:	f1ba 0f00 	cmp.w	sl, #0
 800b386:	d024      	beq.n	800b3d2 <__multiply+0xf2>
 800b388:	f104 0e14 	add.w	lr, r4, #20
 800b38c:	46a9      	mov	r9, r5
 800b38e:	f04f 0c00 	mov.w	ip, #0
 800b392:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b396:	f8d9 3000 	ldr.w	r3, [r9]
 800b39a:	fa1f fb87 	uxth.w	fp, r7
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b3a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b3a8:	f8d9 7000 	ldr.w	r7, [r9]
 800b3ac:	4463      	add	r3, ip
 800b3ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b3b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b3b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b3c0:	4572      	cmp	r2, lr
 800b3c2:	f849 3b04 	str.w	r3, [r9], #4
 800b3c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b3ca:	d8e2      	bhi.n	800b392 <__multiply+0xb2>
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	f845 c003 	str.w	ip, [r5, r3]
 800b3d2:	9b03      	ldr	r3, [sp, #12]
 800b3d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b3d8:	3104      	adds	r1, #4
 800b3da:	f1b9 0f00 	cmp.w	r9, #0
 800b3de:	d021      	beq.n	800b424 <__multiply+0x144>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	f104 0c14 	add.w	ip, r4, #20
 800b3e6:	46ae      	mov	lr, r5
 800b3e8:	f04f 0a00 	mov.w	sl, #0
 800b3ec:	f8bc b000 	ldrh.w	fp, [ip]
 800b3f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b3f4:	fb09 770b 	mla	r7, r9, fp, r7
 800b3f8:	4457      	add	r7, sl
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b400:	f84e 3b04 	str.w	r3, [lr], #4
 800b404:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b408:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b40c:	f8be 3000 	ldrh.w	r3, [lr]
 800b410:	fb09 330a 	mla	r3, r9, sl, r3
 800b414:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b418:	4562      	cmp	r2, ip
 800b41a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b41e:	d8e5      	bhi.n	800b3ec <__multiply+0x10c>
 800b420:	9f01      	ldr	r7, [sp, #4]
 800b422:	51eb      	str	r3, [r5, r7]
 800b424:	3504      	adds	r5, #4
 800b426:	e799      	b.n	800b35c <__multiply+0x7c>
 800b428:	3e01      	subs	r6, #1
 800b42a:	e79b      	b.n	800b364 <__multiply+0x84>
 800b42c:	0800d4e9 	.word	0x0800d4e9
 800b430:	0800d55a 	.word	0x0800d55a

0800b434 <__pow5mult>:
 800b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b438:	4615      	mov	r5, r2
 800b43a:	f012 0203 	ands.w	r2, r2, #3
 800b43e:	4607      	mov	r7, r0
 800b440:	460e      	mov	r6, r1
 800b442:	d007      	beq.n	800b454 <__pow5mult+0x20>
 800b444:	4c25      	ldr	r4, [pc, #148]	@ (800b4dc <__pow5mult+0xa8>)
 800b446:	3a01      	subs	r2, #1
 800b448:	2300      	movs	r3, #0
 800b44a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b44e:	f7ff fe55 	bl	800b0fc <__multadd>
 800b452:	4606      	mov	r6, r0
 800b454:	10ad      	asrs	r5, r5, #2
 800b456:	d03d      	beq.n	800b4d4 <__pow5mult+0xa0>
 800b458:	69fc      	ldr	r4, [r7, #28]
 800b45a:	b97c      	cbnz	r4, 800b47c <__pow5mult+0x48>
 800b45c:	2010      	movs	r0, #16
 800b45e:	f7ff fd23 	bl	800aea8 <malloc>
 800b462:	4602      	mov	r2, r0
 800b464:	61f8      	str	r0, [r7, #28]
 800b466:	b928      	cbnz	r0, 800b474 <__pow5mult+0x40>
 800b468:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e0 <__pow5mult+0xac>)
 800b46a:	481e      	ldr	r0, [pc, #120]	@ (800b4e4 <__pow5mult+0xb0>)
 800b46c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b470:	f000 fcce 	bl	800be10 <__assert_func>
 800b474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b478:	6004      	str	r4, [r0, #0]
 800b47a:	60c4      	str	r4, [r0, #12]
 800b47c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b484:	b94c      	cbnz	r4, 800b49a <__pow5mult+0x66>
 800b486:	f240 2171 	movw	r1, #625	@ 0x271
 800b48a:	4638      	mov	r0, r7
 800b48c:	f7ff ff12 	bl	800b2b4 <__i2b>
 800b490:	2300      	movs	r3, #0
 800b492:	f8c8 0008 	str.w	r0, [r8, #8]
 800b496:	4604      	mov	r4, r0
 800b498:	6003      	str	r3, [r0, #0]
 800b49a:	f04f 0900 	mov.w	r9, #0
 800b49e:	07eb      	lsls	r3, r5, #31
 800b4a0:	d50a      	bpl.n	800b4b8 <__pow5mult+0x84>
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	f7ff ff1a 	bl	800b2e0 <__multiply>
 800b4ac:	4631      	mov	r1, r6
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff fe01 	bl	800b0b8 <_Bfree>
 800b4b6:	4646      	mov	r6, r8
 800b4b8:	106d      	asrs	r5, r5, #1
 800b4ba:	d00b      	beq.n	800b4d4 <__pow5mult+0xa0>
 800b4bc:	6820      	ldr	r0, [r4, #0]
 800b4be:	b938      	cbnz	r0, 800b4d0 <__pow5mult+0x9c>
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f7ff ff0b 	bl	800b2e0 <__multiply>
 800b4ca:	6020      	str	r0, [r4, #0]
 800b4cc:	f8c0 9000 	str.w	r9, [r0]
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	e7e4      	b.n	800b49e <__pow5mult+0x6a>
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800d5b4 	.word	0x0800d5b4
 800b4e0:	0800d47a 	.word	0x0800d47a
 800b4e4:	0800d55a 	.word	0x0800d55a

0800b4e8 <__lshift>:
 800b4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	6849      	ldr	r1, [r1, #4]
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	4691      	mov	r9, r2
 800b4fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b500:	f108 0601 	add.w	r6, r8, #1
 800b504:	42b3      	cmp	r3, r6
 800b506:	db0b      	blt.n	800b520 <__lshift+0x38>
 800b508:	4638      	mov	r0, r7
 800b50a:	f7ff fd95 	bl	800b038 <_Balloc>
 800b50e:	4605      	mov	r5, r0
 800b510:	b948      	cbnz	r0, 800b526 <__lshift+0x3e>
 800b512:	4602      	mov	r2, r0
 800b514:	4b28      	ldr	r3, [pc, #160]	@ (800b5b8 <__lshift+0xd0>)
 800b516:	4829      	ldr	r0, [pc, #164]	@ (800b5bc <__lshift+0xd4>)
 800b518:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b51c:	f000 fc78 	bl	800be10 <__assert_func>
 800b520:	3101      	adds	r1, #1
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	e7ee      	b.n	800b504 <__lshift+0x1c>
 800b526:	2300      	movs	r3, #0
 800b528:	f100 0114 	add.w	r1, r0, #20
 800b52c:	f100 0210 	add.w	r2, r0, #16
 800b530:	4618      	mov	r0, r3
 800b532:	4553      	cmp	r3, sl
 800b534:	db33      	blt.n	800b59e <__lshift+0xb6>
 800b536:	6920      	ldr	r0, [r4, #16]
 800b538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b53c:	f104 0314 	add.w	r3, r4, #20
 800b540:	f019 091f 	ands.w	r9, r9, #31
 800b544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b54c:	d02b      	beq.n	800b5a6 <__lshift+0xbe>
 800b54e:	f1c9 0e20 	rsb	lr, r9, #32
 800b552:	468a      	mov	sl, r1
 800b554:	2200      	movs	r2, #0
 800b556:	6818      	ldr	r0, [r3, #0]
 800b558:	fa00 f009 	lsl.w	r0, r0, r9
 800b55c:	4310      	orrs	r0, r2
 800b55e:	f84a 0b04 	str.w	r0, [sl], #4
 800b562:	f853 2b04 	ldr.w	r2, [r3], #4
 800b566:	459c      	cmp	ip, r3
 800b568:	fa22 f20e 	lsr.w	r2, r2, lr
 800b56c:	d8f3      	bhi.n	800b556 <__lshift+0x6e>
 800b56e:	ebac 0304 	sub.w	r3, ip, r4
 800b572:	3b15      	subs	r3, #21
 800b574:	f023 0303 	bic.w	r3, r3, #3
 800b578:	3304      	adds	r3, #4
 800b57a:	f104 0015 	add.w	r0, r4, #21
 800b57e:	4584      	cmp	ip, r0
 800b580:	bf38      	it	cc
 800b582:	2304      	movcc	r3, #4
 800b584:	50ca      	str	r2, [r1, r3]
 800b586:	b10a      	cbz	r2, 800b58c <__lshift+0xa4>
 800b588:	f108 0602 	add.w	r6, r8, #2
 800b58c:	3e01      	subs	r6, #1
 800b58e:	4638      	mov	r0, r7
 800b590:	612e      	str	r6, [r5, #16]
 800b592:	4621      	mov	r1, r4
 800b594:	f7ff fd90 	bl	800b0b8 <_Bfree>
 800b598:	4628      	mov	r0, r5
 800b59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	e7c5      	b.n	800b532 <__lshift+0x4a>
 800b5a6:	3904      	subs	r1, #4
 800b5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5b0:	459c      	cmp	ip, r3
 800b5b2:	d8f9      	bhi.n	800b5a8 <__lshift+0xc0>
 800b5b4:	e7ea      	b.n	800b58c <__lshift+0xa4>
 800b5b6:	bf00      	nop
 800b5b8:	0800d4e9 	.word	0x0800d4e9
 800b5bc:	0800d55a 	.word	0x0800d55a

0800b5c0 <__mcmp>:
 800b5c0:	690a      	ldr	r2, [r1, #16]
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	6900      	ldr	r0, [r0, #16]
 800b5c6:	1a80      	subs	r0, r0, r2
 800b5c8:	b530      	push	{r4, r5, lr}
 800b5ca:	d10e      	bne.n	800b5ea <__mcmp+0x2a>
 800b5cc:	3314      	adds	r3, #20
 800b5ce:	3114      	adds	r1, #20
 800b5d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b5d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b5d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b5dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b5e0:	4295      	cmp	r5, r2
 800b5e2:	d003      	beq.n	800b5ec <__mcmp+0x2c>
 800b5e4:	d205      	bcs.n	800b5f2 <__mcmp+0x32>
 800b5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ea:	bd30      	pop	{r4, r5, pc}
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	d3f3      	bcc.n	800b5d8 <__mcmp+0x18>
 800b5f0:	e7fb      	b.n	800b5ea <__mcmp+0x2a>
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	e7f9      	b.n	800b5ea <__mcmp+0x2a>
	...

0800b5f8 <__mdiff>:
 800b5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	4606      	mov	r6, r0
 800b600:	4611      	mov	r1, r2
 800b602:	4648      	mov	r0, r9
 800b604:	4614      	mov	r4, r2
 800b606:	f7ff ffdb 	bl	800b5c0 <__mcmp>
 800b60a:	1e05      	subs	r5, r0, #0
 800b60c:	d112      	bne.n	800b634 <__mdiff+0x3c>
 800b60e:	4629      	mov	r1, r5
 800b610:	4630      	mov	r0, r6
 800b612:	f7ff fd11 	bl	800b038 <_Balloc>
 800b616:	4602      	mov	r2, r0
 800b618:	b928      	cbnz	r0, 800b626 <__mdiff+0x2e>
 800b61a:	4b3f      	ldr	r3, [pc, #252]	@ (800b718 <__mdiff+0x120>)
 800b61c:	f240 2137 	movw	r1, #567	@ 0x237
 800b620:	483e      	ldr	r0, [pc, #248]	@ (800b71c <__mdiff+0x124>)
 800b622:	f000 fbf5 	bl	800be10 <__assert_func>
 800b626:	2301      	movs	r3, #1
 800b628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b62c:	4610      	mov	r0, r2
 800b62e:	b003      	add	sp, #12
 800b630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b634:	bfbc      	itt	lt
 800b636:	464b      	movlt	r3, r9
 800b638:	46a1      	movlt	r9, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b640:	bfba      	itte	lt
 800b642:	461c      	movlt	r4, r3
 800b644:	2501      	movlt	r5, #1
 800b646:	2500      	movge	r5, #0
 800b648:	f7ff fcf6 	bl	800b038 <_Balloc>
 800b64c:	4602      	mov	r2, r0
 800b64e:	b918      	cbnz	r0, 800b658 <__mdiff+0x60>
 800b650:	4b31      	ldr	r3, [pc, #196]	@ (800b718 <__mdiff+0x120>)
 800b652:	f240 2145 	movw	r1, #581	@ 0x245
 800b656:	e7e3      	b.n	800b620 <__mdiff+0x28>
 800b658:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b65c:	6926      	ldr	r6, [r4, #16]
 800b65e:	60c5      	str	r5, [r0, #12]
 800b660:	f109 0310 	add.w	r3, r9, #16
 800b664:	f109 0514 	add.w	r5, r9, #20
 800b668:	f104 0e14 	add.w	lr, r4, #20
 800b66c:	f100 0b14 	add.w	fp, r0, #20
 800b670:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b674:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	46d9      	mov	r9, fp
 800b67c:	f04f 0c00 	mov.w	ip, #0
 800b680:	9b01      	ldr	r3, [sp, #4]
 800b682:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b686:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b68a:	9301      	str	r3, [sp, #4]
 800b68c:	fa1f f38a 	uxth.w	r3, sl
 800b690:	4619      	mov	r1, r3
 800b692:	b283      	uxth	r3, r0
 800b694:	1acb      	subs	r3, r1, r3
 800b696:	0c00      	lsrs	r0, r0, #16
 800b698:	4463      	add	r3, ip
 800b69a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b69e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b6a8:	4576      	cmp	r6, lr
 800b6aa:	f849 3b04 	str.w	r3, [r9], #4
 800b6ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b6b2:	d8e5      	bhi.n	800b680 <__mdiff+0x88>
 800b6b4:	1b33      	subs	r3, r6, r4
 800b6b6:	3b15      	subs	r3, #21
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	3415      	adds	r4, #21
 800b6be:	3304      	adds	r3, #4
 800b6c0:	42a6      	cmp	r6, r4
 800b6c2:	bf38      	it	cc
 800b6c4:	2304      	movcc	r3, #4
 800b6c6:	441d      	add	r5, r3
 800b6c8:	445b      	add	r3, fp
 800b6ca:	461e      	mov	r6, r3
 800b6cc:	462c      	mov	r4, r5
 800b6ce:	4544      	cmp	r4, r8
 800b6d0:	d30e      	bcc.n	800b6f0 <__mdiff+0xf8>
 800b6d2:	f108 0103 	add.w	r1, r8, #3
 800b6d6:	1b49      	subs	r1, r1, r5
 800b6d8:	f021 0103 	bic.w	r1, r1, #3
 800b6dc:	3d03      	subs	r5, #3
 800b6de:	45a8      	cmp	r8, r5
 800b6e0:	bf38      	it	cc
 800b6e2:	2100      	movcc	r1, #0
 800b6e4:	440b      	add	r3, r1
 800b6e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6ea:	b191      	cbz	r1, 800b712 <__mdiff+0x11a>
 800b6ec:	6117      	str	r7, [r2, #16]
 800b6ee:	e79d      	b.n	800b62c <__mdiff+0x34>
 800b6f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b6f4:	46e6      	mov	lr, ip
 800b6f6:	0c08      	lsrs	r0, r1, #16
 800b6f8:	fa1c fc81 	uxtah	ip, ip, r1
 800b6fc:	4471      	add	r1, lr
 800b6fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b702:	b289      	uxth	r1, r1
 800b704:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b708:	f846 1b04 	str.w	r1, [r6], #4
 800b70c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b710:	e7dd      	b.n	800b6ce <__mdiff+0xd6>
 800b712:	3f01      	subs	r7, #1
 800b714:	e7e7      	b.n	800b6e6 <__mdiff+0xee>
 800b716:	bf00      	nop
 800b718:	0800d4e9 	.word	0x0800d4e9
 800b71c:	0800d55a 	.word	0x0800d55a

0800b720 <__ulp>:
 800b720:	b082      	sub	sp, #8
 800b722:	ed8d 0b00 	vstr	d0, [sp]
 800b726:	9a01      	ldr	r2, [sp, #4]
 800b728:	4b0f      	ldr	r3, [pc, #60]	@ (800b768 <__ulp+0x48>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b730:	2b00      	cmp	r3, #0
 800b732:	dc08      	bgt.n	800b746 <__ulp+0x26>
 800b734:	425b      	negs	r3, r3
 800b736:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b73a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b73e:	da04      	bge.n	800b74a <__ulp+0x2a>
 800b740:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b744:	4113      	asrs	r3, r2
 800b746:	2200      	movs	r2, #0
 800b748:	e008      	b.n	800b75c <__ulp+0x3c>
 800b74a:	f1a2 0314 	sub.w	r3, r2, #20
 800b74e:	2b1e      	cmp	r3, #30
 800b750:	bfda      	itte	le
 800b752:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b756:	40da      	lsrle	r2, r3
 800b758:	2201      	movgt	r2, #1
 800b75a:	2300      	movs	r3, #0
 800b75c:	4619      	mov	r1, r3
 800b75e:	4610      	mov	r0, r2
 800b760:	ec41 0b10 	vmov	d0, r0, r1
 800b764:	b002      	add	sp, #8
 800b766:	4770      	bx	lr
 800b768:	7ff00000 	.word	0x7ff00000

0800b76c <__b2d>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	6906      	ldr	r6, [r0, #16]
 800b772:	f100 0814 	add.w	r8, r0, #20
 800b776:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b77a:	1f37      	subs	r7, r6, #4
 800b77c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b780:	4610      	mov	r0, r2
 800b782:	f7ff fd4b 	bl	800b21c <__hi0bits>
 800b786:	f1c0 0320 	rsb	r3, r0, #32
 800b78a:	280a      	cmp	r0, #10
 800b78c:	600b      	str	r3, [r1, #0]
 800b78e:	491b      	ldr	r1, [pc, #108]	@ (800b7fc <__b2d+0x90>)
 800b790:	dc15      	bgt.n	800b7be <__b2d+0x52>
 800b792:	f1c0 0c0b 	rsb	ip, r0, #11
 800b796:	fa22 f30c 	lsr.w	r3, r2, ip
 800b79a:	45b8      	cmp	r8, r7
 800b79c:	ea43 0501 	orr.w	r5, r3, r1
 800b7a0:	bf34      	ite	cc
 800b7a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7a6:	2300      	movcs	r3, #0
 800b7a8:	3015      	adds	r0, #21
 800b7aa:	fa02 f000 	lsl.w	r0, r2, r0
 800b7ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800b7b2:	4303      	orrs	r3, r0
 800b7b4:	461c      	mov	r4, r3
 800b7b6:	ec45 4b10 	vmov	d0, r4, r5
 800b7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7be:	45b8      	cmp	r8, r7
 800b7c0:	bf3a      	itte	cc
 800b7c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b7ca:	2300      	movcs	r3, #0
 800b7cc:	380b      	subs	r0, #11
 800b7ce:	d012      	beq.n	800b7f6 <__b2d+0x8a>
 800b7d0:	f1c0 0120 	rsb	r1, r0, #32
 800b7d4:	fa23 f401 	lsr.w	r4, r3, r1
 800b7d8:	4082      	lsls	r2, r0
 800b7da:	4322      	orrs	r2, r4
 800b7dc:	4547      	cmp	r7, r8
 800b7de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b7e2:	bf8c      	ite	hi
 800b7e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b7e8:	2200      	movls	r2, #0
 800b7ea:	4083      	lsls	r3, r0
 800b7ec:	40ca      	lsrs	r2, r1
 800b7ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	e7de      	b.n	800b7b4 <__b2d+0x48>
 800b7f6:	ea42 0501 	orr.w	r5, r2, r1
 800b7fa:	e7db      	b.n	800b7b4 <__b2d+0x48>
 800b7fc:	3ff00000 	.word	0x3ff00000

0800b800 <__d2b>:
 800b800:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b804:	460f      	mov	r7, r1
 800b806:	2101      	movs	r1, #1
 800b808:	ec59 8b10 	vmov	r8, r9, d0
 800b80c:	4616      	mov	r6, r2
 800b80e:	f7ff fc13 	bl	800b038 <_Balloc>
 800b812:	4604      	mov	r4, r0
 800b814:	b930      	cbnz	r0, 800b824 <__d2b+0x24>
 800b816:	4602      	mov	r2, r0
 800b818:	4b23      	ldr	r3, [pc, #140]	@ (800b8a8 <__d2b+0xa8>)
 800b81a:	4824      	ldr	r0, [pc, #144]	@ (800b8ac <__d2b+0xac>)
 800b81c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b820:	f000 faf6 	bl	800be10 <__assert_func>
 800b824:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b82c:	b10d      	cbz	r5, 800b832 <__d2b+0x32>
 800b82e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	f1b8 0300 	subs.w	r3, r8, #0
 800b838:	d023      	beq.n	800b882 <__d2b+0x82>
 800b83a:	4668      	mov	r0, sp
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	f7ff fd0c 	bl	800b25a <__lo0bits>
 800b842:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b846:	b1d0      	cbz	r0, 800b87e <__d2b+0x7e>
 800b848:	f1c0 0320 	rsb	r3, r0, #32
 800b84c:	fa02 f303 	lsl.w	r3, r2, r3
 800b850:	430b      	orrs	r3, r1
 800b852:	40c2      	lsrs	r2, r0
 800b854:	6163      	str	r3, [r4, #20]
 800b856:	9201      	str	r2, [sp, #4]
 800b858:	9b01      	ldr	r3, [sp, #4]
 800b85a:	61a3      	str	r3, [r4, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bf0c      	ite	eq
 800b860:	2201      	moveq	r2, #1
 800b862:	2202      	movne	r2, #2
 800b864:	6122      	str	r2, [r4, #16]
 800b866:	b1a5      	cbz	r5, 800b892 <__d2b+0x92>
 800b868:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b86c:	4405      	add	r5, r0
 800b86e:	603d      	str	r5, [r7, #0]
 800b870:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b874:	6030      	str	r0, [r6, #0]
 800b876:	4620      	mov	r0, r4
 800b878:	b003      	add	sp, #12
 800b87a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b87e:	6161      	str	r1, [r4, #20]
 800b880:	e7ea      	b.n	800b858 <__d2b+0x58>
 800b882:	a801      	add	r0, sp, #4
 800b884:	f7ff fce9 	bl	800b25a <__lo0bits>
 800b888:	9b01      	ldr	r3, [sp, #4]
 800b88a:	6163      	str	r3, [r4, #20]
 800b88c:	3020      	adds	r0, #32
 800b88e:	2201      	movs	r2, #1
 800b890:	e7e8      	b.n	800b864 <__d2b+0x64>
 800b892:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b896:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b89a:	6038      	str	r0, [r7, #0]
 800b89c:	6918      	ldr	r0, [r3, #16]
 800b89e:	f7ff fcbd 	bl	800b21c <__hi0bits>
 800b8a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8a6:	e7e5      	b.n	800b874 <__d2b+0x74>
 800b8a8:	0800d4e9 	.word	0x0800d4e9
 800b8ac:	0800d55a 	.word	0x0800d55a

0800b8b0 <__ratio>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	e9cd 1000 	strd	r1, r0, [sp]
 800b8ba:	a902      	add	r1, sp, #8
 800b8bc:	f7ff ff56 	bl	800b76c <__b2d>
 800b8c0:	9800      	ldr	r0, [sp, #0]
 800b8c2:	a903      	add	r1, sp, #12
 800b8c4:	ec55 4b10 	vmov	r4, r5, d0
 800b8c8:	f7ff ff50 	bl	800b76c <__b2d>
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	6919      	ldr	r1, [r3, #16]
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	1ac9      	subs	r1, r1, r3
 800b8d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b8da:	1a9b      	subs	r3, r3, r2
 800b8dc:	ec5b ab10 	vmov	sl, fp, d0
 800b8e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfce      	itee	gt
 800b8e8:	462a      	movgt	r2, r5
 800b8ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b8ee:	465a      	movle	r2, fp
 800b8f0:	462f      	mov	r7, r5
 800b8f2:	46d9      	mov	r9, fp
 800b8f4:	bfcc      	ite	gt
 800b8f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b8fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b8fe:	464b      	mov	r3, r9
 800b900:	4652      	mov	r2, sl
 800b902:	4620      	mov	r0, r4
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 ffc1 	bl	800088c <__aeabi_ddiv>
 800b90a:	ec41 0b10 	vmov	d0, r0, r1
 800b90e:	b005      	add	sp, #20
 800b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b914 <__copybits>:
 800b914:	3901      	subs	r1, #1
 800b916:	b570      	push	{r4, r5, r6, lr}
 800b918:	1149      	asrs	r1, r1, #5
 800b91a:	6914      	ldr	r4, [r2, #16]
 800b91c:	3101      	adds	r1, #1
 800b91e:	f102 0314 	add.w	r3, r2, #20
 800b922:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b926:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b92a:	1f05      	subs	r5, r0, #4
 800b92c:	42a3      	cmp	r3, r4
 800b92e:	d30c      	bcc.n	800b94a <__copybits+0x36>
 800b930:	1aa3      	subs	r3, r4, r2
 800b932:	3b11      	subs	r3, #17
 800b934:	f023 0303 	bic.w	r3, r3, #3
 800b938:	3211      	adds	r2, #17
 800b93a:	42a2      	cmp	r2, r4
 800b93c:	bf88      	it	hi
 800b93e:	2300      	movhi	r3, #0
 800b940:	4418      	add	r0, r3
 800b942:	2300      	movs	r3, #0
 800b944:	4288      	cmp	r0, r1
 800b946:	d305      	bcc.n	800b954 <__copybits+0x40>
 800b948:	bd70      	pop	{r4, r5, r6, pc}
 800b94a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b94e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b952:	e7eb      	b.n	800b92c <__copybits+0x18>
 800b954:	f840 3b04 	str.w	r3, [r0], #4
 800b958:	e7f4      	b.n	800b944 <__copybits+0x30>

0800b95a <__any_on>:
 800b95a:	f100 0214 	add.w	r2, r0, #20
 800b95e:	6900      	ldr	r0, [r0, #16]
 800b960:	114b      	asrs	r3, r1, #5
 800b962:	4298      	cmp	r0, r3
 800b964:	b510      	push	{r4, lr}
 800b966:	db11      	blt.n	800b98c <__any_on+0x32>
 800b968:	dd0a      	ble.n	800b980 <__any_on+0x26>
 800b96a:	f011 011f 	ands.w	r1, r1, #31
 800b96e:	d007      	beq.n	800b980 <__any_on+0x26>
 800b970:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b974:	fa24 f001 	lsr.w	r0, r4, r1
 800b978:	fa00 f101 	lsl.w	r1, r0, r1
 800b97c:	428c      	cmp	r4, r1
 800b97e:	d10b      	bne.n	800b998 <__any_on+0x3e>
 800b980:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b984:	4293      	cmp	r3, r2
 800b986:	d803      	bhi.n	800b990 <__any_on+0x36>
 800b988:	2000      	movs	r0, #0
 800b98a:	bd10      	pop	{r4, pc}
 800b98c:	4603      	mov	r3, r0
 800b98e:	e7f7      	b.n	800b980 <__any_on+0x26>
 800b990:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b994:	2900      	cmp	r1, #0
 800b996:	d0f5      	beq.n	800b984 <__any_on+0x2a>
 800b998:	2001      	movs	r0, #1
 800b99a:	e7f6      	b.n	800b98a <__any_on+0x30>

0800b99c <__ascii_wctomb>:
 800b99c:	4603      	mov	r3, r0
 800b99e:	4608      	mov	r0, r1
 800b9a0:	b141      	cbz	r1, 800b9b4 <__ascii_wctomb+0x18>
 800b9a2:	2aff      	cmp	r2, #255	@ 0xff
 800b9a4:	d904      	bls.n	800b9b0 <__ascii_wctomb+0x14>
 800b9a6:	228a      	movs	r2, #138	@ 0x8a
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	4770      	bx	lr
 800b9b0:	700a      	strb	r2, [r1, #0]
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	4770      	bx	lr

0800b9b6 <__ssputs_r>:
 800b9b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9ba:	688e      	ldr	r6, [r1, #8]
 800b9bc:	461f      	mov	r7, r3
 800b9be:	42be      	cmp	r6, r7
 800b9c0:	680b      	ldr	r3, [r1, #0]
 800b9c2:	4682      	mov	sl, r0
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	4690      	mov	r8, r2
 800b9c8:	d82d      	bhi.n	800ba26 <__ssputs_r+0x70>
 800b9ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9d2:	d026      	beq.n	800ba22 <__ssputs_r+0x6c>
 800b9d4:	6965      	ldr	r5, [r4, #20]
 800b9d6:	6909      	ldr	r1, [r1, #16]
 800b9d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9dc:	eba3 0901 	sub.w	r9, r3, r1
 800b9e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9e4:	1c7b      	adds	r3, r7, #1
 800b9e6:	444b      	add	r3, r9
 800b9e8:	106d      	asrs	r5, r5, #1
 800b9ea:	429d      	cmp	r5, r3
 800b9ec:	bf38      	it	cc
 800b9ee:	461d      	movcc	r5, r3
 800b9f0:	0553      	lsls	r3, r2, #21
 800b9f2:	d527      	bpl.n	800ba44 <__ssputs_r+0x8e>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f7ff fa81 	bl	800aefc <_malloc_r>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	b360      	cbz	r0, 800ba58 <__ssputs_r+0xa2>
 800b9fe:	6921      	ldr	r1, [r4, #16]
 800ba00:	464a      	mov	r2, r9
 800ba02:	f7fe f86a 	bl	8009ada <memcpy>
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	6126      	str	r6, [r4, #16]
 800ba14:	6165      	str	r5, [r4, #20]
 800ba16:	444e      	add	r6, r9
 800ba18:	eba5 0509 	sub.w	r5, r5, r9
 800ba1c:	6026      	str	r6, [r4, #0]
 800ba1e:	60a5      	str	r5, [r4, #8]
 800ba20:	463e      	mov	r6, r7
 800ba22:	42be      	cmp	r6, r7
 800ba24:	d900      	bls.n	800ba28 <__ssputs_r+0x72>
 800ba26:	463e      	mov	r6, r7
 800ba28:	6820      	ldr	r0, [r4, #0]
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	4641      	mov	r1, r8
 800ba2e:	f000 f9c5 	bl	800bdbc <memmove>
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	1b9b      	subs	r3, r3, r6
 800ba36:	60a3      	str	r3, [r4, #8]
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	4433      	add	r3, r6
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	2000      	movs	r0, #0
 800ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba44:	462a      	mov	r2, r5
 800ba46:	f000 fa15 	bl	800be74 <_realloc_r>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1e0      	bne.n	800ba12 <__ssputs_r+0x5c>
 800ba50:	6921      	ldr	r1, [r4, #16]
 800ba52:	4650      	mov	r0, sl
 800ba54:	f7fe fea4 	bl	800a7a0 <_free_r>
 800ba58:	230c      	movs	r3, #12
 800ba5a:	f8ca 3000 	str.w	r3, [sl]
 800ba5e:	89a3      	ldrh	r3, [r4, #12]
 800ba60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba64:	81a3      	strh	r3, [r4, #12]
 800ba66:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6a:	e7e9      	b.n	800ba40 <__ssputs_r+0x8a>

0800ba6c <_svfiprintf_r>:
 800ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	4698      	mov	r8, r3
 800ba72:	898b      	ldrh	r3, [r1, #12]
 800ba74:	061b      	lsls	r3, r3, #24
 800ba76:	b09d      	sub	sp, #116	@ 0x74
 800ba78:	4607      	mov	r7, r0
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	d510      	bpl.n	800baa2 <_svfiprintf_r+0x36>
 800ba80:	690b      	ldr	r3, [r1, #16]
 800ba82:	b973      	cbnz	r3, 800baa2 <_svfiprintf_r+0x36>
 800ba84:	2140      	movs	r1, #64	@ 0x40
 800ba86:	f7ff fa39 	bl	800aefc <_malloc_r>
 800ba8a:	6028      	str	r0, [r5, #0]
 800ba8c:	6128      	str	r0, [r5, #16]
 800ba8e:	b930      	cbnz	r0, 800ba9e <_svfiprintf_r+0x32>
 800ba90:	230c      	movs	r3, #12
 800ba92:	603b      	str	r3, [r7, #0]
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	b01d      	add	sp, #116	@ 0x74
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	2340      	movs	r3, #64	@ 0x40
 800baa0:	616b      	str	r3, [r5, #20]
 800baa2:	2300      	movs	r3, #0
 800baa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa6:	2320      	movs	r3, #32
 800baa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baac:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab0:	2330      	movs	r3, #48	@ 0x30
 800bab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc50 <_svfiprintf_r+0x1e4>
 800bab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baba:	f04f 0901 	mov.w	r9, #1
 800babe:	4623      	mov	r3, r4
 800bac0:	469a      	mov	sl, r3
 800bac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac6:	b10a      	cbz	r2, 800bacc <_svfiprintf_r+0x60>
 800bac8:	2a25      	cmp	r2, #37	@ 0x25
 800baca:	d1f9      	bne.n	800bac0 <_svfiprintf_r+0x54>
 800bacc:	ebba 0b04 	subs.w	fp, sl, r4
 800bad0:	d00b      	beq.n	800baea <_svfiprintf_r+0x7e>
 800bad2:	465b      	mov	r3, fp
 800bad4:	4622      	mov	r2, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	4638      	mov	r0, r7
 800bada:	f7ff ff6c 	bl	800b9b6 <__ssputs_r>
 800bade:	3001      	adds	r0, #1
 800bae0:	f000 80a7 	beq.w	800bc32 <_svfiprintf_r+0x1c6>
 800bae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae6:	445a      	add	r2, fp
 800bae8:	9209      	str	r2, [sp, #36]	@ 0x24
 800baea:	f89a 3000 	ldrb.w	r3, [sl]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 809f 	beq.w	800bc32 <_svfiprintf_r+0x1c6>
 800baf4:	2300      	movs	r3, #0
 800baf6:	f04f 32ff 	mov.w	r2, #4294967295
 800bafa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bafe:	f10a 0a01 	add.w	sl, sl, #1
 800bb02:	9304      	str	r3, [sp, #16]
 800bb04:	9307      	str	r3, [sp, #28]
 800bb06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb0a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb0c:	4654      	mov	r4, sl
 800bb0e:	2205      	movs	r2, #5
 800bb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb14:	484e      	ldr	r0, [pc, #312]	@ (800bc50 <_svfiprintf_r+0x1e4>)
 800bb16:	f7f4 fb7b 	bl	8000210 <memchr>
 800bb1a:	9a04      	ldr	r2, [sp, #16]
 800bb1c:	b9d8      	cbnz	r0, 800bb56 <_svfiprintf_r+0xea>
 800bb1e:	06d0      	lsls	r0, r2, #27
 800bb20:	bf44      	itt	mi
 800bb22:	2320      	movmi	r3, #32
 800bb24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb28:	0711      	lsls	r1, r2, #28
 800bb2a:	bf44      	itt	mi
 800bb2c:	232b      	movmi	r3, #43	@ 0x2b
 800bb2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb32:	f89a 3000 	ldrb.w	r3, [sl]
 800bb36:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb38:	d015      	beq.n	800bb66 <_svfiprintf_r+0xfa>
 800bb3a:	9a07      	ldr	r2, [sp, #28]
 800bb3c:	4654      	mov	r4, sl
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f04f 0c0a 	mov.w	ip, #10
 800bb44:	4621      	mov	r1, r4
 800bb46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4a:	3b30      	subs	r3, #48	@ 0x30
 800bb4c:	2b09      	cmp	r3, #9
 800bb4e:	d94b      	bls.n	800bbe8 <_svfiprintf_r+0x17c>
 800bb50:	b1b0      	cbz	r0, 800bb80 <_svfiprintf_r+0x114>
 800bb52:	9207      	str	r2, [sp, #28]
 800bb54:	e014      	b.n	800bb80 <_svfiprintf_r+0x114>
 800bb56:	eba0 0308 	sub.w	r3, r0, r8
 800bb5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	46a2      	mov	sl, r4
 800bb64:	e7d2      	b.n	800bb0c <_svfiprintf_r+0xa0>
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	1d19      	adds	r1, r3, #4
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	9103      	str	r1, [sp, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	bfbb      	ittet	lt
 800bb72:	425b      	neglt	r3, r3
 800bb74:	f042 0202 	orrlt.w	r2, r2, #2
 800bb78:	9307      	strge	r3, [sp, #28]
 800bb7a:	9307      	strlt	r3, [sp, #28]
 800bb7c:	bfb8      	it	lt
 800bb7e:	9204      	strlt	r2, [sp, #16]
 800bb80:	7823      	ldrb	r3, [r4, #0]
 800bb82:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb84:	d10a      	bne.n	800bb9c <_svfiprintf_r+0x130>
 800bb86:	7863      	ldrb	r3, [r4, #1]
 800bb88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8a:	d132      	bne.n	800bbf2 <_svfiprintf_r+0x186>
 800bb8c:	9b03      	ldr	r3, [sp, #12]
 800bb8e:	1d1a      	adds	r2, r3, #4
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	9203      	str	r2, [sp, #12]
 800bb94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb98:	3402      	adds	r4, #2
 800bb9a:	9305      	str	r3, [sp, #20]
 800bb9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc60 <_svfiprintf_r+0x1f4>
 800bba0:	7821      	ldrb	r1, [r4, #0]
 800bba2:	2203      	movs	r2, #3
 800bba4:	4650      	mov	r0, sl
 800bba6:	f7f4 fb33 	bl	8000210 <memchr>
 800bbaa:	b138      	cbz	r0, 800bbbc <_svfiprintf_r+0x150>
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	eba0 000a 	sub.w	r0, r0, sl
 800bbb2:	2240      	movs	r2, #64	@ 0x40
 800bbb4:	4082      	lsls	r2, r0
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	3401      	adds	r4, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc0:	4824      	ldr	r0, [pc, #144]	@ (800bc54 <_svfiprintf_r+0x1e8>)
 800bbc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbc6:	2206      	movs	r2, #6
 800bbc8:	f7f4 fb22 	bl	8000210 <memchr>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d036      	beq.n	800bc3e <_svfiprintf_r+0x1d2>
 800bbd0:	4b21      	ldr	r3, [pc, #132]	@ (800bc58 <_svfiprintf_r+0x1ec>)
 800bbd2:	bb1b      	cbnz	r3, 800bc1c <_svfiprintf_r+0x1b0>
 800bbd4:	9b03      	ldr	r3, [sp, #12]
 800bbd6:	3307      	adds	r3, #7
 800bbd8:	f023 0307 	bic.w	r3, r3, #7
 800bbdc:	3308      	adds	r3, #8
 800bbde:	9303      	str	r3, [sp, #12]
 800bbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe2:	4433      	add	r3, r6
 800bbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe6:	e76a      	b.n	800babe <_svfiprintf_r+0x52>
 800bbe8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbec:	460c      	mov	r4, r1
 800bbee:	2001      	movs	r0, #1
 800bbf0:	e7a8      	b.n	800bb44 <_svfiprintf_r+0xd8>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	3401      	adds	r4, #1
 800bbf6:	9305      	str	r3, [sp, #20]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	f04f 0c0a 	mov.w	ip, #10
 800bbfe:	4620      	mov	r0, r4
 800bc00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc04:	3a30      	subs	r2, #48	@ 0x30
 800bc06:	2a09      	cmp	r2, #9
 800bc08:	d903      	bls.n	800bc12 <_svfiprintf_r+0x1a6>
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0c6      	beq.n	800bb9c <_svfiprintf_r+0x130>
 800bc0e:	9105      	str	r1, [sp, #20]
 800bc10:	e7c4      	b.n	800bb9c <_svfiprintf_r+0x130>
 800bc12:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc16:	4604      	mov	r4, r0
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e7f0      	b.n	800bbfe <_svfiprintf_r+0x192>
 800bc1c:	ab03      	add	r3, sp, #12
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	462a      	mov	r2, r5
 800bc22:	4b0e      	ldr	r3, [pc, #56]	@ (800bc5c <_svfiprintf_r+0x1f0>)
 800bc24:	a904      	add	r1, sp, #16
 800bc26:	4638      	mov	r0, r7
 800bc28:	f7fd f9b2 	bl	8008f90 <_printf_float>
 800bc2c:	1c42      	adds	r2, r0, #1
 800bc2e:	4606      	mov	r6, r0
 800bc30:	d1d6      	bne.n	800bbe0 <_svfiprintf_r+0x174>
 800bc32:	89ab      	ldrh	r3, [r5, #12]
 800bc34:	065b      	lsls	r3, r3, #25
 800bc36:	f53f af2d 	bmi.w	800ba94 <_svfiprintf_r+0x28>
 800bc3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc3c:	e72c      	b.n	800ba98 <_svfiprintf_r+0x2c>
 800bc3e:	ab03      	add	r3, sp, #12
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	462a      	mov	r2, r5
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <_svfiprintf_r+0x1f0>)
 800bc46:	a904      	add	r1, sp, #16
 800bc48:	4638      	mov	r0, r7
 800bc4a:	f7fd fc39 	bl	80094c0 <_printf_i>
 800bc4e:	e7ed      	b.n	800bc2c <_svfiprintf_r+0x1c0>
 800bc50:	0800d6b0 	.word	0x0800d6b0
 800bc54:	0800d6ba 	.word	0x0800d6ba
 800bc58:	08008f91 	.word	0x08008f91
 800bc5c:	0800b9b7 	.word	0x0800b9b7
 800bc60:	0800d6b6 	.word	0x0800d6b6

0800bc64 <__sflush_r>:
 800bc64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	0716      	lsls	r6, r2, #28
 800bc6e:	4605      	mov	r5, r0
 800bc70:	460c      	mov	r4, r1
 800bc72:	d454      	bmi.n	800bd1e <__sflush_r+0xba>
 800bc74:	684b      	ldr	r3, [r1, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	dc02      	bgt.n	800bc80 <__sflush_r+0x1c>
 800bc7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd48      	ble.n	800bd12 <__sflush_r+0xae>
 800bc80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc82:	2e00      	cmp	r6, #0
 800bc84:	d045      	beq.n	800bd12 <__sflush_r+0xae>
 800bc86:	2300      	movs	r3, #0
 800bc88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc8c:	682f      	ldr	r7, [r5, #0]
 800bc8e:	6a21      	ldr	r1, [r4, #32]
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	d030      	beq.n	800bcf6 <__sflush_r+0x92>
 800bc94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	0759      	lsls	r1, r3, #29
 800bc9a:	d505      	bpl.n	800bca8 <__sflush_r+0x44>
 800bc9c:	6863      	ldr	r3, [r4, #4]
 800bc9e:	1ad2      	subs	r2, r2, r3
 800bca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bca2:	b10b      	cbz	r3, 800bca8 <__sflush_r+0x44>
 800bca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bca6:	1ad2      	subs	r2, r2, r3
 800bca8:	2300      	movs	r3, #0
 800bcaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcac:	6a21      	ldr	r1, [r4, #32]
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b0      	blx	r6
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	d106      	bne.n	800bcc6 <__sflush_r+0x62>
 800bcb8:	6829      	ldr	r1, [r5, #0]
 800bcba:	291d      	cmp	r1, #29
 800bcbc:	d82b      	bhi.n	800bd16 <__sflush_r+0xb2>
 800bcbe:	4a2a      	ldr	r2, [pc, #168]	@ (800bd68 <__sflush_r+0x104>)
 800bcc0:	410a      	asrs	r2, r1
 800bcc2:	07d6      	lsls	r6, r2, #31
 800bcc4:	d427      	bmi.n	800bd16 <__sflush_r+0xb2>
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	6062      	str	r2, [r4, #4]
 800bcca:	04d9      	lsls	r1, r3, #19
 800bccc:	6922      	ldr	r2, [r4, #16]
 800bcce:	6022      	str	r2, [r4, #0]
 800bcd0:	d504      	bpl.n	800bcdc <__sflush_r+0x78>
 800bcd2:	1c42      	adds	r2, r0, #1
 800bcd4:	d101      	bne.n	800bcda <__sflush_r+0x76>
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	b903      	cbnz	r3, 800bcdc <__sflush_r+0x78>
 800bcda:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcde:	602f      	str	r7, [r5, #0]
 800bce0:	b1b9      	cbz	r1, 800bd12 <__sflush_r+0xae>
 800bce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bce6:	4299      	cmp	r1, r3
 800bce8:	d002      	beq.n	800bcf0 <__sflush_r+0x8c>
 800bcea:	4628      	mov	r0, r5
 800bcec:	f7fe fd58 	bl	800a7a0 <_free_r>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcf4:	e00d      	b.n	800bd12 <__sflush_r+0xae>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b0      	blx	r6
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	1c50      	adds	r0, r2, #1
 800bd00:	d1c9      	bne.n	800bc96 <__sflush_r+0x32>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0c6      	beq.n	800bc96 <__sflush_r+0x32>
 800bd08:	2b1d      	cmp	r3, #29
 800bd0a:	d001      	beq.n	800bd10 <__sflush_r+0xac>
 800bd0c:	2b16      	cmp	r3, #22
 800bd0e:	d11e      	bne.n	800bd4e <__sflush_r+0xea>
 800bd10:	602f      	str	r7, [r5, #0]
 800bd12:	2000      	movs	r0, #0
 800bd14:	e022      	b.n	800bd5c <__sflush_r+0xf8>
 800bd16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd1a:	b21b      	sxth	r3, r3
 800bd1c:	e01b      	b.n	800bd56 <__sflush_r+0xf2>
 800bd1e:	690f      	ldr	r7, [r1, #16]
 800bd20:	2f00      	cmp	r7, #0
 800bd22:	d0f6      	beq.n	800bd12 <__sflush_r+0xae>
 800bd24:	0793      	lsls	r3, r2, #30
 800bd26:	680e      	ldr	r6, [r1, #0]
 800bd28:	bf08      	it	eq
 800bd2a:	694b      	ldreq	r3, [r1, #20]
 800bd2c:	600f      	str	r7, [r1, #0]
 800bd2e:	bf18      	it	ne
 800bd30:	2300      	movne	r3, #0
 800bd32:	eba6 0807 	sub.w	r8, r6, r7
 800bd36:	608b      	str	r3, [r1, #8]
 800bd38:	f1b8 0f00 	cmp.w	r8, #0
 800bd3c:	dde9      	ble.n	800bd12 <__sflush_r+0xae>
 800bd3e:	6a21      	ldr	r1, [r4, #32]
 800bd40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd42:	4643      	mov	r3, r8
 800bd44:	463a      	mov	r2, r7
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b0      	blx	r6
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	dc08      	bgt.n	800bd60 <__sflush_r+0xfc>
 800bd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd56:	81a3      	strh	r3, [r4, #12]
 800bd58:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd60:	4407      	add	r7, r0
 800bd62:	eba8 0800 	sub.w	r8, r8, r0
 800bd66:	e7e7      	b.n	800bd38 <__sflush_r+0xd4>
 800bd68:	dfbffffe 	.word	0xdfbffffe

0800bd6c <_fflush_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	690b      	ldr	r3, [r1, #16]
 800bd70:	4605      	mov	r5, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	b913      	cbnz	r3, 800bd7c <_fflush_r+0x10>
 800bd76:	2500      	movs	r5, #0
 800bd78:	4628      	mov	r0, r5
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	b118      	cbz	r0, 800bd86 <_fflush_r+0x1a>
 800bd7e:	6a03      	ldr	r3, [r0, #32]
 800bd80:	b90b      	cbnz	r3, 800bd86 <_fflush_r+0x1a>
 800bd82:	f7fd fd49 	bl	8009818 <__sinit>
 800bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d0f3      	beq.n	800bd76 <_fflush_r+0xa>
 800bd8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd90:	07d0      	lsls	r0, r2, #31
 800bd92:	d404      	bmi.n	800bd9e <_fflush_r+0x32>
 800bd94:	0599      	lsls	r1, r3, #22
 800bd96:	d402      	bmi.n	800bd9e <_fflush_r+0x32>
 800bd98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd9a:	f7fd fe9c 	bl	8009ad6 <__retarget_lock_acquire_recursive>
 800bd9e:	4628      	mov	r0, r5
 800bda0:	4621      	mov	r1, r4
 800bda2:	f7ff ff5f 	bl	800bc64 <__sflush_r>
 800bda6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bda8:	07da      	lsls	r2, r3, #31
 800bdaa:	4605      	mov	r5, r0
 800bdac:	d4e4      	bmi.n	800bd78 <_fflush_r+0xc>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	059b      	lsls	r3, r3, #22
 800bdb2:	d4e1      	bmi.n	800bd78 <_fflush_r+0xc>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdb6:	f7fd fe8f 	bl	8009ad8 <__retarget_lock_release_recursive>
 800bdba:	e7dd      	b.n	800bd78 <_fflush_r+0xc>

0800bdbc <memmove>:
 800bdbc:	4288      	cmp	r0, r1
 800bdbe:	b510      	push	{r4, lr}
 800bdc0:	eb01 0402 	add.w	r4, r1, r2
 800bdc4:	d902      	bls.n	800bdcc <memmove+0x10>
 800bdc6:	4284      	cmp	r4, r0
 800bdc8:	4623      	mov	r3, r4
 800bdca:	d807      	bhi.n	800bddc <memmove+0x20>
 800bdcc:	1e43      	subs	r3, r0, #1
 800bdce:	42a1      	cmp	r1, r4
 800bdd0:	d008      	beq.n	800bde4 <memmove+0x28>
 800bdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdda:	e7f8      	b.n	800bdce <memmove+0x12>
 800bddc:	4402      	add	r2, r0
 800bdde:	4601      	mov	r1, r0
 800bde0:	428a      	cmp	r2, r1
 800bde2:	d100      	bne.n	800bde6 <memmove+0x2a>
 800bde4:	bd10      	pop	{r4, pc}
 800bde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdee:	e7f7      	b.n	800bde0 <memmove+0x24>

0800bdf0 <_sbrk_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4d06      	ldr	r5, [pc, #24]	@ (800be0c <_sbrk_r+0x1c>)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	602b      	str	r3, [r5, #0]
 800bdfc:	f7f7 fa22 	bl	8003244 <_sbrk>
 800be00:	1c43      	adds	r3, r0, #1
 800be02:	d102      	bne.n	800be0a <_sbrk_r+0x1a>
 800be04:	682b      	ldr	r3, [r5, #0]
 800be06:	b103      	cbz	r3, 800be0a <_sbrk_r+0x1a>
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	bd38      	pop	{r3, r4, r5, pc}
 800be0c:	20000ef8 	.word	0x20000ef8

0800be10 <__assert_func>:
 800be10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be12:	4614      	mov	r4, r2
 800be14:	461a      	mov	r2, r3
 800be16:	4b09      	ldr	r3, [pc, #36]	@ (800be3c <__assert_func+0x2c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4605      	mov	r5, r0
 800be1c:	68d8      	ldr	r0, [r3, #12]
 800be1e:	b954      	cbnz	r4, 800be36 <__assert_func+0x26>
 800be20:	4b07      	ldr	r3, [pc, #28]	@ (800be40 <__assert_func+0x30>)
 800be22:	461c      	mov	r4, r3
 800be24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be28:	9100      	str	r1, [sp, #0]
 800be2a:	462b      	mov	r3, r5
 800be2c:	4905      	ldr	r1, [pc, #20]	@ (800be44 <__assert_func+0x34>)
 800be2e:	f000 f84f 	bl	800bed0 <fiprintf>
 800be32:	f000 f85f 	bl	800bef4 <abort>
 800be36:	4b04      	ldr	r3, [pc, #16]	@ (800be48 <__assert_func+0x38>)
 800be38:	e7f4      	b.n	800be24 <__assert_func+0x14>
 800be3a:	bf00      	nop
 800be3c:	20000230 	.word	0x20000230
 800be40:	0800d6fc 	.word	0x0800d6fc
 800be44:	0800d6ce 	.word	0x0800d6ce
 800be48:	0800d6c1 	.word	0x0800d6c1

0800be4c <_calloc_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	fba1 5402 	umull	r5, r4, r1, r2
 800be52:	b93c      	cbnz	r4, 800be64 <_calloc_r+0x18>
 800be54:	4629      	mov	r1, r5
 800be56:	f7ff f851 	bl	800aefc <_malloc_r>
 800be5a:	4606      	mov	r6, r0
 800be5c:	b928      	cbnz	r0, 800be6a <_calloc_r+0x1e>
 800be5e:	2600      	movs	r6, #0
 800be60:	4630      	mov	r0, r6
 800be62:	bd70      	pop	{r4, r5, r6, pc}
 800be64:	220c      	movs	r2, #12
 800be66:	6002      	str	r2, [r0, #0]
 800be68:	e7f9      	b.n	800be5e <_calloc_r+0x12>
 800be6a:	462a      	mov	r2, r5
 800be6c:	4621      	mov	r1, r4
 800be6e:	f7fd fd80 	bl	8009972 <memset>
 800be72:	e7f5      	b.n	800be60 <_calloc_r+0x14>

0800be74 <_realloc_r>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	4680      	mov	r8, r0
 800be7a:	4615      	mov	r5, r2
 800be7c:	460c      	mov	r4, r1
 800be7e:	b921      	cbnz	r1, 800be8a <_realloc_r+0x16>
 800be80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	4611      	mov	r1, r2
 800be86:	f7ff b839 	b.w	800aefc <_malloc_r>
 800be8a:	b92a      	cbnz	r2, 800be98 <_realloc_r+0x24>
 800be8c:	f7fe fc88 	bl	800a7a0 <_free_r>
 800be90:	2400      	movs	r4, #0
 800be92:	4620      	mov	r0, r4
 800be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be98:	f000 f833 	bl	800bf02 <_malloc_usable_size_r>
 800be9c:	4285      	cmp	r5, r0
 800be9e:	4606      	mov	r6, r0
 800bea0:	d802      	bhi.n	800bea8 <_realloc_r+0x34>
 800bea2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bea6:	d8f4      	bhi.n	800be92 <_realloc_r+0x1e>
 800bea8:	4629      	mov	r1, r5
 800beaa:	4640      	mov	r0, r8
 800beac:	f7ff f826 	bl	800aefc <_malloc_r>
 800beb0:	4607      	mov	r7, r0
 800beb2:	2800      	cmp	r0, #0
 800beb4:	d0ec      	beq.n	800be90 <_realloc_r+0x1c>
 800beb6:	42b5      	cmp	r5, r6
 800beb8:	462a      	mov	r2, r5
 800beba:	4621      	mov	r1, r4
 800bebc:	bf28      	it	cs
 800bebe:	4632      	movcs	r2, r6
 800bec0:	f7fd fe0b 	bl	8009ada <memcpy>
 800bec4:	4621      	mov	r1, r4
 800bec6:	4640      	mov	r0, r8
 800bec8:	f7fe fc6a 	bl	800a7a0 <_free_r>
 800becc:	463c      	mov	r4, r7
 800bece:	e7e0      	b.n	800be92 <_realloc_r+0x1e>

0800bed0 <fiprintf>:
 800bed0:	b40e      	push	{r1, r2, r3}
 800bed2:	b503      	push	{r0, r1, lr}
 800bed4:	4601      	mov	r1, r0
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	4805      	ldr	r0, [pc, #20]	@ (800bef0 <fiprintf+0x20>)
 800beda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bede:	6800      	ldr	r0, [r0, #0]
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	f000 f83f 	bl	800bf64 <_vfiprintf_r>
 800bee6:	b002      	add	sp, #8
 800bee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800beec:	b003      	add	sp, #12
 800beee:	4770      	bx	lr
 800bef0:	20000230 	.word	0x20000230

0800bef4 <abort>:
 800bef4:	b508      	push	{r3, lr}
 800bef6:	2006      	movs	r0, #6
 800bef8:	f000 fa08 	bl	800c30c <raise>
 800befc:	2001      	movs	r0, #1
 800befe:	f7f7 f928 	bl	8003152 <_exit>

0800bf02 <_malloc_usable_size_r>:
 800bf02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf06:	1f18      	subs	r0, r3, #4
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfbc      	itt	lt
 800bf0c:	580b      	ldrlt	r3, [r1, r0]
 800bf0e:	18c0      	addlt	r0, r0, r3
 800bf10:	4770      	bx	lr

0800bf12 <__sfputc_r>:
 800bf12:	6893      	ldr	r3, [r2, #8]
 800bf14:	3b01      	subs	r3, #1
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	b410      	push	{r4}
 800bf1a:	6093      	str	r3, [r2, #8]
 800bf1c:	da08      	bge.n	800bf30 <__sfputc_r+0x1e>
 800bf1e:	6994      	ldr	r4, [r2, #24]
 800bf20:	42a3      	cmp	r3, r4
 800bf22:	db01      	blt.n	800bf28 <__sfputc_r+0x16>
 800bf24:	290a      	cmp	r1, #10
 800bf26:	d103      	bne.n	800bf30 <__sfputc_r+0x1e>
 800bf28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf2c:	f000 b932 	b.w	800c194 <__swbuf_r>
 800bf30:	6813      	ldr	r3, [r2, #0]
 800bf32:	1c58      	adds	r0, r3, #1
 800bf34:	6010      	str	r0, [r2, #0]
 800bf36:	7019      	strb	r1, [r3, #0]
 800bf38:	4608      	mov	r0, r1
 800bf3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <__sfputs_r>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	4606      	mov	r6, r0
 800bf44:	460f      	mov	r7, r1
 800bf46:	4614      	mov	r4, r2
 800bf48:	18d5      	adds	r5, r2, r3
 800bf4a:	42ac      	cmp	r4, r5
 800bf4c:	d101      	bne.n	800bf52 <__sfputs_r+0x12>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e007      	b.n	800bf62 <__sfputs_r+0x22>
 800bf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf56:	463a      	mov	r2, r7
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7ff ffda 	bl	800bf12 <__sfputc_r>
 800bf5e:	1c43      	adds	r3, r0, #1
 800bf60:	d1f3      	bne.n	800bf4a <__sfputs_r+0xa>
 800bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf64 <_vfiprintf_r>:
 800bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf68:	460d      	mov	r5, r1
 800bf6a:	b09d      	sub	sp, #116	@ 0x74
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	4698      	mov	r8, r3
 800bf70:	4606      	mov	r6, r0
 800bf72:	b118      	cbz	r0, 800bf7c <_vfiprintf_r+0x18>
 800bf74:	6a03      	ldr	r3, [r0, #32]
 800bf76:	b90b      	cbnz	r3, 800bf7c <_vfiprintf_r+0x18>
 800bf78:	f7fd fc4e 	bl	8009818 <__sinit>
 800bf7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf7e:	07d9      	lsls	r1, r3, #31
 800bf80:	d405      	bmi.n	800bf8e <_vfiprintf_r+0x2a>
 800bf82:	89ab      	ldrh	r3, [r5, #12]
 800bf84:	059a      	lsls	r2, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_vfiprintf_r+0x2a>
 800bf88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf8a:	f7fd fda4 	bl	8009ad6 <__retarget_lock_acquire_recursive>
 800bf8e:	89ab      	ldrh	r3, [r5, #12]
 800bf90:	071b      	lsls	r3, r3, #28
 800bf92:	d501      	bpl.n	800bf98 <_vfiprintf_r+0x34>
 800bf94:	692b      	ldr	r3, [r5, #16]
 800bf96:	b99b      	cbnz	r3, 800bfc0 <_vfiprintf_r+0x5c>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f000 f938 	bl	800c210 <__swsetup_r>
 800bfa0:	b170      	cbz	r0, 800bfc0 <_vfiprintf_r+0x5c>
 800bfa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfa4:	07dc      	lsls	r4, r3, #31
 800bfa6:	d504      	bpl.n	800bfb2 <_vfiprintf_r+0x4e>
 800bfa8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfac:	b01d      	add	sp, #116	@ 0x74
 800bfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb2:	89ab      	ldrh	r3, [r5, #12]
 800bfb4:	0598      	lsls	r0, r3, #22
 800bfb6:	d4f7      	bmi.n	800bfa8 <_vfiprintf_r+0x44>
 800bfb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfba:	f7fd fd8d 	bl	8009ad8 <__retarget_lock_release_recursive>
 800bfbe:	e7f3      	b.n	800bfa8 <_vfiprintf_r+0x44>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfc4:	2320      	movs	r3, #32
 800bfc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfce:	2330      	movs	r3, #48	@ 0x30
 800bfd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c180 <_vfiprintf_r+0x21c>
 800bfd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfd8:	f04f 0901 	mov.w	r9, #1
 800bfdc:	4623      	mov	r3, r4
 800bfde:	469a      	mov	sl, r3
 800bfe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfe4:	b10a      	cbz	r2, 800bfea <_vfiprintf_r+0x86>
 800bfe6:	2a25      	cmp	r2, #37	@ 0x25
 800bfe8:	d1f9      	bne.n	800bfde <_vfiprintf_r+0x7a>
 800bfea:	ebba 0b04 	subs.w	fp, sl, r4
 800bfee:	d00b      	beq.n	800c008 <_vfiprintf_r+0xa4>
 800bff0:	465b      	mov	r3, fp
 800bff2:	4622      	mov	r2, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	4630      	mov	r0, r6
 800bff8:	f7ff ffa2 	bl	800bf40 <__sfputs_r>
 800bffc:	3001      	adds	r0, #1
 800bffe:	f000 80a7 	beq.w	800c150 <_vfiprintf_r+0x1ec>
 800c002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c004:	445a      	add	r2, fp
 800c006:	9209      	str	r2, [sp, #36]	@ 0x24
 800c008:	f89a 3000 	ldrb.w	r3, [sl]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 809f 	beq.w	800c150 <_vfiprintf_r+0x1ec>
 800c012:	2300      	movs	r3, #0
 800c014:	f04f 32ff 	mov.w	r2, #4294967295
 800c018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c01c:	f10a 0a01 	add.w	sl, sl, #1
 800c020:	9304      	str	r3, [sp, #16]
 800c022:	9307      	str	r3, [sp, #28]
 800c024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c028:	931a      	str	r3, [sp, #104]	@ 0x68
 800c02a:	4654      	mov	r4, sl
 800c02c:	2205      	movs	r2, #5
 800c02e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c032:	4853      	ldr	r0, [pc, #332]	@ (800c180 <_vfiprintf_r+0x21c>)
 800c034:	f7f4 f8ec 	bl	8000210 <memchr>
 800c038:	9a04      	ldr	r2, [sp, #16]
 800c03a:	b9d8      	cbnz	r0, 800c074 <_vfiprintf_r+0x110>
 800c03c:	06d1      	lsls	r1, r2, #27
 800c03e:	bf44      	itt	mi
 800c040:	2320      	movmi	r3, #32
 800c042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c046:	0713      	lsls	r3, r2, #28
 800c048:	bf44      	itt	mi
 800c04a:	232b      	movmi	r3, #43	@ 0x2b
 800c04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c050:	f89a 3000 	ldrb.w	r3, [sl]
 800c054:	2b2a      	cmp	r3, #42	@ 0x2a
 800c056:	d015      	beq.n	800c084 <_vfiprintf_r+0x120>
 800c058:	9a07      	ldr	r2, [sp, #28]
 800c05a:	4654      	mov	r4, sl
 800c05c:	2000      	movs	r0, #0
 800c05e:	f04f 0c0a 	mov.w	ip, #10
 800c062:	4621      	mov	r1, r4
 800c064:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c068:	3b30      	subs	r3, #48	@ 0x30
 800c06a:	2b09      	cmp	r3, #9
 800c06c:	d94b      	bls.n	800c106 <_vfiprintf_r+0x1a2>
 800c06e:	b1b0      	cbz	r0, 800c09e <_vfiprintf_r+0x13a>
 800c070:	9207      	str	r2, [sp, #28]
 800c072:	e014      	b.n	800c09e <_vfiprintf_r+0x13a>
 800c074:	eba0 0308 	sub.w	r3, r0, r8
 800c078:	fa09 f303 	lsl.w	r3, r9, r3
 800c07c:	4313      	orrs	r3, r2
 800c07e:	9304      	str	r3, [sp, #16]
 800c080:	46a2      	mov	sl, r4
 800c082:	e7d2      	b.n	800c02a <_vfiprintf_r+0xc6>
 800c084:	9b03      	ldr	r3, [sp, #12]
 800c086:	1d19      	adds	r1, r3, #4
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	9103      	str	r1, [sp, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfbb      	ittet	lt
 800c090:	425b      	neglt	r3, r3
 800c092:	f042 0202 	orrlt.w	r2, r2, #2
 800c096:	9307      	strge	r3, [sp, #28]
 800c098:	9307      	strlt	r3, [sp, #28]
 800c09a:	bfb8      	it	lt
 800c09c:	9204      	strlt	r2, [sp, #16]
 800c09e:	7823      	ldrb	r3, [r4, #0]
 800c0a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0a2:	d10a      	bne.n	800c0ba <_vfiprintf_r+0x156>
 800c0a4:	7863      	ldrb	r3, [r4, #1]
 800c0a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0a8:	d132      	bne.n	800c110 <_vfiprintf_r+0x1ac>
 800c0aa:	9b03      	ldr	r3, [sp, #12]
 800c0ac:	1d1a      	adds	r2, r3, #4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	9203      	str	r2, [sp, #12]
 800c0b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0b6:	3402      	adds	r4, #2
 800c0b8:	9305      	str	r3, [sp, #20]
 800c0ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c190 <_vfiprintf_r+0x22c>
 800c0be:	7821      	ldrb	r1, [r4, #0]
 800c0c0:	2203      	movs	r2, #3
 800c0c2:	4650      	mov	r0, sl
 800c0c4:	f7f4 f8a4 	bl	8000210 <memchr>
 800c0c8:	b138      	cbz	r0, 800c0da <_vfiprintf_r+0x176>
 800c0ca:	9b04      	ldr	r3, [sp, #16]
 800c0cc:	eba0 000a 	sub.w	r0, r0, sl
 800c0d0:	2240      	movs	r2, #64	@ 0x40
 800c0d2:	4082      	lsls	r2, r0
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	3401      	adds	r4, #1
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0de:	4829      	ldr	r0, [pc, #164]	@ (800c184 <_vfiprintf_r+0x220>)
 800c0e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0e4:	2206      	movs	r2, #6
 800c0e6:	f7f4 f893 	bl	8000210 <memchr>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d03f      	beq.n	800c16e <_vfiprintf_r+0x20a>
 800c0ee:	4b26      	ldr	r3, [pc, #152]	@ (800c188 <_vfiprintf_r+0x224>)
 800c0f0:	bb1b      	cbnz	r3, 800c13a <_vfiprintf_r+0x1d6>
 800c0f2:	9b03      	ldr	r3, [sp, #12]
 800c0f4:	3307      	adds	r3, #7
 800c0f6:	f023 0307 	bic.w	r3, r3, #7
 800c0fa:	3308      	adds	r3, #8
 800c0fc:	9303      	str	r3, [sp, #12]
 800c0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c100:	443b      	add	r3, r7
 800c102:	9309      	str	r3, [sp, #36]	@ 0x24
 800c104:	e76a      	b.n	800bfdc <_vfiprintf_r+0x78>
 800c106:	fb0c 3202 	mla	r2, ip, r2, r3
 800c10a:	460c      	mov	r4, r1
 800c10c:	2001      	movs	r0, #1
 800c10e:	e7a8      	b.n	800c062 <_vfiprintf_r+0xfe>
 800c110:	2300      	movs	r3, #0
 800c112:	3401      	adds	r4, #1
 800c114:	9305      	str	r3, [sp, #20]
 800c116:	4619      	mov	r1, r3
 800c118:	f04f 0c0a 	mov.w	ip, #10
 800c11c:	4620      	mov	r0, r4
 800c11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c122:	3a30      	subs	r2, #48	@ 0x30
 800c124:	2a09      	cmp	r2, #9
 800c126:	d903      	bls.n	800c130 <_vfiprintf_r+0x1cc>
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0c6      	beq.n	800c0ba <_vfiprintf_r+0x156>
 800c12c:	9105      	str	r1, [sp, #20]
 800c12e:	e7c4      	b.n	800c0ba <_vfiprintf_r+0x156>
 800c130:	fb0c 2101 	mla	r1, ip, r1, r2
 800c134:	4604      	mov	r4, r0
 800c136:	2301      	movs	r3, #1
 800c138:	e7f0      	b.n	800c11c <_vfiprintf_r+0x1b8>
 800c13a:	ab03      	add	r3, sp, #12
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	462a      	mov	r2, r5
 800c140:	4b12      	ldr	r3, [pc, #72]	@ (800c18c <_vfiprintf_r+0x228>)
 800c142:	a904      	add	r1, sp, #16
 800c144:	4630      	mov	r0, r6
 800c146:	f7fc ff23 	bl	8008f90 <_printf_float>
 800c14a:	4607      	mov	r7, r0
 800c14c:	1c78      	adds	r0, r7, #1
 800c14e:	d1d6      	bne.n	800c0fe <_vfiprintf_r+0x19a>
 800c150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c152:	07d9      	lsls	r1, r3, #31
 800c154:	d405      	bmi.n	800c162 <_vfiprintf_r+0x1fe>
 800c156:	89ab      	ldrh	r3, [r5, #12]
 800c158:	059a      	lsls	r2, r3, #22
 800c15a:	d402      	bmi.n	800c162 <_vfiprintf_r+0x1fe>
 800c15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c15e:	f7fd fcbb 	bl	8009ad8 <__retarget_lock_release_recursive>
 800c162:	89ab      	ldrh	r3, [r5, #12]
 800c164:	065b      	lsls	r3, r3, #25
 800c166:	f53f af1f 	bmi.w	800bfa8 <_vfiprintf_r+0x44>
 800c16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c16c:	e71e      	b.n	800bfac <_vfiprintf_r+0x48>
 800c16e:	ab03      	add	r3, sp, #12
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	462a      	mov	r2, r5
 800c174:	4b05      	ldr	r3, [pc, #20]	@ (800c18c <_vfiprintf_r+0x228>)
 800c176:	a904      	add	r1, sp, #16
 800c178:	4630      	mov	r0, r6
 800c17a:	f7fd f9a1 	bl	80094c0 <_printf_i>
 800c17e:	e7e4      	b.n	800c14a <_vfiprintf_r+0x1e6>
 800c180:	0800d6b0 	.word	0x0800d6b0
 800c184:	0800d6ba 	.word	0x0800d6ba
 800c188:	08008f91 	.word	0x08008f91
 800c18c:	0800bf41 	.word	0x0800bf41
 800c190:	0800d6b6 	.word	0x0800d6b6

0800c194 <__swbuf_r>:
 800c194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c196:	460e      	mov	r6, r1
 800c198:	4614      	mov	r4, r2
 800c19a:	4605      	mov	r5, r0
 800c19c:	b118      	cbz	r0, 800c1a6 <__swbuf_r+0x12>
 800c19e:	6a03      	ldr	r3, [r0, #32]
 800c1a0:	b90b      	cbnz	r3, 800c1a6 <__swbuf_r+0x12>
 800c1a2:	f7fd fb39 	bl	8009818 <__sinit>
 800c1a6:	69a3      	ldr	r3, [r4, #24]
 800c1a8:	60a3      	str	r3, [r4, #8]
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	071a      	lsls	r2, r3, #28
 800c1ae:	d501      	bpl.n	800c1b4 <__swbuf_r+0x20>
 800c1b0:	6923      	ldr	r3, [r4, #16]
 800c1b2:	b943      	cbnz	r3, 800c1c6 <__swbuf_r+0x32>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 f82a 	bl	800c210 <__swsetup_r>
 800c1bc:	b118      	cbz	r0, 800c1c6 <__swbuf_r+0x32>
 800c1be:	f04f 37ff 	mov.w	r7, #4294967295
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	6922      	ldr	r2, [r4, #16]
 800c1ca:	1a98      	subs	r0, r3, r2
 800c1cc:	6963      	ldr	r3, [r4, #20]
 800c1ce:	b2f6      	uxtb	r6, r6
 800c1d0:	4283      	cmp	r3, r0
 800c1d2:	4637      	mov	r7, r6
 800c1d4:	dc05      	bgt.n	800c1e2 <__swbuf_r+0x4e>
 800c1d6:	4621      	mov	r1, r4
 800c1d8:	4628      	mov	r0, r5
 800c1da:	f7ff fdc7 	bl	800bd6c <_fflush_r>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	d1ed      	bne.n	800c1be <__swbuf_r+0x2a>
 800c1e2:	68a3      	ldr	r3, [r4, #8]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	60a3      	str	r3, [r4, #8]
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	6022      	str	r2, [r4, #0]
 800c1ee:	701e      	strb	r6, [r3, #0]
 800c1f0:	6962      	ldr	r2, [r4, #20]
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d004      	beq.n	800c202 <__swbuf_r+0x6e>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	07db      	lsls	r3, r3, #31
 800c1fc:	d5e1      	bpl.n	800c1c2 <__swbuf_r+0x2e>
 800c1fe:	2e0a      	cmp	r6, #10
 800c200:	d1df      	bne.n	800c1c2 <__swbuf_r+0x2e>
 800c202:	4621      	mov	r1, r4
 800c204:	4628      	mov	r0, r5
 800c206:	f7ff fdb1 	bl	800bd6c <_fflush_r>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0d9      	beq.n	800c1c2 <__swbuf_r+0x2e>
 800c20e:	e7d6      	b.n	800c1be <__swbuf_r+0x2a>

0800c210 <__swsetup_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4b29      	ldr	r3, [pc, #164]	@ (800c2b8 <__swsetup_r+0xa8>)
 800c214:	4605      	mov	r5, r0
 800c216:	6818      	ldr	r0, [r3, #0]
 800c218:	460c      	mov	r4, r1
 800c21a:	b118      	cbz	r0, 800c224 <__swsetup_r+0x14>
 800c21c:	6a03      	ldr	r3, [r0, #32]
 800c21e:	b90b      	cbnz	r3, 800c224 <__swsetup_r+0x14>
 800c220:	f7fd fafa 	bl	8009818 <__sinit>
 800c224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c228:	0719      	lsls	r1, r3, #28
 800c22a:	d422      	bmi.n	800c272 <__swsetup_r+0x62>
 800c22c:	06da      	lsls	r2, r3, #27
 800c22e:	d407      	bmi.n	800c240 <__swsetup_r+0x30>
 800c230:	2209      	movs	r2, #9
 800c232:	602a      	str	r2, [r5, #0]
 800c234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c238:	81a3      	strh	r3, [r4, #12]
 800c23a:	f04f 30ff 	mov.w	r0, #4294967295
 800c23e:	e033      	b.n	800c2a8 <__swsetup_r+0x98>
 800c240:	0758      	lsls	r0, r3, #29
 800c242:	d512      	bpl.n	800c26a <__swsetup_r+0x5a>
 800c244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c246:	b141      	cbz	r1, 800c25a <__swsetup_r+0x4a>
 800c248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c24c:	4299      	cmp	r1, r3
 800c24e:	d002      	beq.n	800c256 <__swsetup_r+0x46>
 800c250:	4628      	mov	r0, r5
 800c252:	f7fe faa5 	bl	800a7a0 <_free_r>
 800c256:	2300      	movs	r3, #0
 800c258:	6363      	str	r3, [r4, #52]	@ 0x34
 800c25a:	89a3      	ldrh	r3, [r4, #12]
 800c25c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c260:	81a3      	strh	r3, [r4, #12]
 800c262:	2300      	movs	r3, #0
 800c264:	6063      	str	r3, [r4, #4]
 800c266:	6923      	ldr	r3, [r4, #16]
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	89a3      	ldrh	r3, [r4, #12]
 800c26c:	f043 0308 	orr.w	r3, r3, #8
 800c270:	81a3      	strh	r3, [r4, #12]
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	b94b      	cbnz	r3, 800c28a <__swsetup_r+0x7a>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c27c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c280:	d003      	beq.n	800c28a <__swsetup_r+0x7a>
 800c282:	4621      	mov	r1, r4
 800c284:	4628      	mov	r0, r5
 800c286:	f000 f883 	bl	800c390 <__smakebuf_r>
 800c28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28e:	f013 0201 	ands.w	r2, r3, #1
 800c292:	d00a      	beq.n	800c2aa <__swsetup_r+0x9a>
 800c294:	2200      	movs	r2, #0
 800c296:	60a2      	str	r2, [r4, #8]
 800c298:	6962      	ldr	r2, [r4, #20]
 800c29a:	4252      	negs	r2, r2
 800c29c:	61a2      	str	r2, [r4, #24]
 800c29e:	6922      	ldr	r2, [r4, #16]
 800c2a0:	b942      	cbnz	r2, 800c2b4 <__swsetup_r+0xa4>
 800c2a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2a6:	d1c5      	bne.n	800c234 <__swsetup_r+0x24>
 800c2a8:	bd38      	pop	{r3, r4, r5, pc}
 800c2aa:	0799      	lsls	r1, r3, #30
 800c2ac:	bf58      	it	pl
 800c2ae:	6962      	ldrpl	r2, [r4, #20]
 800c2b0:	60a2      	str	r2, [r4, #8]
 800c2b2:	e7f4      	b.n	800c29e <__swsetup_r+0x8e>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e7f7      	b.n	800c2a8 <__swsetup_r+0x98>
 800c2b8:	20000230 	.word	0x20000230

0800c2bc <_raise_r>:
 800c2bc:	291f      	cmp	r1, #31
 800c2be:	b538      	push	{r3, r4, r5, lr}
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	d904      	bls.n	800c2d0 <_raise_r+0x14>
 800c2c6:	2316      	movs	r3, #22
 800c2c8:	6003      	str	r3, [r0, #0]
 800c2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ce:	bd38      	pop	{r3, r4, r5, pc}
 800c2d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2d2:	b112      	cbz	r2, 800c2da <_raise_r+0x1e>
 800c2d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2d8:	b94b      	cbnz	r3, 800c2ee <_raise_r+0x32>
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f830 	bl	800c340 <_getpid_r>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4601      	mov	r1, r0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ea:	f000 b817 	b.w	800c31c <_kill_r>
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d00a      	beq.n	800c308 <_raise_r+0x4c>
 800c2f2:	1c59      	adds	r1, r3, #1
 800c2f4:	d103      	bne.n	800c2fe <_raise_r+0x42>
 800c2f6:	2316      	movs	r3, #22
 800c2f8:	6003      	str	r3, [r0, #0]
 800c2fa:	2001      	movs	r0, #1
 800c2fc:	e7e7      	b.n	800c2ce <_raise_r+0x12>
 800c2fe:	2100      	movs	r1, #0
 800c300:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c304:	4620      	mov	r0, r4
 800c306:	4798      	blx	r3
 800c308:	2000      	movs	r0, #0
 800c30a:	e7e0      	b.n	800c2ce <_raise_r+0x12>

0800c30c <raise>:
 800c30c:	4b02      	ldr	r3, [pc, #8]	@ (800c318 <raise+0xc>)
 800c30e:	4601      	mov	r1, r0
 800c310:	6818      	ldr	r0, [r3, #0]
 800c312:	f7ff bfd3 	b.w	800c2bc <_raise_r>
 800c316:	bf00      	nop
 800c318:	20000230 	.word	0x20000230

0800c31c <_kill_r>:
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4d07      	ldr	r5, [pc, #28]	@ (800c33c <_kill_r+0x20>)
 800c320:	2300      	movs	r3, #0
 800c322:	4604      	mov	r4, r0
 800c324:	4608      	mov	r0, r1
 800c326:	4611      	mov	r1, r2
 800c328:	602b      	str	r3, [r5, #0]
 800c32a:	f7f6 ff02 	bl	8003132 <_kill>
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	d102      	bne.n	800c338 <_kill_r+0x1c>
 800c332:	682b      	ldr	r3, [r5, #0]
 800c334:	b103      	cbz	r3, 800c338 <_kill_r+0x1c>
 800c336:	6023      	str	r3, [r4, #0]
 800c338:	bd38      	pop	{r3, r4, r5, pc}
 800c33a:	bf00      	nop
 800c33c:	20000ef8 	.word	0x20000ef8

0800c340 <_getpid_r>:
 800c340:	f7f6 beef 	b.w	8003122 <_getpid>

0800c344 <__swhatbuf_r>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	460c      	mov	r4, r1
 800c348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c34c:	2900      	cmp	r1, #0
 800c34e:	b096      	sub	sp, #88	@ 0x58
 800c350:	4615      	mov	r5, r2
 800c352:	461e      	mov	r6, r3
 800c354:	da0d      	bge.n	800c372 <__swhatbuf_r+0x2e>
 800c356:	89a3      	ldrh	r3, [r4, #12]
 800c358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c35c:	f04f 0100 	mov.w	r1, #0
 800c360:	bf14      	ite	ne
 800c362:	2340      	movne	r3, #64	@ 0x40
 800c364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c368:	2000      	movs	r0, #0
 800c36a:	6031      	str	r1, [r6, #0]
 800c36c:	602b      	str	r3, [r5, #0]
 800c36e:	b016      	add	sp, #88	@ 0x58
 800c370:	bd70      	pop	{r4, r5, r6, pc}
 800c372:	466a      	mov	r2, sp
 800c374:	f000 f848 	bl	800c408 <_fstat_r>
 800c378:	2800      	cmp	r0, #0
 800c37a:	dbec      	blt.n	800c356 <__swhatbuf_r+0x12>
 800c37c:	9901      	ldr	r1, [sp, #4]
 800c37e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c386:	4259      	negs	r1, r3
 800c388:	4159      	adcs	r1, r3
 800c38a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c38e:	e7eb      	b.n	800c368 <__swhatbuf_r+0x24>

0800c390 <__smakebuf_r>:
 800c390:	898b      	ldrh	r3, [r1, #12]
 800c392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c394:	079d      	lsls	r5, r3, #30
 800c396:	4606      	mov	r6, r0
 800c398:	460c      	mov	r4, r1
 800c39a:	d507      	bpl.n	800c3ac <__smakebuf_r+0x1c>
 800c39c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	6123      	str	r3, [r4, #16]
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	6163      	str	r3, [r4, #20]
 800c3a8:	b003      	add	sp, #12
 800c3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ac:	ab01      	add	r3, sp, #4
 800c3ae:	466a      	mov	r2, sp
 800c3b0:	f7ff ffc8 	bl	800c344 <__swhatbuf_r>
 800c3b4:	9f00      	ldr	r7, [sp, #0]
 800c3b6:	4605      	mov	r5, r0
 800c3b8:	4639      	mov	r1, r7
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	f7fe fd9e 	bl	800aefc <_malloc_r>
 800c3c0:	b948      	cbnz	r0, 800c3d6 <__smakebuf_r+0x46>
 800c3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c6:	059a      	lsls	r2, r3, #22
 800c3c8:	d4ee      	bmi.n	800c3a8 <__smakebuf_r+0x18>
 800c3ca:	f023 0303 	bic.w	r3, r3, #3
 800c3ce:	f043 0302 	orr.w	r3, r3, #2
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	e7e2      	b.n	800c39c <__smakebuf_r+0xc>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	6020      	str	r0, [r4, #0]
 800c3da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	9b01      	ldr	r3, [sp, #4]
 800c3e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3e6:	b15b      	cbz	r3, 800c400 <__smakebuf_r+0x70>
 800c3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f000 f81d 	bl	800c42c <_isatty_r>
 800c3f2:	b128      	cbz	r0, 800c400 <__smakebuf_r+0x70>
 800c3f4:	89a3      	ldrh	r3, [r4, #12]
 800c3f6:	f023 0303 	bic.w	r3, r3, #3
 800c3fa:	f043 0301 	orr.w	r3, r3, #1
 800c3fe:	81a3      	strh	r3, [r4, #12]
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	431d      	orrs	r5, r3
 800c404:	81a5      	strh	r5, [r4, #12]
 800c406:	e7cf      	b.n	800c3a8 <__smakebuf_r+0x18>

0800c408 <_fstat_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	@ (800c428 <_fstat_r+0x20>)
 800c40c:	2300      	movs	r3, #0
 800c40e:	4604      	mov	r4, r0
 800c410:	4608      	mov	r0, r1
 800c412:	4611      	mov	r1, r2
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f7f6 feec 	bl	80031f2 <_fstat>
 800c41a:	1c43      	adds	r3, r0, #1
 800c41c:	d102      	bne.n	800c424 <_fstat_r+0x1c>
 800c41e:	682b      	ldr	r3, [r5, #0]
 800c420:	b103      	cbz	r3, 800c424 <_fstat_r+0x1c>
 800c422:	6023      	str	r3, [r4, #0]
 800c424:	bd38      	pop	{r3, r4, r5, pc}
 800c426:	bf00      	nop
 800c428:	20000ef8 	.word	0x20000ef8

0800c42c <_isatty_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	4d06      	ldr	r5, [pc, #24]	@ (800c448 <_isatty_r+0x1c>)
 800c430:	2300      	movs	r3, #0
 800c432:	4604      	mov	r4, r0
 800c434:	4608      	mov	r0, r1
 800c436:	602b      	str	r3, [r5, #0]
 800c438:	f7f6 feeb 	bl	8003212 <_isatty>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_isatty_r+0x1a>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	b103      	cbz	r3, 800c446 <_isatty_r+0x1a>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	20000ef8 	.word	0x20000ef8

0800c44c <atan2>:
 800c44c:	f000 b864 	b.w	800c518 <__ieee754_atan2>

0800c450 <powf>:
 800c450:	b508      	push	{r3, lr}
 800c452:	ed2d 8b04 	vpush	{d8-d9}
 800c456:	eeb0 8a60 	vmov.f32	s16, s1
 800c45a:	eeb0 9a40 	vmov.f32	s18, s0
 800c45e:	f000 fac3 	bl	800c9e8 <__ieee754_powf>
 800c462:	eeb4 8a48 	vcmp.f32	s16, s16
 800c466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c46a:	eef0 8a40 	vmov.f32	s17, s0
 800c46e:	d63e      	bvs.n	800c4ee <powf+0x9e>
 800c470:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c478:	d112      	bne.n	800c4a0 <powf+0x50>
 800c47a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c482:	d039      	beq.n	800c4f8 <powf+0xa8>
 800c484:	eeb0 0a48 	vmov.f32	s0, s16
 800c488:	f000 f839 	bl	800c4fe <finitef>
 800c48c:	b378      	cbz	r0, 800c4ee <powf+0x9e>
 800c48e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c496:	d52a      	bpl.n	800c4ee <powf+0x9e>
 800c498:	f7fd faf2 	bl	8009a80 <__errno>
 800c49c:	2322      	movs	r3, #34	@ 0x22
 800c49e:	e014      	b.n	800c4ca <powf+0x7a>
 800c4a0:	f000 f82d 	bl	800c4fe <finitef>
 800c4a4:	b998      	cbnz	r0, 800c4ce <powf+0x7e>
 800c4a6:	eeb0 0a49 	vmov.f32	s0, s18
 800c4aa:	f000 f828 	bl	800c4fe <finitef>
 800c4ae:	b170      	cbz	r0, 800c4ce <powf+0x7e>
 800c4b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c4b4:	f000 f823 	bl	800c4fe <finitef>
 800c4b8:	b148      	cbz	r0, 800c4ce <powf+0x7e>
 800c4ba:	eef4 8a68 	vcmp.f32	s17, s17
 800c4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c2:	d7e9      	bvc.n	800c498 <powf+0x48>
 800c4c4:	f7fd fadc 	bl	8009a80 <__errno>
 800c4c8:	2321      	movs	r3, #33	@ 0x21
 800c4ca:	6003      	str	r3, [r0, #0]
 800c4cc:	e00f      	b.n	800c4ee <powf+0x9e>
 800c4ce:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d6:	d10a      	bne.n	800c4ee <powf+0x9e>
 800c4d8:	eeb0 0a49 	vmov.f32	s0, s18
 800c4dc:	f000 f80f 	bl	800c4fe <finitef>
 800c4e0:	b128      	cbz	r0, 800c4ee <powf+0x9e>
 800c4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800c4e6:	f000 f80a 	bl	800c4fe <finitef>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d1d4      	bne.n	800c498 <powf+0x48>
 800c4ee:	eeb0 0a68 	vmov.f32	s0, s17
 800c4f2:	ecbd 8b04 	vpop	{d8-d9}
 800c4f6:	bd08      	pop	{r3, pc}
 800c4f8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800c4fc:	e7f7      	b.n	800c4ee <powf+0x9e>

0800c4fe <finitef>:
 800c4fe:	ee10 3a10 	vmov	r3, s0
 800c502:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c506:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c50a:	bfac      	ite	ge
 800c50c:	2000      	movge	r0, #0
 800c50e:	2001      	movlt	r0, #1
 800c510:	4770      	bx	lr
 800c512:	0000      	movs	r0, r0
 800c514:	0000      	movs	r0, r0
	...

0800c518 <__ieee754_atan2>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	ec57 6b11 	vmov	r6, r7, d1
 800c520:	4273      	negs	r3, r6
 800c522:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c6a0 <__ieee754_atan2+0x188>
 800c526:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c52a:	4333      	orrs	r3, r6
 800c52c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c530:	4543      	cmp	r3, r8
 800c532:	ec51 0b10 	vmov	r0, r1, d0
 800c536:	4635      	mov	r5, r6
 800c538:	d809      	bhi.n	800c54e <__ieee754_atan2+0x36>
 800c53a:	4244      	negs	r4, r0
 800c53c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c540:	4304      	orrs	r4, r0
 800c542:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c546:	4544      	cmp	r4, r8
 800c548:	468e      	mov	lr, r1
 800c54a:	4681      	mov	r9, r0
 800c54c:	d907      	bls.n	800c55e <__ieee754_atan2+0x46>
 800c54e:	4632      	mov	r2, r6
 800c550:	463b      	mov	r3, r7
 800c552:	f7f3 febb 	bl	80002cc <__adddf3>
 800c556:	ec41 0b10 	vmov	d0, r0, r1
 800c55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c562:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c566:	4334      	orrs	r4, r6
 800c568:	d103      	bne.n	800c572 <__ieee754_atan2+0x5a>
 800c56a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c56e:	f000 b89b 	b.w	800c6a8 <atan>
 800c572:	17bc      	asrs	r4, r7, #30
 800c574:	f004 0402 	and.w	r4, r4, #2
 800c578:	ea53 0909 	orrs.w	r9, r3, r9
 800c57c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c580:	d107      	bne.n	800c592 <__ieee754_atan2+0x7a>
 800c582:	2c02      	cmp	r4, #2
 800c584:	d05f      	beq.n	800c646 <__ieee754_atan2+0x12e>
 800c586:	2c03      	cmp	r4, #3
 800c588:	d1e5      	bne.n	800c556 <__ieee754_atan2+0x3e>
 800c58a:	a141      	add	r1, pc, #260	@ (adr r1, 800c690 <__ieee754_atan2+0x178>)
 800c58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c590:	e7e1      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c592:	4315      	orrs	r5, r2
 800c594:	d106      	bne.n	800c5a4 <__ieee754_atan2+0x8c>
 800c596:	f1be 0f00 	cmp.w	lr, #0
 800c59a:	da5f      	bge.n	800c65c <__ieee754_atan2+0x144>
 800c59c:	a13e      	add	r1, pc, #248	@ (adr r1, 800c698 <__ieee754_atan2+0x180>)
 800c59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a2:	e7d8      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c5a4:	4542      	cmp	r2, r8
 800c5a6:	d10f      	bne.n	800c5c8 <__ieee754_atan2+0xb0>
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800c5ae:	d107      	bne.n	800c5c0 <__ieee754_atan2+0xa8>
 800c5b0:	2c02      	cmp	r4, #2
 800c5b2:	d84c      	bhi.n	800c64e <__ieee754_atan2+0x136>
 800c5b4:	4b34      	ldr	r3, [pc, #208]	@ (800c688 <__ieee754_atan2+0x170>)
 800c5b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5be:	e7ca      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c5c0:	2c02      	cmp	r4, #2
 800c5c2:	d848      	bhi.n	800c656 <__ieee754_atan2+0x13e>
 800c5c4:	4b31      	ldr	r3, [pc, #196]	@ (800c68c <__ieee754_atan2+0x174>)
 800c5c6:	e7f6      	b.n	800c5b6 <__ieee754_atan2+0x9e>
 800c5c8:	4543      	cmp	r3, r8
 800c5ca:	d0e4      	beq.n	800c596 <__ieee754_atan2+0x7e>
 800c5cc:	1a9b      	subs	r3, r3, r2
 800c5ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c5d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5d6:	da1e      	bge.n	800c616 <__ieee754_atan2+0xfe>
 800c5d8:	2f00      	cmp	r7, #0
 800c5da:	da01      	bge.n	800c5e0 <__ieee754_atan2+0xc8>
 800c5dc:	323c      	adds	r2, #60	@ 0x3c
 800c5de:	db1e      	blt.n	800c61e <__ieee754_atan2+0x106>
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	463b      	mov	r3, r7
 800c5e4:	f7f4 f952 	bl	800088c <__aeabi_ddiv>
 800c5e8:	ec41 0b10 	vmov	d0, r0, r1
 800c5ec:	f000 f9f4 	bl	800c9d8 <fabs>
 800c5f0:	f000 f85a 	bl	800c6a8 <atan>
 800c5f4:	ec51 0b10 	vmov	r0, r1, d0
 800c5f8:	2c01      	cmp	r4, #1
 800c5fa:	d013      	beq.n	800c624 <__ieee754_atan2+0x10c>
 800c5fc:	2c02      	cmp	r4, #2
 800c5fe:	d015      	beq.n	800c62c <__ieee754_atan2+0x114>
 800c600:	2c00      	cmp	r4, #0
 800c602:	d0a8      	beq.n	800c556 <__ieee754_atan2+0x3e>
 800c604:	a318      	add	r3, pc, #96	@ (adr r3, 800c668 <__ieee754_atan2+0x150>)
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	f7f3 fe5d 	bl	80002c8 <__aeabi_dsub>
 800c60e:	a318      	add	r3, pc, #96	@ (adr r3, 800c670 <__ieee754_atan2+0x158>)
 800c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c614:	e014      	b.n	800c640 <__ieee754_atan2+0x128>
 800c616:	a118      	add	r1, pc, #96	@ (adr r1, 800c678 <__ieee754_atan2+0x160>)
 800c618:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c61c:	e7ec      	b.n	800c5f8 <__ieee754_atan2+0xe0>
 800c61e:	2000      	movs	r0, #0
 800c620:	2100      	movs	r1, #0
 800c622:	e7e9      	b.n	800c5f8 <__ieee754_atan2+0xe0>
 800c624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c628:	4619      	mov	r1, r3
 800c62a:	e794      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c62c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c668 <__ieee754_atan2+0x150>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	f7f3 fe49 	bl	80002c8 <__aeabi_dsub>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	a10d      	add	r1, pc, #52	@ (adr r1, 800c670 <__ieee754_atan2+0x158>)
 800c63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c640:	f7f3 fe42 	bl	80002c8 <__aeabi_dsub>
 800c644:	e787      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c646:	a10a      	add	r1, pc, #40	@ (adr r1, 800c670 <__ieee754_atan2+0x158>)
 800c648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c64c:	e783      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c64e:	a10c      	add	r1, pc, #48	@ (adr r1, 800c680 <__ieee754_atan2+0x168>)
 800c650:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c654:	e77f      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c656:	2000      	movs	r0, #0
 800c658:	2100      	movs	r1, #0
 800c65a:	e77c      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c65c:	a106      	add	r1, pc, #24	@ (adr r1, 800c678 <__ieee754_atan2+0x160>)
 800c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c662:	e778      	b.n	800c556 <__ieee754_atan2+0x3e>
 800c664:	f3af 8000 	nop.w
 800c668:	33145c07 	.word	0x33145c07
 800c66c:	3ca1a626 	.word	0x3ca1a626
 800c670:	54442d18 	.word	0x54442d18
 800c674:	400921fb 	.word	0x400921fb
 800c678:	54442d18 	.word	0x54442d18
 800c67c:	3ff921fb 	.word	0x3ff921fb
 800c680:	54442d18 	.word	0x54442d18
 800c684:	3fe921fb 	.word	0x3fe921fb
 800c688:	0800d718 	.word	0x0800d718
 800c68c:	0800d700 	.word	0x0800d700
 800c690:	54442d18 	.word	0x54442d18
 800c694:	c00921fb 	.word	0xc00921fb
 800c698:	54442d18 	.word	0x54442d18
 800c69c:	bff921fb 	.word	0xbff921fb
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	00000000 	.word	0x00000000

0800c6a8 <atan>:
 800c6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	ec55 4b10 	vmov	r4, r5, d0
 800c6b0:	4bbf      	ldr	r3, [pc, #764]	@ (800c9b0 <atan+0x308>)
 800c6b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c6b6:	429e      	cmp	r6, r3
 800c6b8:	46ab      	mov	fp, r5
 800c6ba:	d918      	bls.n	800c6ee <atan+0x46>
 800c6bc:	4bbd      	ldr	r3, [pc, #756]	@ (800c9b4 <atan+0x30c>)
 800c6be:	429e      	cmp	r6, r3
 800c6c0:	d801      	bhi.n	800c6c6 <atan+0x1e>
 800c6c2:	d109      	bne.n	800c6d8 <atan+0x30>
 800c6c4:	b144      	cbz	r4, 800c6d8 <atan+0x30>
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	4629      	mov	r1, r5
 800c6ce:	f7f3 fdfd 	bl	80002cc <__adddf3>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	e006      	b.n	800c6e6 <atan+0x3e>
 800c6d8:	f1bb 0f00 	cmp.w	fp, #0
 800c6dc:	f340 812b 	ble.w	800c936 <atan+0x28e>
 800c6e0:	a597      	add	r5, pc, #604	@ (adr r5, 800c940 <atan+0x298>)
 800c6e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6e6:	ec45 4b10 	vmov	d0, r4, r5
 800c6ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	4bb2      	ldr	r3, [pc, #712]	@ (800c9b8 <atan+0x310>)
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	d813      	bhi.n	800c71c <atan+0x74>
 800c6f4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c6f8:	429e      	cmp	r6, r3
 800c6fa:	d80c      	bhi.n	800c716 <atan+0x6e>
 800c6fc:	a392      	add	r3, pc, #584	@ (adr r3, 800c948 <atan+0x2a0>)
 800c6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c702:	4620      	mov	r0, r4
 800c704:	4629      	mov	r1, r5
 800c706:	f7f3 fde1 	bl	80002cc <__adddf3>
 800c70a:	4bac      	ldr	r3, [pc, #688]	@ (800c9bc <atan+0x314>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	f7f4 fa23 	bl	8000b58 <__aeabi_dcmpgt>
 800c712:	2800      	cmp	r0, #0
 800c714:	d1e7      	bne.n	800c6e6 <atan+0x3e>
 800c716:	f04f 3aff 	mov.w	sl, #4294967295
 800c71a:	e029      	b.n	800c770 <atan+0xc8>
 800c71c:	f000 f95c 	bl	800c9d8 <fabs>
 800c720:	4ba7      	ldr	r3, [pc, #668]	@ (800c9c0 <atan+0x318>)
 800c722:	429e      	cmp	r6, r3
 800c724:	ec55 4b10 	vmov	r4, r5, d0
 800c728:	f200 80bc 	bhi.w	800c8a4 <atan+0x1fc>
 800c72c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c730:	429e      	cmp	r6, r3
 800c732:	f200 809e 	bhi.w	800c872 <atan+0x1ca>
 800c736:	4622      	mov	r2, r4
 800c738:	462b      	mov	r3, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f3 fdc5 	bl	80002cc <__adddf3>
 800c742:	4b9e      	ldr	r3, [pc, #632]	@ (800c9bc <atan+0x314>)
 800c744:	2200      	movs	r2, #0
 800c746:	f7f3 fdbf 	bl	80002c8 <__aeabi_dsub>
 800c74a:	2200      	movs	r2, #0
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c754:	4620      	mov	r0, r4
 800c756:	4629      	mov	r1, r5
 800c758:	f7f3 fdb8 	bl	80002cc <__adddf3>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4630      	mov	r0, r6
 800c762:	4639      	mov	r1, r7
 800c764:	f7f4 f892 	bl	800088c <__aeabi_ddiv>
 800c768:	f04f 0a00 	mov.w	sl, #0
 800c76c:	4604      	mov	r4, r0
 800c76e:	460d      	mov	r5, r1
 800c770:	4622      	mov	r2, r4
 800c772:	462b      	mov	r3, r5
 800c774:	4620      	mov	r0, r4
 800c776:	4629      	mov	r1, r5
 800c778:	f7f3 ff5e 	bl	8000638 <__aeabi_dmul>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	4680      	mov	r8, r0
 800c782:	4689      	mov	r9, r1
 800c784:	f7f3 ff58 	bl	8000638 <__aeabi_dmul>
 800c788:	a371      	add	r3, pc, #452	@ (adr r3, 800c950 <atan+0x2a8>)
 800c78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78e:	4606      	mov	r6, r0
 800c790:	460f      	mov	r7, r1
 800c792:	f7f3 ff51 	bl	8000638 <__aeabi_dmul>
 800c796:	a370      	add	r3, pc, #448	@ (adr r3, 800c958 <atan+0x2b0>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	f7f3 fd96 	bl	80002cc <__adddf3>
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	463b      	mov	r3, r7
 800c7a4:	f7f3 ff48 	bl	8000638 <__aeabi_dmul>
 800c7a8:	a36d      	add	r3, pc, #436	@ (adr r3, 800c960 <atan+0x2b8>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	f7f3 fd8d 	bl	80002cc <__adddf3>
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	f7f3 ff3f 	bl	8000638 <__aeabi_dmul>
 800c7ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800c968 <atan+0x2c0>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	f7f3 fd84 	bl	80002cc <__adddf3>
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	f7f3 ff36 	bl	8000638 <__aeabi_dmul>
 800c7cc:	a368      	add	r3, pc, #416	@ (adr r3, 800c970 <atan+0x2c8>)
 800c7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d2:	f7f3 fd7b 	bl	80002cc <__adddf3>
 800c7d6:	4632      	mov	r2, r6
 800c7d8:	463b      	mov	r3, r7
 800c7da:	f7f3 ff2d 	bl	8000638 <__aeabi_dmul>
 800c7de:	a366      	add	r3, pc, #408	@ (adr r3, 800c978 <atan+0x2d0>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	f7f3 fd72 	bl	80002cc <__adddf3>
 800c7e8:	4642      	mov	r2, r8
 800c7ea:	464b      	mov	r3, r9
 800c7ec:	f7f3 ff24 	bl	8000638 <__aeabi_dmul>
 800c7f0:	a363      	add	r3, pc, #396	@ (adr r3, 800c980 <atan+0x2d8>)
 800c7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	4689      	mov	r9, r1
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	4639      	mov	r1, r7
 800c7fe:	f7f3 ff1b 	bl	8000638 <__aeabi_dmul>
 800c802:	a361      	add	r3, pc, #388	@ (adr r3, 800c988 <atan+0x2e0>)
 800c804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c808:	f7f3 fd5e 	bl	80002c8 <__aeabi_dsub>
 800c80c:	4632      	mov	r2, r6
 800c80e:	463b      	mov	r3, r7
 800c810:	f7f3 ff12 	bl	8000638 <__aeabi_dmul>
 800c814:	a35e      	add	r3, pc, #376	@ (adr r3, 800c990 <atan+0x2e8>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f7f3 fd55 	bl	80002c8 <__aeabi_dsub>
 800c81e:	4632      	mov	r2, r6
 800c820:	463b      	mov	r3, r7
 800c822:	f7f3 ff09 	bl	8000638 <__aeabi_dmul>
 800c826:	a35c      	add	r3, pc, #368	@ (adr r3, 800c998 <atan+0x2f0>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	f7f3 fd4c 	bl	80002c8 <__aeabi_dsub>
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	f7f3 ff00 	bl	8000638 <__aeabi_dmul>
 800c838:	a359      	add	r3, pc, #356	@ (adr r3, 800c9a0 <atan+0x2f8>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fd43 	bl	80002c8 <__aeabi_dsub>
 800c842:	4632      	mov	r2, r6
 800c844:	463b      	mov	r3, r7
 800c846:	f7f3 fef7 	bl	8000638 <__aeabi_dmul>
 800c84a:	4602      	mov	r2, r0
 800c84c:	460b      	mov	r3, r1
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fd3b 	bl	80002cc <__adddf3>
 800c856:	4622      	mov	r2, r4
 800c858:	462b      	mov	r3, r5
 800c85a:	f7f3 feed 	bl	8000638 <__aeabi_dmul>
 800c85e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	d148      	bne.n	800c8fa <atan+0x252>
 800c868:	4620      	mov	r0, r4
 800c86a:	4629      	mov	r1, r5
 800c86c:	f7f3 fd2c 	bl	80002c8 <__aeabi_dsub>
 800c870:	e72f      	b.n	800c6d2 <atan+0x2a>
 800c872:	4b52      	ldr	r3, [pc, #328]	@ (800c9bc <atan+0x314>)
 800c874:	2200      	movs	r2, #0
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f3 fd25 	bl	80002c8 <__aeabi_dsub>
 800c87e:	4b4f      	ldr	r3, [pc, #316]	@ (800c9bc <atan+0x314>)
 800c880:	4606      	mov	r6, r0
 800c882:	460f      	mov	r7, r1
 800c884:	2200      	movs	r2, #0
 800c886:	4620      	mov	r0, r4
 800c888:	4629      	mov	r1, r5
 800c88a:	f7f3 fd1f 	bl	80002cc <__adddf3>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 fff9 	bl	800088c <__aeabi_ddiv>
 800c89a:	f04f 0a01 	mov.w	sl, #1
 800c89e:	4604      	mov	r4, r0
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	e765      	b.n	800c770 <atan+0xc8>
 800c8a4:	4b47      	ldr	r3, [pc, #284]	@ (800c9c4 <atan+0x31c>)
 800c8a6:	429e      	cmp	r6, r3
 800c8a8:	d21c      	bcs.n	800c8e4 <atan+0x23c>
 800c8aa:	4b47      	ldr	r3, [pc, #284]	@ (800c9c8 <atan+0x320>)
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	f7f3 fd09 	bl	80002c8 <__aeabi_dsub>
 800c8b6:	4b44      	ldr	r3, [pc, #272]	@ (800c9c8 <atan+0x320>)
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4620      	mov	r0, r4
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f7f3 feb9 	bl	8000638 <__aeabi_dmul>
 800c8c6:	4b3d      	ldr	r3, [pc, #244]	@ (800c9bc <atan+0x314>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f7f3 fcff 	bl	80002cc <__adddf3>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	f7f3 ffd9 	bl	800088c <__aeabi_ddiv>
 800c8da:	f04f 0a02 	mov.w	sl, #2
 800c8de:	4604      	mov	r4, r0
 800c8e0:	460d      	mov	r5, r1
 800c8e2:	e745      	b.n	800c770 <atan+0xc8>
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	462b      	mov	r3, r5
 800c8e8:	4938      	ldr	r1, [pc, #224]	@ (800c9cc <atan+0x324>)
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	f7f3 ffce 	bl	800088c <__aeabi_ddiv>
 800c8f0:	f04f 0a03 	mov.w	sl, #3
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	460d      	mov	r5, r1
 800c8f8:	e73a      	b.n	800c770 <atan+0xc8>
 800c8fa:	4b35      	ldr	r3, [pc, #212]	@ (800c9d0 <atan+0x328>)
 800c8fc:	4e35      	ldr	r6, [pc, #212]	@ (800c9d4 <atan+0x32c>)
 800c8fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	f7f3 fcdf 	bl	80002c8 <__aeabi_dsub>
 800c90a:	4622      	mov	r2, r4
 800c90c:	462b      	mov	r3, r5
 800c90e:	f7f3 fcdb 	bl	80002c8 <__aeabi_dsub>
 800c912:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c91e:	f7f3 fcd3 	bl	80002c8 <__aeabi_dsub>
 800c922:	f1bb 0f00 	cmp.w	fp, #0
 800c926:	4604      	mov	r4, r0
 800c928:	460d      	mov	r5, r1
 800c92a:	f6bf aedc 	bge.w	800c6e6 <atan+0x3e>
 800c92e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c932:	461d      	mov	r5, r3
 800c934:	e6d7      	b.n	800c6e6 <atan+0x3e>
 800c936:	a51c      	add	r5, pc, #112	@ (adr r5, 800c9a8 <atan+0x300>)
 800c938:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c93c:	e6d3      	b.n	800c6e6 <atan+0x3e>
 800c93e:	bf00      	nop
 800c940:	54442d18 	.word	0x54442d18
 800c944:	3ff921fb 	.word	0x3ff921fb
 800c948:	8800759c 	.word	0x8800759c
 800c94c:	7e37e43c 	.word	0x7e37e43c
 800c950:	e322da11 	.word	0xe322da11
 800c954:	3f90ad3a 	.word	0x3f90ad3a
 800c958:	24760deb 	.word	0x24760deb
 800c95c:	3fa97b4b 	.word	0x3fa97b4b
 800c960:	a0d03d51 	.word	0xa0d03d51
 800c964:	3fb10d66 	.word	0x3fb10d66
 800c968:	c54c206e 	.word	0xc54c206e
 800c96c:	3fb745cd 	.word	0x3fb745cd
 800c970:	920083ff 	.word	0x920083ff
 800c974:	3fc24924 	.word	0x3fc24924
 800c978:	5555550d 	.word	0x5555550d
 800c97c:	3fd55555 	.word	0x3fd55555
 800c980:	2c6a6c2f 	.word	0x2c6a6c2f
 800c984:	bfa2b444 	.word	0xbfa2b444
 800c988:	52defd9a 	.word	0x52defd9a
 800c98c:	3fadde2d 	.word	0x3fadde2d
 800c990:	af749a6d 	.word	0xaf749a6d
 800c994:	3fb3b0f2 	.word	0x3fb3b0f2
 800c998:	fe231671 	.word	0xfe231671
 800c99c:	3fbc71c6 	.word	0x3fbc71c6
 800c9a0:	9998ebc4 	.word	0x9998ebc4
 800c9a4:	3fc99999 	.word	0x3fc99999
 800c9a8:	54442d18 	.word	0x54442d18
 800c9ac:	bff921fb 	.word	0xbff921fb
 800c9b0:	440fffff 	.word	0x440fffff
 800c9b4:	7ff00000 	.word	0x7ff00000
 800c9b8:	3fdbffff 	.word	0x3fdbffff
 800c9bc:	3ff00000 	.word	0x3ff00000
 800c9c0:	3ff2ffff 	.word	0x3ff2ffff
 800c9c4:	40038000 	.word	0x40038000
 800c9c8:	3ff80000 	.word	0x3ff80000
 800c9cc:	bff00000 	.word	0xbff00000
 800c9d0:	0800d730 	.word	0x0800d730
 800c9d4:	0800d750 	.word	0x0800d750

0800c9d8 <fabs>:
 800c9d8:	ec51 0b10 	vmov	r0, r1, d0
 800c9dc:	4602      	mov	r2, r0
 800c9de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c9e2:	ec43 2b10 	vmov	d0, r2, r3
 800c9e6:	4770      	bx	lr

0800c9e8 <__ieee754_powf>:
 800c9e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ec:	ee10 4a90 	vmov	r4, s1
 800c9f0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800c9f4:	ed2d 8b02 	vpush	{d8}
 800c9f8:	ee10 6a10 	vmov	r6, s0
 800c9fc:	eeb0 8a40 	vmov.f32	s16, s0
 800ca00:	eef0 8a60 	vmov.f32	s17, s1
 800ca04:	d10c      	bne.n	800ca20 <__ieee754_powf+0x38>
 800ca06:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ca0a:	0076      	lsls	r6, r6, #1
 800ca0c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ca10:	f240 829c 	bls.w	800cf4c <__ieee754_powf+0x564>
 800ca14:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ca18:	ecbd 8b02 	vpop	{d8}
 800ca1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca20:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ca24:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ca28:	d802      	bhi.n	800ca30 <__ieee754_powf+0x48>
 800ca2a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ca2e:	d908      	bls.n	800ca42 <__ieee754_powf+0x5a>
 800ca30:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ca34:	d1ee      	bne.n	800ca14 <__ieee754_powf+0x2c>
 800ca36:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ca3a:	0064      	lsls	r4, r4, #1
 800ca3c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ca40:	e7e6      	b.n	800ca10 <__ieee754_powf+0x28>
 800ca42:	2e00      	cmp	r6, #0
 800ca44:	da1e      	bge.n	800ca84 <__ieee754_powf+0x9c>
 800ca46:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ca4a:	d22b      	bcs.n	800caa4 <__ieee754_powf+0xbc>
 800ca4c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ca50:	d332      	bcc.n	800cab8 <__ieee754_powf+0xd0>
 800ca52:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ca56:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ca5a:	fa49 f503 	asr.w	r5, r9, r3
 800ca5e:	fa05 f303 	lsl.w	r3, r5, r3
 800ca62:	454b      	cmp	r3, r9
 800ca64:	d126      	bne.n	800cab4 <__ieee754_powf+0xcc>
 800ca66:	f005 0501 	and.w	r5, r5, #1
 800ca6a:	f1c5 0502 	rsb	r5, r5, #2
 800ca6e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ca72:	d122      	bne.n	800caba <__ieee754_powf+0xd2>
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	f280 826f 	bge.w	800cf58 <__ieee754_powf+0x570>
 800ca7a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ca7e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ca82:	e7c9      	b.n	800ca18 <__ieee754_powf+0x30>
 800ca84:	2500      	movs	r5, #0
 800ca86:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ca8a:	d1f0      	bne.n	800ca6e <__ieee754_powf+0x86>
 800ca8c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ca90:	f000 825c 	beq.w	800cf4c <__ieee754_powf+0x564>
 800ca94:	d908      	bls.n	800caa8 <__ieee754_powf+0xc0>
 800ca96:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800cdf8 <__ieee754_powf+0x410>
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	bfa8      	it	ge
 800ca9e:	eeb0 0a68 	vmovge.f32	s0, s17
 800caa2:	e7b9      	b.n	800ca18 <__ieee754_powf+0x30>
 800caa4:	2502      	movs	r5, #2
 800caa6:	e7ee      	b.n	800ca86 <__ieee754_powf+0x9e>
 800caa8:	2c00      	cmp	r4, #0
 800caaa:	f280 8252 	bge.w	800cf52 <__ieee754_powf+0x56a>
 800caae:	eeb1 0a68 	vneg.f32	s0, s17
 800cab2:	e7b1      	b.n	800ca18 <__ieee754_powf+0x30>
 800cab4:	2500      	movs	r5, #0
 800cab6:	e7da      	b.n	800ca6e <__ieee754_powf+0x86>
 800cab8:	2500      	movs	r5, #0
 800caba:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800cabe:	d102      	bne.n	800cac6 <__ieee754_powf+0xde>
 800cac0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cac4:	e7a8      	b.n	800ca18 <__ieee754_powf+0x30>
 800cac6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800caca:	d109      	bne.n	800cae0 <__ieee754_powf+0xf8>
 800cacc:	2e00      	cmp	r6, #0
 800cace:	db07      	blt.n	800cae0 <__ieee754_powf+0xf8>
 800cad0:	eeb0 0a48 	vmov.f32	s0, s16
 800cad4:	ecbd 8b02 	vpop	{d8}
 800cad8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cadc:	f000 bae8 	b.w	800d0b0 <__ieee754_sqrtf>
 800cae0:	eeb0 0a48 	vmov.f32	s0, s16
 800cae4:	f000 fa50 	bl	800cf88 <fabsf>
 800cae8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800caec:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800caf0:	4647      	mov	r7, r8
 800caf2:	d002      	beq.n	800cafa <__ieee754_powf+0x112>
 800caf4:	f1b8 0f00 	cmp.w	r8, #0
 800caf8:	d117      	bne.n	800cb2a <__ieee754_powf+0x142>
 800cafa:	2c00      	cmp	r4, #0
 800cafc:	bfbc      	itt	lt
 800cafe:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800cb02:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cb06:	2e00      	cmp	r6, #0
 800cb08:	da86      	bge.n	800ca18 <__ieee754_powf+0x30>
 800cb0a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800cb0e:	ea58 0805 	orrs.w	r8, r8, r5
 800cb12:	d104      	bne.n	800cb1e <__ieee754_powf+0x136>
 800cb14:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cb18:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cb1c:	e77c      	b.n	800ca18 <__ieee754_powf+0x30>
 800cb1e:	2d01      	cmp	r5, #1
 800cb20:	f47f af7a 	bne.w	800ca18 <__ieee754_powf+0x30>
 800cb24:	eeb1 0a40 	vneg.f32	s0, s0
 800cb28:	e776      	b.n	800ca18 <__ieee754_powf+0x30>
 800cb2a:	0ff0      	lsrs	r0, r6, #31
 800cb2c:	3801      	subs	r0, #1
 800cb2e:	ea55 0300 	orrs.w	r3, r5, r0
 800cb32:	d104      	bne.n	800cb3e <__ieee754_powf+0x156>
 800cb34:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cb38:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cb3c:	e76c      	b.n	800ca18 <__ieee754_powf+0x30>
 800cb3e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800cb42:	d973      	bls.n	800cc2c <__ieee754_powf+0x244>
 800cb44:	4bad      	ldr	r3, [pc, #692]	@ (800cdfc <__ieee754_powf+0x414>)
 800cb46:	4598      	cmp	r8, r3
 800cb48:	d808      	bhi.n	800cb5c <__ieee754_powf+0x174>
 800cb4a:	2c00      	cmp	r4, #0
 800cb4c:	da0b      	bge.n	800cb66 <__ieee754_powf+0x17e>
 800cb4e:	2000      	movs	r0, #0
 800cb50:	ecbd 8b02 	vpop	{d8}
 800cb54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb58:	f000 baa4 	b.w	800d0a4 <__math_oflowf>
 800cb5c:	4ba8      	ldr	r3, [pc, #672]	@ (800ce00 <__ieee754_powf+0x418>)
 800cb5e:	4598      	cmp	r8, r3
 800cb60:	d908      	bls.n	800cb74 <__ieee754_powf+0x18c>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	dcf3      	bgt.n	800cb4e <__ieee754_powf+0x166>
 800cb66:	2000      	movs	r0, #0
 800cb68:	ecbd 8b02 	vpop	{d8}
 800cb6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb70:	f000 ba92 	b.w	800d098 <__math_uflowf>
 800cb74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cb78:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cb7c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800ce04 <__ieee754_powf+0x41c>
 800cb80:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800cb84:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cb88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cb8c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cb90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cb94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb98:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800ce08 <__ieee754_powf+0x420>
 800cb9c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800cba0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800ce0c <__ieee754_powf+0x424>
 800cba4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cba8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800ce10 <__ieee754_powf+0x428>
 800cbac:	eef0 6a67 	vmov.f32	s13, s15
 800cbb0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800cbb4:	ee16 3a90 	vmov	r3, s13
 800cbb8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cbbc:	f023 030f 	bic.w	r3, r3, #15
 800cbc0:	ee06 3a90 	vmov	s13, r3
 800cbc4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800cbc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cbcc:	3d01      	subs	r5, #1
 800cbce:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800cbd2:	4305      	orrs	r5, r0
 800cbd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cbd8:	f024 040f 	bic.w	r4, r4, #15
 800cbdc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800cbe0:	bf18      	it	ne
 800cbe2:	eeb0 8a47 	vmovne.f32	s16, s14
 800cbe6:	ee07 4a10 	vmov	s14, r4
 800cbea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cbee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cbf2:	ee07 3a90 	vmov	s15, r3
 800cbf6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cbfa:	ee07 4a10 	vmov	s14, r4
 800cbfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cc02:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cc06:	ee17 1a10 	vmov	r1, s14
 800cc0a:	2900      	cmp	r1, #0
 800cc0c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cc10:	f340 80dd 	ble.w	800cdce <__ieee754_powf+0x3e6>
 800cc14:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800cc18:	f240 80ca 	bls.w	800cdb0 <__ieee754_powf+0x3c8>
 800cc1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc24:	bf4c      	ite	mi
 800cc26:	2001      	movmi	r0, #1
 800cc28:	2000      	movpl	r0, #0
 800cc2a:	e791      	b.n	800cb50 <__ieee754_powf+0x168>
 800cc2c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800cc30:	bf01      	itttt	eq
 800cc32:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800ce14 <__ieee754_powf+0x42c>
 800cc36:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cc3a:	f06f 0317 	mvneq.w	r3, #23
 800cc3e:	ee17 7a90 	vmoveq	r7, s15
 800cc42:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800cc46:	bf18      	it	ne
 800cc48:	2300      	movne	r3, #0
 800cc4a:	3a7f      	subs	r2, #127	@ 0x7f
 800cc4c:	441a      	add	r2, r3
 800cc4e:	4b72      	ldr	r3, [pc, #456]	@ (800ce18 <__ieee754_powf+0x430>)
 800cc50:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800cc54:	429f      	cmp	r7, r3
 800cc56:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800cc5a:	dd06      	ble.n	800cc6a <__ieee754_powf+0x282>
 800cc5c:	4b6f      	ldr	r3, [pc, #444]	@ (800ce1c <__ieee754_powf+0x434>)
 800cc5e:	429f      	cmp	r7, r3
 800cc60:	f340 80a4 	ble.w	800cdac <__ieee754_powf+0x3c4>
 800cc64:	3201      	adds	r2, #1
 800cc66:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800cc6a:	2600      	movs	r6, #0
 800cc6c:	4b6c      	ldr	r3, [pc, #432]	@ (800ce20 <__ieee754_powf+0x438>)
 800cc6e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cc72:	ee07 1a10 	vmov	s14, r1
 800cc76:	edd3 5a00 	vldr	s11, [r3]
 800cc7a:	4b6a      	ldr	r3, [pc, #424]	@ (800ce24 <__ieee754_powf+0x43c>)
 800cc7c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800cc80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cc84:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800cc88:	1049      	asrs	r1, r1, #1
 800cc8a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800cc8e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800cc92:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800cc96:	ee37 6a65 	vsub.f32	s12, s14, s11
 800cc9a:	ee07 1a90 	vmov	s15, r1
 800cc9e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800cca2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800cca6:	ee15 7a10 	vmov	r7, s10
 800ccaa:	401f      	ands	r7, r3
 800ccac:	ee06 7a90 	vmov	s13, r7
 800ccb0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ccb4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ccb8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ccbc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ccc0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800ce28 <__ieee754_powf+0x440>
 800ccc4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800ce2c <__ieee754_powf+0x444>
 800ccc8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cccc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800ce30 <__ieee754_powf+0x448>
 800ccd0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ccd4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800ce04 <__ieee754_powf+0x41c>
 800ccd8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ccdc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800ce34 <__ieee754_powf+0x44c>
 800cce0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cce4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800ce38 <__ieee754_powf+0x450>
 800cce8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ccec:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ccf0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ccf4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ccf8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ccfc:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800cd00:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800cd04:	eef0 5a67 	vmov.f32	s11, s15
 800cd08:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800cd0c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cd10:	ee15 1a90 	vmov	r1, s11
 800cd14:	4019      	ands	r1, r3
 800cd16:	ee05 1a90 	vmov	s11, r1
 800cd1a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cd1e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800cd22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd26:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cd2a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cd2e:	eeb0 6a67 	vmov.f32	s12, s15
 800cd32:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cd36:	ee16 1a10 	vmov	r1, s12
 800cd3a:	4019      	ands	r1, r3
 800cd3c:	ee06 1a10 	vmov	s12, r1
 800cd40:	eeb0 7a46 	vmov.f32	s14, s12
 800cd44:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800cd48:	493c      	ldr	r1, [pc, #240]	@ (800ce3c <__ieee754_powf+0x454>)
 800cd4a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800cd4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd52:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800ce40 <__ieee754_powf+0x458>
 800cd56:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800ce44 <__ieee754_powf+0x45c>
 800cd5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd5e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ce48 <__ieee754_powf+0x460>
 800cd62:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cd66:	ed91 7a00 	vldr	s14, [r1]
 800cd6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd6e:	ee07 2a10 	vmov	s14, r2
 800cd72:	eef0 6a67 	vmov.f32	s13, s15
 800cd76:	4a35      	ldr	r2, [pc, #212]	@ (800ce4c <__ieee754_powf+0x464>)
 800cd78:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cd7c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cd80:	ed92 5a00 	vldr	s10, [r2]
 800cd84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cd88:	ee76 6a85 	vadd.f32	s13, s13, s10
 800cd8c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800cd90:	ee16 2a90 	vmov	r2, s13
 800cd94:	4013      	ands	r3, r2
 800cd96:	ee06 3a90 	vmov	s13, r3
 800cd9a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800cd9e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800cda2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800cda6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdaa:	e70f      	b.n	800cbcc <__ieee754_powf+0x1e4>
 800cdac:	2601      	movs	r6, #1
 800cdae:	e75d      	b.n	800cc6c <__ieee754_powf+0x284>
 800cdb0:	d152      	bne.n	800ce58 <__ieee754_powf+0x470>
 800cdb2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ce50 <__ieee754_powf+0x468>
 800cdb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdba:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cdbe:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc6:	f73f af29 	bgt.w	800cc1c <__ieee754_powf+0x234>
 800cdca:	2386      	movs	r3, #134	@ 0x86
 800cdcc:	e048      	b.n	800ce60 <__ieee754_powf+0x478>
 800cdce:	4a21      	ldr	r2, [pc, #132]	@ (800ce54 <__ieee754_powf+0x46c>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d907      	bls.n	800cde4 <__ieee754_powf+0x3fc>
 800cdd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cddc:	bf4c      	ite	mi
 800cdde:	2001      	movmi	r0, #1
 800cde0:	2000      	movpl	r0, #0
 800cde2:	e6c1      	b.n	800cb68 <__ieee754_powf+0x180>
 800cde4:	d138      	bne.n	800ce58 <__ieee754_powf+0x470>
 800cde6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdea:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	dbea      	blt.n	800cdca <__ieee754_powf+0x3e2>
 800cdf4:	e7ee      	b.n	800cdd4 <__ieee754_powf+0x3ec>
 800cdf6:	bf00      	nop
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	3f7ffff3 	.word	0x3f7ffff3
 800ce00:	3f800007 	.word	0x3f800007
 800ce04:	3eaaaaab 	.word	0x3eaaaaab
 800ce08:	3fb8aa3b 	.word	0x3fb8aa3b
 800ce0c:	36eca570 	.word	0x36eca570
 800ce10:	3fb8aa00 	.word	0x3fb8aa00
 800ce14:	4b800000 	.word	0x4b800000
 800ce18:	001cc471 	.word	0x001cc471
 800ce1c:	005db3d6 	.word	0x005db3d6
 800ce20:	0800d780 	.word	0x0800d780
 800ce24:	fffff000 	.word	0xfffff000
 800ce28:	3e6c3255 	.word	0x3e6c3255
 800ce2c:	3e53f142 	.word	0x3e53f142
 800ce30:	3e8ba305 	.word	0x3e8ba305
 800ce34:	3edb6db7 	.word	0x3edb6db7
 800ce38:	3f19999a 	.word	0x3f19999a
 800ce3c:	0800d770 	.word	0x0800d770
 800ce40:	3f76384f 	.word	0x3f76384f
 800ce44:	3f763800 	.word	0x3f763800
 800ce48:	369dc3a0 	.word	0x369dc3a0
 800ce4c:	0800d778 	.word	0x0800d778
 800ce50:	3338aa3c 	.word	0x3338aa3c
 800ce54:	43160000 	.word	0x43160000
 800ce58:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800ce5c:	d971      	bls.n	800cf42 <__ieee754_powf+0x55a>
 800ce5e:	15db      	asrs	r3, r3, #23
 800ce60:	3b7e      	subs	r3, #126	@ 0x7e
 800ce62:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800ce66:	4118      	asrs	r0, r3
 800ce68:	4408      	add	r0, r1
 800ce6a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ce6e:	4a3c      	ldr	r2, [pc, #240]	@ (800cf60 <__ieee754_powf+0x578>)
 800ce70:	3b7f      	subs	r3, #127	@ 0x7f
 800ce72:	411a      	asrs	r2, r3
 800ce74:	4002      	ands	r2, r0
 800ce76:	ee07 2a10 	vmov	s14, r2
 800ce7a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800ce7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800ce82:	f1c3 0317 	rsb	r3, r3, #23
 800ce86:	4118      	asrs	r0, r3
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce8e:	bfb8      	it	lt
 800ce90:	4240      	neglt	r0, r0
 800ce92:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ce96:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800cf64 <__ieee754_powf+0x57c>
 800ce9a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800cf68 <__ieee754_powf+0x580>
 800ce9e:	ee17 3a10 	vmov	r3, s14
 800cea2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cea6:	f023 030f 	bic.w	r3, r3, #15
 800ceaa:	ee07 3a10 	vmov	s14, r3
 800ceae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ceb6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ceba:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800cf6c <__ieee754_powf+0x584>
 800cebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800cec6:	eef0 6a67 	vmov.f32	s13, s15
 800ceca:	eee7 6a06 	vfma.f32	s13, s14, s12
 800cece:	eef0 5a66 	vmov.f32	s11, s13
 800ced2:	eee7 5a46 	vfms.f32	s11, s14, s12
 800ced6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ceda:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800cede:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800cf70 <__ieee754_powf+0x588>
 800cee2:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800cf74 <__ieee754_powf+0x58c>
 800cee6:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ceea:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800cf78 <__ieee754_powf+0x590>
 800ceee:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cef2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800cf7c <__ieee754_powf+0x594>
 800cef6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cefa:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800cf80 <__ieee754_powf+0x598>
 800cefe:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cf02:	eeb0 6a66 	vmov.f32	s12, s13
 800cf06:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800cf0a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800cf0e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800cf12:	ee36 6a47 	vsub.f32	s12, s12, s14
 800cf16:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800cf1a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800cf1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf26:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf2a:	ee10 3a10 	vmov	r3, s0
 800cf2e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800cf32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf36:	da06      	bge.n	800cf46 <__ieee754_powf+0x55e>
 800cf38:	f000 f82e 	bl	800cf98 <scalbnf>
 800cf3c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800cf40:	e56a      	b.n	800ca18 <__ieee754_powf+0x30>
 800cf42:	2000      	movs	r0, #0
 800cf44:	e7a5      	b.n	800ce92 <__ieee754_powf+0x4aa>
 800cf46:	ee00 3a10 	vmov	s0, r3
 800cf4a:	e7f7      	b.n	800cf3c <__ieee754_powf+0x554>
 800cf4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800cf50:	e562      	b.n	800ca18 <__ieee754_powf+0x30>
 800cf52:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800cf84 <__ieee754_powf+0x59c>
 800cf56:	e55f      	b.n	800ca18 <__ieee754_powf+0x30>
 800cf58:	eeb0 0a48 	vmov.f32	s0, s16
 800cf5c:	e55c      	b.n	800ca18 <__ieee754_powf+0x30>
 800cf5e:	bf00      	nop
 800cf60:	ff800000 	.word	0xff800000
 800cf64:	3f317218 	.word	0x3f317218
 800cf68:	3f317200 	.word	0x3f317200
 800cf6c:	35bfbe8c 	.word	0x35bfbe8c
 800cf70:	b5ddea0e 	.word	0xb5ddea0e
 800cf74:	3331bb4c 	.word	0x3331bb4c
 800cf78:	388ab355 	.word	0x388ab355
 800cf7c:	bb360b61 	.word	0xbb360b61
 800cf80:	3e2aaaab 	.word	0x3e2aaaab
 800cf84:	00000000 	.word	0x00000000

0800cf88 <fabsf>:
 800cf88:	ee10 3a10 	vmov	r3, s0
 800cf8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf90:	ee00 3a10 	vmov	s0, r3
 800cf94:	4770      	bx	lr
	...

0800cf98 <scalbnf>:
 800cf98:	ee10 3a10 	vmov	r3, s0
 800cf9c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cfa0:	d02b      	beq.n	800cffa <scalbnf+0x62>
 800cfa2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cfa6:	d302      	bcc.n	800cfae <scalbnf+0x16>
 800cfa8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cfac:	4770      	bx	lr
 800cfae:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cfb2:	d123      	bne.n	800cffc <scalbnf+0x64>
 800cfb4:	4b24      	ldr	r3, [pc, #144]	@ (800d048 <scalbnf+0xb0>)
 800cfb6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d04c <scalbnf+0xb4>
 800cfba:	4298      	cmp	r0, r3
 800cfbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800cfc0:	db17      	blt.n	800cff2 <scalbnf+0x5a>
 800cfc2:	ee10 3a10 	vmov	r3, s0
 800cfc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cfca:	3a19      	subs	r2, #25
 800cfcc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800cfd0:	4288      	cmp	r0, r1
 800cfd2:	dd15      	ble.n	800d000 <scalbnf+0x68>
 800cfd4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d050 <scalbnf+0xb8>
 800cfd8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d054 <scalbnf+0xbc>
 800cfdc:	ee10 3a10 	vmov	r3, s0
 800cfe0:	eeb0 7a67 	vmov.f32	s14, s15
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	eef0 7a66 	vmovlt.f32	s15, s13
 800cfec:	ee27 0a87 	vmul.f32	s0, s15, s14
 800cff0:	4770      	bx	lr
 800cff2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d058 <scalbnf+0xc0>
 800cff6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cffa:	4770      	bx	lr
 800cffc:	0dd2      	lsrs	r2, r2, #23
 800cffe:	e7e5      	b.n	800cfcc <scalbnf+0x34>
 800d000:	4410      	add	r0, r2
 800d002:	28fe      	cmp	r0, #254	@ 0xfe
 800d004:	dce6      	bgt.n	800cfd4 <scalbnf+0x3c>
 800d006:	2800      	cmp	r0, #0
 800d008:	dd06      	ble.n	800d018 <scalbnf+0x80>
 800d00a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d00e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d012:	ee00 3a10 	vmov	s0, r3
 800d016:	4770      	bx	lr
 800d018:	f110 0f16 	cmn.w	r0, #22
 800d01c:	da09      	bge.n	800d032 <scalbnf+0x9a>
 800d01e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d058 <scalbnf+0xc0>
 800d022:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d05c <scalbnf+0xc4>
 800d026:	ee10 3a10 	vmov	r3, s0
 800d02a:	eeb0 7a67 	vmov.f32	s14, s15
 800d02e:	2b00      	cmp	r3, #0
 800d030:	e7d9      	b.n	800cfe6 <scalbnf+0x4e>
 800d032:	3019      	adds	r0, #25
 800d034:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d038:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d03c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d060 <scalbnf+0xc8>
 800d040:	ee07 3a90 	vmov	s15, r3
 800d044:	e7d7      	b.n	800cff6 <scalbnf+0x5e>
 800d046:	bf00      	nop
 800d048:	ffff3cb0 	.word	0xffff3cb0
 800d04c:	4c000000 	.word	0x4c000000
 800d050:	7149f2ca 	.word	0x7149f2ca
 800d054:	f149f2ca 	.word	0xf149f2ca
 800d058:	0da24260 	.word	0x0da24260
 800d05c:	8da24260 	.word	0x8da24260
 800d060:	33000000 	.word	0x33000000

0800d064 <with_errnof>:
 800d064:	b510      	push	{r4, lr}
 800d066:	ed2d 8b02 	vpush	{d8}
 800d06a:	eeb0 8a40 	vmov.f32	s16, s0
 800d06e:	4604      	mov	r4, r0
 800d070:	f7fc fd06 	bl	8009a80 <__errno>
 800d074:	eeb0 0a48 	vmov.f32	s0, s16
 800d078:	ecbd 8b02 	vpop	{d8}
 800d07c:	6004      	str	r4, [r0, #0]
 800d07e:	bd10      	pop	{r4, pc}

0800d080 <xflowf>:
 800d080:	b130      	cbz	r0, 800d090 <xflowf+0x10>
 800d082:	eef1 7a40 	vneg.f32	s15, s0
 800d086:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d08a:	2022      	movs	r0, #34	@ 0x22
 800d08c:	f7ff bfea 	b.w	800d064 <with_errnof>
 800d090:	eef0 7a40 	vmov.f32	s15, s0
 800d094:	e7f7      	b.n	800d086 <xflowf+0x6>
	...

0800d098 <__math_uflowf>:
 800d098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d0a0 <__math_uflowf+0x8>
 800d09c:	f7ff bff0 	b.w	800d080 <xflowf>
 800d0a0:	10000000 	.word	0x10000000

0800d0a4 <__math_oflowf>:
 800d0a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d0ac <__math_oflowf+0x8>
 800d0a8:	f7ff bfea 	b.w	800d080 <xflowf>
 800d0ac:	70000000 	.word	0x70000000

0800d0b0 <__ieee754_sqrtf>:
 800d0b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d0b4:	4770      	bx	lr
	...

0800d0b8 <_init>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	bf00      	nop
 800d0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0be:	bc08      	pop	{r3}
 800d0c0:	469e      	mov	lr, r3
 800d0c2:	4770      	bx	lr

0800d0c4 <_fini>:
 800d0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c6:	bf00      	nop
 800d0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ca:	bc08      	pop	{r3}
 800d0cc:	469e      	mov	lr, r3
 800d0ce:	4770      	bx	lr
