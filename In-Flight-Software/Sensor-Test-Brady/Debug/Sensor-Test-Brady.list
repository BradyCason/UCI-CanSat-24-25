
Sensor-Test-Brady.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08008ad0  08008ad0  00009ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090d0  080090d0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090d8  080090d8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090d8  080090d8  0000a0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090dc  080090dc  0000a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080090e0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  200001d4  080092b4  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000684  080092b4  0000b684  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b132  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a66  00000000  00000000  00016336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00017da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  000187e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fed3  00000000  00000000  00018fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da09  00000000  00000000  00038eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be70b  00000000  00000000  000468be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104fc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  0010500c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00108ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ab8 	.word	0x08008ab8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008ab8 	.word	0x08008ab8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <read_mcp9808>:
float tilt_x = 0;
float tilt_y = 0;
float rot_z = 0;
HAL_StatusTypeDef mpu_ret;

float read_mcp9808(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
    uint8_t temp_reg = MCP9808_TEMP_REG; // Register to read
 800102a:	2305      	movs	r3, #5
 800102c:	727b      	strb	r3, [r7, #9]
    uint8_t temp_data[2];                // Buffer to store temperature data
    uint16_t temp_raw;
    float temperature = 0.0;
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

    // Send register address
    if (HAL_I2C_Master_Transmit(&hi2c2, MCP9808_ADDR, &temp_reg, 1, 100) != HAL_OK) {
 8001034:	f107 0209 	add.w	r2, r7, #9
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2118      	movs	r1, #24
 8001040:	4822      	ldr	r0, [pc, #136]	@ (80010cc <read_mcp9808+0xa8>)
 8001042:	f001 fc7f 	bl	8002944 <HAL_I2C_Master_Transmit>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <read_mcp9808+0x2c>
        return -1.0; // Transmission error, return an invalid temperature
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <read_mcp9808+0xac>)
 800104e:	e035      	b.n	80010bc <read_mcp9808+0x98>
    }

    // Receive temperature data (2 bytes)
    if (HAL_I2C_Master_Receive(&hi2c2, MCP9808_ADDR, temp_data, 2, 100) != HAL_OK) {
 8001050:	1d3a      	adds	r2, r7, #4
 8001052:	2364      	movs	r3, #100	@ 0x64
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2302      	movs	r3, #2
 8001058:	2118      	movs	r1, #24
 800105a:	481c      	ldr	r0, [pc, #112]	@ (80010cc <read_mcp9808+0xa8>)
 800105c:	f001 fd70 	bl	8002b40 <HAL_I2C_Master_Receive>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <read_mcp9808+0x46>
        return -1.0; // Reception error, return an invalid temperature
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <read_mcp9808+0xac>)
 8001068:	e028      	b.n	80010bc <read_mcp9808+0x98>
    }

    // Combine the received data
    temp_raw = (temp_data[0] << 8) | temp_data[1];
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	797b      	ldrb	r3, [r7, #5]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	817b      	strh	r3, [r7, #10]

    // Convert raw data to temperature in Celsius
    temperature = (temp_raw & 0x0FFF) * 0.0625;
 800107a:	897b      	ldrh	r3, [r7, #10]
 800107c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa6f 	bl	8000564 <__aeabi_i2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <read_mcp9808+0xb0>)
 800108c:	f7ff fad4 	bl	8000638 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fdc6 	bl	8000c28 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
    if (temp_raw & 0x1000) {
 80010a0:	897b      	ldrh	r3, [r7, #10]
 80010a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <read_mcp9808+0x96>
        temperature -= 256.0;
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80010d8 <read_mcp9808+0xb4>
 80010b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b6:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return temperature;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb0 0a67 	vmov.f32	s0, s15
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001f0 	.word	0x200001f0
 80010d0:	bf800000 	.word	0xbf800000
 80010d4:	3fb00000 	.word	0x3fb00000
 80010d8:	43800000 	.word	0x43800000

080010dc <read_ina219>:

uint8_t read_ina219() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
    uint8_t reg_addr = INA219_REG_BUS_VOLTAGE; // Set register to Bus Voltage
 80010e2:	2302      	movs	r3, #2
 80010e4:	71fb      	strb	r3, [r7, #7]
    uint8_t ina_buf[2];                        // Buffer to store the received data
    uint8_t ina_ret;                           // Return status of I2C communication

    // Check if INA219 is ready for communication
    ina_ret = HAL_I2C_IsDeviceReady(&hi2c2, INA219_ADDRESS, 3, 5);
 80010e6:	2305      	movs	r3, #5
 80010e8:	2203      	movs	r2, #3
 80010ea:	2140      	movs	r1, #64	@ 0x40
 80010ec:	481e      	ldr	r0, [pc, #120]	@ (8001168 <read_ina219+0x8c>)
 80010ee:	f001 ff59 	bl	8002fa4 <HAL_I2C_IsDeviceReady>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
    if (ina_ret == HAL_OK) {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d130      	bne.n	800115e <read_ina219+0x82>
        // Transmit the address of the Bus Voltage Register
        ina_ret = HAL_I2C_Master_Transmit(&hi2c2, INA219_ADDRESS, &reg_addr, 1, 100);
 80010fc:	1dfa      	adds	r2, r7, #7
 80010fe:	2364      	movs	r3, #100	@ 0x64
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	2140      	movs	r1, #64	@ 0x40
 8001106:	4818      	ldr	r0, [pc, #96]	@ (8001168 <read_ina219+0x8c>)
 8001108:	f001 fc1c 	bl	8002944 <HAL_I2C_Master_Transmit>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
        if (ina_ret == HAL_OK) {
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d123      	bne.n	800115e <read_ina219+0x82>
            // Receive 2 bytes of data from the Bus Voltage Register
            HAL_I2C_Master_Receive(&hi2c2, INA219_ADDRESS, ina_buf, 2, 10);
 8001116:	1d3a      	adds	r2, r7, #4
 8001118:	230a      	movs	r3, #10
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2302      	movs	r3, #2
 800111e:	2140      	movs	r1, #64	@ 0x40
 8001120:	4811      	ldr	r0, [pc, #68]	@ (8001168 <read_ina219+0x8c>)
 8001122:	f001 fd0d 	bl	8002b40 <HAL_I2C_Master_Receive>

            // Combine the received bytes into a single 16-bit value
            int16_t raw_bus_voltage = (int16_t)(ina_buf[0] << 8 | ina_buf[1]);
 8001126:	793b      	ldrb	r3, [r7, #4]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	81bb      	strh	r3, [r7, #12]

            // Convert the raw value to bus voltage (in volts)
            float bus_voltage = raw_bus_voltage / 1600.0;
 8001134:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa13 	bl	8000564 <__aeabi_i2d>
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	4b0a      	ldr	r3, [pc, #40]	@ (800116c <read_ina219+0x90>)
 8001144:	f7ff fba2 	bl	800088c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4610      	mov	r0, r2
 800114e:	4619      	mov	r1, r3
 8001150:	f7ff fd6a 	bl	8000c28 <__aeabi_d2f>
 8001154:	4603      	mov	r3, r0
 8001156:	60bb      	str	r3, [r7, #8]

            // Store or return the calculated voltage as needed
            voltage = bus_voltage;
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <read_ina219+0x94>)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	6013      	str	r3, [r2, #0]
        }
    }

    return ina_ret;  // Return the I2C communication status
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f0 	.word	0x200001f0
 800116c:	40990000 	.word	0x40990000
 8001170:	200002d4 	.word	0x200002d4

08001174 <set_gps>:

uint8_t set_gps(char* buf, uint8_t order){
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
	char tmp[2];
	char tmp2[3];

	if(strlen(buf)==0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <set_gps+0x18>
		return 0;
 8001188:	2300      	movs	r3, #0
 800118a:	e0c2      	b.n	8001312 <set_gps+0x19e>

	switch(order) {
 800118c:	78fb      	ldrb	r3, [r7, #3]
 800118e:	2b09      	cmp	r3, #9
 8001190:	f200 80b7 	bhi.w	8001302 <set_gps+0x18e>
 8001194:	a201      	add	r2, pc, #4	@ (adr r2, 800119c <set_gps+0x28>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	080011c5 	.word	0x080011c5
 80011a0:	080011fd 	.word	0x080011fd
 80011a4:	08001251 	.word	0x08001251
 80011a8:	08001275 	.word	0x08001275
 80011ac:	08001297 	.word	0x08001297
 80011b0:	080012bb 	.word	0x080012bb
 80011b4:	08001303 	.word	0x08001303
 80011b8:	080012dd 	.word	0x080012dd
 80011bc:	08001303 	.word	0x08001303
 80011c0:	080012ed 	.word	0x080012ed
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff f873 	bl	80002b0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d913      	bls.n	80011f8 <set_gps+0x84>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b47      	cmp	r3, #71	@ 0x47
 80011d6:	d10f      	bne.n	80011f8 <set_gps+0x84>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3302      	adds	r3, #2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b47      	cmp	r3, #71	@ 0x47
 80011e0:	d10a      	bne.n	80011f8 <set_gps+0x84>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3303      	adds	r3, #3
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b47      	cmp	r3, #71	@ 0x47
 80011ea:	d105      	bne.n	80011f8 <set_gps+0x84>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3304      	adds	r3, #4
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b41      	cmp	r3, #65	@ 0x41
 80011f4:	f000 8087 	beq.w	8001306 <set_gps+0x192>
			return 1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e08a      	b.n	8001312 <set_gps+0x19e>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4618      	mov	r0, r3
 800120a:	f003 faaa 	bl	8004762 <atoi>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b42      	ldr	r3, [pc, #264]	@ (800131c <set_gps+0x1a8>)
 8001214:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3302      	adds	r3, #2
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fa9c 	bl	8004762 <atoi>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b3c      	ldr	r3, [pc, #240]	@ (8001320 <set_gps+0x1ac>)
 8001230:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3304      	adds	r3, #4
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4618      	mov	r0, r3
 8001242:	f003 fa8e 	bl	8004762 <atoi>
 8001246:	4603      	mov	r3, r0
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b36      	ldr	r3, [pc, #216]	@ (8001324 <set_gps+0x1b0>)
 800124c:	701a      	strb	r2, [r3, #0]

		break;
 800124e:	e05f      	b.n	8001310 <set_gps+0x19c>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f003 fa83 	bl	800475c <atof>
 8001256:	4603      	mov	r3, r0
 8001258:	4a33      	ldr	r2, [pc, #204]	@ (8001328 <set_gps+0x1b4>)
 800125a:	fb82 1203 	smull	r1, r2, r2, r3
 800125e:	1152      	asrs	r2, r2, #5
 8001260:	17db      	asrs	r3, r3, #31
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <set_gps+0x1b8>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001272:	e04d      	b.n	8001310 <set_gps+0x19c>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <set_gps+0x1bc>)
 800127a:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 800127c:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <set_gps+0x1bc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b53      	cmp	r3, #83	@ 0x53
 8001282:	d142      	bne.n	800130a <set_gps+0x196>
			gps_latitude*= -1;
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <set_gps+0x1b8>)
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eef1 7a67 	vneg.f32	s15, s15
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <set_gps+0x1b8>)
 8001290:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001294:	e039      	b.n	800130a <set_gps+0x196>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f003 fa60 	bl	800475c <atof>
 800129c:	4603      	mov	r3, r0
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <set_gps+0x1b4>)
 80012a0:	fb82 1203 	smull	r1, r2, r2, r3
 80012a4:	1152      	asrs	r2, r2, #5
 80012a6:	17db      	asrs	r3, r3, #31
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <set_gps+0x1c0>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]
		break;
 80012b8:	e02a      	b.n	8001310 <set_gps+0x19c>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <set_gps+0x1c4>)
 80012c0:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <set_gps+0x1c4>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b57      	cmp	r3, #87	@ 0x57
 80012c8:	d121      	bne.n	800130e <set_gps+0x19a>
			gps_longitude*= -1;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <set_gps+0x1c0>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eef1 7a67 	vneg.f32	s15, s15
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <set_gps+0x1c0>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80012da:	e018      	b.n	800130e <set_gps+0x19a>
	case 7: //SATS
		gps_sats = atoi(buf);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f003 fa40 	bl	8004762 <atoi>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <set_gps+0x1c8>)
 80012e8:	701a      	strb	r2, [r3, #0]
		break;
 80012ea:	e011      	b.n	8001310 <set_gps+0x19c>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f003 fa35 	bl	800475c <atof>
 80012f2:	ee07 0a90 	vmov	s15, r0
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <set_gps+0x1cc>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001300:	e006      	b.n	8001310 <set_gps+0x19c>
	default:
		break;
 8001302:	bf00      	nop
 8001304:	e004      	b.n	8001310 <set_gps+0x19c>
		break;
 8001306:	bf00      	nop
 8001308:	e002      	b.n	8001310 <set_gps+0x19c>
		break;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <set_gps+0x19c>
		break;
 800130e:	bf00      	nop
	}

	return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200004dd 	.word	0x200004dd
 8001320:	200004de 	.word	0x200004de
 8001324:	200004df 	.word	0x200004df
 8001328:	51eb851f 	.word	0x51eb851f
 800132c:	200004e4 	.word	0x200004e4
 8001330:	200004db 	.word	0x200004db
 8001334:	200004e8 	.word	0x200004e8
 8001338:	200004dc 	.word	0x200004dc
 800133c:	200004ec 	.word	0x200004ec
 8001340:	200004e0 	.word	0x200004e0

08001344 <parse_nmea>:

bool parse_nmea(char *buf){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e032      	b.n	80013c0 <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b2c      	cmp	r3, #44	@ 0x2c
 8001364:	d123      	bne.n	80013ae <parse_nmea+0x6a>
			if (last != i){
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	429a      	cmp	r2, r3
 800136c:	d018      	beq.n	80013a0 <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	2100      	movs	r1, #0
 8001372:	4818      	ldr	r0, [pc, #96]	@ (80013d4 <parse_nmea+0x90>)
 8001374:	f004 feee 	bl	8006154 <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	18d1      	adds	r1, r2, r3
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	7bbb      	ldrb	r3, [r7, #14]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4813      	ldr	r0, [pc, #76]	@ (80013d4 <parse_nmea+0x90>)
 8001388:	f004 ff75 	bl	8006276 <memcpy>
				if(set_gps(parse_buf, order)){
 800138c:	7b7b      	ldrb	r3, [r7, #13]
 800138e:	4619      	mov	r1, r3
 8001390:	4810      	ldr	r0, [pc, #64]	@ (80013d4 <parse_nmea+0x90>)
 8001392:	f7ff feef 	bl	8001174 <set_gps>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <parse_nmea+0x5c>
					return false;
 800139c:	2300      	movs	r3, #0
 800139e:	e015      	b.n	80013cc <parse_nmea+0x88>
				}
			}
			last = i + 1;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3301      	adds	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	3301      	adds	r3, #1
 80013aa:	737b      	strb	r3, [r7, #13]
 80013ac:	e005      	b.n	80013ba <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80013b8:	d006      	beq.n	80013c8 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2bff      	cmp	r3, #255	@ 0xff
 80013c4:	d1c9      	bne.n	800135a <parse_nmea+0x16>
 80013c6:	e000      	b.n	80013ca <parse_nmea+0x86>
			break;
 80013c8:	bf00      	nop
		}
	}

	return true;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200003dc 	.word	0x200003dc

080013d8 <read_pa1010d>:

uint8_t read_pa1010d(void) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af02      	add	r7, sp, #8
	uint8_t pa1010d_i;
	uint8_t pa1010d_bytebuf;

	/* PA1010D (GPS) */
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 80013de:	2300      	movs	r3, #0
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e015      	b.n	8001410 <read_pa1010d+0x38>
		pa_ret = HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(PA_ADDRESS << 1), &pa1010d_bytebuf, 1, 100);
 80013e4:	1dba      	adds	r2, r7, #6
 80013e6:	2364      	movs	r3, #100	@ 0x64
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	2184      	movs	r1, #132	@ 0x84
 80013ee:	480f      	ldr	r0, [pc, #60]	@ (800142c <read_pa1010d+0x54>)
 80013f0:	f001 fba6 	bl	8002b40 <HAL_I2C_Master_Receive>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <read_pa1010d+0x58>)
 80013fa:	701a      	strb	r2, [r3, #0]
		if (pa1010d_bytebuf == '$'){
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	2b24      	cmp	r3, #36	@ 0x24
 8001400:	d00a      	beq.n	8001418 <read_pa1010d+0x40>
			break;
		}
		pa_buf[pa1010d_i] = pa1010d_bytebuf;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	79b9      	ldrb	r1, [r7, #6]
 8001406:	4a0b      	ldr	r2, [pc, #44]	@ (8001434 <read_pa1010d+0x5c>)
 8001408:	54d1      	strb	r1, [r2, r3]
	for(pa1010d_i=0; pa1010d_i<255; pa1010d_i++){
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3301      	adds	r3, #1
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	d1e6      	bne.n	80013e4 <read_pa1010d+0xc>
 8001416:	e000      	b.n	800141a <read_pa1010d+0x42>
			break;
 8001418:	bf00      	nop
	}
	parse_nmea(pa_buf);
 800141a:	4806      	ldr	r0, [pc, #24]	@ (8001434 <read_pa1010d+0x5c>)
 800141c:	f7ff ff92 	bl	8001344 <parse_nmea>

	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001f0 	.word	0x200001f0
 8001430:	200002d8 	.word	0x200002d8
 8001434:	200002dc 	.word	0x200002dc

08001438 <read_mmc5603>:

uint8_t read_mmc5603(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af02      	add	r7, sp, #8
    uint8_t reg_addr = MMC5603_REG_X_LSB;  // Start with X-axis LSB register
 800143e:	2300      	movs	r3, #0
 8001440:	71bb      	strb	r3, [r7, #6]
    uint8_t mmc5603_buf[6];                // Buffer to store 6 bytes of data
    uint8_t mmc5603_ret;                   // Return status of I2C communication

    // Check if MMC5603 is ready for communication
    mmc5603_ret = HAL_I2C_IsDeviceReady(&hi2c2, MMC5603_ADDRESS << 1, 3, 5);
 8001442:	2305      	movs	r3, #5
 8001444:	2203      	movs	r2, #3
 8001446:	2118      	movs	r1, #24
 8001448:	4820      	ldr	r0, [pc, #128]	@ (80014cc <read_mmc5603+0x94>)
 800144a:	f001 fdab 	bl	8002fa4 <HAL_I2C_IsDeviceReady>
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    if (mmc5603_ret == HAL_OK) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d134      	bne.n	80014c2 <read_mmc5603+0x8a>
        // Transmit the address of the X-axis LSB register
        mmc5603_ret = HAL_I2C_Master_Transmit(&hi2c2, MMC5603_ADDRESS << 1, &reg_addr, 1, 100);
 8001458:	1dba      	adds	r2, r7, #6
 800145a:	2364      	movs	r3, #100	@ 0x64
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	2118      	movs	r1, #24
 8001462:	481a      	ldr	r0, [pc, #104]	@ (80014cc <read_mmc5603+0x94>)
 8001464:	f001 fa6e 	bl	8002944 <HAL_I2C_Master_Transmit>
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
        if (mmc5603_ret == HAL_OK) {
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d127      	bne.n	80014c2 <read_mmc5603+0x8a>
            // Receive 6 bytes of data from the X, Y, and Z registers (2 bytes each)
            mmc5603_ret = HAL_I2C_Master_Receive(&hi2c2, MMC5603_ADDRESS << 1, mmc5603_buf, 6, 100);
 8001472:	463a      	mov	r2, r7
 8001474:	2364      	movs	r3, #100	@ 0x64
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2306      	movs	r3, #6
 800147a:	2118      	movs	r1, #24
 800147c:	4813      	ldr	r0, [pc, #76]	@ (80014cc <read_mmc5603+0x94>)
 800147e:	f001 fb5f 	bl	8002b40 <HAL_I2C_Master_Receive>
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]

            if (mmc5603_ret == HAL_OK) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11a      	bne.n	80014c2 <read_mmc5603+0x8a>
                // Combine the received bytes into 16-bit values for each axis
                mag_x = (int16_t)(mmc5603_buf[1] << 8 | mmc5603_buf[0]);
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b21a      	sxth	r2, r3
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21a      	sxth	r2, r3
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <read_mmc5603+0x98>)
 800149c:	801a      	strh	r2, [r3, #0]
                mag_y = (int16_t)(mmc5603_buf[3] << 8 | mmc5603_buf[2]);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	78bb      	ldrb	r3, [r7, #2]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <read_mmc5603+0x9c>)
 80014ae:	801a      	strh	r2, [r3, #0]
                mag_z = (int16_t)(mmc5603_buf[5] << 8 | mmc5603_buf[4]);
 80014b0:	797b      	ldrb	r3, [r7, #5]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	793b      	ldrb	r3, [r7, #4]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21a      	sxth	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <read_mmc5603+0xa0>)
 80014c0:	801a      	strh	r2, [r3, #0]
            }
        }
    }

    return mmc5603_ret;  // Return the I2C communication status
 80014c2:	79fb      	ldrb	r3, [r7, #7]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001f0 	.word	0x200001f0
 80014d0:	200004ee 	.word	0x200004ee
 80014d4:	200004f0 	.word	0x200004f0
 80014d8:	200004f2 	.word	0x200004f2
 80014dc:	00000000 	.word	0x00000000

080014e0 <read_mpu>:

uint8_t read_mpu() {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 80014e6:	233b      	movs	r3, #59	@ 0x3b
 80014e8:	71fb      	strb	r3, [r7, #7]
	uint8_t gyro_addr = 0x43;
 80014ea:	2343      	movs	r3, #67	@ 0x43
 80014ec:	71bb      	strb	r3, [r7, #6]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(MPU_ADDRESS<<1), 3, 5);
 80014ee:	2305      	movs	r3, #5
 80014f0:	2203      	movs	r2, #3
 80014f2:	21d2      	movs	r1, #210	@ 0xd2
 80014f4:	48b8      	ldr	r0, [pc, #736]	@ (80017d8 <read_mpu+0x2f8>)
 80014f6:	f001 fd55 	bl	8002fa4 <HAL_I2C_IsDeviceReady>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4bb7      	ldr	r3, [pc, #732]	@ (80017dc <read_mpu+0x2fc>)
 8001500:	701a      	strb	r2, [r3, #0]
    if (mpu_ret == HAL_OK){
 8001502:	4bb6      	ldr	r3, [pc, #728]	@ (80017dc <read_mpu+0x2fc>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8156 	bne.w	80017b8 <read_mpu+0x2d8>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(MPU_ADDRESS << 1), &imu_addr, 1, 100);
 800150c:	1dfa      	adds	r2, r7, #7
 800150e:	2364      	movs	r3, #100	@ 0x64
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	21d2      	movs	r1, #210	@ 0xd2
 8001516:	48b0      	ldr	r0, [pc, #704]	@ (80017d8 <read_mpu+0x2f8>)
 8001518:	f001 fa14 	bl	8002944 <HAL_I2C_Master_Transmit>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4bae      	ldr	r3, [pc, #696]	@ (80017dc <read_mpu+0x2fc>)
 8001522:	701a      	strb	r2, [r3, #0]
		if ( mpu_ret == HAL_OK ) {
 8001524:	4bad      	ldr	r3, [pc, #692]	@ (80017dc <read_mpu+0x2fc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f040 80c4 	bne.w	80016b6 <read_mpu+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, (MPU_ADDRESS << 1), &mpu_buf, 6, 100);
 800152e:	2364      	movs	r3, #100	@ 0x64
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2306      	movs	r3, #6
 8001534:	4aaa      	ldr	r2, [pc, #680]	@ (80017e0 <read_mpu+0x300>)
 8001536:	21d2      	movs	r1, #210	@ 0xd2
 8001538:	48a7      	ldr	r0, [pc, #668]	@ (80017d8 <read_mpu+0x2f8>)
 800153a:	f001 fb01 	bl	8002b40 <HAL_I2C_Master_Receive>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4ba6      	ldr	r3, [pc, #664]	@ (80017dc <read_mpu+0x2fc>)
 8001544:	701a      	strb	r2, [r3, #0]
			if ( mpu_ret == HAL_OK ) {
 8001546:	4ba5      	ldr	r3, [pc, #660]	@ (80017dc <read_mpu+0x2fc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	f040 80b3 	bne.w	80016b6 <read_mpu+0x1d6>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 8001550:	4ba3      	ldr	r3, [pc, #652]	@ (80017e0 <read_mpu+0x300>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4ba1      	ldr	r3, [pc, #644]	@ (80017e0 <read_mpu+0x300>)
 800155a:	785b      	ldrb	r3, [r3, #1]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4ba0      	ldr	r3, [pc, #640]	@ (80017e4 <read_mpu+0x304>)
 8001564:	801a      	strh	r2, [r3, #0]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 8001566:	4b9e      	ldr	r3, [pc, #632]	@ (80017e0 <read_mpu+0x300>)
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b9c      	ldr	r3, [pc, #624]	@ (80017e0 <read_mpu+0x300>)
 8001570:	78db      	ldrb	r3, [r3, #3]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b9b      	ldr	r3, [pc, #620]	@ (80017e8 <read_mpu+0x308>)
 800157a:	801a      	strh	r2, [r3, #0]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 800157c:	4b98      	ldr	r3, [pc, #608]	@ (80017e0 <read_mpu+0x300>)
 800157e:	791b      	ldrb	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	4b96      	ldr	r3, [pc, #600]	@ (80017e0 <read_mpu+0x300>)
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	4b97      	ldr	r3, [pc, #604]	@ (80017ec <read_mpu+0x30c>)
 8001590:	801a      	strh	r2, [r3, #0]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 8001592:	4b94      	ldr	r3, [pc, #592]	@ (80017e4 <read_mpu+0x304>)
 8001594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffe3 	bl	8000564 <__aeabi_i2d>
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b93      	ldr	r3, [pc, #588]	@ (80017f0 <read_mpu+0x310>)
 80015a4:	f7ff f972 	bl	800088c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb3a 	bl	8000c28 <__aeabi_d2f>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4a8f      	ldr	r2, [pc, #572]	@ (80017f4 <read_mpu+0x314>)
 80015b8:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 80015ba:	4b8b      	ldr	r3, [pc, #556]	@ (80017e8 <read_mpu+0x308>)
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffcf 	bl	8000564 <__aeabi_i2d>
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <read_mpu+0x310>)
 80015cc:	f7ff f95e 	bl	800088c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fb26 	bl	8000c28 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a86      	ldr	r2, [pc, #536]	@ (80017f8 <read_mpu+0x318>)
 80015e0:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <read_mpu+0x30c>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffbb 	bl	8000564 <__aeabi_i2d>
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b7f      	ldr	r3, [pc, #508]	@ (80017f0 <read_mpu+0x310>)
 80015f4:	f7ff f94a 	bl	800088c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fb12 	bl	8000c28 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a7d      	ldr	r2, [pc, #500]	@ (80017fc <read_mpu+0x31c>)
 8001608:	6013      	str	r3, [r2, #0]
				tilt_x = atan(accel_y/accel_z)*180/PI;
 800160a:	4b7b      	ldr	r3, [pc, #492]	@ (80017f8 <read_mpu+0x318>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	4b7a      	ldr	r3, [pc, #488]	@ (80017fc <read_mpu+0x31c>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800161a:	ee16 0a90 	vmov	r0, s13
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	ec43 2b10 	vmov	d0, r2, r3
 800162a:	f007 f8a5 	bl	8008778 <atan>
 800162e:	ec51 0b10 	vmov	r0, r1, d0
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b72      	ldr	r3, [pc, #456]	@ (8001800 <read_mpu+0x320>)
 8001638:	f7fe fffe 	bl	8000638 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	a360      	add	r3, pc, #384	@ (adr r3, 80017c8 <read_mpu+0x2e8>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7ff f91f 	bl	800088c <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff fae7 	bl	8000c28 <__aeabi_d2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4a69      	ldr	r2, [pc, #420]	@ (8001804 <read_mpu+0x324>)
 800165e:	6013      	str	r3, [r2, #0]
				tilt_y = atan(accel_x/accel_z)*180/PI;
 8001660:	4b64      	ldr	r3, [pc, #400]	@ (80017f4 <read_mpu+0x314>)
 8001662:	ed93 7a00 	vldr	s14, [r3]
 8001666:	4b65      	ldr	r3, [pc, #404]	@ (80017fc <read_mpu+0x31c>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001670:	ee16 0a90 	vmov	r0, s13
 8001674:	f7fe ff88 	bl	8000588 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ec43 2b10 	vmov	d0, r2, r3
 8001680:	f007 f87a 	bl	8008778 <atan>
 8001684:	ec51 0b10 	vmov	r0, r1, d0
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b5c      	ldr	r3, [pc, #368]	@ (8001800 <read_mpu+0x320>)
 800168e:	f7fe ffd3 	bl	8000638 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	a34b      	add	r3, pc, #300	@ (adr r3, 80017c8 <read_mpu+0x2e8>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7ff f8f4 	bl	800088c <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f7ff fabc 	bl	8000c28 <__aeabi_d2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a55      	ldr	r2, [pc, #340]	@ (8001808 <read_mpu+0x328>)
 80016b4:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(MPU_ADDRESS << 1), &gyro_addr, 1, 100);
 80016b6:	1dba      	adds	r2, r7, #6
 80016b8:	2364      	movs	r3, #100	@ 0x64
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	21d2      	movs	r1, #210	@ 0xd2
 80016c0:	4845      	ldr	r0, [pc, #276]	@ (80017d8 <read_mpu+0x2f8>)
 80016c2:	f001 f93f 	bl	8002944 <HAL_I2C_Master_Transmit>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b44      	ldr	r3, [pc, #272]	@ (80017dc <read_mpu+0x2fc>)
 80016cc:	701a      	strb	r2, [r3, #0]
		if ( mpu_ret == HAL_OK ) {
 80016ce:	4b43      	ldr	r3, [pc, #268]	@ (80017dc <read_mpu+0x2fc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d170      	bne.n	80017b8 <read_mpu+0x2d8>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c2, (MPU_ADDRESS << 1), &mpu_buf, 6, 100);
 80016d6:	2364      	movs	r3, #100	@ 0x64
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2306      	movs	r3, #6
 80016dc:	4a40      	ldr	r2, [pc, #256]	@ (80017e0 <read_mpu+0x300>)
 80016de:	21d2      	movs	r1, #210	@ 0xd2
 80016e0:	483d      	ldr	r0, [pc, #244]	@ (80017d8 <read_mpu+0x2f8>)
 80016e2:	f001 fa2d 	bl	8002b40 <HAL_I2C_Master_Receive>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b3c      	ldr	r3, [pc, #240]	@ (80017dc <read_mpu+0x2fc>)
 80016ec:	701a      	strb	r2, [r3, #0]
			if ( mpu_ret == HAL_OK ) {
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <read_mpu+0x2fc>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d160      	bne.n	80017b8 <read_mpu+0x2d8>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 80016f6:	4b3a      	ldr	r3, [pc, #232]	@ (80017e0 <read_mpu+0x300>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <read_mpu+0x300>)
 8001700:	785b      	ldrb	r3, [r3, #1]
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b40      	ldr	r3, [pc, #256]	@ (800180c <read_mpu+0x32c>)
 800170a:	801a      	strh	r2, [r3, #0]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 800170c:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <read_mpu+0x300>)
 800170e:	789b      	ldrb	r3, [r3, #2]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <read_mpu+0x300>)
 8001716:	78db      	ldrb	r3, [r3, #3]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b21a      	sxth	r2, r3
 800171e:	4b3c      	ldr	r3, [pc, #240]	@ (8001810 <read_mpu+0x330>)
 8001720:	801a      	strh	r2, [r3, #0]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 8001722:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <read_mpu+0x300>)
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <read_mpu+0x300>)
 800172c:	795b      	ldrb	r3, [r3, #5]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21a      	sxth	r2, r3
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <read_mpu+0x334>)
 8001736:	801a      	strh	r2, [r3, #0]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 8001738:	4b34      	ldr	r3, [pc, #208]	@ (800180c <read_mpu+0x32c>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff10 	bl	8000564 <__aeabi_i2d>
 8001744:	a322      	add	r3, pc, #136	@ (adr r3, 80017d0 <read_mpu+0x2f0>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7ff f89f 	bl	800088c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa67 	bl	8000c28 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	4a2e      	ldr	r2, [pc, #184]	@ (8001818 <read_mpu+0x338>)
 800175e:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 8001760:	4b2b      	ldr	r3, [pc, #172]	@ (8001810 <read_mpu+0x330>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fefc 	bl	8000564 <__aeabi_i2d>
 800176c:	a318      	add	r3, pc, #96	@ (adr r3, 80017d0 <read_mpu+0x2f0>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7ff f88b 	bl	800088c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f7ff fa53 	bl	8000c28 <__aeabi_d2f>
 8001782:	4603      	mov	r3, r0
 8001784:	4a25      	ldr	r2, [pc, #148]	@ (800181c <read_mpu+0x33c>)
 8001786:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <read_mpu+0x334>)
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fee8 	bl	8000564 <__aeabi_i2d>
 8001794:	a30e      	add	r3, pc, #56	@ (adr r3, 80017d0 <read_mpu+0x2f0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7ff f877 	bl	800088c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fa3f 	bl	8000c28 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001820 <read_mpu+0x340>)
 80017ae:	6013      	str	r3, [r2, #0]

				rot_z = gyro_z;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <read_mpu+0x340>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <read_mpu+0x344>)
 80017b6:	6013      	str	r3, [r2, #0]
			}
		}
    }


    return mpu_ret;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <read_mpu+0x2fc>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f3af 8000 	nop.w
 80017c8:	fc8b007a 	.word	0xfc8b007a
 80017cc:	400921fa 	.word	0x400921fa
 80017d0:	00000000 	.word	0x00000000
 80017d4:	40606000 	.word	0x40606000
 80017d8:	200001f0 	.word	0x200001f0
 80017dc:	2000052c 	.word	0x2000052c
 80017e0:	200004f4 	.word	0x200004f4
 80017e4:	200004fa 	.word	0x200004fa
 80017e8:	200004fc 	.word	0x200004fc
 80017ec:	200004fe 	.word	0x200004fe
 80017f0:	40d00000 	.word	0x40d00000
 80017f4:	20000500 	.word	0x20000500
 80017f8:	20000504 	.word	0x20000504
 80017fc:	20000508 	.word	0x20000508
 8001800:	40668000 	.word	0x40668000
 8001804:	20000520 	.word	0x20000520
 8001808:	20000524 	.word	0x20000524
 800180c:	2000050c 	.word	0x2000050c
 8001810:	2000050e 	.word	0x2000050e
 8001814:	20000510 	.word	0x20000510
 8001818:	20000514 	.word	0x20000514
 800181c:	20000518 	.word	0x20000518
 8001820:	2000051c 	.word	0x2000051c
 8001824:	20000528 	.word	0x20000528

08001828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182e:	f000 fc4d 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001832:	f000 f90f 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001836:	f000 f9ed 	bl	8001c14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800183a:	f000 f997 	bl	8001b6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800183e:	f000 f9bf 	bl	8001bc0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001842:	f000 f965 	bl	8001b10 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Temperature ----------------------------------------------------------
	  float temperature = read_mcp9808(); // Call the function and store the result
 8001846:	f7ff fbed 	bl	8001024 <read_mcp9808>
 800184a:	ed87 0a01 	vstr	s0, [r7, #4]

	  if (temperature != -1.0) {
 800184e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001852:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001856:	eef4 7a47 	vcmp.f32	s15, s14
 800185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185e:	d008      	beq.n	8001872 <main+0x4a>
		  // If reading is successful, process the temperature value
		  printf("Temperature: %.2f°C\n", temperature);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7fe fe91 	bl	8000588 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4856      	ldr	r0, [pc, #344]	@ (80019c4 <main+0x19c>)
 800186c:	f004 fb2a 	bl	8005ec4 <iprintf>
 8001870:	e002      	b.n	8001878 <main+0x50>
	  } else {
		  // Handle the error if the sensor reading fails
		  printf("Failed to read temperature from MCP9808\n");
 8001872:	4855      	ldr	r0, [pc, #340]	@ (80019c8 <main+0x1a0>)
 8001874:	f004 fb8e 	bl	8005f94 <puts>
	  }

	  // Voltage ----------------------------------------------------------
	  if (read_ina219() == HAL_OK) {
 8001878:	f7ff fc30 	bl	80010dc <read_ina219>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <main+0x70>
		  // If reading is successful, process the voltage value
		  // For example, print the voltage value to the console
		  printf("Bus Voltage: %.2f V\n", voltage);
 8001882:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <main+0x1a4>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe7e 	bl	8000588 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	484f      	ldr	r0, [pc, #316]	@ (80019d0 <main+0x1a8>)
 8001892:	f004 fb17 	bl	8005ec4 <iprintf>
 8001896:	e002      	b.n	800189e <main+0x76>
	  } else {
		  // Handle the error if the sensor reading fails
		  printf("Failed to read from INA219 sensor\n");
 8001898:	484e      	ldr	r0, [pc, #312]	@ (80019d4 <main+0x1ac>)
 800189a:	f004 fb7b 	bl	8005f94 <puts>
	  }

	  // Altitude and GPS ----------------------------------------------------------
	  read_pa1010d();
 800189e:	f7ff fd9b 	bl	80013d8 <read_pa1010d>

	  // Output GPS data to UART or other debug interfaces
	  printf("Time: %02d:%02d:%02d\n", gps_time_hr, gps_time_min, gps_time_sec);
 80018a2:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <main+0x1b0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	4619      	mov	r1, r3
 80018a8:	4b4c      	ldr	r3, [pc, #304]	@ (80019dc <main+0x1b4>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b4c      	ldr	r3, [pc, #304]	@ (80019e0 <main+0x1b8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	484c      	ldr	r0, [pc, #304]	@ (80019e4 <main+0x1bc>)
 80018b4:	f004 fb06 	bl	8005ec4 <iprintf>
	  printf("Latitude: %.6f %c\n", gps_latitude, gps_lat_dir);
 80018b8:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <main+0x1c0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe63 	bl	8000588 <__aeabi_f2d>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4949      	ldr	r1, [pc, #292]	@ (80019ec <main+0x1c4>)
 80018c8:	7809      	ldrb	r1, [r1, #0]
 80018ca:	9100      	str	r1, [sp, #0]
 80018cc:	4848      	ldr	r0, [pc, #288]	@ (80019f0 <main+0x1c8>)
 80018ce:	f004 faf9 	bl	8005ec4 <iprintf>
	  printf("Longitude: %.6f %c\n", gps_longitude, gps_long_dir);
 80018d2:	4b48      	ldr	r3, [pc, #288]	@ (80019f4 <main+0x1cc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe56 	bl	8000588 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4945      	ldr	r1, [pc, #276]	@ (80019f8 <main+0x1d0>)
 80018e2:	7809      	ldrb	r1, [r1, #0]
 80018e4:	9100      	str	r1, [sp, #0]
 80018e6:	4845      	ldr	r0, [pc, #276]	@ (80019fc <main+0x1d4>)
 80018e8:	f004 faec 	bl	8005ec4 <iprintf>
	  printf("Altitude: %.2f meters\n", gps_altitude);
 80018ec:	4b44      	ldr	r3, [pc, #272]	@ (8001a00 <main+0x1d8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe49 	bl	8000588 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4842      	ldr	r0, [pc, #264]	@ (8001a04 <main+0x1dc>)
 80018fc:	f004 fae2 	bl	8005ec4 <iprintf>
	  printf("Sats: %d\n", gps_sats);
 8001900:	4b41      	ldr	r3, [pc, #260]	@ (8001a08 <main+0x1e0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	4841      	ldr	r0, [pc, #260]	@ (8001a0c <main+0x1e4>)
 8001908:	f004 fadc 	bl	8005ec4 <iprintf>

	  // Magnetic Field ----------------------------------------------------------
	  uint8_t status = read_mmc5603();
 800190c:	f7ff fd94 	bl	8001438 <read_mmc5603>
 8001910:	4603      	mov	r3, r0
 8001912:	70fb      	strb	r3, [r7, #3]
	  if (status == HAL_OK) {
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10e      	bne.n	8001938 <main+0x110>
		  // Process and output the magnetic field data
		  printf("Magnetic Field - X: %d, Y: %d, Z: %d\n", mag_x, mag_y, mag_z);
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <main+0x1e8>)
 800191c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001920:	4619      	mov	r1, r3
 8001922:	4b3c      	ldr	r3, [pc, #240]	@ (8001a14 <main+0x1ec>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	461a      	mov	r2, r3
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <main+0x1f0>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	483a      	ldr	r0, [pc, #232]	@ (8001a1c <main+0x1f4>)
 8001932:	f004 fac7 	bl	8005ec4 <iprintf>
 8001936:	e002      	b.n	800193e <main+0x116>
	  } else {
		  // Handle error (e.g., print an error message)
		  printf("Error reading MMC5603 data\n");
 8001938:	4839      	ldr	r0, [pc, #228]	@ (8001a20 <main+0x1f8>)
 800193a:	f004 fb2b 	bl	8005f94 <puts>
	  }

	  // Acceleration and Gyro-----------------------------------------------------
	  read_mpu();
 800193e:	f7ff fdcf 	bl	80014e0 <read_mpu>
	  printf("Accel_x: %.2f \n", accel_x);
 8001942:	4b38      	ldr	r3, [pc, #224]	@ (8001a24 <main+0x1fc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe1e 	bl	8000588 <__aeabi_f2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4835      	ldr	r0, [pc, #212]	@ (8001a28 <main+0x200>)
 8001952:	f004 fab7 	bl	8005ec4 <iprintf>
	  printf("Accel_y: %.2f \n", accel_y);
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <main+0x204>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fe14 	bl	8000588 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4832      	ldr	r0, [pc, #200]	@ (8001a30 <main+0x208>)
 8001966:	f004 faad 	bl	8005ec4 <iprintf>
	  printf("Accel_z: %.2f \n", accel_z);
 800196a:	4b32      	ldr	r3, [pc, #200]	@ (8001a34 <main+0x20c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe0a 	bl	8000588 <__aeabi_f2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	482f      	ldr	r0, [pc, #188]	@ (8001a38 <main+0x210>)
 800197a:	f004 faa3 	bl	8005ec4 <iprintf>
	  printf("Gyro_x: %.2f \n", gyro_x);
 800197e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <main+0x214>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fe00 	bl	8000588 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	482c      	ldr	r0, [pc, #176]	@ (8001a40 <main+0x218>)
 800198e:	f004 fa99 	bl	8005ec4 <iprintf>
	  printf("Gyro_y: %.2f \n", gyro_y);
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <main+0x21c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdf6 	bl	8000588 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4829      	ldr	r0, [pc, #164]	@ (8001a48 <main+0x220>)
 80019a2:	f004 fa8f 	bl	8005ec4 <iprintf>
	  printf("Gyro_z: %.2f \n", gyro_z);
 80019a6:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <main+0x224>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdec 	bl	8000588 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4826      	ldr	r0, [pc, #152]	@ (8001a50 <main+0x228>)
 80019b6:	f004 fa85 	bl	8005ec4 <iprintf>

	  // Cameras ----------------------------------------------------------

	  HAL_Delay(1000);
 80019ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019be:	f000 fbf7 	bl	80021b0 <HAL_Delay>
  {
 80019c2:	e740      	b.n	8001846 <main+0x1e>
 80019c4:	08008ad0 	.word	0x08008ad0
 80019c8:	08008ae8 	.word	0x08008ae8
 80019cc:	200002d4 	.word	0x200002d4
 80019d0:	08008b10 	.word	0x08008b10
 80019d4:	08008b28 	.word	0x08008b28
 80019d8:	200004dd 	.word	0x200004dd
 80019dc:	200004de 	.word	0x200004de
 80019e0:	200004df 	.word	0x200004df
 80019e4:	08008b4c 	.word	0x08008b4c
 80019e8:	200004e4 	.word	0x200004e4
 80019ec:	200004db 	.word	0x200004db
 80019f0:	08008b64 	.word	0x08008b64
 80019f4:	200004e8 	.word	0x200004e8
 80019f8:	200004dc 	.word	0x200004dc
 80019fc:	08008b78 	.word	0x08008b78
 8001a00:	200004e0 	.word	0x200004e0
 8001a04:	08008b8c 	.word	0x08008b8c
 8001a08:	200004ec 	.word	0x200004ec
 8001a0c:	08008ba4 	.word	0x08008ba4
 8001a10:	200004ee 	.word	0x200004ee
 8001a14:	200004f0 	.word	0x200004f0
 8001a18:	200004f2 	.word	0x200004f2
 8001a1c:	08008bb0 	.word	0x08008bb0
 8001a20:	08008bd8 	.word	0x08008bd8
 8001a24:	20000500 	.word	0x20000500
 8001a28:	08008bf4 	.word	0x08008bf4
 8001a2c:	20000504 	.word	0x20000504
 8001a30:	08008c04 	.word	0x08008c04
 8001a34:	20000508 	.word	0x20000508
 8001a38:	08008c14 	.word	0x08008c14
 8001a3c:	20000514 	.word	0x20000514
 8001a40:	08008c24 	.word	0x08008c24
 8001a44:	20000518 	.word	0x20000518
 8001a48:	08008c34 	.word	0x08008c34
 8001a4c:	2000051c 	.word	0x2000051c
 8001a50:	08008c44 	.word	0x08008c44

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	2234      	movs	r2, #52	@ 0x34
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fb76 	bl	8006154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <SystemClock_Config+0xb4>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <SystemClock_Config+0xb4>)
 8001a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <SystemClock_Config+0xb4>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4b1c      	ldr	r3, [pc, #112]	@ (8001b0c <SystemClock_Config+0xb8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001b0c <SystemClock_Config+0xb8>)
 8001a9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <SystemClock_Config+0xb8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aac:	603b      	str	r3, [r7, #0]
 8001aae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 f901 	bl	8003ccc <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001ad0:	f000 f8c8 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ae8:	f107 0308 	add.w	r3, r7, #8
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 ff0c 	bl	800390c <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001afa:	f000 f8b3 	bl	8001c64 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3750      	adds	r7, #80	@ 0x50
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <MX_I2C2_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_I2C2_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_I2C2_Init+0x50>)
 8001b4e:	f000 fdb5 	bl	80026bc <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f884 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200001f0 	.word	0x200001f0
 8001b64:	40005800 	.word	0x40005800
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	@ (8001bbc <MX_USART1_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	f002 fb16 	bl	80041d4 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f000 f859 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000244 	.word	0x20000244
 8001bbc:	40011000 	.word	0x40011000

08001bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <MX_USART2_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf8:	f002 faec 	bl	80041d4 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c02:	f000 f82f 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000028c 	.word	0x2000028c
 8001c10:	40004400 	.word	0x40004400

08001c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a08      	ldr	r2, [pc, #32]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_GPIO_Init+0x4c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <Error_Handler+0x8>

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	@ 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_I2C_MspInit+0xa4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d13c      	bne.n	8001d5c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d04:	2312      	movs	r3, #18
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d10:	2304      	movs	r3, #4
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4814      	ldr	r0, [pc, #80]	@ (8001d6c <HAL_I2C_MspInit+0xac>)
 8001d1c:	f000 fb52 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d20:	2308      	movs	r3, #8
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d24:	2312      	movs	r3, #18
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001d30:	2309      	movs	r3, #9
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <HAL_I2C_MspInit+0xac>)
 8001d3c:	f000 fb42 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_I2C_MspInit+0xa8>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40005800 	.word	0x40005800
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400

08001d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	@ 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_UART_MspInit+0xe8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d12d      	bne.n	8001dee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001da2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a29      	ldr	r2, [pc, #164]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	481e      	ldr	r0, [pc, #120]	@ (8001e60 <HAL_UART_MspInit+0xf0>)
 8001de8:	f000 faec 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dec:	e030      	b.n	8001e50 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_UART_MspInit+0xf4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d12b      	bne.n	8001e50 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a16      	ldr	r2, [pc, #88]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_UART_MspInit+0xec>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e30:	230c      	movs	r3, #12
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e40:	2307      	movs	r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <HAL_UART_MspInit+0xf0>)
 8001e4c:	f000 faba 	bl	80023c4 <HAL_GPIO_Init>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40004400 	.word	0x40004400

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <NMI_Handler+0x4>

08001e70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e74:	bf00      	nop
 8001e76:	e7fd      	b.n	8001e74 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <MemManage_Handler+0x4>

08001e80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <BusFault_Handler+0x4>

08001e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <UsageFault_Handler+0x4>

08001e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ebe:	f000 f957 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_kill>:

int _kill(int pid, int sig)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee0:	f004 f99c 	bl	800621c <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2216      	movs	r2, #22
 8001ee8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_exit>:

void _exit (int status)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001efe:	f04f 31ff 	mov.w	r1, #4294967295
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffe7 	bl	8001ed6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <_exit+0x12>

08001f0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e00a      	b.n	8001f34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f1e:	f3af 8000 	nop.w
 8001f22:	4601      	mov	r1, r0
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	60ba      	str	r2, [r7, #8]
 8001f2a:	b2ca      	uxtb	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf0      	blt.n	8001f1e <_read+0x12>
  }

  return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e009      	b.n	8001f6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbf1      	blt.n	8001f58 <_write+0x12>
  }
  return len;
 8001f74:	687b      	ldr	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_close>:

int _close(int file)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_isatty>:

int _isatty(int file)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002018:	f004 f900 	bl	800621c <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	@ (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20040000 	.word	0x20040000
 8002048:	00000400 	.word	0x00000400
 800204c:	20000530 	.word	0x20000530
 8002050:	20000688 	.word	0x20000688

08002054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800207c:	f7ff ffea 	bl	8002054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480c      	ldr	r0, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002082:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002098:	4c0a      	ldr	r4, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a6:	f004 f8bf 	bl	8006228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020aa:	f7ff fbbd 	bl	8001828 <main>
  bx  lr    
 80020ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020b0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020bc:	080090e0 	.word	0x080090e0
  ldr r2, =_sbss
 80020c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020c4:	20000684 	.word	0x20000684

080020c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 f931 	bl	800235c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	200f      	movs	r0, #15
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fdb6 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f93b 	bl	80023aa <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 f911 	bl	8002372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	@ (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000000 	.word	0x20000000
 8002168:	20000008 	.word	0x20000008
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000008 	.word	0x20000008
 8002194:	20000534 	.word	0x20000534

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000534 	.word	0x20000534

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d005      	beq.n	80021d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <HAL_Delay+0x44>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d6:	bf00      	nop
 80021d8:	f7ff ffde 	bl	8002198 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8f7      	bhi.n	80021d8 <HAL_Delay+0x28>
  {
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000008 	.word	0x20000008

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db0a      	blt.n	8002286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2da      	uxtb	r2, r3
 8002274:	490c      	ldr	r1, [pc, #48]	@ (80022a8 <__NVIC_SetPriority+0x4c>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	0112      	lsls	r2, r2, #4
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	440b      	add	r3, r1
 8002280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002284:	e00a      	b.n	800229c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <__NVIC_SetPriority+0x50>)
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3b04      	subs	r3, #4
 8002294:	0112      	lsls	r2, r2, #4
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	440b      	add	r3, r1
 800229a:	761a      	strb	r2, [r3, #24]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000e100 	.word	0xe000e100
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f1c3 0307 	rsb	r3, r3, #7
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf28      	it	cs
 80022ce:	2304      	movcs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2b06      	cmp	r3, #6
 80022d8:	d902      	bls.n	80022e0 <NVIC_EncodePriority+0x30>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b03      	subs	r3, #3
 80022de:	e000      	b.n	80022e2 <NVIC_EncodePriority+0x32>
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	f04f 32ff 	mov.w	r2, #4294967295
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43da      	mvns	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	401a      	ands	r2, r3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	43d9      	mvns	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	4313      	orrs	r3, r2
         );
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	@ 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
	...

08002318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3b01      	subs	r3, #1
 8002324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002328:	d301      	bcc.n	800232e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232a:	2301      	movs	r3, #1
 800232c:	e00f      	b.n	800234e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232e:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <SysTick_Config+0x40>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002336:	210f      	movs	r1, #15
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	f7ff ff8e 	bl	800225c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SysTick_Config+0x40>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <SysTick_Config+0x40>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff47 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff5c 	bl	8002240 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff8e 	bl	80022b0 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5d 	bl	800225c <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffb0 	bl	8002318 <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e153      	b.n	8002688 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8142 	bne.w	8002682 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 809c 	beq.w	8002682 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b54      	ldr	r3, [pc, #336]	@ (80026a0 <HAL_GPIO_Init+0x2dc>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a53      	ldr	r2, [pc, #332]	@ (80026a0 <HAL_GPIO_Init+0x2dc>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b51      	ldr	r3, [pc, #324]	@ (80026a0 <HAL_GPIO_Init+0x2dc>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a4f      	ldr	r2, [pc, #316]	@ (80026a4 <HAL_GPIO_Init+0x2e0>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a46      	ldr	r2, [pc, #280]	@ (80026a8 <HAL_GPIO_Init+0x2e4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x1f6>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a45      	ldr	r2, [pc, #276]	@ (80026ac <HAL_GPIO_Init+0x2e8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x1f2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a44      	ldr	r2, [pc, #272]	@ (80026b0 <HAL_GPIO_Init+0x2ec>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x1ee>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a43      	ldr	r2, [pc, #268]	@ (80026b4 <HAL_GPIO_Init+0x2f0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x1ea>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x1f8>
 80025ae:	2307      	movs	r3, #7
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x1f8>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x1f8>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x1f8>
 80025ba:	2300      	movs	r3, #0
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025cc:	4935      	ldr	r1, [pc, #212]	@ (80026a4 <HAL_GPIO_Init+0x2e0>)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4b37      	ldr	r3, [pc, #220]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025fe:	4a2e      	ldr	r2, [pc, #184]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002604:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002628:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800262e:	4b22      	ldr	r3, [pc, #136]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002652:	4a19      	ldr	r2, [pc, #100]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002658:	4b17      	ldr	r3, [pc, #92]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800267c:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_GPIO_Init+0x2f4>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3301      	adds	r3, #1
 8002686:	61fb      	str	r3, [r7, #28]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b0f      	cmp	r3, #15
 800268c:	f67f aea8 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400
 80026b0:	40020800 	.word	0x40020800
 80026b4:	40020c00 	.word	0x40020c00
 80026b8:	40013c00 	.word	0x40013c00

080026bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e12b      	b.n	8002926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff faec 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2224      	movs	r2, #36	@ 0x24
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800270e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800271e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002720:	f001 faac 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8002724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	4a81      	ldr	r2, [pc, #516]	@ (8002930 <HAL_I2C_Init+0x274>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d807      	bhi.n	8002740 <HAL_I2C_Init+0x84>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a80      	ldr	r2, [pc, #512]	@ (8002934 <HAL_I2C_Init+0x278>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	e006      	b.n	800274e <HAL_I2C_Init+0x92>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a7d      	ldr	r2, [pc, #500]	@ (8002938 <HAL_I2C_Init+0x27c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	bf94      	ite	ls
 8002748:	2301      	movls	r3, #1
 800274a:	2300      	movhi	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0e7      	b.n	8002926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a78      	ldr	r2, [pc, #480]	@ (800293c <HAL_I2C_Init+0x280>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0c9b      	lsrs	r3, r3, #18
 8002760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a6a      	ldr	r2, [pc, #424]	@ (8002930 <HAL_I2C_Init+0x274>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d802      	bhi.n	8002790 <HAL_I2C_Init+0xd4>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3301      	adds	r3, #1
 800278e:	e009      	b.n	80027a4 <HAL_I2C_Init+0xe8>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	4a69      	ldr	r2, [pc, #420]	@ (8002940 <HAL_I2C_Init+0x284>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	3301      	adds	r3, #1
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	495c      	ldr	r1, [pc, #368]	@ (8002930 <HAL_I2C_Init+0x274>)
 80027c0:	428b      	cmp	r3, r1
 80027c2:	d819      	bhi.n	80027f8 <HAL_I2C_Init+0x13c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1e59      	subs	r1, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027d8:	400b      	ands	r3, r1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_I2C_Init+0x138>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e59      	subs	r1, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f2:	e051      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e04f      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d111      	bne.n	8002824 <HAL_I2C_Init+0x168>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e58      	subs	r0, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	e012      	b.n	800284a <HAL_I2C_Init+0x18e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e58      	subs	r0, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	0099      	lsls	r1, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	fbb0 f3f3 	udiv	r3, r0, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Init+0x196>
 800284e:	2301      	movs	r3, #1
 8002850:	e022      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10e      	bne.n	8002878 <HAL_I2C_Init+0x1bc>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1e58      	subs	r0, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	440b      	add	r3, r1
 8002868:	fbb0 f3f3 	udiv	r3, r0, r3
 800286c:	3301      	adds	r3, #1
 800286e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002876:	e00f      	b.n	8002898 <HAL_I2C_Init+0x1dc>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e58      	subs	r0, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	0099      	lsls	r1, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	fbb0 f3f3 	udiv	r3, r0, r3
 800288e:	3301      	adds	r3, #1
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	6809      	ldr	r1, [r1, #0]
 800289c:	4313      	orrs	r3, r2
 800289e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6911      	ldr	r1, [r2, #16]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	000186a0 	.word	0x000186a0
 8002934:	001e847f 	.word	0x001e847f
 8002938:	003d08ff 	.word	0x003d08ff
 800293c:	431bde83 	.word	0x431bde83
 8002940:	10624dd3 	.word	0x10624dd3

08002944 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002958:	f7ff fc1e 	bl	8002198 <HAL_GetTick>
 800295c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b20      	cmp	r3, #32
 8002968:	f040 80e0 	bne.w	8002b2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2319      	movs	r3, #25
 8002972:	2201      	movs	r2, #1
 8002974:	4970      	ldr	r1, [pc, #448]	@ (8002b38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fd92 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	e0d3      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_I2C_Master_Transmit+0x50>
 8002990:	2302      	movs	r3, #2
 8002992:	e0cc      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d007      	beq.n	80029ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0201 	orr.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	@ 0x21
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2210      	movs	r2, #16
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a50      	ldr	r2, [pc, #320]	@ (8002b3c <HAL_I2C_Master_Transmit+0x1f8>)
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029fc:	8979      	ldrh	r1, [r7, #10]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fbfc 	bl	8003200 <I2C_MasterRequestWrite>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e08d      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a28:	e066      	b.n	8002af8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	6a39      	ldr	r1, [r7, #32]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fe50 	bl	80036d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d107      	bne.n	8002a52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06b      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d11b      	bne.n	8002acc <HAL_I2C_Master_Transmit+0x188>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d017      	beq.n	8002acc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	6a39      	ldr	r1, [r7, #32]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fe47 	bl	8003764 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d107      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e01a      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d194      	bne.n	8002a2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	00100002 	.word	0x00100002
 8002b3c:	ffff0000 	.word	0xffff0000

08002b40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08c      	sub	sp, #48	@ 0x30
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	817b      	strh	r3, [r7, #10]
 8002b50:	4613      	mov	r3, r2
 8002b52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff fb20 	bl	8002198 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	f040 8217 	bne.w	8002f96 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2319      	movs	r3, #25
 8002b6e:	2201      	movs	r2, #1
 8002b70:	497c      	ldr	r1, [pc, #496]	@ (8002d64 <HAL_I2C_Master_Receive+0x224>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fc94 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e20a      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2C_Master_Receive+0x50>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e203      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d007      	beq.n	8002bb6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2222      	movs	r2, #34	@ 0x22
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	893a      	ldrh	r2, [r7, #8]
 8002be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	@ (8002d68 <HAL_I2C_Master_Receive+0x228>)
 8002bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fb80 	bl	8003304 <I2C_MasterRequestRead>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e1c4      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	623b      	str	r3, [r7, #32]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e198      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d11b      	bne.n	8002c7e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e178      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d11b      	bne.n	8002cbe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	e158      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ce4:	e144      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	f200 80f1 	bhi.w	8002ed2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d123      	bne.n	8002d40 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fd79 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e145      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d3e:	e117      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d14e      	bne.n	8002de6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	2200      	movs	r2, #0
 8002d50:	4906      	ldr	r1, [pc, #24]	@ (8002d6c <HAL_I2C_Master_Receive+0x22c>)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fba4 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e11a      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
 8002d62:	bf00      	nop
 8002d64:	00100002 	.word	0x00100002
 8002d68:	ffff0000 	.word	0xffff0000
 8002d6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002de4:	e0c4      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	496c      	ldr	r1, [pc, #432]	@ (8002fa0 <HAL_I2C_Master_Receive+0x460>)
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fb55 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0cb      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4955      	ldr	r1, [pc, #340]	@ (8002fa0 <HAL_I2C_Master_Receive+0x460>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fb27 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e09d      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ed0:	e04e      	b.n	8002f70 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fc8c 	bl	80037f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e058      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d124      	bne.n	8002f70 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f aeb6 	bne.w	8002ce6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3728      	adds	r7, #40	@ 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	00010004 	.word	0x00010004

08002fa4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff f8f0 	bl	8002198 <HAL_GetTick>
 8002fb8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	f040 8111 	bne.w	80031ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2319      	movs	r3, #25
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4988      	ldr	r1, [pc, #544]	@ (80031f8 <HAL_I2C_IsDeviceReady+0x254>)
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa62 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e104      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_I2C_IsDeviceReady+0x50>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e0fd      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	d007      	beq.n	800301a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2224      	movs	r2, #36	@ 0x24
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a70      	ldr	r2, [pc, #448]	@ (80031fc <HAL_I2C_IsDeviceReady+0x258>)
 800303c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800304c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa20 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003074:	d103      	bne.n	800307e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0b6      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003090:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003092:	f7ff f881 	bl	8002198 <HAL_GetTick>
 8003096:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030c6:	e025      	b.n	8003114 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7ff f866 	bl	8002198 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <HAL_I2C_IsDeviceReady+0x13a>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	22a0      	movs	r2, #160	@ 0xa0
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2ba0      	cmp	r3, #160	@ 0xa0
 800311e:	d005      	beq.n	800312c <HAL_I2C_IsDeviceReady+0x188>
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_I2C_IsDeviceReady+0x188>
 8003126:	7dbb      	ldrb	r3, [r7, #22]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0cd      	beq.n	80030c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b02      	cmp	r3, #2
 8003140:	d129      	bne.n	8003196 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003150:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2319      	movs	r3, #25
 800316e:	2201      	movs	r2, #1
 8003170:	4921      	ldr	r1, [pc, #132]	@ (80031f8 <HAL_I2C_IsDeviceReady+0x254>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f994 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e036      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2220      	movs	r2, #32
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e02c      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2319      	movs	r3, #25
 80031b6:	2201      	movs	r2, #1
 80031b8:	490f      	ldr	r1, [pc, #60]	@ (80031f8 <HAL_I2C_IsDeviceReady+0x254>)
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f970 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e012      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	3301      	adds	r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	f4ff af32 	bcc.w	800303e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d006      	beq.n	800322a <I2C_MasterRequestWrite+0x2a>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d003      	beq.n	800322a <I2C_MasterRequestWrite+0x2a>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003228:	d108      	bne.n	800323c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00b      	b.n	8003254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	2b12      	cmp	r3, #18
 8003242:	d107      	bne.n	8003254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f91d 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327a:	d103      	bne.n	8003284 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e035      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003290:	d108      	bne.n	80032a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	e01b      	b.n	80032dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032a4:	897b      	ldrh	r3, [r7, #10]
 80032a6:	11db      	asrs	r3, r3, #7
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0306 	and.w	r3, r3, #6
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f063 030f 	orn	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	490e      	ldr	r1, [pc, #56]	@ (80032fc <I2C_MasterRequestWrite+0xfc>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f966 	bl	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e010      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4907      	ldr	r1, [pc, #28]	@ (8003300 <I2C_MasterRequestWrite+0x100>)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f956 	bl	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	00010008 	.word	0x00010008
 8003300:	00010002 	.word	0x00010002

08003304 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	460b      	mov	r3, r1
 8003312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003328:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d006      	beq.n	800333e <I2C_MasterRequestRead+0x3a>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d003      	beq.n	800333e <I2C_MasterRequestRead+0x3a>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800333c:	d108      	bne.n	8003350 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e00b      	b.n	8003368 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	2b11      	cmp	r3, #17
 8003356:	d107      	bne.n	8003368 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003366:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f893 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338e:	d103      	bne.n	8003398 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e079      	b.n	8003490 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033a4:	d108      	bne.n	80033b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	e05f      	b.n	8003478 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	11db      	asrs	r3, r3, #7
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 0306 	and.w	r3, r3, #6
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f063 030f 	orn	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4930      	ldr	r1, [pc, #192]	@ (8003498 <I2C_MasterRequestRead+0x194>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8dc 	bl	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e054      	b.n	8003490 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4929      	ldr	r1, [pc, #164]	@ (800349c <I2C_MasterRequestRead+0x198>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8cc 	bl	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e044      	b.n	8003490 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f831 	bl	80034a0 <I2C_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003452:	d103      	bne.n	800345c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e017      	b.n	8003490 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003460:	897b      	ldrh	r3, [r7, #10]
 8003462:	11db      	asrs	r3, r3, #7
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 0306 	and.w	r3, r3, #6
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f063 030e 	orn	r3, r3, #14
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4907      	ldr	r1, [pc, #28]	@ (800349c <I2C_MasterRequestRead+0x198>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f888 	bl	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	00010008 	.word	0x00010008
 800349c:	00010002 	.word	0x00010002

080034a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b0:	e048      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d044      	beq.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fe6d 	bl	8002198 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d139      	bne.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d10d      	bne.n	80034f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	e00c      	b.n	8003510 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	43da      	mvns	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	d116      	bne.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e023      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d10d      	bne.n	800356a <I2C_WaitOnFlagUntilTimeout+0xca>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	43da      	mvns	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	4013      	ands	r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf0c      	ite	eq
 8003560:	2301      	moveq	r3, #1
 8003562:	2300      	movne	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	e00c      	b.n	8003584 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	d093      	beq.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a2:	e071      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b2:	d123      	bne.n	80035fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f043 0204 	orr.w	r2, r3, #4
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e067      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d041      	beq.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7fe fdc8 	bl	8002198 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d302      	bcc.n	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d136      	bne.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10c      	bne.n	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e00b      	b.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	43da      	mvns	r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4013      	ands	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf14      	ite	ne
 8003650:	2301      	movne	r3, #1
 8003652:	2300      	moveq	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e021      	b.n	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0c1b      	lsrs	r3, r3, #16
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10c      	bne.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	e00b      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4013      	ands	r3, r2
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f af6d 	bne.w	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e0:	e034      	b.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f8e3 	bl	80038ae <I2C_IsAcknowledgeFailed>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e034      	b.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d028      	beq.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe fd4d 	bl	8002198 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b80      	cmp	r3, #128	@ 0x80
 800371c:	d016      	beq.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e007      	b.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d1c3      	bne.n	80036e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003770:	e034      	b.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f89b 	bl	80038ae <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e034      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d028      	beq.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe fd05 	bl	8002198 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11d      	bne.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d016      	beq.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d1c3      	bne.n	8003772 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003800:	e049      	b.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d119      	bne.n	8003844 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e030      	b.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003844:	f7fe fca8 	bl	8002198 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d302      	bcc.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003864:	2b40      	cmp	r3, #64	@ 0x40
 8003866:	d016      	beq.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e007      	b.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d1ae      	bne.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c4:	d11b      	bne.n	80038fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0cc      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b68      	ldr	r3, [pc, #416]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d90c      	bls.n	8003948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b65      	ldr	r3, [pc, #404]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b63      	ldr	r3, [pc, #396]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b8      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003960:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a58      	ldr	r2, [pc, #352]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800396a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003978:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a52      	ldr	r2, [pc, #328]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b50      	ldr	r3, [pc, #320]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	494d      	ldr	r1, [pc, #308]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d044      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d119      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e06f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e067      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4934      	ldr	r1, [pc, #208]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039fc:	f7fe fbcc 	bl	8002198 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fe fbc8 	bl	8002198 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e04f      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b25      	ldr	r3, [pc, #148]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d20c      	bcs.n	8003a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b22      	ldr	r3, [pc, #136]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a42:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d001      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e032      	b.n	8003aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a60:	4b19      	ldr	r3, [pc, #100]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4916      	ldr	r1, [pc, #88]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	490e      	ldr	r1, [pc, #56]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a92:	f000 f821 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a96:	4602      	mov	r2, r0
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	490a      	ldr	r1, [pc, #40]	@ (8003acc <HAL_RCC_ClockConfig+0x1c0>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fb2c 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023c00 	.word	0x40023c00
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08008c54 	.word	0x08008c54
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b090      	sub	sp, #64	@ 0x40
 8003ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae8:	2300      	movs	r3, #0
 8003aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af0:	4b59      	ldr	r3, [pc, #356]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d00d      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x40>
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	f200 80a1 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b0a:	e09b      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b0c:	4b53      	ldr	r3, [pc, #332]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003b10:	e09b      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b12:	4b53      	ldr	r3, [pc, #332]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b16:	e098      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b18:	4b4f      	ldr	r3, [pc, #316]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b22:	4b4d      	ldr	r3, [pc, #308]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	099b      	lsrs	r3, r3, #6
 8003b34:	2200      	movs	r2, #0
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b40:	2100      	movs	r1, #0
 8003b42:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b44:	fb03 f201 	mul.w	r2, r3, r1
 8003b48:	2300      	movs	r3, #0
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a43      	ldr	r2, [pc, #268]	@ (8003c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b52:	fba0 1202 	umull	r1, r2, r0, r2
 8003b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b58:	460a      	mov	r2, r1
 8003b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5e:	4413      	add	r3, r2
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	2200      	movs	r2, #0
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b72:	f7fd f8a9 	bl	8000cc8 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7e:	e053      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b80:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	2200      	movs	r2, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	617a      	str	r2, [r7, #20]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b92:	f04f 0b00 	mov.w	fp, #0
 8003b96:	4652      	mov	r2, sl
 8003b98:	465b      	mov	r3, fp
 8003b9a:	f04f 0000 	mov.w	r0, #0
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	0159      	lsls	r1, r3, #5
 8003ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba8:	0150      	lsls	r0, r2, #5
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	ebb2 080a 	subs.w	r8, r2, sl
 8003bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bca:	ebb2 0408 	subs.w	r4, r2, r8
 8003bce:	eb63 0509 	sbc.w	r5, r3, r9
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	00eb      	lsls	r3, r5, #3
 8003bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be0:	00e2      	lsls	r2, r4, #3
 8003be2:	4614      	mov	r4, r2
 8003be4:	461d      	mov	r5, r3
 8003be6:	eb14 030a 	adds.w	r3, r4, sl
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	eb45 030b 	adc.w	r3, r5, fp
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	028b      	lsls	r3, r1, #10
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c08:	4621      	mov	r1, r4
 8003c0a:	028a      	lsls	r2, r1, #10
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c12:	2200      	movs	r2, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c1c:	f7fd f854 	bl	8000cc8 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4613      	mov	r3, r2
 8003c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c28:	4b0b      	ldr	r3, [pc, #44]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3740      	adds	r7, #64	@ 0x40
 8003c50:	46bd      	mov	sp, r7
 8003c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	017d7840 	.word	0x017d7840

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000000 	.word	0x20000000

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c80:	f7ff fff0 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a9b      	lsrs	r3, r3, #10
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08008c64 	.word	0x08008c64

08003ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca8:	f7ff ffdc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cac:	4602      	mov	r2, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0b5b      	lsrs	r3, r3, #13
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4903      	ldr	r1, [pc, #12]	@ (8003cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cba:	5ccb      	ldrb	r3, [r1, r3]
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	08008c64 	.word	0x08008c64

08003ccc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e273      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d075      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cea:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d00c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b85      	ldr	r3, [pc, #532]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d112      	bne.n	8003d28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d02:	4b82      	ldr	r3, [pc, #520]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	4b7e      	ldr	r3, [pc, #504]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d05b      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x108>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d157      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e24e      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	d106      	bne.n	8003d40 <HAL_RCC_OscConfig+0x74>
 8003d32:	4b76      	ldr	r3, [pc, #472]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a75      	ldr	r2, [pc, #468]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e01d      	b.n	8003d7c <HAL_RCC_OscConfig+0xb0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x98>
 8003d4a:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b6d      	ldr	r3, [pc, #436]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6c      	ldr	r2, [pc, #432]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_OscConfig+0xb0>
 8003d64:	4b69      	ldr	r3, [pc, #420]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a68      	ldr	r2, [pc, #416]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b66      	ldr	r3, [pc, #408]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a65      	ldr	r2, [pc, #404]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fe fa08 	bl	8002198 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fe fa04 	bl	8002198 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	@ 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e213      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0xc0>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe f9f4 	bl	8002198 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe f9f0 	bl	8002198 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e1ff      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc6:	4b51      	ldr	r3, [pc, #324]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0xe8>
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d063      	beq.n	8003eaa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003de2:	4b4a      	ldr	r3, [pc, #296]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b47      	ldr	r3, [pc, #284]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d11c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfa:	4b44      	ldr	r3, [pc, #272]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d116      	bne.n	8003e34 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e06:	4b41      	ldr	r3, [pc, #260]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_RCC_OscConfig+0x152>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d001      	beq.n	8003e1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e1d3      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4937      	ldr	r1, [pc, #220]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e32:	e03a      	b.n	8003eaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d020      	beq.n	8003e7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3c:	4b34      	ldr	r3, [pc, #208]	@ (8003f10 <HAL_RCC_OscConfig+0x244>)
 8003e3e:	2201      	movs	r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fe f9a9 	bl	8002198 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7fe f9a5 	bl	8002198 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e1b4      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4925      	ldr	r1, [pc, #148]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]
 8003e7c:	e015      	b.n	8003eaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_OscConfig+0x244>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe f988 	bl	8002198 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8c:	f7fe f984 	bl	8002198 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e193      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d036      	beq.n	8003f24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d016      	beq.n	8003eec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ebe:	4b15      	ldr	r3, [pc, #84]	@ (8003f14 <HAL_RCC_OscConfig+0x248>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe f968 	bl	8002198 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fe f964 	bl	8002198 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e173      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ede:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCC_OscConfig+0x240>)
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x200>
 8003eea:	e01b      	b.n	8003f24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_OscConfig+0x248>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe f951 	bl	8002198 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	e00e      	b.n	8003f18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fe f94d 	bl	8002198 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d907      	bls.n	8003f18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e15c      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	42470000 	.word	0x42470000
 8003f14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b8a      	ldr	r3, [pc, #552]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ea      	bne.n	8003efa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8097 	beq.w	8004060 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f36:	4b83      	ldr	r3, [pc, #524]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	4b7f      	ldr	r3, [pc, #508]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f52:	4b7c      	ldr	r3, [pc, #496]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f62:	4b79      	ldr	r3, [pc, #484]	@ (8004148 <HAL_RCC_OscConfig+0x47c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d118      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6e:	4b76      	ldr	r3, [pc, #472]	@ (8004148 <HAL_RCC_OscConfig+0x47c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a75      	ldr	r2, [pc, #468]	@ (8004148 <HAL_RCC_OscConfig+0x47c>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7a:	f7fe f90d 	bl	8002198 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f82:	f7fe f909 	bl	8002198 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e118      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	4b6c      	ldr	r3, [pc, #432]	@ (8004148 <HAL_RCC_OscConfig+0x47c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2ea>
 8003fa8:	4b66      	ldr	r3, [pc, #408]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4a65      	ldr	r2, [pc, #404]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x324>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b05      	cmp	r3, #5
 8003fbc:	d10c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x30c>
 8003fbe:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a60      	ldr	r2, [pc, #384]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fc4:	f043 0304 	orr.w	r3, r3, #4
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	4b5e      	ldr	r3, [pc, #376]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	4a5d      	ldr	r2, [pc, #372]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd6:	e00b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x324>
 8003fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a59      	ldr	r2, [pc, #356]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe4:	4b57      	ldr	r3, [pc, #348]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	4a56      	ldr	r2, [pc, #344]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fe f8ce 	bl	8002198 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe f8ca 	bl	8002198 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0d7      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	4b4b      	ldr	r3, [pc, #300]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ee      	beq.n	8004000 <HAL_RCC_OscConfig+0x334>
 8004022:	e014      	b.n	800404e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fe f8b8 	bl	8002198 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	e00a      	b.n	8004042 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800402c:	f7fe f8b4 	bl	8002198 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e0c1      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004042:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ee      	bne.n	800402c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d105      	bne.n	8004060 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004054:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	4a3a      	ldr	r2, [pc, #232]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 800405a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800405e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80ad 	beq.w	80041c4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800406a:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b08      	cmp	r3, #8
 8004074:	d060      	beq.n	8004138 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d145      	bne.n	800410a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407e:	4b33      	ldr	r3, [pc, #204]	@ (800414c <HAL_RCC_OscConfig+0x480>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f888 	bl	8002198 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe f884 	bl	8002198 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e093      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	4b29      	ldr	r3, [pc, #164]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	019b      	lsls	r3, r3, #6
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040cc:	061b      	lsls	r3, r3, #24
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	071b      	lsls	r3, r3, #28
 80040d6:	491b      	ldr	r1, [pc, #108]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <HAL_RCC_OscConfig+0x480>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fe f859 	bl	8002198 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe f855 	bl	8002198 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e064      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x41e>
 8004108:	e05c      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_RCC_OscConfig+0x480>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fe f842 	bl	8002198 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe f83e 	bl	8002198 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e04d      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x478>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x44c>
 8004136:	e045      	b.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e040      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
 800414c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004150:	4b1f      	ldr	r3, [pc, #124]	@ (80041d0 <HAL_RCC_OscConfig+0x504>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d030      	beq.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d129      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d122      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	4293      	cmp	r3, r2
 800418a:	d119      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d10f      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e042      	b.n	800426c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fdb8 	bl	8001d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	@ 0x24
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f82b 	bl	8004274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800422c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800423c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800424c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b0c0      	sub	sp, #256	@ 0x100
 800427a:	af00      	add	r7, sp, #0
 800427c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	68d9      	ldr	r1, [r3, #12]
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	ea40 0301 	orr.w	r3, r0, r1
 800429c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042cc:	f021 010c 	bic.w	r1, r1, #12
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042da:	430b      	orrs	r3, r1
 80042dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	6999      	ldr	r1, [r3, #24]
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	ea40 0301 	orr.w	r3, r0, r1
 80042fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b8f      	ldr	r3, [pc, #572]	@ (8004540 <UART_SetConfig+0x2cc>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <UART_SetConfig+0xa0>
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8d      	ldr	r3, [pc, #564]	@ (8004544 <UART_SetConfig+0x2d0>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d104      	bne.n	800431e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004314:	f7ff fcc6 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004318:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800431c:	e003      	b.n	8004326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800431e:	f7ff fcad 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8004322:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004330:	f040 810c 	bne.w	800454c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800433e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	1891      	adds	r1, r2, r2
 800434c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800434e:	415b      	adcs	r3, r3
 8004350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004356:	4621      	mov	r1, r4
 8004358:	eb12 0801 	adds.w	r8, r2, r1
 800435c:	4629      	mov	r1, r5
 800435e:	eb43 0901 	adc.w	r9, r3, r1
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800436e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004376:	4690      	mov	r8, r2
 8004378:	4699      	mov	r9, r3
 800437a:	4623      	mov	r3, r4
 800437c:	eb18 0303 	adds.w	r3, r8, r3
 8004380:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004384:	462b      	mov	r3, r5
 8004386:	eb49 0303 	adc.w	r3, r9, r3
 800438a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800439a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800439e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043a2:	460b      	mov	r3, r1
 80043a4:	18db      	adds	r3, r3, r3
 80043a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a8:	4613      	mov	r3, r2
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80043b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043b8:	f7fc fc86 	bl	8000cc8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b61      	ldr	r3, [pc, #388]	@ (8004548 <UART_SetConfig+0x2d4>)
 80043c2:	fba3 2302 	umull	r2, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	011c      	lsls	r4, r3, #4
 80043ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	1891      	adds	r1, r2, r2
 80043e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043e4:	415b      	adcs	r3, r3
 80043e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043ec:	4641      	mov	r1, r8
 80043ee:	eb12 0a01 	adds.w	sl, r2, r1
 80043f2:	4649      	mov	r1, r9
 80043f4:	eb43 0b01 	adc.w	fp, r3, r1
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800440c:	4692      	mov	sl, r2
 800440e:	469b      	mov	fp, r3
 8004410:	4643      	mov	r3, r8
 8004412:	eb1a 0303 	adds.w	r3, sl, r3
 8004416:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800441a:	464b      	mov	r3, r9
 800441c:	eb4b 0303 	adc.w	r3, fp, r3
 8004420:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004430:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004438:	460b      	mov	r3, r1
 800443a:	18db      	adds	r3, r3, r3
 800443c:	643b      	str	r3, [r7, #64]	@ 0x40
 800443e:	4613      	mov	r3, r2
 8004440:	eb42 0303 	adc.w	r3, r2, r3
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800444a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800444e:	f7fc fc3b 	bl	8000cc8 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4611      	mov	r1, r2
 8004458:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <UART_SetConfig+0x2d4>)
 800445a:	fba3 2301 	umull	r2, r3, r3, r1
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2264      	movs	r2, #100	@ 0x64
 8004462:	fb02 f303 	mul.w	r3, r2, r3
 8004466:	1acb      	subs	r3, r1, r3
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800446e:	4b36      	ldr	r3, [pc, #216]	@ (8004548 <UART_SetConfig+0x2d4>)
 8004470:	fba3 2302 	umull	r2, r3, r3, r2
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800447c:	441c      	add	r4, r3
 800447e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004488:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800448c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004490:	4642      	mov	r2, r8
 8004492:	464b      	mov	r3, r9
 8004494:	1891      	adds	r1, r2, r2
 8004496:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004498:	415b      	adcs	r3, r3
 800449a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800449c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044a0:	4641      	mov	r1, r8
 80044a2:	1851      	adds	r1, r2, r1
 80044a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044a6:	4649      	mov	r1, r9
 80044a8:	414b      	adcs	r3, r1
 80044aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044b8:	4659      	mov	r1, fp
 80044ba:	00cb      	lsls	r3, r1, #3
 80044bc:	4651      	mov	r1, sl
 80044be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044c2:	4651      	mov	r1, sl
 80044c4:	00ca      	lsls	r2, r1, #3
 80044c6:	4610      	mov	r0, r2
 80044c8:	4619      	mov	r1, r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	4642      	mov	r2, r8
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044d4:	464b      	mov	r3, r9
 80044d6:	460a      	mov	r2, r1
 80044d8:	eb42 0303 	adc.w	r3, r2, r3
 80044dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800450a:	f7fc fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4b0d      	ldr	r3, [pc, #52]	@ (8004548 <UART_SetConfig+0x2d4>)
 8004514:	fba3 1302 	umull	r1, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2164      	movs	r1, #100	@ 0x64
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	3332      	adds	r3, #50	@ 0x32
 8004526:	4a08      	ldr	r2, [pc, #32]	@ (8004548 <UART_SetConfig+0x2d4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	f003 0207 	and.w	r2, r3, #7
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4422      	add	r2, r4
 800453a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800453c:	e106      	b.n	800474c <UART_SetConfig+0x4d8>
 800453e:	bf00      	nop
 8004540:	40011000 	.word	0x40011000
 8004544:	40011400 	.word	0x40011400
 8004548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004556:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800455a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	6239      	str	r1, [r7, #32]
 8004566:	415b      	adcs	r3, r3
 8004568:	627b      	str	r3, [r7, #36]	@ 0x24
 800456a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800456e:	4641      	mov	r1, r8
 8004570:	1854      	adds	r4, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0501 	adc.w	r5, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	00eb      	lsls	r3, r5, #3
 8004582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004586:	00e2      	lsls	r2, r4, #3
 8004588:	4614      	mov	r4, r2
 800458a:	461d      	mov	r5, r3
 800458c:	4643      	mov	r3, r8
 800458e:	18e3      	adds	r3, r4, r3
 8004590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004594:	464b      	mov	r3, r9
 8004596:	eb45 0303 	adc.w	r3, r5, r3
 800459a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045ba:	4629      	mov	r1, r5
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4621      	mov	r1, r4
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045cc:	f7fc fb7c 	bl	8000cc8 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b60      	ldr	r3, [pc, #384]	@ (8004758 <UART_SetConfig+0x4e4>)
 80045d6:	fba3 2302 	umull	r2, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	011c      	lsls	r4, r3, #4
 80045de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045f0:	4642      	mov	r2, r8
 80045f2:	464b      	mov	r3, r9
 80045f4:	1891      	adds	r1, r2, r2
 80045f6:	61b9      	str	r1, [r7, #24]
 80045f8:	415b      	adcs	r3, r3
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004600:	4641      	mov	r1, r8
 8004602:	1851      	adds	r1, r2, r1
 8004604:	6139      	str	r1, [r7, #16]
 8004606:	4649      	mov	r1, r9
 8004608:	414b      	adcs	r3, r1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004618:	4659      	mov	r1, fp
 800461a:	00cb      	lsls	r3, r1, #3
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004622:	4651      	mov	r1, sl
 8004624:	00ca      	lsls	r2, r1, #3
 8004626:	4610      	mov	r0, r2
 8004628:	4619      	mov	r1, r3
 800462a:	4603      	mov	r3, r0
 800462c:	4642      	mov	r2, r8
 800462e:	189b      	adds	r3, r3, r2
 8004630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004634:	464b      	mov	r3, r9
 8004636:	460a      	mov	r2, r1
 8004638:	eb42 0303 	adc.w	r3, r2, r3
 800463c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	67bb      	str	r3, [r7, #120]	@ 0x78
 800464a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004658:	4649      	mov	r1, r9
 800465a:	008b      	lsls	r3, r1, #2
 800465c:	4641      	mov	r1, r8
 800465e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004662:	4641      	mov	r1, r8
 8004664:	008a      	lsls	r2, r1, #2
 8004666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800466a:	f7fc fb2d 	bl	8000cc8 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4611      	mov	r1, r2
 8004674:	4b38      	ldr	r3, [pc, #224]	@ (8004758 <UART_SetConfig+0x4e4>)
 8004676:	fba3 2301 	umull	r2, r3, r3, r1
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2264      	movs	r2, #100	@ 0x64
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	1acb      	subs	r3, r1, r3
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	3332      	adds	r3, #50	@ 0x32
 8004688:	4a33      	ldr	r2, [pc, #204]	@ (8004758 <UART_SetConfig+0x4e4>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004694:	441c      	add	r4, r3
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	673b      	str	r3, [r7, #112]	@ 0x70
 800469e:	677a      	str	r2, [r7, #116]	@ 0x74
 80046a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046a4:	4642      	mov	r2, r8
 80046a6:	464b      	mov	r3, r9
 80046a8:	1891      	adds	r1, r2, r2
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	415b      	adcs	r3, r3
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b4:	4641      	mov	r1, r8
 80046b6:	1851      	adds	r1, r2, r1
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	4649      	mov	r1, r9
 80046bc:	414b      	adcs	r3, r1
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046cc:	4659      	mov	r1, fp
 80046ce:	00cb      	lsls	r3, r1, #3
 80046d0:	4651      	mov	r1, sl
 80046d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d6:	4651      	mov	r1, sl
 80046d8:	00ca      	lsls	r2, r1, #3
 80046da:	4610      	mov	r0, r2
 80046dc:	4619      	mov	r1, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	4642      	mov	r2, r8
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046e6:	464b      	mov	r3, r9
 80046e8:	460a      	mov	r2, r1
 80046ea:	eb42 0303 	adc.w	r3, r2, r3
 80046ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004708:	4649      	mov	r1, r9
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	4641      	mov	r1, r8
 800470e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004712:	4641      	mov	r1, r8
 8004714:	008a      	lsls	r2, r1, #2
 8004716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800471a:	f7fc fad5 	bl	8000cc8 <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <UART_SetConfig+0x4e4>)
 8004724:	fba3 1302 	umull	r1, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	2164      	movs	r1, #100	@ 0x64
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	3332      	adds	r3, #50	@ 0x32
 8004736:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <UART_SetConfig+0x4e4>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4422      	add	r2, r4
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <atof>:
 800475c:	2100      	movs	r1, #0
 800475e:	f000 be07 	b.w	8005370 <strtod>

08004762 <atoi>:
 8004762:	220a      	movs	r2, #10
 8004764:	2100      	movs	r1, #0
 8004766:	f000 be89 	b.w	800547c <strtol>

0800476a <sulp>:
 800476a:	b570      	push	{r4, r5, r6, lr}
 800476c:	4604      	mov	r4, r0
 800476e:	460d      	mov	r5, r1
 8004770:	ec45 4b10 	vmov	d0, r4, r5
 8004774:	4616      	mov	r6, r2
 8004776:	f003 fba3 	bl	8007ec0 <__ulp>
 800477a:	ec51 0b10 	vmov	r0, r1, d0
 800477e:	b17e      	cbz	r6, 80047a0 <sulp+0x36>
 8004780:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004784:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004788:	2b00      	cmp	r3, #0
 800478a:	dd09      	ble.n	80047a0 <sulp+0x36>
 800478c:	051b      	lsls	r3, r3, #20
 800478e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004792:	2400      	movs	r4, #0
 8004794:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004798:	4622      	mov	r2, r4
 800479a:	462b      	mov	r3, r5
 800479c:	f7fb ff4c 	bl	8000638 <__aeabi_dmul>
 80047a0:	ec41 0b10 	vmov	d0, r0, r1
 80047a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047a8 <_strtod_l>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	b09f      	sub	sp, #124	@ 0x7c
 80047ae:	460c      	mov	r4, r1
 80047b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80047b2:	2200      	movs	r2, #0
 80047b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80047b6:	9005      	str	r0, [sp, #20]
 80047b8:	f04f 0a00 	mov.w	sl, #0
 80047bc:	f04f 0b00 	mov.w	fp, #0
 80047c0:	460a      	mov	r2, r1
 80047c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80047c4:	7811      	ldrb	r1, [r2, #0]
 80047c6:	292b      	cmp	r1, #43	@ 0x2b
 80047c8:	d04a      	beq.n	8004860 <_strtod_l+0xb8>
 80047ca:	d838      	bhi.n	800483e <_strtod_l+0x96>
 80047cc:	290d      	cmp	r1, #13
 80047ce:	d832      	bhi.n	8004836 <_strtod_l+0x8e>
 80047d0:	2908      	cmp	r1, #8
 80047d2:	d832      	bhi.n	800483a <_strtod_l+0x92>
 80047d4:	2900      	cmp	r1, #0
 80047d6:	d03b      	beq.n	8004850 <_strtod_l+0xa8>
 80047d8:	2200      	movs	r2, #0
 80047da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80047dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80047de:	782a      	ldrb	r2, [r5, #0]
 80047e0:	2a30      	cmp	r2, #48	@ 0x30
 80047e2:	f040 80b3 	bne.w	800494c <_strtod_l+0x1a4>
 80047e6:	786a      	ldrb	r2, [r5, #1]
 80047e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80047ec:	2a58      	cmp	r2, #88	@ 0x58
 80047ee:	d16e      	bne.n	80048ce <_strtod_l+0x126>
 80047f0:	9302      	str	r3, [sp, #8]
 80047f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	4a8e      	ldr	r2, [pc, #568]	@ (8004a34 <_strtod_l+0x28c>)
 80047fc:	9805      	ldr	r0, [sp, #20]
 80047fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004800:	a919      	add	r1, sp, #100	@ 0x64
 8004802:	f002 fc4f 	bl	80070a4 <__gethex>
 8004806:	f010 060f 	ands.w	r6, r0, #15
 800480a:	4604      	mov	r4, r0
 800480c:	d005      	beq.n	800481a <_strtod_l+0x72>
 800480e:	2e06      	cmp	r6, #6
 8004810:	d128      	bne.n	8004864 <_strtod_l+0xbc>
 8004812:	3501      	adds	r5, #1
 8004814:	2300      	movs	r3, #0
 8004816:	9519      	str	r5, [sp, #100]	@ 0x64
 8004818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800481a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 858e 	bne.w	800533e <_strtod_l+0xb96>
 8004822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004824:	b1cb      	cbz	r3, 800485a <_strtod_l+0xb2>
 8004826:	4652      	mov	r2, sl
 8004828:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800482c:	ec43 2b10 	vmov	d0, r2, r3
 8004830:	b01f      	add	sp, #124	@ 0x7c
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	2920      	cmp	r1, #32
 8004838:	d1ce      	bne.n	80047d8 <_strtod_l+0x30>
 800483a:	3201      	adds	r2, #1
 800483c:	e7c1      	b.n	80047c2 <_strtod_l+0x1a>
 800483e:	292d      	cmp	r1, #45	@ 0x2d
 8004840:	d1ca      	bne.n	80047d8 <_strtod_l+0x30>
 8004842:	2101      	movs	r1, #1
 8004844:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004846:	1c51      	adds	r1, r2, #1
 8004848:	9119      	str	r1, [sp, #100]	@ 0x64
 800484a:	7852      	ldrb	r2, [r2, #1]
 800484c:	2a00      	cmp	r2, #0
 800484e:	d1c5      	bne.n	80047dc <_strtod_l+0x34>
 8004850:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004852:	9419      	str	r4, [sp, #100]	@ 0x64
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 8570 	bne.w	800533a <_strtod_l+0xb92>
 800485a:	4652      	mov	r2, sl
 800485c:	465b      	mov	r3, fp
 800485e:	e7e5      	b.n	800482c <_strtod_l+0x84>
 8004860:	2100      	movs	r1, #0
 8004862:	e7ef      	b.n	8004844 <_strtod_l+0x9c>
 8004864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004866:	b13a      	cbz	r2, 8004878 <_strtod_l+0xd0>
 8004868:	2135      	movs	r1, #53	@ 0x35
 800486a:	a81c      	add	r0, sp, #112	@ 0x70
 800486c:	f003 fc22 	bl	80080b4 <__copybits>
 8004870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004872:	9805      	ldr	r0, [sp, #20]
 8004874:	f002 fff0 	bl	8007858 <_Bfree>
 8004878:	3e01      	subs	r6, #1
 800487a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800487c:	2e04      	cmp	r6, #4
 800487e:	d806      	bhi.n	800488e <_strtod_l+0xe6>
 8004880:	e8df f006 	tbb	[pc, r6]
 8004884:	201d0314 	.word	0x201d0314
 8004888:	14          	.byte	0x14
 8004889:	00          	.byte	0x00
 800488a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800488e:	05e1      	lsls	r1, r4, #23
 8004890:	bf48      	it	mi
 8004892:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800489a:	0d1b      	lsrs	r3, r3, #20
 800489c:	051b      	lsls	r3, r3, #20
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1bb      	bne.n	800481a <_strtod_l+0x72>
 80048a2:	f001 fcbb 	bl	800621c <__errno>
 80048a6:	2322      	movs	r3, #34	@ 0x22
 80048a8:	6003      	str	r3, [r0, #0]
 80048aa:	e7b6      	b.n	800481a <_strtod_l+0x72>
 80048ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80048b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80048b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80048b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80048bc:	e7e7      	b.n	800488e <_strtod_l+0xe6>
 80048be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004a3c <_strtod_l+0x294>
 80048c2:	e7e4      	b.n	800488e <_strtod_l+0xe6>
 80048c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80048c8:	f04f 3aff 	mov.w	sl, #4294967295
 80048cc:	e7df      	b.n	800488e <_strtod_l+0xe6>
 80048ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b30      	cmp	r3, #48	@ 0x30
 80048d8:	d0f9      	beq.n	80048ce <_strtod_l+0x126>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d09d      	beq.n	800481a <_strtod_l+0x72>
 80048de:	2301      	movs	r3, #1
 80048e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80048e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80048e6:	2300      	movs	r3, #0
 80048e8:	9308      	str	r3, [sp, #32]
 80048ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80048ec:	461f      	mov	r7, r3
 80048ee:	220a      	movs	r2, #10
 80048f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80048f2:	7805      	ldrb	r5, [r0, #0]
 80048f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80048f8:	b2d9      	uxtb	r1, r3
 80048fa:	2909      	cmp	r1, #9
 80048fc:	d928      	bls.n	8004950 <_strtod_l+0x1a8>
 80048fe:	494e      	ldr	r1, [pc, #312]	@ (8004a38 <_strtod_l+0x290>)
 8004900:	2201      	movs	r2, #1
 8004902:	f001 fc2f 	bl	8006164 <strncmp>
 8004906:	2800      	cmp	r0, #0
 8004908:	d032      	beq.n	8004970 <_strtod_l+0x1c8>
 800490a:	2000      	movs	r0, #0
 800490c:	462a      	mov	r2, r5
 800490e:	4681      	mov	r9, r0
 8004910:	463d      	mov	r5, r7
 8004912:	4603      	mov	r3, r0
 8004914:	2a65      	cmp	r2, #101	@ 0x65
 8004916:	d001      	beq.n	800491c <_strtod_l+0x174>
 8004918:	2a45      	cmp	r2, #69	@ 0x45
 800491a:	d114      	bne.n	8004946 <_strtod_l+0x19e>
 800491c:	b91d      	cbnz	r5, 8004926 <_strtod_l+0x17e>
 800491e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004920:	4302      	orrs	r2, r0
 8004922:	d095      	beq.n	8004850 <_strtod_l+0xa8>
 8004924:	2500      	movs	r5, #0
 8004926:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004928:	1c62      	adds	r2, r4, #1
 800492a:	9219      	str	r2, [sp, #100]	@ 0x64
 800492c:	7862      	ldrb	r2, [r4, #1]
 800492e:	2a2b      	cmp	r2, #43	@ 0x2b
 8004930:	d077      	beq.n	8004a22 <_strtod_l+0x27a>
 8004932:	2a2d      	cmp	r2, #45	@ 0x2d
 8004934:	d07b      	beq.n	8004a2e <_strtod_l+0x286>
 8004936:	f04f 0c00 	mov.w	ip, #0
 800493a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800493e:	2909      	cmp	r1, #9
 8004940:	f240 8082 	bls.w	8004a48 <_strtod_l+0x2a0>
 8004944:	9419      	str	r4, [sp, #100]	@ 0x64
 8004946:	f04f 0800 	mov.w	r8, #0
 800494a:	e0a2      	b.n	8004a92 <_strtod_l+0x2ea>
 800494c:	2300      	movs	r3, #0
 800494e:	e7c7      	b.n	80048e0 <_strtod_l+0x138>
 8004950:	2f08      	cmp	r7, #8
 8004952:	bfd5      	itete	le
 8004954:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004956:	9908      	ldrgt	r1, [sp, #32]
 8004958:	fb02 3301 	mlale	r3, r2, r1, r3
 800495c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004960:	f100 0001 	add.w	r0, r0, #1
 8004964:	bfd4      	ite	le
 8004966:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004968:	9308      	strgt	r3, [sp, #32]
 800496a:	3701      	adds	r7, #1
 800496c:	9019      	str	r0, [sp, #100]	@ 0x64
 800496e:	e7bf      	b.n	80048f0 <_strtod_l+0x148>
 8004970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	9219      	str	r2, [sp, #100]	@ 0x64
 8004976:	785a      	ldrb	r2, [r3, #1]
 8004978:	b37f      	cbz	r7, 80049da <_strtod_l+0x232>
 800497a:	4681      	mov	r9, r0
 800497c:	463d      	mov	r5, r7
 800497e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004982:	2b09      	cmp	r3, #9
 8004984:	d912      	bls.n	80049ac <_strtod_l+0x204>
 8004986:	2301      	movs	r3, #1
 8004988:	e7c4      	b.n	8004914 <_strtod_l+0x16c>
 800498a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004990:	785a      	ldrb	r2, [r3, #1]
 8004992:	3001      	adds	r0, #1
 8004994:	2a30      	cmp	r2, #48	@ 0x30
 8004996:	d0f8      	beq.n	800498a <_strtod_l+0x1e2>
 8004998:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 84d3 	bhi.w	8005348 <_strtod_l+0xba0>
 80049a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80049a6:	4681      	mov	r9, r0
 80049a8:	2000      	movs	r0, #0
 80049aa:	4605      	mov	r5, r0
 80049ac:	3a30      	subs	r2, #48	@ 0x30
 80049ae:	f100 0301 	add.w	r3, r0, #1
 80049b2:	d02a      	beq.n	8004a0a <_strtod_l+0x262>
 80049b4:	4499      	add	r9, r3
 80049b6:	eb00 0c05 	add.w	ip, r0, r5
 80049ba:	462b      	mov	r3, r5
 80049bc:	210a      	movs	r1, #10
 80049be:	4563      	cmp	r3, ip
 80049c0:	d10d      	bne.n	80049de <_strtod_l+0x236>
 80049c2:	1c69      	adds	r1, r5, #1
 80049c4:	4401      	add	r1, r0
 80049c6:	4428      	add	r0, r5
 80049c8:	2808      	cmp	r0, #8
 80049ca:	dc16      	bgt.n	80049fa <_strtod_l+0x252>
 80049cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80049ce:	230a      	movs	r3, #10
 80049d0:	fb03 2300 	mla	r3, r3, r0, r2
 80049d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80049d6:	2300      	movs	r3, #0
 80049d8:	e018      	b.n	8004a0c <_strtod_l+0x264>
 80049da:	4638      	mov	r0, r7
 80049dc:	e7da      	b.n	8004994 <_strtod_l+0x1ec>
 80049de:	2b08      	cmp	r3, #8
 80049e0:	f103 0301 	add.w	r3, r3, #1
 80049e4:	dc03      	bgt.n	80049ee <_strtod_l+0x246>
 80049e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80049e8:	434e      	muls	r6, r1
 80049ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80049ec:	e7e7      	b.n	80049be <_strtod_l+0x216>
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	bfde      	ittt	le
 80049f2:	9e08      	ldrle	r6, [sp, #32]
 80049f4:	434e      	mulle	r6, r1
 80049f6:	9608      	strle	r6, [sp, #32]
 80049f8:	e7e1      	b.n	80049be <_strtod_l+0x216>
 80049fa:	280f      	cmp	r0, #15
 80049fc:	dceb      	bgt.n	80049d6 <_strtod_l+0x22e>
 80049fe:	9808      	ldr	r0, [sp, #32]
 8004a00:	230a      	movs	r3, #10
 8004a02:	fb03 2300 	mla	r3, r3, r0, r2
 8004a06:	9308      	str	r3, [sp, #32]
 8004a08:	e7e5      	b.n	80049d6 <_strtod_l+0x22e>
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a0e:	1c50      	adds	r0, r2, #1
 8004a10:	9019      	str	r0, [sp, #100]	@ 0x64
 8004a12:	7852      	ldrb	r2, [r2, #1]
 8004a14:	4618      	mov	r0, r3
 8004a16:	460d      	mov	r5, r1
 8004a18:	e7b1      	b.n	800497e <_strtod_l+0x1d6>
 8004a1a:	f04f 0900 	mov.w	r9, #0
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e77d      	b.n	800491e <_strtod_l+0x176>
 8004a22:	f04f 0c00 	mov.w	ip, #0
 8004a26:	1ca2      	adds	r2, r4, #2
 8004a28:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a2a:	78a2      	ldrb	r2, [r4, #2]
 8004a2c:	e785      	b.n	800493a <_strtod_l+0x192>
 8004a2e:	f04f 0c01 	mov.w	ip, #1
 8004a32:	e7f8      	b.n	8004a26 <_strtod_l+0x27e>
 8004a34:	08008c84 	.word	0x08008c84
 8004a38:	08008c6c 	.word	0x08008c6c
 8004a3c:	7ff00000 	.word	0x7ff00000
 8004a40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a42:	1c51      	adds	r1, r2, #1
 8004a44:	9119      	str	r1, [sp, #100]	@ 0x64
 8004a46:	7852      	ldrb	r2, [r2, #1]
 8004a48:	2a30      	cmp	r2, #48	@ 0x30
 8004a4a:	d0f9      	beq.n	8004a40 <_strtod_l+0x298>
 8004a4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004a50:	2908      	cmp	r1, #8
 8004a52:	f63f af78 	bhi.w	8004946 <_strtod_l+0x19e>
 8004a56:	3a30      	subs	r2, #48	@ 0x30
 8004a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004a5e:	f04f 080a 	mov.w	r8, #10
 8004a62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004a64:	1c56      	adds	r6, r2, #1
 8004a66:	9619      	str	r6, [sp, #100]	@ 0x64
 8004a68:	7852      	ldrb	r2, [r2, #1]
 8004a6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004a6e:	f1be 0f09 	cmp.w	lr, #9
 8004a72:	d939      	bls.n	8004ae8 <_strtod_l+0x340>
 8004a74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a76:	1a76      	subs	r6, r6, r1
 8004a78:	2e08      	cmp	r6, #8
 8004a7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004a7e:	dc03      	bgt.n	8004a88 <_strtod_l+0x2e0>
 8004a80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004a82:	4588      	cmp	r8, r1
 8004a84:	bfa8      	it	ge
 8004a86:	4688      	movge	r8, r1
 8004a88:	f1bc 0f00 	cmp.w	ip, #0
 8004a8c:	d001      	beq.n	8004a92 <_strtod_l+0x2ea>
 8004a8e:	f1c8 0800 	rsb	r8, r8, #0
 8004a92:	2d00      	cmp	r5, #0
 8004a94:	d14e      	bne.n	8004b34 <_strtod_l+0x38c>
 8004a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a98:	4308      	orrs	r0, r1
 8004a9a:	f47f aebe 	bne.w	800481a <_strtod_l+0x72>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f47f aed6 	bne.w	8004850 <_strtod_l+0xa8>
 8004aa4:	2a69      	cmp	r2, #105	@ 0x69
 8004aa6:	d028      	beq.n	8004afa <_strtod_l+0x352>
 8004aa8:	dc25      	bgt.n	8004af6 <_strtod_l+0x34e>
 8004aaa:	2a49      	cmp	r2, #73	@ 0x49
 8004aac:	d025      	beq.n	8004afa <_strtod_l+0x352>
 8004aae:	2a4e      	cmp	r2, #78	@ 0x4e
 8004ab0:	f47f aece 	bne.w	8004850 <_strtod_l+0xa8>
 8004ab4:	499b      	ldr	r1, [pc, #620]	@ (8004d24 <_strtod_l+0x57c>)
 8004ab6:	a819      	add	r0, sp, #100	@ 0x64
 8004ab8:	f002 fd16 	bl	80074e8 <__match>
 8004abc:	2800      	cmp	r0, #0
 8004abe:	f43f aec7 	beq.w	8004850 <_strtod_l+0xa8>
 8004ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b28      	cmp	r3, #40	@ 0x28
 8004ac8:	d12e      	bne.n	8004b28 <_strtod_l+0x380>
 8004aca:	4997      	ldr	r1, [pc, #604]	@ (8004d28 <_strtod_l+0x580>)
 8004acc:	aa1c      	add	r2, sp, #112	@ 0x70
 8004ace:	a819      	add	r0, sp, #100	@ 0x64
 8004ad0:	f002 fd1e 	bl	8007510 <__hexnan>
 8004ad4:	2805      	cmp	r0, #5
 8004ad6:	d127      	bne.n	8004b28 <_strtod_l+0x380>
 8004ad8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004ada:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004ade:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004ae2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004ae6:	e698      	b.n	800481a <_strtod_l+0x72>
 8004ae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004aea:	fb08 2101 	mla	r1, r8, r1, r2
 8004aee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004af2:	920e      	str	r2, [sp, #56]	@ 0x38
 8004af4:	e7b5      	b.n	8004a62 <_strtod_l+0x2ba>
 8004af6:	2a6e      	cmp	r2, #110	@ 0x6e
 8004af8:	e7da      	b.n	8004ab0 <_strtod_l+0x308>
 8004afa:	498c      	ldr	r1, [pc, #560]	@ (8004d2c <_strtod_l+0x584>)
 8004afc:	a819      	add	r0, sp, #100	@ 0x64
 8004afe:	f002 fcf3 	bl	80074e8 <__match>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f43f aea4 	beq.w	8004850 <_strtod_l+0xa8>
 8004b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b0a:	4989      	ldr	r1, [pc, #548]	@ (8004d30 <_strtod_l+0x588>)
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	a819      	add	r0, sp, #100	@ 0x64
 8004b10:	9319      	str	r3, [sp, #100]	@ 0x64
 8004b12:	f002 fce9 	bl	80074e8 <__match>
 8004b16:	b910      	cbnz	r0, 8004b1e <_strtod_l+0x376>
 8004b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004b1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004d40 <_strtod_l+0x598>
 8004b22:	f04f 0a00 	mov.w	sl, #0
 8004b26:	e678      	b.n	800481a <_strtod_l+0x72>
 8004b28:	4882      	ldr	r0, [pc, #520]	@ (8004d34 <_strtod_l+0x58c>)
 8004b2a:	f001 fbb5 	bl	8006298 <nan>
 8004b2e:	ec5b ab10 	vmov	sl, fp, d0
 8004b32:	e672      	b.n	800481a <_strtod_l+0x72>
 8004b34:	eba8 0309 	sub.w	r3, r8, r9
 8004b38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	bf08      	it	eq
 8004b40:	462f      	moveq	r7, r5
 8004b42:	2d10      	cmp	r5, #16
 8004b44:	462c      	mov	r4, r5
 8004b46:	bfa8      	it	ge
 8004b48:	2410      	movge	r4, #16
 8004b4a:	f7fb fcfb 	bl	8000544 <__aeabi_ui2d>
 8004b4e:	2d09      	cmp	r5, #9
 8004b50:	4682      	mov	sl, r0
 8004b52:	468b      	mov	fp, r1
 8004b54:	dc13      	bgt.n	8004b7e <_strtod_l+0x3d6>
 8004b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f43f ae5e 	beq.w	800481a <_strtod_l+0x72>
 8004b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b60:	dd78      	ble.n	8004c54 <_strtod_l+0x4ac>
 8004b62:	2b16      	cmp	r3, #22
 8004b64:	dc5f      	bgt.n	8004c26 <_strtod_l+0x47e>
 8004b66:	4974      	ldr	r1, [pc, #464]	@ (8004d38 <_strtod_l+0x590>)
 8004b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b70:	4652      	mov	r2, sl
 8004b72:	465b      	mov	r3, fp
 8004b74:	f7fb fd60 	bl	8000638 <__aeabi_dmul>
 8004b78:	4682      	mov	sl, r0
 8004b7a:	468b      	mov	fp, r1
 8004b7c:	e64d      	b.n	800481a <_strtod_l+0x72>
 8004b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8004d38 <_strtod_l+0x590>)
 8004b80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004b88:	f7fb fd56 	bl	8000638 <__aeabi_dmul>
 8004b8c:	4682      	mov	sl, r0
 8004b8e:	9808      	ldr	r0, [sp, #32]
 8004b90:	468b      	mov	fp, r1
 8004b92:	f7fb fcd7 	bl	8000544 <__aeabi_ui2d>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4650      	mov	r0, sl
 8004b9c:	4659      	mov	r1, fp
 8004b9e:	f7fb fb95 	bl	80002cc <__adddf3>
 8004ba2:	2d0f      	cmp	r5, #15
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	468b      	mov	fp, r1
 8004ba8:	ddd5      	ble.n	8004b56 <_strtod_l+0x3ae>
 8004baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bac:	1b2c      	subs	r4, r5, r4
 8004bae:	441c      	add	r4, r3
 8004bb0:	2c00      	cmp	r4, #0
 8004bb2:	f340 8096 	ble.w	8004ce2 <_strtod_l+0x53a>
 8004bb6:	f014 030f 	ands.w	r3, r4, #15
 8004bba:	d00a      	beq.n	8004bd2 <_strtod_l+0x42a>
 8004bbc:	495e      	ldr	r1, [pc, #376]	@ (8004d38 <_strtod_l+0x590>)
 8004bbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004bc2:	4652      	mov	r2, sl
 8004bc4:	465b      	mov	r3, fp
 8004bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004bca:	f7fb fd35 	bl	8000638 <__aeabi_dmul>
 8004bce:	4682      	mov	sl, r0
 8004bd0:	468b      	mov	fp, r1
 8004bd2:	f034 040f 	bics.w	r4, r4, #15
 8004bd6:	d073      	beq.n	8004cc0 <_strtod_l+0x518>
 8004bd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004bdc:	dd48      	ble.n	8004c70 <_strtod_l+0x4c8>
 8004bde:	2400      	movs	r4, #0
 8004be0:	46a0      	mov	r8, r4
 8004be2:	940a      	str	r4, [sp, #40]	@ 0x28
 8004be4:	46a1      	mov	r9, r4
 8004be6:	9a05      	ldr	r2, [sp, #20]
 8004be8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004d40 <_strtod_l+0x598>
 8004bec:	2322      	movs	r3, #34	@ 0x22
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	f04f 0a00 	mov.w	sl, #0
 8004bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f43f ae0f 	beq.w	800481a <_strtod_l+0x72>
 8004bfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004bfe:	9805      	ldr	r0, [sp, #20]
 8004c00:	f002 fe2a 	bl	8007858 <_Bfree>
 8004c04:	9805      	ldr	r0, [sp, #20]
 8004c06:	4649      	mov	r1, r9
 8004c08:	f002 fe26 	bl	8007858 <_Bfree>
 8004c0c:	9805      	ldr	r0, [sp, #20]
 8004c0e:	4641      	mov	r1, r8
 8004c10:	f002 fe22 	bl	8007858 <_Bfree>
 8004c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c16:	9805      	ldr	r0, [sp, #20]
 8004c18:	f002 fe1e 	bl	8007858 <_Bfree>
 8004c1c:	9805      	ldr	r0, [sp, #20]
 8004c1e:	4621      	mov	r1, r4
 8004c20:	f002 fe1a 	bl	8007858 <_Bfree>
 8004c24:	e5f9      	b.n	800481a <_strtod_l+0x72>
 8004c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	dbbc      	blt.n	8004baa <_strtod_l+0x402>
 8004c30:	4c41      	ldr	r4, [pc, #260]	@ (8004d38 <_strtod_l+0x590>)
 8004c32:	f1c5 050f 	rsb	r5, r5, #15
 8004c36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	465b      	mov	r3, fp
 8004c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c42:	f7fb fcf9 	bl	8000638 <__aeabi_dmul>
 8004c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c48:	1b5d      	subs	r5, r3, r5
 8004c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004c52:	e78f      	b.n	8004b74 <_strtod_l+0x3cc>
 8004c54:	3316      	adds	r3, #22
 8004c56:	dba8      	blt.n	8004baa <_strtod_l+0x402>
 8004c58:	4b37      	ldr	r3, [pc, #220]	@ (8004d38 <_strtod_l+0x590>)
 8004c5a:	eba9 0808 	sub.w	r8, r9, r8
 8004c5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004c62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004c66:	4650      	mov	r0, sl
 8004c68:	4659      	mov	r1, fp
 8004c6a:	f7fb fe0f 	bl	800088c <__aeabi_ddiv>
 8004c6e:	e783      	b.n	8004b78 <_strtod_l+0x3d0>
 8004c70:	4b32      	ldr	r3, [pc, #200]	@ (8004d3c <_strtod_l+0x594>)
 8004c72:	9308      	str	r3, [sp, #32]
 8004c74:	2300      	movs	r3, #0
 8004c76:	1124      	asrs	r4, r4, #4
 8004c78:	4650      	mov	r0, sl
 8004c7a:	4659      	mov	r1, fp
 8004c7c:	461e      	mov	r6, r3
 8004c7e:	2c01      	cmp	r4, #1
 8004c80:	dc21      	bgt.n	8004cc6 <_strtod_l+0x51e>
 8004c82:	b10b      	cbz	r3, 8004c88 <_strtod_l+0x4e0>
 8004c84:	4682      	mov	sl, r0
 8004c86:	468b      	mov	fp, r1
 8004c88:	492c      	ldr	r1, [pc, #176]	@ (8004d3c <_strtod_l+0x594>)
 8004c8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004c8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004c92:	4652      	mov	r2, sl
 8004c94:	465b      	mov	r3, fp
 8004c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c9a:	f7fb fccd 	bl	8000638 <__aeabi_dmul>
 8004c9e:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <_strtod_l+0x598>)
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	4927      	ldr	r1, [pc, #156]	@ (8004d44 <_strtod_l+0x59c>)
 8004ca6:	428b      	cmp	r3, r1
 8004ca8:	4682      	mov	sl, r0
 8004caa:	d898      	bhi.n	8004bde <_strtod_l+0x436>
 8004cac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	bf86      	itte	hi
 8004cb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004d48 <_strtod_l+0x5a0>
 8004cb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8004cbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9308      	str	r3, [sp, #32]
 8004cc4:	e07a      	b.n	8004dbc <_strtod_l+0x614>
 8004cc6:	07e2      	lsls	r2, r4, #31
 8004cc8:	d505      	bpl.n	8004cd6 <_strtod_l+0x52e>
 8004cca:	9b08      	ldr	r3, [sp, #32]
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fcb2 	bl	8000638 <__aeabi_dmul>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	9a08      	ldr	r2, [sp, #32]
 8004cd8:	3208      	adds	r2, #8
 8004cda:	3601      	adds	r6, #1
 8004cdc:	1064      	asrs	r4, r4, #1
 8004cde:	9208      	str	r2, [sp, #32]
 8004ce0:	e7cd      	b.n	8004c7e <_strtod_l+0x4d6>
 8004ce2:	d0ed      	beq.n	8004cc0 <_strtod_l+0x518>
 8004ce4:	4264      	negs	r4, r4
 8004ce6:	f014 020f 	ands.w	r2, r4, #15
 8004cea:	d00a      	beq.n	8004d02 <_strtod_l+0x55a>
 8004cec:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <_strtod_l+0x590>)
 8004cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf2:	4650      	mov	r0, sl
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f7fb fdc7 	bl	800088c <__aeabi_ddiv>
 8004cfe:	4682      	mov	sl, r0
 8004d00:	468b      	mov	fp, r1
 8004d02:	1124      	asrs	r4, r4, #4
 8004d04:	d0dc      	beq.n	8004cc0 <_strtod_l+0x518>
 8004d06:	2c1f      	cmp	r4, #31
 8004d08:	dd20      	ble.n	8004d4c <_strtod_l+0x5a4>
 8004d0a:	2400      	movs	r4, #0
 8004d0c:	46a0      	mov	r8, r4
 8004d0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004d10:	46a1      	mov	r9, r4
 8004d12:	9a05      	ldr	r2, [sp, #20]
 8004d14:	2322      	movs	r3, #34	@ 0x22
 8004d16:	f04f 0a00 	mov.w	sl, #0
 8004d1a:	f04f 0b00 	mov.w	fp, #0
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e768      	b.n	8004bf4 <_strtod_l+0x44c>
 8004d22:	bf00      	nop
 8004d24:	08008dce 	.word	0x08008dce
 8004d28:	08008c70 	.word	0x08008c70
 8004d2c:	08008dc6 	.word	0x08008dc6
 8004d30:	08008e00 	.word	0x08008e00
 8004d34:	0800908c 	.word	0x0800908c
 8004d38:	08008f78 	.word	0x08008f78
 8004d3c:	08008f50 	.word	0x08008f50
 8004d40:	7ff00000 	.word	0x7ff00000
 8004d44:	7ca00000 	.word	0x7ca00000
 8004d48:	7fefffff 	.word	0x7fefffff
 8004d4c:	f014 0310 	ands.w	r3, r4, #16
 8004d50:	bf18      	it	ne
 8004d52:	236a      	movne	r3, #106	@ 0x6a
 8004d54:	4ea9      	ldr	r6, [pc, #676]	@ (8004ffc <_strtod_l+0x854>)
 8004d56:	9308      	str	r3, [sp, #32]
 8004d58:	4650      	mov	r0, sl
 8004d5a:	4659      	mov	r1, fp
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	07e2      	lsls	r2, r4, #31
 8004d60:	d504      	bpl.n	8004d6c <_strtod_l+0x5c4>
 8004d62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d66:	f7fb fc67 	bl	8000638 <__aeabi_dmul>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	1064      	asrs	r4, r4, #1
 8004d6e:	f106 0608 	add.w	r6, r6, #8
 8004d72:	d1f4      	bne.n	8004d5e <_strtod_l+0x5b6>
 8004d74:	b10b      	cbz	r3, 8004d7a <_strtod_l+0x5d2>
 8004d76:	4682      	mov	sl, r0
 8004d78:	468b      	mov	fp, r1
 8004d7a:	9b08      	ldr	r3, [sp, #32]
 8004d7c:	b1b3      	cbz	r3, 8004dac <_strtod_l+0x604>
 8004d7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004d82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	4659      	mov	r1, fp
 8004d8a:	dd0f      	ble.n	8004dac <_strtod_l+0x604>
 8004d8c:	2b1f      	cmp	r3, #31
 8004d8e:	dd55      	ble.n	8004e3c <_strtod_l+0x694>
 8004d90:	2b34      	cmp	r3, #52	@ 0x34
 8004d92:	bfde      	ittt	le
 8004d94:	f04f 33ff 	movle.w	r3, #4294967295
 8004d98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004d9c:	4093      	lslle	r3, r2
 8004d9e:	f04f 0a00 	mov.w	sl, #0
 8004da2:	bfcc      	ite	gt
 8004da4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004da8:	ea03 0b01 	andle.w	fp, r3, r1
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	4650      	mov	r0, sl
 8004db2:	4659      	mov	r1, fp
 8004db4:	f7fb fea8 	bl	8000b08 <__aeabi_dcmpeq>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d1a6      	bne.n	8004d0a <_strtod_l+0x562>
 8004dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004dc2:	9805      	ldr	r0, [sp, #20]
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	463a      	mov	r2, r7
 8004dc8:	f002 fdae 	bl	8007928 <__s2b>
 8004dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f43f af05 	beq.w	8004bde <_strtod_l+0x436>
 8004dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	eba9 0308 	sub.w	r3, r9, r8
 8004ddc:	bfa8      	it	ge
 8004dde:	2300      	movge	r3, #0
 8004de0:	9312      	str	r3, [sp, #72]	@ 0x48
 8004de2:	2400      	movs	r4, #0
 8004de4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004de8:	9316      	str	r3, [sp, #88]	@ 0x58
 8004dea:	46a0      	mov	r8, r4
 8004dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dee:	9805      	ldr	r0, [sp, #20]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	f002 fcf1 	bl	80077d8 <_Balloc>
 8004df6:	4681      	mov	r9, r0
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	f43f aef4 	beq.w	8004be6 <_strtod_l+0x43e>
 8004dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e00:	691a      	ldr	r2, [r3, #16]
 8004e02:	3202      	adds	r2, #2
 8004e04:	f103 010c 	add.w	r1, r3, #12
 8004e08:	0092      	lsls	r2, r2, #2
 8004e0a:	300c      	adds	r0, #12
 8004e0c:	f001 fa33 	bl	8006276 <memcpy>
 8004e10:	ec4b ab10 	vmov	d0, sl, fp
 8004e14:	9805      	ldr	r0, [sp, #20]
 8004e16:	aa1c      	add	r2, sp, #112	@ 0x70
 8004e18:	a91b      	add	r1, sp, #108	@ 0x6c
 8004e1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004e1e:	f003 f8bf 	bl	8007fa0 <__d2b>
 8004e22:	901a      	str	r0, [sp, #104]	@ 0x68
 8004e24:	2800      	cmp	r0, #0
 8004e26:	f43f aede 	beq.w	8004be6 <_strtod_l+0x43e>
 8004e2a:	9805      	ldr	r0, [sp, #20]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	f002 fe11 	bl	8007a54 <__i2b>
 8004e32:	4680      	mov	r8, r0
 8004e34:	b948      	cbnz	r0, 8004e4a <_strtod_l+0x6a2>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	e6d4      	b.n	8004be6 <_strtod_l+0x43e>
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	ea03 0a0a 	and.w	sl, r3, sl
 8004e48:	e7b0      	b.n	8004dac <_strtod_l+0x604>
 8004e4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004e4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	bfab      	itete	ge
 8004e52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004e54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004e56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004e58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004e5a:	bfac      	ite	ge
 8004e5c:	18ef      	addge	r7, r5, r3
 8004e5e:	1b5e      	sublt	r6, r3, r5
 8004e60:	9b08      	ldr	r3, [sp, #32]
 8004e62:	1aed      	subs	r5, r5, r3
 8004e64:	4415      	add	r5, r2
 8004e66:	4b66      	ldr	r3, [pc, #408]	@ (8005000 <_strtod_l+0x858>)
 8004e68:	3d01      	subs	r5, #1
 8004e6a:	429d      	cmp	r5, r3
 8004e6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004e70:	da50      	bge.n	8004f14 <_strtod_l+0x76c>
 8004e72:	1b5b      	subs	r3, r3, r5
 8004e74:	2b1f      	cmp	r3, #31
 8004e76:	eba2 0203 	sub.w	r2, r2, r3
 8004e7a:	f04f 0101 	mov.w	r1, #1
 8004e7e:	dc3d      	bgt.n	8004efc <_strtod_l+0x754>
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004e86:	2300      	movs	r3, #0
 8004e88:	9310      	str	r3, [sp, #64]	@ 0x40
 8004e8a:	18bd      	adds	r5, r7, r2
 8004e8c:	9b08      	ldr	r3, [sp, #32]
 8004e8e:	42af      	cmp	r7, r5
 8004e90:	4416      	add	r6, r2
 8004e92:	441e      	add	r6, r3
 8004e94:	463b      	mov	r3, r7
 8004e96:	bfa8      	it	ge
 8004e98:	462b      	movge	r3, r5
 8004e9a:	42b3      	cmp	r3, r6
 8004e9c:	bfa8      	it	ge
 8004e9e:	4633      	movge	r3, r6
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bfc2      	ittt	gt
 8004ea4:	1aed      	subgt	r5, r5, r3
 8004ea6:	1af6      	subgt	r6, r6, r3
 8004ea8:	1aff      	subgt	r7, r7, r3
 8004eaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dd16      	ble.n	8004ede <_strtod_l+0x736>
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	9805      	ldr	r0, [sp, #20]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f002 fe8d 	bl	8007bd4 <__pow5mult>
 8004eba:	4680      	mov	r8, r0
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d0ba      	beq.n	8004e36 <_strtod_l+0x68e>
 8004ec0:	4601      	mov	r1, r0
 8004ec2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004ec4:	9805      	ldr	r0, [sp, #20]
 8004ec6:	f002 fddb 	bl	8007a80 <__multiply>
 8004eca:	900e      	str	r0, [sp, #56]	@ 0x38
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	f43f ae8a 	beq.w	8004be6 <_strtod_l+0x43e>
 8004ed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ed4:	9805      	ldr	r0, [sp, #20]
 8004ed6:	f002 fcbf 	bl	8007858 <_Bfree>
 8004eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	dc1d      	bgt.n	8004f1e <_strtod_l+0x776>
 8004ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dd23      	ble.n	8004f30 <_strtod_l+0x788>
 8004ee8:	4649      	mov	r1, r9
 8004eea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004eec:	9805      	ldr	r0, [sp, #20]
 8004eee:	f002 fe71 	bl	8007bd4 <__pow5mult>
 8004ef2:	4681      	mov	r9, r0
 8004ef4:	b9e0      	cbnz	r0, 8004f30 <_strtod_l+0x788>
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	e674      	b.n	8004be6 <_strtod_l+0x43e>
 8004efc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004f00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004f04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004f08:	35e2      	adds	r5, #226	@ 0xe2
 8004f0a:	fa01 f305 	lsl.w	r3, r1, r5
 8004f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004f12:	e7ba      	b.n	8004e8a <_strtod_l+0x6e2>
 8004f14:	2300      	movs	r3, #0
 8004f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f18:	2301      	movs	r3, #1
 8004f1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f1c:	e7b5      	b.n	8004e8a <_strtod_l+0x6e2>
 8004f1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f20:	9805      	ldr	r0, [sp, #20]
 8004f22:	462a      	mov	r2, r5
 8004f24:	f002 feb0 	bl	8007c88 <__lshift>
 8004f28:	901a      	str	r0, [sp, #104]	@ 0x68
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d1d9      	bne.n	8004ee2 <_strtod_l+0x73a>
 8004f2e:	e65a      	b.n	8004be6 <_strtod_l+0x43e>
 8004f30:	2e00      	cmp	r6, #0
 8004f32:	dd07      	ble.n	8004f44 <_strtod_l+0x79c>
 8004f34:	4649      	mov	r1, r9
 8004f36:	9805      	ldr	r0, [sp, #20]
 8004f38:	4632      	mov	r2, r6
 8004f3a:	f002 fea5 	bl	8007c88 <__lshift>
 8004f3e:	4681      	mov	r9, r0
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0d8      	beq.n	8004ef6 <_strtod_l+0x74e>
 8004f44:	2f00      	cmp	r7, #0
 8004f46:	dd08      	ble.n	8004f5a <_strtod_l+0x7b2>
 8004f48:	4641      	mov	r1, r8
 8004f4a:	9805      	ldr	r0, [sp, #20]
 8004f4c:	463a      	mov	r2, r7
 8004f4e:	f002 fe9b 	bl	8007c88 <__lshift>
 8004f52:	4680      	mov	r8, r0
 8004f54:	2800      	cmp	r0, #0
 8004f56:	f43f ae46 	beq.w	8004be6 <_strtod_l+0x43e>
 8004f5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f5c:	9805      	ldr	r0, [sp, #20]
 8004f5e:	464a      	mov	r2, r9
 8004f60:	f002 ff1a 	bl	8007d98 <__mdiff>
 8004f64:	4604      	mov	r4, r0
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f43f ae3d 	beq.w	8004be6 <_strtod_l+0x43e>
 8004f6c:	68c3      	ldr	r3, [r0, #12]
 8004f6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004f70:	2300      	movs	r3, #0
 8004f72:	60c3      	str	r3, [r0, #12]
 8004f74:	4641      	mov	r1, r8
 8004f76:	f002 fef3 	bl	8007d60 <__mcmp>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	da46      	bge.n	800500c <_strtod_l+0x864>
 8004f7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f80:	ea53 030a 	orrs.w	r3, r3, sl
 8004f84:	d16c      	bne.n	8005060 <_strtod_l+0x8b8>
 8004f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d168      	bne.n	8005060 <_strtod_l+0x8b8>
 8004f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f92:	0d1b      	lsrs	r3, r3, #20
 8004f94:	051b      	lsls	r3, r3, #20
 8004f96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004f9a:	d961      	bls.n	8005060 <_strtod_l+0x8b8>
 8004f9c:	6963      	ldr	r3, [r4, #20]
 8004f9e:	b913      	cbnz	r3, 8004fa6 <_strtod_l+0x7fe>
 8004fa0:	6923      	ldr	r3, [r4, #16]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	dd5c      	ble.n	8005060 <_strtod_l+0x8b8>
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	2201      	movs	r2, #1
 8004faa:	9805      	ldr	r0, [sp, #20]
 8004fac:	f002 fe6c 	bl	8007c88 <__lshift>
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	f002 fed4 	bl	8007d60 <__mcmp>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	dd51      	ble.n	8005060 <_strtod_l+0x8b8>
 8004fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004fc0:	9a08      	ldr	r2, [sp, #32]
 8004fc2:	0d1b      	lsrs	r3, r3, #20
 8004fc4:	051b      	lsls	r3, r3, #20
 8004fc6:	2a00      	cmp	r2, #0
 8004fc8:	d06b      	beq.n	80050a2 <_strtod_l+0x8fa>
 8004fca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004fce:	d868      	bhi.n	80050a2 <_strtod_l+0x8fa>
 8004fd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004fd4:	f67f ae9d 	bls.w	8004d12 <_strtod_l+0x56a>
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <_strtod_l+0x85c>)
 8004fda:	4650      	mov	r0, sl
 8004fdc:	4659      	mov	r1, fp
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f7fb fb2a 	bl	8000638 <__aeabi_dmul>
 8004fe4:	4b08      	ldr	r3, [pc, #32]	@ (8005008 <_strtod_l+0x860>)
 8004fe6:	400b      	ands	r3, r1
 8004fe8:	4682      	mov	sl, r0
 8004fea:	468b      	mov	fp, r1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f47f ae05 	bne.w	8004bfc <_strtod_l+0x454>
 8004ff2:	9a05      	ldr	r2, [sp, #20]
 8004ff4:	2322      	movs	r3, #34	@ 0x22
 8004ff6:	6013      	str	r3, [r2, #0]
 8004ff8:	e600      	b.n	8004bfc <_strtod_l+0x454>
 8004ffa:	bf00      	nop
 8004ffc:	08008c98 	.word	0x08008c98
 8005000:	fffffc02 	.word	0xfffffc02
 8005004:	39500000 	.word	0x39500000
 8005008:	7ff00000 	.word	0x7ff00000
 800500c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005010:	d165      	bne.n	80050de <_strtod_l+0x936>
 8005012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005018:	b35a      	cbz	r2, 8005072 <_strtod_l+0x8ca>
 800501a:	4a9f      	ldr	r2, [pc, #636]	@ (8005298 <_strtod_l+0xaf0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d12b      	bne.n	8005078 <_strtod_l+0x8d0>
 8005020:	9b08      	ldr	r3, [sp, #32]
 8005022:	4651      	mov	r1, sl
 8005024:	b303      	cbz	r3, 8005068 <_strtod_l+0x8c0>
 8005026:	4b9d      	ldr	r3, [pc, #628]	@ (800529c <_strtod_l+0xaf4>)
 8005028:	465a      	mov	r2, fp
 800502a:	4013      	ands	r3, r2
 800502c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005030:	f04f 32ff 	mov.w	r2, #4294967295
 8005034:	d81b      	bhi.n	800506e <_strtod_l+0x8c6>
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	4299      	cmp	r1, r3
 8005042:	d119      	bne.n	8005078 <_strtod_l+0x8d0>
 8005044:	4b96      	ldr	r3, [pc, #600]	@ (80052a0 <_strtod_l+0xaf8>)
 8005046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005048:	429a      	cmp	r2, r3
 800504a:	d102      	bne.n	8005052 <_strtod_l+0x8aa>
 800504c:	3101      	adds	r1, #1
 800504e:	f43f adca 	beq.w	8004be6 <_strtod_l+0x43e>
 8005052:	4b92      	ldr	r3, [pc, #584]	@ (800529c <_strtod_l+0xaf4>)
 8005054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005056:	401a      	ands	r2, r3
 8005058:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800505c:	f04f 0a00 	mov.w	sl, #0
 8005060:	9b08      	ldr	r3, [sp, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1b8      	bne.n	8004fd8 <_strtod_l+0x830>
 8005066:	e5c9      	b.n	8004bfc <_strtod_l+0x454>
 8005068:	f04f 33ff 	mov.w	r3, #4294967295
 800506c:	e7e8      	b.n	8005040 <_strtod_l+0x898>
 800506e:	4613      	mov	r3, r2
 8005070:	e7e6      	b.n	8005040 <_strtod_l+0x898>
 8005072:	ea53 030a 	orrs.w	r3, r3, sl
 8005076:	d0a1      	beq.n	8004fbc <_strtod_l+0x814>
 8005078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800507a:	b1db      	cbz	r3, 80050b4 <_strtod_l+0x90c>
 800507c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800507e:	4213      	tst	r3, r2
 8005080:	d0ee      	beq.n	8005060 <_strtod_l+0x8b8>
 8005082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005084:	9a08      	ldr	r2, [sp, #32]
 8005086:	4650      	mov	r0, sl
 8005088:	4659      	mov	r1, fp
 800508a:	b1bb      	cbz	r3, 80050bc <_strtod_l+0x914>
 800508c:	f7ff fb6d 	bl	800476a <sulp>
 8005090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005094:	ec53 2b10 	vmov	r2, r3, d0
 8005098:	f7fb f918 	bl	80002cc <__adddf3>
 800509c:	4682      	mov	sl, r0
 800509e:	468b      	mov	fp, r1
 80050a0:	e7de      	b.n	8005060 <_strtod_l+0x8b8>
 80050a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80050a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80050aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80050ae:	f04f 3aff 	mov.w	sl, #4294967295
 80050b2:	e7d5      	b.n	8005060 <_strtod_l+0x8b8>
 80050b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80050b6:	ea13 0f0a 	tst.w	r3, sl
 80050ba:	e7e1      	b.n	8005080 <_strtod_l+0x8d8>
 80050bc:	f7ff fb55 	bl	800476a <sulp>
 80050c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050c4:	ec53 2b10 	vmov	r2, r3, d0
 80050c8:	f7fb f8fe 	bl	80002c8 <__aeabi_dsub>
 80050cc:	2200      	movs	r2, #0
 80050ce:	2300      	movs	r3, #0
 80050d0:	4682      	mov	sl, r0
 80050d2:	468b      	mov	fp, r1
 80050d4:	f7fb fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d0c1      	beq.n	8005060 <_strtod_l+0x8b8>
 80050dc:	e619      	b.n	8004d12 <_strtod_l+0x56a>
 80050de:	4641      	mov	r1, r8
 80050e0:	4620      	mov	r0, r4
 80050e2:	f002 ffb5 	bl	8008050 <__ratio>
 80050e6:	ec57 6b10 	vmov	r6, r7, d0
 80050ea:	2200      	movs	r2, #0
 80050ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050f0:	4630      	mov	r0, r6
 80050f2:	4639      	mov	r1, r7
 80050f4:	f7fb fd1c 	bl	8000b30 <__aeabi_dcmple>
 80050f8:	2800      	cmp	r0, #0
 80050fa:	d06f      	beq.n	80051dc <_strtod_l+0xa34>
 80050fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d17a      	bne.n	80051f8 <_strtod_l+0xa50>
 8005102:	f1ba 0f00 	cmp.w	sl, #0
 8005106:	d158      	bne.n	80051ba <_strtod_l+0xa12>
 8005108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800510a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800510e:	2b00      	cmp	r3, #0
 8005110:	d15a      	bne.n	80051c8 <_strtod_l+0xa20>
 8005112:	4b64      	ldr	r3, [pc, #400]	@ (80052a4 <_strtod_l+0xafc>)
 8005114:	2200      	movs	r2, #0
 8005116:	4630      	mov	r0, r6
 8005118:	4639      	mov	r1, r7
 800511a:	f7fb fcff 	bl	8000b1c <__aeabi_dcmplt>
 800511e:	2800      	cmp	r0, #0
 8005120:	d159      	bne.n	80051d6 <_strtod_l+0xa2e>
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	4b60      	ldr	r3, [pc, #384]	@ (80052a8 <_strtod_l+0xb00>)
 8005128:	2200      	movs	r2, #0
 800512a:	f7fb fa85 	bl	8000638 <__aeabi_dmul>
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005136:	9606      	str	r6, [sp, #24]
 8005138:	9307      	str	r3, [sp, #28]
 800513a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800513e:	4d57      	ldr	r5, [pc, #348]	@ (800529c <_strtod_l+0xaf4>)
 8005140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005146:	401d      	ands	r5, r3
 8005148:	4b58      	ldr	r3, [pc, #352]	@ (80052ac <_strtod_l+0xb04>)
 800514a:	429d      	cmp	r5, r3
 800514c:	f040 80b2 	bne.w	80052b4 <_strtod_l+0xb0c>
 8005150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005152:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005156:	ec4b ab10 	vmov	d0, sl, fp
 800515a:	f002 feb1 	bl	8007ec0 <__ulp>
 800515e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005162:	ec51 0b10 	vmov	r0, r1, d0
 8005166:	f7fb fa67 	bl	8000638 <__aeabi_dmul>
 800516a:	4652      	mov	r2, sl
 800516c:	465b      	mov	r3, fp
 800516e:	f7fb f8ad 	bl	80002cc <__adddf3>
 8005172:	460b      	mov	r3, r1
 8005174:	4949      	ldr	r1, [pc, #292]	@ (800529c <_strtod_l+0xaf4>)
 8005176:	4a4e      	ldr	r2, [pc, #312]	@ (80052b0 <_strtod_l+0xb08>)
 8005178:	4019      	ands	r1, r3
 800517a:	4291      	cmp	r1, r2
 800517c:	4682      	mov	sl, r0
 800517e:	d942      	bls.n	8005206 <_strtod_l+0xa5e>
 8005180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005182:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <_strtod_l+0xaf8>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d103      	bne.n	8005190 <_strtod_l+0x9e8>
 8005188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800518a:	3301      	adds	r3, #1
 800518c:	f43f ad2b 	beq.w	8004be6 <_strtod_l+0x43e>
 8005190:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80052a0 <_strtod_l+0xaf8>
 8005194:	f04f 3aff 	mov.w	sl, #4294967295
 8005198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800519a:	9805      	ldr	r0, [sp, #20]
 800519c:	f002 fb5c 	bl	8007858 <_Bfree>
 80051a0:	9805      	ldr	r0, [sp, #20]
 80051a2:	4649      	mov	r1, r9
 80051a4:	f002 fb58 	bl	8007858 <_Bfree>
 80051a8:	9805      	ldr	r0, [sp, #20]
 80051aa:	4641      	mov	r1, r8
 80051ac:	f002 fb54 	bl	8007858 <_Bfree>
 80051b0:	9805      	ldr	r0, [sp, #20]
 80051b2:	4621      	mov	r1, r4
 80051b4:	f002 fb50 	bl	8007858 <_Bfree>
 80051b8:	e618      	b.n	8004dec <_strtod_l+0x644>
 80051ba:	f1ba 0f01 	cmp.w	sl, #1
 80051be:	d103      	bne.n	80051c8 <_strtod_l+0xa20>
 80051c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f43f ada5 	beq.w	8004d12 <_strtod_l+0x56a>
 80051c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005278 <_strtod_l+0xad0>
 80051cc:	4f35      	ldr	r7, [pc, #212]	@ (80052a4 <_strtod_l+0xafc>)
 80051ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80051d2:	2600      	movs	r6, #0
 80051d4:	e7b1      	b.n	800513a <_strtod_l+0x992>
 80051d6:	4f34      	ldr	r7, [pc, #208]	@ (80052a8 <_strtod_l+0xb00>)
 80051d8:	2600      	movs	r6, #0
 80051da:	e7aa      	b.n	8005132 <_strtod_l+0x98a>
 80051dc:	4b32      	ldr	r3, [pc, #200]	@ (80052a8 <_strtod_l+0xb00>)
 80051de:	4630      	mov	r0, r6
 80051e0:	4639      	mov	r1, r7
 80051e2:	2200      	movs	r2, #0
 80051e4:	f7fb fa28 	bl	8000638 <__aeabi_dmul>
 80051e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051ea:	4606      	mov	r6, r0
 80051ec:	460f      	mov	r7, r1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d09f      	beq.n	8005132 <_strtod_l+0x98a>
 80051f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80051f6:	e7a0      	b.n	800513a <_strtod_l+0x992>
 80051f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005280 <_strtod_l+0xad8>
 80051fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005200:	ec57 6b17 	vmov	r6, r7, d7
 8005204:	e799      	b.n	800513a <_strtod_l+0x992>
 8005206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800520a:	9b08      	ldr	r3, [sp, #32]
 800520c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1c1      	bne.n	8005198 <_strtod_l+0x9f0>
 8005214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005218:	0d1b      	lsrs	r3, r3, #20
 800521a:	051b      	lsls	r3, r3, #20
 800521c:	429d      	cmp	r5, r3
 800521e:	d1bb      	bne.n	8005198 <_strtod_l+0x9f0>
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fd68 	bl	8000cf8 <__aeabi_d2lz>
 8005228:	f7fb f9d8 	bl	80005dc <__aeabi_l2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb f848 	bl	80002c8 <__aeabi_dsub>
 8005238:	460b      	mov	r3, r1
 800523a:	4602      	mov	r2, r0
 800523c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005240:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005246:	ea46 060a 	orr.w	r6, r6, sl
 800524a:	431e      	orrs	r6, r3
 800524c:	d06f      	beq.n	800532e <_strtod_l+0xb86>
 800524e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005288 <_strtod_l+0xae0>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb fc62 	bl	8000b1c <__aeabi_dcmplt>
 8005258:	2800      	cmp	r0, #0
 800525a:	f47f accf 	bne.w	8004bfc <_strtod_l+0x454>
 800525e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005290 <_strtod_l+0xae8>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005268:	f7fb fc76 	bl	8000b58 <__aeabi_dcmpgt>
 800526c:	2800      	cmp	r0, #0
 800526e:	d093      	beq.n	8005198 <_strtod_l+0x9f0>
 8005270:	e4c4      	b.n	8004bfc <_strtod_l+0x454>
 8005272:	bf00      	nop
 8005274:	f3af 8000 	nop.w
 8005278:	00000000 	.word	0x00000000
 800527c:	bff00000 	.word	0xbff00000
 8005280:	00000000 	.word	0x00000000
 8005284:	3ff00000 	.word	0x3ff00000
 8005288:	94a03595 	.word	0x94a03595
 800528c:	3fdfffff 	.word	0x3fdfffff
 8005290:	35afe535 	.word	0x35afe535
 8005294:	3fe00000 	.word	0x3fe00000
 8005298:	000fffff 	.word	0x000fffff
 800529c:	7ff00000 	.word	0x7ff00000
 80052a0:	7fefffff 	.word	0x7fefffff
 80052a4:	3ff00000 	.word	0x3ff00000
 80052a8:	3fe00000 	.word	0x3fe00000
 80052ac:	7fe00000 	.word	0x7fe00000
 80052b0:	7c9fffff 	.word	0x7c9fffff
 80052b4:	9b08      	ldr	r3, [sp, #32]
 80052b6:	b323      	cbz	r3, 8005302 <_strtod_l+0xb5a>
 80052b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80052bc:	d821      	bhi.n	8005302 <_strtod_l+0xb5a>
 80052be:	a328      	add	r3, pc, #160	@ (adr r3, 8005360 <_strtod_l+0xbb8>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	4630      	mov	r0, r6
 80052c6:	4639      	mov	r1, r7
 80052c8:	f7fb fc32 	bl	8000b30 <__aeabi_dcmple>
 80052cc:	b1a0      	cbz	r0, 80052f8 <_strtod_l+0xb50>
 80052ce:	4639      	mov	r1, r7
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7fb fc89 	bl	8000be8 <__aeabi_d2uiz>
 80052d6:	2801      	cmp	r0, #1
 80052d8:	bf38      	it	cc
 80052da:	2001      	movcc	r0, #1
 80052dc:	f7fb f932 	bl	8000544 <__aeabi_ui2d>
 80052e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052e2:	4606      	mov	r6, r0
 80052e4:	460f      	mov	r7, r1
 80052e6:	b9fb      	cbnz	r3, 8005328 <_strtod_l+0xb80>
 80052e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80052ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80052ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80052f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80052f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80052f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80052fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80052fe:	1b5b      	subs	r3, r3, r5
 8005300:	9311      	str	r3, [sp, #68]	@ 0x44
 8005302:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005306:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800530a:	f002 fdd9 	bl	8007ec0 <__ulp>
 800530e:	4650      	mov	r0, sl
 8005310:	ec53 2b10 	vmov	r2, r3, d0
 8005314:	4659      	mov	r1, fp
 8005316:	f7fb f98f 	bl	8000638 <__aeabi_dmul>
 800531a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800531e:	f7fa ffd5 	bl	80002cc <__adddf3>
 8005322:	4682      	mov	sl, r0
 8005324:	468b      	mov	fp, r1
 8005326:	e770      	b.n	800520a <_strtod_l+0xa62>
 8005328:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800532c:	e7e0      	b.n	80052f0 <_strtod_l+0xb48>
 800532e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005368 <_strtod_l+0xbc0>)
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f7fb fbf2 	bl	8000b1c <__aeabi_dcmplt>
 8005338:	e798      	b.n	800526c <_strtod_l+0xac4>
 800533a:	2300      	movs	r3, #0
 800533c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800533e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	f7ff ba6d 	b.w	8004822 <_strtod_l+0x7a>
 8005348:	2a65      	cmp	r2, #101	@ 0x65
 800534a:	f43f ab66 	beq.w	8004a1a <_strtod_l+0x272>
 800534e:	2a45      	cmp	r2, #69	@ 0x45
 8005350:	f43f ab63 	beq.w	8004a1a <_strtod_l+0x272>
 8005354:	2301      	movs	r3, #1
 8005356:	f7ff bb9e 	b.w	8004a96 <_strtod_l+0x2ee>
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w
 8005360:	ffc00000 	.word	0xffc00000
 8005364:	41dfffff 	.word	0x41dfffff
 8005368:	94a03595 	.word	0x94a03595
 800536c:	3fcfffff 	.word	0x3fcfffff

08005370 <strtod>:
 8005370:	460a      	mov	r2, r1
 8005372:	4601      	mov	r1, r0
 8005374:	4802      	ldr	r0, [pc, #8]	@ (8005380 <strtod+0x10>)
 8005376:	4b03      	ldr	r3, [pc, #12]	@ (8005384 <strtod+0x14>)
 8005378:	6800      	ldr	r0, [r0, #0]
 800537a:	f7ff ba15 	b.w	80047a8 <_strtod_l>
 800537e:	bf00      	nop
 8005380:	20000184 	.word	0x20000184
 8005384:	20000018 	.word	0x20000018

08005388 <_strtol_l.constprop.0>:
 8005388:	2b24      	cmp	r3, #36	@ 0x24
 800538a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538e:	4686      	mov	lr, r0
 8005390:	4690      	mov	r8, r2
 8005392:	d801      	bhi.n	8005398 <_strtol_l.constprop.0+0x10>
 8005394:	2b01      	cmp	r3, #1
 8005396:	d106      	bne.n	80053a6 <_strtol_l.constprop.0+0x1e>
 8005398:	f000 ff40 	bl	800621c <__errno>
 800539c:	2316      	movs	r3, #22
 800539e:	6003      	str	r3, [r0, #0]
 80053a0:	2000      	movs	r0, #0
 80053a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a6:	4834      	ldr	r0, [pc, #208]	@ (8005478 <_strtol_l.constprop.0+0xf0>)
 80053a8:	460d      	mov	r5, r1
 80053aa:	462a      	mov	r2, r5
 80053ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053b0:	5d06      	ldrb	r6, [r0, r4]
 80053b2:	f016 0608 	ands.w	r6, r6, #8
 80053b6:	d1f8      	bne.n	80053aa <_strtol_l.constprop.0+0x22>
 80053b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80053ba:	d12d      	bne.n	8005418 <_strtol_l.constprop.0+0x90>
 80053bc:	782c      	ldrb	r4, [r5, #0]
 80053be:	2601      	movs	r6, #1
 80053c0:	1c95      	adds	r5, r2, #2
 80053c2:	f033 0210 	bics.w	r2, r3, #16
 80053c6:	d109      	bne.n	80053dc <_strtol_l.constprop.0+0x54>
 80053c8:	2c30      	cmp	r4, #48	@ 0x30
 80053ca:	d12a      	bne.n	8005422 <_strtol_l.constprop.0+0x9a>
 80053cc:	782a      	ldrb	r2, [r5, #0]
 80053ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053d2:	2a58      	cmp	r2, #88	@ 0x58
 80053d4:	d125      	bne.n	8005422 <_strtol_l.constprop.0+0x9a>
 80053d6:	786c      	ldrb	r4, [r5, #1]
 80053d8:	2310      	movs	r3, #16
 80053da:	3502      	adds	r5, #2
 80053dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053e4:	2200      	movs	r2, #0
 80053e6:	fbbc f9f3 	udiv	r9, ip, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80053f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053f4:	2f09      	cmp	r7, #9
 80053f6:	d81b      	bhi.n	8005430 <_strtol_l.constprop.0+0xa8>
 80053f8:	463c      	mov	r4, r7
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	dd27      	ble.n	800544e <_strtol_l.constprop.0+0xc6>
 80053fe:	1c57      	adds	r7, r2, #1
 8005400:	d007      	beq.n	8005412 <_strtol_l.constprop.0+0x8a>
 8005402:	4581      	cmp	r9, r0
 8005404:	d320      	bcc.n	8005448 <_strtol_l.constprop.0+0xc0>
 8005406:	d101      	bne.n	800540c <_strtol_l.constprop.0+0x84>
 8005408:	45a2      	cmp	sl, r4
 800540a:	db1d      	blt.n	8005448 <_strtol_l.constprop.0+0xc0>
 800540c:	fb00 4003 	mla	r0, r0, r3, r4
 8005410:	2201      	movs	r2, #1
 8005412:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005416:	e7eb      	b.n	80053f0 <_strtol_l.constprop.0+0x68>
 8005418:	2c2b      	cmp	r4, #43	@ 0x2b
 800541a:	bf04      	itt	eq
 800541c:	782c      	ldrbeq	r4, [r5, #0]
 800541e:	1c95      	addeq	r5, r2, #2
 8005420:	e7cf      	b.n	80053c2 <_strtol_l.constprop.0+0x3a>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1da      	bne.n	80053dc <_strtol_l.constprop.0+0x54>
 8005426:	2c30      	cmp	r4, #48	@ 0x30
 8005428:	bf0c      	ite	eq
 800542a:	2308      	moveq	r3, #8
 800542c:	230a      	movne	r3, #10
 800542e:	e7d5      	b.n	80053dc <_strtol_l.constprop.0+0x54>
 8005430:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005434:	2f19      	cmp	r7, #25
 8005436:	d801      	bhi.n	800543c <_strtol_l.constprop.0+0xb4>
 8005438:	3c37      	subs	r4, #55	@ 0x37
 800543a:	e7de      	b.n	80053fa <_strtol_l.constprop.0+0x72>
 800543c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005440:	2f19      	cmp	r7, #25
 8005442:	d804      	bhi.n	800544e <_strtol_l.constprop.0+0xc6>
 8005444:	3c57      	subs	r4, #87	@ 0x57
 8005446:	e7d8      	b.n	80053fa <_strtol_l.constprop.0+0x72>
 8005448:	f04f 32ff 	mov.w	r2, #4294967295
 800544c:	e7e1      	b.n	8005412 <_strtol_l.constprop.0+0x8a>
 800544e:	1c53      	adds	r3, r2, #1
 8005450:	d108      	bne.n	8005464 <_strtol_l.constprop.0+0xdc>
 8005452:	2322      	movs	r3, #34	@ 0x22
 8005454:	f8ce 3000 	str.w	r3, [lr]
 8005458:	4660      	mov	r0, ip
 800545a:	f1b8 0f00 	cmp.w	r8, #0
 800545e:	d0a0      	beq.n	80053a2 <_strtol_l.constprop.0+0x1a>
 8005460:	1e69      	subs	r1, r5, #1
 8005462:	e006      	b.n	8005472 <_strtol_l.constprop.0+0xea>
 8005464:	b106      	cbz	r6, 8005468 <_strtol_l.constprop.0+0xe0>
 8005466:	4240      	negs	r0, r0
 8005468:	f1b8 0f00 	cmp.w	r8, #0
 800546c:	d099      	beq.n	80053a2 <_strtol_l.constprop.0+0x1a>
 800546e:	2a00      	cmp	r2, #0
 8005470:	d1f6      	bne.n	8005460 <_strtol_l.constprop.0+0xd8>
 8005472:	f8c8 1000 	str.w	r1, [r8]
 8005476:	e794      	b.n	80053a2 <_strtol_l.constprop.0+0x1a>
 8005478:	08008cc1 	.word	0x08008cc1

0800547c <strtol>:
 800547c:	4613      	mov	r3, r2
 800547e:	460a      	mov	r2, r1
 8005480:	4601      	mov	r1, r0
 8005482:	4802      	ldr	r0, [pc, #8]	@ (800548c <strtol+0x10>)
 8005484:	6800      	ldr	r0, [r0, #0]
 8005486:	f7ff bf7f 	b.w	8005388 <_strtol_l.constprop.0>
 800548a:	bf00      	nop
 800548c:	20000184 	.word	0x20000184

08005490 <__cvt>:
 8005490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005494:	ec57 6b10 	vmov	r6, r7, d0
 8005498:	2f00      	cmp	r7, #0
 800549a:	460c      	mov	r4, r1
 800549c:	4619      	mov	r1, r3
 800549e:	463b      	mov	r3, r7
 80054a0:	bfbb      	ittet	lt
 80054a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80054a6:	461f      	movlt	r7, r3
 80054a8:	2300      	movge	r3, #0
 80054aa:	232d      	movlt	r3, #45	@ 0x2d
 80054ac:	700b      	strb	r3, [r1, #0]
 80054ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054b4:	4691      	mov	r9, r2
 80054b6:	f023 0820 	bic.w	r8, r3, #32
 80054ba:	bfbc      	itt	lt
 80054bc:	4632      	movlt	r2, r6
 80054be:	4616      	movlt	r6, r2
 80054c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054c4:	d005      	beq.n	80054d2 <__cvt+0x42>
 80054c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054ca:	d100      	bne.n	80054ce <__cvt+0x3e>
 80054cc:	3401      	adds	r4, #1
 80054ce:	2102      	movs	r1, #2
 80054d0:	e000      	b.n	80054d4 <__cvt+0x44>
 80054d2:	2103      	movs	r1, #3
 80054d4:	ab03      	add	r3, sp, #12
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	ab02      	add	r3, sp, #8
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	ec47 6b10 	vmov	d0, r6, r7
 80054e0:	4653      	mov	r3, sl
 80054e2:	4622      	mov	r2, r4
 80054e4:	f000 ff68 	bl	80063b8 <_dtoa_r>
 80054e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054ec:	4605      	mov	r5, r0
 80054ee:	d119      	bne.n	8005524 <__cvt+0x94>
 80054f0:	f019 0f01 	tst.w	r9, #1
 80054f4:	d00e      	beq.n	8005514 <__cvt+0x84>
 80054f6:	eb00 0904 	add.w	r9, r0, r4
 80054fa:	2200      	movs	r2, #0
 80054fc:	2300      	movs	r3, #0
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	f7fb fb01 	bl	8000b08 <__aeabi_dcmpeq>
 8005506:	b108      	cbz	r0, 800550c <__cvt+0x7c>
 8005508:	f8cd 900c 	str.w	r9, [sp, #12]
 800550c:	2230      	movs	r2, #48	@ 0x30
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	454b      	cmp	r3, r9
 8005512:	d31e      	bcc.n	8005552 <__cvt+0xc2>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005518:	1b5b      	subs	r3, r3, r5
 800551a:	4628      	mov	r0, r5
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	b004      	add	sp, #16
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005528:	eb00 0904 	add.w	r9, r0, r4
 800552c:	d1e5      	bne.n	80054fa <__cvt+0x6a>
 800552e:	7803      	ldrb	r3, [r0, #0]
 8005530:	2b30      	cmp	r3, #48	@ 0x30
 8005532:	d10a      	bne.n	800554a <__cvt+0xba>
 8005534:	2200      	movs	r2, #0
 8005536:	2300      	movs	r3, #0
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fb fae4 	bl	8000b08 <__aeabi_dcmpeq>
 8005540:	b918      	cbnz	r0, 800554a <__cvt+0xba>
 8005542:	f1c4 0401 	rsb	r4, r4, #1
 8005546:	f8ca 4000 	str.w	r4, [sl]
 800554a:	f8da 3000 	ldr.w	r3, [sl]
 800554e:	4499      	add	r9, r3
 8005550:	e7d3      	b.n	80054fa <__cvt+0x6a>
 8005552:	1c59      	adds	r1, r3, #1
 8005554:	9103      	str	r1, [sp, #12]
 8005556:	701a      	strb	r2, [r3, #0]
 8005558:	e7d9      	b.n	800550e <__cvt+0x7e>

0800555a <__exponent>:
 800555a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555c:	2900      	cmp	r1, #0
 800555e:	bfba      	itte	lt
 8005560:	4249      	neglt	r1, r1
 8005562:	232d      	movlt	r3, #45	@ 0x2d
 8005564:	232b      	movge	r3, #43	@ 0x2b
 8005566:	2909      	cmp	r1, #9
 8005568:	7002      	strb	r2, [r0, #0]
 800556a:	7043      	strb	r3, [r0, #1]
 800556c:	dd29      	ble.n	80055c2 <__exponent+0x68>
 800556e:	f10d 0307 	add.w	r3, sp, #7
 8005572:	461d      	mov	r5, r3
 8005574:	270a      	movs	r7, #10
 8005576:	461a      	mov	r2, r3
 8005578:	fbb1 f6f7 	udiv	r6, r1, r7
 800557c:	fb07 1416 	mls	r4, r7, r6, r1
 8005580:	3430      	adds	r4, #48	@ 0x30
 8005582:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005586:	460c      	mov	r4, r1
 8005588:	2c63      	cmp	r4, #99	@ 0x63
 800558a:	f103 33ff 	add.w	r3, r3, #4294967295
 800558e:	4631      	mov	r1, r6
 8005590:	dcf1      	bgt.n	8005576 <__exponent+0x1c>
 8005592:	3130      	adds	r1, #48	@ 0x30
 8005594:	1e94      	subs	r4, r2, #2
 8005596:	f803 1c01 	strb.w	r1, [r3, #-1]
 800559a:	1c41      	adds	r1, r0, #1
 800559c:	4623      	mov	r3, r4
 800559e:	42ab      	cmp	r3, r5
 80055a0:	d30a      	bcc.n	80055b8 <__exponent+0x5e>
 80055a2:	f10d 0309 	add.w	r3, sp, #9
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	42ac      	cmp	r4, r5
 80055aa:	bf88      	it	hi
 80055ac:	2300      	movhi	r3, #0
 80055ae:	3302      	adds	r3, #2
 80055b0:	4403      	add	r3, r0
 80055b2:	1a18      	subs	r0, r3, r0
 80055b4:	b003      	add	sp, #12
 80055b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055c0:	e7ed      	b.n	800559e <__exponent+0x44>
 80055c2:	2330      	movs	r3, #48	@ 0x30
 80055c4:	3130      	adds	r1, #48	@ 0x30
 80055c6:	7083      	strb	r3, [r0, #2]
 80055c8:	70c1      	strb	r1, [r0, #3]
 80055ca:	1d03      	adds	r3, r0, #4
 80055cc:	e7f1      	b.n	80055b2 <__exponent+0x58>
	...

080055d0 <_printf_float>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	b08d      	sub	sp, #52	@ 0x34
 80055d6:	460c      	mov	r4, r1
 80055d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055dc:	4616      	mov	r6, r2
 80055de:	461f      	mov	r7, r3
 80055e0:	4605      	mov	r5, r0
 80055e2:	f000 fdd1 	bl	8006188 <_localeconv_r>
 80055e6:	6803      	ldr	r3, [r0, #0]
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fa fe60 	bl	80002b0 <strlen>
 80055f0:	2300      	movs	r3, #0
 80055f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80055f4:	f8d8 3000 	ldr.w	r3, [r8]
 80055f8:	9005      	str	r0, [sp, #20]
 80055fa:	3307      	adds	r3, #7
 80055fc:	f023 0307 	bic.w	r3, r3, #7
 8005600:	f103 0208 	add.w	r2, r3, #8
 8005604:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005608:	f8d4 b000 	ldr.w	fp, [r4]
 800560c:	f8c8 2000 	str.w	r2, [r8]
 8005610:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005614:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005618:	9307      	str	r3, [sp, #28]
 800561a:	f8cd 8018 	str.w	r8, [sp, #24]
 800561e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005626:	4b9c      	ldr	r3, [pc, #624]	@ (8005898 <_printf_float+0x2c8>)
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	f7fb fa9e 	bl	8000b6c <__aeabi_dcmpun>
 8005630:	bb70      	cbnz	r0, 8005690 <_printf_float+0xc0>
 8005632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005636:	4b98      	ldr	r3, [pc, #608]	@ (8005898 <_printf_float+0x2c8>)
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	f7fb fa78 	bl	8000b30 <__aeabi_dcmple>
 8005640:	bb30      	cbnz	r0, 8005690 <_printf_float+0xc0>
 8005642:	2200      	movs	r2, #0
 8005644:	2300      	movs	r3, #0
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	f7fb fa67 	bl	8000b1c <__aeabi_dcmplt>
 800564e:	b110      	cbz	r0, 8005656 <_printf_float+0x86>
 8005650:	232d      	movs	r3, #45	@ 0x2d
 8005652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005656:	4a91      	ldr	r2, [pc, #580]	@ (800589c <_printf_float+0x2cc>)
 8005658:	4b91      	ldr	r3, [pc, #580]	@ (80058a0 <_printf_float+0x2d0>)
 800565a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800565e:	bf94      	ite	ls
 8005660:	4690      	movls	r8, r2
 8005662:	4698      	movhi	r8, r3
 8005664:	2303      	movs	r3, #3
 8005666:	6123      	str	r3, [r4, #16]
 8005668:	f02b 0304 	bic.w	r3, fp, #4
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	9700      	str	r7, [sp, #0]
 8005674:	4633      	mov	r3, r6
 8005676:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005678:	4621      	mov	r1, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f9d2 	bl	8005a24 <_printf_common>
 8005680:	3001      	adds	r0, #1
 8005682:	f040 808d 	bne.w	80057a0 <_printf_float+0x1d0>
 8005686:	f04f 30ff 	mov.w	r0, #4294967295
 800568a:	b00d      	add	sp, #52	@ 0x34
 800568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005690:	4642      	mov	r2, r8
 8005692:	464b      	mov	r3, r9
 8005694:	4640      	mov	r0, r8
 8005696:	4649      	mov	r1, r9
 8005698:	f7fb fa68 	bl	8000b6c <__aeabi_dcmpun>
 800569c:	b140      	cbz	r0, 80056b0 <_printf_float+0xe0>
 800569e:	464b      	mov	r3, r9
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfbc      	itt	lt
 80056a4:	232d      	movlt	r3, #45	@ 0x2d
 80056a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056aa:	4a7e      	ldr	r2, [pc, #504]	@ (80058a4 <_printf_float+0x2d4>)
 80056ac:	4b7e      	ldr	r3, [pc, #504]	@ (80058a8 <_printf_float+0x2d8>)
 80056ae:	e7d4      	b.n	800565a <_printf_float+0x8a>
 80056b0:	6863      	ldr	r3, [r4, #4]
 80056b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056b6:	9206      	str	r2, [sp, #24]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	d13b      	bne.n	8005734 <_printf_float+0x164>
 80056bc:	2306      	movs	r3, #6
 80056be:	6063      	str	r3, [r4, #4]
 80056c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056c4:	2300      	movs	r3, #0
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	9303      	str	r3, [sp, #12]
 80056ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80056cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056d0:	ab09      	add	r3, sp, #36	@ 0x24
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	6861      	ldr	r1, [r4, #4]
 80056d6:	ec49 8b10 	vmov	d0, r8, r9
 80056da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056de:	4628      	mov	r0, r5
 80056e0:	f7ff fed6 	bl	8005490 <__cvt>
 80056e4:	9b06      	ldr	r3, [sp, #24]
 80056e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056e8:	2b47      	cmp	r3, #71	@ 0x47
 80056ea:	4680      	mov	r8, r0
 80056ec:	d129      	bne.n	8005742 <_printf_float+0x172>
 80056ee:	1cc8      	adds	r0, r1, #3
 80056f0:	db02      	blt.n	80056f8 <_printf_float+0x128>
 80056f2:	6863      	ldr	r3, [r4, #4]
 80056f4:	4299      	cmp	r1, r3
 80056f6:	dd41      	ble.n	800577c <_printf_float+0x1ac>
 80056f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80056fc:	fa5f fa8a 	uxtb.w	sl, sl
 8005700:	3901      	subs	r1, #1
 8005702:	4652      	mov	r2, sl
 8005704:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005708:	9109      	str	r1, [sp, #36]	@ 0x24
 800570a:	f7ff ff26 	bl	800555a <__exponent>
 800570e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005710:	1813      	adds	r3, r2, r0
 8005712:	2a01      	cmp	r2, #1
 8005714:	4681      	mov	r9, r0
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	dc02      	bgt.n	8005720 <_printf_float+0x150>
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	07d2      	lsls	r2, r2, #31
 800571e:	d501      	bpl.n	8005724 <_printf_float+0x154>
 8005720:	3301      	adds	r3, #1
 8005722:	6123      	str	r3, [r4, #16]
 8005724:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0a2      	beq.n	8005672 <_printf_float+0xa2>
 800572c:	232d      	movs	r3, #45	@ 0x2d
 800572e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005732:	e79e      	b.n	8005672 <_printf_float+0xa2>
 8005734:	9a06      	ldr	r2, [sp, #24]
 8005736:	2a47      	cmp	r2, #71	@ 0x47
 8005738:	d1c2      	bne.n	80056c0 <_printf_float+0xf0>
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1c0      	bne.n	80056c0 <_printf_float+0xf0>
 800573e:	2301      	movs	r3, #1
 8005740:	e7bd      	b.n	80056be <_printf_float+0xee>
 8005742:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005746:	d9db      	bls.n	8005700 <_printf_float+0x130>
 8005748:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800574c:	d118      	bne.n	8005780 <_printf_float+0x1b0>
 800574e:	2900      	cmp	r1, #0
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	dd0b      	ble.n	800576c <_printf_float+0x19c>
 8005754:	6121      	str	r1, [r4, #16]
 8005756:	b913      	cbnz	r3, 800575e <_printf_float+0x18e>
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	07d0      	lsls	r0, r2, #31
 800575c:	d502      	bpl.n	8005764 <_printf_float+0x194>
 800575e:	3301      	adds	r3, #1
 8005760:	440b      	add	r3, r1
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	e7db      	b.n	8005724 <_printf_float+0x154>
 800576c:	b913      	cbnz	r3, 8005774 <_printf_float+0x1a4>
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	07d2      	lsls	r2, r2, #31
 8005772:	d501      	bpl.n	8005778 <_printf_float+0x1a8>
 8005774:	3302      	adds	r3, #2
 8005776:	e7f4      	b.n	8005762 <_printf_float+0x192>
 8005778:	2301      	movs	r3, #1
 800577a:	e7f2      	b.n	8005762 <_printf_float+0x192>
 800577c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005782:	4299      	cmp	r1, r3
 8005784:	db05      	blt.n	8005792 <_printf_float+0x1c2>
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	6121      	str	r1, [r4, #16]
 800578a:	07d8      	lsls	r0, r3, #31
 800578c:	d5ea      	bpl.n	8005764 <_printf_float+0x194>
 800578e:	1c4b      	adds	r3, r1, #1
 8005790:	e7e7      	b.n	8005762 <_printf_float+0x192>
 8005792:	2900      	cmp	r1, #0
 8005794:	bfd4      	ite	le
 8005796:	f1c1 0202 	rsble	r2, r1, #2
 800579a:	2201      	movgt	r2, #1
 800579c:	4413      	add	r3, r2
 800579e:	e7e0      	b.n	8005762 <_printf_float+0x192>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	055a      	lsls	r2, r3, #21
 80057a4:	d407      	bmi.n	80057b6 <_printf_float+0x1e6>
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	4642      	mov	r2, r8
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	d12b      	bne.n	800580c <_printf_float+0x23c>
 80057b4:	e767      	b.n	8005686 <_printf_float+0xb6>
 80057b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057ba:	f240 80dd 	bls.w	8005978 <_printf_float+0x3a8>
 80057be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057c2:	2200      	movs	r2, #0
 80057c4:	2300      	movs	r3, #0
 80057c6:	f7fb f99f 	bl	8000b08 <__aeabi_dcmpeq>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	d033      	beq.n	8005836 <_printf_float+0x266>
 80057ce:	4a37      	ldr	r2, [pc, #220]	@ (80058ac <_printf_float+0x2dc>)
 80057d0:	2301      	movs	r3, #1
 80057d2:	4631      	mov	r1, r6
 80057d4:	4628      	mov	r0, r5
 80057d6:	47b8      	blx	r7
 80057d8:	3001      	adds	r0, #1
 80057da:	f43f af54 	beq.w	8005686 <_printf_float+0xb6>
 80057de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057e2:	4543      	cmp	r3, r8
 80057e4:	db02      	blt.n	80057ec <_printf_float+0x21c>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	07d8      	lsls	r0, r3, #31
 80057ea:	d50f      	bpl.n	800580c <_printf_float+0x23c>
 80057ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057f0:	4631      	mov	r1, r6
 80057f2:	4628      	mov	r0, r5
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	f43f af45 	beq.w	8005686 <_printf_float+0xb6>
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	f108 38ff 	add.w	r8, r8, #4294967295
 8005804:	f104 0a1a 	add.w	sl, r4, #26
 8005808:	45c8      	cmp	r8, r9
 800580a:	dc09      	bgt.n	8005820 <_printf_float+0x250>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	079b      	lsls	r3, r3, #30
 8005810:	f100 8103 	bmi.w	8005a1a <_printf_float+0x44a>
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005818:	4298      	cmp	r0, r3
 800581a:	bfb8      	it	lt
 800581c:	4618      	movlt	r0, r3
 800581e:	e734      	b.n	800568a <_printf_float+0xba>
 8005820:	2301      	movs	r3, #1
 8005822:	4652      	mov	r2, sl
 8005824:	4631      	mov	r1, r6
 8005826:	4628      	mov	r0, r5
 8005828:	47b8      	blx	r7
 800582a:	3001      	adds	r0, #1
 800582c:	f43f af2b 	beq.w	8005686 <_printf_float+0xb6>
 8005830:	f109 0901 	add.w	r9, r9, #1
 8005834:	e7e8      	b.n	8005808 <_printf_float+0x238>
 8005836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005838:	2b00      	cmp	r3, #0
 800583a:	dc39      	bgt.n	80058b0 <_printf_float+0x2e0>
 800583c:	4a1b      	ldr	r2, [pc, #108]	@ (80058ac <_printf_float+0x2dc>)
 800583e:	2301      	movs	r3, #1
 8005840:	4631      	mov	r1, r6
 8005842:	4628      	mov	r0, r5
 8005844:	47b8      	blx	r7
 8005846:	3001      	adds	r0, #1
 8005848:	f43f af1d 	beq.w	8005686 <_printf_float+0xb6>
 800584c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005850:	ea59 0303 	orrs.w	r3, r9, r3
 8005854:	d102      	bne.n	800585c <_printf_float+0x28c>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	07d9      	lsls	r1, r3, #31
 800585a:	d5d7      	bpl.n	800580c <_printf_float+0x23c>
 800585c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f af0d 	beq.w	8005686 <_printf_float+0xb6>
 800586c:	f04f 0a00 	mov.w	sl, #0
 8005870:	f104 0b1a 	add.w	fp, r4, #26
 8005874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005876:	425b      	negs	r3, r3
 8005878:	4553      	cmp	r3, sl
 800587a:	dc01      	bgt.n	8005880 <_printf_float+0x2b0>
 800587c:	464b      	mov	r3, r9
 800587e:	e793      	b.n	80057a8 <_printf_float+0x1d8>
 8005880:	2301      	movs	r3, #1
 8005882:	465a      	mov	r2, fp
 8005884:	4631      	mov	r1, r6
 8005886:	4628      	mov	r0, r5
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	f43f aefb 	beq.w	8005686 <_printf_float+0xb6>
 8005890:	f10a 0a01 	add.w	sl, sl, #1
 8005894:	e7ee      	b.n	8005874 <_printf_float+0x2a4>
 8005896:	bf00      	nop
 8005898:	7fefffff 	.word	0x7fefffff
 800589c:	08008dc1 	.word	0x08008dc1
 80058a0:	08008dc5 	.word	0x08008dc5
 80058a4:	08008dc9 	.word	0x08008dc9
 80058a8:	08008dcd 	.word	0x08008dcd
 80058ac:	08008dd1 	.word	0x08008dd1
 80058b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058b6:	4553      	cmp	r3, sl
 80058b8:	bfa8      	it	ge
 80058ba:	4653      	movge	r3, sl
 80058bc:	2b00      	cmp	r3, #0
 80058be:	4699      	mov	r9, r3
 80058c0:	dc36      	bgt.n	8005930 <_printf_float+0x360>
 80058c2:	f04f 0b00 	mov.w	fp, #0
 80058c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ca:	f104 021a 	add.w	r2, r4, #26
 80058ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058d0:	9306      	str	r3, [sp, #24]
 80058d2:	eba3 0309 	sub.w	r3, r3, r9
 80058d6:	455b      	cmp	r3, fp
 80058d8:	dc31      	bgt.n	800593e <_printf_float+0x36e>
 80058da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058dc:	459a      	cmp	sl, r3
 80058de:	dc3a      	bgt.n	8005956 <_printf_float+0x386>
 80058e0:	6823      	ldr	r3, [r4, #0]
 80058e2:	07da      	lsls	r2, r3, #31
 80058e4:	d437      	bmi.n	8005956 <_printf_float+0x386>
 80058e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058e8:	ebaa 0903 	sub.w	r9, sl, r3
 80058ec:	9b06      	ldr	r3, [sp, #24]
 80058ee:	ebaa 0303 	sub.w	r3, sl, r3
 80058f2:	4599      	cmp	r9, r3
 80058f4:	bfa8      	it	ge
 80058f6:	4699      	movge	r9, r3
 80058f8:	f1b9 0f00 	cmp.w	r9, #0
 80058fc:	dc33      	bgt.n	8005966 <_printf_float+0x396>
 80058fe:	f04f 0800 	mov.w	r8, #0
 8005902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005906:	f104 0b1a 	add.w	fp, r4, #26
 800590a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590c:	ebaa 0303 	sub.w	r3, sl, r3
 8005910:	eba3 0309 	sub.w	r3, r3, r9
 8005914:	4543      	cmp	r3, r8
 8005916:	f77f af79 	ble.w	800580c <_printf_float+0x23c>
 800591a:	2301      	movs	r3, #1
 800591c:	465a      	mov	r2, fp
 800591e:	4631      	mov	r1, r6
 8005920:	4628      	mov	r0, r5
 8005922:	47b8      	blx	r7
 8005924:	3001      	adds	r0, #1
 8005926:	f43f aeae 	beq.w	8005686 <_printf_float+0xb6>
 800592a:	f108 0801 	add.w	r8, r8, #1
 800592e:	e7ec      	b.n	800590a <_printf_float+0x33a>
 8005930:	4642      	mov	r2, r8
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	d1c2      	bne.n	80058c2 <_printf_float+0x2f2>
 800593c:	e6a3      	b.n	8005686 <_printf_float+0xb6>
 800593e:	2301      	movs	r3, #1
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	9206      	str	r2, [sp, #24]
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	f43f ae9c 	beq.w	8005686 <_printf_float+0xb6>
 800594e:	9a06      	ldr	r2, [sp, #24]
 8005950:	f10b 0b01 	add.w	fp, fp, #1
 8005954:	e7bb      	b.n	80058ce <_printf_float+0x2fe>
 8005956:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	d1c0      	bne.n	80058e6 <_printf_float+0x316>
 8005964:	e68f      	b.n	8005686 <_printf_float+0xb6>
 8005966:	9a06      	ldr	r2, [sp, #24]
 8005968:	464b      	mov	r3, r9
 800596a:	4442      	add	r2, r8
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	d1c3      	bne.n	80058fe <_printf_float+0x32e>
 8005976:	e686      	b.n	8005686 <_printf_float+0xb6>
 8005978:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800597c:	f1ba 0f01 	cmp.w	sl, #1
 8005980:	dc01      	bgt.n	8005986 <_printf_float+0x3b6>
 8005982:	07db      	lsls	r3, r3, #31
 8005984:	d536      	bpl.n	80059f4 <_printf_float+0x424>
 8005986:	2301      	movs	r3, #1
 8005988:	4642      	mov	r2, r8
 800598a:	4631      	mov	r1, r6
 800598c:	4628      	mov	r0, r5
 800598e:	47b8      	blx	r7
 8005990:	3001      	adds	r0, #1
 8005992:	f43f ae78 	beq.w	8005686 <_printf_float+0xb6>
 8005996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	f43f ae70 	beq.w	8005686 <_printf_float+0xb6>
 80059a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059aa:	2200      	movs	r2, #0
 80059ac:	2300      	movs	r3, #0
 80059ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059b2:	f7fb f8a9 	bl	8000b08 <__aeabi_dcmpeq>
 80059b6:	b9c0      	cbnz	r0, 80059ea <_printf_float+0x41a>
 80059b8:	4653      	mov	r3, sl
 80059ba:	f108 0201 	add.w	r2, r8, #1
 80059be:	4631      	mov	r1, r6
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b8      	blx	r7
 80059c4:	3001      	adds	r0, #1
 80059c6:	d10c      	bne.n	80059e2 <_printf_float+0x412>
 80059c8:	e65d      	b.n	8005686 <_printf_float+0xb6>
 80059ca:	2301      	movs	r3, #1
 80059cc:	465a      	mov	r2, fp
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	f43f ae56 	beq.w	8005686 <_printf_float+0xb6>
 80059da:	f108 0801 	add.w	r8, r8, #1
 80059de:	45d0      	cmp	r8, sl
 80059e0:	dbf3      	blt.n	80059ca <_printf_float+0x3fa>
 80059e2:	464b      	mov	r3, r9
 80059e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059e8:	e6df      	b.n	80057aa <_printf_float+0x1da>
 80059ea:	f04f 0800 	mov.w	r8, #0
 80059ee:	f104 0b1a 	add.w	fp, r4, #26
 80059f2:	e7f4      	b.n	80059de <_printf_float+0x40e>
 80059f4:	2301      	movs	r3, #1
 80059f6:	4642      	mov	r2, r8
 80059f8:	e7e1      	b.n	80059be <_printf_float+0x3ee>
 80059fa:	2301      	movs	r3, #1
 80059fc:	464a      	mov	r2, r9
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	47b8      	blx	r7
 8005a04:	3001      	adds	r0, #1
 8005a06:	f43f ae3e 	beq.w	8005686 <_printf_float+0xb6>
 8005a0a:	f108 0801 	add.w	r8, r8, #1
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a12:	1a5b      	subs	r3, r3, r1
 8005a14:	4543      	cmp	r3, r8
 8005a16:	dcf0      	bgt.n	80059fa <_printf_float+0x42a>
 8005a18:	e6fc      	b.n	8005814 <_printf_float+0x244>
 8005a1a:	f04f 0800 	mov.w	r8, #0
 8005a1e:	f104 0919 	add.w	r9, r4, #25
 8005a22:	e7f4      	b.n	8005a0e <_printf_float+0x43e>

08005a24 <_printf_common>:
 8005a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	4616      	mov	r6, r2
 8005a2a:	4698      	mov	r8, r3
 8005a2c:	688a      	ldr	r2, [r1, #8]
 8005a2e:	690b      	ldr	r3, [r1, #16]
 8005a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a34:	4293      	cmp	r3, r2
 8005a36:	bfb8      	it	lt
 8005a38:	4613      	movlt	r3, r2
 8005a3a:	6033      	str	r3, [r6, #0]
 8005a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a40:	4607      	mov	r7, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	b10a      	cbz	r2, 8005a4a <_printf_common+0x26>
 8005a46:	3301      	adds	r3, #1
 8005a48:	6033      	str	r3, [r6, #0]
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	0699      	lsls	r1, r3, #26
 8005a4e:	bf42      	ittt	mi
 8005a50:	6833      	ldrmi	r3, [r6, #0]
 8005a52:	3302      	addmi	r3, #2
 8005a54:	6033      	strmi	r3, [r6, #0]
 8005a56:	6825      	ldr	r5, [r4, #0]
 8005a58:	f015 0506 	ands.w	r5, r5, #6
 8005a5c:	d106      	bne.n	8005a6c <_printf_common+0x48>
 8005a5e:	f104 0a19 	add.w	sl, r4, #25
 8005a62:	68e3      	ldr	r3, [r4, #12]
 8005a64:	6832      	ldr	r2, [r6, #0]
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	42ab      	cmp	r3, r5
 8005a6a:	dc26      	bgt.n	8005aba <_printf_common+0x96>
 8005a6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a70:	6822      	ldr	r2, [r4, #0]
 8005a72:	3b00      	subs	r3, #0
 8005a74:	bf18      	it	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	0692      	lsls	r2, r2, #26
 8005a7a:	d42b      	bmi.n	8005ad4 <_printf_common+0xb0>
 8005a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a80:	4641      	mov	r1, r8
 8005a82:	4638      	mov	r0, r7
 8005a84:	47c8      	blx	r9
 8005a86:	3001      	adds	r0, #1
 8005a88:	d01e      	beq.n	8005ac8 <_printf_common+0xa4>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	6922      	ldr	r2, [r4, #16]
 8005a8e:	f003 0306 	and.w	r3, r3, #6
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	bf02      	ittt	eq
 8005a96:	68e5      	ldreq	r5, [r4, #12]
 8005a98:	6833      	ldreq	r3, [r6, #0]
 8005a9a:	1aed      	subeq	r5, r5, r3
 8005a9c:	68a3      	ldr	r3, [r4, #8]
 8005a9e:	bf0c      	ite	eq
 8005aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa4:	2500      	movne	r5, #0
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	bfc4      	itt	gt
 8005aaa:	1a9b      	subgt	r3, r3, r2
 8005aac:	18ed      	addgt	r5, r5, r3
 8005aae:	2600      	movs	r6, #0
 8005ab0:	341a      	adds	r4, #26
 8005ab2:	42b5      	cmp	r5, r6
 8005ab4:	d11a      	bne.n	8005aec <_printf_common+0xc8>
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	e008      	b.n	8005acc <_printf_common+0xa8>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4652      	mov	r2, sl
 8005abe:	4641      	mov	r1, r8
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	47c8      	blx	r9
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_printf_common+0xac>
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7c6      	b.n	8005a62 <_printf_common+0x3e>
 8005ad4:	18e1      	adds	r1, r4, r3
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	2030      	movs	r0, #48	@ 0x30
 8005ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ade:	4422      	add	r2, r4
 8005ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ae8:	3302      	adds	r3, #2
 8005aea:	e7c7      	b.n	8005a7c <_printf_common+0x58>
 8005aec:	2301      	movs	r3, #1
 8005aee:	4622      	mov	r2, r4
 8005af0:	4641      	mov	r1, r8
 8005af2:	4638      	mov	r0, r7
 8005af4:	47c8      	blx	r9
 8005af6:	3001      	adds	r0, #1
 8005af8:	d0e6      	beq.n	8005ac8 <_printf_common+0xa4>
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7d9      	b.n	8005ab2 <_printf_common+0x8e>
	...

08005b00 <_printf_i>:
 8005b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b04:	7e0f      	ldrb	r7, [r1, #24]
 8005b06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b08:	2f78      	cmp	r7, #120	@ 0x78
 8005b0a:	4691      	mov	r9, r2
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	469a      	mov	sl, r3
 8005b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b16:	d807      	bhi.n	8005b28 <_printf_i+0x28>
 8005b18:	2f62      	cmp	r7, #98	@ 0x62
 8005b1a:	d80a      	bhi.n	8005b32 <_printf_i+0x32>
 8005b1c:	2f00      	cmp	r7, #0
 8005b1e:	f000 80d2 	beq.w	8005cc6 <_printf_i+0x1c6>
 8005b22:	2f58      	cmp	r7, #88	@ 0x58
 8005b24:	f000 80b9 	beq.w	8005c9a <_printf_i+0x19a>
 8005b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b30:	e03a      	b.n	8005ba8 <_printf_i+0xa8>
 8005b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b36:	2b15      	cmp	r3, #21
 8005b38:	d8f6      	bhi.n	8005b28 <_printf_i+0x28>
 8005b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b40 <_printf_i+0x40>)
 8005b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005bad 	.word	0x08005bad
 8005b48:	08005b29 	.word	0x08005b29
 8005b4c:	08005b29 	.word	0x08005b29
 8005b50:	08005b29 	.word	0x08005b29
 8005b54:	08005b29 	.word	0x08005b29
 8005b58:	08005bad 	.word	0x08005bad
 8005b5c:	08005b29 	.word	0x08005b29
 8005b60:	08005b29 	.word	0x08005b29
 8005b64:	08005b29 	.word	0x08005b29
 8005b68:	08005b29 	.word	0x08005b29
 8005b6c:	08005cad 	.word	0x08005cad
 8005b70:	08005bd7 	.word	0x08005bd7
 8005b74:	08005c67 	.word	0x08005c67
 8005b78:	08005b29 	.word	0x08005b29
 8005b7c:	08005b29 	.word	0x08005b29
 8005b80:	08005ccf 	.word	0x08005ccf
 8005b84:	08005b29 	.word	0x08005b29
 8005b88:	08005bd7 	.word	0x08005bd7
 8005b8c:	08005b29 	.word	0x08005b29
 8005b90:	08005b29 	.word	0x08005b29
 8005b94:	08005c6f 	.word	0x08005c6f
 8005b98:	6833      	ldr	r3, [r6, #0]
 8005b9a:	1d1a      	adds	r2, r3, #4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6032      	str	r2, [r6, #0]
 8005ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e09d      	b.n	8005ce8 <_printf_i+0x1e8>
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	6820      	ldr	r0, [r4, #0]
 8005bb0:	1d19      	adds	r1, r3, #4
 8005bb2:	6031      	str	r1, [r6, #0]
 8005bb4:	0606      	lsls	r6, r0, #24
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0xbc>
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	e003      	b.n	8005bc4 <_printf_i+0xc4>
 8005bbc:	0645      	lsls	r5, r0, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0xb8>
 8005bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	da03      	bge.n	8005bd0 <_printf_i+0xd0>
 8005bc8:	232d      	movs	r3, #45	@ 0x2d
 8005bca:	426d      	negs	r5, r5
 8005bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bd0:	4859      	ldr	r0, [pc, #356]	@ (8005d38 <_printf_i+0x238>)
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e011      	b.n	8005bfa <_printf_i+0xfa>
 8005bd6:	6821      	ldr	r1, [r4, #0]
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	0608      	lsls	r0, r1, #24
 8005bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005be0:	d402      	bmi.n	8005be8 <_printf_i+0xe8>
 8005be2:	0649      	lsls	r1, r1, #25
 8005be4:	bf48      	it	mi
 8005be6:	b2ad      	uxthmi	r5, r5
 8005be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bea:	4853      	ldr	r0, [pc, #332]	@ (8005d38 <_printf_i+0x238>)
 8005bec:	6033      	str	r3, [r6, #0]
 8005bee:	bf14      	ite	ne
 8005bf0:	230a      	movne	r3, #10
 8005bf2:	2308      	moveq	r3, #8
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bfa:	6866      	ldr	r6, [r4, #4]
 8005bfc:	60a6      	str	r6, [r4, #8]
 8005bfe:	2e00      	cmp	r6, #0
 8005c00:	bfa2      	ittt	ge
 8005c02:	6821      	ldrge	r1, [r4, #0]
 8005c04:	f021 0104 	bicge.w	r1, r1, #4
 8005c08:	6021      	strge	r1, [r4, #0]
 8005c0a:	b90d      	cbnz	r5, 8005c10 <_printf_i+0x110>
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	d04b      	beq.n	8005ca8 <_printf_i+0x1a8>
 8005c10:	4616      	mov	r6, r2
 8005c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c16:	fb03 5711 	mls	r7, r3, r1, r5
 8005c1a:	5dc7      	ldrb	r7, [r0, r7]
 8005c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c20:	462f      	mov	r7, r5
 8005c22:	42bb      	cmp	r3, r7
 8005c24:	460d      	mov	r5, r1
 8005c26:	d9f4      	bls.n	8005c12 <_printf_i+0x112>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d10b      	bne.n	8005c44 <_printf_i+0x144>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	07df      	lsls	r7, r3, #31
 8005c30:	d508      	bpl.n	8005c44 <_printf_i+0x144>
 8005c32:	6923      	ldr	r3, [r4, #16]
 8005c34:	6861      	ldr	r1, [r4, #4]
 8005c36:	4299      	cmp	r1, r3
 8005c38:	bfde      	ittt	le
 8005c3a:	2330      	movle	r3, #48	@ 0x30
 8005c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c44:	1b92      	subs	r2, r2, r6
 8005c46:	6122      	str	r2, [r4, #16]
 8005c48:	f8cd a000 	str.w	sl, [sp]
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	aa03      	add	r2, sp, #12
 8005c50:	4621      	mov	r1, r4
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7ff fee6 	bl	8005a24 <_printf_common>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d14a      	bne.n	8005cf2 <_printf_i+0x1f2>
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	b004      	add	sp, #16
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f043 0320 	orr.w	r3, r3, #32
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	4833      	ldr	r0, [pc, #204]	@ (8005d3c <_printf_i+0x23c>)
 8005c70:	2778      	movs	r7, #120	@ 0x78
 8005c72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	6831      	ldr	r1, [r6, #0]
 8005c7a:	061f      	lsls	r7, r3, #24
 8005c7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c80:	d402      	bmi.n	8005c88 <_printf_i+0x188>
 8005c82:	065f      	lsls	r7, r3, #25
 8005c84:	bf48      	it	mi
 8005c86:	b2ad      	uxthmi	r5, r5
 8005c88:	6031      	str	r1, [r6, #0]
 8005c8a:	07d9      	lsls	r1, r3, #31
 8005c8c:	bf44      	itt	mi
 8005c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c92:	6023      	strmi	r3, [r4, #0]
 8005c94:	b11d      	cbz	r5, 8005c9e <_printf_i+0x19e>
 8005c96:	2310      	movs	r3, #16
 8005c98:	e7ac      	b.n	8005bf4 <_printf_i+0xf4>
 8005c9a:	4827      	ldr	r0, [pc, #156]	@ (8005d38 <_printf_i+0x238>)
 8005c9c:	e7e9      	b.n	8005c72 <_printf_i+0x172>
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	f023 0320 	bic.w	r3, r3, #32
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	e7f6      	b.n	8005c96 <_printf_i+0x196>
 8005ca8:	4616      	mov	r6, r2
 8005caa:	e7bd      	b.n	8005c28 <_printf_i+0x128>
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	6825      	ldr	r5, [r4, #0]
 8005cb0:	6961      	ldr	r1, [r4, #20]
 8005cb2:	1d18      	adds	r0, r3, #4
 8005cb4:	6030      	str	r0, [r6, #0]
 8005cb6:	062e      	lsls	r6, r5, #24
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	d501      	bpl.n	8005cc0 <_printf_i+0x1c0>
 8005cbc:	6019      	str	r1, [r3, #0]
 8005cbe:	e002      	b.n	8005cc6 <_printf_i+0x1c6>
 8005cc0:	0668      	lsls	r0, r5, #25
 8005cc2:	d5fb      	bpl.n	8005cbc <_printf_i+0x1bc>
 8005cc4:	8019      	strh	r1, [r3, #0]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6123      	str	r3, [r4, #16]
 8005cca:	4616      	mov	r6, r2
 8005ccc:	e7bc      	b.n	8005c48 <_printf_i+0x148>
 8005cce:	6833      	ldr	r3, [r6, #0]
 8005cd0:	1d1a      	adds	r2, r3, #4
 8005cd2:	6032      	str	r2, [r6, #0]
 8005cd4:	681e      	ldr	r6, [r3, #0]
 8005cd6:	6862      	ldr	r2, [r4, #4]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7fa fa98 	bl	8000210 <memchr>
 8005ce0:	b108      	cbz	r0, 8005ce6 <_printf_i+0x1e6>
 8005ce2:	1b80      	subs	r0, r0, r6
 8005ce4:	6060      	str	r0, [r4, #4]
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	2300      	movs	r3, #0
 8005cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cf0:	e7aa      	b.n	8005c48 <_printf_i+0x148>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	4640      	mov	r0, r8
 8005cfa:	47d0      	blx	sl
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d0ad      	beq.n	8005c5c <_printf_i+0x15c>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	079b      	lsls	r3, r3, #30
 8005d04:	d413      	bmi.n	8005d2e <_printf_i+0x22e>
 8005d06:	68e0      	ldr	r0, [r4, #12]
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	4298      	cmp	r0, r3
 8005d0c:	bfb8      	it	lt
 8005d0e:	4618      	movlt	r0, r3
 8005d10:	e7a6      	b.n	8005c60 <_printf_i+0x160>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4632      	mov	r2, r6
 8005d16:	4649      	mov	r1, r9
 8005d18:	4640      	mov	r0, r8
 8005d1a:	47d0      	blx	sl
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d09d      	beq.n	8005c5c <_printf_i+0x15c>
 8005d20:	3501      	adds	r5, #1
 8005d22:	68e3      	ldr	r3, [r4, #12]
 8005d24:	9903      	ldr	r1, [sp, #12]
 8005d26:	1a5b      	subs	r3, r3, r1
 8005d28:	42ab      	cmp	r3, r5
 8005d2a:	dcf2      	bgt.n	8005d12 <_printf_i+0x212>
 8005d2c:	e7eb      	b.n	8005d06 <_printf_i+0x206>
 8005d2e:	2500      	movs	r5, #0
 8005d30:	f104 0619 	add.w	r6, r4, #25
 8005d34:	e7f5      	b.n	8005d22 <_printf_i+0x222>
 8005d36:	bf00      	nop
 8005d38:	08008dd3 	.word	0x08008dd3
 8005d3c:	08008de4 	.word	0x08008de4

08005d40 <std>:
 8005d40:	2300      	movs	r3, #0
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4e:	6083      	str	r3, [r0, #8]
 8005d50:	8181      	strh	r1, [r0, #12]
 8005d52:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d54:	81c2      	strh	r2, [r0, #14]
 8005d56:	6183      	str	r3, [r0, #24]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	305c      	adds	r0, #92	@ 0x5c
 8005d5e:	f000 f9f9 	bl	8006154 <memset>
 8005d62:	4b0d      	ldr	r3, [pc, #52]	@ (8005d98 <std+0x58>)
 8005d64:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d66:	4b0d      	ldr	r3, [pc, #52]	@ (8005d9c <std+0x5c>)
 8005d68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005da0 <std+0x60>)
 8005d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <std+0x64>)
 8005d70:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <std+0x68>)
 8005d74:	6224      	str	r4, [r4, #32]
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d006      	beq.n	8005d88 <std+0x48>
 8005d7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d7e:	4294      	cmp	r4, r2
 8005d80:	d002      	beq.n	8005d88 <std+0x48>
 8005d82:	33d0      	adds	r3, #208	@ 0xd0
 8005d84:	429c      	cmp	r4, r3
 8005d86:	d105      	bne.n	8005d94 <std+0x54>
 8005d88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f000 ba6e 	b.w	8006270 <__retarget_lock_init_recursive>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	08005fa5 	.word	0x08005fa5
 8005d9c:	08005fc7 	.word	0x08005fc7
 8005da0:	08005fff 	.word	0x08005fff
 8005da4:	08006023 	.word	0x08006023
 8005da8:	20000538 	.word	0x20000538

08005dac <stdio_exit_handler>:
 8005dac:	4a02      	ldr	r2, [pc, #8]	@ (8005db8 <stdio_exit_handler+0xc>)
 8005dae:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <stdio_exit_handler+0x10>)
 8005db0:	4803      	ldr	r0, [pc, #12]	@ (8005dc0 <stdio_exit_handler+0x14>)
 8005db2:	f000 b869 	b.w	8005e88 <_fwalk_sglue>
 8005db6:	bf00      	nop
 8005db8:	2000000c 	.word	0x2000000c
 8005dbc:	080084e1 	.word	0x080084e1
 8005dc0:	20000188 	.word	0x20000188

08005dc4 <cleanup_stdio>:
 8005dc4:	6841      	ldr	r1, [r0, #4]
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005df8 <cleanup_stdio+0x34>)
 8005dc8:	4299      	cmp	r1, r3
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	4604      	mov	r4, r0
 8005dce:	d001      	beq.n	8005dd4 <cleanup_stdio+0x10>
 8005dd0:	f002 fb86 	bl	80084e0 <_fflush_r>
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	4b09      	ldr	r3, [pc, #36]	@ (8005dfc <cleanup_stdio+0x38>)
 8005dd8:	4299      	cmp	r1, r3
 8005dda:	d002      	beq.n	8005de2 <cleanup_stdio+0x1e>
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f002 fb7f 	bl	80084e0 <_fflush_r>
 8005de2:	68e1      	ldr	r1, [r4, #12]
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <cleanup_stdio+0x3c>)
 8005de6:	4299      	cmp	r1, r3
 8005de8:	d004      	beq.n	8005df4 <cleanup_stdio+0x30>
 8005dea:	4620      	mov	r0, r4
 8005dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df0:	f002 bb76 	b.w	80084e0 <_fflush_r>
 8005df4:	bd10      	pop	{r4, pc}
 8005df6:	bf00      	nop
 8005df8:	20000538 	.word	0x20000538
 8005dfc:	200005a0 	.word	0x200005a0
 8005e00:	20000608 	.word	0x20000608

08005e04 <global_stdio_init.part.0>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <global_stdio_init.part.0+0x30>)
 8005e08:	4c0b      	ldr	r4, [pc, #44]	@ (8005e38 <global_stdio_init.part.0+0x34>)
 8005e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e3c <global_stdio_init.part.0+0x38>)
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	4620      	mov	r0, r4
 8005e10:	2200      	movs	r2, #0
 8005e12:	2104      	movs	r1, #4
 8005e14:	f7ff ff94 	bl	8005d40 <std>
 8005e18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	2109      	movs	r1, #9
 8005e20:	f7ff ff8e 	bl	8005d40 <std>
 8005e24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e28:	2202      	movs	r2, #2
 8005e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2e:	2112      	movs	r1, #18
 8005e30:	f7ff bf86 	b.w	8005d40 <std>
 8005e34:	20000670 	.word	0x20000670
 8005e38:	20000538 	.word	0x20000538
 8005e3c:	08005dad 	.word	0x08005dad

08005e40 <__sfp_lock_acquire>:
 8005e40:	4801      	ldr	r0, [pc, #4]	@ (8005e48 <__sfp_lock_acquire+0x8>)
 8005e42:	f000 ba16 	b.w	8006272 <__retarget_lock_acquire_recursive>
 8005e46:	bf00      	nop
 8005e48:	20000679 	.word	0x20000679

08005e4c <__sfp_lock_release>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	@ (8005e54 <__sfp_lock_release+0x8>)
 8005e4e:	f000 ba11 	b.w	8006274 <__retarget_lock_release_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000679 	.word	0x20000679

08005e58 <__sinit>:
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	f7ff fff0 	bl	8005e40 <__sfp_lock_acquire>
 8005e60:	6a23      	ldr	r3, [r4, #32]
 8005e62:	b11b      	cbz	r3, 8005e6c <__sinit+0x14>
 8005e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e68:	f7ff bff0 	b.w	8005e4c <__sfp_lock_release>
 8005e6c:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <__sinit+0x28>)
 8005e6e:	6223      	str	r3, [r4, #32]
 8005e70:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <__sinit+0x2c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f5      	bne.n	8005e64 <__sinit+0xc>
 8005e78:	f7ff ffc4 	bl	8005e04 <global_stdio_init.part.0>
 8005e7c:	e7f2      	b.n	8005e64 <__sinit+0xc>
 8005e7e:	bf00      	nop
 8005e80:	08005dc5 	.word	0x08005dc5
 8005e84:	20000670 	.word	0x20000670

08005e88 <_fwalk_sglue>:
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	2600      	movs	r6, #0
 8005e94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e98:	f1b9 0901 	subs.w	r9, r9, #1
 8005e9c:	d505      	bpl.n	8005eaa <_fwalk_sglue+0x22>
 8005e9e:	6824      	ldr	r4, [r4, #0]
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	d1f7      	bne.n	8005e94 <_fwalk_sglue+0xc>
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	89ab      	ldrh	r3, [r5, #12]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d907      	bls.n	8005ec0 <_fwalk_sglue+0x38>
 8005eb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	d003      	beq.n	8005ec0 <_fwalk_sglue+0x38>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4638      	mov	r0, r7
 8005ebc:	47c0      	blx	r8
 8005ebe:	4306      	orrs	r6, r0
 8005ec0:	3568      	adds	r5, #104	@ 0x68
 8005ec2:	e7e9      	b.n	8005e98 <_fwalk_sglue+0x10>

08005ec4 <iprintf>:
 8005ec4:	b40f      	push	{r0, r1, r2, r3}
 8005ec6:	b507      	push	{r0, r1, r2, lr}
 8005ec8:	4906      	ldr	r1, [pc, #24]	@ (8005ee4 <iprintf+0x20>)
 8005eca:	ab04      	add	r3, sp, #16
 8005ecc:	6808      	ldr	r0, [r1, #0]
 8005ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed2:	6881      	ldr	r1, [r0, #8]
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	f002 f967 	bl	80081a8 <_vfiprintf_r>
 8005eda:	b003      	add	sp, #12
 8005edc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee0:	b004      	add	sp, #16
 8005ee2:	4770      	bx	lr
 8005ee4:	20000184 	.word	0x20000184

08005ee8 <_puts_r>:
 8005ee8:	6a03      	ldr	r3, [r0, #32]
 8005eea:	b570      	push	{r4, r5, r6, lr}
 8005eec:	6884      	ldr	r4, [r0, #8]
 8005eee:	4605      	mov	r5, r0
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	b90b      	cbnz	r3, 8005ef8 <_puts_r+0x10>
 8005ef4:	f7ff ffb0 	bl	8005e58 <__sinit>
 8005ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005efa:	07db      	lsls	r3, r3, #31
 8005efc:	d405      	bmi.n	8005f0a <_puts_r+0x22>
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	0598      	lsls	r0, r3, #22
 8005f02:	d402      	bmi.n	8005f0a <_puts_r+0x22>
 8005f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f06:	f000 f9b4 	bl	8006272 <__retarget_lock_acquire_recursive>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	0719      	lsls	r1, r3, #28
 8005f0e:	d502      	bpl.n	8005f16 <_puts_r+0x2e>
 8005f10:	6923      	ldr	r3, [r4, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d135      	bne.n	8005f82 <_puts_r+0x9a>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 f8c5 	bl	80060a8 <__swsetup_r>
 8005f1e:	b380      	cbz	r0, 8005f82 <_puts_r+0x9a>
 8005f20:	f04f 35ff 	mov.w	r5, #4294967295
 8005f24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f26:	07da      	lsls	r2, r3, #31
 8005f28:	d405      	bmi.n	8005f36 <_puts_r+0x4e>
 8005f2a:	89a3      	ldrh	r3, [r4, #12]
 8005f2c:	059b      	lsls	r3, r3, #22
 8005f2e:	d402      	bmi.n	8005f36 <_puts_r+0x4e>
 8005f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f32:	f000 f99f 	bl	8006274 <__retarget_lock_release_recursive>
 8005f36:	4628      	mov	r0, r5
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da04      	bge.n	8005f48 <_puts_r+0x60>
 8005f3e:	69a2      	ldr	r2, [r4, #24]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	dc17      	bgt.n	8005f74 <_puts_r+0x8c>
 8005f44:	290a      	cmp	r1, #10
 8005f46:	d015      	beq.n	8005f74 <_puts_r+0x8c>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	6022      	str	r2, [r4, #0]
 8005f4e:	7019      	strb	r1, [r3, #0]
 8005f50:	68a3      	ldr	r3, [r4, #8]
 8005f52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f56:	3b01      	subs	r3, #1
 8005f58:	60a3      	str	r3, [r4, #8]
 8005f5a:	2900      	cmp	r1, #0
 8005f5c:	d1ed      	bne.n	8005f3a <_puts_r+0x52>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	da11      	bge.n	8005f86 <_puts_r+0x9e>
 8005f62:	4622      	mov	r2, r4
 8005f64:	210a      	movs	r1, #10
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 f85f 	bl	800602a <__swbuf_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d0d7      	beq.n	8005f20 <_puts_r+0x38>
 8005f70:	250a      	movs	r5, #10
 8005f72:	e7d7      	b.n	8005f24 <_puts_r+0x3c>
 8005f74:	4622      	mov	r2, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f857 	bl	800602a <__swbuf_r>
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d1e7      	bne.n	8005f50 <_puts_r+0x68>
 8005f80:	e7ce      	b.n	8005f20 <_puts_r+0x38>
 8005f82:	3e01      	subs	r6, #1
 8005f84:	e7e4      	b.n	8005f50 <_puts_r+0x68>
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	6022      	str	r2, [r4, #0]
 8005f8c:	220a      	movs	r2, #10
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e7ee      	b.n	8005f70 <_puts_r+0x88>
	...

08005f94 <puts>:
 8005f94:	4b02      	ldr	r3, [pc, #8]	@ (8005fa0 <puts+0xc>)
 8005f96:	4601      	mov	r1, r0
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	f7ff bfa5 	b.w	8005ee8 <_puts_r>
 8005f9e:	bf00      	nop
 8005fa0:	20000184 	.word	0x20000184

08005fa4 <__sread>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fac:	f000 f912 	bl	80061d4 <_read_r>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	bfab      	itete	ge
 8005fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fb8:	181b      	addge	r3, r3, r0
 8005fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fbe:	bfac      	ite	ge
 8005fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fc2:	81a3      	strhlt	r3, [r4, #12]
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <__swrite>:
 8005fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fca:	461f      	mov	r7, r3
 8005fcc:	898b      	ldrh	r3, [r1, #12]
 8005fce:	05db      	lsls	r3, r3, #23
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	d505      	bpl.n	8005fe4 <__swrite+0x1e>
 8005fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fdc:	2302      	movs	r3, #2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f000 f8e6 	bl	80061b0 <_lseek_r>
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fee:	81a3      	strh	r3, [r4, #12]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffa:	f000 b8fd 	b.w	80061f8 <_write_r>

08005ffe <__sseek>:
 8005ffe:	b510      	push	{r4, lr}
 8006000:	460c      	mov	r4, r1
 8006002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006006:	f000 f8d3 	bl	80061b0 <_lseek_r>
 800600a:	1c43      	adds	r3, r0, #1
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	bf15      	itete	ne
 8006010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800601a:	81a3      	strheq	r3, [r4, #12]
 800601c:	bf18      	it	ne
 800601e:	81a3      	strhne	r3, [r4, #12]
 8006020:	bd10      	pop	{r4, pc}

08006022 <__sclose>:
 8006022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006026:	f000 b8b3 	b.w	8006190 <_close_r>

0800602a <__swbuf_r>:
 800602a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602c:	460e      	mov	r6, r1
 800602e:	4614      	mov	r4, r2
 8006030:	4605      	mov	r5, r0
 8006032:	b118      	cbz	r0, 800603c <__swbuf_r+0x12>
 8006034:	6a03      	ldr	r3, [r0, #32]
 8006036:	b90b      	cbnz	r3, 800603c <__swbuf_r+0x12>
 8006038:	f7ff ff0e 	bl	8005e58 <__sinit>
 800603c:	69a3      	ldr	r3, [r4, #24]
 800603e:	60a3      	str	r3, [r4, #8]
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	071a      	lsls	r2, r3, #28
 8006044:	d501      	bpl.n	800604a <__swbuf_r+0x20>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	b943      	cbnz	r3, 800605c <__swbuf_r+0x32>
 800604a:	4621      	mov	r1, r4
 800604c:	4628      	mov	r0, r5
 800604e:	f000 f82b 	bl	80060a8 <__swsetup_r>
 8006052:	b118      	cbz	r0, 800605c <__swbuf_r+0x32>
 8006054:	f04f 37ff 	mov.w	r7, #4294967295
 8006058:	4638      	mov	r0, r7
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	6922      	ldr	r2, [r4, #16]
 8006060:	1a98      	subs	r0, r3, r2
 8006062:	6963      	ldr	r3, [r4, #20]
 8006064:	b2f6      	uxtb	r6, r6
 8006066:	4283      	cmp	r3, r0
 8006068:	4637      	mov	r7, r6
 800606a:	dc05      	bgt.n	8006078 <__swbuf_r+0x4e>
 800606c:	4621      	mov	r1, r4
 800606e:	4628      	mov	r0, r5
 8006070:	f002 fa36 	bl	80084e0 <_fflush_r>
 8006074:	2800      	cmp	r0, #0
 8006076:	d1ed      	bne.n	8006054 <__swbuf_r+0x2a>
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	3b01      	subs	r3, #1
 800607c:	60a3      	str	r3, [r4, #8]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	6022      	str	r2, [r4, #0]
 8006084:	701e      	strb	r6, [r3, #0]
 8006086:	6962      	ldr	r2, [r4, #20]
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	429a      	cmp	r2, r3
 800608c:	d004      	beq.n	8006098 <__swbuf_r+0x6e>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	07db      	lsls	r3, r3, #31
 8006092:	d5e1      	bpl.n	8006058 <__swbuf_r+0x2e>
 8006094:	2e0a      	cmp	r6, #10
 8006096:	d1df      	bne.n	8006058 <__swbuf_r+0x2e>
 8006098:	4621      	mov	r1, r4
 800609a:	4628      	mov	r0, r5
 800609c:	f002 fa20 	bl	80084e0 <_fflush_r>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d0d9      	beq.n	8006058 <__swbuf_r+0x2e>
 80060a4:	e7d6      	b.n	8006054 <__swbuf_r+0x2a>
	...

080060a8 <__swsetup_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4b29      	ldr	r3, [pc, #164]	@ (8006150 <__swsetup_r+0xa8>)
 80060ac:	4605      	mov	r5, r0
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	460c      	mov	r4, r1
 80060b2:	b118      	cbz	r0, 80060bc <__swsetup_r+0x14>
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	b90b      	cbnz	r3, 80060bc <__swsetup_r+0x14>
 80060b8:	f7ff fece 	bl	8005e58 <__sinit>
 80060bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c0:	0719      	lsls	r1, r3, #28
 80060c2:	d422      	bmi.n	800610a <__swsetup_r+0x62>
 80060c4:	06da      	lsls	r2, r3, #27
 80060c6:	d407      	bmi.n	80060d8 <__swsetup_r+0x30>
 80060c8:	2209      	movs	r2, #9
 80060ca:	602a      	str	r2, [r5, #0]
 80060cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060d0:	81a3      	strh	r3, [r4, #12]
 80060d2:	f04f 30ff 	mov.w	r0, #4294967295
 80060d6:	e033      	b.n	8006140 <__swsetup_r+0x98>
 80060d8:	0758      	lsls	r0, r3, #29
 80060da:	d512      	bpl.n	8006102 <__swsetup_r+0x5a>
 80060dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060de:	b141      	cbz	r1, 80060f2 <__swsetup_r+0x4a>
 80060e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060e4:	4299      	cmp	r1, r3
 80060e6:	d002      	beq.n	80060ee <__swsetup_r+0x46>
 80060e8:	4628      	mov	r0, r5
 80060ea:	f000 ff29 	bl	8006f40 <_free_r>
 80060ee:	2300      	movs	r3, #0
 80060f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	2300      	movs	r3, #0
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f043 0308 	orr.w	r3, r3, #8
 8006108:	81a3      	strh	r3, [r4, #12]
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	b94b      	cbnz	r3, 8006122 <__swsetup_r+0x7a>
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006118:	d003      	beq.n	8006122 <__swsetup_r+0x7a>
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f002 fa2d 	bl	800857c <__smakebuf_r>
 8006122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006126:	f013 0201 	ands.w	r2, r3, #1
 800612a:	d00a      	beq.n	8006142 <__swsetup_r+0x9a>
 800612c:	2200      	movs	r2, #0
 800612e:	60a2      	str	r2, [r4, #8]
 8006130:	6962      	ldr	r2, [r4, #20]
 8006132:	4252      	negs	r2, r2
 8006134:	61a2      	str	r2, [r4, #24]
 8006136:	6922      	ldr	r2, [r4, #16]
 8006138:	b942      	cbnz	r2, 800614c <__swsetup_r+0xa4>
 800613a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800613e:	d1c5      	bne.n	80060cc <__swsetup_r+0x24>
 8006140:	bd38      	pop	{r3, r4, r5, pc}
 8006142:	0799      	lsls	r1, r3, #30
 8006144:	bf58      	it	pl
 8006146:	6962      	ldrpl	r2, [r4, #20]
 8006148:	60a2      	str	r2, [r4, #8]
 800614a:	e7f4      	b.n	8006136 <__swsetup_r+0x8e>
 800614c:	2000      	movs	r0, #0
 800614e:	e7f7      	b.n	8006140 <__swsetup_r+0x98>
 8006150:	20000184 	.word	0x20000184

08006154 <memset>:
 8006154:	4402      	add	r2, r0
 8006156:	4603      	mov	r3, r0
 8006158:	4293      	cmp	r3, r2
 800615a:	d100      	bne.n	800615e <memset+0xa>
 800615c:	4770      	bx	lr
 800615e:	f803 1b01 	strb.w	r1, [r3], #1
 8006162:	e7f9      	b.n	8006158 <memset+0x4>

08006164 <strncmp>:
 8006164:	b510      	push	{r4, lr}
 8006166:	b16a      	cbz	r2, 8006184 <strncmp+0x20>
 8006168:	3901      	subs	r1, #1
 800616a:	1884      	adds	r4, r0, r2
 800616c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006170:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006174:	429a      	cmp	r2, r3
 8006176:	d103      	bne.n	8006180 <strncmp+0x1c>
 8006178:	42a0      	cmp	r0, r4
 800617a:	d001      	beq.n	8006180 <strncmp+0x1c>
 800617c:	2a00      	cmp	r2, #0
 800617e:	d1f5      	bne.n	800616c <strncmp+0x8>
 8006180:	1ad0      	subs	r0, r2, r3
 8006182:	bd10      	pop	{r4, pc}
 8006184:	4610      	mov	r0, r2
 8006186:	e7fc      	b.n	8006182 <strncmp+0x1e>

08006188 <_localeconv_r>:
 8006188:	4800      	ldr	r0, [pc, #0]	@ (800618c <_localeconv_r+0x4>)
 800618a:	4770      	bx	lr
 800618c:	20000108 	.word	0x20000108

08006190 <_close_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d06      	ldr	r5, [pc, #24]	@ (80061ac <_close_r+0x1c>)
 8006194:	2300      	movs	r3, #0
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fb feef 	bl	8001f7e <_close>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_close_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_close_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20000674 	.word	0x20000674

080061b0 <_lseek_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d07      	ldr	r5, [pc, #28]	@ (80061d0 <_lseek_r+0x20>)
 80061b4:	4604      	mov	r4, r0
 80061b6:	4608      	mov	r0, r1
 80061b8:	4611      	mov	r1, r2
 80061ba:	2200      	movs	r2, #0
 80061bc:	602a      	str	r2, [r5, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	f7fb ff04 	bl	8001fcc <_lseek>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_lseek_r+0x1e>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_lseek_r+0x1e>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	20000674 	.word	0x20000674

080061d4 <_read_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4d07      	ldr	r5, [pc, #28]	@ (80061f4 <_read_r+0x20>)
 80061d8:	4604      	mov	r4, r0
 80061da:	4608      	mov	r0, r1
 80061dc:	4611      	mov	r1, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	602a      	str	r2, [r5, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f7fb fe92 	bl	8001f0c <_read>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_read_r+0x1e>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_read_r+0x1e>
 80061f0:	6023      	str	r3, [r4, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20000674 	.word	0x20000674

080061f8 <_write_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d07      	ldr	r5, [pc, #28]	@ (8006218 <_write_r+0x20>)
 80061fc:	4604      	mov	r4, r0
 80061fe:	4608      	mov	r0, r1
 8006200:	4611      	mov	r1, r2
 8006202:	2200      	movs	r2, #0
 8006204:	602a      	str	r2, [r5, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	f7fb fe9d 	bl	8001f46 <_write>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d102      	bne.n	8006216 <_write_r+0x1e>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	b103      	cbz	r3, 8006216 <_write_r+0x1e>
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20000674 	.word	0x20000674

0800621c <__errno>:
 800621c:	4b01      	ldr	r3, [pc, #4]	@ (8006224 <__errno+0x8>)
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000184 	.word	0x20000184

08006228 <__libc_init_array>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4d0d      	ldr	r5, [pc, #52]	@ (8006260 <__libc_init_array+0x38>)
 800622c:	4c0d      	ldr	r4, [pc, #52]	@ (8006264 <__libc_init_array+0x3c>)
 800622e:	1b64      	subs	r4, r4, r5
 8006230:	10a4      	asrs	r4, r4, #2
 8006232:	2600      	movs	r6, #0
 8006234:	42a6      	cmp	r6, r4
 8006236:	d109      	bne.n	800624c <__libc_init_array+0x24>
 8006238:	4d0b      	ldr	r5, [pc, #44]	@ (8006268 <__libc_init_array+0x40>)
 800623a:	4c0c      	ldr	r4, [pc, #48]	@ (800626c <__libc_init_array+0x44>)
 800623c:	f002 fc3c 	bl	8008ab8 <_init>
 8006240:	1b64      	subs	r4, r4, r5
 8006242:	10a4      	asrs	r4, r4, #2
 8006244:	2600      	movs	r6, #0
 8006246:	42a6      	cmp	r6, r4
 8006248:	d105      	bne.n	8006256 <__libc_init_array+0x2e>
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006250:	4798      	blx	r3
 8006252:	3601      	adds	r6, #1
 8006254:	e7ee      	b.n	8006234 <__libc_init_array+0xc>
 8006256:	f855 3b04 	ldr.w	r3, [r5], #4
 800625a:	4798      	blx	r3
 800625c:	3601      	adds	r6, #1
 800625e:	e7f2      	b.n	8006246 <__libc_init_array+0x1e>
 8006260:	080090d8 	.word	0x080090d8
 8006264:	080090d8 	.word	0x080090d8
 8006268:	080090d8 	.word	0x080090d8
 800626c:	080090dc 	.word	0x080090dc

08006270 <__retarget_lock_init_recursive>:
 8006270:	4770      	bx	lr

08006272 <__retarget_lock_acquire_recursive>:
 8006272:	4770      	bx	lr

08006274 <__retarget_lock_release_recursive>:
 8006274:	4770      	bx	lr

08006276 <memcpy>:
 8006276:	440a      	add	r2, r1
 8006278:	4291      	cmp	r1, r2
 800627a:	f100 33ff 	add.w	r3, r0, #4294967295
 800627e:	d100      	bne.n	8006282 <memcpy+0xc>
 8006280:	4770      	bx	lr
 8006282:	b510      	push	{r4, lr}
 8006284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800628c:	4291      	cmp	r1, r2
 800628e:	d1f9      	bne.n	8006284 <memcpy+0xe>
 8006290:	bd10      	pop	{r4, pc}
 8006292:	0000      	movs	r0, r0
 8006294:	0000      	movs	r0, r0
	...

08006298 <nan>:
 8006298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80062a0 <nan+0x8>
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	00000000 	.word	0x00000000
 80062a4:	7ff80000 	.word	0x7ff80000

080062a8 <quorem>:
 80062a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	6903      	ldr	r3, [r0, #16]
 80062ae:	690c      	ldr	r4, [r1, #16]
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	4607      	mov	r7, r0
 80062b4:	db7e      	blt.n	80063b4 <quorem+0x10c>
 80062b6:	3c01      	subs	r4, #1
 80062b8:	f101 0814 	add.w	r8, r1, #20
 80062bc:	00a3      	lsls	r3, r4, #2
 80062be:	f100 0514 	add.w	r5, r0, #20
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062d2:	3301      	adds	r3, #1
 80062d4:	429a      	cmp	r2, r3
 80062d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062da:	fbb2 f6f3 	udiv	r6, r2, r3
 80062de:	d32e      	bcc.n	800633e <quorem+0x96>
 80062e0:	f04f 0a00 	mov.w	sl, #0
 80062e4:	46c4      	mov	ip, r8
 80062e6:	46ae      	mov	lr, r5
 80062e8:	46d3      	mov	fp, sl
 80062ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062ee:	b298      	uxth	r0, r3
 80062f0:	fb06 a000 	mla	r0, r6, r0, sl
 80062f4:	0c02      	lsrs	r2, r0, #16
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	fb06 2303 	mla	r3, r6, r3, r2
 80062fc:	f8de 2000 	ldr.w	r2, [lr]
 8006300:	b280      	uxth	r0, r0
 8006302:	b292      	uxth	r2, r2
 8006304:	1a12      	subs	r2, r2, r0
 8006306:	445a      	add	r2, fp
 8006308:	f8de 0000 	ldr.w	r0, [lr]
 800630c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006310:	b29b      	uxth	r3, r3
 8006312:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006316:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800631a:	b292      	uxth	r2, r2
 800631c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006320:	45e1      	cmp	r9, ip
 8006322:	f84e 2b04 	str.w	r2, [lr], #4
 8006326:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800632a:	d2de      	bcs.n	80062ea <quorem+0x42>
 800632c:	9b00      	ldr	r3, [sp, #0]
 800632e:	58eb      	ldr	r3, [r5, r3]
 8006330:	b92b      	cbnz	r3, 800633e <quorem+0x96>
 8006332:	9b01      	ldr	r3, [sp, #4]
 8006334:	3b04      	subs	r3, #4
 8006336:	429d      	cmp	r5, r3
 8006338:	461a      	mov	r2, r3
 800633a:	d32f      	bcc.n	800639c <quorem+0xf4>
 800633c:	613c      	str	r4, [r7, #16]
 800633e:	4638      	mov	r0, r7
 8006340:	f001 fd0e 	bl	8007d60 <__mcmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	db25      	blt.n	8006394 <quorem+0xec>
 8006348:	4629      	mov	r1, r5
 800634a:	2000      	movs	r0, #0
 800634c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006350:	f8d1 c000 	ldr.w	ip, [r1]
 8006354:	fa1f fe82 	uxth.w	lr, r2
 8006358:	fa1f f38c 	uxth.w	r3, ip
 800635c:	eba3 030e 	sub.w	r3, r3, lr
 8006360:	4403      	add	r3, r0
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006368:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006372:	45c1      	cmp	r9, r8
 8006374:	f841 3b04 	str.w	r3, [r1], #4
 8006378:	ea4f 4022 	mov.w	r0, r2, asr #16
 800637c:	d2e6      	bcs.n	800634c <quorem+0xa4>
 800637e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006386:	b922      	cbnz	r2, 8006392 <quorem+0xea>
 8006388:	3b04      	subs	r3, #4
 800638a:	429d      	cmp	r5, r3
 800638c:	461a      	mov	r2, r3
 800638e:	d30b      	bcc.n	80063a8 <quorem+0x100>
 8006390:	613c      	str	r4, [r7, #16]
 8006392:	3601      	adds	r6, #1
 8006394:	4630      	mov	r0, r6
 8006396:	b003      	add	sp, #12
 8006398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	3b04      	subs	r3, #4
 80063a0:	2a00      	cmp	r2, #0
 80063a2:	d1cb      	bne.n	800633c <quorem+0x94>
 80063a4:	3c01      	subs	r4, #1
 80063a6:	e7c6      	b.n	8006336 <quorem+0x8e>
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	3b04      	subs	r3, #4
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d1ef      	bne.n	8006390 <quorem+0xe8>
 80063b0:	3c01      	subs	r4, #1
 80063b2:	e7ea      	b.n	800638a <quorem+0xe2>
 80063b4:	2000      	movs	r0, #0
 80063b6:	e7ee      	b.n	8006396 <quorem+0xee>

080063b8 <_dtoa_r>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	69c7      	ldr	r7, [r0, #28]
 80063be:	b099      	sub	sp, #100	@ 0x64
 80063c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063c4:	ec55 4b10 	vmov	r4, r5, d0
 80063c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80063ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80063cc:	4683      	mov	fp, r0
 80063ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80063d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063d2:	b97f      	cbnz	r7, 80063f4 <_dtoa_r+0x3c>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f001 f937 	bl	8007648 <malloc>
 80063da:	4602      	mov	r2, r0
 80063dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80063e0:	b920      	cbnz	r0, 80063ec <_dtoa_r+0x34>
 80063e2:	4ba7      	ldr	r3, [pc, #668]	@ (8006680 <_dtoa_r+0x2c8>)
 80063e4:	21ef      	movs	r1, #239	@ 0xef
 80063e6:	48a7      	ldr	r0, [pc, #668]	@ (8006684 <_dtoa_r+0x2cc>)
 80063e8:	f002 f936 	bl	8008658 <__assert_func>
 80063ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063f0:	6007      	str	r7, [r0, #0]
 80063f2:	60c7      	str	r7, [r0, #12]
 80063f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063f8:	6819      	ldr	r1, [r3, #0]
 80063fa:	b159      	cbz	r1, 8006414 <_dtoa_r+0x5c>
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	604a      	str	r2, [r1, #4]
 8006400:	2301      	movs	r3, #1
 8006402:	4093      	lsls	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
 8006406:	4658      	mov	r0, fp
 8006408:	f001 fa26 	bl	8007858 <_Bfree>
 800640c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	1e2b      	subs	r3, r5, #0
 8006416:	bfb9      	ittee	lt
 8006418:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800641c:	9303      	strlt	r3, [sp, #12]
 800641e:	2300      	movge	r3, #0
 8006420:	6033      	strge	r3, [r6, #0]
 8006422:	9f03      	ldr	r7, [sp, #12]
 8006424:	4b98      	ldr	r3, [pc, #608]	@ (8006688 <_dtoa_r+0x2d0>)
 8006426:	bfbc      	itt	lt
 8006428:	2201      	movlt	r2, #1
 800642a:	6032      	strlt	r2, [r6, #0]
 800642c:	43bb      	bics	r3, r7
 800642e:	d112      	bne.n	8006456 <_dtoa_r+0x9e>
 8006430:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006432:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800643c:	4323      	orrs	r3, r4
 800643e:	f000 854d 	beq.w	8006edc <_dtoa_r+0xb24>
 8006442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006444:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800669c <_dtoa_r+0x2e4>
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 854f 	beq.w	8006eec <_dtoa_r+0xb34>
 800644e:	f10a 0303 	add.w	r3, sl, #3
 8006452:	f000 bd49 	b.w	8006ee8 <_dtoa_r+0xb30>
 8006456:	ed9d 7b02 	vldr	d7, [sp, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	ec51 0b17 	vmov	r0, r1, d7
 8006460:	2300      	movs	r3, #0
 8006462:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006466:	f7fa fb4f 	bl	8000b08 <__aeabi_dcmpeq>
 800646a:	4680      	mov	r8, r0
 800646c:	b158      	cbz	r0, 8006486 <_dtoa_r+0xce>
 800646e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006470:	2301      	movs	r3, #1
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006476:	b113      	cbz	r3, 800647e <_dtoa_r+0xc6>
 8006478:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800647a:	4b84      	ldr	r3, [pc, #528]	@ (800668c <_dtoa_r+0x2d4>)
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80066a0 <_dtoa_r+0x2e8>
 8006482:	f000 bd33 	b.w	8006eec <_dtoa_r+0xb34>
 8006486:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800648a:	aa16      	add	r2, sp, #88	@ 0x58
 800648c:	a917      	add	r1, sp, #92	@ 0x5c
 800648e:	4658      	mov	r0, fp
 8006490:	f001 fd86 	bl	8007fa0 <__d2b>
 8006494:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006498:	4681      	mov	r9, r0
 800649a:	2e00      	cmp	r6, #0
 800649c:	d077      	beq.n	800658e <_dtoa_r+0x1d6>
 800649e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80064a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064b8:	4619      	mov	r1, r3
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b74      	ldr	r3, [pc, #464]	@ (8006690 <_dtoa_r+0x2d8>)
 80064be:	f7f9 ff03 	bl	80002c8 <__aeabi_dsub>
 80064c2:	a369      	add	r3, pc, #420	@ (adr r3, 8006668 <_dtoa_r+0x2b0>)
 80064c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c8:	f7fa f8b6 	bl	8000638 <__aeabi_dmul>
 80064cc:	a368      	add	r3, pc, #416	@ (adr r3, 8006670 <_dtoa_r+0x2b8>)
 80064ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d2:	f7f9 fefb 	bl	80002cc <__adddf3>
 80064d6:	4604      	mov	r4, r0
 80064d8:	4630      	mov	r0, r6
 80064da:	460d      	mov	r5, r1
 80064dc:	f7fa f842 	bl	8000564 <__aeabi_i2d>
 80064e0:	a365      	add	r3, pc, #404	@ (adr r3, 8006678 <_dtoa_r+0x2c0>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f7fa f8a7 	bl	8000638 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7f9 feeb 	bl	80002cc <__adddf3>
 80064f6:	4604      	mov	r4, r0
 80064f8:	460d      	mov	r5, r1
 80064fa:	f7fa fb4d 	bl	8000b98 <__aeabi_d2iz>
 80064fe:	2200      	movs	r2, #0
 8006500:	4607      	mov	r7, r0
 8006502:	2300      	movs	r3, #0
 8006504:	4620      	mov	r0, r4
 8006506:	4629      	mov	r1, r5
 8006508:	f7fa fb08 	bl	8000b1c <__aeabi_dcmplt>
 800650c:	b140      	cbz	r0, 8006520 <_dtoa_r+0x168>
 800650e:	4638      	mov	r0, r7
 8006510:	f7fa f828 	bl	8000564 <__aeabi_i2d>
 8006514:	4622      	mov	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	f7fa faf6 	bl	8000b08 <__aeabi_dcmpeq>
 800651c:	b900      	cbnz	r0, 8006520 <_dtoa_r+0x168>
 800651e:	3f01      	subs	r7, #1
 8006520:	2f16      	cmp	r7, #22
 8006522:	d851      	bhi.n	80065c8 <_dtoa_r+0x210>
 8006524:	4b5b      	ldr	r3, [pc, #364]	@ (8006694 <_dtoa_r+0x2dc>)
 8006526:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006532:	f7fa faf3 	bl	8000b1c <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	d048      	beq.n	80065cc <_dtoa_r+0x214>
 800653a:	3f01      	subs	r7, #1
 800653c:	2300      	movs	r3, #0
 800653e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006540:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006542:	1b9b      	subs	r3, r3, r6
 8006544:	1e5a      	subs	r2, r3, #1
 8006546:	bf44      	itt	mi
 8006548:	f1c3 0801 	rsbmi	r8, r3, #1
 800654c:	2300      	movmi	r3, #0
 800654e:	9208      	str	r2, [sp, #32]
 8006550:	bf54      	ite	pl
 8006552:	f04f 0800 	movpl.w	r8, #0
 8006556:	9308      	strmi	r3, [sp, #32]
 8006558:	2f00      	cmp	r7, #0
 800655a:	db39      	blt.n	80065d0 <_dtoa_r+0x218>
 800655c:	9b08      	ldr	r3, [sp, #32]
 800655e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006560:	443b      	add	r3, r7
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	2300      	movs	r3, #0
 8006566:	930a      	str	r3, [sp, #40]	@ 0x28
 8006568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656a:	2b09      	cmp	r3, #9
 800656c:	d864      	bhi.n	8006638 <_dtoa_r+0x280>
 800656e:	2b05      	cmp	r3, #5
 8006570:	bfc4      	itt	gt
 8006572:	3b04      	subgt	r3, #4
 8006574:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006578:	f1a3 0302 	sub.w	r3, r3, #2
 800657c:	bfcc      	ite	gt
 800657e:	2400      	movgt	r4, #0
 8006580:	2401      	movle	r4, #1
 8006582:	2b03      	cmp	r3, #3
 8006584:	d863      	bhi.n	800664e <_dtoa_r+0x296>
 8006586:	e8df f003 	tbb	[pc, r3]
 800658a:	372a      	.short	0x372a
 800658c:	5535      	.short	0x5535
 800658e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006592:	441e      	add	r6, r3
 8006594:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006598:	2b20      	cmp	r3, #32
 800659a:	bfc1      	itttt	gt
 800659c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80065a0:	409f      	lslgt	r7, r3
 80065a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80065a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80065aa:	bfd6      	itet	le
 80065ac:	f1c3 0320 	rsble	r3, r3, #32
 80065b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80065b4:	fa04 f003 	lslle.w	r0, r4, r3
 80065b8:	f7f9 ffc4 	bl	8000544 <__aeabi_ui2d>
 80065bc:	2201      	movs	r2, #1
 80065be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065c2:	3e01      	subs	r6, #1
 80065c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80065c6:	e777      	b.n	80064b8 <_dtoa_r+0x100>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7b8      	b.n	800653e <_dtoa_r+0x186>
 80065cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80065ce:	e7b7      	b.n	8006540 <_dtoa_r+0x188>
 80065d0:	427b      	negs	r3, r7
 80065d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d4:	2300      	movs	r3, #0
 80065d6:	eba8 0807 	sub.w	r8, r8, r7
 80065da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065dc:	e7c4      	b.n	8006568 <_dtoa_r+0x1b0>
 80065de:	2300      	movs	r3, #0
 80065e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc35      	bgt.n	8006654 <_dtoa_r+0x29c>
 80065e8:	2301      	movs	r3, #1
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	461a      	mov	r2, r3
 80065f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f2:	e00b      	b.n	800660c <_dtoa_r+0x254>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f3      	b.n	80065e0 <_dtoa_r+0x228>
 80065f8:	2300      	movs	r3, #0
 80065fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	9307      	str	r3, [sp, #28]
 8006608:	bfb8      	it	lt
 800660a:	2301      	movlt	r3, #1
 800660c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006610:	2100      	movs	r1, #0
 8006612:	2204      	movs	r2, #4
 8006614:	f102 0514 	add.w	r5, r2, #20
 8006618:	429d      	cmp	r5, r3
 800661a:	d91f      	bls.n	800665c <_dtoa_r+0x2a4>
 800661c:	6041      	str	r1, [r0, #4]
 800661e:	4658      	mov	r0, fp
 8006620:	f001 f8da 	bl	80077d8 <_Balloc>
 8006624:	4682      	mov	sl, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d13c      	bne.n	80066a4 <_dtoa_r+0x2ec>
 800662a:	4b1b      	ldr	r3, [pc, #108]	@ (8006698 <_dtoa_r+0x2e0>)
 800662c:	4602      	mov	r2, r0
 800662e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006632:	e6d8      	b.n	80063e6 <_dtoa_r+0x2e>
 8006634:	2301      	movs	r3, #1
 8006636:	e7e0      	b.n	80065fa <_dtoa_r+0x242>
 8006638:	2401      	movs	r4, #1
 800663a:	2300      	movs	r3, #0
 800663c:	9309      	str	r3, [sp, #36]	@ 0x24
 800663e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	9307      	str	r3, [sp, #28]
 8006648:	2200      	movs	r2, #0
 800664a:	2312      	movs	r3, #18
 800664c:	e7d0      	b.n	80065f0 <_dtoa_r+0x238>
 800664e:	2301      	movs	r3, #1
 8006650:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006652:	e7f5      	b.n	8006640 <_dtoa_r+0x288>
 8006654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	9307      	str	r3, [sp, #28]
 800665a:	e7d7      	b.n	800660c <_dtoa_r+0x254>
 800665c:	3101      	adds	r1, #1
 800665e:	0052      	lsls	r2, r2, #1
 8006660:	e7d8      	b.n	8006614 <_dtoa_r+0x25c>
 8006662:	bf00      	nop
 8006664:	f3af 8000 	nop.w
 8006668:	636f4361 	.word	0x636f4361
 800666c:	3fd287a7 	.word	0x3fd287a7
 8006670:	8b60c8b3 	.word	0x8b60c8b3
 8006674:	3fc68a28 	.word	0x3fc68a28
 8006678:	509f79fb 	.word	0x509f79fb
 800667c:	3fd34413 	.word	0x3fd34413
 8006680:	08008e0a 	.word	0x08008e0a
 8006684:	08008e21 	.word	0x08008e21
 8006688:	7ff00000 	.word	0x7ff00000
 800668c:	08008dd2 	.word	0x08008dd2
 8006690:	3ff80000 	.word	0x3ff80000
 8006694:	08008f78 	.word	0x08008f78
 8006698:	08008e79 	.word	0x08008e79
 800669c:	08008e06 	.word	0x08008e06
 80066a0:	08008dd1 	.word	0x08008dd1
 80066a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	9b07      	ldr	r3, [sp, #28]
 80066ac:	2b0e      	cmp	r3, #14
 80066ae:	f200 80a4 	bhi.w	80067fa <_dtoa_r+0x442>
 80066b2:	2c00      	cmp	r4, #0
 80066b4:	f000 80a1 	beq.w	80067fa <_dtoa_r+0x442>
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	dd33      	ble.n	8006724 <_dtoa_r+0x36c>
 80066bc:	4bad      	ldr	r3, [pc, #692]	@ (8006974 <_dtoa_r+0x5bc>)
 80066be:	f007 020f 	and.w	r2, r7, #15
 80066c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c6:	ed93 7b00 	vldr	d7, [r3]
 80066ca:	05f8      	lsls	r0, r7, #23
 80066cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066d4:	d516      	bpl.n	8006704 <_dtoa_r+0x34c>
 80066d6:	4ba8      	ldr	r3, [pc, #672]	@ (8006978 <_dtoa_r+0x5c0>)
 80066d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066e0:	f7fa f8d4 	bl	800088c <__aeabi_ddiv>
 80066e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066e8:	f004 040f 	and.w	r4, r4, #15
 80066ec:	2603      	movs	r6, #3
 80066ee:	4da2      	ldr	r5, [pc, #648]	@ (8006978 <_dtoa_r+0x5c0>)
 80066f0:	b954      	cbnz	r4, 8006708 <_dtoa_r+0x350>
 80066f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fa:	f7fa f8c7 	bl	800088c <__aeabi_ddiv>
 80066fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006702:	e028      	b.n	8006756 <_dtoa_r+0x39e>
 8006704:	2602      	movs	r6, #2
 8006706:	e7f2      	b.n	80066ee <_dtoa_r+0x336>
 8006708:	07e1      	lsls	r1, r4, #31
 800670a:	d508      	bpl.n	800671e <_dtoa_r+0x366>
 800670c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006710:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006714:	f7f9 ff90 	bl	8000638 <__aeabi_dmul>
 8006718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800671c:	3601      	adds	r6, #1
 800671e:	1064      	asrs	r4, r4, #1
 8006720:	3508      	adds	r5, #8
 8006722:	e7e5      	b.n	80066f0 <_dtoa_r+0x338>
 8006724:	f000 80d2 	beq.w	80068cc <_dtoa_r+0x514>
 8006728:	427c      	negs	r4, r7
 800672a:	4b92      	ldr	r3, [pc, #584]	@ (8006974 <_dtoa_r+0x5bc>)
 800672c:	4d92      	ldr	r5, [pc, #584]	@ (8006978 <_dtoa_r+0x5c0>)
 800672e:	f004 020f 	and.w	r2, r4, #15
 8006732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800673e:	f7f9 ff7b 	bl	8000638 <__aeabi_dmul>
 8006742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006746:	1124      	asrs	r4, r4, #4
 8006748:	2300      	movs	r3, #0
 800674a:	2602      	movs	r6, #2
 800674c:	2c00      	cmp	r4, #0
 800674e:	f040 80b2 	bne.w	80068b6 <_dtoa_r+0x4fe>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1d3      	bne.n	80066fe <_dtoa_r+0x346>
 8006756:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006758:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 80b7 	beq.w	80068d0 <_dtoa_r+0x518>
 8006762:	4b86      	ldr	r3, [pc, #536]	@ (800697c <_dtoa_r+0x5c4>)
 8006764:	2200      	movs	r2, #0
 8006766:	4620      	mov	r0, r4
 8006768:	4629      	mov	r1, r5
 800676a:	f7fa f9d7 	bl	8000b1c <__aeabi_dcmplt>
 800676e:	2800      	cmp	r0, #0
 8006770:	f000 80ae 	beq.w	80068d0 <_dtoa_r+0x518>
 8006774:	9b07      	ldr	r3, [sp, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 80aa 	beq.w	80068d0 <_dtoa_r+0x518>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	dd37      	ble.n	80067f2 <_dtoa_r+0x43a>
 8006782:	1e7b      	subs	r3, r7, #1
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	4620      	mov	r0, r4
 8006788:	4b7d      	ldr	r3, [pc, #500]	@ (8006980 <_dtoa_r+0x5c8>)
 800678a:	2200      	movs	r2, #0
 800678c:	4629      	mov	r1, r5
 800678e:	f7f9 ff53 	bl	8000638 <__aeabi_dmul>
 8006792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006796:	9c00      	ldr	r4, [sp, #0]
 8006798:	3601      	adds	r6, #1
 800679a:	4630      	mov	r0, r6
 800679c:	f7f9 fee2 	bl	8000564 <__aeabi_i2d>
 80067a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a4:	f7f9 ff48 	bl	8000638 <__aeabi_dmul>
 80067a8:	4b76      	ldr	r3, [pc, #472]	@ (8006984 <_dtoa_r+0x5cc>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	f7f9 fd8e 	bl	80002cc <__adddf3>
 80067b0:	4605      	mov	r5, r0
 80067b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067b6:	2c00      	cmp	r4, #0
 80067b8:	f040 808d 	bne.w	80068d6 <_dtoa_r+0x51e>
 80067bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c0:	4b71      	ldr	r3, [pc, #452]	@ (8006988 <_dtoa_r+0x5d0>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	f7f9 fd80 	bl	80002c8 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4633      	mov	r3, r6
 80067d4:	f7fa f9c0 	bl	8000b58 <__aeabi_dcmpgt>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f040 828b 	bne.w	8006cf4 <_dtoa_r+0x93c>
 80067de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e2:	462a      	mov	r2, r5
 80067e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067e8:	f7fa f998 	bl	8000b1c <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 8128 	bne.w	8006a42 <_dtoa_r+0x68a>
 80067f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f2c0 815a 	blt.w	8006ab6 <_dtoa_r+0x6fe>
 8006802:	2f0e      	cmp	r7, #14
 8006804:	f300 8157 	bgt.w	8006ab6 <_dtoa_r+0x6fe>
 8006808:	4b5a      	ldr	r3, [pc, #360]	@ (8006974 <_dtoa_r+0x5bc>)
 800680a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800680e:	ed93 7b00 	vldr	d7, [r3]
 8006812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	ed8d 7b00 	vstr	d7, [sp]
 800681a:	da03      	bge.n	8006824 <_dtoa_r+0x46c>
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f340 8101 	ble.w	8006a26 <_dtoa_r+0x66e>
 8006824:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006828:	4656      	mov	r6, sl
 800682a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7fa f82b 	bl	800088c <__aeabi_ddiv>
 8006836:	f7fa f9af 	bl	8000b98 <__aeabi_d2iz>
 800683a:	4680      	mov	r8, r0
 800683c:	f7f9 fe92 	bl	8000564 <__aeabi_i2d>
 8006840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006844:	f7f9 fef8 	bl	8000638 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006854:	f7f9 fd38 	bl	80002c8 <__aeabi_dsub>
 8006858:	f806 4b01 	strb.w	r4, [r6], #1
 800685c:	9d07      	ldr	r5, [sp, #28]
 800685e:	eba6 040a 	sub.w	r4, r6, sl
 8006862:	42a5      	cmp	r5, r4
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	f040 8117 	bne.w	8006a9a <_dtoa_r+0x6e2>
 800686c:	f7f9 fd2e 	bl	80002cc <__adddf3>
 8006870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	f7fa f96e 	bl	8000b58 <__aeabi_dcmpgt>
 800687c:	2800      	cmp	r0, #0
 800687e:	f040 80f9 	bne.w	8006a74 <_dtoa_r+0x6bc>
 8006882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006886:	4620      	mov	r0, r4
 8006888:	4629      	mov	r1, r5
 800688a:	f7fa f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800688e:	b118      	cbz	r0, 8006898 <_dtoa_r+0x4e0>
 8006890:	f018 0f01 	tst.w	r8, #1
 8006894:	f040 80ee 	bne.w	8006a74 <_dtoa_r+0x6bc>
 8006898:	4649      	mov	r1, r9
 800689a:	4658      	mov	r0, fp
 800689c:	f000 ffdc 	bl	8007858 <_Bfree>
 80068a0:	2300      	movs	r3, #0
 80068a2:	7033      	strb	r3, [r6, #0]
 80068a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068a6:	3701      	adds	r7, #1
 80068a8:	601f      	str	r7, [r3, #0]
 80068aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 831d 	beq.w	8006eec <_dtoa_r+0xb34>
 80068b2:	601e      	str	r6, [r3, #0]
 80068b4:	e31a      	b.n	8006eec <_dtoa_r+0xb34>
 80068b6:	07e2      	lsls	r2, r4, #31
 80068b8:	d505      	bpl.n	80068c6 <_dtoa_r+0x50e>
 80068ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068be:	f7f9 febb 	bl	8000638 <__aeabi_dmul>
 80068c2:	3601      	adds	r6, #1
 80068c4:	2301      	movs	r3, #1
 80068c6:	1064      	asrs	r4, r4, #1
 80068c8:	3508      	adds	r5, #8
 80068ca:	e73f      	b.n	800674c <_dtoa_r+0x394>
 80068cc:	2602      	movs	r6, #2
 80068ce:	e742      	b.n	8006756 <_dtoa_r+0x39e>
 80068d0:	9c07      	ldr	r4, [sp, #28]
 80068d2:	9704      	str	r7, [sp, #16]
 80068d4:	e761      	b.n	800679a <_dtoa_r+0x3e2>
 80068d6:	4b27      	ldr	r3, [pc, #156]	@ (8006974 <_dtoa_r+0x5bc>)
 80068d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068e2:	4454      	add	r4, sl
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d053      	beq.n	8006990 <_dtoa_r+0x5d8>
 80068e8:	4928      	ldr	r1, [pc, #160]	@ (800698c <_dtoa_r+0x5d4>)
 80068ea:	2000      	movs	r0, #0
 80068ec:	f7f9 ffce 	bl	800088c <__aeabi_ddiv>
 80068f0:	4633      	mov	r3, r6
 80068f2:	462a      	mov	r2, r5
 80068f4:	f7f9 fce8 	bl	80002c8 <__aeabi_dsub>
 80068f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068fc:	4656      	mov	r6, sl
 80068fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006902:	f7fa f949 	bl	8000b98 <__aeabi_d2iz>
 8006906:	4605      	mov	r5, r0
 8006908:	f7f9 fe2c 	bl	8000564 <__aeabi_i2d>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006914:	f7f9 fcd8 	bl	80002c8 <__aeabi_dsub>
 8006918:	3530      	adds	r5, #48	@ 0x30
 800691a:	4602      	mov	r2, r0
 800691c:	460b      	mov	r3, r1
 800691e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006922:	f806 5b01 	strb.w	r5, [r6], #1
 8006926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800692a:	f7fa f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	d171      	bne.n	8006a16 <_dtoa_r+0x65e>
 8006932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006936:	4911      	ldr	r1, [pc, #68]	@ (800697c <_dtoa_r+0x5c4>)
 8006938:	2000      	movs	r0, #0
 800693a:	f7f9 fcc5 	bl	80002c8 <__aeabi_dsub>
 800693e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006942:	f7fa f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f040 8095 	bne.w	8006a76 <_dtoa_r+0x6be>
 800694c:	42a6      	cmp	r6, r4
 800694e:	f43f af50 	beq.w	80067f2 <_dtoa_r+0x43a>
 8006952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006956:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <_dtoa_r+0x5c8>)
 8006958:	2200      	movs	r2, #0
 800695a:	f7f9 fe6d 	bl	8000638 <__aeabi_dmul>
 800695e:	4b08      	ldr	r3, [pc, #32]	@ (8006980 <_dtoa_r+0x5c8>)
 8006960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006964:	2200      	movs	r2, #0
 8006966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800696a:	f7f9 fe65 	bl	8000638 <__aeabi_dmul>
 800696e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006972:	e7c4      	b.n	80068fe <_dtoa_r+0x546>
 8006974:	08008f78 	.word	0x08008f78
 8006978:	08008f50 	.word	0x08008f50
 800697c:	3ff00000 	.word	0x3ff00000
 8006980:	40240000 	.word	0x40240000
 8006984:	401c0000 	.word	0x401c0000
 8006988:	40140000 	.word	0x40140000
 800698c:	3fe00000 	.word	0x3fe00000
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	f7f9 fe50 	bl	8000638 <__aeabi_dmul>
 8006998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800699c:	9415      	str	r4, [sp, #84]	@ 0x54
 800699e:	4656      	mov	r6, sl
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	f7fa f8f8 	bl	8000b98 <__aeabi_d2iz>
 80069a8:	4605      	mov	r5, r0
 80069aa:	f7f9 fddb 	bl	8000564 <__aeabi_i2d>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069b6:	f7f9 fc87 	bl	80002c8 <__aeabi_dsub>
 80069ba:	3530      	adds	r5, #48	@ 0x30
 80069bc:	f806 5b01 	strb.w	r5, [r6], #1
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	d124      	bne.n	8006a1a <_dtoa_r+0x662>
 80069d0:	4bac      	ldr	r3, [pc, #688]	@ (8006c84 <_dtoa_r+0x8cc>)
 80069d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069d6:	f7f9 fc79 	bl	80002cc <__adddf3>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069e2:	f7fa f8b9 	bl	8000b58 <__aeabi_dcmpgt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d145      	bne.n	8006a76 <_dtoa_r+0x6be>
 80069ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069ee:	49a5      	ldr	r1, [pc, #660]	@ (8006c84 <_dtoa_r+0x8cc>)
 80069f0:	2000      	movs	r0, #0
 80069f2:	f7f9 fc69 	bl	80002c8 <__aeabi_dsub>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069fe:	f7fa f88d 	bl	8000b1c <__aeabi_dcmplt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	f43f aef5 	beq.w	80067f2 <_dtoa_r+0x43a>
 8006a08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006a0a:	1e73      	subs	r3, r6, #1
 8006a0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a12:	2b30      	cmp	r3, #48	@ 0x30
 8006a14:	d0f8      	beq.n	8006a08 <_dtoa_r+0x650>
 8006a16:	9f04      	ldr	r7, [sp, #16]
 8006a18:	e73e      	b.n	8006898 <_dtoa_r+0x4e0>
 8006a1a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c88 <_dtoa_r+0x8d0>)
 8006a1c:	f7f9 fe0c 	bl	8000638 <__aeabi_dmul>
 8006a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a24:	e7bc      	b.n	80069a0 <_dtoa_r+0x5e8>
 8006a26:	d10c      	bne.n	8006a42 <_dtoa_r+0x68a>
 8006a28:	4b98      	ldr	r3, [pc, #608]	@ (8006c8c <_dtoa_r+0x8d4>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a30:	f7f9 fe02 	bl	8000638 <__aeabi_dmul>
 8006a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a38:	f7fa f884 	bl	8000b44 <__aeabi_dcmpge>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f000 8157 	beq.w	8006cf0 <_dtoa_r+0x938>
 8006a42:	2400      	movs	r4, #0
 8006a44:	4625      	mov	r5, r4
 8006a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	9304      	str	r3, [sp, #16]
 8006a4c:	4656      	mov	r6, sl
 8006a4e:	2700      	movs	r7, #0
 8006a50:	4621      	mov	r1, r4
 8006a52:	4658      	mov	r0, fp
 8006a54:	f000 ff00 	bl	8007858 <_Bfree>
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	d0dc      	beq.n	8006a16 <_dtoa_r+0x65e>
 8006a5c:	b12f      	cbz	r7, 8006a6a <_dtoa_r+0x6b2>
 8006a5e:	42af      	cmp	r7, r5
 8006a60:	d003      	beq.n	8006a6a <_dtoa_r+0x6b2>
 8006a62:	4639      	mov	r1, r7
 8006a64:	4658      	mov	r0, fp
 8006a66:	f000 fef7 	bl	8007858 <_Bfree>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	f000 fef3 	bl	8007858 <_Bfree>
 8006a72:	e7d0      	b.n	8006a16 <_dtoa_r+0x65e>
 8006a74:	9704      	str	r7, [sp, #16]
 8006a76:	4633      	mov	r3, r6
 8006a78:	461e      	mov	r6, r3
 8006a7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7e:	2a39      	cmp	r2, #57	@ 0x39
 8006a80:	d107      	bne.n	8006a92 <_dtoa_r+0x6da>
 8006a82:	459a      	cmp	sl, r3
 8006a84:	d1f8      	bne.n	8006a78 <_dtoa_r+0x6c0>
 8006a86:	9a04      	ldr	r2, [sp, #16]
 8006a88:	3201      	adds	r2, #1
 8006a8a:	9204      	str	r2, [sp, #16]
 8006a8c:	2230      	movs	r2, #48	@ 0x30
 8006a8e:	f88a 2000 	strb.w	r2, [sl]
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	3201      	adds	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e7bd      	b.n	8006a16 <_dtoa_r+0x65e>
 8006a9a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c88 <_dtoa_r+0x8d0>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f7f9 fdcb 	bl	8000638 <__aeabi_dmul>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	f7fa f82d 	bl	8000b08 <__aeabi_dcmpeq>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f43f aebb 	beq.w	800682a <_dtoa_r+0x472>
 8006ab4:	e6f0      	b.n	8006898 <_dtoa_r+0x4e0>
 8006ab6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	f000 80db 	beq.w	8006c74 <_dtoa_r+0x8bc>
 8006abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac0:	2a01      	cmp	r2, #1
 8006ac2:	f300 80bf 	bgt.w	8006c44 <_dtoa_r+0x88c>
 8006ac6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	f000 80b7 	beq.w	8006c3c <_dtoa_r+0x884>
 8006ace:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ad2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ad4:	4646      	mov	r6, r8
 8006ad6:	9a08      	ldr	r2, [sp, #32]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	441a      	add	r2, r3
 8006adc:	4658      	mov	r0, fp
 8006ade:	4498      	add	r8, r3
 8006ae0:	9208      	str	r2, [sp, #32]
 8006ae2:	f000 ffb7 	bl	8007a54 <__i2b>
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	b15e      	cbz	r6, 8006b02 <_dtoa_r+0x74a>
 8006aea:	9b08      	ldr	r3, [sp, #32]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dd08      	ble.n	8006b02 <_dtoa_r+0x74a>
 8006af0:	42b3      	cmp	r3, r6
 8006af2:	9a08      	ldr	r2, [sp, #32]
 8006af4:	bfa8      	it	ge
 8006af6:	4633      	movge	r3, r6
 8006af8:	eba8 0803 	sub.w	r8, r8, r3
 8006afc:	1af6      	subs	r6, r6, r3
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	9308      	str	r3, [sp, #32]
 8006b02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b04:	b1f3      	cbz	r3, 8006b44 <_dtoa_r+0x78c>
 8006b06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80b7 	beq.w	8006c7c <_dtoa_r+0x8c4>
 8006b0e:	b18c      	cbz	r4, 8006b34 <_dtoa_r+0x77c>
 8006b10:	4629      	mov	r1, r5
 8006b12:	4622      	mov	r2, r4
 8006b14:	4658      	mov	r0, fp
 8006b16:	f001 f85d 	bl	8007bd4 <__pow5mult>
 8006b1a:	464a      	mov	r2, r9
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4605      	mov	r5, r0
 8006b20:	4658      	mov	r0, fp
 8006b22:	f000 ffad 	bl	8007a80 <__multiply>
 8006b26:	4649      	mov	r1, r9
 8006b28:	9004      	str	r0, [sp, #16]
 8006b2a:	4658      	mov	r0, fp
 8006b2c:	f000 fe94 	bl	8007858 <_Bfree>
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	4699      	mov	r9, r3
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	1b1a      	subs	r2, r3, r4
 8006b38:	d004      	beq.n	8006b44 <_dtoa_r+0x78c>
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f001 f849 	bl	8007bd4 <__pow5mult>
 8006b42:	4681      	mov	r9, r0
 8006b44:	2101      	movs	r1, #1
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 ff84 	bl	8007a54 <__i2b>
 8006b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b4e:	4604      	mov	r4, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 81cf 	beq.w	8006ef4 <_dtoa_r+0xb3c>
 8006b56:	461a      	mov	r2, r3
 8006b58:	4601      	mov	r1, r0
 8006b5a:	4658      	mov	r0, fp
 8006b5c:	f001 f83a 	bl	8007bd4 <__pow5mult>
 8006b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	4604      	mov	r4, r0
 8006b66:	f300 8095 	bgt.w	8006c94 <_dtoa_r+0x8dc>
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8087 	bne.w	8006c80 <_dtoa_r+0x8c8>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 8089 	bne.w	8006c90 <_dtoa_r+0x8d8>
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b84:	0d1b      	lsrs	r3, r3, #20
 8006b86:	051b      	lsls	r3, r3, #20
 8006b88:	b12b      	cbz	r3, 8006b96 <_dtoa_r+0x7de>
 8006b8a:	9b08      	ldr	r3, [sp, #32]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	9308      	str	r3, [sp, #32]
 8006b90:	f108 0801 	add.w	r8, r8, #1
 8006b94:	2301      	movs	r3, #1
 8006b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 81b0 	beq.w	8006f00 <_dtoa_r+0xb48>
 8006ba0:	6923      	ldr	r3, [r4, #16]
 8006ba2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ba6:	6918      	ldr	r0, [r3, #16]
 8006ba8:	f000 ff08 	bl	80079bc <__hi0bits>
 8006bac:	f1c0 0020 	rsb	r0, r0, #32
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	4418      	add	r0, r3
 8006bb4:	f010 001f 	ands.w	r0, r0, #31
 8006bb8:	d077      	beq.n	8006caa <_dtoa_r+0x8f2>
 8006bba:	f1c0 0320 	rsb	r3, r0, #32
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	dd6b      	ble.n	8006c9a <_dtoa_r+0x8e2>
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	f1c0 001c 	rsb	r0, r0, #28
 8006bc8:	4403      	add	r3, r0
 8006bca:	4480      	add	r8, r0
 8006bcc:	4406      	add	r6, r0
 8006bce:	9308      	str	r3, [sp, #32]
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	dd05      	ble.n	8006be2 <_dtoa_r+0x82a>
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4642      	mov	r2, r8
 8006bda:	4658      	mov	r0, fp
 8006bdc:	f001 f854 	bl	8007c88 <__lshift>
 8006be0:	4681      	mov	r9, r0
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd05      	ble.n	8006bf4 <_dtoa_r+0x83c>
 8006be8:	4621      	mov	r1, r4
 8006bea:	461a      	mov	r2, r3
 8006bec:	4658      	mov	r0, fp
 8006bee:	f001 f84b 	bl	8007c88 <__lshift>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d059      	beq.n	8006cae <_dtoa_r+0x8f6>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4648      	mov	r0, r9
 8006bfe:	f001 f8af 	bl	8007d60 <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	da53      	bge.n	8006cae <_dtoa_r+0x8f6>
 8006c06:	1e7b      	subs	r3, r7, #1
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	220a      	movs	r2, #10
 8006c10:	4658      	mov	r0, fp
 8006c12:	f000 fe43 	bl	800789c <__multadd>
 8006c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c18:	4681      	mov	r9, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 8172 	beq.w	8006f04 <_dtoa_r+0xb4c>
 8006c20:	2300      	movs	r3, #0
 8006c22:	4629      	mov	r1, r5
 8006c24:	220a      	movs	r2, #10
 8006c26:	4658      	mov	r0, fp
 8006c28:	f000 fe38 	bl	800789c <__multadd>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	4605      	mov	r5, r0
 8006c32:	dc67      	bgt.n	8006d04 <_dtoa_r+0x94c>
 8006c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dc41      	bgt.n	8006cbe <_dtoa_r+0x906>
 8006c3a:	e063      	b.n	8006d04 <_dtoa_r+0x94c>
 8006c3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c42:	e746      	b.n	8006ad2 <_dtoa_r+0x71a>
 8006c44:	9b07      	ldr	r3, [sp, #28]
 8006c46:	1e5c      	subs	r4, r3, #1
 8006c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	bfbf      	itttt	lt
 8006c4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c54:	1ae3      	sublt	r3, r4, r3
 8006c56:	bfb4      	ite	lt
 8006c58:	18d2      	addlt	r2, r2, r3
 8006c5a:	1b1c      	subge	r4, r3, r4
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	bfbc      	itt	lt
 8006c60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c62:	2400      	movlt	r4, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb5      	itete	lt
 8006c68:	eba8 0603 	sublt.w	r6, r8, r3
 8006c6c:	9b07      	ldrge	r3, [sp, #28]
 8006c6e:	2300      	movlt	r3, #0
 8006c70:	4646      	movge	r6, r8
 8006c72:	e730      	b.n	8006ad6 <_dtoa_r+0x71e>
 8006c74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c78:	4646      	mov	r6, r8
 8006c7a:	e735      	b.n	8006ae8 <_dtoa_r+0x730>
 8006c7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c7e:	e75c      	b.n	8006b3a <_dtoa_r+0x782>
 8006c80:	2300      	movs	r3, #0
 8006c82:	e788      	b.n	8006b96 <_dtoa_r+0x7de>
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	40140000 	.word	0x40140000
 8006c90:	9b02      	ldr	r3, [sp, #8]
 8006c92:	e780      	b.n	8006b96 <_dtoa_r+0x7de>
 8006c94:	2300      	movs	r3, #0
 8006c96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c98:	e782      	b.n	8006ba0 <_dtoa_r+0x7e8>
 8006c9a:	d099      	beq.n	8006bd0 <_dtoa_r+0x818>
 8006c9c:	9a08      	ldr	r2, [sp, #32]
 8006c9e:	331c      	adds	r3, #28
 8006ca0:	441a      	add	r2, r3
 8006ca2:	4498      	add	r8, r3
 8006ca4:	441e      	add	r6, r3
 8006ca6:	9208      	str	r2, [sp, #32]
 8006ca8:	e792      	b.n	8006bd0 <_dtoa_r+0x818>
 8006caa:	4603      	mov	r3, r0
 8006cac:	e7f6      	b.n	8006c9c <_dtoa_r+0x8e4>
 8006cae:	9b07      	ldr	r3, [sp, #28]
 8006cb0:	9704      	str	r7, [sp, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	dc20      	bgt.n	8006cf8 <_dtoa_r+0x940>
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	dd1e      	ble.n	8006cfc <_dtoa_r+0x944>
 8006cbe:	9b00      	ldr	r3, [sp, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f47f aec0 	bne.w	8006a46 <_dtoa_r+0x68e>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	2205      	movs	r2, #5
 8006cca:	4658      	mov	r0, fp
 8006ccc:	f000 fde6 	bl	800789c <__multadd>
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4648      	mov	r0, r9
 8006cd6:	f001 f843 	bl	8007d60 <__mcmp>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f77f aeb3 	ble.w	8006a46 <_dtoa_r+0x68e>
 8006ce0:	4656      	mov	r6, sl
 8006ce2:	2331      	movs	r3, #49	@ 0x31
 8006ce4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9304      	str	r3, [sp, #16]
 8006cee:	e6ae      	b.n	8006a4e <_dtoa_r+0x696>
 8006cf0:	9c07      	ldr	r4, [sp, #28]
 8006cf2:	9704      	str	r7, [sp, #16]
 8006cf4:	4625      	mov	r5, r4
 8006cf6:	e7f3      	b.n	8006ce0 <_dtoa_r+0x928>
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8104 	beq.w	8006f0c <_dtoa_r+0xb54>
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	dd05      	ble.n	8006d14 <_dtoa_r+0x95c>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f000 ffbb 	bl	8007c88 <__lshift>
 8006d12:	4605      	mov	r5, r0
 8006d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d05a      	beq.n	8006dd0 <_dtoa_r+0xa18>
 8006d1a:	6869      	ldr	r1, [r5, #4]
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fd5b 	bl	80077d8 <_Balloc>
 8006d22:	4606      	mov	r6, r0
 8006d24:	b928      	cbnz	r0, 8006d32 <_dtoa_r+0x97a>
 8006d26:	4b84      	ldr	r3, [pc, #528]	@ (8006f38 <_dtoa_r+0xb80>)
 8006d28:	4602      	mov	r2, r0
 8006d2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d2e:	f7ff bb5a 	b.w	80063e6 <_dtoa_r+0x2e>
 8006d32:	692a      	ldr	r2, [r5, #16]
 8006d34:	3202      	adds	r2, #2
 8006d36:	0092      	lsls	r2, r2, #2
 8006d38:	f105 010c 	add.w	r1, r5, #12
 8006d3c:	300c      	adds	r0, #12
 8006d3e:	f7ff fa9a 	bl	8006276 <memcpy>
 8006d42:	2201      	movs	r2, #1
 8006d44:	4631      	mov	r1, r6
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 ff9e 	bl	8007c88 <__lshift>
 8006d4c:	f10a 0301 	add.w	r3, sl, #1
 8006d50:	9307      	str	r3, [sp, #28]
 8006d52:	9b00      	ldr	r3, [sp, #0]
 8006d54:	4453      	add	r3, sl
 8006d56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	462f      	mov	r7, r5
 8006d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d62:	4605      	mov	r5, r0
 8006d64:	9b07      	ldr	r3, [sp, #28]
 8006d66:	4621      	mov	r1, r4
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	4648      	mov	r0, r9
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	f7ff fa9b 	bl	80062a8 <quorem>
 8006d72:	4639      	mov	r1, r7
 8006d74:	9002      	str	r0, [sp, #8]
 8006d76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d7a:	4648      	mov	r0, r9
 8006d7c:	f000 fff0 	bl	8007d60 <__mcmp>
 8006d80:	462a      	mov	r2, r5
 8006d82:	9008      	str	r0, [sp, #32]
 8006d84:	4621      	mov	r1, r4
 8006d86:	4658      	mov	r0, fp
 8006d88:	f001 f806 	bl	8007d98 <__mdiff>
 8006d8c:	68c2      	ldr	r2, [r0, #12]
 8006d8e:	4606      	mov	r6, r0
 8006d90:	bb02      	cbnz	r2, 8006dd4 <_dtoa_r+0xa1c>
 8006d92:	4601      	mov	r1, r0
 8006d94:	4648      	mov	r0, r9
 8006d96:	f000 ffe3 	bl	8007d60 <__mcmp>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4658      	mov	r0, fp
 8006da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006da2:	f000 fd59 	bl	8007858 <_Bfree>
 8006da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006daa:	9e07      	ldr	r6, [sp, #28]
 8006dac:	ea43 0102 	orr.w	r1, r3, r2
 8006db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db2:	4319      	orrs	r1, r3
 8006db4:	d110      	bne.n	8006dd8 <_dtoa_r+0xa20>
 8006db6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dba:	d029      	beq.n	8006e10 <_dtoa_r+0xa58>
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dd02      	ble.n	8006dc8 <_dtoa_r+0xa10>
 8006dc2:	9b02      	ldr	r3, [sp, #8]
 8006dc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006dc8:	9b00      	ldr	r3, [sp, #0]
 8006dca:	f883 8000 	strb.w	r8, [r3]
 8006dce:	e63f      	b.n	8006a50 <_dtoa_r+0x698>
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e7bb      	b.n	8006d4c <_dtoa_r+0x994>
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	e7e1      	b.n	8006d9c <_dtoa_r+0x9e4>
 8006dd8:	9b08      	ldr	r3, [sp, #32]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	db04      	blt.n	8006de8 <_dtoa_r+0xa30>
 8006dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006de0:	430b      	orrs	r3, r1
 8006de2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006de4:	430b      	orrs	r3, r1
 8006de6:	d120      	bne.n	8006e2a <_dtoa_r+0xa72>
 8006de8:	2a00      	cmp	r2, #0
 8006dea:	dded      	ble.n	8006dc8 <_dtoa_r+0xa10>
 8006dec:	4649      	mov	r1, r9
 8006dee:	2201      	movs	r2, #1
 8006df0:	4658      	mov	r0, fp
 8006df2:	f000 ff49 	bl	8007c88 <__lshift>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4681      	mov	r9, r0
 8006dfa:	f000 ffb1 	bl	8007d60 <__mcmp>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	dc03      	bgt.n	8006e0a <_dtoa_r+0xa52>
 8006e02:	d1e1      	bne.n	8006dc8 <_dtoa_r+0xa10>
 8006e04:	f018 0f01 	tst.w	r8, #1
 8006e08:	d0de      	beq.n	8006dc8 <_dtoa_r+0xa10>
 8006e0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e0e:	d1d8      	bne.n	8006dc2 <_dtoa_r+0xa0a>
 8006e10:	9a00      	ldr	r2, [sp, #0]
 8006e12:	2339      	movs	r3, #57	@ 0x39
 8006e14:	7013      	strb	r3, [r2, #0]
 8006e16:	4633      	mov	r3, r6
 8006e18:	461e      	mov	r6, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e20:	2a39      	cmp	r2, #57	@ 0x39
 8006e22:	d052      	beq.n	8006eca <_dtoa_r+0xb12>
 8006e24:	3201      	adds	r2, #1
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e612      	b.n	8006a50 <_dtoa_r+0x698>
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	dd07      	ble.n	8006e3e <_dtoa_r+0xa86>
 8006e2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e32:	d0ed      	beq.n	8006e10 <_dtoa_r+0xa58>
 8006e34:	9a00      	ldr	r2, [sp, #0]
 8006e36:	f108 0301 	add.w	r3, r8, #1
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	e608      	b.n	8006a50 <_dtoa_r+0x698>
 8006e3e:	9b07      	ldr	r3, [sp, #28]
 8006e40:	9a07      	ldr	r2, [sp, #28]
 8006e42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d028      	beq.n	8006e9e <_dtoa_r+0xae6>
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	2300      	movs	r3, #0
 8006e50:	220a      	movs	r2, #10
 8006e52:	4658      	mov	r0, fp
 8006e54:	f000 fd22 	bl	800789c <__multadd>
 8006e58:	42af      	cmp	r7, r5
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 020a 	mov.w	r2, #10
 8006e64:	4639      	mov	r1, r7
 8006e66:	4658      	mov	r0, fp
 8006e68:	d107      	bne.n	8006e7a <_dtoa_r+0xac2>
 8006e6a:	f000 fd17 	bl	800789c <__multadd>
 8006e6e:	4607      	mov	r7, r0
 8006e70:	4605      	mov	r5, r0
 8006e72:	9b07      	ldr	r3, [sp, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	e774      	b.n	8006d64 <_dtoa_r+0x9ac>
 8006e7a:	f000 fd0f 	bl	800789c <__multadd>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4607      	mov	r7, r0
 8006e82:	2300      	movs	r3, #0
 8006e84:	220a      	movs	r2, #10
 8006e86:	4658      	mov	r0, fp
 8006e88:	f000 fd08 	bl	800789c <__multadd>
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	e7f0      	b.n	8006e72 <_dtoa_r+0xaba>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bfcc      	ite	gt
 8006e96:	461e      	movgt	r6, r3
 8006e98:	2601      	movle	r6, #1
 8006e9a:	4456      	add	r6, sl
 8006e9c:	2700      	movs	r7, #0
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fef0 	bl	8007c88 <__lshift>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4681      	mov	r9, r0
 8006eac:	f000 ff58 	bl	8007d60 <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dcb0      	bgt.n	8006e16 <_dtoa_r+0xa5e>
 8006eb4:	d102      	bne.n	8006ebc <_dtoa_r+0xb04>
 8006eb6:	f018 0f01 	tst.w	r8, #1
 8006eba:	d1ac      	bne.n	8006e16 <_dtoa_r+0xa5e>
 8006ebc:	4633      	mov	r3, r6
 8006ebe:	461e      	mov	r6, r3
 8006ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec4:	2a30      	cmp	r2, #48	@ 0x30
 8006ec6:	d0fa      	beq.n	8006ebe <_dtoa_r+0xb06>
 8006ec8:	e5c2      	b.n	8006a50 <_dtoa_r+0x698>
 8006eca:	459a      	cmp	sl, r3
 8006ecc:	d1a4      	bne.n	8006e18 <_dtoa_r+0xa60>
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	2331      	movs	r3, #49	@ 0x31
 8006ed6:	f88a 3000 	strb.w	r3, [sl]
 8006eda:	e5b9      	b.n	8006a50 <_dtoa_r+0x698>
 8006edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ede:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f3c <_dtoa_r+0xb84>
 8006ee2:	b11b      	cbz	r3, 8006eec <_dtoa_r+0xb34>
 8006ee4:	f10a 0308 	add.w	r3, sl, #8
 8006ee8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	4650      	mov	r0, sl
 8006eee:	b019      	add	sp, #100	@ 0x64
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	f77f ae37 	ble.w	8006b6a <_dtoa_r+0x7b2>
 8006efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f00:	2001      	movs	r0, #1
 8006f02:	e655      	b.n	8006bb0 <_dtoa_r+0x7f8>
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f77f aed6 	ble.w	8006cb8 <_dtoa_r+0x900>
 8006f0c:	4656      	mov	r6, sl
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4648      	mov	r0, r9
 8006f12:	f7ff f9c9 	bl	80062a8 <quorem>
 8006f16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f1a:	f806 8b01 	strb.w	r8, [r6], #1
 8006f1e:	9b00      	ldr	r3, [sp, #0]
 8006f20:	eba6 020a 	sub.w	r2, r6, sl
 8006f24:	4293      	cmp	r3, r2
 8006f26:	ddb3      	ble.n	8006e90 <_dtoa_r+0xad8>
 8006f28:	4649      	mov	r1, r9
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	220a      	movs	r2, #10
 8006f2e:	4658      	mov	r0, fp
 8006f30:	f000 fcb4 	bl	800789c <__multadd>
 8006f34:	4681      	mov	r9, r0
 8006f36:	e7ea      	b.n	8006f0e <_dtoa_r+0xb56>
 8006f38:	08008e79 	.word	0x08008e79
 8006f3c:	08008dfd 	.word	0x08008dfd

08006f40 <_free_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4605      	mov	r5, r0
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d041      	beq.n	8006fcc <_free_r+0x8c>
 8006f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f4c:	1f0c      	subs	r4, r1, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bfb8      	it	lt
 8006f52:	18e4      	addlt	r4, r4, r3
 8006f54:	f000 fc34 	bl	80077c0 <__malloc_lock>
 8006f58:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd0 <_free_r+0x90>)
 8006f5a:	6813      	ldr	r3, [r2, #0]
 8006f5c:	b933      	cbnz	r3, 8006f6c <_free_r+0x2c>
 8006f5e:	6063      	str	r3, [r4, #4]
 8006f60:	6014      	str	r4, [r2, #0]
 8006f62:	4628      	mov	r0, r5
 8006f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f68:	f000 bc30 	b.w	80077cc <__malloc_unlock>
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	d908      	bls.n	8006f82 <_free_r+0x42>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	1821      	adds	r1, r4, r0
 8006f74:	428b      	cmp	r3, r1
 8006f76:	bf01      	itttt	eq
 8006f78:	6819      	ldreq	r1, [r3, #0]
 8006f7a:	685b      	ldreq	r3, [r3, #4]
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	e7ed      	b.n	8006f5e <_free_r+0x1e>
 8006f82:	461a      	mov	r2, r3
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	b10b      	cbz	r3, 8006f8c <_free_r+0x4c>
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d9fa      	bls.n	8006f82 <_free_r+0x42>
 8006f8c:	6811      	ldr	r1, [r2, #0]
 8006f8e:	1850      	adds	r0, r2, r1
 8006f90:	42a0      	cmp	r0, r4
 8006f92:	d10b      	bne.n	8006fac <_free_r+0x6c>
 8006f94:	6820      	ldr	r0, [r4, #0]
 8006f96:	4401      	add	r1, r0
 8006f98:	1850      	adds	r0, r2, r1
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	d1e0      	bne.n	8006f62 <_free_r+0x22>
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	6053      	str	r3, [r2, #4]
 8006fa6:	4408      	add	r0, r1
 8006fa8:	6010      	str	r0, [r2, #0]
 8006faa:	e7da      	b.n	8006f62 <_free_r+0x22>
 8006fac:	d902      	bls.n	8006fb4 <_free_r+0x74>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	e7d6      	b.n	8006f62 <_free_r+0x22>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	1821      	adds	r1, r4, r0
 8006fb8:	428b      	cmp	r3, r1
 8006fba:	bf04      	itt	eq
 8006fbc:	6819      	ldreq	r1, [r3, #0]
 8006fbe:	685b      	ldreq	r3, [r3, #4]
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	bf04      	itt	eq
 8006fc4:	1809      	addeq	r1, r1, r0
 8006fc6:	6021      	streq	r1, [r4, #0]
 8006fc8:	6054      	str	r4, [r2, #4]
 8006fca:	e7ca      	b.n	8006f62 <_free_r+0x22>
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000680 	.word	0x20000680

08006fd4 <rshift>:
 8006fd4:	6903      	ldr	r3, [r0, #16]
 8006fd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006fda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006fe2:	f100 0414 	add.w	r4, r0, #20
 8006fe6:	dd45      	ble.n	8007074 <rshift+0xa0>
 8006fe8:	f011 011f 	ands.w	r1, r1, #31
 8006fec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006ff0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ff4:	d10c      	bne.n	8007010 <rshift+0x3c>
 8006ff6:	f100 0710 	add.w	r7, r0, #16
 8006ffa:	4629      	mov	r1, r5
 8006ffc:	42b1      	cmp	r1, r6
 8006ffe:	d334      	bcc.n	800706a <rshift+0x96>
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	1eea      	subs	r2, r5, #3
 8007006:	4296      	cmp	r6, r2
 8007008:	bf38      	it	cc
 800700a:	2300      	movcc	r3, #0
 800700c:	4423      	add	r3, r4
 800700e:	e015      	b.n	800703c <rshift+0x68>
 8007010:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007014:	f1c1 0820 	rsb	r8, r1, #32
 8007018:	40cf      	lsrs	r7, r1
 800701a:	f105 0e04 	add.w	lr, r5, #4
 800701e:	46a1      	mov	r9, r4
 8007020:	4576      	cmp	r6, lr
 8007022:	46f4      	mov	ip, lr
 8007024:	d815      	bhi.n	8007052 <rshift+0x7e>
 8007026:	1a9a      	subs	r2, r3, r2
 8007028:	0092      	lsls	r2, r2, #2
 800702a:	3a04      	subs	r2, #4
 800702c:	3501      	adds	r5, #1
 800702e:	42ae      	cmp	r6, r5
 8007030:	bf38      	it	cc
 8007032:	2200      	movcc	r2, #0
 8007034:	18a3      	adds	r3, r4, r2
 8007036:	50a7      	str	r7, [r4, r2]
 8007038:	b107      	cbz	r7, 800703c <rshift+0x68>
 800703a:	3304      	adds	r3, #4
 800703c:	1b1a      	subs	r2, r3, r4
 800703e:	42a3      	cmp	r3, r4
 8007040:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007044:	bf08      	it	eq
 8007046:	2300      	moveq	r3, #0
 8007048:	6102      	str	r2, [r0, #16]
 800704a:	bf08      	it	eq
 800704c:	6143      	streq	r3, [r0, #20]
 800704e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007052:	f8dc c000 	ldr.w	ip, [ip]
 8007056:	fa0c fc08 	lsl.w	ip, ip, r8
 800705a:	ea4c 0707 	orr.w	r7, ip, r7
 800705e:	f849 7b04 	str.w	r7, [r9], #4
 8007062:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007066:	40cf      	lsrs	r7, r1
 8007068:	e7da      	b.n	8007020 <rshift+0x4c>
 800706a:	f851 cb04 	ldr.w	ip, [r1], #4
 800706e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007072:	e7c3      	b.n	8006ffc <rshift+0x28>
 8007074:	4623      	mov	r3, r4
 8007076:	e7e1      	b.n	800703c <rshift+0x68>

08007078 <__hexdig_fun>:
 8007078:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800707c:	2b09      	cmp	r3, #9
 800707e:	d802      	bhi.n	8007086 <__hexdig_fun+0xe>
 8007080:	3820      	subs	r0, #32
 8007082:	b2c0      	uxtb	r0, r0
 8007084:	4770      	bx	lr
 8007086:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800708a:	2b05      	cmp	r3, #5
 800708c:	d801      	bhi.n	8007092 <__hexdig_fun+0x1a>
 800708e:	3847      	subs	r0, #71	@ 0x47
 8007090:	e7f7      	b.n	8007082 <__hexdig_fun+0xa>
 8007092:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007096:	2b05      	cmp	r3, #5
 8007098:	d801      	bhi.n	800709e <__hexdig_fun+0x26>
 800709a:	3827      	subs	r0, #39	@ 0x27
 800709c:	e7f1      	b.n	8007082 <__hexdig_fun+0xa>
 800709e:	2000      	movs	r0, #0
 80070a0:	4770      	bx	lr
	...

080070a4 <__gethex>:
 80070a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a8:	b085      	sub	sp, #20
 80070aa:	468a      	mov	sl, r1
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	680b      	ldr	r3, [r1, #0]
 80070b0:	9001      	str	r0, [sp, #4]
 80070b2:	4690      	mov	r8, r2
 80070b4:	1c9c      	adds	r4, r3, #2
 80070b6:	46a1      	mov	r9, r4
 80070b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80070bc:	2830      	cmp	r0, #48	@ 0x30
 80070be:	d0fa      	beq.n	80070b6 <__gethex+0x12>
 80070c0:	eba9 0303 	sub.w	r3, r9, r3
 80070c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80070c8:	f7ff ffd6 	bl	8007078 <__hexdig_fun>
 80070cc:	4605      	mov	r5, r0
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d168      	bne.n	80071a4 <__gethex+0x100>
 80070d2:	49a0      	ldr	r1, [pc, #640]	@ (8007354 <__gethex+0x2b0>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	4648      	mov	r0, r9
 80070d8:	f7ff f844 	bl	8006164 <strncmp>
 80070dc:	4607      	mov	r7, r0
 80070de:	2800      	cmp	r0, #0
 80070e0:	d167      	bne.n	80071b2 <__gethex+0x10e>
 80070e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80070e6:	4626      	mov	r6, r4
 80070e8:	f7ff ffc6 	bl	8007078 <__hexdig_fun>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d062      	beq.n	80071b6 <__gethex+0x112>
 80070f0:	4623      	mov	r3, r4
 80070f2:	7818      	ldrb	r0, [r3, #0]
 80070f4:	2830      	cmp	r0, #48	@ 0x30
 80070f6:	4699      	mov	r9, r3
 80070f8:	f103 0301 	add.w	r3, r3, #1
 80070fc:	d0f9      	beq.n	80070f2 <__gethex+0x4e>
 80070fe:	f7ff ffbb 	bl	8007078 <__hexdig_fun>
 8007102:	fab0 f580 	clz	r5, r0
 8007106:	096d      	lsrs	r5, r5, #5
 8007108:	f04f 0b01 	mov.w	fp, #1
 800710c:	464a      	mov	r2, r9
 800710e:	4616      	mov	r6, r2
 8007110:	3201      	adds	r2, #1
 8007112:	7830      	ldrb	r0, [r6, #0]
 8007114:	f7ff ffb0 	bl	8007078 <__hexdig_fun>
 8007118:	2800      	cmp	r0, #0
 800711a:	d1f8      	bne.n	800710e <__gethex+0x6a>
 800711c:	498d      	ldr	r1, [pc, #564]	@ (8007354 <__gethex+0x2b0>)
 800711e:	2201      	movs	r2, #1
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff f81f 	bl	8006164 <strncmp>
 8007126:	2800      	cmp	r0, #0
 8007128:	d13f      	bne.n	80071aa <__gethex+0x106>
 800712a:	b944      	cbnz	r4, 800713e <__gethex+0x9a>
 800712c:	1c74      	adds	r4, r6, #1
 800712e:	4622      	mov	r2, r4
 8007130:	4616      	mov	r6, r2
 8007132:	3201      	adds	r2, #1
 8007134:	7830      	ldrb	r0, [r6, #0]
 8007136:	f7ff ff9f 	bl	8007078 <__hexdig_fun>
 800713a:	2800      	cmp	r0, #0
 800713c:	d1f8      	bne.n	8007130 <__gethex+0x8c>
 800713e:	1ba4      	subs	r4, r4, r6
 8007140:	00a7      	lsls	r7, r4, #2
 8007142:	7833      	ldrb	r3, [r6, #0]
 8007144:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007148:	2b50      	cmp	r3, #80	@ 0x50
 800714a:	d13e      	bne.n	80071ca <__gethex+0x126>
 800714c:	7873      	ldrb	r3, [r6, #1]
 800714e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007150:	d033      	beq.n	80071ba <__gethex+0x116>
 8007152:	2b2d      	cmp	r3, #45	@ 0x2d
 8007154:	d034      	beq.n	80071c0 <__gethex+0x11c>
 8007156:	1c71      	adds	r1, r6, #1
 8007158:	2400      	movs	r4, #0
 800715a:	7808      	ldrb	r0, [r1, #0]
 800715c:	f7ff ff8c 	bl	8007078 <__hexdig_fun>
 8007160:	1e43      	subs	r3, r0, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b18      	cmp	r3, #24
 8007166:	d830      	bhi.n	80071ca <__gethex+0x126>
 8007168:	f1a0 0210 	sub.w	r2, r0, #16
 800716c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007170:	f7ff ff82 	bl	8007078 <__hexdig_fun>
 8007174:	f100 3cff 	add.w	ip, r0, #4294967295
 8007178:	fa5f fc8c 	uxtb.w	ip, ip
 800717c:	f1bc 0f18 	cmp.w	ip, #24
 8007180:	f04f 030a 	mov.w	r3, #10
 8007184:	d91e      	bls.n	80071c4 <__gethex+0x120>
 8007186:	b104      	cbz	r4, 800718a <__gethex+0xe6>
 8007188:	4252      	negs	r2, r2
 800718a:	4417      	add	r7, r2
 800718c:	f8ca 1000 	str.w	r1, [sl]
 8007190:	b1ed      	cbz	r5, 80071ce <__gethex+0x12a>
 8007192:	f1bb 0f00 	cmp.w	fp, #0
 8007196:	bf0c      	ite	eq
 8007198:	2506      	moveq	r5, #6
 800719a:	2500      	movne	r5, #0
 800719c:	4628      	mov	r0, r5
 800719e:	b005      	add	sp, #20
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	2500      	movs	r5, #0
 80071a6:	462c      	mov	r4, r5
 80071a8:	e7b0      	b.n	800710c <__gethex+0x68>
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	d1c7      	bne.n	800713e <__gethex+0x9a>
 80071ae:	4627      	mov	r7, r4
 80071b0:	e7c7      	b.n	8007142 <__gethex+0x9e>
 80071b2:	464e      	mov	r6, r9
 80071b4:	462f      	mov	r7, r5
 80071b6:	2501      	movs	r5, #1
 80071b8:	e7c3      	b.n	8007142 <__gethex+0x9e>
 80071ba:	2400      	movs	r4, #0
 80071bc:	1cb1      	adds	r1, r6, #2
 80071be:	e7cc      	b.n	800715a <__gethex+0xb6>
 80071c0:	2401      	movs	r4, #1
 80071c2:	e7fb      	b.n	80071bc <__gethex+0x118>
 80071c4:	fb03 0002 	mla	r0, r3, r2, r0
 80071c8:	e7ce      	b.n	8007168 <__gethex+0xc4>
 80071ca:	4631      	mov	r1, r6
 80071cc:	e7de      	b.n	800718c <__gethex+0xe8>
 80071ce:	eba6 0309 	sub.w	r3, r6, r9
 80071d2:	3b01      	subs	r3, #1
 80071d4:	4629      	mov	r1, r5
 80071d6:	2b07      	cmp	r3, #7
 80071d8:	dc0a      	bgt.n	80071f0 <__gethex+0x14c>
 80071da:	9801      	ldr	r0, [sp, #4]
 80071dc:	f000 fafc 	bl	80077d8 <_Balloc>
 80071e0:	4604      	mov	r4, r0
 80071e2:	b940      	cbnz	r0, 80071f6 <__gethex+0x152>
 80071e4:	4b5c      	ldr	r3, [pc, #368]	@ (8007358 <__gethex+0x2b4>)
 80071e6:	4602      	mov	r2, r0
 80071e8:	21e4      	movs	r1, #228	@ 0xe4
 80071ea:	485c      	ldr	r0, [pc, #368]	@ (800735c <__gethex+0x2b8>)
 80071ec:	f001 fa34 	bl	8008658 <__assert_func>
 80071f0:	3101      	adds	r1, #1
 80071f2:	105b      	asrs	r3, r3, #1
 80071f4:	e7ef      	b.n	80071d6 <__gethex+0x132>
 80071f6:	f100 0a14 	add.w	sl, r0, #20
 80071fa:	2300      	movs	r3, #0
 80071fc:	4655      	mov	r5, sl
 80071fe:	469b      	mov	fp, r3
 8007200:	45b1      	cmp	r9, r6
 8007202:	d337      	bcc.n	8007274 <__gethex+0x1d0>
 8007204:	f845 bb04 	str.w	fp, [r5], #4
 8007208:	eba5 050a 	sub.w	r5, r5, sl
 800720c:	10ad      	asrs	r5, r5, #2
 800720e:	6125      	str	r5, [r4, #16]
 8007210:	4658      	mov	r0, fp
 8007212:	f000 fbd3 	bl	80079bc <__hi0bits>
 8007216:	016d      	lsls	r5, r5, #5
 8007218:	f8d8 6000 	ldr.w	r6, [r8]
 800721c:	1a2d      	subs	r5, r5, r0
 800721e:	42b5      	cmp	r5, r6
 8007220:	dd54      	ble.n	80072cc <__gethex+0x228>
 8007222:	1bad      	subs	r5, r5, r6
 8007224:	4629      	mov	r1, r5
 8007226:	4620      	mov	r0, r4
 8007228:	f000 ff67 	bl	80080fa <__any_on>
 800722c:	4681      	mov	r9, r0
 800722e:	b178      	cbz	r0, 8007250 <__gethex+0x1ac>
 8007230:	1e6b      	subs	r3, r5, #1
 8007232:	1159      	asrs	r1, r3, #5
 8007234:	f003 021f 	and.w	r2, r3, #31
 8007238:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800723c:	f04f 0901 	mov.w	r9, #1
 8007240:	fa09 f202 	lsl.w	r2, r9, r2
 8007244:	420a      	tst	r2, r1
 8007246:	d003      	beq.n	8007250 <__gethex+0x1ac>
 8007248:	454b      	cmp	r3, r9
 800724a:	dc36      	bgt.n	80072ba <__gethex+0x216>
 800724c:	f04f 0902 	mov.w	r9, #2
 8007250:	4629      	mov	r1, r5
 8007252:	4620      	mov	r0, r4
 8007254:	f7ff febe 	bl	8006fd4 <rshift>
 8007258:	442f      	add	r7, r5
 800725a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800725e:	42bb      	cmp	r3, r7
 8007260:	da42      	bge.n	80072e8 <__gethex+0x244>
 8007262:	9801      	ldr	r0, [sp, #4]
 8007264:	4621      	mov	r1, r4
 8007266:	f000 faf7 	bl	8007858 <_Bfree>
 800726a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800726c:	2300      	movs	r3, #0
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	25a3      	movs	r5, #163	@ 0xa3
 8007272:	e793      	b.n	800719c <__gethex+0xf8>
 8007274:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007278:	2a2e      	cmp	r2, #46	@ 0x2e
 800727a:	d012      	beq.n	80072a2 <__gethex+0x1fe>
 800727c:	2b20      	cmp	r3, #32
 800727e:	d104      	bne.n	800728a <__gethex+0x1e6>
 8007280:	f845 bb04 	str.w	fp, [r5], #4
 8007284:	f04f 0b00 	mov.w	fp, #0
 8007288:	465b      	mov	r3, fp
 800728a:	7830      	ldrb	r0, [r6, #0]
 800728c:	9303      	str	r3, [sp, #12]
 800728e:	f7ff fef3 	bl	8007078 <__hexdig_fun>
 8007292:	9b03      	ldr	r3, [sp, #12]
 8007294:	f000 000f 	and.w	r0, r0, #15
 8007298:	4098      	lsls	r0, r3
 800729a:	ea4b 0b00 	orr.w	fp, fp, r0
 800729e:	3304      	adds	r3, #4
 80072a0:	e7ae      	b.n	8007200 <__gethex+0x15c>
 80072a2:	45b1      	cmp	r9, r6
 80072a4:	d8ea      	bhi.n	800727c <__gethex+0x1d8>
 80072a6:	492b      	ldr	r1, [pc, #172]	@ (8007354 <__gethex+0x2b0>)
 80072a8:	9303      	str	r3, [sp, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7fe ff59 	bl	8006164 <strncmp>
 80072b2:	9b03      	ldr	r3, [sp, #12]
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d1e1      	bne.n	800727c <__gethex+0x1d8>
 80072b8:	e7a2      	b.n	8007200 <__gethex+0x15c>
 80072ba:	1ea9      	subs	r1, r5, #2
 80072bc:	4620      	mov	r0, r4
 80072be:	f000 ff1c 	bl	80080fa <__any_on>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d0c2      	beq.n	800724c <__gethex+0x1a8>
 80072c6:	f04f 0903 	mov.w	r9, #3
 80072ca:	e7c1      	b.n	8007250 <__gethex+0x1ac>
 80072cc:	da09      	bge.n	80072e2 <__gethex+0x23e>
 80072ce:	1b75      	subs	r5, r6, r5
 80072d0:	4621      	mov	r1, r4
 80072d2:	9801      	ldr	r0, [sp, #4]
 80072d4:	462a      	mov	r2, r5
 80072d6:	f000 fcd7 	bl	8007c88 <__lshift>
 80072da:	1b7f      	subs	r7, r7, r5
 80072dc:	4604      	mov	r4, r0
 80072de:	f100 0a14 	add.w	sl, r0, #20
 80072e2:	f04f 0900 	mov.w	r9, #0
 80072e6:	e7b8      	b.n	800725a <__gethex+0x1b6>
 80072e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80072ec:	42bd      	cmp	r5, r7
 80072ee:	dd6f      	ble.n	80073d0 <__gethex+0x32c>
 80072f0:	1bed      	subs	r5, r5, r7
 80072f2:	42ae      	cmp	r6, r5
 80072f4:	dc34      	bgt.n	8007360 <__gethex+0x2bc>
 80072f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d022      	beq.n	8007344 <__gethex+0x2a0>
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d024      	beq.n	800734c <__gethex+0x2a8>
 8007302:	2b01      	cmp	r3, #1
 8007304:	d115      	bne.n	8007332 <__gethex+0x28e>
 8007306:	42ae      	cmp	r6, r5
 8007308:	d113      	bne.n	8007332 <__gethex+0x28e>
 800730a:	2e01      	cmp	r6, #1
 800730c:	d10b      	bne.n	8007326 <__gethex+0x282>
 800730e:	9a02      	ldr	r2, [sp, #8]
 8007310:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	2301      	movs	r3, #1
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	f8ca 3000 	str.w	r3, [sl]
 800731e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007320:	2562      	movs	r5, #98	@ 0x62
 8007322:	601c      	str	r4, [r3, #0]
 8007324:	e73a      	b.n	800719c <__gethex+0xf8>
 8007326:	1e71      	subs	r1, r6, #1
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fee6 	bl	80080fa <__any_on>
 800732e:	2800      	cmp	r0, #0
 8007330:	d1ed      	bne.n	800730e <__gethex+0x26a>
 8007332:	9801      	ldr	r0, [sp, #4]
 8007334:	4621      	mov	r1, r4
 8007336:	f000 fa8f 	bl	8007858 <_Bfree>
 800733a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800733c:	2300      	movs	r3, #0
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	2550      	movs	r5, #80	@ 0x50
 8007342:	e72b      	b.n	800719c <__gethex+0xf8>
 8007344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f3      	bne.n	8007332 <__gethex+0x28e>
 800734a:	e7e0      	b.n	800730e <__gethex+0x26a>
 800734c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1dd      	bne.n	800730e <__gethex+0x26a>
 8007352:	e7ee      	b.n	8007332 <__gethex+0x28e>
 8007354:	08008c6c 	.word	0x08008c6c
 8007358:	08008e79 	.word	0x08008e79
 800735c:	08008e8a 	.word	0x08008e8a
 8007360:	1e6f      	subs	r7, r5, #1
 8007362:	f1b9 0f00 	cmp.w	r9, #0
 8007366:	d130      	bne.n	80073ca <__gethex+0x326>
 8007368:	b127      	cbz	r7, 8007374 <__gethex+0x2d0>
 800736a:	4639      	mov	r1, r7
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fec4 	bl	80080fa <__any_on>
 8007372:	4681      	mov	r9, r0
 8007374:	117a      	asrs	r2, r7, #5
 8007376:	2301      	movs	r3, #1
 8007378:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800737c:	f007 071f 	and.w	r7, r7, #31
 8007380:	40bb      	lsls	r3, r7
 8007382:	4213      	tst	r3, r2
 8007384:	4629      	mov	r1, r5
 8007386:	4620      	mov	r0, r4
 8007388:	bf18      	it	ne
 800738a:	f049 0902 	orrne.w	r9, r9, #2
 800738e:	f7ff fe21 	bl	8006fd4 <rshift>
 8007392:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007396:	1b76      	subs	r6, r6, r5
 8007398:	2502      	movs	r5, #2
 800739a:	f1b9 0f00 	cmp.w	r9, #0
 800739e:	d047      	beq.n	8007430 <__gethex+0x38c>
 80073a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d015      	beq.n	80073d4 <__gethex+0x330>
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d017      	beq.n	80073dc <__gethex+0x338>
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d109      	bne.n	80073c4 <__gethex+0x320>
 80073b0:	f019 0f02 	tst.w	r9, #2
 80073b4:	d006      	beq.n	80073c4 <__gethex+0x320>
 80073b6:	f8da 3000 	ldr.w	r3, [sl]
 80073ba:	ea49 0903 	orr.w	r9, r9, r3
 80073be:	f019 0f01 	tst.w	r9, #1
 80073c2:	d10e      	bne.n	80073e2 <__gethex+0x33e>
 80073c4:	f045 0510 	orr.w	r5, r5, #16
 80073c8:	e032      	b.n	8007430 <__gethex+0x38c>
 80073ca:	f04f 0901 	mov.w	r9, #1
 80073ce:	e7d1      	b.n	8007374 <__gethex+0x2d0>
 80073d0:	2501      	movs	r5, #1
 80073d2:	e7e2      	b.n	800739a <__gethex+0x2f6>
 80073d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d6:	f1c3 0301 	rsb	r3, r3, #1
 80073da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0f0      	beq.n	80073c4 <__gethex+0x320>
 80073e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80073e6:	f104 0314 	add.w	r3, r4, #20
 80073ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80073ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80073f2:	f04f 0c00 	mov.w	ip, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007400:	d01b      	beq.n	800743a <__gethex+0x396>
 8007402:	3201      	adds	r2, #1
 8007404:	6002      	str	r2, [r0, #0]
 8007406:	2d02      	cmp	r5, #2
 8007408:	f104 0314 	add.w	r3, r4, #20
 800740c:	d13c      	bne.n	8007488 <__gethex+0x3e4>
 800740e:	f8d8 2000 	ldr.w	r2, [r8]
 8007412:	3a01      	subs	r2, #1
 8007414:	42b2      	cmp	r2, r6
 8007416:	d109      	bne.n	800742c <__gethex+0x388>
 8007418:	1171      	asrs	r1, r6, #5
 800741a:	2201      	movs	r2, #1
 800741c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007420:	f006 061f 	and.w	r6, r6, #31
 8007424:	fa02 f606 	lsl.w	r6, r2, r6
 8007428:	421e      	tst	r6, r3
 800742a:	d13a      	bne.n	80074a2 <__gethex+0x3fe>
 800742c:	f045 0520 	orr.w	r5, r5, #32
 8007430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007432:	601c      	str	r4, [r3, #0]
 8007434:	9b02      	ldr	r3, [sp, #8]
 8007436:	601f      	str	r7, [r3, #0]
 8007438:	e6b0      	b.n	800719c <__gethex+0xf8>
 800743a:	4299      	cmp	r1, r3
 800743c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007440:	d8d9      	bhi.n	80073f6 <__gethex+0x352>
 8007442:	68a3      	ldr	r3, [r4, #8]
 8007444:	459b      	cmp	fp, r3
 8007446:	db17      	blt.n	8007478 <__gethex+0x3d4>
 8007448:	6861      	ldr	r1, [r4, #4]
 800744a:	9801      	ldr	r0, [sp, #4]
 800744c:	3101      	adds	r1, #1
 800744e:	f000 f9c3 	bl	80077d8 <_Balloc>
 8007452:	4681      	mov	r9, r0
 8007454:	b918      	cbnz	r0, 800745e <__gethex+0x3ba>
 8007456:	4b1a      	ldr	r3, [pc, #104]	@ (80074c0 <__gethex+0x41c>)
 8007458:	4602      	mov	r2, r0
 800745a:	2184      	movs	r1, #132	@ 0x84
 800745c:	e6c5      	b.n	80071ea <__gethex+0x146>
 800745e:	6922      	ldr	r2, [r4, #16]
 8007460:	3202      	adds	r2, #2
 8007462:	f104 010c 	add.w	r1, r4, #12
 8007466:	0092      	lsls	r2, r2, #2
 8007468:	300c      	adds	r0, #12
 800746a:	f7fe ff04 	bl	8006276 <memcpy>
 800746e:	4621      	mov	r1, r4
 8007470:	9801      	ldr	r0, [sp, #4]
 8007472:	f000 f9f1 	bl	8007858 <_Bfree>
 8007476:	464c      	mov	r4, r9
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	1c5a      	adds	r2, r3, #1
 800747c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007480:	6122      	str	r2, [r4, #16]
 8007482:	2201      	movs	r2, #1
 8007484:	615a      	str	r2, [r3, #20]
 8007486:	e7be      	b.n	8007406 <__gethex+0x362>
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	455a      	cmp	r2, fp
 800748c:	dd0b      	ble.n	80074a6 <__gethex+0x402>
 800748e:	2101      	movs	r1, #1
 8007490:	4620      	mov	r0, r4
 8007492:	f7ff fd9f 	bl	8006fd4 <rshift>
 8007496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800749a:	3701      	adds	r7, #1
 800749c:	42bb      	cmp	r3, r7
 800749e:	f6ff aee0 	blt.w	8007262 <__gethex+0x1be>
 80074a2:	2501      	movs	r5, #1
 80074a4:	e7c2      	b.n	800742c <__gethex+0x388>
 80074a6:	f016 061f 	ands.w	r6, r6, #31
 80074aa:	d0fa      	beq.n	80074a2 <__gethex+0x3fe>
 80074ac:	4453      	add	r3, sl
 80074ae:	f1c6 0620 	rsb	r6, r6, #32
 80074b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80074b6:	f000 fa81 	bl	80079bc <__hi0bits>
 80074ba:	42b0      	cmp	r0, r6
 80074bc:	dbe7      	blt.n	800748e <__gethex+0x3ea>
 80074be:	e7f0      	b.n	80074a2 <__gethex+0x3fe>
 80074c0:	08008e79 	.word	0x08008e79

080074c4 <L_shift>:
 80074c4:	f1c2 0208 	rsb	r2, r2, #8
 80074c8:	0092      	lsls	r2, r2, #2
 80074ca:	b570      	push	{r4, r5, r6, lr}
 80074cc:	f1c2 0620 	rsb	r6, r2, #32
 80074d0:	6843      	ldr	r3, [r0, #4]
 80074d2:	6804      	ldr	r4, [r0, #0]
 80074d4:	fa03 f506 	lsl.w	r5, r3, r6
 80074d8:	432c      	orrs	r4, r5
 80074da:	40d3      	lsrs	r3, r2
 80074dc:	6004      	str	r4, [r0, #0]
 80074de:	f840 3f04 	str.w	r3, [r0, #4]!
 80074e2:	4288      	cmp	r0, r1
 80074e4:	d3f4      	bcc.n	80074d0 <L_shift+0xc>
 80074e6:	bd70      	pop	{r4, r5, r6, pc}

080074e8 <__match>:
 80074e8:	b530      	push	{r4, r5, lr}
 80074ea:	6803      	ldr	r3, [r0, #0]
 80074ec:	3301      	adds	r3, #1
 80074ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074f2:	b914      	cbnz	r4, 80074fa <__match+0x12>
 80074f4:	6003      	str	r3, [r0, #0]
 80074f6:	2001      	movs	r0, #1
 80074f8:	bd30      	pop	{r4, r5, pc}
 80074fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007502:	2d19      	cmp	r5, #25
 8007504:	bf98      	it	ls
 8007506:	3220      	addls	r2, #32
 8007508:	42a2      	cmp	r2, r4
 800750a:	d0f0      	beq.n	80074ee <__match+0x6>
 800750c:	2000      	movs	r0, #0
 800750e:	e7f3      	b.n	80074f8 <__match+0x10>

08007510 <__hexnan>:
 8007510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007514:	680b      	ldr	r3, [r1, #0]
 8007516:	6801      	ldr	r1, [r0, #0]
 8007518:	115e      	asrs	r6, r3, #5
 800751a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800751e:	f013 031f 	ands.w	r3, r3, #31
 8007522:	b087      	sub	sp, #28
 8007524:	bf18      	it	ne
 8007526:	3604      	addne	r6, #4
 8007528:	2500      	movs	r5, #0
 800752a:	1f37      	subs	r7, r6, #4
 800752c:	4682      	mov	sl, r0
 800752e:	4690      	mov	r8, r2
 8007530:	9301      	str	r3, [sp, #4]
 8007532:	f846 5c04 	str.w	r5, [r6, #-4]
 8007536:	46b9      	mov	r9, r7
 8007538:	463c      	mov	r4, r7
 800753a:	9502      	str	r5, [sp, #8]
 800753c:	46ab      	mov	fp, r5
 800753e:	784a      	ldrb	r2, [r1, #1]
 8007540:	1c4b      	adds	r3, r1, #1
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	b342      	cbz	r2, 8007598 <__hexnan+0x88>
 8007546:	4610      	mov	r0, r2
 8007548:	9105      	str	r1, [sp, #20]
 800754a:	9204      	str	r2, [sp, #16]
 800754c:	f7ff fd94 	bl	8007078 <__hexdig_fun>
 8007550:	2800      	cmp	r0, #0
 8007552:	d151      	bne.n	80075f8 <__hexnan+0xe8>
 8007554:	9a04      	ldr	r2, [sp, #16]
 8007556:	9905      	ldr	r1, [sp, #20]
 8007558:	2a20      	cmp	r2, #32
 800755a:	d818      	bhi.n	800758e <__hexnan+0x7e>
 800755c:	9b02      	ldr	r3, [sp, #8]
 800755e:	459b      	cmp	fp, r3
 8007560:	dd13      	ble.n	800758a <__hexnan+0x7a>
 8007562:	454c      	cmp	r4, r9
 8007564:	d206      	bcs.n	8007574 <__hexnan+0x64>
 8007566:	2d07      	cmp	r5, #7
 8007568:	dc04      	bgt.n	8007574 <__hexnan+0x64>
 800756a:	462a      	mov	r2, r5
 800756c:	4649      	mov	r1, r9
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff ffa8 	bl	80074c4 <L_shift>
 8007574:	4544      	cmp	r4, r8
 8007576:	d952      	bls.n	800761e <__hexnan+0x10e>
 8007578:	2300      	movs	r3, #0
 800757a:	f1a4 0904 	sub.w	r9, r4, #4
 800757e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007582:	f8cd b008 	str.w	fp, [sp, #8]
 8007586:	464c      	mov	r4, r9
 8007588:	461d      	mov	r5, r3
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	e7d7      	b.n	800753e <__hexnan+0x2e>
 800758e:	2a29      	cmp	r2, #41	@ 0x29
 8007590:	d157      	bne.n	8007642 <__hexnan+0x132>
 8007592:	3102      	adds	r1, #2
 8007594:	f8ca 1000 	str.w	r1, [sl]
 8007598:	f1bb 0f00 	cmp.w	fp, #0
 800759c:	d051      	beq.n	8007642 <__hexnan+0x132>
 800759e:	454c      	cmp	r4, r9
 80075a0:	d206      	bcs.n	80075b0 <__hexnan+0xa0>
 80075a2:	2d07      	cmp	r5, #7
 80075a4:	dc04      	bgt.n	80075b0 <__hexnan+0xa0>
 80075a6:	462a      	mov	r2, r5
 80075a8:	4649      	mov	r1, r9
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff ff8a 	bl	80074c4 <L_shift>
 80075b0:	4544      	cmp	r4, r8
 80075b2:	d936      	bls.n	8007622 <__hexnan+0x112>
 80075b4:	f1a8 0204 	sub.w	r2, r8, #4
 80075b8:	4623      	mov	r3, r4
 80075ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80075be:	f842 1f04 	str.w	r1, [r2, #4]!
 80075c2:	429f      	cmp	r7, r3
 80075c4:	d2f9      	bcs.n	80075ba <__hexnan+0xaa>
 80075c6:	1b3b      	subs	r3, r7, r4
 80075c8:	f023 0303 	bic.w	r3, r3, #3
 80075cc:	3304      	adds	r3, #4
 80075ce:	3401      	adds	r4, #1
 80075d0:	3e03      	subs	r6, #3
 80075d2:	42b4      	cmp	r4, r6
 80075d4:	bf88      	it	hi
 80075d6:	2304      	movhi	r3, #4
 80075d8:	4443      	add	r3, r8
 80075da:	2200      	movs	r2, #0
 80075dc:	f843 2b04 	str.w	r2, [r3], #4
 80075e0:	429f      	cmp	r7, r3
 80075e2:	d2fb      	bcs.n	80075dc <__hexnan+0xcc>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	b91b      	cbnz	r3, 80075f0 <__hexnan+0xe0>
 80075e8:	4547      	cmp	r7, r8
 80075ea:	d128      	bne.n	800763e <__hexnan+0x12e>
 80075ec:	2301      	movs	r3, #1
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	2005      	movs	r0, #5
 80075f2:	b007      	add	sp, #28
 80075f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f8:	3501      	adds	r5, #1
 80075fa:	2d08      	cmp	r5, #8
 80075fc:	f10b 0b01 	add.w	fp, fp, #1
 8007600:	dd06      	ble.n	8007610 <__hexnan+0x100>
 8007602:	4544      	cmp	r4, r8
 8007604:	d9c1      	bls.n	800758a <__hexnan+0x7a>
 8007606:	2300      	movs	r3, #0
 8007608:	f844 3c04 	str.w	r3, [r4, #-4]
 800760c:	2501      	movs	r5, #1
 800760e:	3c04      	subs	r4, #4
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	f000 000f 	and.w	r0, r0, #15
 8007616:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800761a:	6020      	str	r0, [r4, #0]
 800761c:	e7b5      	b.n	800758a <__hexnan+0x7a>
 800761e:	2508      	movs	r5, #8
 8007620:	e7b3      	b.n	800758a <__hexnan+0x7a>
 8007622:	9b01      	ldr	r3, [sp, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0dd      	beq.n	80075e4 <__hexnan+0xd4>
 8007628:	f1c3 0320 	rsb	r3, r3, #32
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	40da      	lsrs	r2, r3
 8007632:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007636:	4013      	ands	r3, r2
 8007638:	f846 3c04 	str.w	r3, [r6, #-4]
 800763c:	e7d2      	b.n	80075e4 <__hexnan+0xd4>
 800763e:	3f04      	subs	r7, #4
 8007640:	e7d0      	b.n	80075e4 <__hexnan+0xd4>
 8007642:	2004      	movs	r0, #4
 8007644:	e7d5      	b.n	80075f2 <__hexnan+0xe2>
	...

08007648 <malloc>:
 8007648:	4b02      	ldr	r3, [pc, #8]	@ (8007654 <malloc+0xc>)
 800764a:	4601      	mov	r1, r0
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	f000 b825 	b.w	800769c <_malloc_r>
 8007652:	bf00      	nop
 8007654:	20000184 	.word	0x20000184

08007658 <sbrk_aligned>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4e0f      	ldr	r6, [pc, #60]	@ (8007698 <sbrk_aligned+0x40>)
 800765c:	460c      	mov	r4, r1
 800765e:	6831      	ldr	r1, [r6, #0]
 8007660:	4605      	mov	r5, r0
 8007662:	b911      	cbnz	r1, 800766a <sbrk_aligned+0x12>
 8007664:	f000 ffe8 	bl	8008638 <_sbrk_r>
 8007668:	6030      	str	r0, [r6, #0]
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 ffe3 	bl	8008638 <_sbrk_r>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d103      	bne.n	800767e <sbrk_aligned+0x26>
 8007676:	f04f 34ff 	mov.w	r4, #4294967295
 800767a:	4620      	mov	r0, r4
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	1cc4      	adds	r4, r0, #3
 8007680:	f024 0403 	bic.w	r4, r4, #3
 8007684:	42a0      	cmp	r0, r4
 8007686:	d0f8      	beq.n	800767a <sbrk_aligned+0x22>
 8007688:	1a21      	subs	r1, r4, r0
 800768a:	4628      	mov	r0, r5
 800768c:	f000 ffd4 	bl	8008638 <_sbrk_r>
 8007690:	3001      	adds	r0, #1
 8007692:	d1f2      	bne.n	800767a <sbrk_aligned+0x22>
 8007694:	e7ef      	b.n	8007676 <sbrk_aligned+0x1e>
 8007696:	bf00      	nop
 8007698:	2000067c 	.word	0x2000067c

0800769c <_malloc_r>:
 800769c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a0:	1ccd      	adds	r5, r1, #3
 80076a2:	f025 0503 	bic.w	r5, r5, #3
 80076a6:	3508      	adds	r5, #8
 80076a8:	2d0c      	cmp	r5, #12
 80076aa:	bf38      	it	cc
 80076ac:	250c      	movcc	r5, #12
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	4606      	mov	r6, r0
 80076b2:	db01      	blt.n	80076b8 <_malloc_r+0x1c>
 80076b4:	42a9      	cmp	r1, r5
 80076b6:	d904      	bls.n	80076c2 <_malloc_r+0x26>
 80076b8:	230c      	movs	r3, #12
 80076ba:	6033      	str	r3, [r6, #0]
 80076bc:	2000      	movs	r0, #0
 80076be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007798 <_malloc_r+0xfc>
 80076c6:	f000 f87b 	bl	80077c0 <__malloc_lock>
 80076ca:	f8d8 3000 	ldr.w	r3, [r8]
 80076ce:	461c      	mov	r4, r3
 80076d0:	bb44      	cbnz	r4, 8007724 <_malloc_r+0x88>
 80076d2:	4629      	mov	r1, r5
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff ffbf 	bl	8007658 <sbrk_aligned>
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	4604      	mov	r4, r0
 80076de:	d158      	bne.n	8007792 <_malloc_r+0xf6>
 80076e0:	f8d8 4000 	ldr.w	r4, [r8]
 80076e4:	4627      	mov	r7, r4
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	d143      	bne.n	8007772 <_malloc_r+0xd6>
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	d04b      	beq.n	8007786 <_malloc_r+0xea>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	4639      	mov	r1, r7
 80076f2:	4630      	mov	r0, r6
 80076f4:	eb04 0903 	add.w	r9, r4, r3
 80076f8:	f000 ff9e 	bl	8008638 <_sbrk_r>
 80076fc:	4581      	cmp	r9, r0
 80076fe:	d142      	bne.n	8007786 <_malloc_r+0xea>
 8007700:	6821      	ldr	r1, [r4, #0]
 8007702:	1a6d      	subs	r5, r5, r1
 8007704:	4629      	mov	r1, r5
 8007706:	4630      	mov	r0, r6
 8007708:	f7ff ffa6 	bl	8007658 <sbrk_aligned>
 800770c:	3001      	adds	r0, #1
 800770e:	d03a      	beq.n	8007786 <_malloc_r+0xea>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	442b      	add	r3, r5
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	f8d8 3000 	ldr.w	r3, [r8]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	bb62      	cbnz	r2, 8007778 <_malloc_r+0xdc>
 800771e:	f8c8 7000 	str.w	r7, [r8]
 8007722:	e00f      	b.n	8007744 <_malloc_r+0xa8>
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	1b52      	subs	r2, r2, r5
 8007728:	d420      	bmi.n	800776c <_malloc_r+0xd0>
 800772a:	2a0b      	cmp	r2, #11
 800772c:	d917      	bls.n	800775e <_malloc_r+0xc2>
 800772e:	1961      	adds	r1, r4, r5
 8007730:	42a3      	cmp	r3, r4
 8007732:	6025      	str	r5, [r4, #0]
 8007734:	bf18      	it	ne
 8007736:	6059      	strne	r1, [r3, #4]
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	bf08      	it	eq
 800773c:	f8c8 1000 	streq.w	r1, [r8]
 8007740:	5162      	str	r2, [r4, r5]
 8007742:	604b      	str	r3, [r1, #4]
 8007744:	4630      	mov	r0, r6
 8007746:	f000 f841 	bl	80077cc <__malloc_unlock>
 800774a:	f104 000b 	add.w	r0, r4, #11
 800774e:	1d23      	adds	r3, r4, #4
 8007750:	f020 0007 	bic.w	r0, r0, #7
 8007754:	1ac2      	subs	r2, r0, r3
 8007756:	bf1c      	itt	ne
 8007758:	1a1b      	subne	r3, r3, r0
 800775a:	50a3      	strne	r3, [r4, r2]
 800775c:	e7af      	b.n	80076be <_malloc_r+0x22>
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	42a3      	cmp	r3, r4
 8007762:	bf0c      	ite	eq
 8007764:	f8c8 2000 	streq.w	r2, [r8]
 8007768:	605a      	strne	r2, [r3, #4]
 800776a:	e7eb      	b.n	8007744 <_malloc_r+0xa8>
 800776c:	4623      	mov	r3, r4
 800776e:	6864      	ldr	r4, [r4, #4]
 8007770:	e7ae      	b.n	80076d0 <_malloc_r+0x34>
 8007772:	463c      	mov	r4, r7
 8007774:	687f      	ldr	r7, [r7, #4]
 8007776:	e7b6      	b.n	80076e6 <_malloc_r+0x4a>
 8007778:	461a      	mov	r2, r3
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	42a3      	cmp	r3, r4
 800777e:	d1fb      	bne.n	8007778 <_malloc_r+0xdc>
 8007780:	2300      	movs	r3, #0
 8007782:	6053      	str	r3, [r2, #4]
 8007784:	e7de      	b.n	8007744 <_malloc_r+0xa8>
 8007786:	230c      	movs	r3, #12
 8007788:	6033      	str	r3, [r6, #0]
 800778a:	4630      	mov	r0, r6
 800778c:	f000 f81e 	bl	80077cc <__malloc_unlock>
 8007790:	e794      	b.n	80076bc <_malloc_r+0x20>
 8007792:	6005      	str	r5, [r0, #0]
 8007794:	e7d6      	b.n	8007744 <_malloc_r+0xa8>
 8007796:	bf00      	nop
 8007798:	20000680 	.word	0x20000680

0800779c <__ascii_mbtowc>:
 800779c:	b082      	sub	sp, #8
 800779e:	b901      	cbnz	r1, 80077a2 <__ascii_mbtowc+0x6>
 80077a0:	a901      	add	r1, sp, #4
 80077a2:	b142      	cbz	r2, 80077b6 <__ascii_mbtowc+0x1a>
 80077a4:	b14b      	cbz	r3, 80077ba <__ascii_mbtowc+0x1e>
 80077a6:	7813      	ldrb	r3, [r2, #0]
 80077a8:	600b      	str	r3, [r1, #0]
 80077aa:	7812      	ldrb	r2, [r2, #0]
 80077ac:	1e10      	subs	r0, r2, #0
 80077ae:	bf18      	it	ne
 80077b0:	2001      	movne	r0, #1
 80077b2:	b002      	add	sp, #8
 80077b4:	4770      	bx	lr
 80077b6:	4610      	mov	r0, r2
 80077b8:	e7fb      	b.n	80077b2 <__ascii_mbtowc+0x16>
 80077ba:	f06f 0001 	mvn.w	r0, #1
 80077be:	e7f8      	b.n	80077b2 <__ascii_mbtowc+0x16>

080077c0 <__malloc_lock>:
 80077c0:	4801      	ldr	r0, [pc, #4]	@ (80077c8 <__malloc_lock+0x8>)
 80077c2:	f7fe bd56 	b.w	8006272 <__retarget_lock_acquire_recursive>
 80077c6:	bf00      	nop
 80077c8:	20000678 	.word	0x20000678

080077cc <__malloc_unlock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	@ (80077d4 <__malloc_unlock+0x8>)
 80077ce:	f7fe bd51 	b.w	8006274 <__retarget_lock_release_recursive>
 80077d2:	bf00      	nop
 80077d4:	20000678 	.word	0x20000678

080077d8 <_Balloc>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	69c6      	ldr	r6, [r0, #28]
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	b976      	cbnz	r6, 8007800 <_Balloc+0x28>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f7ff ff30 	bl	8007648 <malloc>
 80077e8:	4602      	mov	r2, r0
 80077ea:	61e0      	str	r0, [r4, #28]
 80077ec:	b920      	cbnz	r0, 80077f8 <_Balloc+0x20>
 80077ee:	4b18      	ldr	r3, [pc, #96]	@ (8007850 <_Balloc+0x78>)
 80077f0:	4818      	ldr	r0, [pc, #96]	@ (8007854 <_Balloc+0x7c>)
 80077f2:	216b      	movs	r1, #107	@ 0x6b
 80077f4:	f000 ff30 	bl	8008658 <__assert_func>
 80077f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077fc:	6006      	str	r6, [r0, #0]
 80077fe:	60c6      	str	r6, [r0, #12]
 8007800:	69e6      	ldr	r6, [r4, #28]
 8007802:	68f3      	ldr	r3, [r6, #12]
 8007804:	b183      	cbz	r3, 8007828 <_Balloc+0x50>
 8007806:	69e3      	ldr	r3, [r4, #28]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800780e:	b9b8      	cbnz	r0, 8007840 <_Balloc+0x68>
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f605 	lsl.w	r6, r1, r5
 8007816:	1d72      	adds	r2, r6, #5
 8007818:	0092      	lsls	r2, r2, #2
 800781a:	4620      	mov	r0, r4
 800781c:	f000 ff3a 	bl	8008694 <_calloc_r>
 8007820:	b160      	cbz	r0, 800783c <_Balloc+0x64>
 8007822:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007826:	e00e      	b.n	8007846 <_Balloc+0x6e>
 8007828:	2221      	movs	r2, #33	@ 0x21
 800782a:	2104      	movs	r1, #4
 800782c:	4620      	mov	r0, r4
 800782e:	f000 ff31 	bl	8008694 <_calloc_r>
 8007832:	69e3      	ldr	r3, [r4, #28]
 8007834:	60f0      	str	r0, [r6, #12]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e4      	bne.n	8007806 <_Balloc+0x2e>
 800783c:	2000      	movs	r0, #0
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007846:	2300      	movs	r3, #0
 8007848:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800784c:	e7f7      	b.n	800783e <_Balloc+0x66>
 800784e:	bf00      	nop
 8007850:	08008e0a 	.word	0x08008e0a
 8007854:	08008eea 	.word	0x08008eea

08007858 <_Bfree>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	69c6      	ldr	r6, [r0, #28]
 800785c:	4605      	mov	r5, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b976      	cbnz	r6, 8007880 <_Bfree+0x28>
 8007862:	2010      	movs	r0, #16
 8007864:	f7ff fef0 	bl	8007648 <malloc>
 8007868:	4602      	mov	r2, r0
 800786a:	61e8      	str	r0, [r5, #28]
 800786c:	b920      	cbnz	r0, 8007878 <_Bfree+0x20>
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <_Bfree+0x3c>)
 8007870:	4809      	ldr	r0, [pc, #36]	@ (8007898 <_Bfree+0x40>)
 8007872:	218f      	movs	r1, #143	@ 0x8f
 8007874:	f000 fef0 	bl	8008658 <__assert_func>
 8007878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800787c:	6006      	str	r6, [r0, #0]
 800787e:	60c6      	str	r6, [r0, #12]
 8007880:	b13c      	cbz	r4, 8007892 <_Bfree+0x3a>
 8007882:	69eb      	ldr	r3, [r5, #28]
 8007884:	6862      	ldr	r2, [r4, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800788c:	6021      	str	r1, [r4, #0]
 800788e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	08008e0a 	.word	0x08008e0a
 8007898:	08008eea 	.word	0x08008eea

0800789c <__multadd>:
 800789c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a0:	690d      	ldr	r5, [r1, #16]
 80078a2:	4607      	mov	r7, r0
 80078a4:	460c      	mov	r4, r1
 80078a6:	461e      	mov	r6, r3
 80078a8:	f101 0c14 	add.w	ip, r1, #20
 80078ac:	2000      	movs	r0, #0
 80078ae:	f8dc 3000 	ldr.w	r3, [ip]
 80078b2:	b299      	uxth	r1, r3
 80078b4:	fb02 6101 	mla	r1, r2, r1, r6
 80078b8:	0c1e      	lsrs	r6, r3, #16
 80078ba:	0c0b      	lsrs	r3, r1, #16
 80078bc:	fb02 3306 	mla	r3, r2, r6, r3
 80078c0:	b289      	uxth	r1, r1
 80078c2:	3001      	adds	r0, #1
 80078c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078c8:	4285      	cmp	r5, r0
 80078ca:	f84c 1b04 	str.w	r1, [ip], #4
 80078ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078d2:	dcec      	bgt.n	80078ae <__multadd+0x12>
 80078d4:	b30e      	cbz	r6, 800791a <__multadd+0x7e>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc19      	bgt.n	8007910 <__multadd+0x74>
 80078dc:	6861      	ldr	r1, [r4, #4]
 80078de:	4638      	mov	r0, r7
 80078e0:	3101      	adds	r1, #1
 80078e2:	f7ff ff79 	bl	80077d8 <_Balloc>
 80078e6:	4680      	mov	r8, r0
 80078e8:	b928      	cbnz	r0, 80078f6 <__multadd+0x5a>
 80078ea:	4602      	mov	r2, r0
 80078ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007920 <__multadd+0x84>)
 80078ee:	480d      	ldr	r0, [pc, #52]	@ (8007924 <__multadd+0x88>)
 80078f0:	21ba      	movs	r1, #186	@ 0xba
 80078f2:	f000 feb1 	bl	8008658 <__assert_func>
 80078f6:	6922      	ldr	r2, [r4, #16]
 80078f8:	3202      	adds	r2, #2
 80078fa:	f104 010c 	add.w	r1, r4, #12
 80078fe:	0092      	lsls	r2, r2, #2
 8007900:	300c      	adds	r0, #12
 8007902:	f7fe fcb8 	bl	8006276 <memcpy>
 8007906:	4621      	mov	r1, r4
 8007908:	4638      	mov	r0, r7
 800790a:	f7ff ffa5 	bl	8007858 <_Bfree>
 800790e:	4644      	mov	r4, r8
 8007910:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007914:	3501      	adds	r5, #1
 8007916:	615e      	str	r6, [r3, #20]
 8007918:	6125      	str	r5, [r4, #16]
 800791a:	4620      	mov	r0, r4
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	08008e79 	.word	0x08008e79
 8007924:	08008eea 	.word	0x08008eea

08007928 <__s2b>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	460c      	mov	r4, r1
 800792e:	4615      	mov	r5, r2
 8007930:	461f      	mov	r7, r3
 8007932:	2209      	movs	r2, #9
 8007934:	3308      	adds	r3, #8
 8007936:	4606      	mov	r6, r0
 8007938:	fb93 f3f2 	sdiv	r3, r3, r2
 800793c:	2100      	movs	r1, #0
 800793e:	2201      	movs	r2, #1
 8007940:	429a      	cmp	r2, r3
 8007942:	db09      	blt.n	8007958 <__s2b+0x30>
 8007944:	4630      	mov	r0, r6
 8007946:	f7ff ff47 	bl	80077d8 <_Balloc>
 800794a:	b940      	cbnz	r0, 800795e <__s2b+0x36>
 800794c:	4602      	mov	r2, r0
 800794e:	4b19      	ldr	r3, [pc, #100]	@ (80079b4 <__s2b+0x8c>)
 8007950:	4819      	ldr	r0, [pc, #100]	@ (80079b8 <__s2b+0x90>)
 8007952:	21d3      	movs	r1, #211	@ 0xd3
 8007954:	f000 fe80 	bl	8008658 <__assert_func>
 8007958:	0052      	lsls	r2, r2, #1
 800795a:	3101      	adds	r1, #1
 800795c:	e7f0      	b.n	8007940 <__s2b+0x18>
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	6143      	str	r3, [r0, #20]
 8007962:	2d09      	cmp	r5, #9
 8007964:	f04f 0301 	mov.w	r3, #1
 8007968:	6103      	str	r3, [r0, #16]
 800796a:	dd16      	ble.n	800799a <__s2b+0x72>
 800796c:	f104 0909 	add.w	r9, r4, #9
 8007970:	46c8      	mov	r8, r9
 8007972:	442c      	add	r4, r5
 8007974:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007978:	4601      	mov	r1, r0
 800797a:	3b30      	subs	r3, #48	@ 0x30
 800797c:	220a      	movs	r2, #10
 800797e:	4630      	mov	r0, r6
 8007980:	f7ff ff8c 	bl	800789c <__multadd>
 8007984:	45a0      	cmp	r8, r4
 8007986:	d1f5      	bne.n	8007974 <__s2b+0x4c>
 8007988:	f1a5 0408 	sub.w	r4, r5, #8
 800798c:	444c      	add	r4, r9
 800798e:	1b2d      	subs	r5, r5, r4
 8007990:	1963      	adds	r3, r4, r5
 8007992:	42bb      	cmp	r3, r7
 8007994:	db04      	blt.n	80079a0 <__s2b+0x78>
 8007996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799a:	340a      	adds	r4, #10
 800799c:	2509      	movs	r5, #9
 800799e:	e7f6      	b.n	800798e <__s2b+0x66>
 80079a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079a4:	4601      	mov	r1, r0
 80079a6:	3b30      	subs	r3, #48	@ 0x30
 80079a8:	220a      	movs	r2, #10
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7ff ff76 	bl	800789c <__multadd>
 80079b0:	e7ee      	b.n	8007990 <__s2b+0x68>
 80079b2:	bf00      	nop
 80079b4:	08008e79 	.word	0x08008e79
 80079b8:	08008eea 	.word	0x08008eea

080079bc <__hi0bits>:
 80079bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079c0:	4603      	mov	r3, r0
 80079c2:	bf36      	itet	cc
 80079c4:	0403      	lslcc	r3, r0, #16
 80079c6:	2000      	movcs	r0, #0
 80079c8:	2010      	movcc	r0, #16
 80079ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079ce:	bf3c      	itt	cc
 80079d0:	021b      	lslcc	r3, r3, #8
 80079d2:	3008      	addcc	r0, #8
 80079d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079d8:	bf3c      	itt	cc
 80079da:	011b      	lslcc	r3, r3, #4
 80079dc:	3004      	addcc	r0, #4
 80079de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079e2:	bf3c      	itt	cc
 80079e4:	009b      	lslcc	r3, r3, #2
 80079e6:	3002      	addcc	r0, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db05      	blt.n	80079f8 <__hi0bits+0x3c>
 80079ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079f0:	f100 0001 	add.w	r0, r0, #1
 80079f4:	bf08      	it	eq
 80079f6:	2020      	moveq	r0, #32
 80079f8:	4770      	bx	lr

080079fa <__lo0bits>:
 80079fa:	6803      	ldr	r3, [r0, #0]
 80079fc:	4602      	mov	r2, r0
 80079fe:	f013 0007 	ands.w	r0, r3, #7
 8007a02:	d00b      	beq.n	8007a1c <__lo0bits+0x22>
 8007a04:	07d9      	lsls	r1, r3, #31
 8007a06:	d421      	bmi.n	8007a4c <__lo0bits+0x52>
 8007a08:	0798      	lsls	r0, r3, #30
 8007a0a:	bf49      	itett	mi
 8007a0c:	085b      	lsrmi	r3, r3, #1
 8007a0e:	089b      	lsrpl	r3, r3, #2
 8007a10:	2001      	movmi	r0, #1
 8007a12:	6013      	strmi	r3, [r2, #0]
 8007a14:	bf5c      	itt	pl
 8007a16:	6013      	strpl	r3, [r2, #0]
 8007a18:	2002      	movpl	r0, #2
 8007a1a:	4770      	bx	lr
 8007a1c:	b299      	uxth	r1, r3
 8007a1e:	b909      	cbnz	r1, 8007a24 <__lo0bits+0x2a>
 8007a20:	0c1b      	lsrs	r3, r3, #16
 8007a22:	2010      	movs	r0, #16
 8007a24:	b2d9      	uxtb	r1, r3
 8007a26:	b909      	cbnz	r1, 8007a2c <__lo0bits+0x32>
 8007a28:	3008      	adds	r0, #8
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	0719      	lsls	r1, r3, #28
 8007a2e:	bf04      	itt	eq
 8007a30:	091b      	lsreq	r3, r3, #4
 8007a32:	3004      	addeq	r0, #4
 8007a34:	0799      	lsls	r1, r3, #30
 8007a36:	bf04      	itt	eq
 8007a38:	089b      	lsreq	r3, r3, #2
 8007a3a:	3002      	addeq	r0, #2
 8007a3c:	07d9      	lsls	r1, r3, #31
 8007a3e:	d403      	bmi.n	8007a48 <__lo0bits+0x4e>
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	f100 0001 	add.w	r0, r0, #1
 8007a46:	d003      	beq.n	8007a50 <__lo0bits+0x56>
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	4770      	bx	lr
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	4770      	bx	lr
 8007a50:	2020      	movs	r0, #32
 8007a52:	4770      	bx	lr

08007a54 <__i2b>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	460c      	mov	r4, r1
 8007a58:	2101      	movs	r1, #1
 8007a5a:	f7ff febd 	bl	80077d8 <_Balloc>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	b928      	cbnz	r0, 8007a6e <__i2b+0x1a>
 8007a62:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <__i2b+0x24>)
 8007a64:	4805      	ldr	r0, [pc, #20]	@ (8007a7c <__i2b+0x28>)
 8007a66:	f240 1145 	movw	r1, #325	@ 0x145
 8007a6a:	f000 fdf5 	bl	8008658 <__assert_func>
 8007a6e:	2301      	movs	r3, #1
 8007a70:	6144      	str	r4, [r0, #20]
 8007a72:	6103      	str	r3, [r0, #16]
 8007a74:	bd10      	pop	{r4, pc}
 8007a76:	bf00      	nop
 8007a78:	08008e79 	.word	0x08008e79
 8007a7c:	08008eea 	.word	0x08008eea

08007a80 <__multiply>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	4614      	mov	r4, r2
 8007a86:	690a      	ldr	r2, [r1, #16]
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	bfa8      	it	ge
 8007a8e:	4623      	movge	r3, r4
 8007a90:	460f      	mov	r7, r1
 8007a92:	bfa4      	itt	ge
 8007a94:	460c      	movge	r4, r1
 8007a96:	461f      	movge	r7, r3
 8007a98:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a9c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007aa0:	68a3      	ldr	r3, [r4, #8]
 8007aa2:	6861      	ldr	r1, [r4, #4]
 8007aa4:	eb0a 0609 	add.w	r6, sl, r9
 8007aa8:	42b3      	cmp	r3, r6
 8007aaa:	b085      	sub	sp, #20
 8007aac:	bfb8      	it	lt
 8007aae:	3101      	addlt	r1, #1
 8007ab0:	f7ff fe92 	bl	80077d8 <_Balloc>
 8007ab4:	b930      	cbnz	r0, 8007ac4 <__multiply+0x44>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	4b44      	ldr	r3, [pc, #272]	@ (8007bcc <__multiply+0x14c>)
 8007aba:	4845      	ldr	r0, [pc, #276]	@ (8007bd0 <__multiply+0x150>)
 8007abc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ac0:	f000 fdca 	bl	8008658 <__assert_func>
 8007ac4:	f100 0514 	add.w	r5, r0, #20
 8007ac8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007acc:	462b      	mov	r3, r5
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4543      	cmp	r3, r8
 8007ad2:	d321      	bcc.n	8007b18 <__multiply+0x98>
 8007ad4:	f107 0114 	add.w	r1, r7, #20
 8007ad8:	f104 0214 	add.w	r2, r4, #20
 8007adc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ae0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ae4:	9302      	str	r3, [sp, #8]
 8007ae6:	1b13      	subs	r3, r2, r4
 8007ae8:	3b15      	subs	r3, #21
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	3304      	adds	r3, #4
 8007af0:	f104 0715 	add.w	r7, r4, #21
 8007af4:	42ba      	cmp	r2, r7
 8007af6:	bf38      	it	cc
 8007af8:	2304      	movcc	r3, #4
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	9103      	str	r1, [sp, #12]
 8007b00:	428b      	cmp	r3, r1
 8007b02:	d80c      	bhi.n	8007b1e <__multiply+0x9e>
 8007b04:	2e00      	cmp	r6, #0
 8007b06:	dd03      	ble.n	8007b10 <__multiply+0x90>
 8007b08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d05b      	beq.n	8007bc8 <__multiply+0x148>
 8007b10:	6106      	str	r6, [r0, #16]
 8007b12:	b005      	add	sp, #20
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b18:	f843 2b04 	str.w	r2, [r3], #4
 8007b1c:	e7d8      	b.n	8007ad0 <__multiply+0x50>
 8007b1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b22:	f1ba 0f00 	cmp.w	sl, #0
 8007b26:	d024      	beq.n	8007b72 <__multiply+0xf2>
 8007b28:	f104 0e14 	add.w	lr, r4, #20
 8007b2c:	46a9      	mov	r9, r5
 8007b2e:	f04f 0c00 	mov.w	ip, #0
 8007b32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b36:	f8d9 3000 	ldr.w	r3, [r9]
 8007b3a:	fa1f fb87 	uxth.w	fp, r7
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b44:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b48:	f8d9 7000 	ldr.w	r7, [r9]
 8007b4c:	4463      	add	r3, ip
 8007b4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b52:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b60:	4572      	cmp	r2, lr
 8007b62:	f849 3b04 	str.w	r3, [r9], #4
 8007b66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b6a:	d8e2      	bhi.n	8007b32 <__multiply+0xb2>
 8007b6c:	9b01      	ldr	r3, [sp, #4]
 8007b6e:	f845 c003 	str.w	ip, [r5, r3]
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b78:	3104      	adds	r1, #4
 8007b7a:	f1b9 0f00 	cmp.w	r9, #0
 8007b7e:	d021      	beq.n	8007bc4 <__multiply+0x144>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	f104 0c14 	add.w	ip, r4, #20
 8007b86:	46ae      	mov	lr, r5
 8007b88:	f04f 0a00 	mov.w	sl, #0
 8007b8c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b94:	fb09 770b 	mla	r7, r9, fp, r7
 8007b98:	4457      	add	r7, sl
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ba0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ba4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ba8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bac:	f8be 3000 	ldrh.w	r3, [lr]
 8007bb0:	fb09 330a 	mla	r3, r9, sl, r3
 8007bb4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007bb8:	4562      	cmp	r2, ip
 8007bba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bbe:	d8e5      	bhi.n	8007b8c <__multiply+0x10c>
 8007bc0:	9f01      	ldr	r7, [sp, #4]
 8007bc2:	51eb      	str	r3, [r5, r7]
 8007bc4:	3504      	adds	r5, #4
 8007bc6:	e799      	b.n	8007afc <__multiply+0x7c>
 8007bc8:	3e01      	subs	r6, #1
 8007bca:	e79b      	b.n	8007b04 <__multiply+0x84>
 8007bcc:	08008e79 	.word	0x08008e79
 8007bd0:	08008eea 	.word	0x08008eea

08007bd4 <__pow5mult>:
 8007bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd8:	4615      	mov	r5, r2
 8007bda:	f012 0203 	ands.w	r2, r2, #3
 8007bde:	4607      	mov	r7, r0
 8007be0:	460e      	mov	r6, r1
 8007be2:	d007      	beq.n	8007bf4 <__pow5mult+0x20>
 8007be4:	4c25      	ldr	r4, [pc, #148]	@ (8007c7c <__pow5mult+0xa8>)
 8007be6:	3a01      	subs	r2, #1
 8007be8:	2300      	movs	r3, #0
 8007bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bee:	f7ff fe55 	bl	800789c <__multadd>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	10ad      	asrs	r5, r5, #2
 8007bf6:	d03d      	beq.n	8007c74 <__pow5mult+0xa0>
 8007bf8:	69fc      	ldr	r4, [r7, #28]
 8007bfa:	b97c      	cbnz	r4, 8007c1c <__pow5mult+0x48>
 8007bfc:	2010      	movs	r0, #16
 8007bfe:	f7ff fd23 	bl	8007648 <malloc>
 8007c02:	4602      	mov	r2, r0
 8007c04:	61f8      	str	r0, [r7, #28]
 8007c06:	b928      	cbnz	r0, 8007c14 <__pow5mult+0x40>
 8007c08:	4b1d      	ldr	r3, [pc, #116]	@ (8007c80 <__pow5mult+0xac>)
 8007c0a:	481e      	ldr	r0, [pc, #120]	@ (8007c84 <__pow5mult+0xb0>)
 8007c0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c10:	f000 fd22 	bl	8008658 <__assert_func>
 8007c14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c18:	6004      	str	r4, [r0, #0]
 8007c1a:	60c4      	str	r4, [r0, #12]
 8007c1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c24:	b94c      	cbnz	r4, 8007c3a <__pow5mult+0x66>
 8007c26:	f240 2171 	movw	r1, #625	@ 0x271
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f7ff ff12 	bl	8007a54 <__i2b>
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c36:	4604      	mov	r4, r0
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	f04f 0900 	mov.w	r9, #0
 8007c3e:	07eb      	lsls	r3, r5, #31
 8007c40:	d50a      	bpl.n	8007c58 <__pow5mult+0x84>
 8007c42:	4631      	mov	r1, r6
 8007c44:	4622      	mov	r2, r4
 8007c46:	4638      	mov	r0, r7
 8007c48:	f7ff ff1a 	bl	8007a80 <__multiply>
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4680      	mov	r8, r0
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff fe01 	bl	8007858 <_Bfree>
 8007c56:	4646      	mov	r6, r8
 8007c58:	106d      	asrs	r5, r5, #1
 8007c5a:	d00b      	beq.n	8007c74 <__pow5mult+0xa0>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	b938      	cbnz	r0, 8007c70 <__pow5mult+0x9c>
 8007c60:	4622      	mov	r2, r4
 8007c62:	4621      	mov	r1, r4
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff ff0b 	bl	8007a80 <__multiply>
 8007c6a:	6020      	str	r0, [r4, #0]
 8007c6c:	f8c0 9000 	str.w	r9, [r0]
 8007c70:	4604      	mov	r4, r0
 8007c72:	e7e4      	b.n	8007c3e <__pow5mult+0x6a>
 8007c74:	4630      	mov	r0, r6
 8007c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7a:	bf00      	nop
 8007c7c:	08008f44 	.word	0x08008f44
 8007c80:	08008e0a 	.word	0x08008e0a
 8007c84:	08008eea 	.word	0x08008eea

08007c88 <__lshift>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	6849      	ldr	r1, [r1, #4]
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	4607      	mov	r7, r0
 8007c9a:	4691      	mov	r9, r2
 8007c9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ca0:	f108 0601 	add.w	r6, r8, #1
 8007ca4:	42b3      	cmp	r3, r6
 8007ca6:	db0b      	blt.n	8007cc0 <__lshift+0x38>
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff fd95 	bl	80077d8 <_Balloc>
 8007cae:	4605      	mov	r5, r0
 8007cb0:	b948      	cbnz	r0, 8007cc6 <__lshift+0x3e>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	4b28      	ldr	r3, [pc, #160]	@ (8007d58 <__lshift+0xd0>)
 8007cb6:	4829      	ldr	r0, [pc, #164]	@ (8007d5c <__lshift+0xd4>)
 8007cb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007cbc:	f000 fccc 	bl	8008658 <__assert_func>
 8007cc0:	3101      	adds	r1, #1
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	e7ee      	b.n	8007ca4 <__lshift+0x1c>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f100 0114 	add.w	r1, r0, #20
 8007ccc:	f100 0210 	add.w	r2, r0, #16
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	4553      	cmp	r3, sl
 8007cd4:	db33      	blt.n	8007d3e <__lshift+0xb6>
 8007cd6:	6920      	ldr	r0, [r4, #16]
 8007cd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cdc:	f104 0314 	add.w	r3, r4, #20
 8007ce0:	f019 091f 	ands.w	r9, r9, #31
 8007ce4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ce8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cec:	d02b      	beq.n	8007d46 <__lshift+0xbe>
 8007cee:	f1c9 0e20 	rsb	lr, r9, #32
 8007cf2:	468a      	mov	sl, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	fa00 f009 	lsl.w	r0, r0, r9
 8007cfc:	4310      	orrs	r0, r2
 8007cfe:	f84a 0b04 	str.w	r0, [sl], #4
 8007d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d06:	459c      	cmp	ip, r3
 8007d08:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d0c:	d8f3      	bhi.n	8007cf6 <__lshift+0x6e>
 8007d0e:	ebac 0304 	sub.w	r3, ip, r4
 8007d12:	3b15      	subs	r3, #21
 8007d14:	f023 0303 	bic.w	r3, r3, #3
 8007d18:	3304      	adds	r3, #4
 8007d1a:	f104 0015 	add.w	r0, r4, #21
 8007d1e:	4584      	cmp	ip, r0
 8007d20:	bf38      	it	cc
 8007d22:	2304      	movcc	r3, #4
 8007d24:	50ca      	str	r2, [r1, r3]
 8007d26:	b10a      	cbz	r2, 8007d2c <__lshift+0xa4>
 8007d28:	f108 0602 	add.w	r6, r8, #2
 8007d2c:	3e01      	subs	r6, #1
 8007d2e:	4638      	mov	r0, r7
 8007d30:	612e      	str	r6, [r5, #16]
 8007d32:	4621      	mov	r1, r4
 8007d34:	f7ff fd90 	bl	8007858 <_Bfree>
 8007d38:	4628      	mov	r0, r5
 8007d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d42:	3301      	adds	r3, #1
 8007d44:	e7c5      	b.n	8007cd2 <__lshift+0x4a>
 8007d46:	3904      	subs	r1, #4
 8007d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d50:	459c      	cmp	ip, r3
 8007d52:	d8f9      	bhi.n	8007d48 <__lshift+0xc0>
 8007d54:	e7ea      	b.n	8007d2c <__lshift+0xa4>
 8007d56:	bf00      	nop
 8007d58:	08008e79 	.word	0x08008e79
 8007d5c:	08008eea 	.word	0x08008eea

08007d60 <__mcmp>:
 8007d60:	690a      	ldr	r2, [r1, #16]
 8007d62:	4603      	mov	r3, r0
 8007d64:	6900      	ldr	r0, [r0, #16]
 8007d66:	1a80      	subs	r0, r0, r2
 8007d68:	b530      	push	{r4, r5, lr}
 8007d6a:	d10e      	bne.n	8007d8a <__mcmp+0x2a>
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	3114      	adds	r1, #20
 8007d70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d80:	4295      	cmp	r5, r2
 8007d82:	d003      	beq.n	8007d8c <__mcmp+0x2c>
 8007d84:	d205      	bcs.n	8007d92 <__mcmp+0x32>
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8a:	bd30      	pop	{r4, r5, pc}
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d3f3      	bcc.n	8007d78 <__mcmp+0x18>
 8007d90:	e7fb      	b.n	8007d8a <__mcmp+0x2a>
 8007d92:	2001      	movs	r0, #1
 8007d94:	e7f9      	b.n	8007d8a <__mcmp+0x2a>
	...

08007d98 <__mdiff>:
 8007d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	4606      	mov	r6, r0
 8007da0:	4611      	mov	r1, r2
 8007da2:	4648      	mov	r0, r9
 8007da4:	4614      	mov	r4, r2
 8007da6:	f7ff ffdb 	bl	8007d60 <__mcmp>
 8007daa:	1e05      	subs	r5, r0, #0
 8007dac:	d112      	bne.n	8007dd4 <__mdiff+0x3c>
 8007dae:	4629      	mov	r1, r5
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff fd11 	bl	80077d8 <_Balloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	b928      	cbnz	r0, 8007dc6 <__mdiff+0x2e>
 8007dba:	4b3f      	ldr	r3, [pc, #252]	@ (8007eb8 <__mdiff+0x120>)
 8007dbc:	f240 2137 	movw	r1, #567	@ 0x237
 8007dc0:	483e      	ldr	r0, [pc, #248]	@ (8007ebc <__mdiff+0x124>)
 8007dc2:	f000 fc49 	bl	8008658 <__assert_func>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dcc:	4610      	mov	r0, r2
 8007dce:	b003      	add	sp, #12
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	bfbc      	itt	lt
 8007dd6:	464b      	movlt	r3, r9
 8007dd8:	46a1      	movlt	r9, r4
 8007dda:	4630      	mov	r0, r6
 8007ddc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007de0:	bfba      	itte	lt
 8007de2:	461c      	movlt	r4, r3
 8007de4:	2501      	movlt	r5, #1
 8007de6:	2500      	movge	r5, #0
 8007de8:	f7ff fcf6 	bl	80077d8 <_Balloc>
 8007dec:	4602      	mov	r2, r0
 8007dee:	b918      	cbnz	r0, 8007df8 <__mdiff+0x60>
 8007df0:	4b31      	ldr	r3, [pc, #196]	@ (8007eb8 <__mdiff+0x120>)
 8007df2:	f240 2145 	movw	r1, #581	@ 0x245
 8007df6:	e7e3      	b.n	8007dc0 <__mdiff+0x28>
 8007df8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007dfc:	6926      	ldr	r6, [r4, #16]
 8007dfe:	60c5      	str	r5, [r0, #12]
 8007e00:	f109 0310 	add.w	r3, r9, #16
 8007e04:	f109 0514 	add.w	r5, r9, #20
 8007e08:	f104 0e14 	add.w	lr, r4, #20
 8007e0c:	f100 0b14 	add.w	fp, r0, #20
 8007e10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	46d9      	mov	r9, fp
 8007e1c:	f04f 0c00 	mov.w	ip, #0
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	fa1f f38a 	uxth.w	r3, sl
 8007e30:	4619      	mov	r1, r3
 8007e32:	b283      	uxth	r3, r0
 8007e34:	1acb      	subs	r3, r1, r3
 8007e36:	0c00      	lsrs	r0, r0, #16
 8007e38:	4463      	add	r3, ip
 8007e3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e48:	4576      	cmp	r6, lr
 8007e4a:	f849 3b04 	str.w	r3, [r9], #4
 8007e4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e52:	d8e5      	bhi.n	8007e20 <__mdiff+0x88>
 8007e54:	1b33      	subs	r3, r6, r4
 8007e56:	3b15      	subs	r3, #21
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	3415      	adds	r4, #21
 8007e5e:	3304      	adds	r3, #4
 8007e60:	42a6      	cmp	r6, r4
 8007e62:	bf38      	it	cc
 8007e64:	2304      	movcc	r3, #4
 8007e66:	441d      	add	r5, r3
 8007e68:	445b      	add	r3, fp
 8007e6a:	461e      	mov	r6, r3
 8007e6c:	462c      	mov	r4, r5
 8007e6e:	4544      	cmp	r4, r8
 8007e70:	d30e      	bcc.n	8007e90 <__mdiff+0xf8>
 8007e72:	f108 0103 	add.w	r1, r8, #3
 8007e76:	1b49      	subs	r1, r1, r5
 8007e78:	f021 0103 	bic.w	r1, r1, #3
 8007e7c:	3d03      	subs	r5, #3
 8007e7e:	45a8      	cmp	r8, r5
 8007e80:	bf38      	it	cc
 8007e82:	2100      	movcc	r1, #0
 8007e84:	440b      	add	r3, r1
 8007e86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e8a:	b191      	cbz	r1, 8007eb2 <__mdiff+0x11a>
 8007e8c:	6117      	str	r7, [r2, #16]
 8007e8e:	e79d      	b.n	8007dcc <__mdiff+0x34>
 8007e90:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e94:	46e6      	mov	lr, ip
 8007e96:	0c08      	lsrs	r0, r1, #16
 8007e98:	fa1c fc81 	uxtah	ip, ip, r1
 8007e9c:	4471      	add	r1, lr
 8007e9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ea2:	b289      	uxth	r1, r1
 8007ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ea8:	f846 1b04 	str.w	r1, [r6], #4
 8007eac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007eb0:	e7dd      	b.n	8007e6e <__mdiff+0xd6>
 8007eb2:	3f01      	subs	r7, #1
 8007eb4:	e7e7      	b.n	8007e86 <__mdiff+0xee>
 8007eb6:	bf00      	nop
 8007eb8:	08008e79 	.word	0x08008e79
 8007ebc:	08008eea 	.word	0x08008eea

08007ec0 <__ulp>:
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	ed8d 0b00 	vstr	d0, [sp]
 8007ec6:	9a01      	ldr	r2, [sp, #4]
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f08 <__ulp+0x48>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dc08      	bgt.n	8007ee6 <__ulp+0x26>
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007eda:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ede:	da04      	bge.n	8007eea <__ulp+0x2a>
 8007ee0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ee4:	4113      	asrs	r3, r2
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	e008      	b.n	8007efc <__ulp+0x3c>
 8007eea:	f1a2 0314 	sub.w	r3, r2, #20
 8007eee:	2b1e      	cmp	r3, #30
 8007ef0:	bfda      	itte	le
 8007ef2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007ef6:	40da      	lsrle	r2, r3
 8007ef8:	2201      	movgt	r2, #1
 8007efa:	2300      	movs	r3, #0
 8007efc:	4619      	mov	r1, r3
 8007efe:	4610      	mov	r0, r2
 8007f00:	ec41 0b10 	vmov	d0, r0, r1
 8007f04:	b002      	add	sp, #8
 8007f06:	4770      	bx	lr
 8007f08:	7ff00000 	.word	0x7ff00000

08007f0c <__b2d>:
 8007f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f10:	6906      	ldr	r6, [r0, #16]
 8007f12:	f100 0814 	add.w	r8, r0, #20
 8007f16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f1a:	1f37      	subs	r7, r6, #4
 8007f1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7ff fd4b 	bl	80079bc <__hi0bits>
 8007f26:	f1c0 0320 	rsb	r3, r0, #32
 8007f2a:	280a      	cmp	r0, #10
 8007f2c:	600b      	str	r3, [r1, #0]
 8007f2e:	491b      	ldr	r1, [pc, #108]	@ (8007f9c <__b2d+0x90>)
 8007f30:	dc15      	bgt.n	8007f5e <__b2d+0x52>
 8007f32:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f36:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f3a:	45b8      	cmp	r8, r7
 8007f3c:	ea43 0501 	orr.w	r5, r3, r1
 8007f40:	bf34      	ite	cc
 8007f42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f46:	2300      	movcs	r3, #0
 8007f48:	3015      	adds	r0, #21
 8007f4a:	fa02 f000 	lsl.w	r0, r2, r0
 8007f4e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f52:	4303      	orrs	r3, r0
 8007f54:	461c      	mov	r4, r3
 8007f56:	ec45 4b10 	vmov	d0, r4, r5
 8007f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f5e:	45b8      	cmp	r8, r7
 8007f60:	bf3a      	itte	cc
 8007f62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f66:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f6a:	2300      	movcs	r3, #0
 8007f6c:	380b      	subs	r0, #11
 8007f6e:	d012      	beq.n	8007f96 <__b2d+0x8a>
 8007f70:	f1c0 0120 	rsb	r1, r0, #32
 8007f74:	fa23 f401 	lsr.w	r4, r3, r1
 8007f78:	4082      	lsls	r2, r0
 8007f7a:	4322      	orrs	r2, r4
 8007f7c:	4547      	cmp	r7, r8
 8007f7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f82:	bf8c      	ite	hi
 8007f84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f88:	2200      	movls	r2, #0
 8007f8a:	4083      	lsls	r3, r0
 8007f8c:	40ca      	lsrs	r2, r1
 8007f8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f92:	4313      	orrs	r3, r2
 8007f94:	e7de      	b.n	8007f54 <__b2d+0x48>
 8007f96:	ea42 0501 	orr.w	r5, r2, r1
 8007f9a:	e7db      	b.n	8007f54 <__b2d+0x48>
 8007f9c:	3ff00000 	.word	0x3ff00000

08007fa0 <__d2b>:
 8007fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	ec59 8b10 	vmov	r8, r9, d0
 8007fac:	4616      	mov	r6, r2
 8007fae:	f7ff fc13 	bl	80077d8 <_Balloc>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	b930      	cbnz	r0, 8007fc4 <__d2b+0x24>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	4b23      	ldr	r3, [pc, #140]	@ (8008048 <__d2b+0xa8>)
 8007fba:	4824      	ldr	r0, [pc, #144]	@ (800804c <__d2b+0xac>)
 8007fbc:	f240 310f 	movw	r1, #783	@ 0x30f
 8007fc0:	f000 fb4a 	bl	8008658 <__assert_func>
 8007fc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fcc:	b10d      	cbz	r5, 8007fd2 <__d2b+0x32>
 8007fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	f1b8 0300 	subs.w	r3, r8, #0
 8007fd8:	d023      	beq.n	8008022 <__d2b+0x82>
 8007fda:	4668      	mov	r0, sp
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	f7ff fd0c 	bl	80079fa <__lo0bits>
 8007fe2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fe6:	b1d0      	cbz	r0, 800801e <__d2b+0x7e>
 8007fe8:	f1c0 0320 	rsb	r3, r0, #32
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	40c2      	lsrs	r2, r0
 8007ff4:	6163      	str	r3, [r4, #20]
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	61a3      	str	r3, [r4, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	bf0c      	ite	eq
 8008000:	2201      	moveq	r2, #1
 8008002:	2202      	movne	r2, #2
 8008004:	6122      	str	r2, [r4, #16]
 8008006:	b1a5      	cbz	r5, 8008032 <__d2b+0x92>
 8008008:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800800c:	4405      	add	r5, r0
 800800e:	603d      	str	r5, [r7, #0]
 8008010:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008014:	6030      	str	r0, [r6, #0]
 8008016:	4620      	mov	r0, r4
 8008018:	b003      	add	sp, #12
 800801a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800801e:	6161      	str	r1, [r4, #20]
 8008020:	e7ea      	b.n	8007ff8 <__d2b+0x58>
 8008022:	a801      	add	r0, sp, #4
 8008024:	f7ff fce9 	bl	80079fa <__lo0bits>
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	6163      	str	r3, [r4, #20]
 800802c:	3020      	adds	r0, #32
 800802e:	2201      	movs	r2, #1
 8008030:	e7e8      	b.n	8008004 <__d2b+0x64>
 8008032:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008036:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800803a:	6038      	str	r0, [r7, #0]
 800803c:	6918      	ldr	r0, [r3, #16]
 800803e:	f7ff fcbd 	bl	80079bc <__hi0bits>
 8008042:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008046:	e7e5      	b.n	8008014 <__d2b+0x74>
 8008048:	08008e79 	.word	0x08008e79
 800804c:	08008eea 	.word	0x08008eea

08008050 <__ratio>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	b085      	sub	sp, #20
 8008056:	e9cd 1000 	strd	r1, r0, [sp]
 800805a:	a902      	add	r1, sp, #8
 800805c:	f7ff ff56 	bl	8007f0c <__b2d>
 8008060:	9800      	ldr	r0, [sp, #0]
 8008062:	a903      	add	r1, sp, #12
 8008064:	ec55 4b10 	vmov	r4, r5, d0
 8008068:	f7ff ff50 	bl	8007f0c <__b2d>
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	6919      	ldr	r1, [r3, #16]
 8008070:	9b00      	ldr	r3, [sp, #0]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	1ac9      	subs	r1, r1, r3
 8008076:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	ec5b ab10 	vmov	sl, fp, d0
 8008080:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008084:	2b00      	cmp	r3, #0
 8008086:	bfce      	itee	gt
 8008088:	462a      	movgt	r2, r5
 800808a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800808e:	465a      	movle	r2, fp
 8008090:	462f      	mov	r7, r5
 8008092:	46d9      	mov	r9, fp
 8008094:	bfcc      	ite	gt
 8008096:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800809a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800809e:	464b      	mov	r3, r9
 80080a0:	4652      	mov	r2, sl
 80080a2:	4620      	mov	r0, r4
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 fbf1 	bl	800088c <__aeabi_ddiv>
 80080aa:	ec41 0b10 	vmov	d0, r0, r1
 80080ae:	b005      	add	sp, #20
 80080b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080b4 <__copybits>:
 80080b4:	3901      	subs	r1, #1
 80080b6:	b570      	push	{r4, r5, r6, lr}
 80080b8:	1149      	asrs	r1, r1, #5
 80080ba:	6914      	ldr	r4, [r2, #16]
 80080bc:	3101      	adds	r1, #1
 80080be:	f102 0314 	add.w	r3, r2, #20
 80080c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080ca:	1f05      	subs	r5, r0, #4
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d30c      	bcc.n	80080ea <__copybits+0x36>
 80080d0:	1aa3      	subs	r3, r4, r2
 80080d2:	3b11      	subs	r3, #17
 80080d4:	f023 0303 	bic.w	r3, r3, #3
 80080d8:	3211      	adds	r2, #17
 80080da:	42a2      	cmp	r2, r4
 80080dc:	bf88      	it	hi
 80080de:	2300      	movhi	r3, #0
 80080e0:	4418      	add	r0, r3
 80080e2:	2300      	movs	r3, #0
 80080e4:	4288      	cmp	r0, r1
 80080e6:	d305      	bcc.n	80080f4 <__copybits+0x40>
 80080e8:	bd70      	pop	{r4, r5, r6, pc}
 80080ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80080ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80080f2:	e7eb      	b.n	80080cc <__copybits+0x18>
 80080f4:	f840 3b04 	str.w	r3, [r0], #4
 80080f8:	e7f4      	b.n	80080e4 <__copybits+0x30>

080080fa <__any_on>:
 80080fa:	f100 0214 	add.w	r2, r0, #20
 80080fe:	6900      	ldr	r0, [r0, #16]
 8008100:	114b      	asrs	r3, r1, #5
 8008102:	4298      	cmp	r0, r3
 8008104:	b510      	push	{r4, lr}
 8008106:	db11      	blt.n	800812c <__any_on+0x32>
 8008108:	dd0a      	ble.n	8008120 <__any_on+0x26>
 800810a:	f011 011f 	ands.w	r1, r1, #31
 800810e:	d007      	beq.n	8008120 <__any_on+0x26>
 8008110:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008114:	fa24 f001 	lsr.w	r0, r4, r1
 8008118:	fa00 f101 	lsl.w	r1, r0, r1
 800811c:	428c      	cmp	r4, r1
 800811e:	d10b      	bne.n	8008138 <__any_on+0x3e>
 8008120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008124:	4293      	cmp	r3, r2
 8008126:	d803      	bhi.n	8008130 <__any_on+0x36>
 8008128:	2000      	movs	r0, #0
 800812a:	bd10      	pop	{r4, pc}
 800812c:	4603      	mov	r3, r0
 800812e:	e7f7      	b.n	8008120 <__any_on+0x26>
 8008130:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008134:	2900      	cmp	r1, #0
 8008136:	d0f5      	beq.n	8008124 <__any_on+0x2a>
 8008138:	2001      	movs	r0, #1
 800813a:	e7f6      	b.n	800812a <__any_on+0x30>

0800813c <__ascii_wctomb>:
 800813c:	4603      	mov	r3, r0
 800813e:	4608      	mov	r0, r1
 8008140:	b141      	cbz	r1, 8008154 <__ascii_wctomb+0x18>
 8008142:	2aff      	cmp	r2, #255	@ 0xff
 8008144:	d904      	bls.n	8008150 <__ascii_wctomb+0x14>
 8008146:	228a      	movs	r2, #138	@ 0x8a
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	4770      	bx	lr
 8008150:	700a      	strb	r2, [r1, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	4770      	bx	lr

08008156 <__sfputc_r>:
 8008156:	6893      	ldr	r3, [r2, #8]
 8008158:	3b01      	subs	r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	b410      	push	{r4}
 800815e:	6093      	str	r3, [r2, #8]
 8008160:	da08      	bge.n	8008174 <__sfputc_r+0x1e>
 8008162:	6994      	ldr	r4, [r2, #24]
 8008164:	42a3      	cmp	r3, r4
 8008166:	db01      	blt.n	800816c <__sfputc_r+0x16>
 8008168:	290a      	cmp	r1, #10
 800816a:	d103      	bne.n	8008174 <__sfputc_r+0x1e>
 800816c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008170:	f7fd bf5b 	b.w	800602a <__swbuf_r>
 8008174:	6813      	ldr	r3, [r2, #0]
 8008176:	1c58      	adds	r0, r3, #1
 8008178:	6010      	str	r0, [r2, #0]
 800817a:	7019      	strb	r1, [r3, #0]
 800817c:	4608      	mov	r0, r1
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	4770      	bx	lr

08008184 <__sfputs_r>:
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008186:	4606      	mov	r6, r0
 8008188:	460f      	mov	r7, r1
 800818a:	4614      	mov	r4, r2
 800818c:	18d5      	adds	r5, r2, r3
 800818e:	42ac      	cmp	r4, r5
 8008190:	d101      	bne.n	8008196 <__sfputs_r+0x12>
 8008192:	2000      	movs	r0, #0
 8008194:	e007      	b.n	80081a6 <__sfputs_r+0x22>
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	463a      	mov	r2, r7
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff ffda 	bl	8008156 <__sfputc_r>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d1f3      	bne.n	800818e <__sfputs_r+0xa>
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081a8 <_vfiprintf_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	460d      	mov	r5, r1
 80081ae:	b09d      	sub	sp, #116	@ 0x74
 80081b0:	4614      	mov	r4, r2
 80081b2:	4698      	mov	r8, r3
 80081b4:	4606      	mov	r6, r0
 80081b6:	b118      	cbz	r0, 80081c0 <_vfiprintf_r+0x18>
 80081b8:	6a03      	ldr	r3, [r0, #32]
 80081ba:	b90b      	cbnz	r3, 80081c0 <_vfiprintf_r+0x18>
 80081bc:	f7fd fe4c 	bl	8005e58 <__sinit>
 80081c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081c2:	07d9      	lsls	r1, r3, #31
 80081c4:	d405      	bmi.n	80081d2 <_vfiprintf_r+0x2a>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	059a      	lsls	r2, r3, #22
 80081ca:	d402      	bmi.n	80081d2 <_vfiprintf_r+0x2a>
 80081cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ce:	f7fe f850 	bl	8006272 <__retarget_lock_acquire_recursive>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	d501      	bpl.n	80081dc <_vfiprintf_r+0x34>
 80081d8:	692b      	ldr	r3, [r5, #16]
 80081da:	b99b      	cbnz	r3, 8008204 <_vfiprintf_r+0x5c>
 80081dc:	4629      	mov	r1, r5
 80081de:	4630      	mov	r0, r6
 80081e0:	f7fd ff62 	bl	80060a8 <__swsetup_r>
 80081e4:	b170      	cbz	r0, 8008204 <_vfiprintf_r+0x5c>
 80081e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081e8:	07dc      	lsls	r4, r3, #31
 80081ea:	d504      	bpl.n	80081f6 <_vfiprintf_r+0x4e>
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	b01d      	add	sp, #116	@ 0x74
 80081f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	0598      	lsls	r0, r3, #22
 80081fa:	d4f7      	bmi.n	80081ec <_vfiprintf_r+0x44>
 80081fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081fe:	f7fe f839 	bl	8006274 <__retarget_lock_release_recursive>
 8008202:	e7f3      	b.n	80081ec <_vfiprintf_r+0x44>
 8008204:	2300      	movs	r3, #0
 8008206:	9309      	str	r3, [sp, #36]	@ 0x24
 8008208:	2320      	movs	r3, #32
 800820a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800820e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008212:	2330      	movs	r3, #48	@ 0x30
 8008214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083c4 <_vfiprintf_r+0x21c>
 8008218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800821c:	f04f 0901 	mov.w	r9, #1
 8008220:	4623      	mov	r3, r4
 8008222:	469a      	mov	sl, r3
 8008224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008228:	b10a      	cbz	r2, 800822e <_vfiprintf_r+0x86>
 800822a:	2a25      	cmp	r2, #37	@ 0x25
 800822c:	d1f9      	bne.n	8008222 <_vfiprintf_r+0x7a>
 800822e:	ebba 0b04 	subs.w	fp, sl, r4
 8008232:	d00b      	beq.n	800824c <_vfiprintf_r+0xa4>
 8008234:	465b      	mov	r3, fp
 8008236:	4622      	mov	r2, r4
 8008238:	4629      	mov	r1, r5
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ffa2 	bl	8008184 <__sfputs_r>
 8008240:	3001      	adds	r0, #1
 8008242:	f000 80a7 	beq.w	8008394 <_vfiprintf_r+0x1ec>
 8008246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008248:	445a      	add	r2, fp
 800824a:	9209      	str	r2, [sp, #36]	@ 0x24
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 809f 	beq.w	8008394 <_vfiprintf_r+0x1ec>
 8008256:	2300      	movs	r3, #0
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008260:	f10a 0a01 	add.w	sl, sl, #1
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	9307      	str	r3, [sp, #28]
 8008268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800826c:	931a      	str	r3, [sp, #104]	@ 0x68
 800826e:	4654      	mov	r4, sl
 8008270:	2205      	movs	r2, #5
 8008272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008276:	4853      	ldr	r0, [pc, #332]	@ (80083c4 <_vfiprintf_r+0x21c>)
 8008278:	f7f7 ffca 	bl	8000210 <memchr>
 800827c:	9a04      	ldr	r2, [sp, #16]
 800827e:	b9d8      	cbnz	r0, 80082b8 <_vfiprintf_r+0x110>
 8008280:	06d1      	lsls	r1, r2, #27
 8008282:	bf44      	itt	mi
 8008284:	2320      	movmi	r3, #32
 8008286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800828a:	0713      	lsls	r3, r2, #28
 800828c:	bf44      	itt	mi
 800828e:	232b      	movmi	r3, #43	@ 0x2b
 8008290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008294:	f89a 3000 	ldrb.w	r3, [sl]
 8008298:	2b2a      	cmp	r3, #42	@ 0x2a
 800829a:	d015      	beq.n	80082c8 <_vfiprintf_r+0x120>
 800829c:	9a07      	ldr	r2, [sp, #28]
 800829e:	4654      	mov	r4, sl
 80082a0:	2000      	movs	r0, #0
 80082a2:	f04f 0c0a 	mov.w	ip, #10
 80082a6:	4621      	mov	r1, r4
 80082a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ac:	3b30      	subs	r3, #48	@ 0x30
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	d94b      	bls.n	800834a <_vfiprintf_r+0x1a2>
 80082b2:	b1b0      	cbz	r0, 80082e2 <_vfiprintf_r+0x13a>
 80082b4:	9207      	str	r2, [sp, #28]
 80082b6:	e014      	b.n	80082e2 <_vfiprintf_r+0x13a>
 80082b8:	eba0 0308 	sub.w	r3, r0, r8
 80082bc:	fa09 f303 	lsl.w	r3, r9, r3
 80082c0:	4313      	orrs	r3, r2
 80082c2:	9304      	str	r3, [sp, #16]
 80082c4:	46a2      	mov	sl, r4
 80082c6:	e7d2      	b.n	800826e <_vfiprintf_r+0xc6>
 80082c8:	9b03      	ldr	r3, [sp, #12]
 80082ca:	1d19      	adds	r1, r3, #4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	9103      	str	r1, [sp, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfbb      	ittet	lt
 80082d4:	425b      	neglt	r3, r3
 80082d6:	f042 0202 	orrlt.w	r2, r2, #2
 80082da:	9307      	strge	r3, [sp, #28]
 80082dc:	9307      	strlt	r3, [sp, #28]
 80082de:	bfb8      	it	lt
 80082e0:	9204      	strlt	r2, [sp, #16]
 80082e2:	7823      	ldrb	r3, [r4, #0]
 80082e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80082e6:	d10a      	bne.n	80082fe <_vfiprintf_r+0x156>
 80082e8:	7863      	ldrb	r3, [r4, #1]
 80082ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ec:	d132      	bne.n	8008354 <_vfiprintf_r+0x1ac>
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	9203      	str	r2, [sp, #12]
 80082f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082fa:	3402      	adds	r4, #2
 80082fc:	9305      	str	r3, [sp, #20]
 80082fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083d4 <_vfiprintf_r+0x22c>
 8008302:	7821      	ldrb	r1, [r4, #0]
 8008304:	2203      	movs	r2, #3
 8008306:	4650      	mov	r0, sl
 8008308:	f7f7 ff82 	bl	8000210 <memchr>
 800830c:	b138      	cbz	r0, 800831e <_vfiprintf_r+0x176>
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	eba0 000a 	sub.w	r0, r0, sl
 8008314:	2240      	movs	r2, #64	@ 0x40
 8008316:	4082      	lsls	r2, r0
 8008318:	4313      	orrs	r3, r2
 800831a:	3401      	adds	r4, #1
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008322:	4829      	ldr	r0, [pc, #164]	@ (80083c8 <_vfiprintf_r+0x220>)
 8008324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008328:	2206      	movs	r2, #6
 800832a:	f7f7 ff71 	bl	8000210 <memchr>
 800832e:	2800      	cmp	r0, #0
 8008330:	d03f      	beq.n	80083b2 <_vfiprintf_r+0x20a>
 8008332:	4b26      	ldr	r3, [pc, #152]	@ (80083cc <_vfiprintf_r+0x224>)
 8008334:	bb1b      	cbnz	r3, 800837e <_vfiprintf_r+0x1d6>
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	3307      	adds	r3, #7
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	3308      	adds	r3, #8
 8008340:	9303      	str	r3, [sp, #12]
 8008342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008344:	443b      	add	r3, r7
 8008346:	9309      	str	r3, [sp, #36]	@ 0x24
 8008348:	e76a      	b.n	8008220 <_vfiprintf_r+0x78>
 800834a:	fb0c 3202 	mla	r2, ip, r2, r3
 800834e:	460c      	mov	r4, r1
 8008350:	2001      	movs	r0, #1
 8008352:	e7a8      	b.n	80082a6 <_vfiprintf_r+0xfe>
 8008354:	2300      	movs	r3, #0
 8008356:	3401      	adds	r4, #1
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	4619      	mov	r1, r3
 800835c:	f04f 0c0a 	mov.w	ip, #10
 8008360:	4620      	mov	r0, r4
 8008362:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008366:	3a30      	subs	r2, #48	@ 0x30
 8008368:	2a09      	cmp	r2, #9
 800836a:	d903      	bls.n	8008374 <_vfiprintf_r+0x1cc>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d0c6      	beq.n	80082fe <_vfiprintf_r+0x156>
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	e7c4      	b.n	80082fe <_vfiprintf_r+0x156>
 8008374:	fb0c 2101 	mla	r1, ip, r1, r2
 8008378:	4604      	mov	r4, r0
 800837a:	2301      	movs	r3, #1
 800837c:	e7f0      	b.n	8008360 <_vfiprintf_r+0x1b8>
 800837e:	ab03      	add	r3, sp, #12
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	462a      	mov	r2, r5
 8008384:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <_vfiprintf_r+0x228>)
 8008386:	a904      	add	r1, sp, #16
 8008388:	4630      	mov	r0, r6
 800838a:	f7fd f921 	bl	80055d0 <_printf_float>
 800838e:	4607      	mov	r7, r0
 8008390:	1c78      	adds	r0, r7, #1
 8008392:	d1d6      	bne.n	8008342 <_vfiprintf_r+0x19a>
 8008394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008396:	07d9      	lsls	r1, r3, #31
 8008398:	d405      	bmi.n	80083a6 <_vfiprintf_r+0x1fe>
 800839a:	89ab      	ldrh	r3, [r5, #12]
 800839c:	059a      	lsls	r2, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_vfiprintf_r+0x1fe>
 80083a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083a2:	f7fd ff67 	bl	8006274 <__retarget_lock_release_recursive>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	065b      	lsls	r3, r3, #25
 80083aa:	f53f af1f 	bmi.w	80081ec <_vfiprintf_r+0x44>
 80083ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083b0:	e71e      	b.n	80081f0 <_vfiprintf_r+0x48>
 80083b2:	ab03      	add	r3, sp, #12
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	462a      	mov	r2, r5
 80083b8:	4b05      	ldr	r3, [pc, #20]	@ (80083d0 <_vfiprintf_r+0x228>)
 80083ba:	a904      	add	r1, sp, #16
 80083bc:	4630      	mov	r0, r6
 80083be:	f7fd fb9f 	bl	8005b00 <_printf_i>
 80083c2:	e7e4      	b.n	800838e <_vfiprintf_r+0x1e6>
 80083c4:	08009040 	.word	0x08009040
 80083c8:	0800904a 	.word	0x0800904a
 80083cc:	080055d1 	.word	0x080055d1
 80083d0:	08008185 	.word	0x08008185
 80083d4:	08009046 	.word	0x08009046

080083d8 <__sflush_r>:
 80083d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e0:	0716      	lsls	r6, r2, #28
 80083e2:	4605      	mov	r5, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	d454      	bmi.n	8008492 <__sflush_r+0xba>
 80083e8:	684b      	ldr	r3, [r1, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	dc02      	bgt.n	80083f4 <__sflush_r+0x1c>
 80083ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	dd48      	ble.n	8008486 <__sflush_r+0xae>
 80083f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083f6:	2e00      	cmp	r6, #0
 80083f8:	d045      	beq.n	8008486 <__sflush_r+0xae>
 80083fa:	2300      	movs	r3, #0
 80083fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008400:	682f      	ldr	r7, [r5, #0]
 8008402:	6a21      	ldr	r1, [r4, #32]
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	d030      	beq.n	800846a <__sflush_r+0x92>
 8008408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	0759      	lsls	r1, r3, #29
 800840e:	d505      	bpl.n	800841c <__sflush_r+0x44>
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	1ad2      	subs	r2, r2, r3
 8008414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008416:	b10b      	cbz	r3, 800841c <__sflush_r+0x44>
 8008418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	2300      	movs	r3, #0
 800841e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008420:	6a21      	ldr	r1, [r4, #32]
 8008422:	4628      	mov	r0, r5
 8008424:	47b0      	blx	r6
 8008426:	1c43      	adds	r3, r0, #1
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	d106      	bne.n	800843a <__sflush_r+0x62>
 800842c:	6829      	ldr	r1, [r5, #0]
 800842e:	291d      	cmp	r1, #29
 8008430:	d82b      	bhi.n	800848a <__sflush_r+0xb2>
 8008432:	4a2a      	ldr	r2, [pc, #168]	@ (80084dc <__sflush_r+0x104>)
 8008434:	410a      	asrs	r2, r1
 8008436:	07d6      	lsls	r6, r2, #31
 8008438:	d427      	bmi.n	800848a <__sflush_r+0xb2>
 800843a:	2200      	movs	r2, #0
 800843c:	6062      	str	r2, [r4, #4]
 800843e:	04d9      	lsls	r1, r3, #19
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	d504      	bpl.n	8008450 <__sflush_r+0x78>
 8008446:	1c42      	adds	r2, r0, #1
 8008448:	d101      	bne.n	800844e <__sflush_r+0x76>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	b903      	cbnz	r3, 8008450 <__sflush_r+0x78>
 800844e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008452:	602f      	str	r7, [r5, #0]
 8008454:	b1b9      	cbz	r1, 8008486 <__sflush_r+0xae>
 8008456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800845a:	4299      	cmp	r1, r3
 800845c:	d002      	beq.n	8008464 <__sflush_r+0x8c>
 800845e:	4628      	mov	r0, r5
 8008460:	f7fe fd6e 	bl	8006f40 <_free_r>
 8008464:	2300      	movs	r3, #0
 8008466:	6363      	str	r3, [r4, #52]	@ 0x34
 8008468:	e00d      	b.n	8008486 <__sflush_r+0xae>
 800846a:	2301      	movs	r3, #1
 800846c:	4628      	mov	r0, r5
 800846e:	47b0      	blx	r6
 8008470:	4602      	mov	r2, r0
 8008472:	1c50      	adds	r0, r2, #1
 8008474:	d1c9      	bne.n	800840a <__sflush_r+0x32>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0c6      	beq.n	800840a <__sflush_r+0x32>
 800847c:	2b1d      	cmp	r3, #29
 800847e:	d001      	beq.n	8008484 <__sflush_r+0xac>
 8008480:	2b16      	cmp	r3, #22
 8008482:	d11e      	bne.n	80084c2 <__sflush_r+0xea>
 8008484:	602f      	str	r7, [r5, #0]
 8008486:	2000      	movs	r0, #0
 8008488:	e022      	b.n	80084d0 <__sflush_r+0xf8>
 800848a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848e:	b21b      	sxth	r3, r3
 8008490:	e01b      	b.n	80084ca <__sflush_r+0xf2>
 8008492:	690f      	ldr	r7, [r1, #16]
 8008494:	2f00      	cmp	r7, #0
 8008496:	d0f6      	beq.n	8008486 <__sflush_r+0xae>
 8008498:	0793      	lsls	r3, r2, #30
 800849a:	680e      	ldr	r6, [r1, #0]
 800849c:	bf08      	it	eq
 800849e:	694b      	ldreq	r3, [r1, #20]
 80084a0:	600f      	str	r7, [r1, #0]
 80084a2:	bf18      	it	ne
 80084a4:	2300      	movne	r3, #0
 80084a6:	eba6 0807 	sub.w	r8, r6, r7
 80084aa:	608b      	str	r3, [r1, #8]
 80084ac:	f1b8 0f00 	cmp.w	r8, #0
 80084b0:	dde9      	ble.n	8008486 <__sflush_r+0xae>
 80084b2:	6a21      	ldr	r1, [r4, #32]
 80084b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084b6:	4643      	mov	r3, r8
 80084b8:	463a      	mov	r2, r7
 80084ba:	4628      	mov	r0, r5
 80084bc:	47b0      	blx	r6
 80084be:	2800      	cmp	r0, #0
 80084c0:	dc08      	bgt.n	80084d4 <__sflush_r+0xfc>
 80084c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d4:	4407      	add	r7, r0
 80084d6:	eba8 0800 	sub.w	r8, r8, r0
 80084da:	e7e7      	b.n	80084ac <__sflush_r+0xd4>
 80084dc:	dfbffffe 	.word	0xdfbffffe

080084e0 <_fflush_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	690b      	ldr	r3, [r1, #16]
 80084e4:	4605      	mov	r5, r0
 80084e6:	460c      	mov	r4, r1
 80084e8:	b913      	cbnz	r3, 80084f0 <_fflush_r+0x10>
 80084ea:	2500      	movs	r5, #0
 80084ec:	4628      	mov	r0, r5
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	b118      	cbz	r0, 80084fa <_fflush_r+0x1a>
 80084f2:	6a03      	ldr	r3, [r0, #32]
 80084f4:	b90b      	cbnz	r3, 80084fa <_fflush_r+0x1a>
 80084f6:	f7fd fcaf 	bl	8005e58 <__sinit>
 80084fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f3      	beq.n	80084ea <_fflush_r+0xa>
 8008502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008504:	07d0      	lsls	r0, r2, #31
 8008506:	d404      	bmi.n	8008512 <_fflush_r+0x32>
 8008508:	0599      	lsls	r1, r3, #22
 800850a:	d402      	bmi.n	8008512 <_fflush_r+0x32>
 800850c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800850e:	f7fd feb0 	bl	8006272 <__retarget_lock_acquire_recursive>
 8008512:	4628      	mov	r0, r5
 8008514:	4621      	mov	r1, r4
 8008516:	f7ff ff5f 	bl	80083d8 <__sflush_r>
 800851a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800851c:	07da      	lsls	r2, r3, #31
 800851e:	4605      	mov	r5, r0
 8008520:	d4e4      	bmi.n	80084ec <_fflush_r+0xc>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	059b      	lsls	r3, r3, #22
 8008526:	d4e1      	bmi.n	80084ec <_fflush_r+0xc>
 8008528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800852a:	f7fd fea3 	bl	8006274 <__retarget_lock_release_recursive>
 800852e:	e7dd      	b.n	80084ec <_fflush_r+0xc>

08008530 <__swhatbuf_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	460c      	mov	r4, r1
 8008534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008538:	2900      	cmp	r1, #0
 800853a:	b096      	sub	sp, #88	@ 0x58
 800853c:	4615      	mov	r5, r2
 800853e:	461e      	mov	r6, r3
 8008540:	da0d      	bge.n	800855e <__swhatbuf_r+0x2e>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	bf14      	ite	ne
 800854e:	2340      	movne	r3, #64	@ 0x40
 8008550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008554:	2000      	movs	r0, #0
 8008556:	6031      	str	r1, [r6, #0]
 8008558:	602b      	str	r3, [r5, #0]
 800855a:	b016      	add	sp, #88	@ 0x58
 800855c:	bd70      	pop	{r4, r5, r6, pc}
 800855e:	466a      	mov	r2, sp
 8008560:	f000 f848 	bl	80085f4 <_fstat_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	dbec      	blt.n	8008542 <__swhatbuf_r+0x12>
 8008568:	9901      	ldr	r1, [sp, #4]
 800856a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800856e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008572:	4259      	negs	r1, r3
 8008574:	4159      	adcs	r1, r3
 8008576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800857a:	e7eb      	b.n	8008554 <__swhatbuf_r+0x24>

0800857c <__smakebuf_r>:
 800857c:	898b      	ldrh	r3, [r1, #12]
 800857e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008580:	079d      	lsls	r5, r3, #30
 8008582:	4606      	mov	r6, r0
 8008584:	460c      	mov	r4, r1
 8008586:	d507      	bpl.n	8008598 <__smakebuf_r+0x1c>
 8008588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	2301      	movs	r3, #1
 8008592:	6163      	str	r3, [r4, #20]
 8008594:	b003      	add	sp, #12
 8008596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008598:	ab01      	add	r3, sp, #4
 800859a:	466a      	mov	r2, sp
 800859c:	f7ff ffc8 	bl	8008530 <__swhatbuf_r>
 80085a0:	9f00      	ldr	r7, [sp, #0]
 80085a2:	4605      	mov	r5, r0
 80085a4:	4639      	mov	r1, r7
 80085a6:	4630      	mov	r0, r6
 80085a8:	f7ff f878 	bl	800769c <_malloc_r>
 80085ac:	b948      	cbnz	r0, 80085c2 <__smakebuf_r+0x46>
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	059a      	lsls	r2, r3, #22
 80085b4:	d4ee      	bmi.n	8008594 <__smakebuf_r+0x18>
 80085b6:	f023 0303 	bic.w	r3, r3, #3
 80085ba:	f043 0302 	orr.w	r3, r3, #2
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	e7e2      	b.n	8008588 <__smakebuf_r+0xc>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	6020      	str	r0, [r4, #0]
 80085c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085ca:	81a3      	strh	r3, [r4, #12]
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085d2:	b15b      	cbz	r3, 80085ec <__smakebuf_r+0x70>
 80085d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085d8:	4630      	mov	r0, r6
 80085da:	f000 f81d 	bl	8008618 <_isatty_r>
 80085de:	b128      	cbz	r0, 80085ec <__smakebuf_r+0x70>
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	f043 0301 	orr.w	r3, r3, #1
 80085ea:	81a3      	strh	r3, [r4, #12]
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	431d      	orrs	r5, r3
 80085f0:	81a5      	strh	r5, [r4, #12]
 80085f2:	e7cf      	b.n	8008594 <__smakebuf_r+0x18>

080085f4 <_fstat_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d07      	ldr	r5, [pc, #28]	@ (8008614 <_fstat_r+0x20>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	f7f9 fcc8 	bl	8001f96 <_fstat>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d102      	bne.n	8008610 <_fstat_r+0x1c>
 800860a:	682b      	ldr	r3, [r5, #0]
 800860c:	b103      	cbz	r3, 8008610 <_fstat_r+0x1c>
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	bd38      	pop	{r3, r4, r5, pc}
 8008612:	bf00      	nop
 8008614:	20000674 	.word	0x20000674

08008618 <_isatty_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d06      	ldr	r5, [pc, #24]	@ (8008634 <_isatty_r+0x1c>)
 800861c:	2300      	movs	r3, #0
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	f7f9 fcc7 	bl	8001fb6 <_isatty>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_isatty_r+0x1a>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_isatty_r+0x1a>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	20000674 	.word	0x20000674

08008638 <_sbrk_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	4d06      	ldr	r5, [pc, #24]	@ (8008654 <_sbrk_r+0x1c>)
 800863c:	2300      	movs	r3, #0
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7f9 fcd0 	bl	8001fe8 <_sbrk>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_sbrk_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_sbrk_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20000674 	.word	0x20000674

08008658 <__assert_func>:
 8008658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800865a:	4614      	mov	r4, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <__assert_func+0x2c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4605      	mov	r5, r0
 8008664:	68d8      	ldr	r0, [r3, #12]
 8008666:	b954      	cbnz	r4, 800867e <__assert_func+0x26>
 8008668:	4b07      	ldr	r3, [pc, #28]	@ (8008688 <__assert_func+0x30>)
 800866a:	461c      	mov	r4, r3
 800866c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008670:	9100      	str	r1, [sp, #0]
 8008672:	462b      	mov	r3, r5
 8008674:	4905      	ldr	r1, [pc, #20]	@ (800868c <__assert_func+0x34>)
 8008676:	f000 f821 	bl	80086bc <fiprintf>
 800867a:	f000 f831 	bl	80086e0 <abort>
 800867e:	4b04      	ldr	r3, [pc, #16]	@ (8008690 <__assert_func+0x38>)
 8008680:	e7f4      	b.n	800866c <__assert_func+0x14>
 8008682:	bf00      	nop
 8008684:	20000184 	.word	0x20000184
 8008688:	0800908c 	.word	0x0800908c
 800868c:	0800905e 	.word	0x0800905e
 8008690:	08009051 	.word	0x08009051

08008694 <_calloc_r>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	fba1 5402 	umull	r5, r4, r1, r2
 800869a:	b93c      	cbnz	r4, 80086ac <_calloc_r+0x18>
 800869c:	4629      	mov	r1, r5
 800869e:	f7fe fffd 	bl	800769c <_malloc_r>
 80086a2:	4606      	mov	r6, r0
 80086a4:	b928      	cbnz	r0, 80086b2 <_calloc_r+0x1e>
 80086a6:	2600      	movs	r6, #0
 80086a8:	4630      	mov	r0, r6
 80086aa:	bd70      	pop	{r4, r5, r6, pc}
 80086ac:	220c      	movs	r2, #12
 80086ae:	6002      	str	r2, [r0, #0]
 80086b0:	e7f9      	b.n	80086a6 <_calloc_r+0x12>
 80086b2:	462a      	mov	r2, r5
 80086b4:	4621      	mov	r1, r4
 80086b6:	f7fd fd4d 	bl	8006154 <memset>
 80086ba:	e7f5      	b.n	80086a8 <_calloc_r+0x14>

080086bc <fiprintf>:
 80086bc:	b40e      	push	{r1, r2, r3}
 80086be:	b503      	push	{r0, r1, lr}
 80086c0:	4601      	mov	r1, r0
 80086c2:	ab03      	add	r3, sp, #12
 80086c4:	4805      	ldr	r0, [pc, #20]	@ (80086dc <fiprintf+0x20>)
 80086c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	f7ff fd6b 	bl	80081a8 <_vfiprintf_r>
 80086d2:	b002      	add	sp, #8
 80086d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d8:	b003      	add	sp, #12
 80086da:	4770      	bx	lr
 80086dc:	20000184 	.word	0x20000184

080086e0 <abort>:
 80086e0:	b508      	push	{r3, lr}
 80086e2:	2006      	movs	r0, #6
 80086e4:	f000 f82c 	bl	8008740 <raise>
 80086e8:	2001      	movs	r0, #1
 80086ea:	f7f9 fc04 	bl	8001ef6 <_exit>

080086ee <_raise_r>:
 80086ee:	291f      	cmp	r1, #31
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4605      	mov	r5, r0
 80086f4:	460c      	mov	r4, r1
 80086f6:	d904      	bls.n	8008702 <_raise_r+0x14>
 80086f8:	2316      	movs	r3, #22
 80086fa:	6003      	str	r3, [r0, #0]
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008704:	b112      	cbz	r2, 800870c <_raise_r+0x1e>
 8008706:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800870a:	b94b      	cbnz	r3, 8008720 <_raise_r+0x32>
 800870c:	4628      	mov	r0, r5
 800870e:	f000 f831 	bl	8008774 <_getpid_r>
 8008712:	4622      	mov	r2, r4
 8008714:	4601      	mov	r1, r0
 8008716:	4628      	mov	r0, r5
 8008718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800871c:	f000 b818 	b.w	8008750 <_kill_r>
 8008720:	2b01      	cmp	r3, #1
 8008722:	d00a      	beq.n	800873a <_raise_r+0x4c>
 8008724:	1c59      	adds	r1, r3, #1
 8008726:	d103      	bne.n	8008730 <_raise_r+0x42>
 8008728:	2316      	movs	r3, #22
 800872a:	6003      	str	r3, [r0, #0]
 800872c:	2001      	movs	r0, #1
 800872e:	e7e7      	b.n	8008700 <_raise_r+0x12>
 8008730:	2100      	movs	r1, #0
 8008732:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008736:	4620      	mov	r0, r4
 8008738:	4798      	blx	r3
 800873a:	2000      	movs	r0, #0
 800873c:	e7e0      	b.n	8008700 <_raise_r+0x12>
	...

08008740 <raise>:
 8008740:	4b02      	ldr	r3, [pc, #8]	@ (800874c <raise+0xc>)
 8008742:	4601      	mov	r1, r0
 8008744:	6818      	ldr	r0, [r3, #0]
 8008746:	f7ff bfd2 	b.w	80086ee <_raise_r>
 800874a:	bf00      	nop
 800874c:	20000184 	.word	0x20000184

08008750 <_kill_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	@ (8008770 <_kill_r+0x20>)
 8008754:	2300      	movs	r3, #0
 8008756:	4604      	mov	r4, r0
 8008758:	4608      	mov	r0, r1
 800875a:	4611      	mov	r1, r2
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	f7f9 fbba 	bl	8001ed6 <_kill>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	d102      	bne.n	800876c <_kill_r+0x1c>
 8008766:	682b      	ldr	r3, [r5, #0]
 8008768:	b103      	cbz	r3, 800876c <_kill_r+0x1c>
 800876a:	6023      	str	r3, [r4, #0]
 800876c:	bd38      	pop	{r3, r4, r5, pc}
 800876e:	bf00      	nop
 8008770:	20000674 	.word	0x20000674

08008774 <_getpid_r>:
 8008774:	f7f9 bba7 	b.w	8001ec6 <_getpid>

08008778 <atan>:
 8008778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	ec55 4b10 	vmov	r4, r5, d0
 8008780:	4bbf      	ldr	r3, [pc, #764]	@ (8008a80 <atan+0x308>)
 8008782:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8008786:	429e      	cmp	r6, r3
 8008788:	46ab      	mov	fp, r5
 800878a:	d918      	bls.n	80087be <atan+0x46>
 800878c:	4bbd      	ldr	r3, [pc, #756]	@ (8008a84 <atan+0x30c>)
 800878e:	429e      	cmp	r6, r3
 8008790:	d801      	bhi.n	8008796 <atan+0x1e>
 8008792:	d109      	bne.n	80087a8 <atan+0x30>
 8008794:	b144      	cbz	r4, 80087a8 <atan+0x30>
 8008796:	4622      	mov	r2, r4
 8008798:	462b      	mov	r3, r5
 800879a:	4620      	mov	r0, r4
 800879c:	4629      	mov	r1, r5
 800879e:	f7f7 fd95 	bl	80002cc <__adddf3>
 80087a2:	4604      	mov	r4, r0
 80087a4:	460d      	mov	r5, r1
 80087a6:	e006      	b.n	80087b6 <atan+0x3e>
 80087a8:	f1bb 0f00 	cmp.w	fp, #0
 80087ac:	f340 812b 	ble.w	8008a06 <atan+0x28e>
 80087b0:	a597      	add	r5, pc, #604	@ (adr r5, 8008a10 <atan+0x298>)
 80087b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087b6:	ec45 4b10 	vmov	d0, r4, r5
 80087ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087be:	4bb2      	ldr	r3, [pc, #712]	@ (8008a88 <atan+0x310>)
 80087c0:	429e      	cmp	r6, r3
 80087c2:	d813      	bhi.n	80087ec <atan+0x74>
 80087c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80087c8:	429e      	cmp	r6, r3
 80087ca:	d80c      	bhi.n	80087e6 <atan+0x6e>
 80087cc:	a392      	add	r3, pc, #584	@ (adr r3, 8008a18 <atan+0x2a0>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	4620      	mov	r0, r4
 80087d4:	4629      	mov	r1, r5
 80087d6:	f7f7 fd79 	bl	80002cc <__adddf3>
 80087da:	4bac      	ldr	r3, [pc, #688]	@ (8008a8c <atan+0x314>)
 80087dc:	2200      	movs	r2, #0
 80087de:	f7f8 f9bb 	bl	8000b58 <__aeabi_dcmpgt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1e7      	bne.n	80087b6 <atan+0x3e>
 80087e6:	f04f 3aff 	mov.w	sl, #4294967295
 80087ea:	e029      	b.n	8008840 <atan+0xc8>
 80087ec:	f000 f95c 	bl	8008aa8 <fabs>
 80087f0:	4ba7      	ldr	r3, [pc, #668]	@ (8008a90 <atan+0x318>)
 80087f2:	429e      	cmp	r6, r3
 80087f4:	ec55 4b10 	vmov	r4, r5, d0
 80087f8:	f200 80bc 	bhi.w	8008974 <atan+0x1fc>
 80087fc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8008800:	429e      	cmp	r6, r3
 8008802:	f200 809e 	bhi.w	8008942 <atan+0x1ca>
 8008806:	4622      	mov	r2, r4
 8008808:	462b      	mov	r3, r5
 800880a:	4620      	mov	r0, r4
 800880c:	4629      	mov	r1, r5
 800880e:	f7f7 fd5d 	bl	80002cc <__adddf3>
 8008812:	4b9e      	ldr	r3, [pc, #632]	@ (8008a8c <atan+0x314>)
 8008814:	2200      	movs	r2, #0
 8008816:	f7f7 fd57 	bl	80002c8 <__aeabi_dsub>
 800881a:	2200      	movs	r2, #0
 800881c:	4606      	mov	r6, r0
 800881e:	460f      	mov	r7, r1
 8008820:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008824:	4620      	mov	r0, r4
 8008826:	4629      	mov	r1, r5
 8008828:	f7f7 fd50 	bl	80002cc <__adddf3>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4630      	mov	r0, r6
 8008832:	4639      	mov	r1, r7
 8008834:	f7f8 f82a 	bl	800088c <__aeabi_ddiv>
 8008838:	f04f 0a00 	mov.w	sl, #0
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	4622      	mov	r2, r4
 8008842:	462b      	mov	r3, r5
 8008844:	4620      	mov	r0, r4
 8008846:	4629      	mov	r1, r5
 8008848:	f7f7 fef6 	bl	8000638 <__aeabi_dmul>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4680      	mov	r8, r0
 8008852:	4689      	mov	r9, r1
 8008854:	f7f7 fef0 	bl	8000638 <__aeabi_dmul>
 8008858:	a371      	add	r3, pc, #452	@ (adr r3, 8008a20 <atan+0x2a8>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	f7f7 fee9 	bl	8000638 <__aeabi_dmul>
 8008866:	a370      	add	r3, pc, #448	@ (adr r3, 8008a28 <atan+0x2b0>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 fd2e 	bl	80002cc <__adddf3>
 8008870:	4632      	mov	r2, r6
 8008872:	463b      	mov	r3, r7
 8008874:	f7f7 fee0 	bl	8000638 <__aeabi_dmul>
 8008878:	a36d      	add	r3, pc, #436	@ (adr r3, 8008a30 <atan+0x2b8>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fd25 	bl	80002cc <__adddf3>
 8008882:	4632      	mov	r2, r6
 8008884:	463b      	mov	r3, r7
 8008886:	f7f7 fed7 	bl	8000638 <__aeabi_dmul>
 800888a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008a38 <atan+0x2c0>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f7 fd1c 	bl	80002cc <__adddf3>
 8008894:	4632      	mov	r2, r6
 8008896:	463b      	mov	r3, r7
 8008898:	f7f7 fece 	bl	8000638 <__aeabi_dmul>
 800889c:	a368      	add	r3, pc, #416	@ (adr r3, 8008a40 <atan+0x2c8>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fd13 	bl	80002cc <__adddf3>
 80088a6:	4632      	mov	r2, r6
 80088a8:	463b      	mov	r3, r7
 80088aa:	f7f7 fec5 	bl	8000638 <__aeabi_dmul>
 80088ae:	a366      	add	r3, pc, #408	@ (adr r3, 8008a48 <atan+0x2d0>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fd0a 	bl	80002cc <__adddf3>
 80088b8:	4642      	mov	r2, r8
 80088ba:	464b      	mov	r3, r9
 80088bc:	f7f7 febc 	bl	8000638 <__aeabi_dmul>
 80088c0:	a363      	add	r3, pc, #396	@ (adr r3, 8008a50 <atan+0x2d8>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	4680      	mov	r8, r0
 80088c8:	4689      	mov	r9, r1
 80088ca:	4630      	mov	r0, r6
 80088cc:	4639      	mov	r1, r7
 80088ce:	f7f7 feb3 	bl	8000638 <__aeabi_dmul>
 80088d2:	a361      	add	r3, pc, #388	@ (adr r3, 8008a58 <atan+0x2e0>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fcf6 	bl	80002c8 <__aeabi_dsub>
 80088dc:	4632      	mov	r2, r6
 80088de:	463b      	mov	r3, r7
 80088e0:	f7f7 feaa 	bl	8000638 <__aeabi_dmul>
 80088e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8008a60 <atan+0x2e8>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fced 	bl	80002c8 <__aeabi_dsub>
 80088ee:	4632      	mov	r2, r6
 80088f0:	463b      	mov	r3, r7
 80088f2:	f7f7 fea1 	bl	8000638 <__aeabi_dmul>
 80088f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8008a68 <atan+0x2f0>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	f7f7 fce4 	bl	80002c8 <__aeabi_dsub>
 8008900:	4632      	mov	r2, r6
 8008902:	463b      	mov	r3, r7
 8008904:	f7f7 fe98 	bl	8000638 <__aeabi_dmul>
 8008908:	a359      	add	r3, pc, #356	@ (adr r3, 8008a70 <atan+0x2f8>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fcdb 	bl	80002c8 <__aeabi_dsub>
 8008912:	4632      	mov	r2, r6
 8008914:	463b      	mov	r3, r7
 8008916:	f7f7 fe8f 	bl	8000638 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4640      	mov	r0, r8
 8008920:	4649      	mov	r1, r9
 8008922:	f7f7 fcd3 	bl	80002cc <__adddf3>
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	f7f7 fe85 	bl	8000638 <__aeabi_dmul>
 800892e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	d148      	bne.n	80089ca <atan+0x252>
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fcc4 	bl	80002c8 <__aeabi_dsub>
 8008940:	e72f      	b.n	80087a2 <atan+0x2a>
 8008942:	4b52      	ldr	r3, [pc, #328]	@ (8008a8c <atan+0x314>)
 8008944:	2200      	movs	r2, #0
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fcbd 	bl	80002c8 <__aeabi_dsub>
 800894e:	4b4f      	ldr	r3, [pc, #316]	@ (8008a8c <atan+0x314>)
 8008950:	4606      	mov	r6, r0
 8008952:	460f      	mov	r7, r1
 8008954:	2200      	movs	r2, #0
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 fcb7 	bl	80002cc <__adddf3>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 ff91 	bl	800088c <__aeabi_ddiv>
 800896a:	f04f 0a01 	mov.w	sl, #1
 800896e:	4604      	mov	r4, r0
 8008970:	460d      	mov	r5, r1
 8008972:	e765      	b.n	8008840 <atan+0xc8>
 8008974:	4b47      	ldr	r3, [pc, #284]	@ (8008a94 <atan+0x31c>)
 8008976:	429e      	cmp	r6, r3
 8008978:	d21c      	bcs.n	80089b4 <atan+0x23c>
 800897a:	4b47      	ldr	r3, [pc, #284]	@ (8008a98 <atan+0x320>)
 800897c:	2200      	movs	r2, #0
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fca1 	bl	80002c8 <__aeabi_dsub>
 8008986:	4b44      	ldr	r3, [pc, #272]	@ (8008a98 <atan+0x320>)
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	2200      	movs	r2, #0
 800898e:	4620      	mov	r0, r4
 8008990:	4629      	mov	r1, r5
 8008992:	f7f7 fe51 	bl	8000638 <__aeabi_dmul>
 8008996:	4b3d      	ldr	r3, [pc, #244]	@ (8008a8c <atan+0x314>)
 8008998:	2200      	movs	r2, #0
 800899a:	f7f7 fc97 	bl	80002cc <__adddf3>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4630      	mov	r0, r6
 80089a4:	4639      	mov	r1, r7
 80089a6:	f7f7 ff71 	bl	800088c <__aeabi_ddiv>
 80089aa:	f04f 0a02 	mov.w	sl, #2
 80089ae:	4604      	mov	r4, r0
 80089b0:	460d      	mov	r5, r1
 80089b2:	e745      	b.n	8008840 <atan+0xc8>
 80089b4:	4622      	mov	r2, r4
 80089b6:	462b      	mov	r3, r5
 80089b8:	4938      	ldr	r1, [pc, #224]	@ (8008a9c <atan+0x324>)
 80089ba:	2000      	movs	r0, #0
 80089bc:	f7f7 ff66 	bl	800088c <__aeabi_ddiv>
 80089c0:	f04f 0a03 	mov.w	sl, #3
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	e73a      	b.n	8008840 <atan+0xc8>
 80089ca:	4b35      	ldr	r3, [pc, #212]	@ (8008aa0 <atan+0x328>)
 80089cc:	4e35      	ldr	r6, [pc, #212]	@ (8008aa4 <atan+0x32c>)
 80089ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc77 	bl	80002c8 <__aeabi_dsub>
 80089da:	4622      	mov	r2, r4
 80089dc:	462b      	mov	r3, r5
 80089de:	f7f7 fc73 	bl	80002c8 <__aeabi_dsub>
 80089e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80089ee:	f7f7 fc6b 	bl	80002c8 <__aeabi_dsub>
 80089f2:	f1bb 0f00 	cmp.w	fp, #0
 80089f6:	4604      	mov	r4, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	f6bf aedc 	bge.w	80087b6 <atan+0x3e>
 80089fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a02:	461d      	mov	r5, r3
 8008a04:	e6d7      	b.n	80087b6 <atan+0x3e>
 8008a06:	a51c      	add	r5, pc, #112	@ (adr r5, 8008a78 <atan+0x300>)
 8008a08:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a0c:	e6d3      	b.n	80087b6 <atan+0x3e>
 8008a0e:	bf00      	nop
 8008a10:	54442d18 	.word	0x54442d18
 8008a14:	3ff921fb 	.word	0x3ff921fb
 8008a18:	8800759c 	.word	0x8800759c
 8008a1c:	7e37e43c 	.word	0x7e37e43c
 8008a20:	e322da11 	.word	0xe322da11
 8008a24:	3f90ad3a 	.word	0x3f90ad3a
 8008a28:	24760deb 	.word	0x24760deb
 8008a2c:	3fa97b4b 	.word	0x3fa97b4b
 8008a30:	a0d03d51 	.word	0xa0d03d51
 8008a34:	3fb10d66 	.word	0x3fb10d66
 8008a38:	c54c206e 	.word	0xc54c206e
 8008a3c:	3fb745cd 	.word	0x3fb745cd
 8008a40:	920083ff 	.word	0x920083ff
 8008a44:	3fc24924 	.word	0x3fc24924
 8008a48:	5555550d 	.word	0x5555550d
 8008a4c:	3fd55555 	.word	0x3fd55555
 8008a50:	2c6a6c2f 	.word	0x2c6a6c2f
 8008a54:	bfa2b444 	.word	0xbfa2b444
 8008a58:	52defd9a 	.word	0x52defd9a
 8008a5c:	3fadde2d 	.word	0x3fadde2d
 8008a60:	af749a6d 	.word	0xaf749a6d
 8008a64:	3fb3b0f2 	.word	0x3fb3b0f2
 8008a68:	fe231671 	.word	0xfe231671
 8008a6c:	3fbc71c6 	.word	0x3fbc71c6
 8008a70:	9998ebc4 	.word	0x9998ebc4
 8008a74:	3fc99999 	.word	0x3fc99999
 8008a78:	54442d18 	.word	0x54442d18
 8008a7c:	bff921fb 	.word	0xbff921fb
 8008a80:	440fffff 	.word	0x440fffff
 8008a84:	7ff00000 	.word	0x7ff00000
 8008a88:	3fdbffff 	.word	0x3fdbffff
 8008a8c:	3ff00000 	.word	0x3ff00000
 8008a90:	3ff2ffff 	.word	0x3ff2ffff
 8008a94:	40038000 	.word	0x40038000
 8008a98:	3ff80000 	.word	0x3ff80000
 8008a9c:	bff00000 	.word	0xbff00000
 8008aa0:	08009090 	.word	0x08009090
 8008aa4:	080090b0 	.word	0x080090b0

08008aa8 <fabs>:
 8008aa8:	ec51 0b10 	vmov	r0, r1, d0
 8008aac:	4602      	mov	r2, r0
 8008aae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ab2:	ec43 2b10 	vmov	d0, r2, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_init>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr

08008ac4 <_fini>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr
