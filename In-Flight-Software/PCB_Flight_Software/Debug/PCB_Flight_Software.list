
PCB_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb40  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800fd10  0800fd10  00010d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104c8  080104c8  000122b0  2**0
                  CONTENTS
  4 .ARM          00000008  080104c8  080104c8  000114c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104d0  080104d0  000122b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104d0  080104d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080104d4  080104d4  000114d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  080104d8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009e4  200002b0  08010788  000122b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  08010788  00012c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013044  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  00025324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00027db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f30  00000000  00000000  000290f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214ea  00000000  00000000  0002a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170cf  00000000  00000000  0004b512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8682  00000000  00000000  000625e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ac63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b4c  00000000  00000000  0012aca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001317f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fcf8 	.word	0x0800fcf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002b4 	.word	0x200002b4
 800020c:	0800fcf8 	.word	0x0800fcf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <invSqrt>:

#define SAMPLE_FREQ_DEF  512.0f   // sample frequency in Hz
#define BETA_DEF         0.1f     // 2 * proportional gain

// Inverse square root approximation (fast)
static float invSqrt(float x) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 800102e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001032:	f00d ff49 	bl	800eec8 <sqrtf>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800103e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001042:	eef0 7a66 	vmov.f32	s15, s13
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Madgwick_init>:

void Madgwick_init(MadgwickAHRS *ahrs, float sampleFrequency) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	ed87 0a00 	vstr	s0, [r7]
    ahrs->beta = BETA_DEF;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <Madgwick_init+0x58>)
 8001060:	601a      	str	r2, [r3, #0]
    ahrs->q0 = 1.0f;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001068:	605a      	str	r2, [r3, #4]
    ahrs->q1 = 0.0f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    ahrs->q2 = 0.0f;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    ahrs->q3 = 0.0f;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
    ahrs->invSampleFreq = 1.0f / sampleFrequency;
 8001082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001086:	ed97 7a00 	vldr	s14, [r7]
 800108a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a05 	vstr	s15, [r3, #20]
    ahrs->anglesComputed = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	3dcccccd 	.word	0x3dcccccd

080010ac <Madgwick_update>:

void Madgwick_update(MadgwickAHRS *ahrs, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0b2      	sub	sp, #200	@ 0xc8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80010b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80010b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80010bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80010c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80010c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80010c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80010cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80010d0:	edc7 3a01 	vstr	s7, [r7, #4]
 80010d4:	ed87 4a00 	vstr	s8, [r7]
//    ahrs->q2 *= recipNorm;
//    ahrs->q3 *= recipNorm;
//    ahrs->anglesComputed = 0;


	float q0 = ahrs->q0, q1 = ahrs->q1, q2 = ahrs->q2, q3 = ahrs->q3;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx;
	float _2q0 = 2.0f * q0;
 80010f8:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80010fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001100:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	float _2q1 = 2.0f * q1;
 8001104:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	float _2q2 = 2.0f * q2;
 8001110:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001114:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001118:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	float _2q3 = 2.0f * q3;
 800111c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001120:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001124:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	float _2q0q2 = 2.0f * q0 * q2;
 8001128:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	float _2q2q3 = 2.0f * q2 * q3;
 800113c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001140:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001144:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114c:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	float q0q0 = q0 * q0;
 8001150:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001158:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float q0q1 = q0 * q1;
 800115c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001160:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	float q0q2 = q0 * q2;
 800116c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001170:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	float q0q3 = q0 * q3;
 800117c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001180:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	float q1q1 = q1 * q1;
 800118c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001190:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001194:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	float q1q2 = q1 * q2;
 8001198:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 800119c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	float q1q3 = q1 * q3;
 80011a8:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 80011ac:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	float q2q2 = q2 * q2;
 80011b8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	float q2q3 = q2 * q3;
 80011c4:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 80011c8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	float q3q3 = q3 * q3;
 80011d4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011dc:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

	// Use IMU algorithm if magnetometer measurement invalid
	if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80011e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	d11e      	bne.n	800122c <Madgwick_update+0x180>
 80011ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	d117      	bne.n	800122c <Madgwick_update+0x180>
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d110      	bne.n	800122c <Madgwick_update+0x180>
		Madgwick_updateIMU(ahrs, gx, gy, gz, ax, ay, az);
 800120a:	edd7 2a03 	vldr	s5, [r7, #12]
 800120e:	ed97 2a04 	vldr	s4, [r7, #16]
 8001212:	edd7 1a05 	vldr	s3, [r7, #20]
 8001216:	ed97 1a06 	vldr	s2, [r7, #24]
 800121a:	edd7 0a07 	vldr	s1, [r7, #28]
 800121e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001224:	f000 fdce 	bl	8001dc4 <Madgwick_updateIMU>
		return;
 8001228:	f000 bdc8 	b.w	8001dbc <Madgwick_update+0xd10>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 800122c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001230:	ed9f 7afd 	vldr	s14, [pc, #1012]	@ 8001628 <Madgwick_update+0x57c>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= 0.0174533f;
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ed9f 7af9 	vldr	s14, [pc, #996]	@ 8001628 <Madgwick_update+0x57c>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= 0.0174533f;
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ed9f 7af5 	vldr	s14, [pc, #980]	@ 8001628 <Madgwick_update+0x57c>
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	edc7 7a06 	vstr	s15, [r7, #24]

	// Normalize accelerometer
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800125c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001260:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800126c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f7ff fed0 	bl	8001024 <invSqrt>
 8001284:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	ax *= recipNorm;
 8001288:	ed97 7a05 	vldr	s14, [r7, #20]
 800128c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 8001298:	ed97 7a04 	vldr	s14, [r7, #16]
 800129c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 80012a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ac:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalize magnetometer
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80012b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	f7ff fea2 	bl	8001024 <invSqrt>
 80012e0:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	mx *= recipNorm;
 80012e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 80012f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 8001304:	ed97 7a00 	vldr	s14, [r7]
 8001308:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800130c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001310:	edc7 7a00 	vstr	s15, [r7]

	// Reference direction of Earth's magnetic field
	_2q0mx = 2.0f * q0 * mx;
 8001314:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001318:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800131c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	_2q0my = 2.0f * q0 * my;
 8001328:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 800132c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001330:	ed97 7a01 	vldr	s14, [r7, #4]
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	_2q0mz = 2.0f * q0 * mz;
 800133c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001340:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001344:	ed97 7a00 	vldr	s14, [r7]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	_2q1mx = 2.0f * q1 * mx;
 8001350:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001354:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001358:	ed97 7a02 	vldr	s14, [r7, #8]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001364:	ed97 7a02 	vldr	s14, [r7, #8]
 8001368:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001374:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001384:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001390:	edd7 6a02 	vldr	s13, [r7, #8]
 8001394:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ac:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b8:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 80013bc:	edd7 7a00 	vldr	s15, [r7]
 80013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013c4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d0:	edd7 6a02 	vldr	s13, [r7, #8]
 80013d4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e0:	edd7 6a02 	vldr	s13, [r7, #8]
 80013e4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80013f4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80013f8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	edd7 6a01 	vldr	s13, [r7, #4]
 8001404:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001410:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001414:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001424:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001430:	edd7 6a01 	vldr	s13, [r7, #4]
 8001434:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001440:	edd7 6a01 	vldr	s13, [r7, #4]
 8001444:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8001454:	edd7 7a00 	vldr	s15, [r7]
 8001458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800145c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001468:	edd7 6a01 	vldr	s13, [r7, #4]
 800146c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float _2bx = sqrt(hx * hx + hy * hy);
 800147c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001480:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001484:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001488:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	ee17 0a90 	vmov	r0, s15
 8001494:	f7ff f878 	bl	8000588 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	ec43 2b10 	vmov	d0, r2, r3
 80014a0:	f00d fc8e 	bl	800edc0 <sqrt>
 80014a4:	ec53 2b10 	vmov	r2, r3, d0
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fbbc 	bl	8000c28 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	65bb      	str	r3, [r7, #88]	@ 0x58
	float _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80014b4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80014b8:	eeb1 7a67 	vneg.f32	s14, s15
 80014bc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80014c8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d4:	edd7 6a00 	vldr	s13, [r7]
 80014d8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80014e8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80014ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f4:	edd7 6a00 	vldr	s13, [r7]
 80014f8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001504:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001510:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	edd7 6a00 	vldr	s13, [r7]
 8001520:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152c:	edd7 6a00 	vldr	s13, [r7]
 8001530:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	float _4bx = 2.0f * _2bx;
 8001540:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001544:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001548:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	float _4bz = 2.0f * _2bz;
 800154c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001550:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001554:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	// Gradient descent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001558:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800155c:	eeb1 7a67 	vneg.f32	s14, s15
 8001560:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001564:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001568:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800156c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001580:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001584:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001588:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800158c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001590:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001594:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80015a4:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80015a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80015b0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80015b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015b8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80015bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015c0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015c8:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 80015cc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80015d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015d4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80015d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80015f0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015f4:	eef1 6a67 	vneg.f32	s13, s15
 80015f8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80015fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001600:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001604:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001608:	ee66 7a27 	vmul.f32	s15, s12, s15
 800160c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001610:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001614:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001618:	ee36 6a67 	vsub.f32	s12, s12, s15
 800161c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001620:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001624:	e002      	b.n	800162c <Madgwick_update+0x580>
 8001626:	bf00      	nop
 8001628:	3c8efa39 	.word	0x3c8efa39
 800162c:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001630:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001634:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001638:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800163c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001640:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001644:	edd7 7a01 	vldr	s15, [r7, #4]
 8001648:	ee76 7a67 	vsub.f32	s15, s12, s15
 800164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001650:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001654:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001658:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800165c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001660:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8001664:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001668:	ee36 6a27 	vadd.f32	s12, s12, s15
 800166c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001670:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001674:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001678:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800167c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001680:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001684:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001688:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800168c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001690:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ee76 7a67 	vsub.f32	s15, s12, s15
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80016a8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80016ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016b0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80016b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80016c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c8:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80016cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016d0:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80016d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016e0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80016f0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016f8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80016fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001700:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001704:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001708:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001714:	edd7 7a03 	vldr	s15, [r7, #12]
 8001718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001724:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001728:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800172c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001730:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001734:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001738:	ee36 6a67 	vsub.f32	s12, s12, s15
 800173c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001740:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001744:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001748:	ee26 6a27 	vmul.f32	s12, s12, s15
 800174c:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 8001750:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001754:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001758:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800175c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001760:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	ee76 7a67 	vsub.f32	s15, s12, s15
 800176c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001774:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001778:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800177c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001780:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001784:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800178c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001790:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001794:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001798:	ee36 6a67 	vsub.f32	s12, s12, s15
 800179c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017a4:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 80017a8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80017ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80017b0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80017b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c8:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017cc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80017d0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80017d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d8:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 80017dc:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80017e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e8:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 80017ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80017f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017f4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017fc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001800:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001804:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001808:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800180c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001810:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001814:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001818:	ee36 6a27 	vadd.f32	s12, s12, s15
 800181c:	edd7 7a00 	vldr	s15, [r7]
 8001820:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8001830:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001834:	eeb1 7a67 	vneg.f32	s14, s15
 8001838:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800183c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001840:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001844:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001854:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001858:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800185c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001860:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001864:	edd7 7a04 	vldr	s15, [r7, #16]
 8001868:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800186c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001878:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800187c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001880:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001884:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001888:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800188c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001890:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001894:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800189c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80018b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80018b4:	eef1 6a67 	vneg.f32	s13, s15
 80018b8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80018bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c0:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 80018c4:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80018c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80018d4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018dc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80018e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80018e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ec:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 80018f0:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80018f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001900:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001914:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001918:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 800191c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001920:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001924:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001928:	ee66 7a27 	vmul.f32	s15, s12, s15
 800192c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001930:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001934:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001938:	ee36 6a67 	vsub.f32	s12, s12, s15
 800193c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001940:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001944:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001948:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800194c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001950:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001954:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001958:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001960:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001968:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800196c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001970:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001978:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 800197c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001980:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001984:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001988:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 800198c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001990:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001994:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001998:	ee26 6a27 	vmul.f32	s12, s12, s15
 800199c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80019a0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80019ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019b0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80019b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019bc:	edd7 7a00 	vldr	s15, [r7]
 80019c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80019d0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80019d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80019ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f0:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80019f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80019fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a08:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a10:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001a14:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a18:	eef1 6a67 	vneg.f32	s13, s15
 8001a1c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001a28:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001a2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a34:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001a38:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001a3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a40:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001a44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a48:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001a4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a50:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 8001a54:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001a58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001a78:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001a7c:	eef1 6a67 	vneg.f32	s13, s15
 8001a80:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a88:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001a8c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a98:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001a9c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aac:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001ab0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ad4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001ad8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae0:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8001ae4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001ae8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001af0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001af8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001afc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b00:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001b04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b08:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalize step magnitude
 8001b28:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b48:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	f7ff fa64 	bl	8001024 <invSqrt>
 8001b5c:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	s0 *= recipNorm;
 8001b60:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001b64:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	s1 *= recipNorm;
 8001b70:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001b74:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	s2 *= recipNorm;
 8001b80:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b84:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	s3 *= recipNorm;
 8001b90:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b94:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	// Apply feedback step
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz) - ahrs->beta * s0;
 8001ba0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001ba4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc0:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy) - ahrs->beta * s1;
 8001bee:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001bf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001bfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0a:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c34:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx) - ahrs->beta * s2;
 8001c38:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c44:	edd7 6a30 	vldr	s13, [r7, #192]	@ 0xc0
 8001c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c54:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	edd3 6a00 	vldr	s13, [r3]
 8001c72:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx) - ahrs->beta * s3;
 8001c82:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	edd7 6a30 	vldr	s13, [r7, #192]	@ 0xc0
 8001c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001ca2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	edd3 6a00 	vldr	s13, [r3]
 8001cbc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Integrate quaternion rate and normalize
	q0 += qDot1 * ahrs->invSampleFreq;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cd2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	q1 += qDot2 * ahrs->invSampleFreq;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	q2 += qDot3 * ahrs->invSampleFreq;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
	q3 += qDot4 * ahrs->invSampleFreq;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d28:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001d34:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001d38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d3c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001d40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001d4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001d58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	f7ff f95e 	bl	8001024 <invSqrt>
 8001d68:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	ahrs->q0 = q0 * recipNorm;
 8001d6c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001d70:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	edc3 7a01 	vstr	s15, [r3, #4]
	ahrs->q1 = q1 * recipNorm;
 8001d7e:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8001d82:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	edc3 7a02 	vstr	s15, [r3, #8]
	ahrs->q2 = q2 * recipNorm;
 8001d90:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001d94:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	edc3 7a03 	vstr	s15, [r3, #12]
	ahrs->q3 = q3 * recipNorm;
 8001da2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001da6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	edc3 7a04 	vstr	s15, [r3, #16]

	ahrs->anglesComputed = 0;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001dbc:	37c8      	adds	r7, #200	@ 0xc8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop

08001dc4 <Madgwick_updateIMU>:

void Madgwick_updateIMU(MadgwickAHRS *ahrs, float gx, float gy, float gz, float ax, float ay, float az) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b098      	sub	sp, #96	@ 0x60
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	61f8      	str	r0, [r7, #28]
 8001dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8001dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8001dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8001dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8001ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8001de0:	edc7 2a01 	vstr	s5, [r7, #4]
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3;
    float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

    // Normalize accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	f7ff f90c 	bl	8001024 <invSqrt>
 8001e0c:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    ax *= recipNorm;
 8001e10:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e14:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNorm;
 8001e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e24:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNorm;
 8001e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e34:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	edc7 7a01 	vstr	s15, [r7, #4]

    // Rate of change of quaternion from gyroscope
    qDot1 = 0.5f * (-ahrs->q1 * gx - ahrs->q2 * gy - ahrs->q3 * gz);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	eeb1 7a67 	vneg.f32	s14, s15
 8001e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    qDot2 = 0.5f * (ahrs->q0 * gx + ahrs->q2 * gz - ahrs->q3 * gy);
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    qDot3 = 0.5f * (ahrs->q0 * gy - ahrs->q1 * gz + ahrs->q3 * gx);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ee6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    qDot4 = 0.5f * (ahrs->q0 * gz + ahrs->q1 * gy - ahrs->q2 * gx);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Normalize the accelerometer measurements
    _2q0 = 2.0f * ahrs->q0;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f46:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    _2q1 = 2.0f * ahrs->q1;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f54:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    _2q2 = 2.0f * ahrs->q2;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f62:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    _2q3 = 2.0f * ahrs->q3;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f70:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Use accelerometer to compute error
    float axTemp = ax - (2 * ahrs->q1 * ahrs->q3 - 2 * ahrs->q0 * ahrs->q2);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float ayTemp = ay - (2 * ahrs->q0 * ahrs->q1 + 2 * ahrs->q2 * ahrs->q3);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float azTemp = az - (1 - 2 * ahrs->q1 * ahrs->q1 - 2 * ahrs->q2 * ahrs->q2);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	edd3 7a03 	vldr	s15, [r3, #12]
 8002006:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	ed97 7a01 	vldr	s14, [r7, #4]
 800201c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002020:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Calculate feedback and apply correction
    s0 = _2q0 * axTemp + _2q1 * ayTemp + _2q2 * azTemp;
 8002024:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002028:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002034:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002040:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002044:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    s1 = _2q0 * ayTemp - _2q1 * axTemp - _2q3 * azTemp;
 8002054:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002058:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800205c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002060:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002064:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002070:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002074:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002080:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    s2 = _2q0 * azTemp - _2q2 * axTemp - _2q3 * ayTemp;
 8002084:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002088:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800208c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002090:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002094:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80020a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    s3 = _2q1 * azTemp - _2q2 * ayTemp - _2q3 * axTemp;
 80020b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80020b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80020c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80020d4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80020d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	edc7 7a08 	vstr	s15, [r7, #32]

    // Apply feedback
    qDot1 -= ahrs->beta * s0;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fa:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    qDot2 -= ahrs->beta * s1;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	ed93 7a00 	vldr	s14, [r3]
 8002104:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    qDot3 -= ahrs->beta * s2;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800212a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    qDot4 -= ahrs->beta * s3;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	ed93 7a00 	vldr	s14, [r3]
 8002138:	edd7 7a08 	vldr	s15, [r7, #32]
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Integrate rate of change of quaternion
    ahrs->q0 += qDot1 * ahrs->invSampleFreq;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	edd3 6a05 	vldr	s13, [r3, #20]
 8002158:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	edc3 7a01 	vstr	s15, [r3, #4]
    ahrs->q1 += qDot2 * ahrs->invSampleFreq;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	edd3 6a05 	vldr	s13, [r3, #20]
 8002176:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800217a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->q2 += qDot3 * ahrs->invSampleFreq;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	ed93 7a03 	vldr	s14, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	edd3 6a05 	vldr	s13, [r3, #20]
 8002194:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->q3 += qDot4 * ahrs->invSampleFreq;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	edd3 6a05 	vldr	s13, [r3, #20]
 80021b2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	edc3 7a04 	vstr	s15, [r3, #16]

    // Normalize quaternion
    recipNorm = invSqrt(ahrs->q0 * ahrs->q0 + ahrs->q1 * ahrs->q1 + ahrs->q2 * ahrs->q2 + ahrs->q3 * ahrs->q3);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80021d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	edd3 7a04 	vldr	s15, [r3, #16]
 8002208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	f7fe ff06 	bl	8001024 <invSqrt>
 8002218:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    ahrs->q0 *= recipNorm;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002222:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	edc3 7a01 	vstr	s15, [r3, #4]
    ahrs->q1 *= recipNorm;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	ed93 7a02 	vldr	s14, [r3, #8]
 8002236:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->q2 *= recipNorm;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	ed93 7a03 	vldr	s14, [r3, #12]
 800224a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->q3 *= recipNorm;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	ed93 7a04 	vldr	s14, [r3, #16]
 800225e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	edc3 7a04 	vstr	s15, [r3, #16]

    ahrs->anglesComputed = 0;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002274:	bf00      	nop
 8002276:	3760      	adds	r7, #96	@ 0x60
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	0000      	movs	r0, r0
	...

08002280 <Madgwick_getYaw>:
        // Compute angles
    }
    return ahrs->pitch * 57.29578f;
}

float Madgwick_getYaw(MadgwickAHRS *ahrs) {
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    if (!ahrs->anglesComputed) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d15a      	bne.n	8002348 <Madgwick_getYaw+0xc8>
        // Compute angles from quaternion
        ahrs->yaw = atan2(2.0f * (ahrs->q0 * ahrs->q3 + ahrs->q1 * ahrs->q2), 1.0f - 2.0f * (ahrs->q2 * ahrs->q2 + ahrs->q3 * ahrs->q3)) * 57.29578f + 180.0f;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	ed93 7a01 	vldr	s14, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	edd3 7a04 	vldr	s15, [r3, #16]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ba:	ee17 0a90 	vmov	r0, s15
 80022be:	f7fe f963 	bl	8000588 <__aeabi_f2d>
 80022c2:	4604      	mov	r4, r0
 80022c4:	460d      	mov	r5, r1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 6a04 	vldr	s13, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edd3 7a04 	vldr	s15, [r3, #16]
 80022e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe f945 	bl	8000588 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	ec43 2b11 	vmov	d1, r2, r3
 8002306:	ec45 4b10 	vmov	d0, r4, r5
 800230a:	f00c fd57 	bl	800edbc <atan2>
 800230e:	ec51 0b10 	vmov	r0, r1, d0
 8002312:	a314      	add	r3, pc, #80	@ (adr r3, 8002364 <Madgwick_getYaw+0xe4>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f98e 	bl	8000638 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <Madgwick_getYaw+0xe0>)
 800232a:	f7fd ffcf 	bl	80002cc <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f7fe fc77 	bl	8000c28 <__aeabi_d2f>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	621a      	str	r2, [r3, #32]
        ahrs->anglesComputed = 1;  // Mark angles as computed
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    return ahrs->yaw;  // Convert from radians to degrees and adjust
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	ee07 3a90 	vmov	s15, r3
}
 8002350:	eeb0 0a67 	vmov.f32	s0, s15
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	40668000 	.word	0x40668000
 8002364:	20000000 	.word	0x20000000
 8002368:	404ca5dc 	.word	0x404ca5dc

0800236c <USART1_IRQHandler>:
HAL_StatusTypeDef result2;
HAL_I2C_StateTypeDef state_result;
HAL_I2C_StateTypeDef state_result2;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART1_IRQHandler(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <USART1_IRQHandler+0x10>)
 8002372:	f007 fc2f 	bl	8009bd4 <HAL_UART_IRQHandler>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200005bc 	.word	0x200005bc

08002380 <calculate_auto_gyro_speed>:

// Auto Gyro Rotation Sensor ------------------------------------------------------------

// Speed calculation function
void calculate_auto_gyro_speed(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    auto_gyro_rotation_rate = (pulse_count * 360) / PULSES_PER_ROTATION;
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <calculate_auto_gyro_speed+0x38>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <calculate_auto_gyro_speed+0x3c>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <calculate_auto_gyro_speed+0x40>)
 80023a2:	edc3 7a00 	vstr	s15, [r3]
    pulse_count = 0;
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <calculate_auto_gyro_speed+0x38>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000864 	.word	0x20000864
 80023bc:	88888889 	.word	0x88888889
 80023c0:	20000640 	.word	0x20000640

080023c4 <Set_Servo_Angle>:

// Servo Motor Functions -------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t angle) {
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
    // Limit the angle between 0° and 180°
    if (angle > 180) {
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2bb4      	cmp	r3, #180	@ 0xb4
 80023d2:	d901      	bls.n	80023d8 <Set_Servo_Angle+0x14>
        angle = 180;
 80023d4:	23b4      	movs	r3, #180	@ 0xb4
 80023d6:	71fb      	strb	r3, [r7, #7]
    }

    // Map the angle to the pulse width
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
                           ((SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH) * angle) / 180;
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
 80023e2:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80023e6:	617b      	str	r3, [r7, #20]

    // Calculate the duty cycle for the given pulse width
    uint32_t tim_period = htim2.Init.Period + 1;   // Get the timer period
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <Set_Servo_Angle+0x54>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
    uint32_t pulse = (tim_period * pulse_width) / (1000000 / SERVO_FREQUENCY);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	4a08      	ldr	r2, [pc, #32]	@ (800241c <Set_Servo_Angle+0x58>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0b9b      	lsrs	r3, r3, #14
 8002400:	60fb      	str	r3, [r7, #12]

    // Set the pulse width to TIM2 Channel 3
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulse);
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <Set_Servo_Angle+0x54>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000574 	.word	0x20000574
 800241c:	d1b71759 	.word	0xd1b71759

08002420 <Servo_Open>:

void Servo_Open(){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
//	Set_Servo_Angle(SERVO_ANGLE_OPEN);
	unsigned char num_partitions = 20;
 8002426:	2314      	movs	r3, #20
 8002428:	70fb      	strb	r3, [r7, #3]
	for (int i = 1; i <= num_partitions; ++i){
 800242a:	2301      	movs	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	e013      	b.n	8002458 <Servo_Open+0x38>
		Set_Servo_Angle(SERVO_ANGLE_CLOSED + i * (SERVO_ANGLE_OPEN - SERVO_ANGLE_CLOSED) / num_partitions);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3b80      	subs	r3, #128	@ 0x80
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffbc 	bl	80023c4 <Set_Servo_Angle>
		HAL_Delay(25);
 800244c:	2019      	movs	r0, #25
 800244e:	f003 fbe3 	bl	8005c18 <HAL_Delay>
	for (int i = 1; i <= num_partitions; ++i){
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3301      	adds	r3, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dde7      	ble.n	8002430 <Servo_Open+0x10>
	}
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <Servo_Close>:

void Servo_Close(){
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
//	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
	unsigned char num_partitions = 20;
 8002470:	2314      	movs	r3, #20
 8002472:	70fb      	strb	r3, [r7, #3]
	for (int i = 1; i <= num_partitions; ++i){
 8002474:	2301      	movs	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	e012      	b.n	80024a0 <Servo_Close+0x36>
		Set_Servo_Angle(SERVO_ANGLE_OPEN + i * (SERVO_ANGLE_CLOSED - SERVO_ANGLE_OPEN) / num_partitions);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	222b      	movs	r2, #43	@ 0x2b
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	fb92 f3f3 	sdiv	r3, r2, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3355      	adds	r3, #85	@ 0x55
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff98 	bl	80023c4 <Set_Servo_Angle>
		HAL_Delay(25);
 8002494:	2019      	movs	r0, #25
 8002496:	f003 fbbf 	bl	8005c18 <HAL_Delay>
	for (int i = 1; i <= num_partitions; ++i){
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3301      	adds	r3, #1
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dde8      	ble.n	800247a <Servo_Close+0x10>
	}
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <Servo_Init>:

void Servo_Init() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Start PWM signal on TIM2 Channel 3
 80024b8:	2108      	movs	r1, #8
 80024ba:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <Servo_Init+0x10>)
 80024bc:	f006 fc68 	bl	8008d90 <HAL_TIM_PWM_Start>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000574 	.word	0x20000574

080024c8 <time_seconds>:

// Flash Data Functions ---------------------------------------------------------------------------------
uint32_t time_seconds(uint8_t hr, uint8_t min, uint8_t sec){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	717b      	strb	r3, [r7, #5]
	return 3600 * hr + 60 * min + sec;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024e0:	fb02 f103 	mul.w	r1, r2, r3
 80024e4:	79ba      	ldrb	r2, [r7, #6]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	18ca      	adds	r2, r1, r3
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	4413      	add	r3, r2
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <get_time_dif>:

int32_t get_time_dif(){
 8002500:	b598      	push	{r3, r4, r7, lr}
 8002502:	af00      	add	r7, sp, #0
	return time_seconds(mission_time_hr, mission_time_min, mission_time_sec) - time_seconds(gps_time_hr, gps_time_min, gps_time_sec);
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <get_time_dif+0x40>)
 8002506:	f993 3000 	ldrsb.w	r3, [r3]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <get_time_dif+0x44>)
 800250e:	f992 2000 	ldrsb.w	r2, [r2]
 8002512:	b2d1      	uxtb	r1, r2
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <get_time_dif+0x48>)
 8002516:	f992 2000 	ldrsb.w	r2, [r2]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ffd3 	bl	80024c8 <time_seconds>
 8002522:	4604      	mov	r4, r0
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <get_time_dif+0x4c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <get_time_dif+0x50>)
 800252a:	7811      	ldrb	r1, [r2, #0]
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <get_time_dif+0x54>)
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ffc9 	bl	80024c8 <time_seconds>
 8002536:	4603      	mov	r3, r0
 8002538:	1ae3      	subs	r3, r4, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd98      	pop	{r3, r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	20000604 	.word	0x20000604
 8002544:	20000605 	.word	0x20000605
 8002548:	20000606 	.word	0x20000606
 800254c:	20000644 	.word	0x20000644
 8002550:	20000645 	.word	0x20000645
 8002554:	20000646 	.word	0x20000646

08002558 <get_mission_time>:

void get_mission_time(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
	int32_t mission_time = (time_seconds(gps_time_hr, gps_time_min, gps_time_sec) + time_dif) % 86400;
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <get_mission_time+0xcc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4a31      	ldr	r2, [pc, #196]	@ (8002628 <get_mission_time+0xd0>)
 8002564:	7811      	ldrb	r1, [r2, #0]
 8002566:	4a31      	ldr	r2, [pc, #196]	@ (800262c <get_mission_time+0xd4>)
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffac 	bl	80024c8 <time_seconds>
 8002570:	4602      	mov	r2, r0
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <get_mission_time+0xd8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	441a      	add	r2, r3
 8002578:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <get_mission_time+0xdc>)
 800257a:	fba3 1302 	umull	r1, r3, r3, r2
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	492d      	ldr	r1, [pc, #180]	@ (8002638 <get_mission_time+0xe0>)
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	607b      	str	r3, [r7, #4]
	if (mission_time < 0) mission_time += 86400;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	da05      	bge.n	800259c <get_mission_time+0x44>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002596:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800259a:	607b      	str	r3, [r7, #4]
	mission_time_sec = mission_time % 60;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <get_mission_time+0xe4>)
 80025a0:	fb83 1302 	smull	r1, r3, r3, r2
 80025a4:	4413      	add	r3, r2
 80025a6:	1159      	asrs	r1, r3, #5
 80025a8:	17d3      	asrs	r3, r2, #31
 80025aa:	1ac9      	subs	r1, r1, r3
 80025ac:	460b      	mov	r3, r1
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a5b      	subs	r3, r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	1ad1      	subs	r1, r2, r3
 80025b6:	b24a      	sxtb	r2, r1
 80025b8:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <get_mission_time+0xe8>)
 80025ba:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_sec;
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <get_mission_time+0xe8>)
 80025be:	f993 3000 	ldrsb.w	r3, [r3]
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	607b      	str	r3, [r7, #4]
	mission_time_min = (mission_time % 3600) / 60;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <get_mission_time+0xec>)
 80025ce:	fb83 1302 	smull	r1, r3, r3, r2
 80025d2:	4413      	add	r3, r2
 80025d4:	12d9      	asrs	r1, r3, #11
 80025d6:	17d3      	asrs	r3, r2, #31
 80025d8:	1acb      	subs	r3, r1, r3
 80025da:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <get_mission_time+0xe4>)
 80025e6:	fb82 1203 	smull	r1, r2, r2, r3
 80025ea:	441a      	add	r2, r3
 80025ec:	1152      	asrs	r2, r2, #5
 80025ee:	17db      	asrs	r3, r3, #31
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b25a      	sxtb	r2, r3
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <get_mission_time+0xf0>)
 80025f6:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_min;
 80025f8:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <get_mission_time+0xf0>)
 80025fa:	f993 3000 	ldrsb.w	r3, [r3]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	607b      	str	r3, [r7, #4]
	mission_time_hr = mission_time / 3600;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <get_mission_time+0xec>)
 800260a:	fb82 1203 	smull	r1, r2, r2, r3
 800260e:	441a      	add	r2, r3
 8002610:	12d2      	asrs	r2, r2, #11
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <get_mission_time+0xf4>)
 800261a:	701a      	strb	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000644 	.word	0x20000644
 8002628:	20000645 	.word	0x20000645
 800262c:	20000646 	.word	0x20000646
 8002630:	2000085c 	.word	0x2000085c
 8002634:	c22e4507 	.word	0xc22e4507
 8002638:	00015180 	.word	0x00015180
 800263c:	88888889 	.word	0x88888889
 8002640:	20000606 	.word	0x20000606
 8002644:	91a2b3c5 	.word	0x91a2b3c5
 8002648:	20000605 	.word	0x20000605
 800264c:	20000604 	.word	0x20000604

08002650 <store_flash_data>:

void store_flash_data(){
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b092      	sub	sp, #72	@ 0x48
 8002656:	af00      	add	r7, sp, #0
	// Store altitude offset, magnetic offsets, mission time
	HAL_FLASH_Unlock();
 8002658:	f003 fcfa 	bl	8006050 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(SECTOR, FLASH_VOLTAGE_RANGE_2);
 800265c:	2101      	movs	r1, #1
 800265e:	200b      	movs	r0, #11
 8002660:	f003 fe68 	bl	8006334 <FLASH_Erase_Sector>
	HAL_Delay(100);
 8002664:	2064      	movs	r0, #100	@ 0x64
 8002666:	f003 fad7 	bl	8005c18 <HAL_Delay>

	uint32_t altitude_offset_bits, mag_x_offset_bits, mag_y_offset_bits, mag_z_offset_bits, apogee_altitude_bits;
	uint32_t payload_released_bits = payload_released ? 1 : 0;
 800266a:	4b54      	ldr	r3, [pc, #336]	@ (80027bc <store_flash_data+0x16c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40

	// Copy the float data into the 32-bit unsigned integer variables
	if (!isnan(altitude_offset)){
 800267a:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <store_flash_data+0x170>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eef4 7a67 	vcmp.f32	s15, s15
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	d602      	bvs.n	8002690 <store_flash_data+0x40>
		memcpy(&altitude_offset_bits, &altitude_offset, sizeof(altitude_offset));
 800268a:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <store_flash_data+0x170>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if (!isnan(mag_x_offset)){
 8002690:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <store_flash_data+0x174>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	eef4 7a67 	vcmp.f32	s15, s15
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d602      	bvs.n	80026a6 <store_flash_data+0x56>
		memcpy(&mag_x_offset_bits, &mag_x_offset, sizeof(mag_x_offset));
 80026a0:	4b48      	ldr	r3, [pc, #288]	@ (80027c4 <store_flash_data+0x174>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	if (!isnan(mag_y_offset)){
 80026a6:	4b48      	ldr	r3, [pc, #288]	@ (80027c8 <store_flash_data+0x178>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eef4 7a67 	vcmp.f32	s15, s15
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	d602      	bvs.n	80026bc <store_flash_data+0x6c>
		memcpy(&mag_y_offset_bits, &mag_y_offset, sizeof(mag_y_offset));
 80026b6:	4b44      	ldr	r3, [pc, #272]	@ (80027c8 <store_flash_data+0x178>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	if (!isnan(mag_z_offset)){
 80026bc:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <store_flash_data+0x17c>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	eef4 7a67 	vcmp.f32	s15, s15
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	d602      	bvs.n	80026d2 <store_flash_data+0x82>
		memcpy(&mag_z_offset_bits, &mag_z_offset, sizeof(mag_z_offset));
 80026cc:	4b3f      	ldr	r3, [pc, #252]	@ (80027cc <store_flash_data+0x17c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	memcpy(&apogee_altitude_bits, &apogee_altitude, sizeof(apogee_altitude));
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <store_flash_data+0x180>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ALTITUDE_OFFSET_ADDRESS, altitude_offset_bits);
 80026d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026da:	2200      	movs	r2, #0
 80026dc:	461c      	mov	r4, r3
 80026de:	4615      	mov	r5, r2
 80026e0:	4622      	mov	r2, r4
 80026e2:	462b      	mov	r3, r5
 80026e4:	493b      	ldr	r1, [pc, #236]	@ (80027d4 <store_flash_data+0x184>)
 80026e6:	2002      	movs	r0, #2
 80026e8:	f003 fc5e 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_X_OFFSET_ADDRESS, mag_x_offset_bits);
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	2200      	movs	r2, #0
 80026f0:	4698      	mov	r8, r3
 80026f2:	4691      	mov	r9, r2
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	4937      	ldr	r1, [pc, #220]	@ (80027d8 <store_flash_data+0x188>)
 80026fa:	2002      	movs	r0, #2
 80026fc:	f003 fc54 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Y_OFFSET_ADDRESS, mag_y_offset_bits);
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	2200      	movs	r2, #0
 8002704:	469a      	mov	sl, r3
 8002706:	4693      	mov	fp, r2
 8002708:	4652      	mov	r2, sl
 800270a:	465b      	mov	r3, fp
 800270c:	4933      	ldr	r1, [pc, #204]	@ (80027dc <store_flash_data+0x18c>)
 800270e:	2002      	movs	r0, #2
 8002710:	f003 fc4a 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Z_OFFSET_ADDRESS, mag_z_offset_bits);
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	2200      	movs	r2, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	627a      	str	r2, [r7, #36]	@ 0x24
 800271c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002720:	492f      	ldr	r1, [pc, #188]	@ (80027e0 <store_flash_data+0x190>)
 8002722:	2002      	movs	r0, #2
 8002724:	f003 fc40 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_TIME_DIF_ADDRESS, get_time_dif());
 8002728:	f7ff feea 	bl	8002500 <get_time_dif>
 800272c:	4603      	mov	r3, r0
 800272e:	17da      	asrs	r2, r3, #31
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	492a      	ldr	r1, [pc, #168]	@ (80027e4 <store_flash_data+0x194>)
 800273a:	2002      	movs	r0, #2
 800273c:	f003 fc34 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_APOGEE_ALT_ADDRESS, apogee_altitude_bits);
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	2200      	movs	r2, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	617a      	str	r2, [r7, #20]
 8002748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800274c:	4926      	ldr	r1, [pc, #152]	@ (80027e8 <store_flash_data+0x198>)
 800274e:	2002      	movs	r0, #2
 8002750:	f003 fc2a 	bl	8005fa8 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_PAYLOAD_RELEASED_ADDRESS, payload_released_bits);
 8002754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002756:	2200      	movs	r2, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	60fa      	str	r2, [r7, #12]
 800275c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002760:	4922      	ldr	r1, [pc, #136]	@ (80027ec <store_flash_data+0x19c>)
 8002762:	2002      	movs	r0, #2
 8002764:	f003 fc20 	bl	8005fa8 <HAL_FLASH_Program>

	for (uint16_t i = 0; i < 14; i++) {
 8002768:	2300      	movs	r3, #0
 800276a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800276e:	e016      	b.n	800279e <store_flash_data+0x14e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_STATE_ADDRESS + i, state[i]);
 8002770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <store_flash_data+0x1a0>)
 8002776:	4413      	add	r3, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <store_flash_data+0x1a4>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2200      	movs	r2, #0
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278e:	2000      	movs	r0, #0
 8002790:	f003 fc0a 	bl	8005fa8 <HAL_FLASH_Program>
	for (uint16_t i = 0; i < 14; i++) {
 8002794:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002798:	3301      	adds	r3, #1
 800279a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800279e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80027a2:	2b0d      	cmp	r3, #13
 80027a4:	d9e4      	bls.n	8002770 <store_flash_data+0x120>
	}
	HAL_Delay(100);
 80027a6:	2064      	movs	r0, #100	@ 0x64
 80027a8:	f003 fa36 	bl	8005c18 <HAL_Delay>

	HAL_FLASH_Lock();
 80027ac:	f003 fc72 	bl	8006094 <HAL_FLASH_Lock>
}
 80027b0:	bf00      	nop
 80027b2:	3748      	adds	r7, #72	@ 0x48
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ba:	bf00      	nop
 80027bc:	20000b10 	.word	0x20000b10
 80027c0:	20000a00 	.word	0x20000a00
 80027c4:	200009e4 	.word	0x200009e4
 80027c8:	200009e8 	.word	0x200009e8
 80027cc:	200009ec 	.word	0x200009ec
 80027d0:	20000b0c 	.word	0x20000b0c
 80027d4:	080e0000 	.word	0x080e0000
 80027d8:	080e0004 	.word	0x080e0004
 80027dc:	080e0008 	.word	0x080e0008
 80027e0:	080e000c 	.word	0x080e000c
 80027e4:	080e0010 	.word	0x080e0010
 80027e8:	080e0014 	.word	0x080e0014
 80027ec:	080e0018 	.word	0x080e0018
 80027f0:	080e001c 	.word	0x080e001c
 80027f4:	20000004 	.word	0x20000004

080027f8 <load_flash_data>:

void load_flash_data(){
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80027fe:	f003 fc27 	bl	8006050 <HAL_FLASH_Unlock>

//	altitude_offset = * (float*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = *(float*)FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (float*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (float*) FLASH_MAG_Z_OFFSET_ADDRESS;
	memcpy(&altitude_offset, (float*)FLASH_ALTITUDE_OFFSET_ADDRESS, sizeof(float));
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <load_flash_data+0x6c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <load_flash_data+0x70>)
 8002808:	6013      	str	r3, [r2, #0]
	memcpy(&mag_x_offset, (float*)FLASH_MAG_X_OFFSET_ADDRESS, sizeof(float));
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <load_flash_data+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a18      	ldr	r2, [pc, #96]	@ (8002870 <load_flash_data+0x78>)
 8002810:	6013      	str	r3, [r2, #0]
	memcpy(&mag_y_offset, (float*)FLASH_MAG_Y_OFFSET_ADDRESS, sizeof(float));
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <load_flash_data+0x7c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <load_flash_data+0x80>)
 8002818:	6013      	str	r3, [r2, #0]
	memcpy(&mag_z_offset, (float*)FLASH_MAG_Z_OFFSET_ADDRESS, sizeof(float));
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <load_flash_data+0x84>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <load_flash_data+0x88>)
 8002820:	6013      	str	r3, [r2, #0]
	memcpy(&time_dif, (int32_t*)FLASH_TIME_DIF_ADDRESS, sizeof(int32_t));
 8002822:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <load_flash_data+0x8c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <load_flash_data+0x90>)
 8002828:	6013      	str	r3, [r2, #0]
	memcpy(&apogee_altitude, (float*)FLASH_APOGEE_ALT_ADDRESS, sizeof(float));
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <load_flash_data+0x94>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <load_flash_data+0x98>)
 8002830:	6013      	str	r3, [r2, #0]

	uint32_t readWord;
	memcpy(&readWord, (uint32_t*)FLASH_PAYLOAD_RELEASED_ADDRESS, sizeof(uint32_t));
 8002832:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <load_flash_data+0x9c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	607b      	str	r3, [r7, #4]
	payload_released = (readWord != 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <load_flash_data+0xa0>)
 8002848:	701a      	strb	r2, [r3, #0]

	memcpy(state, (uint8_t*)FLASH_STATE_ADDRESS, 14);
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <load_flash_data+0xa4>)
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <load_flash_data+0xa8>)
 800284e:	4614      	mov	r4, r2
 8002850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002852:	c407      	stmia	r4!, {r0, r1, r2}
 8002854:	8023      	strh	r3, [r4, #0]

	HAL_FLASH_Lock();
 8002856:	f003 fc1d 	bl	8006094 <HAL_FLASH_Lock>
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	080e0000 	.word	0x080e0000
 8002868:	20000a00 	.word	0x20000a00
 800286c:	080e0004 	.word	0x080e0004
 8002870:	200009e4 	.word	0x200009e4
 8002874:	080e0008 	.word	0x080e0008
 8002878:	200009e8 	.word	0x200009e8
 800287c:	080e000c 	.word	0x080e000c
 8002880:	200009ec 	.word	0x200009ec
 8002884:	080e0010 	.word	0x080e0010
 8002888:	2000085c 	.word	0x2000085c
 800288c:	080e0014 	.word	0x080e0014
 8002890:	20000b0c 	.word	0x20000b0c
 8002894:	080e0018 	.word	0x080e0018
 8002898:	20000b10 	.word	0x20000b10
 800289c:	20000004 	.word	0x20000004
 80028a0:	080e001c 	.word	0x080e001c

080028a4 <set_gps>:

// Sensor Read Functions -----------------------------------------------------------------------------
uint8_t set_gps(char* buf, uint8_t order){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <set_gps+0x18>
		return 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e0c8      	b.n	8002a4e <set_gps+0x1aa>

	switch(order) {
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	f200 80bd 	bhi.w	8002a3e <set_gps+0x19a>
 80028c4:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <set_gps+0x28>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	0800292d 	.word	0x0800292d
 80028d4:	08002981 	.word	0x08002981
 80028d8:	080029a9 	.word	0x080029a9
 80028dc:	080029cb 	.word	0x080029cb
 80028e0:	080029f3 	.word	0x080029f3
 80028e4:	08002a3f 	.word	0x08002a3f
 80028e8:	08002a15 	.word	0x08002a15
 80028ec:	08002a3f 	.word	0x08002a3f
 80028f0:	08002a25 	.word	0x08002a25
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fd fcdb 	bl	80002b0 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d913      	bls.n	8002928 <set_gps+0x84>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b47      	cmp	r3, #71	@ 0x47
 8002906:	d10f      	bne.n	8002928 <set_gps+0x84>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b47      	cmp	r3, #71	@ 0x47
 8002910:	d10a      	bne.n	8002928 <set_gps+0x84>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3303      	adds	r3, #3
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b47      	cmp	r3, #71	@ 0x47
 800291a:	d105      	bne.n	8002928 <set_gps+0x84>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b41      	cmp	r3, #65	@ 0x41
 8002924:	f000 808d 	beq.w	8002a42 <set_gps+0x19e>
			return 1;
 8002928:	2301      	movs	r3, #1
 800292a:	e090      	b.n	8002a4e <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4618      	mov	r0, r3
 800293a:	f008 f8a2 	bl	800aa82 <atoi>
 800293e:	4603      	mov	r3, r0
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b45      	ldr	r3, [pc, #276]	@ (8002a58 <set_gps+0x1b4>)
 8002944:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4618      	mov	r0, r3
 8002956:	f008 f894 	bl	800aa82 <atoi>
 800295a:	4603      	mov	r3, r0
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <set_gps+0x1b8>)
 8002960:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4618      	mov	r0, r3
 8002972:	f008 f886 	bl	800aa82 <atoi>
 8002976:	4603      	mov	r3, r0
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <set_gps+0x1bc>)
 800297c:	701a      	strb	r2, [r3, #0]

		break;
 800297e:	e065      	b.n	8002a4c <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f008 f87b 	bl	800aa7c <atof>
 8002986:	ec51 0b10 	vmov	r0, r1, d0
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b35      	ldr	r3, [pc, #212]	@ (8002a64 <set_gps+0x1c0>)
 8002990:	f7fd ff7c 	bl	800088c <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f944 	bl	8000c28 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a31      	ldr	r2, [pc, #196]	@ (8002a68 <set_gps+0x1c4>)
 80029a4:	6013      	str	r3, [r2, #0]
		break;
 80029a6:	e051      	b.n	8002a4c <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <set_gps+0x1c8>)
 80029ae:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 80029b0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <set_gps+0x1c8>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b53      	cmp	r3, #83	@ 0x53
 80029b6:	d146      	bne.n	8002a46 <set_gps+0x1a2>
			gps_latitude*= -1;
 80029b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <set_gps+0x1c4>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	eef1 7a67 	vneg.f32	s15, s15
 80029c2:	4b29      	ldr	r3, [pc, #164]	@ (8002a68 <set_gps+0x1c4>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80029c8:	e03d      	b.n	8002a46 <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f008 f856 	bl	800aa7c <atof>
 80029d0:	ec51 0b10 	vmov	r0, r1, d0
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <set_gps+0x1c0>)
 80029da:	f7fd ff57 	bl	800088c <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f91f 	bl	8000c28 <__aeabi_d2f>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <set_gps+0x1cc>)
 80029ee:	6013      	str	r3, [r2, #0]
		break;
 80029f0:	e02c      	b.n	8002a4c <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <set_gps+0x1d0>)
 80029f8:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <set_gps+0x1d0>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b57      	cmp	r3, #87	@ 0x57
 8002a00:	d123      	bne.n	8002a4a <set_gps+0x1a6>
			gps_longitude*= -1;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <set_gps+0x1cc>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	eef1 7a67 	vneg.f32	s15, s15
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <set_gps+0x1cc>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8002a12:	e01a      	b.n	8002a4a <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f008 f834 	bl	800aa82 <atoi>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <set_gps+0x1d4>)
 8002a20:	701a      	strb	r2, [r3, #0]
		break;
 8002a22:	e013      	b.n	8002a4c <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f008 f829 	bl	800aa7c <atof>
 8002a2a:	ec53 2b10 	vmov	r2, r3, d0
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fe f8f9 	bl	8000c28 <__aeabi_d2f>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <set_gps+0x1d8>)
 8002a3a:	6013      	str	r3, [r2, #0]
		break;
 8002a3c:	e006      	b.n	8002a4c <set_gps+0x1a8>
	default:
		break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a4a:	bf00      	nop
	}

	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000644 	.word	0x20000644
 8002a5c:	20000645 	.word	0x20000645
 8002a60:	20000646 	.word	0x20000646
 8002a64:	40590000 	.word	0x40590000
 8002a68:	2000064c 	.word	0x2000064c
 8002a6c:	20000857 	.word	0x20000857
 8002a70:	20000650 	.word	0x20000650
 8002a74:	20000858 	.word	0x20000858
 8002a78:	20000654 	.word	0x20000654
 8002a7c:	20000648 	.word	0x20000648

08002a80 <parse_nmea>:

bool parse_nmea(char *buf){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e032      	b.n	8002afc <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002aa0:	d123      	bne.n	8002aea <parse_nmea+0x6a>
			if (last != i){
 8002aa2:	7bba      	ldrb	r2, [r7, #14]
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d018      	beq.n	8002adc <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 8002aaa:	22ff      	movs	r2, #255	@ 0xff
 8002aac:	2100      	movs	r1, #0
 8002aae:	4818      	ldr	r0, [pc, #96]	@ (8002b10 <parse_nmea+0x90>)
 8002ab0:	f009 fc0f 	bl	800c2d2 <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4813      	ldr	r0, [pc, #76]	@ (8002b10 <parse_nmea+0x90>)
 8002ac4:	f009 fcc1 	bl	800c44a <memcpy>
				if(set_gps(parse_buf, order)){
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4810      	ldr	r0, [pc, #64]	@ (8002b10 <parse_nmea+0x90>)
 8002ace:	f7ff fee9 	bl	80028a4 <set_gps>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <parse_nmea+0x5c>
					return false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e015      	b.n	8002b08 <parse_nmea+0x88>
				}
			}
			last = i + 1;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	737b      	strb	r3, [r7, #13]
 8002ae8:	e005      	b.n	8002af6 <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af4:	d006      	beq.n	8002b04 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	3301      	adds	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2bff      	cmp	r3, #255	@ 0xff
 8002b00:	d1c9      	bne.n	8002a96 <parse_nmea+0x16>
 8002b02:	e000      	b.n	8002b06 <parse_nmea+0x86>
			break;
 8002b04:	bf00      	nop
		}
	}

	return true;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000758 	.word	0x20000758
 8002b14:	00000000 	.word	0x00000000

08002b18 <calculate_altitude>:

float calculate_altitude(float pressure) {
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fd30 	bl	8000588 <__aeabi_f2d>
 8002b28:	a323      	add	r3, pc, #140	@ (adr r3, 8002bb8 <calculate_altitude+0xa0>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fead 	bl	800088c <__aeabi_ddiv>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fe f875 	bl	8000c28 <__aeabi_d2f>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8002bb0 <calculate_altitude+0x98>
 8002b44:	ee00 3a10 	vmov	s0, r3
 8002b48:	f00c f966 	bl	800ee18 <powf>
 8002b4c:	eef0 7a40 	vmov.f32	s15, s0
 8002b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b58:	ee17 0a90 	vmov	r0, s15
 8002b5c:	f7fd fd14 	bl	8000588 <__aeabi_f2d>
 8002b60:	a311      	add	r3, pc, #68	@ (adr r3, 8002ba8 <calculate_altitude+0x90>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd67 	bl	8000638 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4614      	mov	r4, r2
 8002b70:	461d      	mov	r5, r3
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <calculate_altitude+0x9c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd06 	bl	8000588 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4620      	mov	r0, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7fd fba2 	bl	80002cc <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fe f84a 	bl	8000c28 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	ee07 3a90 	vmov	s15, r3
}
 8002b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	a3d70a3d 	.word	0xa3d70a3d
 8002bac:	40e5a558 	.word	0x40e5a558
 8002bb0:	3e42d45b 	.word	0x3e42d45b
 8002bb4:	20000a00 	.word	0x20000a00
 8002bb8:	2f1a9fbe 	.word	0x2f1a9fbe
 8002bbc:	405954dd 	.word	0x405954dd

08002bc0 <read_MMC5603>:

void read_MMC5603(void) {
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	HAL_I2C_Master_Transmit(&hi2c1, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY);
 8002bca:	1dfa      	adds	r2, r7, #7
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2160      	movs	r1, #96	@ 0x60
 8002bd6:	4882      	ldr	r0, [pc, #520]	@ (8002de0 <read_MMC5603+0x220>)
 8002bd8:	f003 fef2 	bl	80069c0 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8002bdc:	4b81      	ldr	r3, [pc, #516]	@ (8002de4 <read_MMC5603+0x224>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 80ed 	bne.w	8002dc0 <read_MMC5603+0x200>
	}

//	HAL_Delay(10);

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c1, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 8002be6:	f107 0208 	add.w	r2, r7, #8
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	2160      	movs	r1, #96	@ 0x60
 8002bf4:	487a      	ldr	r0, [pc, #488]	@ (8002de0 <read_MMC5603+0x220>)
 8002bf6:	f003 ffe1 	bl	8006bbc <HAL_I2C_Master_Receive>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 80e1 	bne.w	8002dc4 <read_MMC5603+0x204>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 8002c02:	7a3b      	ldrb	r3, [r7, #8]
 8002c04:	031a      	lsls	r2, r3, #12
 8002c06:	7a7b      	ldrb	r3, [r7, #9]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	7bba      	ldrb	r2, [r7, #14]
 8002c0e:	0912      	lsrs	r2, r2, #4
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 8002c16:	7abb      	ldrb	r3, [r7, #10]
 8002c18:	031a      	lsls	r2, r3, #12
 8002c1a:	7afb      	ldrb	r3, [r7, #11]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	0912      	lsrs	r2, r2, #4
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 8002c2a:	7b3b      	ldrb	r3, [r7, #12]
 8002c2c:	031a      	lsls	r2, r3, #12
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4313      	orrs	r3, r2
 8002c34:	7c3a      	ldrb	r2, [r7, #16]
 8002c36:	0912      	lsrs	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c44:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c4c:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c54:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625 - mag_x_offset;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c60:	ee17 0a90 	vmov	r0, s15
 8002c64:	f7fd fc90 	bl	8000588 <__aeabi_f2d>
 8002c68:	a359      	add	r3, pc, #356	@ (adr r3, 8002dd0 <read_MMC5603+0x210>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd fce3 	bl	8000638 <__aeabi_dmul>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4614      	mov	r4, r2
 8002c78:	461d      	mov	r5, r3
 8002c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002de8 <read_MMC5603+0x228>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd fc82 	bl	8000588 <__aeabi_f2d>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	f7fd fb1c 	bl	80002c8 <__aeabi_dsub>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7fd ffc6 	bl	8000c28 <__aeabi_d2f>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a53      	ldr	r2, [pc, #332]	@ (8002dec <read_MMC5603+0x22c>)
 8002ca0:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625 - mag_y_offset;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	ee07 3a90 	vmov	s15, r3
 8002ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cac:	ee17 0a90 	vmov	r0, s15
 8002cb0:	f7fd fc6a 	bl	8000588 <__aeabi_f2d>
 8002cb4:	a346      	add	r3, pc, #280	@ (adr r3, 8002dd0 <read_MMC5603+0x210>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fcbd 	bl	8000638 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	461d      	mov	r5, r3
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <read_MMC5603+0x230>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc5c 	bl	8000588 <__aeabi_f2d>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd faf6 	bl	80002c8 <__aeabi_dsub>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4610      	mov	r0, r2
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7fd ffa0 	bl	8000c28 <__aeabi_d2f>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a42      	ldr	r2, [pc, #264]	@ (8002df4 <read_MMC5603+0x234>)
 8002cec:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625 - mag_z_offset;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cf8:	ee17 0a90 	vmov	r0, s15
 8002cfc:	f7fd fc44 	bl	8000588 <__aeabi_f2d>
 8002d00:	a333      	add	r3, pc, #204	@ (adr r3, 8002dd0 <read_MMC5603+0x210>)
 8002d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d06:	f7fd fc97 	bl	8000638 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4614      	mov	r4, r2
 8002d10:	461d      	mov	r5, r3
 8002d12:	4b39      	ldr	r3, [pc, #228]	@ (8002df8 <read_MMC5603+0x238>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc36 	bl	8000588 <__aeabi_f2d>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4620      	mov	r0, r4
 8002d22:	4629      	mov	r1, r5
 8002d24:	f7fd fad0 	bl	80002c8 <__aeabi_dsub>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	f7fd ff7a 	bl	8000c28 <__aeabi_d2f>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <read_MMC5603+0x23c>)
 8002d38:	6013      	str	r3, [r2, #0]

	direction = atan2(mag_y, mag_x) * 180 / PI;
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <read_MMC5603+0x234>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fc22 	bl	8000588 <__aeabi_f2d>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <read_MMC5603+0x22c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fc1b 	bl	8000588 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b11 	vmov	d1, r2, r3
 8002d5a:	ec45 4b10 	vmov	d0, r4, r5
 8002d5e:	f00c f82d 	bl	800edbc <atan2>
 8002d62:	ec51 0b10 	vmov	r0, r1, d0
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <read_MMC5603+0x240>)
 8002d6c:	f7fd fc64 	bl	8000638 <__aeabi_dmul>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	a317      	add	r3, pc, #92	@ (adr r3, 8002dd8 <read_MMC5603+0x218>)
 8002d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7e:	f7fd fd85 	bl	800088c <__aeabi_ddiv>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	491f      	ldr	r1, [pc, #124]	@ (8002e04 <read_MMC5603+0x244>)
 8002d88:	e9c1 2300 	strd	r2, r3, [r1]
	if (direction < 0){
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <read_MMC5603+0x244>)
 8002d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f7fd febf 	bl	8000b1c <__aeabi_dcmplt>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <read_MMC5603+0x206>
		direction += 360;
 8002da4:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <read_MMC5603+0x244>)
 8002da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <read_MMC5603+0x248>)
 8002db0:	f7fd fa8c 	bl	80002cc <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4912      	ldr	r1, [pc, #72]	@ (8002e04 <read_MMC5603+0x244>)
 8002dba:	e9c1 2300 	strd	r2, r3, [r1]
 8002dbe:	e002      	b.n	8002dc6 <read_MMC5603+0x206>
		return;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <read_MMC5603+0x206>
		return;
 8002dc4:	bf00      	nop
	}
}
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bdb0      	pop	{r4, r5, r7, pc}
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dd4:	3f10624d 	.word	0x3f10624d
 8002dd8:	fc8b007a 	.word	0xfc8b007a
 8002ddc:	400921fa 	.word	0x400921fa
 8002de0:	200004cc 	.word	0x200004cc
 8002de4:	20000b18 	.word	0x20000b18
 8002de8:	200009e4 	.word	0x200009e4
 8002dec:	20000634 	.word	0x20000634
 8002df0:	200009e8 	.word	0x200009e8
 8002df4:	20000638 	.word	0x20000638
 8002df8:	200009ec 	.word	0x200009ec
 8002dfc:	2000063c 	.word	0x2000063c
 8002e00:	40668000 	.word	0x40668000
 8002e04:	20000868 	.word	0x20000868
 8002e08:	40768000 	.word	0x40768000

08002e0c <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_StatusTypeDef mpl_ret = HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	9302      	str	r3, [sp, #8]
 8002e18:	2309      	movs	r3, #9
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2301      	movs	r3, #1
 8002e22:	2201      	movs	r2, #1
 8002e24:	21c0      	movs	r1, #192	@ 0xc0
 8002e26:	482d      	ldr	r0, [pc, #180]	@ (8002edc <read_MPL3115A2+0xd0>)
 8002e28:	f004 f9f4 	bl	8007214 <HAL_I2C_Mem_Read>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	73fb      	strb	r3, [r7, #15]

    if (mpl_ret == HAL_OK){
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14e      	bne.n	8002ed4 <read_MPL3115A2+0xc8>
    	// Combine pressure bytes into a 20-bit integer
		uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8002e36:	783b      	ldrb	r3, [r7, #0]
 8002e38:	041a      	lsls	r2, r3, #16
 8002e3a:	787b      	ldrb	r3, [r7, #1]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	78ba      	ldrb	r2, [r7, #2]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]
		p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	60bb      	str	r3, [r7, #8]

		// Convert raw pressure to Pascals
		pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8002e4c:	68b8      	ldr	r0, [r7, #8]
 8002e4e:	f7fd fb79 	bl	8000544 <__aeabi_ui2d>
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <read_MPL3115A2+0xd4>)
 8002e58:	f7fd fd18 	bl	800088c <__aeabi_ddiv>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <read_MPL3115A2+0xd8>)
 8002e6a:	f7fd fd0f 	bl	800088c <__aeabi_ddiv>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f7fd fed7 	bl	8000c28 <__aeabi_d2f>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <read_MPL3115A2+0xdc>)
 8002e7e:	6013      	str	r3, [r2, #0]

		// Combine temperature bytes into a 12-bit integer
		int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	793b      	ldrb	r3, [r7, #4]
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
		t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8002e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e92:	111b      	asrs	r3, r3, #4
 8002e94:	80fb      	strh	r3, [r7, #6]

		// Convert raw temperature to degrees Celsius
		temperature = t_raw / 16.0; // Temperature in Celsius
 8002e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb62 	bl	8000564 <__aeabi_i2d>
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <read_MPL3115A2+0xe0>)
 8002ea6:	f7fd fcf1 	bl	800088c <__aeabi_ddiv>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f7fd feb9 	bl	8000c28 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <read_MPL3115A2+0xe4>)
 8002eba:	6013      	str	r3, [r2, #0]

		altitude = calculate_altitude(pressure);
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <read_MPL3115A2+0xdc>)
 8002ebe:	edd3 7a00 	vldr	s15, [r3]
 8002ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec6:	f7ff fe27 	bl	8002b18 <calculate_altitude>
 8002eca:	eef0 7a40 	vmov.f32	s15, s0
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <read_MPL3115A2+0xe8>)
 8002ed0:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200004cc 	.word	0x200004cc
 8002ee0:	40100000 	.word	0x40100000
 8002ee4:	408f4000 	.word	0x408f4000
 8002ee8:	20000614 	.word	0x20000614
 8002eec:	40300000 	.word	0x40300000
 8002ef0:	20000610 	.word	0x20000610
 8002ef4:	2000060c 	.word	0x2000060c

08002ef8 <calibrate_altitude>:

void calibrate_altitude(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2309      	movs	r3, #9
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2201      	movs	r2, #1
 8002f10:	21c0      	movs	r1, #192	@ 0xc0
 8002f12:	4831      	ldr	r0, [pc, #196]	@ (8002fd8 <calibrate_altitude+0xe0>)
 8002f14:	f004 f97e 	bl	8007214 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8002f18:	793b      	ldrb	r3, [r7, #4]
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	797b      	ldrb	r3, [r7, #5]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	4313      	orrs	r3, r2
 8002f22:	79ba      	ldrb	r2, [r7, #6]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fd fb08 	bl	8000544 <__aeabi_ui2d>
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <calibrate_altitude+0xe4>)
 8002f3a:	f7fd fca7 	bl	800088c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <calibrate_altitude+0xe8>)
 8002f4c:	f7fd fc9e 	bl	800088c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe66 	bl	8000c28 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <calibrate_altitude+0xec>)
 8002f60:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	b21a      	sxth	r2, r3
 8002f68:	7a3b      	ldrb	r3, [r7, #8]
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8002f70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f74:	111b      	asrs	r3, r3, #4
 8002f76:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8002f78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd faf1 	bl	8000564 <__aeabi_i2d>
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <calibrate_altitude+0xf0>)
 8002f88:	f7fd fc80 	bl	800088c <__aeabi_ddiv>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd fe48 	bl	8000c28 <__aeabi_d2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <calibrate_altitude+0xf4>)
 8002f9c:	6013      	str	r3, [r2, #0]

    altitude_offset = 0;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <calibrate_altitude+0xf8>)
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    altitude = calculate_altitude(pressure);
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <calibrate_altitude+0xec>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	f7ff fdb2 	bl	8002b18 <calculate_altitude>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <calibrate_altitude+0xfc>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
    altitude_offset = -altitude;
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <calibrate_altitude+0xfc>)
 8002fc0:	edd3 7a00 	vldr	s15, [r3]
 8002fc4:	eef1 7a67 	vneg.f32	s15, s15
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <calibrate_altitude+0xf8>)
 8002fca:	edc3 7a00 	vstr	s15, [r3]
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200004cc 	.word	0x200004cc
 8002fdc:	40100000 	.word	0x40100000
 8002fe0:	408f4000 	.word	0x408f4000
 8002fe4:	20000614 	.word	0x20000614
 8002fe8:	40300000 	.word	0x40300000
 8002fec:	20000610 	.word	0x20000610
 8002ff0:	20000a00 	.word	0x20000a00
 8002ff4:	2000060c 	.word	0x2000060c

08002ff8 <read_MPU6050>:

void read_MPU6050(void) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8002ffe:	233b      	movs	r3, #59	@ 0x3b
 8003000:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 8003002:	2343      	movs	r3, #67	@ 0x43
 8003004:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDRESS, 3, 5);
 8003012:	2305      	movs	r3, #5
 8003014:	2203      	movs	r2, #3
 8003016:	21d0      	movs	r1, #208	@ 0xd0
 8003018:	4871      	ldr	r0, [pc, #452]	@ (80031e0 <read_MPU6050+0x1e8>)
 800301a:	f004 fb2d 	bl	8007678 <HAL_I2C_IsDeviceReady>
 800301e:	4603      	mov	r3, r0
 8003020:	747b      	strb	r3, [r7, #17]
	if (mpu_ret == HAL_OK){
 8003022:	7c7b      	ldrb	r3, [r7, #17]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 80d2 	bne.w	80031ce <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &imu_addr, 1, 100);
 800302a:	f107 0209 	add.w	r2, r7, #9
 800302e:	2364      	movs	r3, #100	@ 0x64
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	21d0      	movs	r1, #208	@ 0xd0
 8003036:	486a      	ldr	r0, [pc, #424]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003038:	f003 fcc2 	bl	80069c0 <HAL_I2C_Master_Transmit>
 800303c:	4603      	mov	r3, r0
 800303e:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8003040:	7c7b      	ldrb	r3, [r7, #17]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15a      	bne.n	80030fc <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8003046:	463a      	mov	r2, r7
 8003048:	2364      	movs	r3, #100	@ 0x64
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2306      	movs	r3, #6
 800304e:	21d0      	movs	r1, #208	@ 0xd0
 8003050:	4863      	ldr	r0, [pc, #396]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003052:	f003 fdb3 	bl	8006bbc <HAL_I2C_Master_Receive>
 8003056:	4603      	mov	r3, r0
 8003058:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800305a:	7c7b      	ldrb	r3, [r7, #17]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d14d      	bne.n	80030fc <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 8003060:	783b      	ldrb	r3, [r7, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b21a      	sxth	r2, r3
 8003066:	787b      	ldrb	r3, [r7, #1]
 8003068:	b21b      	sxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 800306e:	78bb      	ldrb	r3, [r7, #2]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b21a      	sxth	r2, r3
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 800307c:	793b      	ldrb	r3, [r7, #4]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	b21a      	sxth	r2, r3
 8003082:	797b      	ldrb	r3, [r7, #5]
 8003084:	b21b      	sxth	r3, r3
 8003086:	4313      	orrs	r3, r2
 8003088:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 800308a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa68 	bl	8000564 <__aeabi_i2d>
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	4b52      	ldr	r3, [pc, #328]	@ (80031e4 <read_MPU6050+0x1ec>)
 800309a:	f7fd fbf7 	bl	800088c <__aeabi_ddiv>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fdbf 	bl	8000c28 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a4e      	ldr	r2, [pc, #312]	@ (80031e8 <read_MPU6050+0x1f0>)
 80030ae:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 80030b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fa55 	bl	8000564 <__aeabi_i2d>
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	4b49      	ldr	r3, [pc, #292]	@ (80031e4 <read_MPU6050+0x1ec>)
 80030c0:	f7fd fbe4 	bl	800088c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fdac 	bl	8000c28 <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <read_MPU6050+0x1f4>)
 80030d4:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 80030d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa42 	bl	8000564 <__aeabi_i2d>
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <read_MPU6050+0x1ec>)
 80030e6:	f7fd fbd1 	bl	800088c <__aeabi_ddiv>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fd99 	bl	8000c28 <__aeabi_d2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a3d      	ldr	r2, [pc, #244]	@ (80031f0 <read_MPU6050+0x1f8>)
 80030fa:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 80030fc:	f107 0208 	add.w	r2, r7, #8
 8003100:	2364      	movs	r3, #100	@ 0x64
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2301      	movs	r3, #1
 8003106:	21d0      	movs	r1, #208	@ 0xd0
 8003108:	4835      	ldr	r0, [pc, #212]	@ (80031e0 <read_MPU6050+0x1e8>)
 800310a:	f003 fc59 	bl	80069c0 <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8003112:	7c7b      	ldrb	r3, [r7, #17]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d15a      	bne.n	80031ce <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8003118:	463a      	mov	r2, r7
 800311a:	2364      	movs	r3, #100	@ 0x64
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2306      	movs	r3, #6
 8003120:	21d0      	movs	r1, #208	@ 0xd0
 8003122:	482f      	ldr	r0, [pc, #188]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003124:	f003 fd4a 	bl	8006bbc <HAL_I2C_Master_Receive>
 8003128:	4603      	mov	r3, r0
 800312a:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800312c:	7c7b      	ldrb	r3, [r7, #17]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14d      	bne.n	80031ce <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 8003132:	783b      	ldrb	r3, [r7, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b21a      	sxth	r2, r3
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	b21b      	sxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 8003140:	78bb      	ldrb	r3, [r7, #2]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21a      	sxth	r2, r3
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	b21b      	sxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 800314e:	793b      	ldrb	r3, [r7, #4]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	b21a      	sxth	r2, r3
 8003154:	797b      	ldrb	r3, [r7, #5]
 8003156:	b21b      	sxth	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 800315c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9ff 	bl	8000564 <__aeabi_i2d>
 8003166:	a31c      	add	r3, pc, #112	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fb8e 	bl	800088c <__aeabi_ddiv>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fd56 	bl	8000c28 <__aeabi_d2f>
 800317c:	4603      	mov	r3, r0
 800317e:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <read_MPU6050+0x1fc>)
 8003180:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 8003182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9ec 	bl	8000564 <__aeabi_i2d>
 800318c:	a312      	add	r3, pc, #72	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fb7b 	bl	800088c <__aeabi_ddiv>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd43 	bl	8000c28 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <read_MPU6050+0x200>)
 80031a6:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 80031a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9d9 	bl	8000564 <__aeabi_i2d>
 80031b2:	a309      	add	r3, pc, #36	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd fb68 	bl	800088c <__aeabi_ddiv>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fd fd30 	bl	8000c28 <__aeabi_d2f>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a0c      	ldr	r2, [pc, #48]	@ (80031fc <read_MPU6050+0x204>)
 80031cc:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40606000 	.word	0x40606000
 80031e0:	200004cc 	.word	0x200004cc
 80031e4:	40d00000 	.word	0x40d00000
 80031e8:	20000628 	.word	0x20000628
 80031ec:	2000062c 	.word	0x2000062c
 80031f0:	20000630 	.word	0x20000630
 80031f4:	2000061c 	.word	0x2000061c
 80031f8:	20000620 	.word	0x20000620
 80031fc:	20000624 	.word	0x20000624

08003200 <read_PA1010D>:

bool read_PA1010D()
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af02      	add	r7, sp, #8
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return false;
 8003206:	2305      	movs	r3, #5
 8003208:	2203      	movs	r2, #3
 800320a:	2120      	movs	r1, #32
 800320c:	481d      	ldr	r0, [pc, #116]	@ (8003284 <read_PA1010D+0x84>)
 800320e:	f004 fa33 	bl	8007678 <HAL_I2C_IsDeviceReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <read_PA1010D+0x1c>
 8003218:	2300      	movs	r3, #0
 800321a:	e02f      	b.n	800327c <read_PA1010D+0x7c>

	uint8_t pa_buf_index = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	71fb      	strb	r3, [r7, #7]
	uint8_t pa_bytebuf = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	717b      	strb	r3, [r7, #5]
    bool ret = false;
 8003224:	2300      	movs	r3, #0
 8003226:	71bb      	strb	r3, [r7, #6]

	/* PA1010D (GPS) */
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, HAL_MAX_DELAY) == HAL_OK){
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	2203      	movs	r2, #3
 800322e:	2120      	movs	r1, #32
 8003230:	4814      	ldr	r0, [pc, #80]	@ (8003284 <read_PA1010D+0x84>)
 8003232:	f004 fa21 	bl	8007678 <HAL_I2C_IsDeviceReady>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11e      	bne.n	800327a <read_PA1010D+0x7a>
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 800323c:	2300      	movs	r3, #0
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	e015      	b.n	800326e <read_PA1010D+0x6e>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa_bytebuf, 1, HAL_MAX_DELAY);
 8003242:	1d7a      	adds	r2, r7, #5
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2301      	movs	r3, #1
 800324c:	2120      	movs	r1, #32
 800324e:	480d      	ldr	r0, [pc, #52]	@ (8003284 <read_PA1010D+0x84>)
 8003250:	f003 fcb4 	bl	8006bbc <HAL_I2C_Master_Receive>
			if (pa_bytebuf == '$'){
 8003254:	797b      	ldrb	r3, [r7, #5]
 8003256:	2b24      	cmp	r3, #36	@ 0x24
 8003258:	d102      	bne.n	8003260 <read_PA1010D+0x60>
				ret = true;
 800325a:	2301      	movs	r3, #1
 800325c:	71bb      	strb	r3, [r7, #6]
				break; // Idea: take away break statement and see what the whole sentence looks like
 800325e:	e009      	b.n	8003274 <read_PA1010D+0x74>
			}
			pa_buf[pa_buf_index] = pa_bytebuf;
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	7979      	ldrb	r1, [r7, #5]
 8003264:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <read_PA1010D+0x88>)
 8003266:	54d1      	strb	r1, [r2, r3]
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	3301      	adds	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2bff      	cmp	r3, #255	@ 0xff
 8003272:	d1e6      	bne.n	8003242 <read_PA1010D+0x42>
		}
		parse_nmea(pa_buf);
 8003274:	4804      	ldr	r0, [pc, #16]	@ (8003288 <read_PA1010D+0x88>)
 8003276:	f7ff fc03 	bl	8002a80 <parse_nmea>
	}
	return ret;
 800327a:	79bb      	ldrb	r3, [r7, #6]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200004cc 	.word	0x200004cc
 8003288:	20000658 	.word	0x20000658

0800328c <flush_PA1010D>:

void flush_PA1010D(){
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	while(read_PA1010D());
 8003290:	bf00      	nop
 8003292:	f7ff ffb5 	bl	8003200 <read_PA1010D>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1fa      	bne.n	8003292 <flush_PA1010D+0x6>
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	0000      	movs	r0, r0
 80032a4:	0000      	movs	r0, r0
	...

080032a8 <read_INA219>:

void read_INA219(void) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
//
//	}


	// NEW CODE ----------------------------------------------------------------------------
	uint8_t reg = 0x02;  // Bus voltage register
 80032ae:	2302      	movs	r3, #2
 80032b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ina_buf[2];

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS, 3, 5);
 80032b2:	2305      	movs	r3, #5
 80032b4:	2203      	movs	r2, #3
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	4829      	ldr	r0, [pc, #164]	@ (8003360 <read_INA219+0xb8>)
 80032ba:	f004 f9dd 	bl	8007678 <HAL_I2C_IsDeviceReady>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <read_INA219+0xbc>)
 80032c4:	701a      	strb	r2, [r3, #0]
	if (ina_ret == HAL_OK) {
 80032c6:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <read_INA219+0xbc>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13e      	bne.n	800334c <read_INA219+0xa4>
		// Write the register address
		ina_ret = HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, &reg, 1, 100);
 80032ce:	1dfa      	adds	r2, r7, #7
 80032d0:	2364      	movs	r3, #100	@ 0x64
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2301      	movs	r3, #1
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	4821      	ldr	r0, [pc, #132]	@ (8003360 <read_INA219+0xb8>)
 80032da:	f003 fb71 	bl	80069c0 <HAL_I2C_Master_Transmit>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <read_INA219+0xbc>)
 80032e4:	701a      	strb	r2, [r3, #0]
		if (ina_ret == HAL_OK) {
 80032e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003364 <read_INA219+0xbc>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d12e      	bne.n	800334c <read_INA219+0xa4>
			// Read 2 bytes from that register
			ina_ret = HAL_I2C_Master_Receive(&hi2c1, INA219_ADDRESS, ina_buf, 2, 10);
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	230a      	movs	r3, #10
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2302      	movs	r3, #2
 80032f6:	2180      	movs	r1, #128	@ 0x80
 80032f8:	4819      	ldr	r0, [pc, #100]	@ (8003360 <read_INA219+0xb8>)
 80032fa:	f003 fc5f 	bl	8006bbc <HAL_I2C_Master_Receive>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <read_INA219+0xbc>)
 8003304:	701a      	strb	r2, [r3, #0]
			if (ina_ret == HAL_OK) {
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <read_INA219+0xbc>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11e      	bne.n	800334c <read_INA219+0xa4>
				uint16_t raw_bus_voltage = (ina_buf[0] << 8) | ina_buf[1];
 800330e:	793b      	ldrb	r3, [r7, #4]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b21a      	sxth	r2, r3
 8003314:	797b      	ldrb	r3, [r7, #5]
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	81fb      	strh	r3, [r7, #14]
				raw_bus_voltage >>= 3;  // per datasheet, remove unused bits
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	81fb      	strh	r3, [r7, #14]

				float bus_voltage = raw_bus_voltage * 0.004;  // each bit = 4mV
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f91c 	bl	8000564 <__aeabi_i2d>
 800332c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003358 <read_INA219+0xb0>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f981 	bl	8000638 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc73 	bl	8000c28 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	60bb      	str	r3, [r7, #8]
				voltage = bus_voltage;
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <read_INA219+0xc0>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6013      	str	r3, [r2, #0]
				// For debug:
				// printf("Bus voltage: %.3f V\n", voltage);
			}
		}
	}
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	f3af 8000 	nop.w
 8003358:	d2f1a9fc 	.word	0xd2f1a9fc
 800335c:	3f70624d 	.word	0x3f70624d
 8003360:	200004cc 	.word	0x200004cc
 8003364:	20000860 	.word	0x20000860
 8003368:	20000618 	.word	0x20000618

0800336c <calibrate_mmc>:

void calibrate_mmc(){
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	read_MMC5603();
 8003370:	f7ff fc26 	bl	8002bc0 <read_MMC5603>
	if (mag_x < mag_x_min){
 8003374:	4b2e      	ldr	r3, [pc, #184]	@ (8003430 <calibrate_mmc+0xc4>)
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <calibrate_mmc+0xc8>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d503      	bpl.n	8003392 <calibrate_mmc+0x26>
		mag_x_min = mag_x;
 800338a:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <calibrate_mmc+0xc4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <calibrate_mmc+0xc8>)
 8003390:	6013      	str	r3, [r2, #0]
	}
	if (mag_x > mag_x_max){
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <calibrate_mmc+0xc4>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <calibrate_mmc+0xcc>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	dd03      	ble.n	80033b0 <calibrate_mmc+0x44>
		mag_x_max = mag_x;
 80033a8:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <calibrate_mmc+0xc4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <calibrate_mmc+0xcc>)
 80033ae:	6013      	str	r3, [r2, #0]
	}
	if (mag_y < mag_y_min){
 80033b0:	4b22      	ldr	r3, [pc, #136]	@ (800343c <calibrate_mmc+0xd0>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <calibrate_mmc+0xd4>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d503      	bpl.n	80033ce <calibrate_mmc+0x62>
		mag_y_min = mag_y;
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <calibrate_mmc+0xd0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <calibrate_mmc+0xd4>)
 80033cc:	6013      	str	r3, [r2, #0]
	}
	if (mag_y > mag_y_max){
 80033ce:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <calibrate_mmc+0xd0>)
 80033d0:	ed93 7a00 	vldr	s14, [r3]
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <calibrate_mmc+0xd8>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e2:	dd03      	ble.n	80033ec <calibrate_mmc+0x80>
		mag_y_max = mag_y;
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <calibrate_mmc+0xd0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a16      	ldr	r2, [pc, #88]	@ (8003444 <calibrate_mmc+0xd8>)
 80033ea:	6013      	str	r3, [r2, #0]
	}
	if (mag_z < mag_z_min){
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <calibrate_mmc+0xdc>)
 80033ee:	ed93 7a00 	vldr	s14, [r3]
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <calibrate_mmc+0xe0>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003400:	d503      	bpl.n	800340a <calibrate_mmc+0x9e>
		mag_z_min = mag_z;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <calibrate_mmc+0xdc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a11      	ldr	r2, [pc, #68]	@ (800344c <calibrate_mmc+0xe0>)
 8003408:	6013      	str	r3, [r2, #0]
	}
	if (mag_z > mag_z_max){
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <calibrate_mmc+0xdc>)
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <calibrate_mmc+0xe4>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	dc00      	bgt.n	8003422 <calibrate_mmc+0xb6>
		mag_z_max = mag_z;
	}
}
 8003420:	e003      	b.n	800342a <calibrate_mmc+0xbe>
		mag_z_max = mag_z;
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <calibrate_mmc+0xdc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <calibrate_mmc+0xe4>)
 8003428:	6013      	str	r3, [r2, #0]
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000634 	.word	0x20000634
 8003434:	200009f0 	.word	0x200009f0
 8003438:	200009fc 	.word	0x200009fc
 800343c:	20000638 	.word	0x20000638
 8003440:	200009f4 	.word	0x200009f4
 8003444:	200000a0 	.word	0x200000a0
 8003448:	2000063c 	.word	0x2000063c
 800344c:	200009f8 	.word	0x200009f8
 8003450:	200000a4 	.word	0x200000a4

08003454 <init_MMC5603>:

// Sensor Init Functions -------------------------------------------------------------------
void init_MMC5603(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 800345a:	2364      	movs	r3, #100	@ 0x64
 800345c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 8003466:	2310      	movs	r3, #16
 8003468:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	result = HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	2301      	movs	r3, #1
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	1d7b      	adds	r3, r7, #5
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	221c      	movs	r2, #28
 800347c:	2160      	movs	r1, #96	@ 0x60
 800347e:	4831      	ldr	r0, [pc, #196]	@ (8003544 <init_MMC5603+0xf0>)
 8003480:	f003 fdce 	bl	8007020 <HAL_I2C_Mem_Write>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <init_MMC5603+0xf4>)
 800348a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(20);
 800348c:	2014      	movs	r0, #20
 800348e:	f002 fbc3 	bl	8005c18 <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 8003492:	2308      	movs	r3, #8
 8003494:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
 800349a:	9302      	str	r3, [sp, #8]
 800349c:	2301      	movs	r3, #1
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	1cfb      	adds	r3, r7, #3
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	221b      	movs	r2, #27
 80034a8:	2160      	movs	r1, #96	@ 0x60
 80034aa:	4826      	ldr	r0, [pc, #152]	@ (8003544 <init_MMC5603+0xf0>)
 80034ac:	f003 fdb8 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80034b0:	2001      	movs	r0, #1
 80034b2:	f002 fbb1 	bl	8005c18 <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 80034b6:	2310      	movs	r3, #16
 80034b8:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 80034ba:	f04f 33ff 	mov.w	r3, #4294967295
 80034be:	9302      	str	r3, [sp, #8]
 80034c0:	2301      	movs	r3, #1
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	1cbb      	adds	r3, r7, #2
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	2301      	movs	r3, #1
 80034ca:	221b      	movs	r2, #27
 80034cc:	2160      	movs	r1, #96	@ 0x60
 80034ce:	481d      	ldr	r0, [pc, #116]	@ (8003544 <init_MMC5603+0xf0>)
 80034d0:	f003 fda6 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80034d4:	2001      	movs	r0, #1
 80034d6:	f002 fb9f 	bl	8005c18 <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	9302      	str	r3, [sp, #8]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	1dfb      	adds	r3, r7, #7
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2301      	movs	r3, #1
 80034ea:	221a      	movs	r2, #26
 80034ec:	2160      	movs	r1, #96	@ 0x60
 80034ee:	4815      	ldr	r0, [pc, #84]	@ (8003544 <init_MMC5603+0xf0>)
 80034f0:	f003 fd96 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80034f4:	200a      	movs	r0, #10
 80034f6:	f002 fb8f 	bl	8005c18 <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 80034fa:	f04f 33ff 	mov.w	r3, #4294967295
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	2301      	movs	r3, #1
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	1dbb      	adds	r3, r7, #6
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	221b      	movs	r2, #27
 800350c:	2160      	movs	r1, #96	@ 0x60
 800350e:	480d      	ldr	r0, [pc, #52]	@ (8003544 <init_MMC5603+0xf0>)
 8003510:	f003 fd86 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8003514:	200a      	movs	r0, #10
 8003516:	f002 fb7f 	bl	8005c18 <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 800351a:	f04f 33ff 	mov.w	r3, #4294967295
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	2301      	movs	r3, #1
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	221d      	movs	r2, #29
 800352c:	2160      	movs	r1, #96	@ 0x60
 800352e:	4805      	ldr	r0, [pc, #20]	@ (8003544 <init_MMC5603+0xf0>)
 8003530:	f003 fd76 	bl	8007020 <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 8003534:	200a      	movs	r0, #10
 8003536:	f002 fb6f 	bl	8005c18 <HAL_Delay>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200004cc 	.word	0x200004cc
 8003548:	20000b18 	.word	0x20000b18

0800354c <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	2301      	movs	r3, #1
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2301      	movs	r3, #1
 8003566:	220c      	movs	r2, #12
 8003568:	21c0      	movs	r1, #192	@ 0xc0
 800356a:	480c      	ldr	r0, [pc, #48]	@ (800359c <init_MPL3115A2+0x50>)
 800356c:	f003 fe52 	bl	8007214 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2bc4      	cmp	r3, #196	@ 0xc4
 8003574:	d10e      	bne.n	8003594 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 8003576:	2339      	movs	r3, #57	@ 0x39
 8003578:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	9302      	str	r3, [sp, #8]
 8003580:	2301      	movs	r3, #1
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	1dbb      	adds	r3, r7, #6
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	2226      	movs	r2, #38	@ 0x26
 800358c:	21c0      	movs	r1, #192	@ 0xc0
 800358e:	4803      	ldr	r0, [pc, #12]	@ (800359c <init_MPL3115A2+0x50>)
 8003590:	f003 fd46 	bl	8007020 <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200004cc 	.word	0x200004cc

080035a0 <init_MPU6050>:

void init_MPU6050(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 80035aa:	2307      	movs	r3, #7
 80035ac:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 80035ae:	2300      	movs	r3, #0
 80035b0:	717b      	strb	r3, [r7, #5]
	uint8_t clockSource = 0x01;
 80035b2:	2301      	movs	r3, #1
 80035b4:	713b      	strb	r3, [r7, #4]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 80035b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ba:	9302      	str	r3, [sp, #8]
 80035bc:	2301      	movs	r3, #1
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2301      	movs	r3, #1
 80035c6:	226b      	movs	r2, #107	@ 0x6b
 80035c8:	21d0      	movs	r1, #208	@ 0xd0
 80035ca:	481d      	ldr	r0, [pc, #116]	@ (8003640 <init_MPU6050+0xa0>)
 80035cc:	f003 fd28 	bl	8007020 <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 80035d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	2301      	movs	r3, #1
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	1dbb      	adds	r3, r7, #6
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2301      	movs	r3, #1
 80035e0:	2219      	movs	r2, #25
 80035e2:	21d0      	movs	r1, #208	@ 0xd0
 80035e4:	4816      	ldr	r0, [pc, #88]	@ (8003640 <init_MPU6050+0xa0>)
 80035e6:	f003 fd1b 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 80035ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ee:	9302      	str	r3, [sp, #8]
 80035f0:	2301      	movs	r3, #1
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	1d7b      	adds	r3, r7, #5
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	2301      	movs	r3, #1
 80035fa:	221b      	movs	r2, #27
 80035fc:	21d0      	movs	r1, #208	@ 0xd0
 80035fe:	4810      	ldr	r0, [pc, #64]	@ (8003640 <init_MPU6050+0xa0>)
 8003600:	f003 fd0e 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 8003604:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	2301      	movs	r3, #1
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	1d7b      	adds	r3, r7, #5
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	2301      	movs	r3, #1
 8003614:	221c      	movs	r2, #28
 8003616:	21d0      	movs	r1, #208	@ 0xd0
 8003618:	4809      	ldr	r0, [pc, #36]	@ (8003640 <init_MPU6050+0xa0>)
 800361a:	f003 fd01 	bl	8007020 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, I2C_MEMADD_SIZE_8BIT, &clockSource, 1, 1000);
 800361e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003622:	9302      	str	r3, [sp, #8]
 8003624:	2301      	movs	r3, #1
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2301      	movs	r3, #1
 800362e:	226b      	movs	r2, #107	@ 0x6b
 8003630:	21d0      	movs	r1, #208	@ 0xd0
 8003632:	4803      	ldr	r0, [pc, #12]	@ (8003640 <init_MPU6050+0xa0>)
 8003634:	f003 fcf4 	bl	8007020 <HAL_I2C_Mem_Write>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200004cc 	.word	0x200004cc

08003644 <init_PA1010D>:

void init_PA1010D(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af02      	add	r7, sp, #8
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return;
 800364a:	2305      	movs	r3, #5
 800364c:	2203      	movs	r2, #3
 800364e:	2120      	movs	r1, #32
 8003650:	482a      	ldr	r0, [pc, #168]	@ (80036fc <init_PA1010D+0xb8>)
 8003652:	f004 f811 	bl	8007678 <HAL_I2C_IsDeviceReady>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d14a      	bne.n	80036f2 <init_PA1010D+0xae>
	uint8_t pa1010d_bytebuf;

	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 800365c:	4828      	ldr	r0, [pc, #160]	@ (8003700 <init_PA1010D+0xbc>)
 800365e:	f7fc fe27 	bl	80002b0 <strlen>
 8003662:	4603      	mov	r3, r0
 8003664:	b29b      	uxth	r3, r3
 8003666:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800366a:	9200      	str	r2, [sp, #0]
 800366c:	4a24      	ldr	r2, [pc, #144]	@ (8003700 <init_PA1010D+0xbc>)
 800366e:	2120      	movs	r1, #32
 8003670:	4822      	ldr	r0, [pc, #136]	@ (80036fc <init_PA1010D+0xb8>)
 8003672:	f003 f9a5 	bl	80069c0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
 8003676:	4823      	ldr	r0, [pc, #140]	@ (8003704 <init_PA1010D+0xc0>)
 8003678:	f7fc fe1a 	bl	80002b0 <strlen>
 800367c:	4603      	mov	r3, r0
 800367e:	b29b      	uxth	r3, r3
 8003680:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	4a1f      	ldr	r2, [pc, #124]	@ (8003704 <init_PA1010D+0xc0>)
 8003688:	2120      	movs	r1, #32
 800368a:	481c      	ldr	r0, [pc, #112]	@ (80036fc <init_PA1010D+0xb8>)
 800368c:	f003 f998 	bl	80069c0 <HAL_I2C_Master_Transmit>
//	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);

//	HAL_Delay(10000);
	//Wait for stabilization
	for(int j=0; j<10; j++){
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e029      	b.n	80036ea <init_PA1010D+0xa6>
		for(int i=0; i<255; i++){
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	e014      	b.n	80036c6 <init_PA1010D+0x82>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
 800369c:	1dfa      	adds	r2, r7, #7
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2301      	movs	r3, #1
 80036a6:	2120      	movs	r1, #32
 80036a8:	4814      	ldr	r0, [pc, #80]	@ (80036fc <init_PA1010D+0xb8>)
 80036aa:	f003 fa87 	bl	8006bbc <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	2b24      	cmp	r3, #36	@ 0x24
 80036b2:	d00c      	beq.n	80036ce <init_PA1010D+0x8a>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 80036b4:	79f9      	ldrb	r1, [r7, #7]
 80036b6:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <init_PA1010D+0xc4>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4413      	add	r3, r2
 80036bc:	460a      	mov	r2, r1
 80036be:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80036ca:	dde7      	ble.n	800369c <init_PA1010D+0x58>
 80036cc:	e000      	b.n	80036d0 <init_PA1010D+0x8c>
				break;
 80036ce:	bf00      	nop
		}
		if (j>5){
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	dd02      	ble.n	80036dc <init_PA1010D+0x98>
			parse_nmea(pa_buf);
 80036d6:	480c      	ldr	r0, [pc, #48]	@ (8003708 <init_PA1010D+0xc4>)
 80036d8:	f7ff f9d2 	bl	8002a80 <parse_nmea>
		}
		HAL_Delay(500);
 80036dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036e0:	f002 fa9a 	bl	8005c18 <HAL_Delay>
	for(int j=0; j<10; j++){
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	ddd2      	ble.n	8003696 <init_PA1010D+0x52>
 80036f0:	e000      	b.n	80036f4 <init_PA1010D+0xb0>
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return;
 80036f2:	bf00      	nop
	}
}
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200004cc 	.word	0x200004cc
 8003700:	20000068 	.word	0x20000068
 8003704:	20000054 	.word	0x20000054
 8003708:	20000658 	.word	0x20000658

0800370c <init_INA219>:

void init_INA219(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af04      	add	r7, sp, #16
//	uint8_t ina_config[2] = {0b00000001, 0b00011101};
//	result2 = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);

	// NEW CODE --------------------------------------------------------------------------
	// This is writing to the CALIBRATION register (0x05), not the CONFIG register (0x00)!
	uint8_t ina_calib[2] = {0x20, 0x00};  // Example calibration value
 8003712:	2320      	movs	r3, #32
 8003714:	80bb      	strh	r3, [r7, #4]
	result2 = HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x05, 1, ina_calib, 2, 1000);
 8003716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	2302      	movs	r3, #2
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2301      	movs	r3, #1
 8003726:	2205      	movs	r2, #5
 8003728:	2180      	movs	r1, #128	@ 0x80
 800372a:	480d      	ldr	r0, [pc, #52]	@ (8003760 <init_INA219+0x54>)
 800372c:	f003 fc78 	bl	8007020 <HAL_I2C_Mem_Write>
 8003730:	4603      	mov	r3, r0
 8003732:	461a      	mov	r2, r3
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <init_INA219+0x58>)
 8003736:	701a      	strb	r2, [r3, #0]

	// Now write to the CONFIG register (0x00)
	uint8_t ina_config[2] = {0x01, 0x9F};  // Example: 32V, 2A, 12-bit ADCs
 8003738:	f649 7301 	movw	r3, #40705	@ 0x9f01
 800373c:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x00, 1, ina_config, 2, 1000);
 800373e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	2302      	movs	r3, #2
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	463b      	mov	r3, r7
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	2301      	movs	r3, #1
 800374e:	2200      	movs	r2, #0
 8003750:	2180      	movs	r1, #128	@ 0x80
 8003752:	4803      	ldr	r0, [pc, #12]	@ (8003760 <init_INA219+0x54>)
 8003754:	f003 fc64 	bl	8007020 <HAL_I2C_Mem_Write>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200004cc 	.word	0x200004cc
 8003764:	20000b19 	.word	0x20000b19

08003768 <read_sensors>:

void read_sensors(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
	read_MPU6050(); // Accel/ tilt
 800376e:	f7ff fc43 	bl	8002ff8 <read_MPU6050>
	read_MPL3115A2(); // Temperature/ Pressure
 8003772:	f7ff fb4b 	bl	8002e0c <read_MPL3115A2>
	if (!north_cam_on) read_MMC5603(); // Magnetic Field
 8003776:	4b0c      	ldr	r3, [pc, #48]	@ (80037a8 <read_sensors+0x40>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <read_sensors+0x1a>
 800377e:	f7ff fa1f 	bl	8002bc0 <read_MMC5603>
//	read_PA1010D();
	for (int i = 0; i < 2; ++i){
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	e004      	b.n	8003792 <read_sensors+0x2a>
		read_PA1010D(); // GPS
 8003788:	f7ff fd3a 	bl	8003200 <read_PA1010D>
	for (int i = 0; i < 2; ++i){
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	ddf7      	ble.n	8003788 <read_sensors+0x20>
	}
	calculate_auto_gyro_speed();
 8003798:	f7fe fdf2 	bl	8002380 <calculate_auto_gyro_speed>
	read_INA219(); // Voltage
 800379c:	f7ff fd84 	bl	80032a8 <read_INA219>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	20000878 	.word	0x20000878

080037ac <reset_MPU6050>:

void reset_MPU6050(void) {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af04      	add	r7, sp, #16
    uint8_t reset_command = 0x80;  // Set the reset bit in PWR_MGMT_1
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1, &reset_command, 1, HAL_MAX_DELAY);
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	2301      	movs	r3, #1
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	1dfb      	adds	r3, r7, #7
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2301      	movs	r3, #1
 80037c6:	226b      	movs	r2, #107	@ 0x6b
 80037c8:	21d0      	movs	r1, #208	@ 0xd0
 80037ca:	4805      	ldr	r0, [pc, #20]	@ (80037e0 <reset_MPU6050+0x34>)
 80037cc:	f003 fc28 	bl	8007020 <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Wait for reset to complete
 80037d0:	2064      	movs	r0, #100	@ 0x64
 80037d2:	f002 fa21 	bl	8005c18 <HAL_Delay>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200004cc 	.word	0x200004cc

080037e4 <init_sensors>:

void init_sensors(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80037e8:	480c      	ldr	r0, [pc, #48]	@ (800381c <init_sensors+0x38>)
 80037ea:	f004 f873 	bl	80078d4 <HAL_I2C_GetState>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d001      	beq.n	80037f8 <init_sensors+0x14>
		reset_MPU6050();
 80037f4:	f7ff ffda 	bl	80037ac <reset_MPU6050>
	}

	init_MPU6050(); // Must be first
 80037f8:	f7ff fed2 	bl	80035a0 <init_MPU6050>
	init_MPL3115A2();
 80037fc:	f7ff fea6 	bl	800354c <init_MPL3115A2>
	init_MMC5603();
 8003800:	f7ff fe28 	bl	8003454 <init_MMC5603>
	init_PA1010D();
 8003804:	f7ff ff1e 	bl	8003644 <init_PA1010D>
	init_INA219();
 8003808:	f7ff ff80 	bl	800370c <init_INA219>

	read_PA1010D();
 800380c:	f7ff fcf8 	bl	8003200 <read_PA1010D>
	get_mission_time();
 8003810:	f7fe fea2 	bl	8002558 <get_mission_time>

	flush_PA1010D();
 8003814:	f7ff fd3a 	bl	800328c <flush_PA1010D>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	200004cc 	.word	0x200004cc

08003820 <init_commands>:

void init_commands(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 8003824:	4b30      	ldr	r3, [pc, #192]	@ (80038e8 <init_commands+0xc8>)
 8003826:	4a31      	ldr	r2, [pc, #196]	@ (80038ec <init_commands+0xcc>)
 8003828:	210e      	movs	r1, #14
 800382a:	4831      	ldr	r0, [pc, #196]	@ (80038f0 <init_commands+0xd0>)
 800382c:	f008 fcda 	bl	800c1e4 <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 8003830:	4b2d      	ldr	r3, [pc, #180]	@ (80038e8 <init_commands+0xc8>)
 8003832:	4a30      	ldr	r2, [pc, #192]	@ (80038f4 <init_commands+0xd4>)
 8003834:	210f      	movs	r1, #15
 8003836:	4830      	ldr	r0, [pc, #192]	@ (80038f8 <init_commands+0xd8>)
 8003838:	f008 fcd4 	bl	800c1e4 <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 800383c:	4b2a      	ldr	r3, [pc, #168]	@ (80038e8 <init_commands+0xc8>)
 800383e:	4a2f      	ldr	r2, [pc, #188]	@ (80038fc <init_commands+0xdc>)
 8003840:	210d      	movs	r1, #13
 8003842:	482f      	ldr	r0, [pc, #188]	@ (8003900 <init_commands+0xe0>)
 8003844:	f008 fcce 	bl	800c1e4 <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL", TEAM_ID);
 8003848:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <init_commands+0xc8>)
 800384a:	4a2e      	ldr	r2, [pc, #184]	@ (8003904 <init_commands+0xe4>)
 800384c:	210e      	movs	r1, #14
 800384e:	482e      	ldr	r0, [pc, #184]	@ (8003908 <init_commands+0xe8>)
 8003850:	f008 fcc8 	bl	800c1e4 <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8003854:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <init_commands+0xc8>)
 8003856:	4a2d      	ldr	r2, [pc, #180]	@ (800390c <init_commands+0xec>)
 8003858:	2110      	movs	r1, #16
 800385a:	482d      	ldr	r0, [pc, #180]	@ (8003910 <init_commands+0xf0>)
 800385c:	f008 fcc2 	bl	800c1e4 <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 8003860:	4b21      	ldr	r3, [pc, #132]	@ (80038e8 <init_commands+0xc8>)
 8003862:	4a2c      	ldr	r2, [pc, #176]	@ (8003914 <init_commands+0xf4>)
 8003864:	2111      	movs	r1, #17
 8003866:	482c      	ldr	r0, [pc, #176]	@ (8003918 <init_commands+0xf8>)
 8003868:	f008 fcbc 	bl	800c1e4 <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 800386c:	4b1e      	ldr	r3, [pc, #120]	@ (80038e8 <init_commands+0xc8>)
 800386e:	4a2b      	ldr	r2, [pc, #172]	@ (800391c <init_commands+0xfc>)
 8003870:	210f      	movs	r1, #15
 8003872:	482b      	ldr	r0, [pc, #172]	@ (8003920 <init_commands+0x100>)
 8003874:	f008 fcb6 	bl	800c1e4 <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8003878:	4b1b      	ldr	r3, [pc, #108]	@ (80038e8 <init_commands+0xc8>)
 800387a:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <init_commands+0x104>)
 800387c:	2110      	movs	r1, #16
 800387e:	482a      	ldr	r0, [pc, #168]	@ (8003928 <init_commands+0x108>)
 8003880:	f008 fcb0 	bl	800c1e4 <sniprintf>
	snprintf(cal_comp_on_command, sizeof(cal_comp_on_command), "CMD,%s,CC,ON", TEAM_ID);
 8003884:	4b18      	ldr	r3, [pc, #96]	@ (80038e8 <init_commands+0xc8>)
 8003886:	4a29      	ldr	r2, [pc, #164]	@ (800392c <init_commands+0x10c>)
 8003888:	210f      	movs	r1, #15
 800388a:	4829      	ldr	r0, [pc, #164]	@ (8003930 <init_commands+0x110>)
 800388c:	f008 fcaa 	bl	800c1e4 <sniprintf>
	snprintf(cal_comp_off_command, sizeof(cal_comp_off_command), "CMD,%s,CC,OFF", TEAM_ID);
 8003890:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <init_commands+0xc8>)
 8003892:	4a28      	ldr	r2, [pc, #160]	@ (8003934 <init_commands+0x114>)
 8003894:	2110      	movs	r1, #16
 8003896:	4828      	ldr	r0, [pc, #160]	@ (8003938 <init_commands+0x118>)
 8003898:	f008 fca4 	bl	800c1e4 <sniprintf>
	snprintf(set_camera_north_command, sizeof(set_camera_north_command), "CMD,%s,SCN", TEAM_ID);
 800389c:	4b12      	ldr	r3, [pc, #72]	@ (80038e8 <init_commands+0xc8>)
 800389e:	4a27      	ldr	r2, [pc, #156]	@ (800393c <init_commands+0x11c>)
 80038a0:	210e      	movs	r1, #14
 80038a2:	4827      	ldr	r0, [pc, #156]	@ (8003940 <init_commands+0x120>)
 80038a4:	f008 fc9e 	bl	800c1e4 <sniprintf>
	snprintf(activate_north_cam_command, sizeof(activate_north_cam_command), "CMD,%s,MEC,CAM,ON", TEAM_ID);
 80038a8:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <init_commands+0xc8>)
 80038aa:	4a26      	ldr	r2, [pc, #152]	@ (8003944 <init_commands+0x124>)
 80038ac:	2115      	movs	r1, #21
 80038ae:	4826      	ldr	r0, [pc, #152]	@ (8003948 <init_commands+0x128>)
 80038b0:	f008 fc98 	bl	800c1e4 <sniprintf>
	snprintf(deactivate_north_cam_command, sizeof(deactivate_north_cam_command), "CMD,%s,MEC,CAM,OFF", TEAM_ID);
 80038b4:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <init_commands+0xc8>)
 80038b6:	4a25      	ldr	r2, [pc, #148]	@ (800394c <init_commands+0x12c>)
 80038b8:	2116      	movs	r1, #22
 80038ba:	4825      	ldr	r0, [pc, #148]	@ (8003950 <init_commands+0x130>)
 80038bc:	f008 fc92 	bl	800c1e4 <sniprintf>
	snprintf(release_payload_command, sizeof(release_payload_command), "CMD,%s,MEC,PAYLOAD,ON", TEAM_ID);
 80038c0:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <init_commands+0xc8>)
 80038c2:	4a24      	ldr	r2, [pc, #144]	@ (8003954 <init_commands+0x134>)
 80038c4:	2119      	movs	r1, #25
 80038c6:	4824      	ldr	r0, [pc, #144]	@ (8003958 <init_commands+0x138>)
 80038c8:	f008 fc8c 	bl	800c1e4 <sniprintf>
	snprintf(reset_release_payload_command, sizeof(reset_release_payload_command), "CMD,%s,MEC,PAYLOAD,OFF", TEAM_ID);
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <init_commands+0xc8>)
 80038ce:	4a23      	ldr	r2, [pc, #140]	@ (800395c <init_commands+0x13c>)
 80038d0:	211a      	movs	r1, #26
 80038d2:	4823      	ldr	r0, [pc, #140]	@ (8003960 <init_commands+0x140>)
 80038d4:	f008 fc86 	bl	800c1e4 <sniprintf>
	snprintf(reset_state_command, sizeof(reset_state_command), "CMD,%s,RST", TEAM_ID);
 80038d8:	4b03      	ldr	r3, [pc, #12]	@ (80038e8 <init_commands+0xc8>)
 80038da:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <init_commands+0x144>)
 80038dc:	210e      	movs	r1, #14
 80038de:	4822      	ldr	r0, [pc, #136]	@ (8003968 <init_commands+0x148>)
 80038e0:	f008 fc80 	bl	800c1e4 <sniprintf>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0800fd10 	.word	0x0800fd10
 80038ec:	0800fd18 	.word	0x0800fd18
 80038f0:	200008a8 	.word	0x200008a8
 80038f4:	0800fd24 	.word	0x0800fd24
 80038f8:	200008b8 	.word	0x200008b8
 80038fc:	0800fd34 	.word	0x0800fd34
 8003900:	200008c8 	.word	0x200008c8
 8003904:	0800fd40 	.word	0x0800fd40
 8003908:	200008d8 	.word	0x200008d8
 800390c:	0800fd4c 	.word	0x0800fd4c
 8003910:	20000928 	.word	0x20000928
 8003914:	0800fd5c 	.word	0x0800fd5c
 8003918:	20000938 	.word	0x20000938
 800391c:	0800fd6c 	.word	0x0800fd6c
 8003920:	2000094c 	.word	0x2000094c
 8003924:	0800fd7c 	.word	0x0800fd7c
 8003928:	2000095c 	.word	0x2000095c
 800392c:	0800fd8c 	.word	0x0800fd8c
 8003930:	2000096c 	.word	0x2000096c
 8003934:	0800fd9c 	.word	0x0800fd9c
 8003938:	2000097c 	.word	0x2000097c
 800393c:	0800fdac 	.word	0x0800fdac
 8003940:	200008e8 	.word	0x200008e8
 8003944:	0800fdb8 	.word	0x0800fdb8
 8003948:	200008f8 	.word	0x200008f8
 800394c:	0800fdcc 	.word	0x0800fdcc
 8003950:	20000910 	.word	0x20000910
 8003954:	0800fde0 	.word	0x0800fde0
 8003958:	2000098c 	.word	0x2000098c
 800395c:	0800fdf8 	.word	0x0800fdf8
 8003960:	200009a8 	.word	0x200009a8
 8003964:	0800fe10 	.word	0x0800fe10
 8003968:	200009c4 	.word	0x200009c4

0800396c <Stepper_SetStep>:

// Stepper Motor Functions ---------------------------------------------------------------------------
void Stepper_SetStep(uint8_t i) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, steps[i][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	4a1f      	ldr	r2, [pc, #124]	@ (80039f8 <Stepper_SetStep+0x8c>)
 800397a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	2140      	movs	r1, #64	@ 0x40
 800398c:	481b      	ldr	r0, [pc, #108]	@ (80039fc <Stepper_SetStep+0x90>)
 800398e:	f002 fe95 	bl	80066bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, steps[i][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <Stepper_SetStep+0x8c>)
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	785b      	ldrb	r3, [r3, #1]
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	2180      	movs	r1, #128	@ 0x80
 80039aa:	4814      	ldr	r0, [pc, #80]	@ (80039fc <Stepper_SetStep+0x90>)
 80039ac:	f002 fe86 	bl	80066bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, steps[i][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	4a11      	ldr	r2, [pc, #68]	@ (80039f8 <Stepper_SetStep+0x8c>)
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039ca:	480c      	ldr	r0, [pc, #48]	@ (80039fc <Stepper_SetStep+0x90>)
 80039cc:	f002 fe76 	bl	80066bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, steps[i][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4a09      	ldr	r2, [pc, #36]	@ (80039f8 <Stepper_SetStep+0x8c>)
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	78db      	ldrb	r3, [r3, #3]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	bf14      	ite	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	2300      	moveq	r3, #0
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039ea:	4804      	ldr	r0, [pc, #16]	@ (80039fc <Stepper_SetStep+0x90>)
 80039ec:	f002 fe66 	bl	80066bc <HAL_GPIO_WritePin>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200000ac 	.word	0x200000ac
 80039fc:	40020800 	.word	0x40020800

08003a00 <Stepper_Rotate>:

// Rotate the motor a specified number of steps
void Stepper_Rotate(int stepsCount, int delayMs) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
    int direction = (stepsCount > 0) ? 1 : -1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	dd01      	ble.n	8003a14 <Stepper_Rotate+0x14>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e001      	b.n	8003a18 <Stepper_Rotate+0x18>
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	60bb      	str	r3, [r7, #8]
    stepsCount = abs(stepsCount);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bfb8      	it	lt
 8003a20:	425b      	neglt	r3, r3
 8003a22:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < stepsCount; i++) {
 8003a24:	2300      	movs	r3, #0
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e021      	b.n	8003a6e <Stepper_Rotate+0x6e>
        Stepper_SetStep(stepIndex);
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff9b 	bl	800396c <Stepper_SetStep>
        HAL_Delay(delayMs);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f002 f8ed 	bl	8005c18 <HAL_Delay>

        stepIndex += direction;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4413      	add	r3, r2
 8003a46:	4a0e      	ldr	r2, [pc, #56]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a48:	6013      	str	r3, [r2, #0]
        if (stepIndex >= 8) stepIndex = 0;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b07      	cmp	r3, #7
 8003a50:	dd03      	ble.n	8003a5a <Stepper_Rotate+0x5a>
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e006      	b.n	8003a68 <Stepper_Rotate+0x68>
        else if (stepIndex < 0) stepIndex = 7;
 8003a5a:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	da02      	bge.n	8003a68 <Stepper_Rotate+0x68>
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <Stepper_Rotate+0x80>)
 8003a64:	2207      	movs	r2, #7
 8003a66:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < stepsCount; i++) {
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	dbd9      	blt.n	8003a2a <Stepper_Rotate+0x2a>
    }
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	2000009c 	.word	0x2000009c

08003a84 <DWT_Init>:

void DWT_Init(void) {
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable TRC
 8003a88:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <DWT_Init+0x2c>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4a08      	ldr	r2, [pc, #32]	@ (8003ab0 <DWT_Init+0x2c>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // Reset counter
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <DWT_Init+0x30>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable counter
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <DWT_Init+0x30>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a05      	ldr	r2, [pc, #20]	@ (8003ab4 <DWT_Init+0x30>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6013      	str	r3, [r2, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000edf0 	.word	0xe000edf0
 8003ab4:	e0001000 	.word	0xe0001000

08003ab8 <Stepper_Correction>:

// Rotate the motor to correct its direction to all way to the North
void Stepper_Correction(){
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	b090      	sub	sp, #64	@ 0x40
 8003abc:	af00      	add	r7, sp, #0
//
//	Stepper_Rotate(num_steps, 0);


	// Read sensor data (gyroscope, accelerometer, magnetometer)
	read_MPU6050();
 8003abe:	f7ff fa9b 	bl	8002ff8 <read_MPU6050>
	read_MMC5603();
 8003ac2:	f7ff f87d 	bl	8002bc0 <read_MMC5603>

	float gx = gyro_x;
 8003ac6:	4b92      	ldr	r3, [pc, #584]	@ (8003d10 <Stepper_Correction+0x258>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gy = gyro_y;
 8003acc:	4b91      	ldr	r3, [pc, #580]	@ (8003d14 <Stepper_Correction+0x25c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
	float gz = gyro_z;
 8003ad2:	4b91      	ldr	r3, [pc, #580]	@ (8003d18 <Stepper_Correction+0x260>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
	float ax = accel_x;
 8003ad8:	4b90      	ldr	r3, [pc, #576]	@ (8003d1c <Stepper_Correction+0x264>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float ay = accel_y;
 8003ade:	4b90      	ldr	r3, [pc, #576]	@ (8003d20 <Stepper_Correction+0x268>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float az = accel_z;
 8003ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8003d24 <Stepper_Correction+0x26c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
	float mx = mag_x;
 8003aea:	4b8f      	ldr	r3, [pc, #572]	@ (8003d28 <Stepper_Correction+0x270>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	623b      	str	r3, [r7, #32]
	float my = mag_y;
 8003af0:	4b8e      	ldr	r3, [pc, #568]	@ (8003d2c <Stepper_Correction+0x274>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61fb      	str	r3, [r7, #28]
	float mz = mag_z;
 8003af6:	4b8e      	ldr	r3, [pc, #568]	@ (8003d30 <Stepper_Correction+0x278>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	61bb      	str	r3, [r7, #24]

	uint32_t now = DWT->CYCCNT;
 8003afc:	4b8d      	ldr	r3, [pc, #564]	@ (8003d34 <Stepper_Correction+0x27c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]
	float dt = (now - lastStepperUpdate) / (float)SystemCoreClock;
 8003b02:	4b8d      	ldr	r3, [pc, #564]	@ (8003d38 <Stepper_Correction+0x280>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b12:	4b8a      	ldr	r3, [pc, #552]	@ (8003d3c <Stepper_Correction+0x284>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b22:	edc7 7a04 	vstr	s15, [r7, #16]
	lastStepperUpdate = now;
 8003b26:	4a84      	ldr	r2, [pc, #528]	@ (8003d38 <Stepper_Correction+0x280>)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	6013      	str	r3, [r2, #0]

	if (dt > 0) {
 8003b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	dd02      	ble.n	8003b40 <Stepper_Correction+0x88>
	    ahrs.invSampleFreq = dt;
 8003b3a:	4a81      	ldr	r2, [pc, #516]	@ (8003d40 <Stepper_Correction+0x288>)
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	6153      	str	r3, [r2, #20]
	}
	Madgwick_update(&ahrs, gx, -gy, -gz, ax, -ay, -az, mx, my, mz);
 8003b40:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003b44:	eeb1 7a67 	vneg.f32	s14, s15
 8003b48:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003b4c:	eef1 6a67 	vneg.f32	s13, s15
 8003b50:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b54:	eeb1 6a67 	vneg.f32	s12, s15
 8003b58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b5c:	eef1 7a67 	vneg.f32	s15, s15
 8003b60:	ed97 4a06 	vldr	s8, [r7, #24]
 8003b64:	edd7 3a07 	vldr	s7, [r7, #28]
 8003b68:	ed97 3a08 	vldr	s6, [r7, #32]
 8003b6c:	eef0 2a67 	vmov.f32	s5, s15
 8003b70:	eeb0 2a46 	vmov.f32	s4, s12
 8003b74:	edd7 1a0b 	vldr	s3, [r7, #44]	@ 0x2c
 8003b78:	eeb0 1a66 	vmov.f32	s2, s13
 8003b7c:	eef0 0a47 	vmov.f32	s1, s14
 8003b80:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8003b84:	486e      	ldr	r0, [pc, #440]	@ (8003d40 <Stepper_Correction+0x288>)
 8003b86:	f7fd fa91 	bl	80010ac <Madgwick_update>

	// Get the current yaw from the Madgwick filter (assumed to represent the direction of the system)
	float current_yaw = Madgwick_getYaw(&ahrs);
 8003b8a:	486d      	ldr	r0, [pc, #436]	@ (8003d40 <Stepper_Correction+0x288>)
 8003b8c:	f7fe fb78 	bl	8002280 <Madgwick_getYaw>
 8003b90:	ed87 0a03 	vstr	s0, [r7, #12]

	float correction_boost = 1.05f;
 8003b94:	4b6b      	ldr	r3, [pc, #428]	@ (8003d44 <Stepper_Correction+0x28c>)
 8003b96:	60bb      	str	r3, [r7, #8]
	float dir_change = (stepper_direction - current_yaw) * correction_boost;
 8003b98:	4b6b      	ldr	r3, [pc, #428]	@ (8003d48 <Stepper_Correction+0x290>)
 8003b9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7fc fcf2 	bl	8000588 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4629      	mov	r1, r5
 8003bac:	f7fc fb8c 	bl	80002c8 <__aeabi_dsub>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f7fc fce5 	bl	8000588 <__aeabi_f2d>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fc fd37 	bl	8000638 <__aeabi_dmul>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f7fd f829 	bl	8000c28 <__aeabi_d2f>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (dir_change > 180) dir_change -= 360;
 8003bda:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003bde:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8003d4c <Stepper_Correction+0x294>
 8003be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bea:	dd08      	ble.n	8003bfe <Stepper_Correction+0x146>
 8003bec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003bf0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8003d50 <Stepper_Correction+0x298>
 8003bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bf8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8003bfc:	e010      	b.n	8003c20 <Stepper_Correction+0x168>
	else if (dir_change < -180) dir_change += 360;
 8003bfe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003c02:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003d54 <Stepper_Correction+0x29c>
 8003c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0e:	d507      	bpl.n	8003c20 <Stepper_Correction+0x168>
 8003c10:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003c14:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8003d50 <Stepper_Correction+0x298>
 8003c18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c1c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	int num_steps = round(dir_change * STEPS_PER_REV / 360);
 8003c20:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003c24:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003d58 <Stepper_Correction+0x2a0>
 8003c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003d50 <Stepper_Correction+0x298>
 8003c30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c34:	ee16 0a90 	vmov	r0, s13
 8003c38:	f7fc fca6 	bl	8000588 <__aeabi_f2d>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	ec43 2b10 	vmov	d0, r2, r3
 8003c44:	f00b fa46 	bl	800f0d4 <round>
 8003c48:	ec53 2b10 	vmov	r2, r3, d0
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f7fc ffa2 	bl	8000b98 <__aeabi_d2iz>
 8003c54:	4603      	mov	r3, r0
 8003c56:	607b      	str	r3, [r7, #4]

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
 8003c58:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <Stepper_Correction+0x290>)
 8003c5a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fc fc80 	bl	8000564 <__aeabi_i2d>
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <Stepper_Correction+0x2a4>)
 8003c6a:	f7fc fce5 	bl	8000638 <__aeabi_dmul>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <Stepper_Correction+0x2a8>)
 8003c7c:	f7fc fe06 	bl	800088c <__aeabi_ddiv>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4620      	mov	r0, r4
 8003c86:	4629      	mov	r1, r5
 8003c88:	f7fc fb1e 	bl	80002c8 <__aeabi_dsub>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	492d      	ldr	r1, [pc, #180]	@ (8003d48 <Stepper_Correction+0x290>)
 8003c92:	e9c1 2300 	strd	r2, r3, [r1]
	if (stepper_direction > 360) stepper_direction -= 360;
 8003c96:	4b2c      	ldr	r3, [pc, #176]	@ (8003d48 <Stepper_Correction+0x290>)
 8003c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <Stepper_Correction+0x2a4>)
 8003ca2:	f7fc ff59 	bl	8000b58 <__aeabi_dcmpgt>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <Stepper_Correction+0x210>
 8003cac:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <Stepper_Correction+0x290>)
 8003cae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <Stepper_Correction+0x2a4>)
 8003cb8:	f7fc fb06 	bl	80002c8 <__aeabi_dsub>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4921      	ldr	r1, [pc, #132]	@ (8003d48 <Stepper_Correction+0x290>)
 8003cc2:	e9c1 2300 	strd	r2, r3, [r1]
 8003cc6:	e018      	b.n	8003cfa <Stepper_Correction+0x242>
	else if (stepper_direction < 0) stepper_direction += 360;
 8003cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d48 <Stepper_Correction+0x290>)
 8003cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	f7fc ff21 	bl	8000b1c <__aeabi_dcmplt>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <Stepper_Correction+0x242>
 8003ce0:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <Stepper_Correction+0x290>)
 8003ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	4b1c      	ldr	r3, [pc, #112]	@ (8003d5c <Stepper_Correction+0x2a4>)
 8003cec:	f7fc faee 	bl	80002cc <__adddf3>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4914      	ldr	r1, [pc, #80]	@ (8003d48 <Stepper_Correction+0x290>)
 8003cf6:	e9c1 2300 	strd	r2, r3, [r1]

	Stepper_Rotate(-num_steps, 0);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fe7d 	bl	8003a00 <Stepper_Rotate>
}
 8003d06:	bf00      	nop
 8003d08:	3740      	adds	r7, #64	@ 0x40
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2000061c 	.word	0x2000061c
 8003d14:	20000620 	.word	0x20000620
 8003d18:	20000624 	.word	0x20000624
 8003d1c:	20000628 	.word	0x20000628
 8003d20:	2000062c 	.word	0x2000062c
 8003d24:	20000630 	.word	0x20000630
 8003d28:	20000634 	.word	0x20000634
 8003d2c:	20000638 	.word	0x20000638
 8003d30:	2000063c 	.word	0x2000063c
 8003d34:	e0001000 	.word	0xe0001000
 8003d38:	200008a4 	.word	0x200008a4
 8003d3c:	200000cc 	.word	0x200000cc
 8003d40:	2000087c 	.word	0x2000087c
 8003d44:	3f866666 	.word	0x3f866666
 8003d48:	20000870 	.word	0x20000870
 8003d4c:	43340000 	.word	0x43340000
 8003d50:	43b40000 	.word	0x43b40000
 8003d54:	c3340000 	.word	0xc3340000
 8003d58:	45800000 	.word	0x45800000
 8003d5c:	40768000 	.word	0x40768000
 8003d60:	40b00000 	.word	0x40b00000

08003d64 <set_stepper_north>:

void set_stepper_north(){
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
	stepper_direction = direction;
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <set_stepper_north+0x1c>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	4905      	ldr	r1, [pc, #20]	@ (8003d84 <set_stepper_north+0x20>)
 8003d70:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000868 	.word	0x20000868
 8003d84:	20000870 	.word	0x20000870

08003d88 <turn_stepper_north>:

void turn_stepper_north(){
 8003d88:	b5b0      	push	{r4, r5, r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
	read_MMC5603();
 8003d8e:	f7fe ff17 	bl	8002bc0 <read_MMC5603>
	float dir_change = stepper_direction - direction;
 8003d92:	4b5c      	ldr	r3, [pc, #368]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d98:	4b5b      	ldr	r3, [pc, #364]	@ (8003f08 <turn_stepper_north+0x180>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fa93 	bl	80002c8 <__aeabi_dsub>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7fc ff3d 	bl	8000c28 <__aeabi_d2f>
 8003dae:	4603      	mov	r3, r0
 8003db0:	607b      	str	r3, [r7, #4]
	if (dir_change > 180) dir_change -= 360;
 8003db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db6:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003f0c <turn_stepper_north+0x184>
 8003dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	dd08      	ble.n	8003dd6 <turn_stepper_north+0x4e>
 8003dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc8:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003f10 <turn_stepper_north+0x188>
 8003dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dd0:	edc7 7a01 	vstr	s15, [r7, #4]
 8003dd4:	e010      	b.n	8003df8 <turn_stepper_north+0x70>
	else if (dir_change < -180) dir_change += 360;
 8003dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dda:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8003f14 <turn_stepper_north+0x18c>
 8003dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	d507      	bpl.n	8003df8 <turn_stepper_north+0x70>
 8003de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dec:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003f10 <turn_stepper_north+0x188>
 8003df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003df4:	edc7 7a01 	vstr	s15, [r7, #4]

	int num_steps = round(dir_change * STEPS_PER_REV / 360);
 8003df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dfc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003f18 <turn_stepper_north+0x190>
 8003e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e04:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003f10 <turn_stepper_north+0x188>
 8003e08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e0c:	ee16 0a90 	vmov	r0, s13
 8003e10:	f7fc fbba 	bl	8000588 <__aeabi_f2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	ec43 2b10 	vmov	d0, r2, r3
 8003e1c:	f00b f95a 	bl	800f0d4 <round>
 8003e20:	ec53 2b10 	vmov	r2, r3, d0
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fc feb6 	bl	8000b98 <__aeabi_d2iz>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	603b      	str	r3, [r7, #0]

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
 8003e30:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003e32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7fc fb94 	bl	8000564 <__aeabi_i2d>
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	4b36      	ldr	r3, [pc, #216]	@ (8003f1c <turn_stepper_north+0x194>)
 8003e42:	f7fc fbf9 	bl	8000638 <__aeabi_dmul>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <turn_stepper_north+0x198>)
 8003e54:	f7fc fd1a 	bl	800088c <__aeabi_ddiv>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	4629      	mov	r1, r5
 8003e60:	f7fc fa32 	bl	80002c8 <__aeabi_dsub>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4926      	ldr	r1, [pc, #152]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003e6a:	e9c1 2300 	strd	r2, r3, [r1]
	if (stepper_direction > 360) stepper_direction -= 360;
 8003e6e:	4b25      	ldr	r3, [pc, #148]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <turn_stepper_north+0x194>)
 8003e7a:	f7fc fe6d 	bl	8000b58 <__aeabi_dcmpgt>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00d      	beq.n	8003ea0 <turn_stepper_north+0x118>
 8003e84:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <turn_stepper_north+0x194>)
 8003e90:	f7fc fa1a 	bl	80002c8 <__aeabi_dsub>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	491a      	ldr	r1, [pc, #104]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003e9a:	e9c1 2300 	strd	r2, r3, [r1]
 8003e9e:	e018      	b.n	8003ed2 <turn_stepper_north+0x14a>
	else if (stepper_direction < 0) stepper_direction += 360;
 8003ea0:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003ea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	f7fc fe35 	bl	8000b1c <__aeabi_dcmplt>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00c      	beq.n	8003ed2 <turn_stepper_north+0x14a>
 8003eb8:	4b12      	ldr	r3, [pc, #72]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003eba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <turn_stepper_north+0x194>)
 8003ec4:	f7fc fa02 	bl	80002cc <__adddf3>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	490d      	ldr	r1, [pc, #52]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003ece:	e9c1 2300 	strd	r2, r3, [r1]

	Stepper_Rotate(num_steps, 0);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	6838      	ldr	r0, [r7, #0]
 8003ed6:	f7ff fd93 	bl	8003a00 <Stepper_Rotate>

	// Prepare for madgwick filter to take over stepper
	stepper_direction = Madgwick_getYaw(&ahrs);
 8003eda:	4812      	ldr	r0, [pc, #72]	@ (8003f24 <turn_stepper_north+0x19c>)
 8003edc:	f7fe f9d0 	bl	8002280 <Madgwick_getYaw>
 8003ee0:	ee10 3a10 	vmov	r3, s0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc fb4f 	bl	8000588 <__aeabi_f2d>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4905      	ldr	r1, [pc, #20]	@ (8003f04 <turn_stepper_north+0x17c>)
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
	lastStepperUpdate = DWT->CYCCNT;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <turn_stepper_north+0x1a0>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8003f2c <turn_stepper_north+0x1a4>)
 8003efa:	6013      	str	r3, [r2, #0]
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bdb0      	pop	{r4, r5, r7, pc}
 8003f04:	20000870 	.word	0x20000870
 8003f08:	20000868 	.word	0x20000868
 8003f0c:	43340000 	.word	0x43340000
 8003f10:	43b40000 	.word	0x43b40000
 8003f14:	c3340000 	.word	0xc3340000
 8003f18:	45800000 	.word	0x45800000
 8003f1c:	40768000 	.word	0x40768000
 8003f20:	40b00000 	.word	0x40b00000
 8003f24:	2000087c 	.word	0x2000087c
 8003f28:	e0001000 	.word	0xe0001000
 8003f2c:	200008a4 	.word	0x200008a4

08003f30 <calculate_checksum>:

// Xbee and Command Functions ----------------------------------------------------------------
uint8_t calculate_checksum(const char *data) {
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8003f3c:	e006      	b.n	8003f4c <calculate_checksum+0x1c>
		checksum += *data++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	4413      	add	r3, r2
 8003f4a:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f4      	bne.n	8003f3e <calculate_checksum+0xe>
	}
	return checksum % 256;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <send_packet>:

void send_packet(){
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	f2ad 5d54 	subw	sp, sp, #1364	@ 0x554
 8003f6c:	af34      	add	r7, sp, #208	@ 0xd0

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	packet_count += 1;
 8003f6e:	4bae      	ldr	r3, [pc, #696]	@ (8004228 <send_packet+0x2c4>)
 8003f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b21a      	sxth	r2, r3
 8003f7c:	4baa      	ldr	r3, [pc, #680]	@ (8004228 <send_packet+0x2c4>)
 8003f7e:	801a      	strh	r2, [r3, #0]

	snprintf(data, sizeof(data),
 8003f80:	4baa      	ldr	r3, [pc, #680]	@ (800422c <send_packet+0x2c8>)
 8003f82:	f993 3000 	ldrsb.w	r3, [r3]
 8003f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f8a:	4ba9      	ldr	r3, [pc, #676]	@ (8004230 <send_packet+0x2cc>)
 8003f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f94:	4ba7      	ldr	r3, [pc, #668]	@ (8004234 <send_packet+0x2d0>)
 8003f96:	f993 3000 	ldrsb.w	r3, [r3]
 8003f9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f9e:	4ba2      	ldr	r3, [pc, #648]	@ (8004228 <send_packet+0x2c4>)
 8003fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fa8:	4ba3      	ldr	r3, [pc, #652]	@ (8004238 <send_packet+0x2d4>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fb0:	4ba2      	ldr	r3, [pc, #648]	@ (800423c <send_packet+0x2d8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc fae7 	bl	8000588 <__aeabi_f2d>
 8003fba:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
 8003fbe:	4ba0      	ldr	r3, [pc, #640]	@ (8004240 <send_packet+0x2dc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fae0 	bl	8000588 <__aeabi_f2d>
 8003fc8:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 8003fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8004244 <send_packet+0x2e0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fad9 	bl	8000588 <__aeabi_f2d>
 8003fd6:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8003fda:	4b9b      	ldr	r3, [pc, #620]	@ (8004248 <send_packet+0x2e4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fc fad2 	bl	8000588 <__aeabi_f2d>
 8003fe4:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
		"%s,%02d:%02d:%02d,%d,%c,%s,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%02d:%02d:%02d,%.1f,%.1f,%.1f,%u,%s,%d,%.1f,%s",
		 TEAM_ID, mission_time_hr, mission_time_min, mission_time_sec, packet_count,
		 mode, state, altitude, temperature, pressure, voltage,
		 -gyro_z, gyro_x, -gyro_y, -accel_z, accel_x, -accel_y, mag_z, mag_x, mag_y,
 8003fe8:	4b98      	ldr	r3, [pc, #608]	@ (800424c <send_packet+0x2e8>)
 8003fea:	edd3 7a00 	vldr	s15, [r3]
 8003fee:	eef1 7a67 	vneg.f32	s15, s15
 8003ff2:	ee17 3a90 	vmov	r3, s15
	snprintf(data, sizeof(data),
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fac6 	bl	8000588 <__aeabi_f2d>
 8003ffc:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8004000:	4b93      	ldr	r3, [pc, #588]	@ (8004250 <send_packet+0x2ec>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fabf 	bl	8000588 <__aeabi_f2d>
 800400a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
		 -gyro_z, gyro_x, -gyro_y, -accel_z, accel_x, -accel_y, mag_z, mag_x, mag_y,
 800400e:	4b91      	ldr	r3, [pc, #580]	@ (8004254 <send_packet+0x2f0>)
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	eef1 7a67 	vneg.f32	s15, s15
 8004018:	ee17 3a90 	vmov	r3, s15
	snprintf(data, sizeof(data),
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fab3 	bl	8000588 <__aeabi_f2d>
 8004022:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
		 -gyro_z, gyro_x, -gyro_y, -accel_z, accel_x, -accel_y, mag_z, mag_x, mag_y,
 8004026:	4b8c      	ldr	r3, [pc, #560]	@ (8004258 <send_packet+0x2f4>)
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	eef1 7a67 	vneg.f32	s15, s15
 8004030:	ee17 3a90 	vmov	r3, s15
	snprintf(data, sizeof(data),
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc faa7 	bl	8000588 <__aeabi_f2d>
 800403a:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 800403e:	4b87      	ldr	r3, [pc, #540]	@ (800425c <send_packet+0x2f8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc faa0 	bl	8000588 <__aeabi_f2d>
 8004048:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
		 -gyro_z, gyro_x, -gyro_y, -accel_z, accel_x, -accel_y, mag_z, mag_x, mag_y,
 800404c:	4b84      	ldr	r3, [pc, #528]	@ (8004260 <send_packet+0x2fc>)
 800404e:	edd3 7a00 	vldr	s15, [r3]
 8004052:	eef1 7a67 	vneg.f32	s15, s15
 8004056:	ee17 3a90 	vmov	r3, s15
	snprintf(data, sizeof(data),
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa94 	bl	8000588 <__aeabi_f2d>
 8004060:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8004064:	4b7f      	ldr	r3, [pc, #508]	@ (8004264 <send_packet+0x300>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa8d 	bl	8000588 <__aeabi_f2d>
 800406e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8004072:	4b7d      	ldr	r3, [pc, #500]	@ (8004268 <send_packet+0x304>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fa86 	bl	8000588 <__aeabi_f2d>
 800407c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004080:	4b7a      	ldr	r3, [pc, #488]	@ (800426c <send_packet+0x308>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa7f 	bl	8000588 <__aeabi_f2d>
 800408a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800408e:	4b78      	ldr	r3, [pc, #480]	@ (8004270 <send_packet+0x30c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc fa78 	bl	8000588 <__aeabi_f2d>
 8004098:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800409c:	4b75      	ldr	r3, [pc, #468]	@ (8004274 <send_packet+0x310>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040a4:	4b74      	ldr	r3, [pc, #464]	@ (8004278 <send_packet+0x314>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	4b74      	ldr	r3, [pc, #464]	@ (800427c <send_packet+0x318>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	4b73      	ldr	r3, [pc, #460]	@ (8004280 <send_packet+0x31c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa67 	bl	8000588 <__aeabi_f2d>
 80040ba:	4682      	mov	sl, r0
 80040bc:	468b      	mov	fp, r1
 80040be:	4b71      	ldr	r3, [pc, #452]	@ (8004284 <send_packet+0x320>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fa60 	bl	8000588 <__aeabi_f2d>
 80040c8:	4680      	mov	r8, r0
 80040ca:	4689      	mov	r9, r1
 80040cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004288 <send_packet+0x324>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fa59 	bl	8000588 <__aeabi_f2d>
 80040d6:	4604      	mov	r4, r0
 80040d8:	460d      	mov	r5, r1
 80040da:	4b6c      	ldr	r3, [pc, #432]	@ (800428c <send_packet+0x328>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004290 <send_packet+0x32c>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	f7fc fd55 	bl	8000b98 <__aeabi_d2iz>
 80040ee:	4606      	mov	r6, r0
 80040f0:	4b68      	ldr	r3, [pc, #416]	@ (8004294 <send_packet+0x330>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc fa47 	bl	8000588 <__aeabi_f2d>
		 auto_gyro_rotation_rate, gps_time_hr, gps_time_min, gps_time_sec,
		 gps_altitude, gps_latitude, gps_longitude, gps_sats, cmd_echo, (int)direction,
		 apogee_altitude, payload_released ? "TRUE" : "FALSE");
 80040fa:	4b67      	ldr	r3, [pc, #412]	@ (8004298 <send_packet+0x334>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
	snprintf(data, sizeof(data),
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <send_packet+0x1a2>
 8004102:	4b66      	ldr	r3, [pc, #408]	@ (800429c <send_packet+0x338>)
 8004104:	e000      	b.n	8004108 <send_packet+0x1a4>
 8004106:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <send_packet+0x33c>)
 8004108:	f107 0c9c 	add.w	ip, r7, #156	@ 0x9c
 800410c:	9332      	str	r3, [sp, #200]	@ 0xc8
 800410e:	e9cd 0130 	strd	r0, r1, [sp, #192]	@ 0xc0
 8004112:	962e      	str	r6, [sp, #184]	@ 0xb8
 8004114:	4b63      	ldr	r3, [pc, #396]	@ (80042a4 <send_packet+0x340>)
 8004116:	932d      	str	r3, [sp, #180]	@ 0xb4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	932c      	str	r3, [sp, #176]	@ 0xb0
 800411c:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 8004120:	e9cd 8928 	strd	r8, r9, [sp, #160]	@ 0xa0
 8004124:	e9cd ab26 	strd	sl, fp, [sp, #152]	@ 0x98
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	9324      	str	r3, [sp, #144]	@ 0x90
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8004130:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004134:	9322      	str	r3, [sp, #136]	@ 0x88
 8004136:	ed97 7b04 	vldr	d7, [r7, #16]
 800413a:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
 800413e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004142:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8004146:	ed97 7b08 	vldr	d7, [r7, #32]
 800414a:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 800414e:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8004152:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 8004156:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800415a:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 800415e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8004162:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 8004166:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 800416a:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 800416e:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8004172:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8004176:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800417a:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 800417e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8004182:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004186:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800418a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800418e:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8004192:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004196:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800419a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800419e:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80041a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80041a6:	4b40      	ldr	r3, [pc, #256]	@ (80042a8 <send_packet+0x344>)
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041ae:	9304      	str	r3, [sp, #16]
 80041b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041b4:	9303      	str	r3, [sp, #12]
 80041b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4b38      	ldr	r3, [pc, #224]	@ (80042ac <send_packet+0x348>)
 80041ca:	4a39      	ldr	r2, [pc, #228]	@ (80042b0 <send_packet+0x34c>)
 80041cc:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80041d0:	4660      	mov	r0, ip
 80041d2:	f008 f807 	bl	800c1e4 <sniprintf>

	uint8_t checksum = calculate_checksum(data);
 80041d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fea8 	bl	8003f30 <calculate_checksum>
 80041e0:	4603      	mov	r3, r0
 80041e2:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 80041e6:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 80041ea:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 80041ee:	f507 701f 	add.w	r0, r7, #636	@ 0x27c
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	4a2f      	ldr	r2, [pc, #188]	@ (80042b4 <send_packet+0x350>)
 80041f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041fc:	f007 fff2 	bl	800c1e4 <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 8004200:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f853 	bl	80002b0 <strlen>
 800420a:	4603      	mov	r3, r0
 800420c:	b29a      	uxth	r2, r3
 800420e:	f507 711f 	add.w	r1, r7, #636	@ 0x27c
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	4828      	ldr	r0, [pc, #160]	@ (80042b8 <send_packet+0x354>)
 8004218:	f005 fbf4 	bl	8009a04 <HAL_UART_Transmit>
}
 800421c:	bf00      	nop
 800421e:	f207 4784 	addw	r7, r7, #1156	@ 0x484
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004228:	20000608 	.word	0x20000608
 800422c:	20000604 	.word	0x20000604
 8004230:	20000605 	.word	0x20000605
 8004234:	20000606 	.word	0x20000606
 8004238:	20000000 	.word	0x20000000
 800423c:	2000060c 	.word	0x2000060c
 8004240:	20000610 	.word	0x20000610
 8004244:	20000614 	.word	0x20000614
 8004248:	20000618 	.word	0x20000618
 800424c:	20000624 	.word	0x20000624
 8004250:	2000061c 	.word	0x2000061c
 8004254:	20000620 	.word	0x20000620
 8004258:	20000630 	.word	0x20000630
 800425c:	20000628 	.word	0x20000628
 8004260:	2000062c 	.word	0x2000062c
 8004264:	2000063c 	.word	0x2000063c
 8004268:	20000634 	.word	0x20000634
 800426c:	20000638 	.word	0x20000638
 8004270:	20000640 	.word	0x20000640
 8004274:	20000644 	.word	0x20000644
 8004278:	20000645 	.word	0x20000645
 800427c:	20000646 	.word	0x20000646
 8004280:	20000648 	.word	0x20000648
 8004284:	2000064c 	.word	0x2000064c
 8004288:	20000650 	.word	0x20000650
 800428c:	20000654 	.word	0x20000654
 8004290:	20000868 	.word	0x20000868
 8004294:	20000b0c 	.word	0x20000b0c
 8004298:	20000b10 	.word	0x20000b10
 800429c:	0800fe1c 	.word	0x0800fe1c
 80042a0:	0800fe24 	.word	0x0800fe24
 80042a4:	20000014 	.word	0x20000014
 80042a8:	20000004 	.word	0x20000004
 80042ac:	0800fd10 	.word	0x0800fd10
 80042b0:	0800fe2c 	.word	0x0800fe2c
 80042b4:	0800febc 	.word	0x0800febc
 80042b8:	200005bc 	.word	0x200005bc

080042bc <send_mmc_plot_packet>:

void send_mmc_plot_packet(){
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 80042c4:	af12      	add	r7, sp, #72	@ 0x48

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	snprintf(data, sizeof(data),
 80042c6:	4b50      	ldr	r3, [pc, #320]	@ (8004408 <send_mmc_plot_packet+0x14c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc f95c 	bl	8000588 <__aeabi_f2d>
 80042d0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80042d4:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <send_mmc_plot_packet+0x150>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc f955 	bl	8000588 <__aeabi_f2d>
 80042de:	e9c7 0106 	strd	r0, r1, [r7, #24]
		"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d",
		 mag_x, mag_y, (mag_x_min + mag_x_max) / 2, (mag_y_min + mag_y_max) / 2, mag_x_min, mag_x_max, mag_y_min, mag_y_max, (int)direction);
 80042e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004410 <send_mmc_plot_packet+0x154>)
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004414 <send_mmc_plot_packet+0x158>)
 80042ea:	edd3 7a00 	vldr	s15, [r3]
 80042ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80042f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(data, sizeof(data),
 80042fa:	ee16 0a90 	vmov	r0, s13
 80042fe:	f7fc f943 	bl	8000588 <__aeabi_f2d>
 8004302:	e9c7 0104 	strd	r0, r1, [r7, #16]
		 mag_x, mag_y, (mag_x_min + mag_x_max) / 2, (mag_y_min + mag_y_max) / 2, mag_x_min, mag_x_max, mag_y_min, mag_y_max, (int)direction);
 8004306:	4b44      	ldr	r3, [pc, #272]	@ (8004418 <send_mmc_plot_packet+0x15c>)
 8004308:	ed93 7a00 	vldr	s14, [r3]
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <send_mmc_plot_packet+0x160>)
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004316:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800431a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(data, sizeof(data),
 800431e:	ee16 0a90 	vmov	r0, s13
 8004322:	f7fc f931 	bl	8000588 <__aeabi_f2d>
 8004326:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <send_mmc_plot_packet+0x154>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc f92a 	bl	8000588 <__aeabi_f2d>
 8004334:	e9c7 0100 	strd	r0, r1, [r7]
 8004338:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <send_mmc_plot_packet+0x158>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f923 	bl	8000588 <__aeabi_f2d>
 8004342:	4682      	mov	sl, r0
 8004344:	468b      	mov	fp, r1
 8004346:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <send_mmc_plot_packet+0x15c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc f91c 	bl	8000588 <__aeabi_f2d>
 8004350:	4680      	mov	r8, r0
 8004352:	4689      	mov	r9, r1
 8004354:	4b31      	ldr	r3, [pc, #196]	@ (800441c <send_mmc_plot_packet+0x160>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc f915 	bl	8000588 <__aeabi_f2d>
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <send_mmc_plot_packet+0x164>)
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	f7fc fc14 	bl	8000b98 <__aeabi_d2iz>
 8004370:	4603      	mov	r3, r0
 8004372:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8004376:	9310      	str	r3, [sp, #64]	@ 0x40
 8004378:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 800437c:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8004380:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8004384:	ed97 7b00 	vldr	d7, [r7]
 8004388:	ed8d 7b08 	vstr	d7, [sp, #32]
 800438c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004390:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004394:	ed97 7b04 	vldr	d7, [r7, #16]
 8004398:	ed8d 7b04 	vstr	d7, [sp, #16]
 800439c:	ed97 7b06 	vldr	d7, [r7, #24]
 80043a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80043a4:	ed97 7b08 	vldr	d7, [r7, #32]
 80043a8:	ed8d 7b00 	vstr	d7, [sp]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <send_mmc_plot_packet+0x168>)
 80043ae:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80043b2:	f007 ff17 	bl	800c1e4 <sniprintf>

	uint8_t checksum = calculate_checksum(data);
 80043b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fdb8 	bl	8003f30 <calculate_checksum>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 80043c6:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 80043ca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80043ce:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <send_mmc_plot_packet+0x16c>)
 80043d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043dc:	f007 ff02 	bl	800c1e4 <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 80043e0:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fb ff63 	bl	80002b0 <strlen>
 80043ea:	4603      	mov	r3, r0
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	480d      	ldr	r0, [pc, #52]	@ (800442c <send_mmc_plot_packet+0x170>)
 80043f8:	f005 fb04 	bl	8009a04 <HAL_UART_Transmit>
}
 80043fc:	bf00      	nop
 80043fe:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8004402:	46bd      	mov	sp, r7
 8004404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004408:	20000634 	.word	0x20000634
 800440c:	20000638 	.word	0x20000638
 8004410:	200009f0 	.word	0x200009f0
 8004414:	200009fc 	.word	0x200009fc
 8004418:	200009f4 	.word	0x200009f4
 800441c:	200000a0 	.word	0x200000a0
 8004420:	20000868 	.word	0x20000868
 8004424:	0800fec4 	.word	0x0800fec4
 8004428:	0800febc 	.word	0x0800febc
 800442c:	200005bc 	.word	0x200005bc

08004430 <reset_delta_buffer>:

void reset_delta_buffer(){
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
	for(int i = 0; i < DELTA_BUFFER_SIZE; ++i){
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e009      	b.n	8004450 <reset_delta_buffer+0x20>
		delta_buffer[i] = 0;
 800443c:	4a09      	ldr	r2, [pc, #36]	@ (8004464 <reset_delta_buffer+0x34>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < DELTA_BUFFER_SIZE; ++i){
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3301      	adds	r3, #1
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b01      	cmp	r3, #1
 8004454:	ddf2      	ble.n	800443c <reset_delta_buffer+0xc>
	}
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	200009d8 	.word	0x200009d8

08004468 <handle_state>:

void handle_state(){
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
	// States: ‘LAUNCH_PAD’,‘ASCENT’, ‘APOGEE’, ‘DESCENT’, ‘PROBE_RELEASE’, ‘LANDED’
	float noise_threshold = 1.5;
 800446e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8004472:	60fb      	str	r3, [r7, #12]
	float landing_threshold = 0.2;
 8004474:	4b9a      	ldr	r3, [pc, #616]	@ (80046e0 <handle_state+0x278>)
 8004476:	60bb      	str	r3, [r7, #8]

	float delta = altitude - prev_alt;
 8004478:	4b9a      	ldr	r3, [pc, #616]	@ (80046e4 <handle_state+0x27c>)
 800447a:	ed93 7a00 	vldr	s14, [r3]
 800447e:	4b9a      	ldr	r3, [pc, #616]	@ (80046e8 <handle_state+0x280>)
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004488:	edc7 7a01 	vstr	s15, [r7, #4]

	// Update delta buffer
	delta_buffer[delta_index] = delta;
 800448c:	4b97      	ldr	r3, [pc, #604]	@ (80046ec <handle_state+0x284>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a97      	ldr	r2, [pc, #604]	@ (80046f0 <handle_state+0x288>)
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
	delta_index = (delta_index + 1) % DELTA_BUFFER_SIZE;  // Circular buffer index
 800449a:	4b94      	ldr	r3, [pc, #592]	@ (80046ec <handle_state+0x284>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	bfb8      	it	lt
 80044a8:	425b      	neglt	r3, r3
 80044aa:	4a90      	ldr	r2, [pc, #576]	@ (80046ec <handle_state+0x284>)
 80044ac:	6013      	str	r3, [r2, #0]

	// Compute rolling average of deltas
	float avg_delta = 0;
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < DELTA_BUFFER_SIZE; i++) {
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e00e      	b.n	80044d8 <handle_state+0x70>
		avg_delta += delta_buffer[i];
 80044ba:	4a8d      	ldr	r2, [pc, #564]	@ (80046f0 <handle_state+0x288>)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	edd3 7a00 	vldr	s15, [r3]
 80044c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80044ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ce:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < DELTA_BUFFER_SIZE; i++) {
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	dded      	ble.n	80044ba <handle_state+0x52>
	}
	avg_delta /= DELTA_BUFFER_SIZE;  // Take the average
 80044de:	ed97 7a05 	vldr	s14, [r7, #20]
 80044e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80044e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ea:	edc7 7a05 	vstr	s15, [r7, #20]

	if (strncmp(state, "LAUNCH_PAD", strlen("LAUNCH_PAD")) == 0){
 80044ee:	220a      	movs	r2, #10
 80044f0:	4980      	ldr	r1, [pc, #512]	@ (80046f4 <handle_state+0x28c>)
 80044f2:	4881      	ldr	r0, [pc, #516]	@ (80046f8 <handle_state+0x290>)
 80044f4:	f007 ff04 	bl	800c300 <strncmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d116      	bne.n	800452c <handle_state+0xc4>
		if (avg_delta > noise_threshold){
 80044fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004502:	edd7 7a03 	vldr	s15, [r7, #12]
 8004506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	f340 80df 	ble.w	80046d0 <handle_state+0x268>
			memset(state, 0, sizeof(state));
 8004512:	220e      	movs	r2, #14
 8004514:	2100      	movs	r1, #0
 8004516:	4878      	ldr	r0, [pc, #480]	@ (80046f8 <handle_state+0x290>)
 8004518:	f007 fedb 	bl	800c2d2 <memset>
			strncpy(state, "ASCENDING", strlen("ASCENDING"));
 800451c:	4b76      	ldr	r3, [pc, #472]	@ (80046f8 <handle_state+0x290>)
 800451e:	4a77      	ldr	r2, [pc, #476]	@ (80046fc <handle_state+0x294>)
 8004520:	ca07      	ldmia	r2, {r0, r1, r2}
 8004522:	c303      	stmia	r3!, {r0, r1}
 8004524:	701a      	strb	r2, [r3, #0]
			store_flash_data();
 8004526:	f7fe f893 	bl	8002650 <store_flash_data>
 800452a:	e0d1      	b.n	80046d0 <handle_state+0x268>
		}
	}
	else if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
 800452c:	2209      	movs	r2, #9
 800452e:	4973      	ldr	r1, [pc, #460]	@ (80046fc <handle_state+0x294>)
 8004530:	4871      	ldr	r0, [pc, #452]	@ (80046f8 <handle_state+0x290>)
 8004532:	f007 fee5 	bl	800c300 <strncmp>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d129      	bne.n	8004590 <handle_state+0x128>
		if (avg_delta < -noise_threshold){
 800453c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004540:	eef1 7a67 	vneg.f32	s15, s15
 8004544:	ed97 7a05 	vldr	s14, [r7, #20]
 8004548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	f140 80be 	bpl.w	80046d0 <handle_state+0x268>
			memset(state, 0, sizeof(state));
 8004554:	220e      	movs	r2, #14
 8004556:	2100      	movs	r1, #0
 8004558:	4867      	ldr	r0, [pc, #412]	@ (80046f8 <handle_state+0x290>)
 800455a:	f007 feba 	bl	800c2d2 <memset>
			strncpy(state, "APOGEE", strlen("APOGEE"));
 800455e:	4b66      	ldr	r3, [pc, #408]	@ (80046f8 <handle_state+0x290>)
 8004560:	4a67      	ldr	r2, [pc, #412]	@ (8004700 <handle_state+0x298>)
 8004562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004566:	6018      	str	r0, [r3, #0]
 8004568:	3304      	adds	r3, #4
 800456a:	8019      	strh	r1, [r3, #0]
			if (altitude > apogee_altitude){
 800456c:	4b5d      	ldr	r3, [pc, #372]	@ (80046e4 <handle_state+0x27c>)
 800456e:	ed93 7a00 	vldr	s14, [r3]
 8004572:	4b64      	ldr	r3, [pc, #400]	@ (8004704 <handle_state+0x29c>)
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004580:	dd03      	ble.n	800458a <handle_state+0x122>
				apogee_altitude = altitude;
 8004582:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <handle_state+0x27c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5f      	ldr	r2, [pc, #380]	@ (8004704 <handle_state+0x29c>)
 8004588:	6013      	str	r3, [r2, #0]
			}
			store_flash_data();
 800458a:	f7fe f861 	bl	8002650 <store_flash_data>
 800458e:	e09f      	b.n	80046d0 <handle_state+0x268>
		}
	}
	else if (strncmp(state, "APOGEE", strlen("APOGEE")) == 0){
 8004590:	2206      	movs	r2, #6
 8004592:	495b      	ldr	r1, [pc, #364]	@ (8004700 <handle_state+0x298>)
 8004594:	4858      	ldr	r0, [pc, #352]	@ (80046f8 <handle_state+0x290>)
 8004596:	f007 feb3 	bl	800c300 <strncmp>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11b      	bne.n	80045d8 <handle_state+0x170>
		memset(state, 0, sizeof(state));
 80045a0:	220e      	movs	r2, #14
 80045a2:	2100      	movs	r1, #0
 80045a4:	4854      	ldr	r0, [pc, #336]	@ (80046f8 <handle_state+0x290>)
 80045a6:	f007 fe94 	bl	800c2d2 <memset>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
 80045aa:	4b53      	ldr	r3, [pc, #332]	@ (80046f8 <handle_state+0x290>)
 80045ac:	4a56      	ldr	r2, [pc, #344]	@ (8004708 <handle_state+0x2a0>)
 80045ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80045b0:	c303      	stmia	r3!, {r0, r1}
 80045b2:	801a      	strh	r2, [r3, #0]
		if (altitude > apogee_altitude){
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <handle_state+0x27c>)
 80045b6:	ed93 7a00 	vldr	s14, [r3]
 80045ba:	4b52      	ldr	r3, [pc, #328]	@ (8004704 <handle_state+0x29c>)
 80045bc:	edd3 7a00 	vldr	s15, [r3]
 80045c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c8:	dd03      	ble.n	80045d2 <handle_state+0x16a>
			apogee_altitude = altitude;
 80045ca:	4b46      	ldr	r3, [pc, #280]	@ (80046e4 <handle_state+0x27c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004704 <handle_state+0x29c>)
 80045d0:	6013      	str	r3, [r2, #0]
		}
		store_flash_data();
 80045d2:	f7fe f83d 	bl	8002650 <store_flash_data>
 80045d6:	e07b      	b.n	80046d0 <handle_state+0x268>
	}
	else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
 80045d8:	220a      	movs	r2, #10
 80045da:	494b      	ldr	r1, [pc, #300]	@ (8004708 <handle_state+0x2a0>)
 80045dc:	4846      	ldr	r0, [pc, #280]	@ (80046f8 <handle_state+0x290>)
 80045de:	f007 fe8f 	bl	800c300 <strncmp>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d155      	bne.n	8004694 <handle_state+0x22c>
		if (altitude <= apogee_altitude * 0.75 && !payload_released){
 80045e8:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <handle_state+0x27c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ffcb 	bl	8000588 <__aeabi_f2d>
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
 80045f6:	4b43      	ldr	r3, [pc, #268]	@ (8004704 <handle_state+0x29c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fb ffc4 	bl	8000588 <__aeabi_f2d>
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	4b41      	ldr	r3, [pc, #260]	@ (800470c <handle_state+0x2a4>)
 8004606:	f7fc f817 	bl	8000638 <__aeabi_dmul>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4620      	mov	r0, r4
 8004610:	4629      	mov	r1, r5
 8004612:	f7fc fa8d 	bl	8000b30 <__aeabi_dcmple>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <handle_state+0x1e6>
 800461c:	4b3c      	ldr	r3, [pc, #240]	@ (8004710 <handle_state+0x2a8>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d114      	bne.n	800464e <handle_state+0x1e6>
			memset(state, 0, sizeof(state));
 8004624:	220e      	movs	r2, #14
 8004626:	2100      	movs	r1, #0
 8004628:	4833      	ldr	r0, [pc, #204]	@ (80046f8 <handle_state+0x290>)
 800462a:	f007 fe52 	bl	800c2d2 <memset>
			strncpy(state, "PROBE_RELEASE", strlen("PROBE_RELEASE"));
 800462e:	4a32      	ldr	r2, [pc, #200]	@ (80046f8 <handle_state+0x290>)
 8004630:	4b38      	ldr	r3, [pc, #224]	@ (8004714 <handle_state+0x2ac>)
 8004632:	4614      	mov	r4, r2
 8004634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004636:	c407      	stmia	r4!, {r0, r1, r2}
 8004638:	7023      	strb	r3, [r4, #0]
			// Deploy Auto Gyro
			Servo_Open();
 800463a:	f7fd fef1 	bl	8002420 <Servo_Open>
			payload_released = true;
 800463e:	4b34      	ldr	r3, [pc, #208]	@ (8004710 <handle_state+0x2a8>)
 8004640:	2201      	movs	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
			north_cam_on = true;
 8004644:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <handle_state+0x2b0>)
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]

			turn_stepper_north();
 800464a:	f7ff fb9d 	bl	8003d88 <turn_stepper_north>
		}
		if (abs(avg_delta) < landing_threshold){
 800464e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004656:	ee17 3a90 	vmov	r3, s15
 800465a:	2b00      	cmp	r3, #0
 800465c:	bfb8      	it	lt
 800465e:	425b      	neglt	r3, r3
 8004660:	ee07 3a90 	vmov	s15, r3
 8004664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004668:	ed97 7a02 	vldr	s14, [r7, #8]
 800466c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	dd2c      	ble.n	80046d0 <handle_state+0x268>
			memset(state, 0, sizeof(state));
 8004676:	220e      	movs	r2, #14
 8004678:	2100      	movs	r1, #0
 800467a:	481f      	ldr	r0, [pc, #124]	@ (80046f8 <handle_state+0x290>)
 800467c:	f007 fe29 	bl	800c2d2 <memset>
			strncpy(state, "LANDED", strlen("LANDED"));
 8004680:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <handle_state+0x290>)
 8004682:	4a26      	ldr	r2, [pc, #152]	@ (800471c <handle_state+0x2b4>)
 8004684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004688:	6018      	str	r0, [r3, #0]
 800468a:	3304      	adds	r3, #4
 800468c:	8019      	strh	r1, [r3, #0]
			store_flash_data();
 800468e:	f7fd ffdf 	bl	8002650 <store_flash_data>
 8004692:	e01d      	b.n	80046d0 <handle_state+0x268>
		}
	}
	else if (strncmp(state, "PROBE_RELEASE", strlen("PROBE_RELEASE")) == 0){
 8004694:	220d      	movs	r2, #13
 8004696:	491f      	ldr	r1, [pc, #124]	@ (8004714 <handle_state+0x2ac>)
 8004698:	4817      	ldr	r0, [pc, #92]	@ (80046f8 <handle_state+0x290>)
 800469a:	f007 fe31 	bl	800c300 <strncmp>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10a      	bne.n	80046ba <handle_state+0x252>
		memset(state, 0, sizeof(state));
 80046a4:	220e      	movs	r2, #14
 80046a6:	2100      	movs	r1, #0
 80046a8:	4813      	ldr	r0, [pc, #76]	@ (80046f8 <handle_state+0x290>)
 80046aa:	f007 fe12 	bl	800c2d2 <memset>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
 80046ae:	4b12      	ldr	r3, [pc, #72]	@ (80046f8 <handle_state+0x290>)
 80046b0:	4a15      	ldr	r2, [pc, #84]	@ (8004708 <handle_state+0x2a0>)
 80046b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80046b4:	c303      	stmia	r3!, {r0, r1}
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	e00a      	b.n	80046d0 <handle_state+0x268>
	}
	else if (strncmp(state, "LANDED", strlen("LANDED")) == 0){
 80046ba:	2206      	movs	r2, #6
 80046bc:	4917      	ldr	r1, [pc, #92]	@ (800471c <handle_state+0x2b4>)
 80046be:	480e      	ldr	r0, [pc, #56]	@ (80046f8 <handle_state+0x290>)
 80046c0:	f007 fe1e 	bl	800c300 <strncmp>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <handle_state+0x268>
		// stop telemetry transmission
//		telemetry_status = 0;
		// Turn off north cam
		north_cam_on = false;
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <handle_state+0x2b0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
	}

	prev_alt = altitude;
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <handle_state+0x27c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <handle_state+0x280>)
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}
 80046e0:	3e4ccccd 	.word	0x3e4ccccd
 80046e4:	2000060c 	.word	0x2000060c
 80046e8:	200009d4 	.word	0x200009d4
 80046ec:	200009e0 	.word	0x200009e0
 80046f0:	200009d8 	.word	0x200009d8
 80046f4:	0800fef0 	.word	0x0800fef0
 80046f8:	20000004 	.word	0x20000004
 80046fc:	0800fefc 	.word	0x0800fefc
 8004700:	0800ff08 	.word	0x0800ff08
 8004704:	20000b0c 	.word	0x20000b0c
 8004708:	0800ff10 	.word	0x0800ff10
 800470c:	3fe80000 	.word	0x3fe80000
 8004710:	20000b10 	.word	0x20000b10
 8004714:	0800ff1c 	.word	0x0800ff1c
 8004718:	20000878 	.word	0x20000878
 800471c:	0800ff2c 	.word	0x0800ff2c

08004720 <read_transmit_telemetry>:

void read_transmit_telemetry (){
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	if (mode == 'F') {
 8004724:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <read_transmit_telemetry+0x18>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b46      	cmp	r3, #70	@ 0x46
 800472a:	d101      	bne.n	8004730 <read_transmit_telemetry+0x10>
		read_sensors();
 800472c:	f7ff f81c 	bl	8003768 <read_sensors>
	}

	send_packet();
 8004730:	f7ff fc18 	bl	8003f64 <send_packet>
}
 8004734:	bf00      	nop
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000000 	.word	0x20000000

0800473c <set_cmd_echo>:

void set_cmd_echo(const char *cmd)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	memset(cmd_echo, '\0', sizeof(cmd_echo));
 8004744:	2240      	movs	r2, #64	@ 0x40
 8004746:	2100      	movs	r1, #0
 8004748:	4807      	ldr	r0, [pc, #28]	@ (8004768 <set_cmd_echo+0x2c>)
 800474a:	f007 fdc2 	bl	800c2d2 <memset>
	strncpy(cmd_echo, cmd, strlen(cmd));
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fb fdae 	bl	80002b0 <strlen>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4803      	ldr	r0, [pc, #12]	@ (8004768 <set_cmd_echo+0x2c>)
 800475c:	f007 fde2 	bl	800c324 <strncpy>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000014 	.word	0x20000014

0800476c <handle_command>:

void handle_command(const char *cmd) {
 800476c:	b580      	push	{r7, lr}
 800476e:	b08a      	sub	sp, #40	@ 0x28
 8004770:	af02      	add	r7, sp, #8
 8004772:	6078      	str	r0, [r7, #4]

	// SIM command
	if (strncmp(cmd, sim_command, strlen(sim_command)) == 0) {
 8004774:	48b5      	ldr	r0, [pc, #724]	@ (8004a4c <handle_command+0x2e0>)
 8004776:	f7fb fd9b 	bl	80002b0 <strlen>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	49b3      	ldr	r1, [pc, #716]	@ (8004a4c <handle_command+0x2e0>)
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f007 fdbd 	bl	800c300 <strncmp>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d12a      	bne.n	80047e2 <handle_command+0x76>

		// disable
		if (cmd[13] == 'D'){
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	330d      	adds	r3, #13
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b44      	cmp	r3, #68	@ 0x44
 8004794:	d108      	bne.n	80047a8 <handle_command+0x3c>
			set_cmd_echo("SIMDISABLE");
 8004796:	48ae      	ldr	r0, [pc, #696]	@ (8004a50 <handle_command+0x2e4>)
 8004798:	f7ff ffd0 	bl	800473c <set_cmd_echo>
			mode = 'F';
 800479c:	4bad      	ldr	r3, [pc, #692]	@ (8004a54 <handle_command+0x2e8>)
 800479e:	2246      	movs	r2, #70	@ 0x46
 80047a0:	701a      	strb	r2, [r3, #0]
			sim_enabled = false;
 80047a2:	4bad      	ldr	r3, [pc, #692]	@ (8004a58 <handle_command+0x2ec>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
		}

		// enable
		if (cmd[13] == 'E'){
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	330d      	adds	r3, #13
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b45      	cmp	r3, #69	@ 0x45
 80047b0:	d105      	bne.n	80047be <handle_command+0x52>
			set_cmd_echo("SIMENABLE");
 80047b2:	48aa      	ldr	r0, [pc, #680]	@ (8004a5c <handle_command+0x2f0>)
 80047b4:	f7ff ffc2 	bl	800473c <set_cmd_echo>
			sim_enabled = true;
 80047b8:	4ba7      	ldr	r3, [pc, #668]	@ (8004a58 <handle_command+0x2ec>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
		}

		// activate
		if (cmd[13] == 'A' && sim_enabled == true){
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	330d      	adds	r3, #13
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b41      	cmp	r3, #65	@ 0x41
 80047c6:	f040 829b 	bne.w	8004d00 <handle_command+0x594>
 80047ca:	4ba3      	ldr	r3, [pc, #652]	@ (8004a58 <handle_command+0x2ec>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	f040 8296 	bne.w	8004d00 <handle_command+0x594>
			mode = 'S';
 80047d4:	4b9f      	ldr	r3, [pc, #636]	@ (8004a54 <handle_command+0x2e8>)
 80047d6:	2253      	movs	r2, #83	@ 0x53
 80047d8:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("SIMACTIVATE");
 80047da:	48a1      	ldr	r0, [pc, #644]	@ (8004a60 <handle_command+0x2f4>)
 80047dc:	f7ff ffae 	bl	800473c <set_cmd_echo>
		// Update variable
		set_cmd_echo("RST");
		reset_state();
		sim_enabled = false;
	}
}
 80047e0:	e28e      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, simp_command, strlen(simp_command)) == 0) {
 80047e2:	48a0      	ldr	r0, [pc, #640]	@ (8004a64 <handle_command+0x2f8>)
 80047e4:	f7fb fd64 	bl	80002b0 <strlen>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	499d      	ldr	r1, [pc, #628]	@ (8004a64 <handle_command+0x2f8>)
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f007 fd86 	bl	800c300 <strncmp>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d157      	bne.n	80048aa <handle_command+0x13e>
		if (mode == 'S') {
 80047fa:	4b96      	ldr	r3, [pc, #600]	@ (8004a54 <handle_command+0x2e8>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b53      	cmp	r3, #83	@ 0x53
 8004800:	d14f      	bne.n	80048a2 <handle_command+0x136>
			strncpy(pressure_str, &cmd[14], 6);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f103 010e 	add.w	r1, r3, #14
 8004808:	f107 0318 	add.w	r3, r7, #24
 800480c:	2206      	movs	r2, #6
 800480e:	4618      	mov	r0, r3
 8004810:	f007 fd88 	bl	800c324 <strncpy>
			pressure_str[6] = '\0';
 8004814:	2300      	movs	r3, #0
 8004816:	77bb      	strb	r3, [r7, #30]
			read_sensors();
 8004818:	f7fe ffa6 	bl	8003768 <read_sensors>
			pressure = atof(pressure_str)/1000;
 800481c:	f107 0318 	add.w	r3, r7, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f006 f92b 	bl	800aa7c <atof>
 8004826:	ec51 0b10 	vmov	r0, r1, d0
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	4b8e      	ldr	r3, [pc, #568]	@ (8004a68 <handle_command+0x2fc>)
 8004830:	f7fc f82c 	bl	800088c <__aeabi_ddiv>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	f7fc f9f4 	bl	8000c28 <__aeabi_d2f>
 8004840:	4603      	mov	r3, r0
 8004842:	4a8a      	ldr	r2, [pc, #552]	@ (8004a6c <handle_command+0x300>)
 8004844:	6013      	str	r3, [r2, #0]
			altitude = calculate_altitude(pressure);
 8004846:	4b89      	ldr	r3, [pc, #548]	@ (8004a6c <handle_command+0x300>)
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	eeb0 0a67 	vmov.f32	s0, s15
 8004850:	f7fe f962 	bl	8002b18 <calculate_altitude>
 8004854:	eef0 7a40 	vmov.f32	s15, s0
 8004858:	4b85      	ldr	r3, [pc, #532]	@ (8004a70 <handle_command+0x304>)
 800485a:	edc3 7a00 	vstr	s15, [r3]
			char temp[12] = "SIMP";
 800485e:	4a85      	ldr	r2, [pc, #532]	@ (8004a74 <handle_command+0x308>)
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004868:	6018      	str	r0, [r3, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	7019      	strb	r1, [r3, #0]
 800486e:	f107 0311 	add.w	r3, r7, #17
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	f8c3 2003 	str.w	r2, [r3, #3]
			strcat(temp, pressure_str);
 800487a:	f107 0218 	add.w	r2, r7, #24
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f007 fd2c 	bl	800c2e2 <strcat>
			set_cmd_echo(temp);
 800488a:	f107 030c 	add.w	r3, r7, #12
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff54 	bl	800473c <set_cmd_echo>
			memset(pressure_str, '\0', sizeof(pressure_str));
 8004894:	f107 0318 	add.w	r3, r7, #24
 8004898:	2207      	movs	r2, #7
 800489a:	2100      	movs	r1, #0
 800489c:	4618      	mov	r0, r3
 800489e:	f007 fd18 	bl	800c2d2 <memset>
		sim_enabled = false;
 80048a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004a58 <handle_command+0x2ec>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
}
 80048a8:	e22a      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, set_time_command, strlen(set_time_command)) == 0) {
 80048aa:	4873      	ldr	r0, [pc, #460]	@ (8004a78 <handle_command+0x30c>)
 80048ac:	f7fb fd00 	bl	80002b0 <strlen>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4970      	ldr	r1, [pc, #448]	@ (8004a78 <handle_command+0x30c>)
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f007 fd22 	bl	800c300 <strncmp>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d17a      	bne.n	80049b8 <handle_command+0x24c>
		if (cmd[12]=='G') {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	330c      	adds	r3, #12
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b47      	cmp	r3, #71	@ 0x47
 80048ca:	d112      	bne.n	80048f2 <handle_command+0x186>
			mission_time_hr = (int16_t)gps_time_hr;
 80048cc:	4b6b      	ldr	r3, [pc, #428]	@ (8004a7c <handle_command+0x310>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b25a      	sxtb	r2, r3
 80048d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004a80 <handle_command+0x314>)
 80048d4:	701a      	strb	r2, [r3, #0]
			mission_time_min = (int16_t)gps_time_min;
 80048d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004a84 <handle_command+0x318>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b25a      	sxtb	r2, r3
 80048dc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <handle_command+0x31c>)
 80048de:	701a      	strb	r2, [r3, #0]
			mission_time_sec = (int16_t)gps_time_sec;
 80048e0:	4b6a      	ldr	r3, [pc, #424]	@ (8004a8c <handle_command+0x320>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	b25a      	sxtb	r2, r3
 80048e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a90 <handle_command+0x324>)
 80048e8:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("STGPS");
 80048ea:	486a      	ldr	r0, [pc, #424]	@ (8004a94 <handle_command+0x328>)
 80048ec:	f7ff ff26 	bl	800473c <set_cmd_echo>
 80048f0:	e05f      	b.n	80049b2 <handle_command+0x246>
			memset(temp, 0, sizeof(temp));
 80048f2:	f107 0308 	add.w	r3, r7, #8
 80048f6:	2203      	movs	r2, #3
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f007 fce9 	bl	800c2d2 <memset>
			temp[0] = cmd[12];
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	330c      	adds	r3, #12
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[13];
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	330d      	adds	r3, #13
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	727b      	strb	r3, [r7, #9]
			mission_time_hr = atoi(temp);
 8004910:	f107 0308 	add.w	r3, r7, #8
 8004914:	4618      	mov	r0, r3
 8004916:	f006 f8b4 	bl	800aa82 <atoi>
 800491a:	4603      	mov	r3, r0
 800491c:	b25a      	sxtb	r2, r3
 800491e:	4b58      	ldr	r3, [pc, #352]	@ (8004a80 <handle_command+0x314>)
 8004920:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	2203      	movs	r2, #3
 8004928:	2100      	movs	r1, #0
 800492a:	4618      	mov	r0, r3
 800492c:	f007 fcd1 	bl	800c2d2 <memset>
			temp[0] = cmd[15];
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	330f      	adds	r3, #15
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[16];
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3310      	adds	r3, #16
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	727b      	strb	r3, [r7, #9]
			mission_time_min = atoi(temp);
 8004940:	f107 0308 	add.w	r3, r7, #8
 8004944:	4618      	mov	r0, r3
 8004946:	f006 f89c 	bl	800aa82 <atoi>
 800494a:	4603      	mov	r3, r0
 800494c:	b25a      	sxtb	r2, r3
 800494e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a88 <handle_command+0x31c>)
 8004950:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 8004952:	f107 0308 	add.w	r3, r7, #8
 8004956:	2203      	movs	r2, #3
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f007 fcb9 	bl	800c2d2 <memset>
			temp[0] = cmd[18];
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3312      	adds	r3, #18
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[19];
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3313      	adds	r3, #19
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	727b      	strb	r3, [r7, #9]
			mission_time_sec = atoi(temp);
 8004970:	f107 0308 	add.w	r3, r7, #8
 8004974:	4618      	mov	r0, r3
 8004976:	f006 f884 	bl	800aa82 <atoi>
 800497a:	4603      	mov	r3, r0
 800497c:	b25a      	sxtb	r2, r3
 800497e:	4b44      	ldr	r3, [pc, #272]	@ (8004a90 <handle_command+0x324>)
 8004980:	701a      	strb	r2, [r3, #0]
			memset(cmd_echo, '\0', sizeof(cmd_echo));
 8004982:	2240      	movs	r2, #64	@ 0x40
 8004984:	2100      	movs	r1, #0
 8004986:	4844      	ldr	r0, [pc, #272]	@ (8004a98 <handle_command+0x32c>)
 8004988:	f007 fca3 	bl	800c2d2 <memset>
			snprintf(cmd_echo, 11, "ST%02d:%02d:%02d", mission_time_hr, mission_time_min, mission_time_sec);
 800498c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a80 <handle_command+0x314>)
 800498e:	f993 3000 	ldrsb.w	r3, [r3]
 8004992:	4619      	mov	r1, r3
 8004994:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <handle_command+0x31c>)
 8004996:	f993 3000 	ldrsb.w	r3, [r3]
 800499a:	461a      	mov	r2, r3
 800499c:	4b3c      	ldr	r3, [pc, #240]	@ (8004a90 <handle_command+0x324>)
 800499e:	f993 3000 	ldrsb.w	r3, [r3]
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	9200      	str	r2, [sp, #0]
 80049a6:	460b      	mov	r3, r1
 80049a8:	4a3c      	ldr	r2, [pc, #240]	@ (8004a9c <handle_command+0x330>)
 80049aa:	210b      	movs	r1, #11
 80049ac:	483a      	ldr	r0, [pc, #232]	@ (8004a98 <handle_command+0x32c>)
 80049ae:	f007 fc19 	bl	800c1e4 <sniprintf>
		store_flash_data();
 80049b2:	f7fd fe4d 	bl	8002650 <store_flash_data>
}
 80049b6:	e1a3      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, cal_alt_command, strlen(cal_alt_command)) == 0) {
 80049b8:	4839      	ldr	r0, [pc, #228]	@ (8004aa0 <handle_command+0x334>)
 80049ba:	f7fb fc79 	bl	80002b0 <strlen>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	4937      	ldr	r1, [pc, #220]	@ (8004aa0 <handle_command+0x334>)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f007 fc9b 	bl	800c300 <strncmp>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d124      	bne.n	8004a1a <handle_command+0x2ae>
		calibrate_altitude();
 80049d0:	f7fe fa92 	bl	8002ef8 <calibrate_altitude>
		store_flash_data();
 80049d4:	f7fd fe3c 	bl	8002650 <store_flash_data>
		set_cmd_echo("CAL");
 80049d8:	4832      	ldr	r0, [pc, #200]	@ (8004aa4 <handle_command+0x338>)
 80049da:	f7ff feaf 	bl	800473c <set_cmd_echo>
		if (strncmp(state, "PRE-LAUNCH", strlen("PRE-LAUNCH")) == 0) {
 80049de:	220a      	movs	r2, #10
 80049e0:	4931      	ldr	r1, [pc, #196]	@ (8004aa8 <handle_command+0x33c>)
 80049e2:	4832      	ldr	r0, [pc, #200]	@ (8004aac <handle_command+0x340>)
 80049e4:	f007 fc8c 	bl	800c300 <strncmp>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <handle_command+0x296>
			memset(state, 0, sizeof(state));
 80049ee:	220e      	movs	r2, #14
 80049f0:	2100      	movs	r1, #0
 80049f2:	482e      	ldr	r0, [pc, #184]	@ (8004aac <handle_command+0x340>)
 80049f4:	f007 fc6d 	bl	800c2d2 <memset>
			strncpy(state, "LAUNCH-READY", strlen("LAUNCH-READY"));
 80049f8:	4b2c      	ldr	r3, [pc, #176]	@ (8004aac <handle_command+0x340>)
 80049fa:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab0 <handle_command+0x344>)
 80049fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80049fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		prev_alt = 0;
 8004a02:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab4 <handle_command+0x348>)
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
		reset_delta_buffer();
 8004a0a:	f7ff fd11 	bl	8004430 <reset_delta_buffer>
		read_MPL3115A2();
 8004a0e:	f7fe f9fd 	bl	8002e0c <read_MPL3115A2>
		sim_enabled = false;
 8004a12:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <handle_command+0x2ec>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
}
 8004a18:	e172      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, tel_on_command, strlen(tel_on_command)) == 0) {
 8004a1a:	4827      	ldr	r0, [pc, #156]	@ (8004ab8 <handle_command+0x34c>)
 8004a1c:	f7fb fc48 	bl	80002b0 <strlen>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4924      	ldr	r1, [pc, #144]	@ (8004ab8 <handle_command+0x34c>)
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f007 fc6a 	bl	800c300 <strncmp>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d148      	bne.n	8004ac4 <handle_command+0x358>
		telemetry_status = 1;
 8004a32:	4b22      	ldr	r3, [pc, #136]	@ (8004abc <handle_command+0x350>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXON");
 8004a38:	4821      	ldr	r0, [pc, #132]	@ (8004ac0 <handle_command+0x354>)
 8004a3a:	f7ff fe7f 	bl	800473c <set_cmd_echo>
		sim_enabled = false;
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <handle_command+0x2ec>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
		flush_PA1010D();
 8004a44:	f7fe fc22 	bl	800328c <flush_PA1010D>
}
 8004a48:	e15a      	b.n	8004d00 <handle_command+0x594>
 8004a4a:	bf00      	nop
 8004a4c:	200008a8 	.word	0x200008a8
 8004a50:	0800ff34 	.word	0x0800ff34
 8004a54:	20000000 	.word	0x20000000
 8004a58:	20000a04 	.word	0x20000a04
 8004a5c:	0800ff40 	.word	0x0800ff40
 8004a60:	0800ff4c 	.word	0x0800ff4c
 8004a64:	200008b8 	.word	0x200008b8
 8004a68:	408f4000 	.word	0x408f4000
 8004a6c:	20000614 	.word	0x20000614
 8004a70:	2000060c 	.word	0x2000060c
 8004a74:	0800fff4 	.word	0x0800fff4
 8004a78:	200008c8 	.word	0x200008c8
 8004a7c:	20000644 	.word	0x20000644
 8004a80:	20000604 	.word	0x20000604
 8004a84:	20000645 	.word	0x20000645
 8004a88:	20000605 	.word	0x20000605
 8004a8c:	20000646 	.word	0x20000646
 8004a90:	20000606 	.word	0x20000606
 8004a94:	0800ff58 	.word	0x0800ff58
 8004a98:	20000014 	.word	0x20000014
 8004a9c:	0800ff60 	.word	0x0800ff60
 8004aa0:	200008d8 	.word	0x200008d8
 8004aa4:	0800ff74 	.word	0x0800ff74
 8004aa8:	0800ff78 	.word	0x0800ff78
 8004aac:	20000004 	.word	0x20000004
 8004ab0:	0800ff84 	.word	0x0800ff84
 8004ab4:	200009d4 	.word	0x200009d4
 8004ab8:	2000094c 	.word	0x2000094c
 8004abc:	200000a8 	.word	0x200000a8
 8004ac0:	0800ff94 	.word	0x0800ff94
	else if (strncmp(cmd, tel_off_command, strlen(tel_off_command)) == 0) {
 8004ac4:	4890      	ldr	r0, [pc, #576]	@ (8004d08 <handle_command+0x59c>)
 8004ac6:	f7fb fbf3 	bl	80002b0 <strlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	498e      	ldr	r1, [pc, #568]	@ (8004d08 <handle_command+0x59c>)
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f007 fc15 	bl	800c300 <strncmp>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <handle_command+0x384>
		telemetry_status = 0;
 8004adc:	4b8b      	ldr	r3, [pc, #556]	@ (8004d0c <handle_command+0x5a0>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXOFF");
 8004ae2:	488b      	ldr	r0, [pc, #556]	@ (8004d10 <handle_command+0x5a4>)
 8004ae4:	f7ff fe2a 	bl	800473c <set_cmd_echo>
		sim_enabled = false;
 8004ae8:	4b8a      	ldr	r3, [pc, #552]	@ (8004d14 <handle_command+0x5a8>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
}
 8004aee:	e107      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, cal_comp_on_command, strlen(cal_comp_on_command)) == 0) {
 8004af0:	4889      	ldr	r0, [pc, #548]	@ (8004d18 <handle_command+0x5ac>)
 8004af2:	f7fb fbdd 	bl	80002b0 <strlen>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	4987      	ldr	r1, [pc, #540]	@ (8004d18 <handle_command+0x5ac>)
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f007 fbff 	bl	800c300 <strncmp>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d12f      	bne.n	8004b68 <handle_command+0x3fc>
		mag_x_offset = 0;
 8004b08:	4b84      	ldr	r3, [pc, #528]	@ (8004d1c <handle_command+0x5b0>)
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
		mag_y_offset = 0;
 8004b10:	4b83      	ldr	r3, [pc, #524]	@ (8004d20 <handle_command+0x5b4>)
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		mag_z_offset = 0;
 8004b18:	4b82      	ldr	r3, [pc, #520]	@ (8004d24 <handle_command+0x5b8>)
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
		read_MMC5603();
 8004b20:	f7fe f84e 	bl	8002bc0 <read_MMC5603>
		mag_x_min = mag_x;
 8004b24:	4b80      	ldr	r3, [pc, #512]	@ (8004d28 <handle_command+0x5bc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a80      	ldr	r2, [pc, #512]	@ (8004d2c <handle_command+0x5c0>)
 8004b2a:	6013      	str	r3, [r2, #0]
		mag_x_max = mag_x;
 8004b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d28 <handle_command+0x5bc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a7f      	ldr	r2, [pc, #508]	@ (8004d30 <handle_command+0x5c4>)
 8004b32:	6013      	str	r3, [r2, #0]
		mag_y_min = mag_y;
 8004b34:	4b7f      	ldr	r3, [pc, #508]	@ (8004d34 <handle_command+0x5c8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7f      	ldr	r2, [pc, #508]	@ (8004d38 <handle_command+0x5cc>)
 8004b3a:	6013      	str	r3, [r2, #0]
		mag_y_max = mag_y;
 8004b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8004d34 <handle_command+0x5c8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a7e      	ldr	r2, [pc, #504]	@ (8004d3c <handle_command+0x5d0>)
 8004b42:	6013      	str	r3, [r2, #0]
		mag_z_min = mag_z;
 8004b44:	4b7e      	ldr	r3, [pc, #504]	@ (8004d40 <handle_command+0x5d4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a7e      	ldr	r2, [pc, #504]	@ (8004d44 <handle_command+0x5d8>)
 8004b4a:	6013      	str	r3, [r2, #0]
		mag_z_max = mag_z;
 8004b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8004d40 <handle_command+0x5d4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a7d      	ldr	r2, [pc, #500]	@ (8004d48 <handle_command+0x5dc>)
 8004b52:	6013      	str	r3, [r2, #0]
		calibrating_compass = 1;
 8004b54:	4b7d      	ldr	r3, [pc, #500]	@ (8004d4c <handle_command+0x5e0>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	701a      	strb	r2, [r3, #0]
		set_cmd_echo("CCON");
 8004b5a:	487d      	ldr	r0, [pc, #500]	@ (8004d50 <handle_command+0x5e4>)
 8004b5c:	f7ff fdee 	bl	800473c <set_cmd_echo>
		sim_enabled = false;
 8004b60:	4b6c      	ldr	r3, [pc, #432]	@ (8004d14 <handle_command+0x5a8>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
}
 8004b66:	e0cb      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, cal_comp_off_command, strlen(cal_comp_off_command)) == 0) {
 8004b68:	487a      	ldr	r0, [pc, #488]	@ (8004d54 <handle_command+0x5e8>)
 8004b6a:	f7fb fba1 	bl	80002b0 <strlen>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	4978      	ldr	r1, [pc, #480]	@ (8004d54 <handle_command+0x5e8>)
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f007 fbc3 	bl	800c300 <strncmp>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d138      	bne.n	8004bf2 <handle_command+0x486>
		calibrating_compass = 0;
 8004b80:	4b72      	ldr	r3, [pc, #456]	@ (8004d4c <handle_command+0x5e0>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		mag_x_offset = (mag_x_min + mag_x_max) / 2;
 8004b86:	4b69      	ldr	r3, [pc, #420]	@ (8004d2c <handle_command+0x5c0>)
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	4b68      	ldr	r3, [pc, #416]	@ (8004d30 <handle_command+0x5c4>)
 8004b8e:	edd3 7a00 	vldr	s15, [r3]
 8004b92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b96:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004d1c <handle_command+0x5b0>)
 8004ba0:	edc3 7a00 	vstr	s15, [r3]
		mag_y_offset = (mag_y_min + mag_y_max) / 2;
 8004ba4:	4b64      	ldr	r3, [pc, #400]	@ (8004d38 <handle_command+0x5cc>)
 8004ba6:	ed93 7a00 	vldr	s14, [r3]
 8004baa:	4b64      	ldr	r3, [pc, #400]	@ (8004d3c <handle_command+0x5d0>)
 8004bac:	edd3 7a00 	vldr	s15, [r3]
 8004bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bb4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bbc:	4b58      	ldr	r3, [pc, #352]	@ (8004d20 <handle_command+0x5b4>)
 8004bbe:	edc3 7a00 	vstr	s15, [r3]
		mag_z_offset = (mag_z_min + mag_z_max) / 2;
 8004bc2:	4b60      	ldr	r3, [pc, #384]	@ (8004d44 <handle_command+0x5d8>)
 8004bc4:	ed93 7a00 	vldr	s14, [r3]
 8004bc8:	4b5f      	ldr	r3, [pc, #380]	@ (8004d48 <handle_command+0x5dc>)
 8004bca:	edd3 7a00 	vldr	s15, [r3]
 8004bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bd2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bda:	4b52      	ldr	r3, [pc, #328]	@ (8004d24 <handle_command+0x5b8>)
 8004bdc:	edc3 7a00 	vstr	s15, [r3]
		store_flash_data();
 8004be0:	f7fd fd36 	bl	8002650 <store_flash_data>
		set_cmd_echo("CCOFF");
 8004be4:	485c      	ldr	r0, [pc, #368]	@ (8004d58 <handle_command+0x5ec>)
 8004be6:	f7ff fda9 	bl	800473c <set_cmd_echo>
		sim_enabled = false;
 8004bea:	4b4a      	ldr	r3, [pc, #296]	@ (8004d14 <handle_command+0x5a8>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
}
 8004bf0:	e086      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, set_camera_north_command, strlen(set_camera_north_command)) == 0) {
 8004bf2:	485a      	ldr	r0, [pc, #360]	@ (8004d5c <handle_command+0x5f0>)
 8004bf4:	f7fb fb5c 	bl	80002b0 <strlen>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4957      	ldr	r1, [pc, #348]	@ (8004d5c <handle_command+0x5f0>)
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f007 fb7e 	bl	800c300 <strncmp>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d108      	bne.n	8004c1c <handle_command+0x4b0>
		set_cmd_echo("SCN");
 8004c0a:	4855      	ldr	r0, [pc, #340]	@ (8004d60 <handle_command+0x5f4>)
 8004c0c:	f7ff fd96 	bl	800473c <set_cmd_echo>
		set_stepper_north();
 8004c10:	f7ff f8a8 	bl	8003d64 <set_stepper_north>
		sim_enabled = false;
 8004c14:	4b3f      	ldr	r3, [pc, #252]	@ (8004d14 <handle_command+0x5a8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
}
 8004c1a:	e071      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, activate_north_cam_command, strlen(activate_north_cam_command)) == 0) {
 8004c1c:	4851      	ldr	r0, [pc, #324]	@ (8004d64 <handle_command+0x5f8>)
 8004c1e:	f7fb fb47 	bl	80002b0 <strlen>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461a      	mov	r2, r3
 8004c26:	494f      	ldr	r1, [pc, #316]	@ (8004d64 <handle_command+0x5f8>)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f007 fb69 	bl	800c300 <strncmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <handle_command+0x4e0>
		set_cmd_echo("MECCAMON");
 8004c34:	484c      	ldr	r0, [pc, #304]	@ (8004d68 <handle_command+0x5fc>)
 8004c36:	f7ff fd81 	bl	800473c <set_cmd_echo>
		north_cam_on = true;
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d6c <handle_command+0x600>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
		turn_stepper_north();
 8004c40:	f7ff f8a2 	bl	8003d88 <turn_stepper_north>
		sim_enabled = false;
 8004c44:	4b33      	ldr	r3, [pc, #204]	@ (8004d14 <handle_command+0x5a8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	701a      	strb	r2, [r3, #0]
}
 8004c4a:	e059      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, deactivate_north_cam_command, strlen(deactivate_north_cam_command)) == 0) {
 8004c4c:	4848      	ldr	r0, [pc, #288]	@ (8004d70 <handle_command+0x604>)
 8004c4e:	f7fb fb2f 	bl	80002b0 <strlen>
 8004c52:	4603      	mov	r3, r0
 8004c54:	461a      	mov	r2, r3
 8004c56:	4946      	ldr	r1, [pc, #280]	@ (8004d70 <handle_command+0x604>)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f007 fb51 	bl	800c300 <strncmp>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <handle_command+0x50c>
		set_cmd_echo("MECCAMOFF");
 8004c64:	4843      	ldr	r0, [pc, #268]	@ (8004d74 <handle_command+0x608>)
 8004c66:	f7ff fd69 	bl	800473c <set_cmd_echo>
		north_cam_on = false;
 8004c6a:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <handle_command+0x600>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004c70:	4b28      	ldr	r3, [pc, #160]	@ (8004d14 <handle_command+0x5a8>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
}
 8004c76:	e043      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, release_payload_command, strlen(release_payload_command)) == 0) {
 8004c78:	483f      	ldr	r0, [pc, #252]	@ (8004d78 <handle_command+0x60c>)
 8004c7a:	f7fb fb19 	bl	80002b0 <strlen>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	493d      	ldr	r1, [pc, #244]	@ (8004d78 <handle_command+0x60c>)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f007 fb3b 	bl	800c300 <strncmp>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <handle_command+0x53c>
		set_cmd_echo("MECPAYLOADON");
 8004c90:	483a      	ldr	r0, [pc, #232]	@ (8004d7c <handle_command+0x610>)
 8004c92:	f7ff fd53 	bl	800473c <set_cmd_echo>
		Servo_Open();
 8004c96:	f7fd fbc3 	bl	8002420 <Servo_Open>
		payload_released = true;
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <handle_command+0x614>)
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d14 <handle_command+0x5a8>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
}
 8004ca6:	e02b      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, reset_release_payload_command, strlen(reset_release_payload_command)) == 0) {
 8004ca8:	4836      	ldr	r0, [pc, #216]	@ (8004d84 <handle_command+0x618>)
 8004caa:	f7fb fb01 	bl	80002b0 <strlen>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4934      	ldr	r1, [pc, #208]	@ (8004d84 <handle_command+0x618>)
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f007 fb23 	bl	800c300 <strncmp>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10b      	bne.n	8004cd8 <handle_command+0x56c>
		set_cmd_echo("MECPAYLOADOFF");
 8004cc0:	4831      	ldr	r0, [pc, #196]	@ (8004d88 <handle_command+0x61c>)
 8004cc2:	f7ff fd3b 	bl	800473c <set_cmd_echo>
		Servo_Close();
 8004cc6:	f7fd fbd0 	bl	800246a <Servo_Close>
		payload_released = false;
 8004cca:	4b2d      	ldr	r3, [pc, #180]	@ (8004d80 <handle_command+0x614>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004cd0:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <handle_command+0x5a8>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	701a      	strb	r2, [r3, #0]
}
 8004cd6:	e013      	b.n	8004d00 <handle_command+0x594>
	else if (strncmp(cmd, reset_state_command, strlen(reset_state_command)) == 0) {
 8004cd8:	482c      	ldr	r0, [pc, #176]	@ (8004d8c <handle_command+0x620>)
 8004cda:	f7fb fae9 	bl	80002b0 <strlen>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	492a      	ldr	r1, [pc, #168]	@ (8004d8c <handle_command+0x620>)
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f007 fb0b 	bl	800c300 <strncmp>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <handle_command+0x594>
		set_cmd_echo("RST");
 8004cf0:	4827      	ldr	r0, [pc, #156]	@ (8004d90 <handle_command+0x624>)
 8004cf2:	f7ff fd23 	bl	800473c <set_cmd_echo>
		reset_state();
 8004cf6:	f000 f84d 	bl	8004d94 <reset_state>
		sim_enabled = false;
 8004cfa:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <handle_command+0x5a8>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	2000095c 	.word	0x2000095c
 8004d0c:	200000a8 	.word	0x200000a8
 8004d10:	0800ff9c 	.word	0x0800ff9c
 8004d14:	20000a04 	.word	0x20000a04
 8004d18:	2000096c 	.word	0x2000096c
 8004d1c:	200009e4 	.word	0x200009e4
 8004d20:	200009e8 	.word	0x200009e8
 8004d24:	200009ec 	.word	0x200009ec
 8004d28:	20000634 	.word	0x20000634
 8004d2c:	200009f0 	.word	0x200009f0
 8004d30:	200009fc 	.word	0x200009fc
 8004d34:	20000638 	.word	0x20000638
 8004d38:	200009f4 	.word	0x200009f4
 8004d3c:	200000a0 	.word	0x200000a0
 8004d40:	2000063c 	.word	0x2000063c
 8004d44:	200009f8 	.word	0x200009f8
 8004d48:	200000a4 	.word	0x200000a4
 8004d4c:	20000b08 	.word	0x20000b08
 8004d50:	0800ffa4 	.word	0x0800ffa4
 8004d54:	2000097c 	.word	0x2000097c
 8004d58:	0800ffac 	.word	0x0800ffac
 8004d5c:	200008e8 	.word	0x200008e8
 8004d60:	0800ffb4 	.word	0x0800ffb4
 8004d64:	200008f8 	.word	0x200008f8
 8004d68:	0800ffb8 	.word	0x0800ffb8
 8004d6c:	20000878 	.word	0x20000878
 8004d70:	20000910 	.word	0x20000910
 8004d74:	0800ffc4 	.word	0x0800ffc4
 8004d78:	2000098c 	.word	0x2000098c
 8004d7c:	0800ffd0 	.word	0x0800ffd0
 8004d80:	20000b10 	.word	0x20000b10
 8004d84:	200009a8 	.word	0x200009a8
 8004d88:	0800ffe0 	.word	0x0800ffe0
 8004d8c:	200009c4 	.word	0x200009c4
 8004d90:	0800fff0 	.word	0x0800fff0

08004d94 <reset_state>:

void reset_state(){
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
 8004d98:	2080      	movs	r0, #128	@ 0x80
 8004d9a:	f7fd fb13 	bl	80023c4 <Set_Servo_Angle>
	payload_released = false;
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <reset_state+0x54>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
	north_cam_on = false;
 8004da4:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <reset_state+0x58>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
	prev_alt = altitude;
 8004daa:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <reset_state+0x5c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a11      	ldr	r2, [pc, #68]	@ (8004df4 <reset_state+0x60>)
 8004db0:	6013      	str	r3, [r2, #0]
	reset_delta_buffer();
 8004db2:	f7ff fb3d 	bl	8004430 <reset_delta_buffer>
	telemetry_status = 1;
 8004db6:	4b10      	ldr	r3, [pc, #64]	@ (8004df8 <reset_state+0x64>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]
	memset(state, 0, sizeof(state));
 8004dbc:	220e      	movs	r2, #14
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	480e      	ldr	r0, [pc, #56]	@ (8004dfc <reset_state+0x68>)
 8004dc2:	f007 fa86 	bl	800c2d2 <memset>
	strncpy(state, "LAUNCH_PAD", strlen("LAUNCH_PAD"));
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <reset_state+0x68>)
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e00 <reset_state+0x6c>)
 8004dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dcc:	c303      	stmia	r3!, {r0, r1}
 8004dce:	801a      	strh	r2, [r3, #0]
	apogee_altitude = DEFAULT_APOGEE_ALT;
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e04 <reset_state+0x70>)
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
	store_flash_data();
 8004dd8:	f7fd fc3a 	bl	8002650 <store_flash_data>
	msCounter = 0;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <reset_state+0x74>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000b10 	.word	0x20000b10
 8004dec:	20000878 	.word	0x20000878
 8004df0:	2000060c 	.word	0x2000060c
 8004df4:	200009d4 	.word	0x200009d4
 8004df8:	200000a8 	.word	0x200000a8
 8004dfc:	20000004 	.word	0x20000004
 8004e00:	0800fef0 	.word	0x0800fef0
 8004e04:	20000b0c 	.word	0x20000b0c
 8004e08:	20000b14 	.word	0x20000b14

08004e0c <initial_state_reset>:

void initial_state_reset(){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	read_MPL3115A2();
 8004e10:	f7fd fffc 	bl	8002e0c <read_MPL3115A2>
	prev_alt = altitude;
 8004e14:	4b35      	ldr	r3, [pc, #212]	@ (8004eec <initial_state_reset+0xe0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a35      	ldr	r2, [pc, #212]	@ (8004ef0 <initial_state_reset+0xe4>)
 8004e1a:	6013      	str	r3, [r2, #0]
	reset_delta_buffer();
 8004e1c:	f7ff fb08 	bl	8004430 <reset_delta_buffer>

	// Set North Direction Offset
	read_MMC5603();
 8004e20:	f7fd fece 	bl	8002bc0 <read_MMC5603>
	set_stepper_north();
 8004e24:	f7fe ff9e 	bl	8003d64 <set_stepper_north>

	read_MPU6050();
 8004e28:	f7fe f8e6 	bl	8002ff8 <read_MPU6050>

	if (altitude > MIN_STATE_MAINTAINED_ALT && ((accel_x * accel_x) + (accel_y * accel_y) + (accel_z * accel_z) > 1)){
 8004e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004eec <initial_state_reset+0xe0>)
 8004e2e:	edd3 7a00 	vldr	s15, [r3]
 8004e32:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	dd4f      	ble.n	8004ee0 <initial_state_reset+0xd4>
 8004e40:	4b2c      	ldr	r3, [pc, #176]	@ (8004ef4 <initial_state_reset+0xe8>)
 8004e42:	ed93 7a00 	vldr	s14, [r3]
 8004e46:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <initial_state_reset+0xe8>)
 8004e48:	edd3 7a00 	vldr	s15, [r3]
 8004e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e50:	4b29      	ldr	r3, [pc, #164]	@ (8004ef8 <initial_state_reset+0xec>)
 8004e52:	edd3 6a00 	vldr	s13, [r3]
 8004e56:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <initial_state_reset+0xec>)
 8004e58:	edd3 7a00 	vldr	s15, [r3]
 8004e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e64:	4b25      	ldr	r3, [pc, #148]	@ (8004efc <initial_state_reset+0xf0>)
 8004e66:	edd3 6a00 	vldr	s13, [r3]
 8004e6a:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <initial_state_reset+0xf0>)
 8004e6c:	edd3 7a00 	vldr	s15, [r3]
 8004e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	dd2c      	ble.n	8004ee0 <initial_state_reset+0xd4>
		// Assume there was a power reset during flight. Use configurations from flash
		if (payload_released)
 8004e86:	4b1e      	ldr	r3, [pc, #120]	@ (8004f00 <initial_state_reset+0xf4>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <initial_state_reset+0x88>
			Servo_Open();
 8004e8e:	f7fd fac7 	bl	8002420 <Servo_Open>
 8004e92:	e001      	b.n	8004e98 <initial_state_reset+0x8c>
		else
			Servo_Close();
 8004e94:	f7fd fae9 	bl	800246a <Servo_Close>

		// Lost Power during flight. Reseting to previous state
		if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
 8004e98:	2209      	movs	r2, #9
 8004e9a:	491a      	ldr	r1, [pc, #104]	@ (8004f04 <initial_state_reset+0xf8>)
 8004e9c:	481a      	ldr	r0, [pc, #104]	@ (8004f08 <initial_state_reset+0xfc>)
 8004e9e:	f007 fa2f 	bl	800c300 <strncmp>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <initial_state_reset+0xa8>
			Servo_Close();
 8004ea8:	f7fd fadf 	bl	800246a <Servo_Close>
			north_cam_on = false;
 8004eac:	4b17      	ldr	r3, [pc, #92]	@ (8004f0c <initial_state_reset+0x100>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e009      	b.n	8004ec8 <initial_state_reset+0xbc>
		}
		else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
 8004eb4:	220a      	movs	r2, #10
 8004eb6:	4916      	ldr	r1, [pc, #88]	@ (8004f10 <initial_state_reset+0x104>)
 8004eb8:	4813      	ldr	r0, [pc, #76]	@ (8004f08 <initial_state_reset+0xfc>)
 8004eba:	f007 fa21 	bl	800c300 <strncmp>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <initial_state_reset+0xbc>
			Servo_Open();
 8004ec4:	f7fd faac 	bl	8002420 <Servo_Open>
		}

		prev_alt = altitude;
 8004ec8:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <initial_state_reset+0xe0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <initial_state_reset+0xe4>)
 8004ece:	6013      	str	r3, [r2, #0]
		reset_delta_buffer();
 8004ed0:	f7ff faae 	bl	8004430 <reset_delta_buffer>
		telemetry_status = 1;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <initial_state_reset+0x108>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
		store_flash_data();
 8004eda:	f7fd fbb9 	bl	8002650 <store_flash_data>
 8004ede:	e002      	b.n	8004ee6 <initial_state_reset+0xda>
	}
	else{
		reset_state();
 8004ee0:	f7ff ff58 	bl	8004d94 <reset_state>
	}
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000060c 	.word	0x2000060c
 8004ef0:	200009d4 	.word	0x200009d4
 8004ef4:	20000628 	.word	0x20000628
 8004ef8:	2000062c 	.word	0x2000062c
 8004efc:	20000630 	.word	0x20000630
 8004f00:	20000b10 	.word	0x20000b10
 8004f04:	0800fefc 	.word	0x0800fefc
 8004f08:	20000004 	.word	0x20000004
 8004f0c:	20000878 	.word	0x20000878
 8004f10:	0800ff10 	.word	0x0800ff10
 8004f14:	200000a8 	.word	0x200000a8

08004f18 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);
 8004f24:	4a24      	ldr	r2, [pc, #144]	@ (8004fb8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004f26:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <HAL_UARTEx_RxEventCallback+0xa4>)
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	23ff      	movs	r3, #255	@ 0xff
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f007 fa8b 	bl	800c44a <memcpy>

	memset(rx_data, 0, sizeof(rx_data));
 8004f34:	22ff      	movs	r2, #255	@ 0xff
 8004f36:	2100      	movs	r1, #0
 8004f38:	4820      	ldr	r0, [pc, #128]	@ (8004fbc <HAL_UARTEx_RxEventCallback+0xa4>)
 8004f3a:	f007 f9ca 	bl	800c2d2 <memset>

	if (rx_packet[0] == '~') {
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b7e      	cmp	r3, #126	@ 0x7e
 8004f44:	d12b      	bne.n	8004f9e <HAL_UARTEx_RxEventCallback+0x86>
		// Calculate where the comma and checksum should be
		char *comma_pos = &rx_packet[Size - 3];  // Comma is 3 characters from the end (2 for checksum, 1 for comma)
 8004f46:	887b      	ldrh	r3, [r7, #2]
 8004f48:	3b03      	subs	r3, #3
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

		// Ensure the expected comma is at the right position
		if (*comma_pos == ',') {
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b2c      	cmp	r3, #44	@ 0x2c
 8004f56:	d122      	bne.n	8004f9e <HAL_UARTEx_RxEventCallback+0x86>
			// Null-terminate the data part (exclude comma and checksum)
			*comma_pos = '\0';
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]

			// Extract and convert the received checksum (2 characters after the comma)
			uint8_t received_checksum = (uint8_t)strtol(&rx_packet[Size - 2], NULL, 16);  // Convert checksum to integer
 8004f5e:	887b      	ldrh	r3, [r7, #2]
 8004f60:	3b02      	subs	r3, #2
 8004f62:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004f64:	4413      	add	r3, r2
 8004f66:	2210      	movs	r2, #16
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f006 fc16 	bl	800b79c <strtol>
 8004f70:	4603      	mov	r3, r0
 8004f72:	72fb      	strb	r3, [r7, #11]
			// Calculate checksum of the data part (after '~' and before comma)
			uint8_t calculated_checksum = calculate_checksum(&rx_packet[1]);
 8004f74:	4812      	ldr	r0, [pc, #72]	@ (8004fc0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8004f76:	f7fe ffdb 	bl	8003f30 <calculate_checksum>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	72bb      	strb	r3, [r7, #10]
			// Compare calculated checksum with the received one
			if (calculated_checksum == received_checksum && command_ready == false) {
 8004f7e:	7aba      	ldrb	r2, [r7, #10]
 8004f80:	7afb      	ldrb	r3, [r7, #11]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10b      	bne.n	8004f9e <HAL_UARTEx_RxEventCallback+0x86>
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <HAL_UARTEx_RxEventCallback+0xac>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_UARTEx_RxEventCallback+0x86>
				// Checksum is valid, process the command
				strcpy(command_buffer, &rx_packet[1]);
 8004f90:	490b      	ldr	r1, [pc, #44]	@ (8004fc0 <HAL_UARTEx_RxEventCallback+0xa8>)
 8004f92:	480d      	ldr	r0, [pc, #52]	@ (8004fc8 <HAL_UARTEx_RxEventCallback+0xb0>)
 8004f94:	f007 fa51 	bl	800c43a <strcpy>
				command_ready = true;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <HAL_UARTEx_RxEventCallback+0xac>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Call function for next packet
	uart_received = HAL_UARTEx_ReceiveToIdle_IT(huart, rx_data, RX_BFR_SIZE);
 8004f9e:	22ff      	movs	r2, #255	@ 0xff
 8004fa0:	4906      	ldr	r1, [pc, #24]	@ (8004fbc <HAL_UARTEx_RxEventCallback+0xa4>)
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f004 fdb9 	bl	8009b1a <HAL_UARTEx_ReceiveToIdle_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b07      	ldr	r3, [pc, #28]	@ (8004fcc <HAL_UARTEx_RxEventCallback+0xb4>)
 8004fae:	701a      	strb	r2, [r3, #0]

}
 8004fb0:	bf00      	nop
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	200002cc 	.word	0x200002cc
 8004fbc:	20000a08 	.word	0x20000a08
 8004fc0:	200002cd 	.word	0x200002cd
 8004fc4:	200003cb 	.word	0x200003cb
 8004fc8:	200003cc 	.word	0x200003cc
 8004fcc:	20000b07 	.word	0x20000b07

08004fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fd4:	f000 fdae 	bl	8005b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fd8:	f000 f902 	bl	80051e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fdc:	f000 fa5a 	bl	8005494 <MX_GPIO_Init>
  MX_I2C3_Init();
 8004fe0:	f000 f98a 	bl	80052f8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004fe4:	f000 f9b6 	bl	8005354 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004fe8:	f000 fa2a 	bl	8005440 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004fec:	f000 f956 	bl	800529c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	2110      	movs	r1, #16
 8004ff4:	4863      	ldr	r0, [pc, #396]	@ (8005184 <main+0x1b4>)
 8004ff6:	f001 fb61 	bl	80066bc <HAL_GPIO_WritePin>

  load_flash_data();
 8004ffa:	f7fd fbfd 	bl	80027f8 <load_flash_data>

  HAL_Delay(100);
 8004ffe:	2064      	movs	r0, #100	@ 0x64
 8005000:	f000 fe0a 	bl	8005c18 <HAL_Delay>
  init_sensors();
 8005004:	f7fe fbee 	bl	80037e4 <init_sensors>
  HAL_Delay(100);
 8005008:	2064      	movs	r0, #100	@ 0x64
 800500a:	f000 fe05 	bl	8005c18 <HAL_Delay>

  init_commands();
 800500e:	f7fe fc07 	bl	8003820 <init_commands>
  Servo_Init();
 8005012:	f7fd fa4f 	bl	80024b4 <Servo_Init>

  // Initialize Xbee receiving
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005016:	2025      	movs	r0, #37	@ 0x25
 8005018:	f000 ff19 	bl	8005e4e <HAL_NVIC_EnableIRQ>
  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_data, RX_BFR_SIZE);
 800501c:	22ff      	movs	r2, #255	@ 0xff
 800501e:	495a      	ldr	r1, [pc, #360]	@ (8005188 <main+0x1b8>)
 8005020:	485a      	ldr	r0, [pc, #360]	@ (800518c <main+0x1bc>)
 8005022:	f004 fd7a 	bl	8009b1a <HAL_UARTEx_ReceiveToIdle_IT>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	4b59      	ldr	r3, [pc, #356]	@ (8005190 <main+0x1c0>)
 800502c:	701a      	strb	r2, [r3, #0]

  if (isnan(mag_x_offset)){
 800502e:	4b59      	ldr	r3, [pc, #356]	@ (8005194 <main+0x1c4>)
 8005030:	edd3 7a00 	vldr	s15, [r3]
 8005034:	eef4 7a67 	vcmp.f32	s15, s15
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	d70a      	bvc.n	8005054 <main+0x84>
	  mag_x_offset = 0.196062505;
 800503e:	4b55      	ldr	r3, [pc, #340]	@ (8005194 <main+0x1c4>)
 8005040:	4a55      	ldr	r2, [pc, #340]	@ (8005198 <main+0x1c8>)
 8005042:	601a      	str	r2, [r3, #0]
	  mag_y_offset = 0.279687494;
 8005044:	4b55      	ldr	r3, [pc, #340]	@ (800519c <main+0x1cc>)
 8005046:	4a56      	ldr	r2, [pc, #344]	@ (80051a0 <main+0x1d0>)
 8005048:	601a      	str	r2, [r3, #0]
	  mag_z_offset = -0.832656264;
 800504a:	4b56      	ldr	r3, [pc, #344]	@ (80051a4 <main+0x1d4>)
 800504c:	4a56      	ldr	r2, [pc, #344]	@ (80051a8 <main+0x1d8>)
 800504e:	601a      	str	r2, [r3, #0]
	  read_MMC5603();
 8005050:	f7fd fdb6 	bl	8002bc0 <read_MMC5603>
	}
	if (isnan(altitude_offset)){
 8005054:	4b55      	ldr	r3, [pc, #340]	@ (80051ac <main+0x1dc>)
 8005056:	edd3 7a00 	vldr	s15, [r3]
 800505a:	eef4 7a67 	vcmp.f32	s15, s15
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d701      	bvc.n	8005068 <main+0x98>
	  calibrate_altitude();
 8005064:	f7fd ff48 	bl	8002ef8 <calibrate_altitude>
	}

  DWT_Init();
 8005068:	f7fe fd0c 	bl	8003a84 <DWT_Init>
  Madgwick_init(&ahrs, 200);
 800506c:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 80051b0 <main+0x1e0>
 8005070:	4850      	ldr	r0, [pc, #320]	@ (80051b4 <main+0x1e4>)
 8005072:	f7fb ffed 	bl	8001050 <Madgwick_init>

  initial_state_reset();
 8005076:	f7ff fec9 	bl	8004e0c <initial_state_reset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready){
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <main+0x1e8>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <main+0xc0>
		  handle_command(command_buffer);
 8005084:	484d      	ldr	r0, [pc, #308]	@ (80051bc <main+0x1ec>)
 8005086:	f7ff fb71 	bl	800476c <handle_command>
		  command_ready = false;
 800508a:	4b4b      	ldr	r3, [pc, #300]	@ (80051b8 <main+0x1e8>)
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
	  }

	  // Correction of Camera Angle
	  if (north_cam_on){
 8005090:	4b4b      	ldr	r3, [pc, #300]	@ (80051c0 <main+0x1f0>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <main+0xcc>
		  Stepper_Correction();
 8005098:	f7fe fd0e 	bl	8003ab8 <Stepper_Correction>
	  }

	  if (calibrating_compass){
 800509c:	4b49      	ldr	r3, [pc, #292]	@ (80051c4 <main+0x1f4>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00c      	beq.n	80050be <main+0xee>
		  calibrate_mmc();
 80050a4:	f7fe f962 	bl	800336c <calibrate_mmc>
		  if (msCounter >= 250){
 80050a8:	4b47      	ldr	r3, [pc, #284]	@ (80051c8 <main+0x1f8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2bf9      	cmp	r3, #249	@ 0xf9
 80050ae:	d906      	bls.n	80050be <main+0xee>
			  send_mmc_plot_packet();
 80050b0:	f7ff f904 	bl	80042bc <send_mmc_plot_packet>
			  msCounter -= 250;
 80050b4:	4b44      	ldr	r3, [pc, #272]	@ (80051c8 <main+0x1f8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3bfa      	subs	r3, #250	@ 0xfa
 80050ba:	4a43      	ldr	r2, [pc, #268]	@ (80051c8 <main+0x1f8>)
 80050bc:	6013      	str	r3, [r2, #0]
		  }
	  }

	  // Happens 1 time per second
	  if (msCounter >= 1000){
 80050be:	4b42      	ldr	r3, [pc, #264]	@ (80051c8 <main+0x1f8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050c6:	d3d8      	bcc.n	800507a <main+0xaa>
		  msCounter -= 1000;
 80050c8:	4b3f      	ldr	r3, [pc, #252]	@ (80051c8 <main+0x1f8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80050d0:	4a3d      	ldr	r2, [pc, #244]	@ (80051c8 <main+0x1f8>)
 80050d2:	6013      	str	r3, [r2, #0]

		  if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80050d4:	483d      	ldr	r0, [pc, #244]	@ (80051cc <main+0x1fc>)
 80050d6:	f002 fbfd 	bl	80078d4 <HAL_I2C_GetState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d001      	beq.n	80050e4 <main+0x114>
			  init_sensors();
 80050e0:	f7fe fb80 	bl	80037e4 <init_sensors>
		  }

		  // Handle Mission Time
		  mission_time_sec++;
 80050e4:	4b3a      	ldr	r3, [pc, #232]	@ (80051d0 <main+0x200>)
 80050e6:	f993 3000 	ldrsb.w	r3, [r3]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	b25a      	sxtb	r2, r3
 80050f2:	4b37      	ldr	r3, [pc, #220]	@ (80051d0 <main+0x200>)
 80050f4:	701a      	strb	r2, [r3, #0]
		  if ( mission_time_sec >= 60 ){
 80050f6:	4b36      	ldr	r3, [pc, #216]	@ (80051d0 <main+0x200>)
 80050f8:	f993 3000 	ldrsb.w	r3, [r3]
 80050fc:	2b3b      	cmp	r3, #59	@ 0x3b
 80050fe:	dd11      	ble.n	8005124 <main+0x154>
			  mission_time_sec -= 60;
 8005100:	4b33      	ldr	r3, [pc, #204]	@ (80051d0 <main+0x200>)
 8005102:	f993 3000 	ldrsb.w	r3, [r3]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3b3c      	subs	r3, #60	@ 0x3c
 800510a:	b2db      	uxtb	r3, r3
 800510c:	b25a      	sxtb	r2, r3
 800510e:	4b30      	ldr	r3, [pc, #192]	@ (80051d0 <main+0x200>)
 8005110:	701a      	strb	r2, [r3, #0]
			  mission_time_min += 1;
 8005112:	4b30      	ldr	r3, [pc, #192]	@ (80051d4 <main+0x204>)
 8005114:	f993 3000 	ldrsb.w	r3, [r3]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	3301      	adds	r3, #1
 800511c:	b2db      	uxtb	r3, r3
 800511e:	b25a      	sxtb	r2, r3
 8005120:	4b2c      	ldr	r3, [pc, #176]	@ (80051d4 <main+0x204>)
 8005122:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_min >= 60 ){
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <main+0x204>)
 8005126:	f993 3000 	ldrsb.w	r3, [r3]
 800512a:	2b3b      	cmp	r3, #59	@ 0x3b
 800512c:	dd11      	ble.n	8005152 <main+0x182>
			  mission_time_min -= 60;
 800512e:	4b29      	ldr	r3, [pc, #164]	@ (80051d4 <main+0x204>)
 8005130:	f993 3000 	ldrsb.w	r3, [r3]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	3b3c      	subs	r3, #60	@ 0x3c
 8005138:	b2db      	uxtb	r3, r3
 800513a:	b25a      	sxtb	r2, r3
 800513c:	4b25      	ldr	r3, [pc, #148]	@ (80051d4 <main+0x204>)
 800513e:	701a      	strb	r2, [r3, #0]
			  mission_time_hr += 1;
 8005140:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <main+0x208>)
 8005142:	f993 3000 	ldrsb.w	r3, [r3]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	b2db      	uxtb	r3, r3
 800514c:	b25a      	sxtb	r2, r3
 800514e:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <main+0x208>)
 8005150:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_hr >= 24 ){
 8005152:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <main+0x208>)
 8005154:	f993 3000 	ldrsb.w	r3, [r3]
 8005158:	2b17      	cmp	r3, #23
 800515a:	dd08      	ble.n	800516e <main+0x19e>
			  mission_time_hr -= 24;
 800515c:	4b1e      	ldr	r3, [pc, #120]	@ (80051d8 <main+0x208>)
 800515e:	f993 3000 	ldrsb.w	r3, [r3]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	3b18      	subs	r3, #24
 8005166:	b2db      	uxtb	r3, r3
 8005168:	b25a      	sxtb	r2, r3
 800516a:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <main+0x208>)
 800516c:	701a      	strb	r2, [r3, #0]
		  }

		  handle_state();
 800516e:	f7ff f97b 	bl	8004468 <handle_state>

		  // Control Telemetry
		  if (telemetry_status == 1){
 8005172:	4b1a      	ldr	r3, [pc, #104]	@ (80051dc <main+0x20c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b01      	cmp	r3, #1
 8005178:	f47f af7f 	bne.w	800507a <main+0xaa>
			  read_transmit_telemetry();
 800517c:	f7ff fad0 	bl	8004720 <read_transmit_telemetry>
	  if (command_ready){
 8005180:	e77b      	b.n	800507a <main+0xaa>
 8005182:	bf00      	nop
 8005184:	40020400 	.word	0x40020400
 8005188:	20000a08 	.word	0x20000a08
 800518c:	200005bc 	.word	0x200005bc
 8005190:	20000b07 	.word	0x20000b07
 8005194:	200009e4 	.word	0x200009e4
 8005198:	3e48c49c 	.word	0x3e48c49c
 800519c:	200009e8 	.word	0x200009e8
 80051a0:	3e8f3333 	.word	0x3e8f3333
 80051a4:	200009ec 	.word	0x200009ec
 80051a8:	bf5528f6 	.word	0xbf5528f6
 80051ac:	20000a00 	.word	0x20000a00
 80051b0:	43480000 	.word	0x43480000
 80051b4:	2000087c 	.word	0x2000087c
 80051b8:	200003cb 	.word	0x200003cb
 80051bc:	200003cc 	.word	0x200003cc
 80051c0:	20000878 	.word	0x20000878
 80051c4:	20000b08 	.word	0x20000b08
 80051c8:	20000b14 	.word	0x20000b14
 80051cc:	200004cc 	.word	0x200004cc
 80051d0:	20000606 	.word	0x20000606
 80051d4:	20000605 	.word	0x20000605
 80051d8:	20000604 	.word	0x20000604
 80051dc:	200000a8 	.word	0x200000a8

080051e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b094      	sub	sp, #80	@ 0x50
 80051e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051e6:	f107 031c 	add.w	r3, r7, #28
 80051ea:	2234      	movs	r2, #52	@ 0x34
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f007 f86f 	bl	800c2d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	2300      	movs	r3, #0
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	4b22      	ldr	r3, [pc, #136]	@ (8005294 <SystemClock_Config+0xb4>)
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	4a21      	ldr	r2, [pc, #132]	@ (8005294 <SystemClock_Config+0xb4>)
 800520e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005212:	6413      	str	r3, [r2, #64]	@ 0x40
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <SystemClock_Config+0xb4>)
 8005216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005220:	2300      	movs	r3, #0
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4b1c      	ldr	r3, [pc, #112]	@ (8005298 <SystemClock_Config+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1b      	ldr	r2, [pc, #108]	@ (8005298 <SystemClock_Config+0xb8>)
 800522a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800522e:	6013      	str	r3, [r2, #0]
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <SystemClock_Config+0xb8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800523c:	2302      	movs	r3, #2
 800523e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005240:	2301      	movs	r3, #1
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005244:	2310      	movs	r3, #16
 8005246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005248:	2300      	movs	r3, #0
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800524c:	f107 031c 	add.w	r3, r7, #28
 8005250:	4618      	mov	r0, r3
 8005252:	f003 fa71 	bl	8008738 <HAL_RCC_OscConfig>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800525c:	f000 f9a4 	bl	80055a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005260:	230f      	movs	r3, #15
 8005262:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800526c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f003 f83b 	bl	80082f8 <HAL_RCC_ClockConfig>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005288:	f000 f98e 	bl	80055a8 <Error_Handler>
  }
}
 800528c:	bf00      	nop
 800528e:	3750      	adds	r7, #80	@ 0x50
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40023800 	.word	0x40023800
 8005298:	40007000 	.word	0x40007000

0800529c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052a2:	4a13      	ldr	r2, [pc, #76]	@ (80052f0 <MX_I2C1_Init+0x54>)
 80052a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80052a6:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052a8:	4a12      	ldr	r2, [pc, #72]	@ (80052f4 <MX_I2C1_Init+0x58>)
 80052aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80052ac:	4b0f      	ldr	r3, [pc, #60]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80052b2:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052b8:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80052be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052c6:	4b09      	ldr	r3, [pc, #36]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052cc:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052d8:	4804      	ldr	r0, [pc, #16]	@ (80052ec <MX_I2C1_Init+0x50>)
 80052da:	f001 fa2d 	bl	8006738 <HAL_I2C_Init>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80052e4:	f000 f960 	bl	80055a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80052e8:	bf00      	nop
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200004cc 	.word	0x200004cc
 80052f0:	40005400 	.word	0x40005400
 80052f4:	000186a0 	.word	0x000186a0

080052f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80052fc:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <MX_I2C3_Init+0x50>)
 80052fe:	4a13      	ldr	r2, [pc, #76]	@ (800534c <MX_I2C3_Init+0x54>)
 8005300:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005302:	4b11      	ldr	r3, [pc, #68]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005304:	4a12      	ldr	r2, [pc, #72]	@ (8005350 <MX_I2C3_Init+0x58>)
 8005306:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005308:	4b0f      	ldr	r3, [pc, #60]	@ (8005348 <MX_I2C3_Init+0x50>)
 800530a:	2200      	movs	r2, #0
 800530c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800530e:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005310:	2200      	movs	r2, #0
 8005312:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005314:	4b0c      	ldr	r3, [pc, #48]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800531a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800531c:	4b0a      	ldr	r3, [pc, #40]	@ (8005348 <MX_I2C3_Init+0x50>)
 800531e:	2200      	movs	r2, #0
 8005320:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005322:	4b09      	ldr	r3, [pc, #36]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005324:	2200      	movs	r2, #0
 8005326:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005328:	4b07      	ldr	r3, [pc, #28]	@ (8005348 <MX_I2C3_Init+0x50>)
 800532a:	2200      	movs	r2, #0
 800532c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005334:	4804      	ldr	r0, [pc, #16]	@ (8005348 <MX_I2C3_Init+0x50>)
 8005336:	f001 f9ff 	bl	8006738 <HAL_I2C_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005340:	f000 f932 	bl	80055a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000520 	.word	0x20000520
 800534c:	40005c00 	.word	0x40005c00
 8005350:	000186a0 	.word	0x000186a0

08005354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08e      	sub	sp, #56	@ 0x38
 8005358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800535a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005368:	f107 0320 	add.w	r3, r7, #32
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
 8005380:	615a      	str	r2, [r3, #20]
 8005382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005384:	4b2d      	ldr	r3, [pc, #180]	@ (800543c <MX_TIM2_Init+0xe8>)
 8005386:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800538a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 800538c:	4b2b      	ldr	r3, [pc, #172]	@ (800543c <MX_TIM2_Init+0xe8>)
 800538e:	220f      	movs	r2, #15
 8005390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005392:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <MX_TIM2_Init+0xe8>)
 8005394:	2200      	movs	r2, #0
 8005396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8005398:	4b28      	ldr	r3, [pc, #160]	@ (800543c <MX_TIM2_Init+0xe8>)
 800539a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800539e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053a0:	4b26      	ldr	r3, [pc, #152]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a6:	4b25      	ldr	r3, [pc, #148]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053ac:	4823      	ldr	r0, [pc, #140]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053ae:	f003 fc47 	bl	8008c40 <HAL_TIM_Base_Init>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80053b8:	f000 f8f6 	bl	80055a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053c6:	4619      	mov	r1, r3
 80053c8:	481c      	ldr	r0, [pc, #112]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053ca:	f003 fe6b 	bl	80090a4 <HAL_TIM_ConfigClockSource>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80053d4:	f000 f8e8 	bl	80055a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80053d8:	4818      	ldr	r0, [pc, #96]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053da:	f003 fc80 	bl	8008cde <HAL_TIM_PWM_Init>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80053e4:	f000 f8e0 	bl	80055a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053e8:	2300      	movs	r3, #0
 80053ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053f0:	f107 0320 	add.w	r3, r7, #32
 80053f4:	4619      	mov	r1, r3
 80053f6:	4811      	ldr	r0, [pc, #68]	@ (800543c <MX_TIM2_Init+0xe8>)
 80053f8:	f004 fa38 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8005402:	f000 f8d1 	bl	80055a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005406:	2360      	movs	r3, #96	@ 0x60
 8005408:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800540a:	2300      	movs	r3, #0
 800540c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	2208      	movs	r2, #8
 800541a:	4619      	mov	r1, r3
 800541c:	4807      	ldr	r0, [pc, #28]	@ (800543c <MX_TIM2_Init+0xe8>)
 800541e:	f003 fd7f 	bl	8008f20 <HAL_TIM_PWM_ConfigChannel>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005428:	f000 f8be 	bl	80055a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800542c:	4803      	ldr	r0, [pc, #12]	@ (800543c <MX_TIM2_Init+0xe8>)
 800542e:	f000 f9a7 	bl	8005780 <HAL_TIM_MspPostInit>

}
 8005432:	bf00      	nop
 8005434:	3738      	adds	r7, #56	@ 0x38
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000574 	.word	0x20000574

08005440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005444:	4b11      	ldr	r3, [pc, #68]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005446:	4a12      	ldr	r2, [pc, #72]	@ (8005490 <MX_USART1_UART_Init+0x50>)
 8005448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800544a:	4b10      	ldr	r3, [pc, #64]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 800544c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005452:	4b0e      	ldr	r3, [pc, #56]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005454:	2200      	movs	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005458:	4b0c      	ldr	r3, [pc, #48]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 800545a:	2200      	movs	r2, #0
 800545c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800545e:	4b0b      	ldr	r3, [pc, #44]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005460:	2200      	movs	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005464:	4b09      	ldr	r3, [pc, #36]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005466:	220c      	movs	r2, #12
 8005468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800546a:	4b08      	ldr	r3, [pc, #32]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005476:	4805      	ldr	r0, [pc, #20]	@ (800548c <MX_USART1_UART_Init+0x4c>)
 8005478:	f004 fa74 	bl	8009964 <HAL_UART_Init>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005482:	f000 f891 	bl	80055a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200005bc 	.word	0x200005bc
 8005490:	40011000 	.word	0x40011000

08005494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	@ 0x28
 8005498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	60da      	str	r2, [r3, #12]
 80054a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	4b3b      	ldr	r3, [pc, #236]	@ (800559c <MX_GPIO_Init+0x108>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b2:	4a3a      	ldr	r2, [pc, #232]	@ (800559c <MX_GPIO_Init+0x108>)
 80054b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ba:	4b38      	ldr	r3, [pc, #224]	@ (800559c <MX_GPIO_Init+0x108>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	4b34      	ldr	r3, [pc, #208]	@ (800559c <MX_GPIO_Init+0x108>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	4a33      	ldr	r2, [pc, #204]	@ (800559c <MX_GPIO_Init+0x108>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80054d6:	4b31      	ldr	r3, [pc, #196]	@ (800559c <MX_GPIO_Init+0x108>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	4b2d      	ldr	r3, [pc, #180]	@ (800559c <MX_GPIO_Init+0x108>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	4a2c      	ldr	r2, [pc, #176]	@ (800559c <MX_GPIO_Init+0x108>)
 80054ec:	f043 0304 	orr.w	r3, r3, #4
 80054f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054f2:	4b2a      	ldr	r3, [pc, #168]	@ (800559c <MX_GPIO_Init+0x108>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	4b26      	ldr	r3, [pc, #152]	@ (800559c <MX_GPIO_Init+0x108>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005506:	4a25      	ldr	r2, [pc, #148]	@ (800559c <MX_GPIO_Init+0x108>)
 8005508:	f043 0302 	orr.w	r3, r3, #2
 800550c:	6313      	str	r3, [r2, #48]	@ 0x30
 800550e:	4b23      	ldr	r3, [pc, #140]	@ (800559c <MX_GPIO_Init+0x108>)
 8005510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	607b      	str	r3, [r7, #4]
 8005518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin, GPIO_PIN_RESET);
 800551a:	2200      	movs	r2, #0
 800551c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8005520:	481f      	ldr	r0, [pc, #124]	@ (80055a0 <MX_GPIO_Init+0x10c>)
 8005522:	f001 f8cb 	bl	80066bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005526:	2200      	movs	r2, #0
 8005528:	2110      	movs	r1, #16
 800552a:	481e      	ldr	r0, [pc, #120]	@ (80055a4 <MX_GPIO_Init+0x110>)
 800552c:	f001 f8c6 	bl	80066bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step1_Pin Step2_Pin Step3_Pin Step4_Pin */
  GPIO_InitStruct.Pin = Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin;
 8005530:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005536:	2301      	movs	r3, #1
 8005538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4619      	mov	r1, r3
 8005548:	4815      	ldr	r0, [pc, #84]	@ (80055a0 <MX_GPIO_Init+0x10c>)
 800554a:	f000 ff3b 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800554e:	2310      	movs	r3, #16
 8005550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005552:	2301      	movs	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555a:	2300      	movs	r3, #0
 800555c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800555e:	f107 0314 	add.w	r3, r7, #20
 8005562:	4619      	mov	r1, r3
 8005564:	480f      	ldr	r0, [pc, #60]	@ (80055a4 <MX_GPIO_Init+0x110>)
 8005566:	f000 ff2d 	bl	80063c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Sensor_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_Pin;
 800556a:	2320      	movs	r3, #32
 800556c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800556e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Sensor_GPIO_Port, &GPIO_InitStruct);
 8005578:	f107 0314 	add.w	r3, r7, #20
 800557c:	4619      	mov	r1, r3
 800557e:	4809      	ldr	r0, [pc, #36]	@ (80055a4 <MX_GPIO_Init+0x110>)
 8005580:	f000 ff20 	bl	80063c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005584:	2200      	movs	r2, #0
 8005586:	2100      	movs	r1, #0
 8005588:	2017      	movs	r0, #23
 800558a:	f000 fc44 	bl	8005e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800558e:	2017      	movs	r0, #23
 8005590:	f000 fc5d 	bl	8005e4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005594:	bf00      	nop
 8005596:	3728      	adds	r7, #40	@ 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40023800 	.word	0x40023800
 80055a0:	40020800 	.word	0x40020800
 80055a4:	40020400 	.word	0x40020400

080055a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055ac:	b672      	cpsid	i
}
 80055ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <Error_Handler+0x8>

080055b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	4b10      	ldr	r3, [pc, #64]	@ (8005600 <HAL_MspInit+0x4c>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005600 <HAL_MspInit+0x4c>)
 80055c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80055ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <HAL_MspInit+0x4c>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4b09      	ldr	r3, [pc, #36]	@ (8005600 <HAL_MspInit+0x4c>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	4a08      	ldr	r2, [pc, #32]	@ (8005600 <HAL_MspInit+0x4c>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_MspInit+0x4c>)
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800

08005604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	@ 0x30
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a42      	ldr	r2, [pc, #264]	@ (800572c <HAL_I2C_MspInit+0x128>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d12c      	bne.n	8005680 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	4b41      	ldr	r3, [pc, #260]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 800562c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562e:	4a40      	ldr	r2, [pc, #256]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005630:	f043 0302 	orr.w	r3, r3, #2
 8005634:	6313      	str	r3, [r2, #48]	@ 0x30
 8005636:	4b3e      	ldr	r3, [pc, #248]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005642:	23c0      	movs	r3, #192	@ 0xc0
 8005644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005646:	2312      	movs	r3, #18
 8005648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564a:	2300      	movs	r3, #0
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564e:	2303      	movs	r3, #3
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005652:	2304      	movs	r3, #4
 8005654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005656:	f107 031c 	add.w	r3, r7, #28
 800565a:	4619      	mov	r1, r3
 800565c:	4835      	ldr	r0, [pc, #212]	@ (8005734 <HAL_I2C_MspInit+0x130>)
 800565e:	f000 feb1 	bl	80063c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	4b32      	ldr	r3, [pc, #200]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	4a31      	ldr	r2, [pc, #196]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 800566c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005670:	6413      	str	r3, [r2, #64]	@ 0x40
 8005672:	4b2f      	ldr	r3, [pc, #188]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800567e:	e050      	b.n	8005722 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2c      	ldr	r2, [pc, #176]	@ (8005738 <HAL_I2C_MspInit+0x134>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d14b      	bne.n	8005722 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	4b28      	ldr	r3, [pc, #160]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	4a27      	ldr	r2, [pc, #156]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6313      	str	r3, [r2, #48]	@ 0x30
 800569a:	4b25      	ldr	r3, [pc, #148]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	4b21      	ldr	r3, [pc, #132]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ae:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80056c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c8:	2312      	movs	r3, #18
 80056ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056cc:	2301      	movs	r3, #1
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d0:	2303      	movs	r3, #3
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80056d4:	2304      	movs	r3, #4
 80056d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d8:	f107 031c 	add.w	r3, r7, #28
 80056dc:	4619      	mov	r1, r3
 80056de:	4817      	ldr	r0, [pc, #92]	@ (800573c <HAL_I2C_MspInit+0x138>)
 80056e0:	f000 fe70 	bl	80063c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80056e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056ea:	2312      	movs	r3, #18
 80056ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056ee:	2301      	movs	r3, #1
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f2:	2303      	movs	r3, #3
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80056f6:	2309      	movs	r3, #9
 80056f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fa:	f107 031c 	add.w	r3, r7, #28
 80056fe:	4619      	mov	r1, r3
 8005700:	480c      	ldr	r0, [pc, #48]	@ (8005734 <HAL_I2C_MspInit+0x130>)
 8005702:	f000 fe5f 	bl	80063c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	4a08      	ldr	r2, [pc, #32]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005710:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005714:	6413      	str	r3, [r2, #64]	@ 0x40
 8005716:	4b06      	ldr	r3, [pc, #24]	@ (8005730 <HAL_I2C_MspInit+0x12c>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
}
 8005722:	bf00      	nop
 8005724:	3730      	adds	r7, #48	@ 0x30
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40005400 	.word	0x40005400
 8005730:	40023800 	.word	0x40023800
 8005734:	40020400 	.word	0x40020400
 8005738:	40005c00 	.word	0x40005c00
 800573c:	40020000 	.word	0x40020000

08005740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005750:	d10d      	bne.n	800576e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	4b09      	ldr	r3, [pc, #36]	@ (800577c <HAL_TIM_Base_MspInit+0x3c>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	4a08      	ldr	r2, [pc, #32]	@ (800577c <HAL_TIM_Base_MspInit+0x3c>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6413      	str	r3, [r2, #64]	@ 0x40
 8005762:	4b06      	ldr	r3, [pc, #24]	@ (800577c <HAL_TIM_Base_MspInit+0x3c>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800

08005780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b088      	sub	sp, #32
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 030c 	add.w	r3, r7, #12
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a0:	d11d      	bne.n	80057de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	4b10      	ldr	r3, [pc, #64]	@ (80057e8 <HAL_TIM_MspPostInit+0x68>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	4a0f      	ldr	r2, [pc, #60]	@ (80057e8 <HAL_TIM_MspPostInit+0x68>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <HAL_TIM_MspPostInit+0x68>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 80057be:	2304      	movs	r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c2:	2302      	movs	r3, #2
 80057c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 80057d2:	f107 030c 	add.w	r3, r7, #12
 80057d6:	4619      	mov	r1, r3
 80057d8:	4804      	ldr	r0, [pc, #16]	@ (80057ec <HAL_TIM_MspPostInit+0x6c>)
 80057da:	f000 fdf3 	bl	80063c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80057de:	bf00      	nop
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000

080057f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	@ 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	605a      	str	r2, [r3, #4]
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a19      	ldr	r2, [pc, #100]	@ (8005874 <HAL_UART_MspInit+0x84>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d12c      	bne.n	800586c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	4b18      	ldr	r3, [pc, #96]	@ (8005878 <HAL_UART_MspInit+0x88>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <HAL_UART_MspInit+0x88>)
 800581c:	f043 0310 	orr.w	r3, r3, #16
 8005820:	6453      	str	r3, [r2, #68]	@ 0x44
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <HAL_UART_MspInit+0x88>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	4b11      	ldr	r3, [pc, #68]	@ (8005878 <HAL_UART_MspInit+0x88>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	4a10      	ldr	r2, [pc, #64]	@ (8005878 <HAL_UART_MspInit+0x88>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	6313      	str	r3, [r2, #48]	@ 0x30
 800583e:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <HAL_UART_MspInit+0x88>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800584a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800584e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005858:	2303      	movs	r3, #3
 800585a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800585c:	2307      	movs	r3, #7
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4619      	mov	r1, r3
 8005866:	4805      	ldr	r0, [pc, #20]	@ (800587c <HAL_UART_MspInit+0x8c>)
 8005868:	f000 fdac 	bl	80063c4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800586c:	bf00      	nop
 800586e:	3728      	adds	r7, #40	@ 0x28
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40011000 	.word	0x40011000
 8005878:	40023800 	.word	0x40023800
 800587c:	40020000 	.word	0x40020000

08005880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <NMI_Handler+0x4>

08005888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <HardFault_Handler+0x4>

08005890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <MemManage_Handler+0x4>

08005898 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800589c:	bf00      	nop
 800589e:	e7fd      	b.n	800589c <BusFault_Handler+0x4>

080058a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058a4:	bf00      	nop
 80058a6:	e7fd      	b.n	80058a4 <UsageFault_Handler+0x4>

080058a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058d8:	f000 f97e 	bl	8005bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  msCounter++;
 80058dc:	4b03      	ldr	r3, [pc, #12]	@ (80058ec <SysTick_Handler+0x18>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a02      	ldr	r2, [pc, #8]	@ (80058ec <SysTick_Handler+0x18>)
 80058e4:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000b14 	.word	0x20000b14

080058f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	uint32_t current_time = HAL_GetTick(); // Get current system time in milliseconds
 80058f6:	f000 f983 	bl	8005c00 <HAL_GetTick>
 80058fa:	6078      	str	r0, [r7, #4]

	// Check if the interrupt is within the debounce period
	if (current_time - last_interrupt_time > 5)  // 10 ms debounce time
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <EXTI9_5_IRQHandler+0x38>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b05      	cmp	r3, #5
 8005906:	d907      	bls.n	8005918 <EXTI9_5_IRQHandler+0x28>
	{
		pulse_count++;   // Increment pulse count only if outside debounce period
 8005908:	4b08      	ldr	r3, [pc, #32]	@ (800592c <EXTI9_5_IRQHandler+0x3c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	4a07      	ldr	r2, [pc, #28]	@ (800592c <EXTI9_5_IRQHandler+0x3c>)
 8005910:	6013      	str	r3, [r2, #0]
		last_interrupt_time = current_time; // Update last interrupt time
 8005912:	4a05      	ldr	r2, [pc, #20]	@ (8005928 <EXTI9_5_IRQHandler+0x38>)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_Pin);
 8005918:	2020      	movs	r0, #32
 800591a:	f000 fee9 	bl	80066f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000b1c 	.word	0x20000b1c
 800592c:	20000864 	.word	0x20000864

08005930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return 1;
 8005934:	2301      	movs	r3, #1
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <_kill>:

int _kill(int pid, int sig)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800594a:	f006 fd49 	bl	800c3e0 <__errno>
 800594e:	4603      	mov	r3, r0
 8005950:	2216      	movs	r2, #22
 8005952:	601a      	str	r2, [r3, #0]
  return -1;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <_exit>:

void _exit (int status)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005968:	f04f 31ff 	mov.w	r1, #4294967295
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ffe7 	bl	8005940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <_exit+0x12>

08005976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
 8005986:	e00a      	b.n	800599e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005988:	f3af 8000 	nop.w
 800598c:	4601      	mov	r1, r0
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	60ba      	str	r2, [r7, #8]
 8005994:	b2ca      	uxtb	r2, r1
 8005996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3301      	adds	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	dbf0      	blt.n	8005988 <_read+0x12>
  }

  return len;
 80059a6:	687b      	ldr	r3, [r7, #4]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e009      	b.n	80059d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	60ba      	str	r2, [r7, #8]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	dbf1      	blt.n	80059c2 <_write+0x12>
  }
  return len;
 80059de:	687b      	ldr	r3, [r7, #4]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_close>:

int _close(int file)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a10:	605a      	str	r2, [r3, #4]
  return 0;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_isatty>:

int _isatty(int file)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a28:	2301      	movs	r3, #1
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a58:	4a14      	ldr	r2, [pc, #80]	@ (8005aac <_sbrk+0x5c>)
 8005a5a:	4b15      	ldr	r3, [pc, #84]	@ (8005ab0 <_sbrk+0x60>)
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a64:	4b13      	ldr	r3, [pc, #76]	@ (8005ab4 <_sbrk+0x64>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a6c:	4b11      	ldr	r3, [pc, #68]	@ (8005ab4 <_sbrk+0x64>)
 8005a6e:	4a12      	ldr	r2, [pc, #72]	@ (8005ab8 <_sbrk+0x68>)
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <_sbrk+0x64>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d207      	bcs.n	8005a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a80:	f006 fcae 	bl	800c3e0 <__errno>
 8005a84:	4603      	mov	r3, r0
 8005a86:	220c      	movs	r2, #12
 8005a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	e009      	b.n	8005aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a90:	4b08      	ldr	r3, [pc, #32]	@ (8005ab4 <_sbrk+0x64>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a96:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <_sbrk+0x64>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4a05      	ldr	r2, [pc, #20]	@ (8005ab4 <_sbrk+0x64>)
 8005aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	20040000 	.word	0x20040000
 8005ab0:	00000400 	.word	0x00000400
 8005ab4:	20000b20 	.word	0x20000b20
 8005ab8:	20000c98 	.word	0x20000c98

08005abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <SystemInit+0x20>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	4a05      	ldr	r2, [pc, #20]	@ (8005adc <SystemInit+0x20>)
 8005ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000ed00 	.word	0xe000ed00

08005ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8005ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005b18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005ae4:	f7ff ffea 	bl	8005abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ae8:	480c      	ldr	r0, [pc, #48]	@ (8005b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005aea:	490d      	ldr	r1, [pc, #52]	@ (8005b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005aec:	4a0d      	ldr	r2, [pc, #52]	@ (8005b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005af0:	e002      	b.n	8005af8 <LoopCopyDataInit>

08005af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005af6:	3304      	adds	r3, #4

08005af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005afc:	d3f9      	bcc.n	8005af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005afe:	4a0a      	ldr	r2, [pc, #40]	@ (8005b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b00:	4c0a      	ldr	r4, [pc, #40]	@ (8005b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b04:	e001      	b.n	8005b0a <LoopFillZerobss>

08005b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b08:	3204      	adds	r2, #4

08005b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b0c:	d3fb      	bcc.n	8005b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b0e:	f006 fc6d 	bl	800c3ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b12:	f7ff fa5d 	bl	8004fd0 <main>
  bx  lr    
 8005b16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005b18:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b20:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8005b24:	080104d8 	.word	0x080104d8
  ldr r2, =_sbss
 8005b28:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005b2c:	20000c94 	.word	0x20000c94

08005b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b30:	e7fe      	b.n	8005b30 <ADC_IRQHandler>
	...

08005b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b38:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <HAL_Init+0x40>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b74 <HAL_Init+0x40>)
 8005b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b44:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <HAL_Init+0x40>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a0a      	ldr	r2, [pc, #40]	@ (8005b74 <HAL_Init+0x40>)
 8005b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b50:	4b08      	ldr	r3, [pc, #32]	@ (8005b74 <HAL_Init+0x40>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a07      	ldr	r2, [pc, #28]	@ (8005b74 <HAL_Init+0x40>)
 8005b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b5c:	2003      	movs	r0, #3
 8005b5e:	f000 f94f 	bl	8005e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b62:	200f      	movs	r0, #15
 8005b64:	f000 f808 	bl	8005b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b68:	f7ff fd24 	bl	80055b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40023c00 	.word	0x40023c00

08005b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b80:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <HAL_InitTick+0x54>)
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b12      	ldr	r3, [pc, #72]	@ (8005bd0 <HAL_InitTick+0x58>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f967 	bl	8005e6a <HAL_SYSTICK_Config>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e00e      	b.n	8005bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b0f      	cmp	r3, #15
 8005baa:	d80a      	bhi.n	8005bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bac:	2200      	movs	r2, #0
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	f000 f92f 	bl	8005e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bb8:	4a06      	ldr	r2, [pc, #24]	@ (8005bd4 <HAL_InitTick+0x5c>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	200000cc 	.word	0x200000cc
 8005bd0:	200000d4 	.word	0x200000d4
 8005bd4:	200000d0 	.word	0x200000d0

08005bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_IncTick+0x20>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_IncTick+0x24>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <HAL_IncTick+0x24>)
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	200000d4 	.word	0x200000d4
 8005bfc:	20000b24 	.word	0x20000b24

08005c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return uwTick;
 8005c04:	4b03      	ldr	r3, [pc, #12]	@ (8005c14 <HAL_GetTick+0x14>)
 8005c06:	681b      	ldr	r3, [r3, #0]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20000b24 	.word	0x20000b24

08005c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c20:	f7ff ffee 	bl	8005c00 <HAL_GetTick>
 8005c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d005      	beq.n	8005c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c32:	4b0a      	ldr	r3, [pc, #40]	@ (8005c5c <HAL_Delay+0x44>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c3e:	bf00      	nop
 8005c40:	f7ff ffde 	bl	8005c00 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d8f7      	bhi.n	8005c40 <HAL_Delay+0x28>
  {
  }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	200000d4 	.word	0x200000d4

08005c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c92:	4a04      	ldr	r2, [pc, #16]	@ (8005ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	60d3      	str	r3, [r2, #12]
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	e000ed00 	.word	0xe000ed00

08005ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cac:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	0a1b      	lsrs	r3, r3, #8
 8005cb2:	f003 0307 	and.w	r3, r3, #7
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	db0b      	blt.n	8005cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	f003 021f 	and.w	r2, r3, #31
 8005cdc:	4907      	ldr	r1, [pc, #28]	@ (8005cfc <__NVIC_EnableIRQ+0x38>)
 8005cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce2:	095b      	lsrs	r3, r3, #5
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	e000e100 	.word	0xe000e100

08005d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	4603      	mov	r3, r0
 8005d08:	6039      	str	r1, [r7, #0]
 8005d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db0a      	blt.n	8005d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	490c      	ldr	r1, [pc, #48]	@ (8005d4c <__NVIC_SetPriority+0x4c>)
 8005d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1e:	0112      	lsls	r2, r2, #4
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	440b      	add	r3, r1
 8005d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d28:	e00a      	b.n	8005d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	4908      	ldr	r1, [pc, #32]	@ (8005d50 <__NVIC_SetPriority+0x50>)
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	3b04      	subs	r3, #4
 8005d38:	0112      	lsls	r2, r2, #4
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	761a      	strb	r2, [r3, #24]
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	e000e100 	.word	0xe000e100
 8005d50:	e000ed00 	.word	0xe000ed00

08005d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b089      	sub	sp, #36	@ 0x24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f1c3 0307 	rsb	r3, r3, #7
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	bf28      	it	cs
 8005d72:	2304      	movcs	r3, #4
 8005d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	2b06      	cmp	r3, #6
 8005d7c:	d902      	bls.n	8005d84 <NVIC_EncodePriority+0x30>
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3b03      	subs	r3, #3
 8005d82:	e000      	b.n	8005d86 <NVIC_EncodePriority+0x32>
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43da      	mvns	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	401a      	ands	r2, r3
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	fa01 f303 	lsl.w	r3, r1, r3
 8005da6:	43d9      	mvns	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dac:	4313      	orrs	r3, r2
         );
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3724      	adds	r7, #36	@ 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dcc:	d301      	bcc.n	8005dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e00f      	b.n	8005df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dfc <SysTick_Config+0x40>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dda:	210f      	movs	r1, #15
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	f7ff ff8e 	bl	8005d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005de4:	4b05      	ldr	r3, [pc, #20]	@ (8005dfc <SysTick_Config+0x40>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dea:	4b04      	ldr	r3, [pc, #16]	@ (8005dfc <SysTick_Config+0x40>)
 8005dec:	2207      	movs	r2, #7
 8005dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	e000e010 	.word	0xe000e010

08005e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff29 	bl	8005c60 <__NVIC_SetPriorityGrouping>
}
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b086      	sub	sp, #24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e28:	f7ff ff3e 	bl	8005ca8 <__NVIC_GetPriorityGrouping>
 8005e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f7ff ff8e 	bl	8005d54 <NVIC_EncodePriority>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff ff5d 	bl	8005d00 <__NVIC_SetPriority>
}
 8005e46:	bf00      	nop
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	4603      	mov	r3, r0
 8005e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff ff31 	bl	8005cc4 <__NVIC_EnableIRQ>
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff ffa2 	bl	8005dbc <SysTick_Config>
 8005e78:	4603      	mov	r3, r0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e90:	f7ff feb6 	bl	8005c00 <HAL_GetTick>
 8005e94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d008      	beq.n	8005eb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2280      	movs	r2, #128	@ 0x80
 8005ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e052      	b.n	8005f5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0216 	bic.w	r2, r2, #22
 8005ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ed2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <HAL_DMA_Abort+0x62>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0208 	bic.w	r2, r2, #8
 8005ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f04:	e013      	b.n	8005f2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f06:	f7ff fe7b 	bl	8005c00 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b05      	cmp	r3, #5
 8005f12:	d90c      	bls.n	8005f2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e015      	b.n	8005f5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e4      	bne.n	8005f06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	223f      	movs	r2, #63	@ 0x3f
 8005f42:	409a      	lsls	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2280      	movs	r2, #128	@ 0x80
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e00c      	b.n	8005f9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2205      	movs	r2, #5
 8005f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
	...

08005fa8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fba:	4b23      	ldr	r3, [pc, #140]	@ (8006048 <HAL_FLASH_Program+0xa0>)
 8005fbc:	7e1b      	ldrb	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_FLASH_Program+0x1e>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e03b      	b.n	800603e <HAL_FLASH_Program+0x96>
 8005fc6:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <HAL_FLASH_Program+0xa0>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fd0:	f000 f870 	bl	80060b4 <FLASH_WaitForLastOperation>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d12b      	bne.n	8006036 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005fe4:	783b      	ldrb	r3, [r7, #0]
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	68b8      	ldr	r0, [r7, #8]
 8005fea:	f000 f91b 	bl	8006224 <FLASH_Program_Byte>
 8005fee:	e016      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d105      	bne.n	8006002 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005ff6:	883b      	ldrh	r3, [r7, #0]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	68b8      	ldr	r0, [r7, #8]
 8005ffc:	f000 f8ee 	bl	80061dc <FLASH_Program_HalfWord>
 8006000:	e00d      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d105      	bne.n	8006014 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	68b8      	ldr	r0, [r7, #8]
 800600e:	f000 f8c3 	bl	8006198 <FLASH_Program_Word>
 8006012:	e004      	b.n	800601e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f88b 	bl	8006134 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800601e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006022:	f000 f847 	bl	80060b4 <FLASH_WaitForLastOperation>
 8006026:	4603      	mov	r3, r0
 8006028:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800602a:	4b08      	ldr	r3, [pc, #32]	@ (800604c <HAL_FLASH_Program+0xa4>)
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	4a07      	ldr	r2, [pc, #28]	@ (800604c <HAL_FLASH_Program+0xa4>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006036:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <HAL_FLASH_Program+0xa0>)
 8006038:	2200      	movs	r2, #0
 800603a:	761a      	strb	r2, [r3, #24]

  return status;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000b28 	.word	0x20000b28
 800604c:	40023c00 	.word	0x40023c00

08006050 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800605a:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_FLASH_Unlock+0x38>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da0b      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <HAL_FLASH_Unlock+0x38>)
 8006064:	4a09      	ldr	r2, [pc, #36]	@ (800608c <HAL_FLASH_Unlock+0x3c>)
 8006066:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006068:	4b07      	ldr	r3, [pc, #28]	@ (8006088 <HAL_FLASH_Unlock+0x38>)
 800606a:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <HAL_FLASH_Unlock+0x40>)
 800606c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <HAL_FLASH_Unlock+0x38>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	da01      	bge.n	800607a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800607a:	79fb      	ldrb	r3, [r7, #7]
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40023c00 	.word	0x40023c00
 800608c:	45670123 	.word	0x45670123
 8006090:	cdef89ab 	.word	0xcdef89ab

08006094 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006098:	4b05      	ldr	r3, [pc, #20]	@ (80060b0 <HAL_FLASH_Lock+0x1c>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4a04      	ldr	r2, [pc, #16]	@ (80060b0 <HAL_FLASH_Lock+0x1c>)
 800609e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060a2:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40023c00 	.word	0x40023c00

080060b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060c0:	4b1a      	ldr	r3, [pc, #104]	@ (800612c <FLASH_WaitForLastOperation+0x78>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80060c6:	f7ff fd9b 	bl	8005c00 <HAL_GetTick>
 80060ca:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80060cc:	e010      	b.n	80060f0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d00c      	beq.n	80060f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <FLASH_WaitForLastOperation+0x38>
 80060dc:	f7ff fd90 	bl	8005c00 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d201      	bcs.n	80060f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e019      	b.n	8006124 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80060f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006130 <FLASH_WaitForLastOperation+0x7c>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e8      	bne.n	80060ce <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80060fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006130 <FLASH_WaitForLastOperation+0x7c>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <FLASH_WaitForLastOperation+0x7c>)
 800610a:	2201      	movs	r2, #1
 800610c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800610e:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <FLASH_WaitForLastOperation+0x7c>)
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800611a:	f000 f8a5 	bl	8006268 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0

}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000b28 	.word	0x20000b28
 8006130:	40023c00 	.word	0x40023c00

08006134 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006140:	4b14      	ldr	r3, [pc, #80]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 8006146:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800614a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800614c:	4b11      	ldr	r3, [pc, #68]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	4a10      	ldr	r2, [pc, #64]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 8006152:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006156:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006158:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	4a0d      	ldr	r2, [pc, #52]	@ (8006194 <FLASH_Program_DoubleWord+0x60>)
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800616a:	f3bf 8f6f 	isb	sy
}
 800616e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8006170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	000a      	movs	r2, r1
 800617e:	2300      	movs	r3, #0
 8006180:	68f9      	ldr	r1, [r7, #12]
 8006182:	3104      	adds	r1, #4
 8006184:	4613      	mov	r3, r2
 8006186:	600b      	str	r3, [r1, #0]
}
 8006188:	bf00      	nop
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40023c00 	.word	0x40023c00

08006198 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	4a0c      	ldr	r2, [pc, #48]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80061ae:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	4a09      	ldr	r2, [pc, #36]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061ba:	4b07      	ldr	r3, [pc, #28]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4a06      	ldr	r2, [pc, #24]	@ (80061d8 <FLASH_Program_Word+0x40>)
 80061c0:	f043 0301 	orr.w	r3, r3, #1
 80061c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40023c00 	.word	0x40023c00

080061dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 80061ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80061f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	4a09      	ldr	r2, [pc, #36]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 80061fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	4a06      	ldr	r2, [pc, #24]	@ (8006220 <FLASH_Program_HalfWord+0x44>)
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	887a      	ldrh	r2, [r7, #2]
 8006210:	801a      	strh	r2, [r3, #0]
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40023c00 	.word	0x40023c00

08006224 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <FLASH_Program_Byte+0x40>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	4a0b      	ldr	r2, [pc, #44]	@ (8006264 <FLASH_Program_Byte+0x40>)
 8006236:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800623c:	4b09      	ldr	r3, [pc, #36]	@ (8006264 <FLASH_Program_Byte+0x40>)
 800623e:	4a09      	ldr	r2, [pc, #36]	@ (8006264 <FLASH_Program_Byte+0x40>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006244:	4b07      	ldr	r3, [pc, #28]	@ (8006264 <FLASH_Program_Byte+0x40>)
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	4a06      	ldr	r2, [pc, #24]	@ (8006264 <FLASH_Program_Byte+0x40>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	701a      	strb	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40023c00 	.word	0x40023c00

08006268 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800626c:	4b2f      	ldr	r3, [pc, #188]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006278:	4b2d      	ldr	r3, [pc, #180]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f043 0310 	orr.w	r3, r3, #16
 8006280:	4a2b      	ldr	r2, [pc, #172]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 8006282:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006284:	4b29      	ldr	r3, [pc, #164]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 8006286:	2210      	movs	r2, #16
 8006288:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800628a:	4b28      	ldr	r3, [pc, #160]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006296:	4b26      	ldr	r3, [pc, #152]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	f043 0308 	orr.w	r3, r3, #8
 800629e:	4a24      	ldr	r2, [pc, #144]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80062a2:	4b22      	ldr	r3, [pc, #136]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062a4:	2220      	movs	r2, #32
 80062a6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80062a8:	4b20      	ldr	r3, [pc, #128]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80062b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f043 0304 	orr.w	r3, r3, #4
 80062bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80062c0:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062c2:	2240      	movs	r2, #64	@ 0x40
 80062c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80062c6:	4b19      	ldr	r3, [pc, #100]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d008      	beq.n	80062e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80062d2:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	4a15      	ldr	r2, [pc, #84]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062e0:	2280      	movs	r2, #128	@ 0x80
 80062e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80062f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 80062fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80062fc:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 80062fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006302:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006304:	4b09      	ldr	r3, [pc, #36]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006310:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	f043 0320 	orr.w	r3, r3, #32
 8006318:	4a05      	ldr	r2, [pc, #20]	@ (8006330 <FLASH_SetErrorCode+0xc8>)
 800631a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800631c:	4b03      	ldr	r3, [pc, #12]	@ (800632c <FLASH_SetErrorCode+0xc4>)
 800631e:	2202      	movs	r2, #2
 8006320:	60da      	str	r2, [r3, #12]
  }
}
 8006322:	bf00      	nop
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40023c00 	.word	0x40023c00
 8006330:	20000b28 	.word	0x20000b28

08006334 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e010      	b.n	8006372 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d103      	bne.n	800635e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006356:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	e009      	b.n	8006372 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d103      	bne.n	800636c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e002      	b.n	8006372 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800636c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006370:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006372:	4b13      	ldr	r3, [pc, #76]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006378:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800637c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800637e:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	490f      	ldr	r1, [pc, #60]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800638a:	4b0d      	ldr	r3, [pc, #52]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4a0c      	ldr	r2, [pc, #48]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006390:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006394:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4313      	orrs	r3, r2
 80063a0:	4a07      	ldr	r2, [pc, #28]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80063a8:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	4a04      	ldr	r2, [pc, #16]	@ (80063c0 <FLASH_Erase_Sector+0x8c>)
 80063ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b2:	6113      	str	r3, [r2, #16]
}
 80063b4:	bf00      	nop
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40023c00 	.word	0x40023c00

080063c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b089      	sub	sp, #36	@ 0x24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e153      	b.n	8006688 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4013      	ands	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	f040 8142 	bne.w	8006682 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d005      	beq.n	8006416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006412:	2b02      	cmp	r3, #2
 8006414:	d130      	bne.n	8006478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	2203      	movs	r2, #3
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4013      	ands	r3, r2
 800642c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4313      	orrs	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800644c:	2201      	movs	r2, #1
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43db      	mvns	r3, r3
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4013      	ands	r3, r2
 800645a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 0201 	and.w	r2, r3, #1
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4313      	orrs	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	2b03      	cmp	r3, #3
 8006482:	d017      	beq.n	80064b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	2203      	movs	r2, #3
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	fa02 f303 	lsl.w	r3, r2, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d123      	bne.n	8006508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	08da      	lsrs	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3208      	adds	r2, #8
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	220f      	movs	r2, #15
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	08da      	lsrs	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3208      	adds	r2, #8
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	2203      	movs	r2, #3
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	43db      	mvns	r3, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 0203 	and.w	r2, r3, #3
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	4313      	orrs	r3, r2
 8006534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 809c 	beq.w	8006682 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	4b54      	ldr	r3, [pc, #336]	@ (80066a0 <HAL_GPIO_Init+0x2dc>)
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	4a53      	ldr	r2, [pc, #332]	@ (80066a0 <HAL_GPIO_Init+0x2dc>)
 8006554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006558:	6453      	str	r3, [r2, #68]	@ 0x44
 800655a:	4b51      	ldr	r3, [pc, #324]	@ (80066a0 <HAL_GPIO_Init+0x2dc>)
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006566:	4a4f      	ldr	r2, [pc, #316]	@ (80066a4 <HAL_GPIO_Init+0x2e0>)
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	089b      	lsrs	r3, r3, #2
 800656c:	3302      	adds	r3, #2
 800656e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	220f      	movs	r2, #15
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4013      	ands	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a46      	ldr	r2, [pc, #280]	@ (80066a8 <HAL_GPIO_Init+0x2e4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <HAL_GPIO_Init+0x1f6>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a45      	ldr	r2, [pc, #276]	@ (80066ac <HAL_GPIO_Init+0x2e8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00d      	beq.n	80065b6 <HAL_GPIO_Init+0x1f2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a44      	ldr	r2, [pc, #272]	@ (80066b0 <HAL_GPIO_Init+0x2ec>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d007      	beq.n	80065b2 <HAL_GPIO_Init+0x1ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a43      	ldr	r2, [pc, #268]	@ (80066b4 <HAL_GPIO_Init+0x2f0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <HAL_GPIO_Init+0x1ea>
 80065aa:	2303      	movs	r3, #3
 80065ac:	e006      	b.n	80065bc <HAL_GPIO_Init+0x1f8>
 80065ae:	2307      	movs	r3, #7
 80065b0:	e004      	b.n	80065bc <HAL_GPIO_Init+0x1f8>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e002      	b.n	80065bc <HAL_GPIO_Init+0x1f8>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <HAL_GPIO_Init+0x1f8>
 80065ba:	2300      	movs	r3, #0
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	f002 0203 	and.w	r2, r2, #3
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	4093      	lsls	r3, r2
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065cc:	4935      	ldr	r1, [pc, #212]	@ (80066a4 <HAL_GPIO_Init+0x2e0>)
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	089b      	lsrs	r3, r3, #2
 80065d2:	3302      	adds	r3, #2
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80065da:	4b37      	ldr	r3, [pc, #220]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065fe:	4a2e      	ldr	r2, [pc, #184]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006604:	4b2c      	ldr	r3, [pc, #176]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006628:	4a23      	ldr	r2, [pc, #140]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800662e:	4b22      	ldr	r3, [pc, #136]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	43db      	mvns	r3, r3
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	4013      	ands	r3, r2
 800663c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006652:	4a19      	ldr	r2, [pc, #100]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006658:	4b17      	ldr	r3, [pc, #92]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	43db      	mvns	r3, r3
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	4013      	ands	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006674:	69ba      	ldr	r2, [r7, #24]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800667c:	4a0e      	ldr	r2, [pc, #56]	@ (80066b8 <HAL_GPIO_Init+0x2f4>)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	3301      	adds	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b0f      	cmp	r3, #15
 800668c:	f67f aea8 	bls.w	80063e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	3724      	adds	r7, #36	@ 0x24
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40023800 	.word	0x40023800
 80066a4:	40013800 	.word	0x40013800
 80066a8:	40020000 	.word	0x40020000
 80066ac:	40020400 	.word	0x40020400
 80066b0:	40020800 	.word	0x40020800
 80066b4:	40020c00 	.word	0x40020c00
 80066b8:	40013c00 	.word	0x40013c00

080066bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
 80066c8:	4613      	mov	r3, r2
 80066ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066cc:	787b      	ldrb	r3, [r7, #1]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066d2:	887a      	ldrh	r2, [r7, #2]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066d8:	e003      	b.n	80066e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066da:	887b      	ldrh	r3, [r7, #2]
 80066dc:	041a      	lsls	r2, r3, #16
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	619a      	str	r2, [r3, #24]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d006      	beq.n	8006714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006706:	4a05      	ldr	r2, [pc, #20]	@ (800671c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f806 	bl	8006720 <HAL_GPIO_EXTI_Callback>
  }
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40013c00 	.word	0x40013c00

08006720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e12b      	b.n	80069a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d106      	bne.n	8006764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe ff50 	bl	8005604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2224      	movs	r2, #36	@ 0x24
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800678a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800679a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800679c:	f001 ffa4 	bl	80086e8 <HAL_RCC_GetPCLK1Freq>
 80067a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	4a81      	ldr	r2, [pc, #516]	@ (80069ac <HAL_I2C_Init+0x274>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d807      	bhi.n	80067bc <HAL_I2C_Init+0x84>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a80      	ldr	r2, [pc, #512]	@ (80069b0 <HAL_I2C_Init+0x278>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bf94      	ite	ls
 80067b4:	2301      	movls	r3, #1
 80067b6:	2300      	movhi	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e006      	b.n	80067ca <HAL_I2C_Init+0x92>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a7d      	ldr	r2, [pc, #500]	@ (80069b4 <HAL_I2C_Init+0x27c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	bf94      	ite	ls
 80067c4:	2301      	movls	r3, #1
 80067c6:	2300      	movhi	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0e7      	b.n	80069a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a78      	ldr	r2, [pc, #480]	@ (80069b8 <HAL_I2C_Init+0x280>)
 80067d6:	fba2 2303 	umull	r2, r3, r2, r3
 80067da:	0c9b      	lsrs	r3, r3, #18
 80067dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	4a6a      	ldr	r2, [pc, #424]	@ (80069ac <HAL_I2C_Init+0x274>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d802      	bhi.n	800680c <HAL_I2C_Init+0xd4>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3301      	adds	r3, #1
 800680a:	e009      	b.n	8006820 <HAL_I2C_Init+0xe8>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	4a69      	ldr	r2, [pc, #420]	@ (80069bc <HAL_I2C_Init+0x284>)
 8006818:	fba2 2303 	umull	r2, r3, r2, r3
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	3301      	adds	r3, #1
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	430b      	orrs	r3, r1
 8006826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006832:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	495c      	ldr	r1, [pc, #368]	@ (80069ac <HAL_I2C_Init+0x274>)
 800683c:	428b      	cmp	r3, r1
 800683e:	d819      	bhi.n	8006874 <HAL_I2C_Init+0x13c>
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	1e59      	subs	r1, r3, #1
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	fbb1 f3f3 	udiv	r3, r1, r3
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006854:	400b      	ands	r3, r1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_I2C_Init+0x138>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1e59      	subs	r1, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	fbb1 f3f3 	udiv	r3, r1, r3
 8006868:	3301      	adds	r3, #1
 800686a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800686e:	e051      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 8006870:	2304      	movs	r3, #4
 8006872:	e04f      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d111      	bne.n	80068a0 <HAL_I2C_Init+0x168>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1e58      	subs	r0, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6859      	ldr	r1, [r3, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	440b      	add	r3, r1
 800688a:	fbb0 f3f3 	udiv	r3, r0, r3
 800688e:	3301      	adds	r3, #1
 8006890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	e012      	b.n	80068c6 <HAL_I2C_Init+0x18e>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	1e58      	subs	r0, r3, #1
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6859      	ldr	r1, [r3, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	0099      	lsls	r1, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_Init+0x196>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e022      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <HAL_I2C_Init+0x1bc>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1e58      	subs	r0, r3, #1
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	440b      	add	r3, r1
 80068e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80068e8:	3301      	adds	r3, #1
 80068ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f2:	e00f      	b.n	8006914 <HAL_I2C_Init+0x1dc>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	1e58      	subs	r0, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6859      	ldr	r1, [r3, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	0099      	lsls	r1, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	fbb0 f3f3 	udiv	r3, r0, r3
 800690a:	3301      	adds	r3, #1
 800690c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	6809      	ldr	r1, [r1, #0]
 8006918:	4313      	orrs	r3, r2
 800691a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006942:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6911      	ldr	r1, [r2, #16]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68d2      	ldr	r2, [r2, #12]
 800694e:	4311      	orrs	r1, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	430b      	orrs	r3, r1
 8006956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695a      	ldr	r2, [r3, #20]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	000186a0 	.word	0x000186a0
 80069b0:	001e847f 	.word	0x001e847f
 80069b4:	003d08ff 	.word	0x003d08ff
 80069b8:	431bde83 	.word	0x431bde83
 80069bc:	10624dd3 	.word	0x10624dd3

080069c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	461a      	mov	r2, r3
 80069cc:	460b      	mov	r3, r1
 80069ce:	817b      	strh	r3, [r7, #10]
 80069d0:	4613      	mov	r3, r2
 80069d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069d4:	f7ff f914 	bl	8005c00 <HAL_GetTick>
 80069d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 80e0 	bne.w	8006ba8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2319      	movs	r3, #25
 80069ee:	2201      	movs	r2, #1
 80069f0:	4970      	ldr	r1, [pc, #448]	@ (8006bb4 <HAL_I2C_Master_Transmit+0x1f4>)
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 fa4a 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
 8006a00:	e0d3      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_I2C_Master_Transmit+0x50>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e0cc      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d007      	beq.n	8006a36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2221      	movs	r2, #33	@ 0x21
 8006a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2210      	movs	r2, #16
 8006a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	893a      	ldrh	r2, [r7, #8]
 8006a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a50      	ldr	r2, [pc, #320]	@ (8006bb8 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a78:	8979      	ldrh	r1, [r7, #10]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 ff36 	bl	80078f0 <I2C_MasterRequestWrite>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e08d      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006aa4:	e066      	b.n	8006b74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	6a39      	ldr	r1, [r7, #32]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f001 fb08 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e06b      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	781a      	ldrb	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11b      	bne.n	8006b48 <HAL_I2C_Master_Transmit+0x188>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	6a39      	ldr	r1, [r7, #32]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f001 faff 	bl	8008150 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00d      	beq.n	8006b74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d107      	bne.n	8006b70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e01a      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d194      	bne.n	8006aa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ba8:	2302      	movs	r3, #2
  }
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00100002 	.word	0x00100002
 8006bb8:	ffff0000 	.word	0xffff0000

08006bbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08c      	sub	sp, #48	@ 0x30
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	460b      	mov	r3, r1
 8006bca:	817b      	strh	r3, [r7, #10]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bd0:	f7ff f816 	bl	8005c00 <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 8217 	bne.w	8007012 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2319      	movs	r3, #25
 8006bea:	2201      	movs	r2, #1
 8006bec:	497c      	ldr	r1, [pc, #496]	@ (8006de0 <HAL_I2C_Master_Receive+0x224>)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f001 f94c 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e20a      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_I2C_Master_Receive+0x50>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e203      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d007      	beq.n	8006c32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2222      	movs	r2, #34	@ 0x22
 8006c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2210      	movs	r2, #16
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	893a      	ldrh	r2, [r7, #8]
 8006c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a5c      	ldr	r2, [pc, #368]	@ (8006de4 <HAL_I2C_Master_Receive+0x228>)
 8006c72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c74:	8979      	ldrh	r1, [r7, #10]
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 feba 	bl	80079f4 <I2C_MasterRequestRead>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e1c4      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d113      	bne.n	8006cba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	623b      	str	r3, [r7, #32]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e198      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d11b      	bne.n	8006cfa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e178      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d11b      	bne.n	8006d3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d22:	2300      	movs	r3, #0
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	61bb      	str	r3, [r7, #24]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	e158      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d60:	e144      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	f200 80f1 	bhi.w	8006f4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d123      	bne.n	8006dbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f001 fa31 	bl	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e145      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	691a      	ldr	r2, [r3, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	b2d2      	uxtb	r2, r2
 8006d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dba:	e117      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d14e      	bne.n	8006e62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4906      	ldr	r1, [pc, #24]	@ (8006de8 <HAL_I2C_Master_Receive+0x22c>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f001 f85c 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e11a      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
 8006dde:	bf00      	nop
 8006de0:	00100002 	.word	0x00100002
 8006de4:	ffff0000 	.word	0xffff0000
 8006de8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e60:	e0c4      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	2200      	movs	r2, #0
 8006e6a:	496c      	ldr	r1, [pc, #432]	@ (800701c <HAL_I2C_Master_Receive+0x460>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f001 f80d 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0cb      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4955      	ldr	r1, [pc, #340]	@ (800701c <HAL_I2C_Master_Receive+0x460>)
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 ffdf 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e09d      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f4c:	e04e      	b.n	8006fec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f001 f944 	bl	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e058      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d124      	bne.n	8006fec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d107      	bne.n	8006fba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fb8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f47f aeb6 	bne.w	8006d62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e000      	b.n	8007014 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007012:	2302      	movs	r3, #2
  }
}
 8007014:	4618      	mov	r0, r3
 8007016:	3728      	adds	r7, #40	@ 0x28
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	00010004 	.word	0x00010004

08007020 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af02      	add	r7, sp, #8
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	4608      	mov	r0, r1
 800702a:	4611      	mov	r1, r2
 800702c:	461a      	mov	r2, r3
 800702e:	4603      	mov	r3, r0
 8007030:	817b      	strh	r3, [r7, #10]
 8007032:	460b      	mov	r3, r1
 8007034:	813b      	strh	r3, [r7, #8]
 8007036:	4613      	mov	r3, r2
 8007038:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800703a:	f7fe fde1 	bl	8005c00 <HAL_GetTick>
 800703e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b20      	cmp	r3, #32
 800704a:	f040 80d9 	bne.w	8007200 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2319      	movs	r3, #25
 8007054:	2201      	movs	r2, #1
 8007056:	496d      	ldr	r1, [pc, #436]	@ (800720c <HAL_I2C_Mem_Write+0x1ec>)
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 ff17 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007064:	2302      	movs	r3, #2
 8007066:	e0cc      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_I2C_Mem_Write+0x56>
 8007072:	2302      	movs	r3, #2
 8007074:	e0c5      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d007      	beq.n	800709c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2221      	movs	r2, #33	@ 0x21
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2240      	movs	r2, #64	@ 0x40
 80070b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80070cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4a4d      	ldr	r2, [pc, #308]	@ (8007210 <HAL_I2C_Mem_Write+0x1f0>)
 80070dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070de:	88f8      	ldrh	r0, [r7, #6]
 80070e0:	893a      	ldrh	r2, [r7, #8]
 80070e2:	8979      	ldrh	r1, [r7, #10]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	9301      	str	r3, [sp, #4]
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4603      	mov	r3, r0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fd4e 	bl	8007b90 <I2C_RequestMemoryWrite>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d052      	beq.n	80071a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e081      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 ffdc 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007112:	2b04      	cmp	r3, #4
 8007114:	d107      	bne.n	8007126 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e06b      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007144:	3b01      	subs	r3, #1
 8007146:	b29a      	uxth	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d11b      	bne.n	80071a0 <HAL_I2C_Mem_Write+0x180>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d017      	beq.n	80071a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1aa      	bne.n	80070fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 ffcf 	bl	8008150 <I2C_WaitOnBTFFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00d      	beq.n	80071d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d107      	bne.n	80071d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e016      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e000      	b.n	8007202 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
  }
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	00100002 	.word	0x00100002
 8007210:	ffff0000 	.word	0xffff0000

08007214 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08c      	sub	sp, #48	@ 0x30
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	4608      	mov	r0, r1
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	4603      	mov	r3, r0
 8007224:	817b      	strh	r3, [r7, #10]
 8007226:	460b      	mov	r3, r1
 8007228:	813b      	strh	r3, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800722e:	f7fe fce7 	bl	8005c00 <HAL_GetTick>
 8007232:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b20      	cmp	r3, #32
 800723e:	f040 8214 	bne.w	800766a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	2319      	movs	r3, #25
 8007248:	2201      	movs	r2, #1
 800724a:	497b      	ldr	r1, [pc, #492]	@ (8007438 <HAL_I2C_Mem_Read+0x224>)
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fe1d 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
 800725a:	e207      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_I2C_Mem_Read+0x56>
 8007266:	2302      	movs	r3, #2
 8007268:	e200      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d007      	beq.n	8007290 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800729e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2222      	movs	r2, #34	@ 0x22
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2240      	movs	r2, #64	@ 0x40
 80072ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80072c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4a5b      	ldr	r2, [pc, #364]	@ (800743c <HAL_I2C_Mem_Read+0x228>)
 80072d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072d2:	88f8      	ldrh	r0, [r7, #6]
 80072d4:	893a      	ldrh	r2, [r7, #8]
 80072d6:	8979      	ldrh	r1, [r7, #10]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fcea 	bl	8007cbc <I2C_RequestMemoryRead>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e1bc      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d113      	bne.n	8007322 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fa:	2300      	movs	r3, #0
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	623b      	str	r3, [r7, #32]
 800730e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e190      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007326:	2b01      	cmp	r3, #1
 8007328:	d11b      	bne.n	8007362 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e170      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007366:	2b02      	cmp	r3, #2
 8007368:	d11b      	bne.n	80073a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007378:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007388:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	e150      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a2:	2300      	movs	r3, #0
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073b8:	e144      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073be:	2b03      	cmp	r3, #3
 80073c0:	f200 80f1 	bhi.w	80075a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d123      	bne.n	8007414 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 ff05 	bl	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e145      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691a      	ldr	r2, [r3, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b29a      	uxth	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007412:	e117      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007418:	2b02      	cmp	r3, #2
 800741a:	d14e      	bne.n	80074ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	2200      	movs	r2, #0
 8007424:	4906      	ldr	r1, [pc, #24]	@ (8007440 <HAL_I2C_Mem_Read+0x22c>)
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 fd30 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d008      	beq.n	8007444 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e11a      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
 8007436:	bf00      	nop
 8007438:	00100002 	.word	0x00100002
 800743c:	ffff0000 	.word	0xffff0000
 8007440:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007452:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691a      	ldr	r2, [r3, #16]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007466:	1c5a      	adds	r2, r3, #1
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a2:	3b01      	subs	r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074b8:	e0c4      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	2200      	movs	r2, #0
 80074c2:	496c      	ldr	r1, [pc, #432]	@ (8007674 <HAL_I2C_Mem_Read+0x460>)
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 fce1 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0cb      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	3b01      	subs	r3, #1
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800751c:	2200      	movs	r2, #0
 800751e:	4955      	ldr	r1, [pc, #340]	@ (8007674 <HAL_I2C_Mem_Read+0x460>)
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fcb3 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e09d      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007568:	b29b      	uxth	r3, r3
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075a4:	e04e      	b.n	8007644 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fe18 	bl	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e058      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691a      	ldr	r2, [r3, #16]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d6:	3b01      	subs	r3, #1
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0304 	and.w	r3, r3, #4
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d124      	bne.n	8007644 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d107      	bne.n	8007612 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007610:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	f47f aeb6 	bne.w	80073ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	e000      	b.n	800766c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800766a:	2302      	movs	r3, #2
  }
}
 800766c:	4618      	mov	r0, r3
 800766e:	3728      	adds	r7, #40	@ 0x28
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	00010004 	.word	0x00010004

08007678 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08a      	sub	sp, #40	@ 0x28
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	460b      	mov	r3, r1
 8007686:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007688:	f7fe faba 	bl	8005c00 <HAL_GetTick>
 800768c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b20      	cmp	r3, #32
 800769c:	f040 8111 	bne.w	80078c2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2319      	movs	r3, #25
 80076a6:	2201      	movs	r2, #1
 80076a8:	4988      	ldr	r1, [pc, #544]	@ (80078cc <HAL_I2C_IsDeviceReady+0x254>)
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fbee 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80076b6:	2302      	movs	r3, #2
 80076b8:	e104      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_I2C_IsDeviceReady+0x50>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e0fd      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d007      	beq.n	80076ee <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0201 	orr.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2224      	movs	r2, #36	@ 0x24
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a70      	ldr	r2, [pc, #448]	@ (80078d0 <HAL_I2C_IsDeviceReady+0x258>)
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007720:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2200      	movs	r2, #0
 800772a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fbac 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00d      	beq.n	8007756 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007748:	d103      	bne.n	8007752 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007750:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e0b6      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007756:	897b      	ldrh	r3, [r7, #10]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	461a      	mov	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007764:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007766:	f7fe fa4b 	bl	8005c00 <HAL_GetTick>
 800776a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b02      	cmp	r3, #2
 8007778:	bf0c      	ite	eq
 800777a:	2301      	moveq	r3, #1
 800777c:	2300      	movne	r3, #0
 800777e:	b2db      	uxtb	r3, r3
 8007780:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800778c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007790:	bf0c      	ite	eq
 8007792:	2301      	moveq	r3, #1
 8007794:	2300      	movne	r3, #0
 8007796:	b2db      	uxtb	r3, r3
 8007798:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800779a:	e025      	b.n	80077e8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800779c:	f7fe fa30 	bl	8005c00 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d302      	bcc.n	80077b2 <HAL_I2C_IsDeviceReady+0x13a>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22a0      	movs	r2, #160	@ 0xa0
 80077b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	bf0c      	ite	eq
 80077c8:	2301      	moveq	r3, #1
 80077ca:	2300      	movne	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077de:	bf0c      	ite	eq
 80077e0:	2301      	moveq	r3, #1
 80077e2:	2300      	movne	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2ba0      	cmp	r3, #160	@ 0xa0
 80077f2:	d005      	beq.n	8007800 <HAL_I2C_IsDeviceReady+0x188>
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <HAL_I2C_IsDeviceReady+0x188>
 80077fa:	7dbb      	ldrb	r3, [r7, #22]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0cd      	beq.n	800779c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b02      	cmp	r3, #2
 8007814:	d129      	bne.n	800786a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007824:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007826:	2300      	movs	r3, #0
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	613b      	str	r3, [r7, #16]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	2319      	movs	r3, #25
 8007842:	2201      	movs	r2, #1
 8007844:	4921      	ldr	r1, [pc, #132]	@ (80078cc <HAL_I2C_IsDeviceReady+0x254>)
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 fb20 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e036      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2220      	movs	r2, #32
 800785a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e02c      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007878:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007882:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	2319      	movs	r3, #25
 800788a:	2201      	movs	r2, #1
 800788c:	490f      	ldr	r1, [pc, #60]	@ (80078cc <HAL_I2C_IsDeviceReady+0x254>)
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fafc 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e012      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	3301      	adds	r3, #1
 80078a2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	f4ff af32 	bcc.w	8007712 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80078c2:	2302      	movs	r3, #2
  }
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3720      	adds	r7, #32
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	00100002 	.word	0x00100002
 80078d0:	ffff0000 	.word	0xffff0000

080078d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078e2:	b2db      	uxtb	r3, r3
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	460b      	mov	r3, r1
 80078fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007904:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b08      	cmp	r3, #8
 800790a:	d006      	beq.n	800791a <I2C_MasterRequestWrite+0x2a>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d003      	beq.n	800791a <I2C_MasterRequestWrite+0x2a>
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007918:	d108      	bne.n	800792c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007928:	601a      	str	r2, [r3, #0]
 800792a:	e00b      	b.n	8007944 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007930:	2b12      	cmp	r3, #18
 8007932:	d107      	bne.n	8007944 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fa9b 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800796a:	d103      	bne.n	8007974 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007972:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e035      	b.n	80079e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007980:	d108      	bne.n	8007994 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007990:	611a      	str	r2, [r3, #16]
 8007992:	e01b      	b.n	80079cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007994:	897b      	ldrh	r3, [r7, #10]
 8007996:	11db      	asrs	r3, r3, #7
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f003 0306 	and.w	r3, r3, #6
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f063 030f 	orn	r3, r3, #15
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	490e      	ldr	r1, [pc, #56]	@ (80079ec <I2C_MasterRequestWrite+0xfc>)
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fae4 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e010      	b.n	80079e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80079c2:	897b      	ldrh	r3, [r7, #10]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4907      	ldr	r1, [pc, #28]	@ (80079f0 <I2C_MasterRequestWrite+0x100>)
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 fad4 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	00010008 	.word	0x00010008
 80079f0:	00010002 	.word	0x00010002

080079f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	460b      	mov	r3, r1
 8007a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d006      	beq.n	8007a2e <I2C_MasterRequestRead+0x3a>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d003      	beq.n	8007a2e <I2C_MasterRequestRead+0x3a>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a2c:	d108      	bne.n	8007a40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	e00b      	b.n	8007a58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	2b11      	cmp	r3, #17
 8007a46:	d107      	bne.n	8007a58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fa11 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7e:	d103      	bne.n	8007a88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e079      	b.n	8007b80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a94:	d108      	bne.n	8007aa8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a96:	897b      	ldrh	r3, [r7, #10]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	611a      	str	r2, [r3, #16]
 8007aa6:	e05f      	b.n	8007b68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007aa8:	897b      	ldrh	r3, [r7, #10]
 8007aaa:	11db      	asrs	r3, r3, #7
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0306 	and.w	r3, r3, #6
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f063 030f 	orn	r3, r3, #15
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	4930      	ldr	r1, [pc, #192]	@ (8007b88 <I2C_MasterRequestRead+0x194>)
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fa5a 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e054      	b.n	8007b80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ad6:	897b      	ldrh	r3, [r7, #10]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4929      	ldr	r1, [pc, #164]	@ (8007b8c <I2C_MasterRequestRead+0x198>)
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 fa4a 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e044      	b.n	8007b80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af6:	2300      	movs	r3, #0
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f9af 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00d      	beq.n	8007b50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b42:	d103      	bne.n	8007b4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b4a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e017      	b.n	8007b80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007b50:	897b      	ldrh	r3, [r7, #10]
 8007b52:	11db      	asrs	r3, r3, #7
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	f003 0306 	and.w	r3, r3, #6
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f063 030e 	orn	r3, r3, #14
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4907      	ldr	r1, [pc, #28]	@ (8007b8c <I2C_MasterRequestRead+0x198>)
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fa06 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	00010008 	.word	0x00010008
 8007b8c:	00010002 	.word	0x00010002

08007b90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	817b      	strh	r3, [r7, #10]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	813b      	strh	r3, [r7, #8]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f960 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007be0:	d103      	bne.n	8007bea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007be8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e05f      	b.n	8007cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bee:	897b      	ldrh	r3, [r7, #10]
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007bfc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	6a3a      	ldr	r2, [r7, #32]
 8007c02:	492d      	ldr	r1, [pc, #180]	@ (8007cb8 <I2C_RequestMemoryWrite+0x128>)
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f9bb 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e04c      	b.n	8007cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c2c:	6a39      	ldr	r1, [r7, #32]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fa46 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00d      	beq.n	8007c56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d107      	bne.n	8007c52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e02b      	b.n	8007cae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d105      	bne.n	8007c68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	611a      	str	r2, [r3, #16]
 8007c66:	e021      	b.n	8007cac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c68:	893b      	ldrh	r3, [r7, #8]
 8007c6a:	0a1b      	lsrs	r3, r3, #8
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c78:	6a39      	ldr	r1, [r7, #32]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 fa20 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00d      	beq.n	8007ca2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d107      	bne.n	8007c9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e005      	b.n	8007cae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca2:	893b      	ldrh	r3, [r7, #8]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	00010002 	.word	0x00010002

08007cbc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	817b      	strh	r3, [r7, #10]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	813b      	strh	r3, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007ce4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f8c2 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00d      	beq.n	8007d2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d1c:	d103      	bne.n	8007d26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e0aa      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d2a:	897b      	ldrh	r3, [r7, #10]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007d38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	4952      	ldr	r1, [pc, #328]	@ (8007e88 <I2C_RequestMemoryRead+0x1cc>)
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f91d 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e097      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	695b      	ldr	r3, [r3, #20]
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d68:	6a39      	ldr	r1, [r7, #32]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 f9a8 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00d      	beq.n	8007d92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d107      	bne.n	8007d8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e076      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d105      	bne.n	8007da4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d98:	893b      	ldrh	r3, [r7, #8]
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	611a      	str	r2, [r3, #16]
 8007da2:	e021      	b.n	8007de8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007da4:	893b      	ldrh	r3, [r7, #8]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db4:	6a39      	ldr	r1, [r7, #32]
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f982 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00d      	beq.n	8007dde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d107      	bne.n	8007dda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e050      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007dde:	893b      	ldrh	r3, [r7, #8]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007de8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dea:	6a39      	ldr	r1, [r7, #32]
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f967 	bl	80080c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00d      	beq.n	8007e14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfc:	2b04      	cmp	r3, #4
 8007dfe:	d107      	bne.n	8007e10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e035      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f000 f82b 	bl	8007e8c <I2C_WaitOnFlagUntilTimeout>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00d      	beq.n	8007e58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e4a:	d103      	bne.n	8007e54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e013      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e58:	897b      	ldrh	r3, [r7, #10]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	6a3a      	ldr	r2, [r7, #32]
 8007e6c:	4906      	ldr	r1, [pc, #24]	@ (8007e88 <I2C_RequestMemoryRead+0x1cc>)
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f886 	bl	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e000      	b.n	8007e80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	00010002 	.word	0x00010002

08007e8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	603b      	str	r3, [r7, #0]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e9c:	e048      	b.n	8007f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea4:	d044      	beq.n	8007f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea6:	f7fd feab 	bl	8005c00 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d302      	bcc.n	8007ebc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d139      	bne.n	8007f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10d      	bne.n	8007ee2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	43da      	mvns	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	e00c      	b.n	8007efc <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	43da      	mvns	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	4013      	ands	r3, r2
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d116      	bne.n	8007f30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e023      	b.n	8007f78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10d      	bne.n	8007f56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	43da      	mvns	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	4013      	ands	r3, r2
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	e00c      	b.n	8007f70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	43da      	mvns	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	4013      	ands	r3, r2
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d093      	beq.n	8007e9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f8e:	e071      	b.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f9e:	d123      	bne.n	8007fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	f043 0204 	orr.w	r2, r3, #4
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e067      	b.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fee:	d041      	beq.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ff0:	f7fd fe06 	bl	8005c00 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d302      	bcc.n	8008006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d136      	bne.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10c      	bne.n	800802a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	43da      	mvns	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf14      	ite	ne
 8008022:	2301      	movne	r3, #1
 8008024:	2300      	moveq	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	e00b      	b.n	8008042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	43da      	mvns	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	4013      	ands	r3, r2
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d016      	beq.n	8008074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e021      	b.n	80080b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d10c      	bne.n	8008098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	43da      	mvns	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4013      	ands	r3, r2
 800808a:	b29b      	uxth	r3, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	bf14      	ite	ne
 8008090:	2301      	movne	r3, #1
 8008092:	2300      	moveq	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	e00b      	b.n	80080b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	43da      	mvns	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bf14      	ite	ne
 80080aa:	2301      	movne	r3, #1
 80080ac:	2300      	moveq	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f47f af6d 	bne.w	8007f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080cc:	e034      	b.n	8008138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f8e3 	bl	800829a <I2C_IsAcknowledgeFailed>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e034      	b.n	8008148 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d028      	beq.n	8008138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e6:	f7fd fd8b 	bl	8005c00 <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d302      	bcc.n	80080fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11d      	bne.n	8008138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008106:	2b80      	cmp	r3, #128	@ 0x80
 8008108:	d016      	beq.n	8008138 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008124:	f043 0220 	orr.w	r2, r3, #32
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e007      	b.n	8008148 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b80      	cmp	r3, #128	@ 0x80
 8008144:	d1c3      	bne.n	80080ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800815c:	e034      	b.n	80081c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f89b 	bl	800829a <I2C_IsAcknowledgeFailed>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e034      	b.n	80081d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d028      	beq.n	80081c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008176:	f7fd fd43 	bl	8005c00 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	429a      	cmp	r2, r3
 8008184:	d302      	bcc.n	800818c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d11d      	bne.n	80081c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b04      	cmp	r3, #4
 8008198:	d016      	beq.n	80081c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081b4:	f043 0220 	orr.w	r2, r3, #32
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e007      	b.n	80081d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d1c3      	bne.n	800815e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081ec:	e049      	b.n	8008282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d119      	bne.n	8008230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0210 	mvn.w	r2, #16
 8008204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e030      	b.n	8008292 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008230:	f7fd fce6 	bl	8005c00 <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d11d      	bne.n	8008282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	d016      	beq.n	8008282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	f043 0220 	orr.w	r2, r3, #32
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e007      	b.n	8008292 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828c:	2b40      	cmp	r3, #64	@ 0x40
 800828e:	d1ae      	bne.n	80081ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082b0:	d11b      	bne.n	80082ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2220      	movs	r2, #32
 80082c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d6:	f043 0204 	orr.w	r2, r3, #4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e000      	b.n	80082ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0cc      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800830c:	4b68      	ldr	r3, [pc, #416]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d90c      	bls.n	8008334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800831a:	4b65      	ldr	r3, [pc, #404]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	b2d2      	uxtb	r2, r2
 8008320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008322:	4b63      	ldr	r3, [pc, #396]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d001      	beq.n	8008334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e0b8      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d020      	beq.n	8008382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800834c:	4b59      	ldr	r3, [pc, #356]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	4a58      	ldr	r2, [pc, #352]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008352:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008356:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008364:	4b53      	ldr	r3, [pc, #332]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4a52      	ldr	r2, [pc, #328]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800836a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800836e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008370:	4b50      	ldr	r3, [pc, #320]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	494d      	ldr	r1, [pc, #308]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800837e:	4313      	orrs	r3, r2
 8008380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b00      	cmp	r3, #0
 800838c:	d044      	beq.n	8008418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d107      	bne.n	80083a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008396:	4b47      	ldr	r3, [pc, #284]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d119      	bne.n	80083d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e07f      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d003      	beq.n	80083b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d107      	bne.n	80083c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b6:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d109      	bne.n	80083d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e06f      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083c6:	4b3b      	ldr	r3, [pc, #236]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e067      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083d6:	4b37      	ldr	r3, [pc, #220]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f023 0203 	bic.w	r2, r3, #3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4934      	ldr	r1, [pc, #208]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083e8:	f7fd fc0a 	bl	8005c00 <HAL_GetTick>
 80083ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ee:	e00a      	b.n	8008406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f0:	f7fd fc06 	bl	8005c00 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083fe:	4293      	cmp	r3, r2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e04f      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008406:	4b2b      	ldr	r3, [pc, #172]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 020c 	and.w	r2, r3, #12
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	429a      	cmp	r2, r3
 8008416:	d1eb      	bne.n	80083f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008418:	4b25      	ldr	r3, [pc, #148]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d20c      	bcs.n	8008440 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008426:	4b22      	ldr	r3, [pc, #136]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	b2d2      	uxtb	r2, r2
 800842c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800842e:	4b20      	ldr	r3, [pc, #128]	@ (80084b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d001      	beq.n	8008440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e032      	b.n	80084a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800844c:	4b19      	ldr	r3, [pc, #100]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4916      	ldr	r1, [pc, #88]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	4313      	orrs	r3, r2
 800845c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0308 	and.w	r3, r3, #8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d009      	beq.n	800847e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800846a:	4b12      	ldr	r3, [pc, #72]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	490e      	ldr	r1, [pc, #56]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 800847a:	4313      	orrs	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800847e:	f000 f821 	bl	80084c4 <HAL_RCC_GetSysClockFreq>
 8008482:	4602      	mov	r2, r0
 8008484:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	091b      	lsrs	r3, r3, #4
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	490a      	ldr	r1, [pc, #40]	@ (80084b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008490:	5ccb      	ldrb	r3, [r1, r3]
 8008492:	fa22 f303 	lsr.w	r3, r2, r3
 8008496:	4a09      	ldr	r2, [pc, #36]	@ (80084bc <HAL_RCC_ClockConfig+0x1c4>)
 8008498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800849a:	4b09      	ldr	r3, [pc, #36]	@ (80084c0 <HAL_RCC_ClockConfig+0x1c8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fd fb6a 	bl	8005b78 <HAL_InitTick>

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	40023c00 	.word	0x40023c00
 80084b4:	40023800 	.word	0x40023800
 80084b8:	08010000 	.word	0x08010000
 80084bc:	200000cc 	.word	0x200000cc
 80084c0:	200000d0 	.word	0x200000d0

080084c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c8:	b094      	sub	sp, #80	@ 0x50
 80084ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084dc:	4b79      	ldr	r3, [pc, #484]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 030c 	and.w	r3, r3, #12
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d00d      	beq.n	8008504 <HAL_RCC_GetSysClockFreq+0x40>
 80084e8:	2b08      	cmp	r3, #8
 80084ea:	f200 80e1 	bhi.w	80086b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <HAL_RCC_GetSysClockFreq+0x34>
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d003      	beq.n	80084fe <HAL_RCC_GetSysClockFreq+0x3a>
 80084f6:	e0db      	b.n	80086b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80084f8:	4b73      	ldr	r3, [pc, #460]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80084fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80084fc:	e0db      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80084fe:	4b73      	ldr	r3, [pc, #460]	@ (80086cc <HAL_RCC_GetSysClockFreq+0x208>)
 8008500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008502:	e0d8      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008504:	4b6f      	ldr	r3, [pc, #444]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800850c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800850e:	4b6d      	ldr	r3, [pc, #436]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d063      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800851a:	4b6a      	ldr	r3, [pc, #424]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	099b      	lsrs	r3, r3, #6
 8008520:	2200      	movs	r2, #0
 8008522:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008524:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852c:	633b      	str	r3, [r7, #48]	@ 0x30
 800852e:	2300      	movs	r3, #0
 8008530:	637b      	str	r3, [r7, #52]	@ 0x34
 8008532:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008536:	4622      	mov	r2, r4
 8008538:	462b      	mov	r3, r5
 800853a:	f04f 0000 	mov.w	r0, #0
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	0159      	lsls	r1, r3, #5
 8008544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008548:	0150      	lsls	r0, r2, #5
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4621      	mov	r1, r4
 8008550:	1a51      	subs	r1, r2, r1
 8008552:	6139      	str	r1, [r7, #16]
 8008554:	4629      	mov	r1, r5
 8008556:	eb63 0301 	sbc.w	r3, r3, r1
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008568:	4659      	mov	r1, fp
 800856a:	018b      	lsls	r3, r1, #6
 800856c:	4651      	mov	r1, sl
 800856e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008572:	4651      	mov	r1, sl
 8008574:	018a      	lsls	r2, r1, #6
 8008576:	4651      	mov	r1, sl
 8008578:	ebb2 0801 	subs.w	r8, r2, r1
 800857c:	4659      	mov	r1, fp
 800857e:	eb63 0901 	sbc.w	r9, r3, r1
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800858e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008596:	4690      	mov	r8, r2
 8008598:	4699      	mov	r9, r3
 800859a:	4623      	mov	r3, r4
 800859c:	eb18 0303 	adds.w	r3, r8, r3
 80085a0:	60bb      	str	r3, [r7, #8]
 80085a2:	462b      	mov	r3, r5
 80085a4:	eb49 0303 	adc.w	r3, r9, r3
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80085b6:	4629      	mov	r1, r5
 80085b8:	024b      	lsls	r3, r1, #9
 80085ba:	4621      	mov	r1, r4
 80085bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80085c0:	4621      	mov	r1, r4
 80085c2:	024a      	lsls	r2, r1, #9
 80085c4:	4610      	mov	r0, r2
 80085c6:	4619      	mov	r1, r3
 80085c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ca:	2200      	movs	r2, #0
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085d4:	f7f8 fb78 	bl	8000cc8 <__aeabi_uldivmod>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4613      	mov	r3, r2
 80085de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e0:	e058      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e2:	4b38      	ldr	r3, [pc, #224]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	099b      	lsrs	r3, r3, #6
 80085e8:	2200      	movs	r2, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	4611      	mov	r1, r2
 80085ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085f2:	623b      	str	r3, [r7, #32]
 80085f4:	2300      	movs	r3, #0
 80085f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80085fc:	4642      	mov	r2, r8
 80085fe:	464b      	mov	r3, r9
 8008600:	f04f 0000 	mov.w	r0, #0
 8008604:	f04f 0100 	mov.w	r1, #0
 8008608:	0159      	lsls	r1, r3, #5
 800860a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800860e:	0150      	lsls	r0, r2, #5
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4641      	mov	r1, r8
 8008616:	ebb2 0a01 	subs.w	sl, r2, r1
 800861a:	4649      	mov	r1, r9
 800861c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800862c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008634:	ebb2 040a 	subs.w	r4, r2, sl
 8008638:	eb63 050b 	sbc.w	r5, r3, fp
 800863c:	f04f 0200 	mov.w	r2, #0
 8008640:	f04f 0300 	mov.w	r3, #0
 8008644:	00eb      	lsls	r3, r5, #3
 8008646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800864a:	00e2      	lsls	r2, r4, #3
 800864c:	4614      	mov	r4, r2
 800864e:	461d      	mov	r5, r3
 8008650:	4643      	mov	r3, r8
 8008652:	18e3      	adds	r3, r4, r3
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	464b      	mov	r3, r9
 8008658:	eb45 0303 	adc.w	r3, r5, r3
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	f04f 0200 	mov.w	r2, #0
 8008662:	f04f 0300 	mov.w	r3, #0
 8008666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800866a:	4629      	mov	r1, r5
 800866c:	028b      	lsls	r3, r1, #10
 800866e:	4621      	mov	r1, r4
 8008670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008674:	4621      	mov	r1, r4
 8008676:	028a      	lsls	r2, r1, #10
 8008678:	4610      	mov	r0, r2
 800867a:	4619      	mov	r1, r3
 800867c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800867e:	2200      	movs	r2, #0
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	61fa      	str	r2, [r7, #28]
 8008684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008688:	f7f8 fb1e 	bl	8000cc8 <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4613      	mov	r3, r2
 8008692:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008694:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	3301      	adds	r3, #1
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80086a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80086ae:	e002      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086b0:	4b05      	ldr	r3, [pc, #20]	@ (80086c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80086b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80086b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3750      	adds	r7, #80	@ 0x50
 80086bc:	46bd      	mov	sp, r7
 80086be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800
 80086c8:	00f42400 	.word	0x00f42400
 80086cc:	007a1200 	.word	0x007a1200

080086d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086d4:	4b03      	ldr	r3, [pc, #12]	@ (80086e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086d6:	681b      	ldr	r3, [r3, #0]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	200000cc 	.word	0x200000cc

080086e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80086ec:	f7ff fff0 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b05      	ldr	r3, [pc, #20]	@ (8008708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	0a9b      	lsrs	r3, r3, #10
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	4903      	ldr	r1, [pc, #12]	@ (800870c <HAL_RCC_GetPCLK1Freq+0x24>)
 80086fe:	5ccb      	ldrb	r3, [r1, r3]
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008704:	4618      	mov	r0, r3
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40023800 	.word	0x40023800
 800870c:	08010010 	.word	0x08010010

08008710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008714:	f7ff ffdc 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 8008718:	4602      	mov	r2, r0
 800871a:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	0b5b      	lsrs	r3, r3, #13
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	4903      	ldr	r1, [pc, #12]	@ (8008734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008726:	5ccb      	ldrb	r3, [r1, r3]
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800872c:	4618      	mov	r0, r3
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40023800 	.word	0x40023800
 8008734:	08010010 	.word	0x08010010

08008738 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e273      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d075      	beq.n	8008842 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008756:	4b88      	ldr	r3, [pc, #544]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f003 030c 	and.w	r3, r3, #12
 800875e:	2b04      	cmp	r3, #4
 8008760:	d00c      	beq.n	800877c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008762:	4b85      	ldr	r3, [pc, #532]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 030c 	and.w	r3, r3, #12
        || \
 800876a:	2b08      	cmp	r3, #8
 800876c:	d112      	bne.n	8008794 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800876e:	4b82      	ldr	r3, [pc, #520]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800877a:	d10b      	bne.n	8008794 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877c:	4b7e      	ldr	r3, [pc, #504]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d05b      	beq.n	8008840 <HAL_RCC_OscConfig+0x108>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d157      	bne.n	8008840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e24e      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879c:	d106      	bne.n	80087ac <HAL_RCC_OscConfig+0x74>
 800879e:	4b76      	ldr	r3, [pc, #472]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a75      	ldr	r2, [pc, #468]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	e01d      	b.n	80087e8 <HAL_RCC_OscConfig+0xb0>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCC_OscConfig+0x98>
 80087b6:	4b70      	ldr	r3, [pc, #448]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a6f      	ldr	r2, [pc, #444]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4b6d      	ldr	r3, [pc, #436]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6c      	ldr	r2, [pc, #432]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087cc:	6013      	str	r3, [r2, #0]
 80087ce:	e00b      	b.n	80087e8 <HAL_RCC_OscConfig+0xb0>
 80087d0:	4b69      	ldr	r3, [pc, #420]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a68      	ldr	r2, [pc, #416]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4b66      	ldr	r3, [pc, #408]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a65      	ldr	r2, [pc, #404]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80087e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d013      	beq.n	8008818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fd fa06 	bl	8005c00 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087f8:	f7fd fa02 	bl	8005c00 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b64      	cmp	r3, #100	@ 0x64
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e213      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800880a:	4b5b      	ldr	r3, [pc, #364]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0xc0>
 8008816:	e014      	b.n	8008842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008818:	f7fd f9f2 	bl	8005c00 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008820:	f7fd f9ee 	bl	8005c00 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b64      	cmp	r3, #100	@ 0x64
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e1ff      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008832:	4b51      	ldr	r3, [pc, #324]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f0      	bne.n	8008820 <HAL_RCC_OscConfig+0xe8>
 800883e:	e000      	b.n	8008842 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d063      	beq.n	8008916 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800884e:	4b4a      	ldr	r3, [pc, #296]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800885a:	4b47      	ldr	r3, [pc, #284]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f003 030c 	and.w	r3, r3, #12
        || \
 8008862:	2b08      	cmp	r3, #8
 8008864:	d11c      	bne.n	80088a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008866:	4b44      	ldr	r3, [pc, #272]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d116      	bne.n	80088a0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008872:	4b41      	ldr	r3, [pc, #260]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_RCC_OscConfig+0x152>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e1d3      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888a:	4b3b      	ldr	r3, [pc, #236]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	00db      	lsls	r3, r3, #3
 8008898:	4937      	ldr	r1, [pc, #220]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800889a:	4313      	orrs	r3, r2
 800889c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800889e:	e03a      	b.n	8008916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d020      	beq.n	80088ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088a8:	4b34      	ldr	r3, [pc, #208]	@ (800897c <HAL_RCC_OscConfig+0x244>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ae:	f7fd f9a7 	bl	8005c00 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b6:	f7fd f9a3 	bl	8005c00 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e1b4      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088d4:	4b28      	ldr	r3, [pc, #160]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	00db      	lsls	r3, r3, #3
 80088e2:	4925      	ldr	r1, [pc, #148]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	600b      	str	r3, [r1, #0]
 80088e8:	e015      	b.n	8008916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088ea:	4b24      	ldr	r3, [pc, #144]	@ (800897c <HAL_RCC_OscConfig+0x244>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088f0:	f7fd f986 	bl	8005c00 <HAL_GetTick>
 80088f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088f6:	e008      	b.n	800890a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f8:	f7fd f982 	bl	8005c00 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b02      	cmp	r3, #2
 8008904:	d901      	bls.n	800890a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e193      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800890a:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0302 	and.w	r3, r3, #2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f0      	bne.n	80088f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0308 	and.w	r3, r3, #8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d036      	beq.n	8008990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d016      	beq.n	8008958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800892a:	4b15      	ldr	r3, [pc, #84]	@ (8008980 <HAL_RCC_OscConfig+0x248>)
 800892c:	2201      	movs	r2, #1
 800892e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008930:	f7fd f966 	bl	8005c00 <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008938:	f7fd f962 	bl	8005c00 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e173      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894a:	4b0b      	ldr	r3, [pc, #44]	@ (8008978 <HAL_RCC_OscConfig+0x240>)
 800894c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x200>
 8008956:	e01b      	b.n	8008990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008958:	4b09      	ldr	r3, [pc, #36]	@ (8008980 <HAL_RCC_OscConfig+0x248>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800895e:	f7fd f94f 	bl	8005c00 <HAL_GetTick>
 8008962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008964:	e00e      	b.n	8008984 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008966:	f7fd f94b 	bl	8005c00 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d907      	bls.n	8008984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e15c      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
 8008978:	40023800 	.word	0x40023800
 800897c:	42470000 	.word	0x42470000
 8008980:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008984:	4b8a      	ldr	r3, [pc, #552]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1ea      	bne.n	8008966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8097 	beq.w	8008acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a2:	4b83      	ldr	r3, [pc, #524]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 80089a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10f      	bne.n	80089ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 80089b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b6:	4a7e      	ldr	r2, [pc, #504]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 80089b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80089be:	4b7c      	ldr	r3, [pc, #496]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ca:	2301      	movs	r3, #1
 80089cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ce:	4b79      	ldr	r3, [pc, #484]	@ (8008bb4 <HAL_RCC_OscConfig+0x47c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d118      	bne.n	8008a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089da:	4b76      	ldr	r3, [pc, #472]	@ (8008bb4 <HAL_RCC_OscConfig+0x47c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a75      	ldr	r2, [pc, #468]	@ (8008bb4 <HAL_RCC_OscConfig+0x47c>)
 80089e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089e6:	f7fd f90b 	bl	8005c00 <HAL_GetTick>
 80089ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ec:	e008      	b.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ee:	f7fd f907 	bl	8005c00 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d901      	bls.n	8008a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e118      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008a00:	4b6c      	ldr	r3, [pc, #432]	@ (8008bb4 <HAL_RCC_OscConfig+0x47c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d0f0      	beq.n	80089ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d106      	bne.n	8008a22 <HAL_RCC_OscConfig+0x2ea>
 8008a14:	4b66      	ldr	r3, [pc, #408]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a18:	4a65      	ldr	r2, [pc, #404]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a20:	e01c      	b.n	8008a5c <HAL_RCC_OscConfig+0x324>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d10c      	bne.n	8008a44 <HAL_RCC_OscConfig+0x30c>
 8008a2a:	4b61      	ldr	r3, [pc, #388]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2e:	4a60      	ldr	r2, [pc, #384]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a30:	f043 0304 	orr.w	r3, r3, #4
 8008a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a36:	4b5e      	ldr	r3, [pc, #376]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a3c:	f043 0301 	orr.w	r3, r3, #1
 8008a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a42:	e00b      	b.n	8008a5c <HAL_RCC_OscConfig+0x324>
 8008a44:	4b5a      	ldr	r3, [pc, #360]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a48:	4a59      	ldr	r2, [pc, #356]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a50:	4b57      	ldr	r3, [pc, #348]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a54:	4a56      	ldr	r2, [pc, #344]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a56:	f023 0304 	bic.w	r3, r3, #4
 8008a5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d015      	beq.n	8008a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a64:	f7fd f8cc 	bl	8005c00 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a6a:	e00a      	b.n	8008a82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6c:	f7fd f8c8 	bl	8005c00 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e0d7      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a82:	4b4b      	ldr	r3, [pc, #300]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0ee      	beq.n	8008a6c <HAL_RCC_OscConfig+0x334>
 8008a8e:	e014      	b.n	8008aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a90:	f7fd f8b6 	bl	8005c00 <HAL_GetTick>
 8008a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a96:	e00a      	b.n	8008aae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a98:	f7fd f8b2 	bl	8005c00 <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e0c1      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aae:	4b40      	ldr	r3, [pc, #256]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1ee      	bne.n	8008a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008aca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80ad 	beq.w	8008c30 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ad6:	4b36      	ldr	r3, [pc, #216]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f003 030c 	and.w	r3, r3, #12
 8008ade:	2b08      	cmp	r3, #8
 8008ae0:	d060      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d145      	bne.n	8008b76 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aea:	4b33      	ldr	r3, [pc, #204]	@ (8008bb8 <HAL_RCC_OscConfig+0x480>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af0:	f7fd f886 	bl	8005c00 <HAL_GetTick>
 8008af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008af6:	e008      	b.n	8008b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af8:	f7fd f882 	bl	8005c00 <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d901      	bls.n	8008b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	e093      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0a:	4b29      	ldr	r3, [pc, #164]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1f0      	bne.n	8008af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69da      	ldr	r2, [r3, #28]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	019b      	lsls	r3, r3, #6
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	041b      	lsls	r3, r3, #16
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	061b      	lsls	r3, r3, #24
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b40:	071b      	lsls	r3, r3, #28
 8008b42:	491b      	ldr	r1, [pc, #108]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b48:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb8 <HAL_RCC_OscConfig+0x480>)
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4e:	f7fd f857 	bl	8005c00 <HAL_GetTick>
 8008b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b54:	e008      	b.n	8008b68 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b56:	f7fd f853 	bl	8005c00 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e064      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b68:	4b11      	ldr	r3, [pc, #68]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f0      	beq.n	8008b56 <HAL_RCC_OscConfig+0x41e>
 8008b74:	e05c      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b76:	4b10      	ldr	r3, [pc, #64]	@ (8008bb8 <HAL_RCC_OscConfig+0x480>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7c:	f7fd f840 	bl	8005c00 <HAL_GetTick>
 8008b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b84:	f7fd f83c 	bl	8005c00 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e04d      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b96:	4b06      	ldr	r3, [pc, #24]	@ (8008bb0 <HAL_RCC_OscConfig+0x478>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1f0      	bne.n	8008b84 <HAL_RCC_OscConfig+0x44c>
 8008ba2:	e045      	b.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e040      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	40007000 	.word	0x40007000
 8008bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008c3c <HAL_RCC_OscConfig+0x504>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d030      	beq.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d129      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d122      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008bec:	4013      	ands	r3, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d119      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	3b01      	subs	r3, #1
 8008c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d10f      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d107      	bne.n	8008c2c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d001      	beq.n	8008c30 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40023800 	.word	0x40023800

08008c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e041      	b.n	8008cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fc fd6a 	bl	8005740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	f000 fad8 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e041      	b.n	8008d74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f839 	bl	8008d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f000 fa89 	bl	8009234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x24>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e022      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d109      	bne.n	8008dce <HAL_TIM_PWM_Start+0x3e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	bf14      	ite	ne
 8008dc6:	2301      	movne	r3, #1
 8008dc8:	2300      	moveq	r3, #0
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	e015      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d109      	bne.n	8008de8 <HAL_TIM_PWM_Start+0x58>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e008      	b.n	8008dfa <HAL_TIM_PWM_Start+0x6a>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf14      	ite	ne
 8008df4:	2301      	movne	r3, #1
 8008df6:	2300      	moveq	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e07c      	b.n	8008efc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_PWM_Start+0x82>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e10:	e013      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_PWM_Start+0x92>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e20:	e00b      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d104      	bne.n	8008e32 <HAL_TIM_PWM_Start+0xa2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e30:	e003      	b.n	8008e3a <HAL_TIM_PWM_Start+0xaa>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fcec 	bl	8009820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8008f04 <HAL_TIM_PWM_Start+0x174>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d004      	beq.n	8008e5c <HAL_TIM_PWM_Start+0xcc>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2c      	ldr	r2, [pc, #176]	@ (8008f08 <HAL_TIM_PWM_Start+0x178>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d101      	bne.n	8008e60 <HAL_TIM_PWM_Start+0xd0>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <HAL_TIM_PWM_Start+0xd2>
 8008e60:	2300      	movs	r3, #0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a22      	ldr	r2, [pc, #136]	@ (8008f04 <HAL_TIM_PWM_Start+0x174>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d022      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e88:	d01d      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008f0c <HAL_TIM_PWM_Start+0x17c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d018      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1d      	ldr	r2, [pc, #116]	@ (8008f10 <HAL_TIM_PWM_Start+0x180>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d013      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f14 <HAL_TIM_PWM_Start+0x184>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a16      	ldr	r2, [pc, #88]	@ (8008f08 <HAL_TIM_PWM_Start+0x178>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d009      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a18      	ldr	r2, [pc, #96]	@ (8008f18 <HAL_TIM_PWM_Start+0x188>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d004      	beq.n	8008ec6 <HAL_TIM_PWM_Start+0x136>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a16      	ldr	r2, [pc, #88]	@ (8008f1c <HAL_TIM_PWM_Start+0x18c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d111      	bne.n	8008eea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0307 	and.w	r3, r3, #7
 8008ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	d010      	beq.n	8008efa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0201 	orr.w	r2, r2, #1
 8008ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee8:	e007      	b.n	8008efa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0201 	orr.w	r2, r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	40010000 	.word	0x40010000
 8008f08:	40010400 	.word	0x40010400
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40014000 	.word	0x40014000
 8008f1c:	40001800 	.word	0x40001800

08008f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e0ae      	b.n	800909c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b0c      	cmp	r3, #12
 8008f4a:	f200 809f 	bhi.w	800908c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f54:	08008f89 	.word	0x08008f89
 8008f58:	0800908d 	.word	0x0800908d
 8008f5c:	0800908d 	.word	0x0800908d
 8008f60:	0800908d 	.word	0x0800908d
 8008f64:	08008fc9 	.word	0x08008fc9
 8008f68:	0800908d 	.word	0x0800908d
 8008f6c:	0800908d 	.word	0x0800908d
 8008f70:	0800908d 	.word	0x0800908d
 8008f74:	0800900b 	.word	0x0800900b
 8008f78:	0800908d 	.word	0x0800908d
 8008f7c:	0800908d 	.word	0x0800908d
 8008f80:	0800908d 	.word	0x0800908d
 8008f84:	0800904b 	.word	0x0800904b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f9fc 	bl	800938c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0208 	orr.w	r2, r2, #8
 8008fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0204 	bic.w	r2, r2, #4
 8008fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6999      	ldr	r1, [r3, #24]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	619a      	str	r2, [r3, #24]
      break;
 8008fc6:	e064      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68b9      	ldr	r1, [r7, #8]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fa4c 	bl	800946c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	699a      	ldr	r2, [r3, #24]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6999      	ldr	r1, [r3, #24]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	021a      	lsls	r2, r3, #8
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	430a      	orrs	r2, r1
 8009006:	619a      	str	r2, [r3, #24]
      break;
 8009008:	e043      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 faa1 	bl	8009558 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69da      	ldr	r2, [r3, #28]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0208 	orr.w	r2, r2, #8
 8009024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	69da      	ldr	r2, [r3, #28]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f022 0204 	bic.w	r2, r2, #4
 8009034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69d9      	ldr	r1, [r3, #28]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	691a      	ldr	r2, [r3, #16]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	61da      	str	r2, [r3, #28]
      break;
 8009048:	e023      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 faf5 	bl	8009640 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	69da      	ldr	r2, [r3, #28]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	69da      	ldr	r2, [r3, #28]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69d9      	ldr	r1, [r3, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	021a      	lsls	r2, r3, #8
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	61da      	str	r2, [r3, #28]
      break;
 800908a:	e002      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	75fb      	strb	r3, [r7, #23]
      break;
 8009090:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIM_ConfigClockSource+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e0b4      	b.n	800922a <HAL_TIM_ConfigClockSource+0x186>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090f8:	d03e      	beq.n	8009178 <HAL_TIM_ConfigClockSource+0xd4>
 80090fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090fe:	f200 8087 	bhi.w	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009106:	f000 8086 	beq.w	8009216 <HAL_TIM_ConfigClockSource+0x172>
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800910e:	d87f      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009110:	2b70      	cmp	r3, #112	@ 0x70
 8009112:	d01a      	beq.n	800914a <HAL_TIM_ConfigClockSource+0xa6>
 8009114:	2b70      	cmp	r3, #112	@ 0x70
 8009116:	d87b      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009118:	2b60      	cmp	r3, #96	@ 0x60
 800911a:	d050      	beq.n	80091be <HAL_TIM_ConfigClockSource+0x11a>
 800911c:	2b60      	cmp	r3, #96	@ 0x60
 800911e:	d877      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009120:	2b50      	cmp	r3, #80	@ 0x50
 8009122:	d03c      	beq.n	800919e <HAL_TIM_ConfigClockSource+0xfa>
 8009124:	2b50      	cmp	r3, #80	@ 0x50
 8009126:	d873      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009128:	2b40      	cmp	r3, #64	@ 0x40
 800912a:	d058      	beq.n	80091de <HAL_TIM_ConfigClockSource+0x13a>
 800912c:	2b40      	cmp	r3, #64	@ 0x40
 800912e:	d86f      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b30      	cmp	r3, #48	@ 0x30
 8009132:	d064      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009134:	2b30      	cmp	r3, #48	@ 0x30
 8009136:	d86b      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b20      	cmp	r3, #32
 800913a:	d060      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 800913c:	2b20      	cmp	r3, #32
 800913e:	d867      	bhi.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d05c      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009144:	2b10      	cmp	r3, #16
 8009146:	d05a      	beq.n	80091fe <HAL_TIM_ConfigClockSource+0x15a>
 8009148:	e062      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800915a:	f000 fb41 	bl	80097e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800916c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	609a      	str	r2, [r3, #8]
      break;
 8009176:	e04f      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009188:	f000 fb2a 	bl	80097e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800919a:	609a      	str	r2, [r3, #8]
      break;
 800919c:	e03c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091aa:	461a      	mov	r2, r3
 80091ac:	f000 fa9e 	bl	80096ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2150      	movs	r1, #80	@ 0x50
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 faf7 	bl	80097aa <TIM_ITRx_SetConfig>
      break;
 80091bc:	e02c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091ca:	461a      	mov	r2, r3
 80091cc:	f000 fabd 	bl	800974a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2160      	movs	r1, #96	@ 0x60
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fae7 	bl	80097aa <TIM_ITRx_SetConfig>
      break;
 80091dc:	e01c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ea:	461a      	mov	r2, r3
 80091ec:	f000 fa7e 	bl	80096ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2140      	movs	r1, #64	@ 0x40
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fad7 	bl	80097aa <TIM_ITRx_SetConfig>
      break;
 80091fc:	e00c      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f000 face 	bl	80097aa <TIM_ITRx_SetConfig>
      break;
 800920e:	e003      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	73fb      	strb	r3, [r7, #15]
      break;
 8009214:	e000      	b.n	8009218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a46      	ldr	r2, [pc, #280]	@ (8009360 <TIM_Base_SetConfig+0x12c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d013      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009252:	d00f      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a43      	ldr	r2, [pc, #268]	@ (8009364 <TIM_Base_SetConfig+0x130>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00b      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a42      	ldr	r2, [pc, #264]	@ (8009368 <TIM_Base_SetConfig+0x134>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d007      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a41      	ldr	r2, [pc, #260]	@ (800936c <TIM_Base_SetConfig+0x138>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d003      	beq.n	8009274 <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a40      	ldr	r2, [pc, #256]	@ (8009370 <TIM_Base_SetConfig+0x13c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d108      	bne.n	8009286 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4a35      	ldr	r2, [pc, #212]	@ (8009360 <TIM_Base_SetConfig+0x12c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009294:	d027      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	4a32      	ldr	r2, [pc, #200]	@ (8009364 <TIM_Base_SetConfig+0x130>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d023      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a31      	ldr	r2, [pc, #196]	@ (8009368 <TIM_Base_SetConfig+0x134>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a30      	ldr	r2, [pc, #192]	@ (800936c <TIM_Base_SetConfig+0x138>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d01b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2f      	ldr	r2, [pc, #188]	@ (8009370 <TIM_Base_SetConfig+0x13c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d017      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009374 <TIM_Base_SetConfig+0x140>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d013      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009378 <TIM_Base_SetConfig+0x144>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00f      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a2c      	ldr	r2, [pc, #176]	@ (800937c <TIM_Base_SetConfig+0x148>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00b      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a2b      	ldr	r2, [pc, #172]	@ (8009380 <TIM_Base_SetConfig+0x14c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d007      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a2a      	ldr	r2, [pc, #168]	@ (8009384 <TIM_Base_SetConfig+0x150>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d003      	beq.n	80092e6 <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a29      	ldr	r2, [pc, #164]	@ (8009388 <TIM_Base_SetConfig+0x154>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d108      	bne.n	80092f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	4313      	orrs	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a10      	ldr	r2, [pc, #64]	@ (8009360 <TIM_Base_SetConfig+0x12c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_Base_SetConfig+0xf8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a12      	ldr	r2, [pc, #72]	@ (8009370 <TIM_Base_SetConfig+0x13c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d103      	bne.n	8009334 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	691a      	ldr	r2, [r3, #16]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b01      	cmp	r3, #1
 8009344:	d105      	bne.n	8009352 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	611a      	str	r2, [r3, #16]
  }
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	40000400 	.word	0x40000400
 8009368:	40000800 	.word	0x40000800
 800936c:	40000c00 	.word	0x40000c00
 8009370:	40010400 	.word	0x40010400
 8009374:	40014000 	.word	0x40014000
 8009378:	40014400 	.word	0x40014400
 800937c:	40014800 	.word	0x40014800
 8009380:	40001800 	.word	0x40001800
 8009384:	40001c00 	.word	0x40001c00
 8009388:	40002000 	.word	0x40002000

0800938c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a1b      	ldr	r3, [r3, #32]
 80093a0:	f023 0201 	bic.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 0303 	bic.w	r3, r3, #3
 80093c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f023 0302 	bic.w	r3, r3, #2
 80093d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	4313      	orrs	r3, r2
 80093de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a20      	ldr	r2, [pc, #128]	@ (8009464 <TIM_OC1_SetConfig+0xd8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d003      	beq.n	80093f0 <TIM_OC1_SetConfig+0x64>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009468 <TIM_OC1_SetConfig+0xdc>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10c      	bne.n	800940a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f023 0308 	bic.w	r3, r3, #8
 80093f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f023 0304 	bic.w	r3, r3, #4
 8009408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a15      	ldr	r2, [pc, #84]	@ (8009464 <TIM_OC1_SetConfig+0xd8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC1_SetConfig+0x8e>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a14      	ldr	r2, [pc, #80]	@ (8009468 <TIM_OC1_SetConfig+0xdc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d111      	bne.n	800943e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	697a      	ldr	r2, [r7, #20]
 8009456:	621a      	str	r2, [r3, #32]
}
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	40010000 	.word	0x40010000
 8009468:	40010400 	.word	0x40010400

0800946c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f023 0210 	bic.w	r2, r3, #16
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	021b      	lsls	r3, r3, #8
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0320 	bic.w	r3, r3, #32
 80094b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a22      	ldr	r2, [pc, #136]	@ (8009550 <TIM_OC2_SetConfig+0xe4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d003      	beq.n	80094d4 <TIM_OC2_SetConfig+0x68>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a21      	ldr	r2, [pc, #132]	@ (8009554 <TIM_OC2_SetConfig+0xe8>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d10d      	bne.n	80094f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	011b      	lsls	r3, r3, #4
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a17      	ldr	r2, [pc, #92]	@ (8009550 <TIM_OC2_SetConfig+0xe4>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_OC2_SetConfig+0x94>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a16      	ldr	r2, [pc, #88]	@ (8009554 <TIM_OC2_SetConfig+0xe8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d113      	bne.n	8009528 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800950e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	4313      	orrs	r3, r2
 800951a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	621a      	str	r2, [r3, #32]
}
 8009542:	bf00      	nop
 8009544:	371c      	adds	r7, #28
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	40010000 	.word	0x40010000
 8009554:	40010400 	.word	0x40010400

08009558 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4a21      	ldr	r2, [pc, #132]	@ (8009638 <TIM_OC3_SetConfig+0xe0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d003      	beq.n	80095be <TIM_OC3_SetConfig+0x66>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a20      	ldr	r2, [pc, #128]	@ (800963c <TIM_OC3_SetConfig+0xe4>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d10d      	bne.n	80095da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	021b      	lsls	r3, r3, #8
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a16      	ldr	r2, [pc, #88]	@ (8009638 <TIM_OC3_SetConfig+0xe0>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_OC3_SetConfig+0x92>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a15      	ldr	r2, [pc, #84]	@ (800963c <TIM_OC3_SetConfig+0xe4>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d113      	bne.n	8009612 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	621a      	str	r2, [r3, #32]
}
 800962c:	bf00      	nop
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	40010000 	.word	0x40010000
 800963c:	40010400 	.word	0x40010400

08009640 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	69db      	ldr	r3, [r3, #28]
 8009666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800966e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800968a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	031b      	lsls	r3, r3, #12
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a12      	ldr	r2, [pc, #72]	@ (80096e4 <TIM_OC4_SetConfig+0xa4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d003      	beq.n	80096a8 <TIM_OC4_SetConfig+0x68>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a11      	ldr	r2, [pc, #68]	@ (80096e8 <TIM_OC4_SetConfig+0xa8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d109      	bne.n	80096bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	019b      	lsls	r3, r3, #6
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	693a      	ldr	r2, [r7, #16]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40010000 	.word	0x40010000
 80096e8:	40010400 	.word	0x40010400

080096ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	f023 0201 	bic.w	r2, r3, #1
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f023 030a 	bic.w	r3, r3, #10
 8009728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	621a      	str	r2, [r3, #32]
}
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800974a:	b480      	push	{r7}
 800974c:	b087      	sub	sp, #28
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a1b      	ldr	r3, [r3, #32]
 800975a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	f023 0210 	bic.w	r2, r3, #16
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	031b      	lsls	r3, r3, #12
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	4313      	orrs	r3, r2
 800977e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	621a      	str	r2, [r3, #32]
}
 800979e:	bf00      	nop
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f043 0307 	orr.w	r3, r3, #7
 80097cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	609a      	str	r2, [r3, #8]
}
 80097d4:	bf00      	nop
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	021a      	lsls	r2, r3, #8
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	431a      	orrs	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4313      	orrs	r3, r2
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	609a      	str	r2, [r3, #8]
}
 8009814:	bf00      	nop
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	2201      	movs	r2, #1
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1a      	ldr	r2, [r3, #32]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 031f 	and.w	r3, r3, #31
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	fa01 f303 	lsl.w	r3, r1, r3
 8009858:	431a      	orrs	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	621a      	str	r2, [r3, #32]
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009880:	2302      	movs	r3, #2
 8009882:	e05a      	b.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a21      	ldr	r2, [pc, #132]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d022      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d0:	d01d      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1d      	ldr	r2, [pc, #116]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d018      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d013      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1a      	ldr	r2, [pc, #104]	@ (8009954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00e      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a18      	ldr	r2, [pc, #96]	@ (8009958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d009      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a17      	ldr	r2, [pc, #92]	@ (800995c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d10c      	bne.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4313      	orrs	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40010000 	.word	0x40010000
 800994c:	40000400 	.word	0x40000400
 8009950:	40000800 	.word	0x40000800
 8009954:	40000c00 	.word	0x40000c00
 8009958:	40010400 	.word	0x40010400
 800995c:	40014000 	.word	0x40014000
 8009960:	40001800 	.word	0x40001800

08009964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e042      	b.n	80099fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fb ff30 	bl	80057f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2224      	movs	r2, #36	@ 0x24
 8009994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fdf3 	bl	800a594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	695a      	ldr	r2, [r3, #20]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80099cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	68da      	ldr	r2, [r3, #12]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80099dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b08a      	sub	sp, #40	@ 0x28
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	4613      	mov	r3, r2
 8009a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d175      	bne.n	8009b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_UART_Transmit+0x2c>
 8009a2a:	88fb      	ldrh	r3, [r7, #6]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e06e      	b.n	8009b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2221      	movs	r2, #33	@ 0x21
 8009a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a42:	f7fc f8dd 	bl	8005c00 <HAL_GetTick>
 8009a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	88fa      	ldrh	r2, [r7, #6]
 8009a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	88fa      	ldrh	r2, [r7, #6]
 8009a52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a5c:	d108      	bne.n	8009a70 <HAL_UART_Transmit+0x6c>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d104      	bne.n	8009a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	e003      	b.n	8009a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a78:	e02e      	b.n	8009ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2180      	movs	r1, #128	@ 0x80
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f000 fb55 	bl	800a134 <UART_WaitOnFlagUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e03a      	b.n	8009b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	61bb      	str	r3, [r7, #24]
 8009ab8:	e007      	b.n	8009aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1cb      	bne.n	8009a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2140      	movs	r1, #64	@ 0x40
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fb21 	bl	800a134 <UART_WaitOnFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e006      	b.n	8009b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2220      	movs	r2, #32
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	e000      	b.n	8009b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009b10:	2302      	movs	r3, #2
  }
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b08c      	sub	sp, #48	@ 0x30
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	60f8      	str	r0, [r7, #12]
 8009b22:	60b9      	str	r1, [r7, #8]
 8009b24:	4613      	mov	r3, r2
 8009b26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b20      	cmp	r3, #32
 8009b32:	d14a      	bne.n	8009bca <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d101      	bne.n	8009b44 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	e043      	b.n	8009bcc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2201      	movs	r2, #1
 8009b48:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8009b50:	88fb      	ldrh	r3, [r7, #6]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fb45 	bl	800a1e6 <UART_Start_Receive_IT>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009b62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d12c      	bne.n	8009bc4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d125      	bne.n	8009bbe <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b72:	2300      	movs	r3, #0
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	613b      	str	r3, [r7, #16]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	613b      	str	r3, [r7, #16]
 8009b86:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	e853 3f00 	ldrex	r3, [r3]
 8009b96:	617b      	str	r3, [r7, #20]
   return(result);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f043 0310 	orr.w	r3, r3, #16
 8009b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	6a39      	ldr	r1, [r7, #32]
 8009bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb0:	e841 2300 	strex	r3, r2, [r1]
 8009bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1e5      	bne.n	8009b88 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8009bbc:	e002      	b.n	8009bc4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009bc8:	e000      	b.n	8009bcc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009bca:	2302      	movs	r3, #2
  }
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3730      	adds	r7, #48	@ 0x30
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b0ba      	sub	sp, #232	@ 0xe8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0a:	f003 030f 	and.w	r3, r3, #15
 8009c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d10f      	bne.n	8009c3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1e:	f003 0320 	and.w	r3, r3, #32
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <HAL_UART_IRQHandler+0x66>
 8009c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fbf0 	bl	800a418 <UART_Receive_IT>
      return;
 8009c38:	e25b      	b.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80de 	beq.w	8009e00 <HAL_UART_IRQHandler+0x22c>
 8009c44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c54:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80d1 	beq.w	8009e00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <HAL_UART_IRQHandler+0xae>
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7a:	f043 0201 	orr.w	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <HAL_UART_IRQHandler+0xd2>
 8009c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c9e:	f043 0202 	orr.w	r2, r3, #2
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f003 0302 	and.w	r3, r3, #2
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00b      	beq.n	8009cca <HAL_UART_IRQHandler+0xf6>
 8009cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cb6:	f003 0301 	and.w	r3, r3, #1
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	f043 0204 	orr.w	r2, r3, #4
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d011      	beq.n	8009cfa <HAL_UART_IRQHandler+0x126>
 8009cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cf2:	f043 0208 	orr.w	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 81f2 	beq.w	800a0e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d008      	beq.n	8009d22 <HAL_UART_IRQHandler+0x14e>
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d002      	beq.n	8009d22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fb7b 	bl	800a418 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2c:	2b40      	cmp	r3, #64	@ 0x40
 8009d2e:	bf0c      	ite	eq
 8009d30:	2301      	moveq	r3, #1
 8009d32:	2300      	movne	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <HAL_UART_IRQHandler+0x17a>
 8009d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d04f      	beq.n	8009dee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fa83 	bl	800a25a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5e:	2b40      	cmp	r3, #64	@ 0x40
 8009d60:	d141      	bne.n	8009de6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3314      	adds	r3, #20
 8009d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1d9      	bne.n	8009d62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d013      	beq.n	8009dde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dba:	4a7e      	ldr	r2, [pc, #504]	@ (8009fb4 <HAL_UART_IRQHandler+0x3e0>)
 8009dbc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fc f8cd 	bl	8005f62 <HAL_DMA_Abort_IT>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d016      	beq.n	8009dfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009dd8:	4610      	mov	r0, r2
 8009dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ddc:	e00e      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f99e 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de4:	e00a      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f99a 	bl	800a120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dec:	e006      	b.n	8009dfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f996 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009dfa:	e175      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dfc:	bf00      	nop
    return;
 8009dfe:	e173      	b.n	800a0e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	f040 814f 	bne.w	800a0a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e0e:	f003 0310 	and.w	r3, r3, #16
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8148 	beq.w	800a0a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e1c:	f003 0310 	and.w	r3, r3, #16
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8141 	beq.w	800a0a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e26:	2300      	movs	r3, #0
 8009e28:	60bb      	str	r3, [r7, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	60bb      	str	r3, [r7, #8]
 8009e3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b40      	cmp	r3, #64	@ 0x40
 8009e48:	f040 80b6 	bne.w	8009fb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 8145 	beq.w	800a0ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	f080 813e 	bcs.w	800a0ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e76:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e7c:	69db      	ldr	r3, [r3, #28]
 8009e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e82:	f000 8088 	beq.w	8009f96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009eb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1d9      	bne.n	8009e86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3314      	adds	r3, #20
 8009ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3314      	adds	r3, #20
 8009ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e1      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3314      	adds	r3, #20
 8009f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e3      	bne.n	8009f0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f5e:	e853 3f00 	ldrex	r3, [r3]
 8009f62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f66:	f023 0310 	bic.w	r3, r3, #16
 8009f6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f80:	e841 2300 	strex	r3, r2, [r1]
 8009f84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1e3      	bne.n	8009f54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fb ff76 	bl	8005e82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	1ad3      	subs	r3, r2, r3
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7fa ffb3 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fb2:	e09b      	b.n	800a0ec <HAL_UART_IRQHandler+0x518>
 8009fb4:	0800a321 	.word	0x0800a321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 808e 	beq.w	800a0f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 8089 	beq.w	800a0f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	330c      	adds	r3, #12
 8009ffe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a002:	647a      	str	r2, [r7, #68]	@ 0x44
 800a004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e3      	bne.n	8009fde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3314      	adds	r3, #20
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	623b      	str	r3, [r7, #32]
   return(result);
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3314      	adds	r3, #20
 800a036:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a03a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a03c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e3      	bne.n	800a016 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f023 0310 	bic.w	r3, r3, #16
 800a072:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	330c      	adds	r3, #12
 800a07c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a080:	61fa      	str	r2, [r7, #28]
 800a082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a084:	69b9      	ldr	r1, [r7, #24]
 800a086:	69fa      	ldr	r2, [r7, #28]
 800a088:	e841 2300 	strex	r3, r2, [r1]
 800a08c:	617b      	str	r3, [r7, #20]
   return(result);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1e3      	bne.n	800a05c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2202      	movs	r2, #2
 800a098:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a09a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7fa ff39 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a0a6:	e023      	b.n	800a0f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x4f4>
 800a0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f941 	bl	800a348 <UART_Transmit_IT>
    return;
 800a0c6:	e014      	b.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00e      	beq.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
 800a0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f981 	bl	800a3e8 <UART_EndTransmit_IT>
    return;
 800a0e6:	e004      	b.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
    return;
 800a0e8:	bf00      	nop
 800a0ea:	e002      	b.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a0ec:	bf00      	nop
 800a0ee:	e000      	b.n	800a0f2 <HAL_UART_IRQHandler+0x51e>
      return;
 800a0f0:	bf00      	nop
  }
}
 800a0f2:	37e8      	adds	r7, #232	@ 0xe8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a144:	e03b      	b.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14c:	d037      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a14e:	f7fb fd57 	bl	8005c00 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d302      	bcc.n	800a164 <UART_WaitOnFlagUntilTimeout+0x30>
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d101      	bne.n	800a168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e03a      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	f003 0304 	and.w	r3, r3, #4
 800a172:	2b00      	cmp	r3, #0
 800a174:	d023      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b80      	cmp	r3, #128	@ 0x80
 800a17a:	d020      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b40      	cmp	r3, #64	@ 0x40
 800a180:	d01d      	beq.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d116      	bne.n	800a1be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a190:	2300      	movs	r3, #0
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	617b      	str	r3, [r7, #20]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	617b      	str	r3, [r7, #20]
 800a1a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f000 f857 	bl	800a25a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e00f      	b.n	800a1de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2301      	moveq	r3, #1
 800a1d0:	2300      	movne	r3, #0
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d0b4      	beq.n	800a146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b085      	sub	sp, #20
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	88fa      	ldrh	r2, [r7, #6]
 800a1fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	88fa      	ldrh	r2, [r7, #6]
 800a204:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2222      	movs	r2, #34	@ 0x22
 800a210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a22a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	695a      	ldr	r2, [r3, #20]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0201 	orr.w	r2, r2, #1
 800a23a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0220 	orr.w	r2, r2, #32
 800a24a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b095      	sub	sp, #84	@ 0x54
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	330c      	adds	r3, #12
 800a268:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	330c      	adds	r3, #12
 800a280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a282:	643a      	str	r2, [r7, #64]	@ 0x40
 800a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e5      	bne.n	800a262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3314      	adds	r3, #20
 800a29c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	f023 0301 	bic.w	r3, r3, #1
 800a2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3314      	adds	r3, #20
 800a2b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e5      	bne.n	800a296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d119      	bne.n	800a306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	330c      	adds	r3, #12
 800a2d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	f023 0310 	bic.w	r3, r3, #16
 800a2e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2f2:	61ba      	str	r2, [r7, #24]
 800a2f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f6:	6979      	ldr	r1, [r7, #20]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1e5      	bne.n	800a2d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2220      	movs	r2, #32
 800a30a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a314:	bf00      	nop
 800a316:	3754      	adds	r7, #84	@ 0x54
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fef0 	bl	800a120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a340:	bf00      	nop
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b21      	cmp	r3, #33	@ 0x21
 800a35a:	d13e      	bne.n	800a3da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a364:	d114      	bne.n	800a390 <UART_Transmit_IT+0x48>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d110      	bne.n	800a390 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	1c9a      	adds	r2, r3, #2
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	621a      	str	r2, [r3, #32]
 800a38e:	e008      	b.n	800a3a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	1c59      	adds	r1, r3, #1
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6211      	str	r1, [r2, #32]
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10f      	bne.n	800a3d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e000      	b.n	800a3dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3da:	2302      	movs	r3, #2
  }
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2220      	movs	r2, #32
 800a404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f7ff fe75 	bl	800a0f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08c      	sub	sp, #48	@ 0x30
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a426:	b2db      	uxtb	r3, r3
 800a428:	2b22      	cmp	r3, #34	@ 0x22
 800a42a:	f040 80ae 	bne.w	800a58a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a436:	d117      	bne.n	800a468 <UART_Receive_IT+0x50>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d113      	bne.n	800a468 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a448:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	b29b      	uxth	r3, r3
 800a452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a456:	b29a      	uxth	r2, r3
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a460:	1c9a      	adds	r2, r3, #2
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	629a      	str	r2, [r3, #40]	@ 0x28
 800a466:	e026      	b.n	800a4b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a46e:	2300      	movs	r3, #0
 800a470:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a47a:	d007      	beq.n	800a48c <UART_Receive_IT+0x74>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <UART_Receive_IT+0x82>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	b2da      	uxtb	r2, r3
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	701a      	strb	r2, [r3, #0]
 800a498:	e008      	b.n	800a4ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d15d      	bne.n	800a586 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0220 	bic.w	r2, r2, #32
 800a4d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695a      	ldr	r2, [r3, #20]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0201 	bic.w	r2, r2, #1
 800a4f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d135      	bne.n	800a57c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	613b      	str	r3, [r7, #16]
   return(result);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f023 0310 	bic.w	r3, r3, #16
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	330c      	adds	r3, #12
 800a534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a536:	623a      	str	r2, [r7, #32]
 800a538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	69f9      	ldr	r1, [r7, #28]
 800a53c:	6a3a      	ldr	r2, [r7, #32]
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	61bb      	str	r3, [r7, #24]
   return(result);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e5      	bne.n	800a516 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b10      	cmp	r3, #16
 800a556:	d10a      	bne.n	800a56e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a572:	4619      	mov	r1, r3
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7fa fccf 	bl	8004f18 <HAL_UARTEx_RxEventCallback>
 800a57a:	e002      	b.n	800a582 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7ff fdc5 	bl	800a10c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e002      	b.n	800a58c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	e000      	b.n	800a58c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a58a:	2302      	movs	r3, #2
  }
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3730      	adds	r7, #48	@ 0x30
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a598:	b0c0      	sub	sp, #256	@ 0x100
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b0:	68d9      	ldr	r1, [r3, #12]
 800a5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	ea40 0301 	orr.w	r3, r0, r1
 800a5bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a5ec:	f021 010c 	bic.w	r1, r1, #12
 800a5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a60a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60e:	6999      	ldr	r1, [r3, #24]
 800a610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	ea40 0301 	orr.w	r3, r0, r1
 800a61a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	4b8f      	ldr	r3, [pc, #572]	@ (800a860 <UART_SetConfig+0x2cc>)
 800a624:	429a      	cmp	r2, r3
 800a626:	d005      	beq.n	800a634 <UART_SetConfig+0xa0>
 800a628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4b8d      	ldr	r3, [pc, #564]	@ (800a864 <UART_SetConfig+0x2d0>)
 800a630:	429a      	cmp	r2, r3
 800a632:	d104      	bne.n	800a63e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a634:	f7fe f86c 	bl	8008710 <HAL_RCC_GetPCLK2Freq>
 800a638:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a63c:	e003      	b.n	800a646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a63e:	f7fe f853 	bl	80086e8 <HAL_RCC_GetPCLK1Freq>
 800a642:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a650:	f040 810c 	bne.w	800a86c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a658:	2200      	movs	r2, #0
 800a65a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a65e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a666:	4622      	mov	r2, r4
 800a668:	462b      	mov	r3, r5
 800a66a:	1891      	adds	r1, r2, r2
 800a66c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a66e:	415b      	adcs	r3, r3
 800a670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a676:	4621      	mov	r1, r4
 800a678:	eb12 0801 	adds.w	r8, r2, r1
 800a67c:	4629      	mov	r1, r5
 800a67e:	eb43 0901 	adc.w	r9, r3, r1
 800a682:	f04f 0200 	mov.w	r2, #0
 800a686:	f04f 0300 	mov.w	r3, #0
 800a68a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a68e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a696:	4690      	mov	r8, r2
 800a698:	4699      	mov	r9, r3
 800a69a:	4623      	mov	r3, r4
 800a69c:	eb18 0303 	adds.w	r3, r8, r3
 800a6a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	eb49 0303 	adc.w	r3, r9, r3
 800a6aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a6be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	18db      	adds	r3, r3, r3
 800a6c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	eb42 0303 	adc.w	r3, r2, r3
 800a6ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6d8:	f7f6 faf6 	bl	8000cc8 <__aeabi_uldivmod>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4b61      	ldr	r3, [pc, #388]	@ (800a868 <UART_SetConfig+0x2d4>)
 800a6e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a6e6:	095b      	lsrs	r3, r3, #5
 800a6e8:	011c      	lsls	r4, r3, #4
 800a6ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a6f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a6fc:	4642      	mov	r2, r8
 800a6fe:	464b      	mov	r3, r9
 800a700:	1891      	adds	r1, r2, r2
 800a702:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a704:	415b      	adcs	r3, r3
 800a706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a70c:	4641      	mov	r1, r8
 800a70e:	eb12 0a01 	adds.w	sl, r2, r1
 800a712:	4649      	mov	r1, r9
 800a714:	eb43 0b01 	adc.w	fp, r3, r1
 800a718:	f04f 0200 	mov.w	r2, #0
 800a71c:	f04f 0300 	mov.w	r3, #0
 800a720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a72c:	4692      	mov	sl, r2
 800a72e:	469b      	mov	fp, r3
 800a730:	4643      	mov	r3, r8
 800a732:	eb1a 0303 	adds.w	r3, sl, r3
 800a736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a73a:	464b      	mov	r3, r9
 800a73c:	eb4b 0303 	adc.w	r3, fp, r3
 800a740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a750:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a758:	460b      	mov	r3, r1
 800a75a:	18db      	adds	r3, r3, r3
 800a75c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a75e:	4613      	mov	r3, r2
 800a760:	eb42 0303 	adc.w	r3, r2, r3
 800a764:	647b      	str	r3, [r7, #68]	@ 0x44
 800a766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a76a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a76e:	f7f6 faab 	bl	8000cc8 <__aeabi_uldivmod>
 800a772:	4602      	mov	r2, r0
 800a774:	460b      	mov	r3, r1
 800a776:	4611      	mov	r1, r2
 800a778:	4b3b      	ldr	r3, [pc, #236]	@ (800a868 <UART_SetConfig+0x2d4>)
 800a77a:	fba3 2301 	umull	r2, r3, r3, r1
 800a77e:	095b      	lsrs	r3, r3, #5
 800a780:	2264      	movs	r2, #100	@ 0x64
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	1acb      	subs	r3, r1, r3
 800a788:	00db      	lsls	r3, r3, #3
 800a78a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a78e:	4b36      	ldr	r3, [pc, #216]	@ (800a868 <UART_SetConfig+0x2d4>)
 800a790:	fba3 2302 	umull	r2, r3, r3, r2
 800a794:	095b      	lsrs	r3, r3, #5
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a79c:	441c      	add	r4, r3
 800a79e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a7a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a7ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a7b0:	4642      	mov	r2, r8
 800a7b2:	464b      	mov	r3, r9
 800a7b4:	1891      	adds	r1, r2, r2
 800a7b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7b8:	415b      	adcs	r3, r3
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7c0:	4641      	mov	r1, r8
 800a7c2:	1851      	adds	r1, r2, r1
 800a7c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	414b      	adcs	r3, r1
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7cc:	f04f 0200 	mov.w	r2, #0
 800a7d0:	f04f 0300 	mov.w	r3, #0
 800a7d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7d8:	4659      	mov	r1, fp
 800a7da:	00cb      	lsls	r3, r1, #3
 800a7dc:	4651      	mov	r1, sl
 800a7de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7e2:	4651      	mov	r1, sl
 800a7e4:	00ca      	lsls	r2, r1, #3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	189b      	adds	r3, r3, r2
 800a7f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	460a      	mov	r2, r1
 800a7f8:	eb42 0303 	adc.w	r3, r2, r3
 800a7fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a80c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a814:	460b      	mov	r3, r1
 800a816:	18db      	adds	r3, r3, r3
 800a818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a81a:	4613      	mov	r3, r2
 800a81c:	eb42 0303 	adc.w	r3, r2, r3
 800a820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a82a:	f7f6 fa4d 	bl	8000cc8 <__aeabi_uldivmod>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4b0d      	ldr	r3, [pc, #52]	@ (800a868 <UART_SetConfig+0x2d4>)
 800a834:	fba3 1302 	umull	r1, r3, r3, r2
 800a838:	095b      	lsrs	r3, r3, #5
 800a83a:	2164      	movs	r1, #100	@ 0x64
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	3332      	adds	r3, #50	@ 0x32
 800a846:	4a08      	ldr	r2, [pc, #32]	@ (800a868 <UART_SetConfig+0x2d4>)
 800a848:	fba2 2303 	umull	r2, r3, r2, r3
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	f003 0207 	and.w	r2, r3, #7
 800a852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4422      	add	r2, r4
 800a85a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a85c:	e106      	b.n	800aa6c <UART_SetConfig+0x4d8>
 800a85e:	bf00      	nop
 800a860:	40011000 	.word	0x40011000
 800a864:	40011400 	.word	0x40011400
 800a868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a86c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a870:	2200      	movs	r2, #0
 800a872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a876:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a87a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a87e:	4642      	mov	r2, r8
 800a880:	464b      	mov	r3, r9
 800a882:	1891      	adds	r1, r2, r2
 800a884:	6239      	str	r1, [r7, #32]
 800a886:	415b      	adcs	r3, r3
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
 800a88a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a88e:	4641      	mov	r1, r8
 800a890:	1854      	adds	r4, r2, r1
 800a892:	4649      	mov	r1, r9
 800a894:	eb43 0501 	adc.w	r5, r3, r1
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	00eb      	lsls	r3, r5, #3
 800a8a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8a6:	00e2      	lsls	r2, r4, #3
 800a8a8:	4614      	mov	r4, r2
 800a8aa:	461d      	mov	r5, r3
 800a8ac:	4643      	mov	r3, r8
 800a8ae:	18e3      	adds	r3, r4, r3
 800a8b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8b4:	464b      	mov	r3, r9
 800a8b6:	eb45 0303 	adc.w	r3, r5, r3
 800a8ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	f04f 0300 	mov.w	r3, #0
 800a8d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8da:	4629      	mov	r1, r5
 800a8dc:	008b      	lsls	r3, r1, #2
 800a8de:	4621      	mov	r1, r4
 800a8e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	008a      	lsls	r2, r1, #2
 800a8e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a8ec:	f7f6 f9ec 	bl	8000cc8 <__aeabi_uldivmod>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4b60      	ldr	r3, [pc, #384]	@ (800aa78 <UART_SetConfig+0x4e4>)
 800a8f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a8fa:	095b      	lsrs	r3, r3, #5
 800a8fc:	011c      	lsls	r4, r3, #4
 800a8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a902:	2200      	movs	r2, #0
 800a904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a908:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a90c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a910:	4642      	mov	r2, r8
 800a912:	464b      	mov	r3, r9
 800a914:	1891      	adds	r1, r2, r2
 800a916:	61b9      	str	r1, [r7, #24]
 800a918:	415b      	adcs	r3, r3
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a920:	4641      	mov	r1, r8
 800a922:	1851      	adds	r1, r2, r1
 800a924:	6139      	str	r1, [r7, #16]
 800a926:	4649      	mov	r1, r9
 800a928:	414b      	adcs	r3, r1
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	f04f 0200 	mov.w	r2, #0
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a938:	4659      	mov	r1, fp
 800a93a:	00cb      	lsls	r3, r1, #3
 800a93c:	4651      	mov	r1, sl
 800a93e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a942:	4651      	mov	r1, sl
 800a944:	00ca      	lsls	r2, r1, #3
 800a946:	4610      	mov	r0, r2
 800a948:	4619      	mov	r1, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	4642      	mov	r2, r8
 800a94e:	189b      	adds	r3, r3, r2
 800a950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a954:	464b      	mov	r3, r9
 800a956:	460a      	mov	r2, r1
 800a958:	eb42 0303 	adc.w	r3, r2, r3
 800a95c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a96a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	f04f 0300 	mov.w	r3, #0
 800a974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a978:	4649      	mov	r1, r9
 800a97a:	008b      	lsls	r3, r1, #2
 800a97c:	4641      	mov	r1, r8
 800a97e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a982:	4641      	mov	r1, r8
 800a984:	008a      	lsls	r2, r1, #2
 800a986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a98a:	f7f6 f99d 	bl	8000cc8 <__aeabi_uldivmod>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4611      	mov	r1, r2
 800a994:	4b38      	ldr	r3, [pc, #224]	@ (800aa78 <UART_SetConfig+0x4e4>)
 800a996:	fba3 2301 	umull	r2, r3, r3, r1
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	2264      	movs	r2, #100	@ 0x64
 800a99e:	fb02 f303 	mul.w	r3, r2, r3
 800a9a2:	1acb      	subs	r3, r1, r3
 800a9a4:	011b      	lsls	r3, r3, #4
 800a9a6:	3332      	adds	r3, #50	@ 0x32
 800a9a8:	4a33      	ldr	r2, [pc, #204]	@ (800aa78 <UART_SetConfig+0x4e4>)
 800a9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9b4:	441c      	add	r4, r3
 800a9b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9be:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	1891      	adds	r1, r2, r2
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	415b      	adcs	r3, r3
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	1851      	adds	r1, r2, r1
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	4649      	mov	r1, r9
 800a9dc:	414b      	adcs	r3, r1
 800a9de:	607b      	str	r3, [r7, #4]
 800a9e0:	f04f 0200 	mov.w	r2, #0
 800a9e4:	f04f 0300 	mov.w	r3, #0
 800a9e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9ec:	4659      	mov	r1, fp
 800a9ee:	00cb      	lsls	r3, r1, #3
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9f6:	4651      	mov	r1, sl
 800a9f8:	00ca      	lsls	r2, r1, #3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	4642      	mov	r2, r8
 800aa02:	189b      	adds	r3, r3, r2
 800aa04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa06:	464b      	mov	r3, r9
 800aa08:	460a      	mov	r2, r1
 800aa0a:	eb42 0303 	adc.w	r3, r2, r3
 800aa0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa1a:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa1c:	f04f 0200 	mov.w	r2, #0
 800aa20:	f04f 0300 	mov.w	r3, #0
 800aa24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa28:	4649      	mov	r1, r9
 800aa2a:	008b      	lsls	r3, r1, #2
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa32:	4641      	mov	r1, r8
 800aa34:	008a      	lsls	r2, r1, #2
 800aa36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa3a:	f7f6 f945 	bl	8000cc8 <__aeabi_uldivmod>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <UART_SetConfig+0x4e4>)
 800aa44:	fba3 1302 	umull	r1, r3, r3, r2
 800aa48:	095b      	lsrs	r3, r3, #5
 800aa4a:	2164      	movs	r1, #100	@ 0x64
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	3332      	adds	r3, #50	@ 0x32
 800aa56:	4a08      	ldr	r2, [pc, #32]	@ (800aa78 <UART_SetConfig+0x4e4>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f003 020f 	and.w	r2, r3, #15
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4422      	add	r2, r4
 800aa6a:	609a      	str	r2, [r3, #8]
}
 800aa6c:	bf00      	nop
 800aa6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa72:	46bd      	mov	sp, r7
 800aa74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa78:	51eb851f 	.word	0x51eb851f

0800aa7c <atof>:
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	f000 be07 	b.w	800b690 <strtod>

0800aa82 <atoi>:
 800aa82:	220a      	movs	r2, #10
 800aa84:	2100      	movs	r1, #0
 800aa86:	f000 be89 	b.w	800b79c <strtol>

0800aa8a <sulp>:
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	ec45 4b10 	vmov	d0, r4, r5
 800aa94:	4616      	mov	r6, r2
 800aa96:	f003 fafb 	bl	800e090 <__ulp>
 800aa9a:	ec51 0b10 	vmov	r0, r1, d0
 800aa9e:	b17e      	cbz	r6, 800aac0 <sulp+0x36>
 800aaa0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaa4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd09      	ble.n	800aac0 <sulp+0x36>
 800aaac:	051b      	lsls	r3, r3, #20
 800aaae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800aab2:	2400      	movs	r4, #0
 800aab4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800aab8:	4622      	mov	r2, r4
 800aaba:	462b      	mov	r3, r5
 800aabc:	f7f5 fdbc 	bl	8000638 <__aeabi_dmul>
 800aac0:	ec41 0b10 	vmov	d0, r0, r1
 800aac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aac8 <_strtod_l>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	b09f      	sub	sp, #124	@ 0x7c
 800aace:	460c      	mov	r4, r1
 800aad0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800aad2:	2200      	movs	r2, #0
 800aad4:	921a      	str	r2, [sp, #104]	@ 0x68
 800aad6:	9005      	str	r0, [sp, #20]
 800aad8:	f04f 0a00 	mov.w	sl, #0
 800aadc:	f04f 0b00 	mov.w	fp, #0
 800aae0:	460a      	mov	r2, r1
 800aae2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aae4:	7811      	ldrb	r1, [r2, #0]
 800aae6:	292b      	cmp	r1, #43	@ 0x2b
 800aae8:	d04a      	beq.n	800ab80 <_strtod_l+0xb8>
 800aaea:	d838      	bhi.n	800ab5e <_strtod_l+0x96>
 800aaec:	290d      	cmp	r1, #13
 800aaee:	d832      	bhi.n	800ab56 <_strtod_l+0x8e>
 800aaf0:	2908      	cmp	r1, #8
 800aaf2:	d832      	bhi.n	800ab5a <_strtod_l+0x92>
 800aaf4:	2900      	cmp	r1, #0
 800aaf6:	d03b      	beq.n	800ab70 <_strtod_l+0xa8>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aafc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800aafe:	782a      	ldrb	r2, [r5, #0]
 800ab00:	2a30      	cmp	r2, #48	@ 0x30
 800ab02:	f040 80b3 	bne.w	800ac6c <_strtod_l+0x1a4>
 800ab06:	786a      	ldrb	r2, [r5, #1]
 800ab08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab0c:	2a58      	cmp	r2, #88	@ 0x58
 800ab0e:	d16e      	bne.n	800abee <_strtod_l+0x126>
 800ab10:	9302      	str	r3, [sp, #8]
 800ab12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	ab1a      	add	r3, sp, #104	@ 0x68
 800ab18:	9300      	str	r3, [sp, #0]
 800ab1a:	4a8e      	ldr	r2, [pc, #568]	@ (800ad54 <_strtod_l+0x28c>)
 800ab1c:	9805      	ldr	r0, [sp, #20]
 800ab1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ab20:	a919      	add	r1, sp, #100	@ 0x64
 800ab22:	f002 fba7 	bl	800d274 <__gethex>
 800ab26:	f010 060f 	ands.w	r6, r0, #15
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	d005      	beq.n	800ab3a <_strtod_l+0x72>
 800ab2e:	2e06      	cmp	r6, #6
 800ab30:	d128      	bne.n	800ab84 <_strtod_l+0xbc>
 800ab32:	3501      	adds	r5, #1
 800ab34:	2300      	movs	r3, #0
 800ab36:	9519      	str	r5, [sp, #100]	@ 0x64
 800ab38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f040 858e 	bne.w	800b65e <_strtod_l+0xb96>
 800ab42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab44:	b1cb      	cbz	r3, 800ab7a <_strtod_l+0xb2>
 800ab46:	4652      	mov	r2, sl
 800ab48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ab4c:	ec43 2b10 	vmov	d0, r2, r3
 800ab50:	b01f      	add	sp, #124	@ 0x7c
 800ab52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	2920      	cmp	r1, #32
 800ab58:	d1ce      	bne.n	800aaf8 <_strtod_l+0x30>
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	e7c1      	b.n	800aae2 <_strtod_l+0x1a>
 800ab5e:	292d      	cmp	r1, #45	@ 0x2d
 800ab60:	d1ca      	bne.n	800aaf8 <_strtod_l+0x30>
 800ab62:	2101      	movs	r1, #1
 800ab64:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab66:	1c51      	adds	r1, r2, #1
 800ab68:	9119      	str	r1, [sp, #100]	@ 0x64
 800ab6a:	7852      	ldrb	r2, [r2, #1]
 800ab6c:	2a00      	cmp	r2, #0
 800ab6e:	d1c5      	bne.n	800aafc <_strtod_l+0x34>
 800ab70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ab72:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f040 8570 	bne.w	800b65a <_strtod_l+0xb92>
 800ab7a:	4652      	mov	r2, sl
 800ab7c:	465b      	mov	r3, fp
 800ab7e:	e7e5      	b.n	800ab4c <_strtod_l+0x84>
 800ab80:	2100      	movs	r1, #0
 800ab82:	e7ef      	b.n	800ab64 <_strtod_l+0x9c>
 800ab84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab86:	b13a      	cbz	r2, 800ab98 <_strtod_l+0xd0>
 800ab88:	2135      	movs	r1, #53	@ 0x35
 800ab8a:	a81c      	add	r0, sp, #112	@ 0x70
 800ab8c:	f003 fb7a 	bl	800e284 <__copybits>
 800ab90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab92:	9805      	ldr	r0, [sp, #20]
 800ab94:	f002 ff48 	bl	800da28 <_Bfree>
 800ab98:	3e01      	subs	r6, #1
 800ab9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ab9c:	2e04      	cmp	r6, #4
 800ab9e:	d806      	bhi.n	800abae <_strtod_l+0xe6>
 800aba0:	e8df f006 	tbb	[pc, r6]
 800aba4:	201d0314 	.word	0x201d0314
 800aba8:	14          	.byte	0x14
 800aba9:	00          	.byte	0x00
 800abaa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800abae:	05e1      	lsls	r1, r4, #23
 800abb0:	bf48      	it	mi
 800abb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800abb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abba:	0d1b      	lsrs	r3, r3, #20
 800abbc:	051b      	lsls	r3, r3, #20
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1bb      	bne.n	800ab3a <_strtod_l+0x72>
 800abc2:	f001 fc0d 	bl	800c3e0 <__errno>
 800abc6:	2322      	movs	r3, #34	@ 0x22
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	e7b6      	b.n	800ab3a <_strtod_l+0x72>
 800abcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800abd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800abd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800abd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800abdc:	e7e7      	b.n	800abae <_strtod_l+0xe6>
 800abde:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ad5c <_strtod_l+0x294>
 800abe2:	e7e4      	b.n	800abae <_strtod_l+0xe6>
 800abe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800abe8:	f04f 3aff 	mov.w	sl, #4294967295
 800abec:	e7df      	b.n	800abae <_strtod_l+0xe6>
 800abee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b30      	cmp	r3, #48	@ 0x30
 800abf8:	d0f9      	beq.n	800abee <_strtod_l+0x126>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d09d      	beq.n	800ab3a <_strtod_l+0x72>
 800abfe:	2301      	movs	r3, #1
 800ac00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ac06:	2300      	movs	r3, #0
 800ac08:	9308      	str	r3, [sp, #32]
 800ac0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac0c:	461f      	mov	r7, r3
 800ac0e:	220a      	movs	r2, #10
 800ac10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ac12:	7805      	ldrb	r5, [r0, #0]
 800ac14:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ac18:	b2d9      	uxtb	r1, r3
 800ac1a:	2909      	cmp	r1, #9
 800ac1c:	d928      	bls.n	800ac70 <_strtod_l+0x1a8>
 800ac1e:	494e      	ldr	r1, [pc, #312]	@ (800ad58 <_strtod_l+0x290>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	f001 fb6d 	bl	800c300 <strncmp>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d032      	beq.n	800ac90 <_strtod_l+0x1c8>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	4681      	mov	r9, r0
 800ac30:	463d      	mov	r5, r7
 800ac32:	4603      	mov	r3, r0
 800ac34:	2a65      	cmp	r2, #101	@ 0x65
 800ac36:	d001      	beq.n	800ac3c <_strtod_l+0x174>
 800ac38:	2a45      	cmp	r2, #69	@ 0x45
 800ac3a:	d114      	bne.n	800ac66 <_strtod_l+0x19e>
 800ac3c:	b91d      	cbnz	r5, 800ac46 <_strtod_l+0x17e>
 800ac3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac40:	4302      	orrs	r2, r0
 800ac42:	d095      	beq.n	800ab70 <_strtod_l+0xa8>
 800ac44:	2500      	movs	r5, #0
 800ac46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ac48:	1c62      	adds	r2, r4, #1
 800ac4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac4c:	7862      	ldrb	r2, [r4, #1]
 800ac4e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ac50:	d077      	beq.n	800ad42 <_strtod_l+0x27a>
 800ac52:	2a2d      	cmp	r2, #45	@ 0x2d
 800ac54:	d07b      	beq.n	800ad4e <_strtod_l+0x286>
 800ac56:	f04f 0c00 	mov.w	ip, #0
 800ac5a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ac5e:	2909      	cmp	r1, #9
 800ac60:	f240 8082 	bls.w	800ad68 <_strtod_l+0x2a0>
 800ac64:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac66:	f04f 0800 	mov.w	r8, #0
 800ac6a:	e0a2      	b.n	800adb2 <_strtod_l+0x2ea>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	e7c7      	b.n	800ac00 <_strtod_l+0x138>
 800ac70:	2f08      	cmp	r7, #8
 800ac72:	bfd5      	itete	le
 800ac74:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ac76:	9908      	ldrgt	r1, [sp, #32]
 800ac78:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac7c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ac80:	f100 0001 	add.w	r0, r0, #1
 800ac84:	bfd4      	ite	le
 800ac86:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ac88:	9308      	strgt	r3, [sp, #32]
 800ac8a:	3701      	adds	r7, #1
 800ac8c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac8e:	e7bf      	b.n	800ac10 <_strtod_l+0x148>
 800ac90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac96:	785a      	ldrb	r2, [r3, #1]
 800ac98:	b37f      	cbz	r7, 800acfa <_strtod_l+0x232>
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	463d      	mov	r5, r7
 800ac9e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aca2:	2b09      	cmp	r3, #9
 800aca4:	d912      	bls.n	800accc <_strtod_l+0x204>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e7c4      	b.n	800ac34 <_strtod_l+0x16c>
 800acaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	9219      	str	r2, [sp, #100]	@ 0x64
 800acb0:	785a      	ldrb	r2, [r3, #1]
 800acb2:	3001      	adds	r0, #1
 800acb4:	2a30      	cmp	r2, #48	@ 0x30
 800acb6:	d0f8      	beq.n	800acaa <_strtod_l+0x1e2>
 800acb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	f200 84d3 	bhi.w	800b668 <_strtod_l+0xba0>
 800acc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800acc6:	4681      	mov	r9, r0
 800acc8:	2000      	movs	r0, #0
 800acca:	4605      	mov	r5, r0
 800accc:	3a30      	subs	r2, #48	@ 0x30
 800acce:	f100 0301 	add.w	r3, r0, #1
 800acd2:	d02a      	beq.n	800ad2a <_strtod_l+0x262>
 800acd4:	4499      	add	r9, r3
 800acd6:	eb00 0c05 	add.w	ip, r0, r5
 800acda:	462b      	mov	r3, r5
 800acdc:	210a      	movs	r1, #10
 800acde:	4563      	cmp	r3, ip
 800ace0:	d10d      	bne.n	800acfe <_strtod_l+0x236>
 800ace2:	1c69      	adds	r1, r5, #1
 800ace4:	4401      	add	r1, r0
 800ace6:	4428      	add	r0, r5
 800ace8:	2808      	cmp	r0, #8
 800acea:	dc16      	bgt.n	800ad1a <_strtod_l+0x252>
 800acec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800acee:	230a      	movs	r3, #10
 800acf0:	fb03 2300 	mla	r3, r3, r0, r2
 800acf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf6:	2300      	movs	r3, #0
 800acf8:	e018      	b.n	800ad2c <_strtod_l+0x264>
 800acfa:	4638      	mov	r0, r7
 800acfc:	e7da      	b.n	800acb4 <_strtod_l+0x1ec>
 800acfe:	2b08      	cmp	r3, #8
 800ad00:	f103 0301 	add.w	r3, r3, #1
 800ad04:	dc03      	bgt.n	800ad0e <_strtod_l+0x246>
 800ad06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ad08:	434e      	muls	r6, r1
 800ad0a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ad0c:	e7e7      	b.n	800acde <_strtod_l+0x216>
 800ad0e:	2b10      	cmp	r3, #16
 800ad10:	bfde      	ittt	le
 800ad12:	9e08      	ldrle	r6, [sp, #32]
 800ad14:	434e      	mulle	r6, r1
 800ad16:	9608      	strle	r6, [sp, #32]
 800ad18:	e7e1      	b.n	800acde <_strtod_l+0x216>
 800ad1a:	280f      	cmp	r0, #15
 800ad1c:	dceb      	bgt.n	800acf6 <_strtod_l+0x22e>
 800ad1e:	9808      	ldr	r0, [sp, #32]
 800ad20:	230a      	movs	r3, #10
 800ad22:	fb03 2300 	mla	r3, r3, r0, r2
 800ad26:	9308      	str	r3, [sp, #32]
 800ad28:	e7e5      	b.n	800acf6 <_strtod_l+0x22e>
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad2e:	1c50      	adds	r0, r2, #1
 800ad30:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad32:	7852      	ldrb	r2, [r2, #1]
 800ad34:	4618      	mov	r0, r3
 800ad36:	460d      	mov	r5, r1
 800ad38:	e7b1      	b.n	800ac9e <_strtod_l+0x1d6>
 800ad3a:	f04f 0900 	mov.w	r9, #0
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e77d      	b.n	800ac3e <_strtod_l+0x176>
 800ad42:	f04f 0c00 	mov.w	ip, #0
 800ad46:	1ca2      	adds	r2, r4, #2
 800ad48:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad4a:	78a2      	ldrb	r2, [r4, #2]
 800ad4c:	e785      	b.n	800ac5a <_strtod_l+0x192>
 800ad4e:	f04f 0c01 	mov.w	ip, #1
 800ad52:	e7f8      	b.n	800ad46 <_strtod_l+0x27e>
 800ad54:	08010030 	.word	0x08010030
 800ad58:	08010018 	.word	0x08010018
 800ad5c:	7ff00000 	.word	0x7ff00000
 800ad60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad62:	1c51      	adds	r1, r2, #1
 800ad64:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad66:	7852      	ldrb	r2, [r2, #1]
 800ad68:	2a30      	cmp	r2, #48	@ 0x30
 800ad6a:	d0f9      	beq.n	800ad60 <_strtod_l+0x298>
 800ad6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ad70:	2908      	cmp	r1, #8
 800ad72:	f63f af78 	bhi.w	800ac66 <_strtod_l+0x19e>
 800ad76:	3a30      	subs	r2, #48	@ 0x30
 800ad78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad7e:	f04f 080a 	mov.w	r8, #10
 800ad82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad84:	1c56      	adds	r6, r2, #1
 800ad86:	9619      	str	r6, [sp, #100]	@ 0x64
 800ad88:	7852      	ldrb	r2, [r2, #1]
 800ad8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ad8e:	f1be 0f09 	cmp.w	lr, #9
 800ad92:	d939      	bls.n	800ae08 <_strtod_l+0x340>
 800ad94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ad96:	1a76      	subs	r6, r6, r1
 800ad98:	2e08      	cmp	r6, #8
 800ad9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ad9e:	dc03      	bgt.n	800ada8 <_strtod_l+0x2e0>
 800ada0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ada2:	4588      	cmp	r8, r1
 800ada4:	bfa8      	it	ge
 800ada6:	4688      	movge	r8, r1
 800ada8:	f1bc 0f00 	cmp.w	ip, #0
 800adac:	d001      	beq.n	800adb2 <_strtod_l+0x2ea>
 800adae:	f1c8 0800 	rsb	r8, r8, #0
 800adb2:	2d00      	cmp	r5, #0
 800adb4:	d14e      	bne.n	800ae54 <_strtod_l+0x38c>
 800adb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adb8:	4308      	orrs	r0, r1
 800adba:	f47f aebe 	bne.w	800ab3a <_strtod_l+0x72>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f47f aed6 	bne.w	800ab70 <_strtod_l+0xa8>
 800adc4:	2a69      	cmp	r2, #105	@ 0x69
 800adc6:	d028      	beq.n	800ae1a <_strtod_l+0x352>
 800adc8:	dc25      	bgt.n	800ae16 <_strtod_l+0x34e>
 800adca:	2a49      	cmp	r2, #73	@ 0x49
 800adcc:	d025      	beq.n	800ae1a <_strtod_l+0x352>
 800adce:	2a4e      	cmp	r2, #78	@ 0x4e
 800add0:	f47f aece 	bne.w	800ab70 <_strtod_l+0xa8>
 800add4:	499b      	ldr	r1, [pc, #620]	@ (800b044 <_strtod_l+0x57c>)
 800add6:	a819      	add	r0, sp, #100	@ 0x64
 800add8:	f002 fc6e 	bl	800d6b8 <__match>
 800addc:	2800      	cmp	r0, #0
 800adde:	f43f aec7 	beq.w	800ab70 <_strtod_l+0xa8>
 800ade2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b28      	cmp	r3, #40	@ 0x28
 800ade8:	d12e      	bne.n	800ae48 <_strtod_l+0x380>
 800adea:	4997      	ldr	r1, [pc, #604]	@ (800b048 <_strtod_l+0x580>)
 800adec:	aa1c      	add	r2, sp, #112	@ 0x70
 800adee:	a819      	add	r0, sp, #100	@ 0x64
 800adf0:	f002 fc76 	bl	800d6e0 <__hexnan>
 800adf4:	2805      	cmp	r0, #5
 800adf6:	d127      	bne.n	800ae48 <_strtod_l+0x380>
 800adf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800adfa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800adfe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae06:	e698      	b.n	800ab3a <_strtod_l+0x72>
 800ae08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ae0a:	fb08 2101 	mla	r1, r8, r1, r2
 800ae0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ae12:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae14:	e7b5      	b.n	800ad82 <_strtod_l+0x2ba>
 800ae16:	2a6e      	cmp	r2, #110	@ 0x6e
 800ae18:	e7da      	b.n	800add0 <_strtod_l+0x308>
 800ae1a:	498c      	ldr	r1, [pc, #560]	@ (800b04c <_strtod_l+0x584>)
 800ae1c:	a819      	add	r0, sp, #100	@ 0x64
 800ae1e:	f002 fc4b 	bl	800d6b8 <__match>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f43f aea4 	beq.w	800ab70 <_strtod_l+0xa8>
 800ae28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae2a:	4989      	ldr	r1, [pc, #548]	@ (800b050 <_strtod_l+0x588>)
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	a819      	add	r0, sp, #100	@ 0x64
 800ae30:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae32:	f002 fc41 	bl	800d6b8 <__match>
 800ae36:	b910      	cbnz	r0, 800ae3e <_strtod_l+0x376>
 800ae38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b060 <_strtod_l+0x598>
 800ae42:	f04f 0a00 	mov.w	sl, #0
 800ae46:	e678      	b.n	800ab3a <_strtod_l+0x72>
 800ae48:	4882      	ldr	r0, [pc, #520]	@ (800b054 <_strtod_l+0x58c>)
 800ae4a:	f001 fb0d 	bl	800c468 <nan>
 800ae4e:	ec5b ab10 	vmov	sl, fp, d0
 800ae52:	e672      	b.n	800ab3a <_strtod_l+0x72>
 800ae54:	eba8 0309 	sub.w	r3, r8, r9
 800ae58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ae5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae5c:	2f00      	cmp	r7, #0
 800ae5e:	bf08      	it	eq
 800ae60:	462f      	moveq	r7, r5
 800ae62:	2d10      	cmp	r5, #16
 800ae64:	462c      	mov	r4, r5
 800ae66:	bfa8      	it	ge
 800ae68:	2410      	movge	r4, #16
 800ae6a:	f7f5 fb6b 	bl	8000544 <__aeabi_ui2d>
 800ae6e:	2d09      	cmp	r5, #9
 800ae70:	4682      	mov	sl, r0
 800ae72:	468b      	mov	fp, r1
 800ae74:	dc13      	bgt.n	800ae9e <_strtod_l+0x3d6>
 800ae76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f43f ae5e 	beq.w	800ab3a <_strtod_l+0x72>
 800ae7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae80:	dd78      	ble.n	800af74 <_strtod_l+0x4ac>
 800ae82:	2b16      	cmp	r3, #22
 800ae84:	dc5f      	bgt.n	800af46 <_strtod_l+0x47e>
 800ae86:	4974      	ldr	r1, [pc, #464]	@ (800b058 <_strtod_l+0x590>)
 800ae88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ae8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae90:	4652      	mov	r2, sl
 800ae92:	465b      	mov	r3, fp
 800ae94:	f7f5 fbd0 	bl	8000638 <__aeabi_dmul>
 800ae98:	4682      	mov	sl, r0
 800ae9a:	468b      	mov	fp, r1
 800ae9c:	e64d      	b.n	800ab3a <_strtod_l+0x72>
 800ae9e:	4b6e      	ldr	r3, [pc, #440]	@ (800b058 <_strtod_l+0x590>)
 800aea0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aea4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aea8:	f7f5 fbc6 	bl	8000638 <__aeabi_dmul>
 800aeac:	4682      	mov	sl, r0
 800aeae:	9808      	ldr	r0, [sp, #32]
 800aeb0:	468b      	mov	fp, r1
 800aeb2:	f7f5 fb47 	bl	8000544 <__aeabi_ui2d>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4650      	mov	r0, sl
 800aebc:	4659      	mov	r1, fp
 800aebe:	f7f5 fa05 	bl	80002cc <__adddf3>
 800aec2:	2d0f      	cmp	r5, #15
 800aec4:	4682      	mov	sl, r0
 800aec6:	468b      	mov	fp, r1
 800aec8:	ddd5      	ble.n	800ae76 <_strtod_l+0x3ae>
 800aeca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aecc:	1b2c      	subs	r4, r5, r4
 800aece:	441c      	add	r4, r3
 800aed0:	2c00      	cmp	r4, #0
 800aed2:	f340 8096 	ble.w	800b002 <_strtod_l+0x53a>
 800aed6:	f014 030f 	ands.w	r3, r4, #15
 800aeda:	d00a      	beq.n	800aef2 <_strtod_l+0x42a>
 800aedc:	495e      	ldr	r1, [pc, #376]	@ (800b058 <_strtod_l+0x590>)
 800aede:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aee2:	4652      	mov	r2, sl
 800aee4:	465b      	mov	r3, fp
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	f7f5 fba5 	bl	8000638 <__aeabi_dmul>
 800aeee:	4682      	mov	sl, r0
 800aef0:	468b      	mov	fp, r1
 800aef2:	f034 040f 	bics.w	r4, r4, #15
 800aef6:	d073      	beq.n	800afe0 <_strtod_l+0x518>
 800aef8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aefc:	dd48      	ble.n	800af90 <_strtod_l+0x4c8>
 800aefe:	2400      	movs	r4, #0
 800af00:	46a0      	mov	r8, r4
 800af02:	940a      	str	r4, [sp, #40]	@ 0x28
 800af04:	46a1      	mov	r9, r4
 800af06:	9a05      	ldr	r2, [sp, #20]
 800af08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b060 <_strtod_l+0x598>
 800af0c:	2322      	movs	r3, #34	@ 0x22
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	f43f ae0f 	beq.w	800ab3a <_strtod_l+0x72>
 800af1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af1e:	9805      	ldr	r0, [sp, #20]
 800af20:	f002 fd82 	bl	800da28 <_Bfree>
 800af24:	9805      	ldr	r0, [sp, #20]
 800af26:	4649      	mov	r1, r9
 800af28:	f002 fd7e 	bl	800da28 <_Bfree>
 800af2c:	9805      	ldr	r0, [sp, #20]
 800af2e:	4641      	mov	r1, r8
 800af30:	f002 fd7a 	bl	800da28 <_Bfree>
 800af34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	f002 fd76 	bl	800da28 <_Bfree>
 800af3c:	9805      	ldr	r0, [sp, #20]
 800af3e:	4621      	mov	r1, r4
 800af40:	f002 fd72 	bl	800da28 <_Bfree>
 800af44:	e5f9      	b.n	800ab3a <_strtod_l+0x72>
 800af46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800af4c:	4293      	cmp	r3, r2
 800af4e:	dbbc      	blt.n	800aeca <_strtod_l+0x402>
 800af50:	4c41      	ldr	r4, [pc, #260]	@ (800b058 <_strtod_l+0x590>)
 800af52:	f1c5 050f 	rsb	r5, r5, #15
 800af56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af5a:	4652      	mov	r2, sl
 800af5c:	465b      	mov	r3, fp
 800af5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af62:	f7f5 fb69 	bl	8000638 <__aeabi_dmul>
 800af66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af68:	1b5d      	subs	r5, r3, r5
 800af6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af72:	e78f      	b.n	800ae94 <_strtod_l+0x3cc>
 800af74:	3316      	adds	r3, #22
 800af76:	dba8      	blt.n	800aeca <_strtod_l+0x402>
 800af78:	4b37      	ldr	r3, [pc, #220]	@ (800b058 <_strtod_l+0x590>)
 800af7a:	eba9 0808 	sub.w	r8, r9, r8
 800af7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800af82:	e9d8 2300 	ldrd	r2, r3, [r8]
 800af86:	4650      	mov	r0, sl
 800af88:	4659      	mov	r1, fp
 800af8a:	f7f5 fc7f 	bl	800088c <__aeabi_ddiv>
 800af8e:	e783      	b.n	800ae98 <_strtod_l+0x3d0>
 800af90:	4b32      	ldr	r3, [pc, #200]	@ (800b05c <_strtod_l+0x594>)
 800af92:	9308      	str	r3, [sp, #32]
 800af94:	2300      	movs	r3, #0
 800af96:	1124      	asrs	r4, r4, #4
 800af98:	4650      	mov	r0, sl
 800af9a:	4659      	mov	r1, fp
 800af9c:	461e      	mov	r6, r3
 800af9e:	2c01      	cmp	r4, #1
 800afa0:	dc21      	bgt.n	800afe6 <_strtod_l+0x51e>
 800afa2:	b10b      	cbz	r3, 800afa8 <_strtod_l+0x4e0>
 800afa4:	4682      	mov	sl, r0
 800afa6:	468b      	mov	fp, r1
 800afa8:	492c      	ldr	r1, [pc, #176]	@ (800b05c <_strtod_l+0x594>)
 800afaa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800afae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800afb2:	4652      	mov	r2, sl
 800afb4:	465b      	mov	r3, fp
 800afb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afba:	f7f5 fb3d 	bl	8000638 <__aeabi_dmul>
 800afbe:	4b28      	ldr	r3, [pc, #160]	@ (800b060 <_strtod_l+0x598>)
 800afc0:	460a      	mov	r2, r1
 800afc2:	400b      	ands	r3, r1
 800afc4:	4927      	ldr	r1, [pc, #156]	@ (800b064 <_strtod_l+0x59c>)
 800afc6:	428b      	cmp	r3, r1
 800afc8:	4682      	mov	sl, r0
 800afca:	d898      	bhi.n	800aefe <_strtod_l+0x436>
 800afcc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800afd0:	428b      	cmp	r3, r1
 800afd2:	bf86      	itte	hi
 800afd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b068 <_strtod_l+0x5a0>
 800afd8:	f04f 3aff 	movhi.w	sl, #4294967295
 800afdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800afe0:	2300      	movs	r3, #0
 800afe2:	9308      	str	r3, [sp, #32]
 800afe4:	e07a      	b.n	800b0dc <_strtod_l+0x614>
 800afe6:	07e2      	lsls	r2, r4, #31
 800afe8:	d505      	bpl.n	800aff6 <_strtod_l+0x52e>
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 fb22 	bl	8000638 <__aeabi_dmul>
 800aff4:	2301      	movs	r3, #1
 800aff6:	9a08      	ldr	r2, [sp, #32]
 800aff8:	3208      	adds	r2, #8
 800affa:	3601      	adds	r6, #1
 800affc:	1064      	asrs	r4, r4, #1
 800affe:	9208      	str	r2, [sp, #32]
 800b000:	e7cd      	b.n	800af9e <_strtod_l+0x4d6>
 800b002:	d0ed      	beq.n	800afe0 <_strtod_l+0x518>
 800b004:	4264      	negs	r4, r4
 800b006:	f014 020f 	ands.w	r2, r4, #15
 800b00a:	d00a      	beq.n	800b022 <_strtod_l+0x55a>
 800b00c:	4b12      	ldr	r3, [pc, #72]	@ (800b058 <_strtod_l+0x590>)
 800b00e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b012:	4650      	mov	r0, sl
 800b014:	4659      	mov	r1, fp
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 fc37 	bl	800088c <__aeabi_ddiv>
 800b01e:	4682      	mov	sl, r0
 800b020:	468b      	mov	fp, r1
 800b022:	1124      	asrs	r4, r4, #4
 800b024:	d0dc      	beq.n	800afe0 <_strtod_l+0x518>
 800b026:	2c1f      	cmp	r4, #31
 800b028:	dd20      	ble.n	800b06c <_strtod_l+0x5a4>
 800b02a:	2400      	movs	r4, #0
 800b02c:	46a0      	mov	r8, r4
 800b02e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b030:	46a1      	mov	r9, r4
 800b032:	9a05      	ldr	r2, [sp, #20]
 800b034:	2322      	movs	r3, #34	@ 0x22
 800b036:	f04f 0a00 	mov.w	sl, #0
 800b03a:	f04f 0b00 	mov.w	fp, #0
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	e768      	b.n	800af14 <_strtod_l+0x44c>
 800b042:	bf00      	nop
 800b044:	0801017e 	.word	0x0801017e
 800b048:	0801001c 	.word	0x0801001c
 800b04c:	08010176 	.word	0x08010176
 800b050:	080101b0 	.word	0x080101b0
 800b054:	0801043c 	.word	0x0801043c
 800b058:	08010328 	.word	0x08010328
 800b05c:	08010300 	.word	0x08010300
 800b060:	7ff00000 	.word	0x7ff00000
 800b064:	7ca00000 	.word	0x7ca00000
 800b068:	7fefffff 	.word	0x7fefffff
 800b06c:	f014 0310 	ands.w	r3, r4, #16
 800b070:	bf18      	it	ne
 800b072:	236a      	movne	r3, #106	@ 0x6a
 800b074:	4ea9      	ldr	r6, [pc, #676]	@ (800b31c <_strtod_l+0x854>)
 800b076:	9308      	str	r3, [sp, #32]
 800b078:	4650      	mov	r0, sl
 800b07a:	4659      	mov	r1, fp
 800b07c:	2300      	movs	r3, #0
 800b07e:	07e2      	lsls	r2, r4, #31
 800b080:	d504      	bpl.n	800b08c <_strtod_l+0x5c4>
 800b082:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b086:	f7f5 fad7 	bl	8000638 <__aeabi_dmul>
 800b08a:	2301      	movs	r3, #1
 800b08c:	1064      	asrs	r4, r4, #1
 800b08e:	f106 0608 	add.w	r6, r6, #8
 800b092:	d1f4      	bne.n	800b07e <_strtod_l+0x5b6>
 800b094:	b10b      	cbz	r3, 800b09a <_strtod_l+0x5d2>
 800b096:	4682      	mov	sl, r0
 800b098:	468b      	mov	fp, r1
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	b1b3      	cbz	r3, 800b0cc <_strtod_l+0x604>
 800b09e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	dd0f      	ble.n	800b0cc <_strtod_l+0x604>
 800b0ac:	2b1f      	cmp	r3, #31
 800b0ae:	dd55      	ble.n	800b15c <_strtod_l+0x694>
 800b0b0:	2b34      	cmp	r3, #52	@ 0x34
 800b0b2:	bfde      	ittt	le
 800b0b4:	f04f 33ff 	movle.w	r3, #4294967295
 800b0b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b0bc:	4093      	lslle	r3, r2
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	bfcc      	ite	gt
 800b0c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b0c8:	ea03 0b01 	andle.w	fp, r3, r1
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	f7f5 fd18 	bl	8000b08 <__aeabi_dcmpeq>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d1a6      	bne.n	800b02a <_strtod_l+0x562>
 800b0dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b0e2:	9805      	ldr	r0, [sp, #20]
 800b0e4:	462b      	mov	r3, r5
 800b0e6:	463a      	mov	r2, r7
 800b0e8:	f002 fd06 	bl	800daf8 <__s2b>
 800b0ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	f43f af05 	beq.w	800aefe <_strtod_l+0x436>
 800b0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0f6:	2a00      	cmp	r2, #0
 800b0f8:	eba9 0308 	sub.w	r3, r9, r8
 800b0fc:	bfa8      	it	ge
 800b0fe:	2300      	movge	r3, #0
 800b100:	9312      	str	r3, [sp, #72]	@ 0x48
 800b102:	2400      	movs	r4, #0
 800b104:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b108:	9316      	str	r3, [sp, #88]	@ 0x58
 800b10a:	46a0      	mov	r8, r4
 800b10c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b10e:	9805      	ldr	r0, [sp, #20]
 800b110:	6859      	ldr	r1, [r3, #4]
 800b112:	f002 fc49 	bl	800d9a8 <_Balloc>
 800b116:	4681      	mov	r9, r0
 800b118:	2800      	cmp	r0, #0
 800b11a:	f43f aef4 	beq.w	800af06 <_strtod_l+0x43e>
 800b11e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	3202      	adds	r2, #2
 800b124:	f103 010c 	add.w	r1, r3, #12
 800b128:	0092      	lsls	r2, r2, #2
 800b12a:	300c      	adds	r0, #12
 800b12c:	f001 f98d 	bl	800c44a <memcpy>
 800b130:	ec4b ab10 	vmov	d0, sl, fp
 800b134:	9805      	ldr	r0, [sp, #20]
 800b136:	aa1c      	add	r2, sp, #112	@ 0x70
 800b138:	a91b      	add	r1, sp, #108	@ 0x6c
 800b13a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b13e:	f003 f817 	bl	800e170 <__d2b>
 800b142:	901a      	str	r0, [sp, #104]	@ 0x68
 800b144:	2800      	cmp	r0, #0
 800b146:	f43f aede 	beq.w	800af06 <_strtod_l+0x43e>
 800b14a:	9805      	ldr	r0, [sp, #20]
 800b14c:	2101      	movs	r1, #1
 800b14e:	f002 fd69 	bl	800dc24 <__i2b>
 800b152:	4680      	mov	r8, r0
 800b154:	b948      	cbnz	r0, 800b16a <_strtod_l+0x6a2>
 800b156:	f04f 0800 	mov.w	r8, #0
 800b15a:	e6d4      	b.n	800af06 <_strtod_l+0x43e>
 800b15c:	f04f 32ff 	mov.w	r2, #4294967295
 800b160:	fa02 f303 	lsl.w	r3, r2, r3
 800b164:	ea03 0a0a 	and.w	sl, r3, sl
 800b168:	e7b0      	b.n	800b0cc <_strtod_l+0x604>
 800b16a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b16c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b16e:	2d00      	cmp	r5, #0
 800b170:	bfab      	itete	ge
 800b172:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b174:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b176:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b178:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b17a:	bfac      	ite	ge
 800b17c:	18ef      	addge	r7, r5, r3
 800b17e:	1b5e      	sublt	r6, r3, r5
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	1aed      	subs	r5, r5, r3
 800b184:	4415      	add	r5, r2
 800b186:	4b66      	ldr	r3, [pc, #408]	@ (800b320 <_strtod_l+0x858>)
 800b188:	3d01      	subs	r5, #1
 800b18a:	429d      	cmp	r5, r3
 800b18c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b190:	da50      	bge.n	800b234 <_strtod_l+0x76c>
 800b192:	1b5b      	subs	r3, r3, r5
 800b194:	2b1f      	cmp	r3, #31
 800b196:	eba2 0203 	sub.w	r2, r2, r3
 800b19a:	f04f 0101 	mov.w	r1, #1
 800b19e:	dc3d      	bgt.n	800b21c <_strtod_l+0x754>
 800b1a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1aa:	18bd      	adds	r5, r7, r2
 800b1ac:	9b08      	ldr	r3, [sp, #32]
 800b1ae:	42af      	cmp	r7, r5
 800b1b0:	4416      	add	r6, r2
 800b1b2:	441e      	add	r6, r3
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	bfa8      	it	ge
 800b1b8:	462b      	movge	r3, r5
 800b1ba:	42b3      	cmp	r3, r6
 800b1bc:	bfa8      	it	ge
 800b1be:	4633      	movge	r3, r6
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfc2      	ittt	gt
 800b1c4:	1aed      	subgt	r5, r5, r3
 800b1c6:	1af6      	subgt	r6, r6, r3
 800b1c8:	1aff      	subgt	r7, r7, r3
 800b1ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dd16      	ble.n	800b1fe <_strtod_l+0x736>
 800b1d0:	4641      	mov	r1, r8
 800b1d2:	9805      	ldr	r0, [sp, #20]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f002 fde5 	bl	800dda4 <__pow5mult>
 800b1da:	4680      	mov	r8, r0
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d0ba      	beq.n	800b156 <_strtod_l+0x68e>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b1e4:	9805      	ldr	r0, [sp, #20]
 800b1e6:	f002 fd33 	bl	800dc50 <__multiply>
 800b1ea:	900e      	str	r0, [sp, #56]	@ 0x38
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f ae8a 	beq.w	800af06 <_strtod_l+0x43e>
 800b1f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1f4:	9805      	ldr	r0, [sp, #20]
 800b1f6:	f002 fc17 	bl	800da28 <_Bfree>
 800b1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	dc1d      	bgt.n	800b23e <_strtod_l+0x776>
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	2b00      	cmp	r3, #0
 800b206:	dd23      	ble.n	800b250 <_strtod_l+0x788>
 800b208:	4649      	mov	r1, r9
 800b20a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b20c:	9805      	ldr	r0, [sp, #20]
 800b20e:	f002 fdc9 	bl	800dda4 <__pow5mult>
 800b212:	4681      	mov	r9, r0
 800b214:	b9e0      	cbnz	r0, 800b250 <_strtod_l+0x788>
 800b216:	f04f 0900 	mov.w	r9, #0
 800b21a:	e674      	b.n	800af06 <_strtod_l+0x43e>
 800b21c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b220:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b224:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b228:	35e2      	adds	r5, #226	@ 0xe2
 800b22a:	fa01 f305 	lsl.w	r3, r1, r5
 800b22e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b230:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b232:	e7ba      	b.n	800b1aa <_strtod_l+0x6e2>
 800b234:	2300      	movs	r3, #0
 800b236:	9310      	str	r3, [sp, #64]	@ 0x40
 800b238:	2301      	movs	r3, #1
 800b23a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b23c:	e7b5      	b.n	800b1aa <_strtod_l+0x6e2>
 800b23e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b240:	9805      	ldr	r0, [sp, #20]
 800b242:	462a      	mov	r2, r5
 800b244:	f002 fe08 	bl	800de58 <__lshift>
 800b248:	901a      	str	r0, [sp, #104]	@ 0x68
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d1d9      	bne.n	800b202 <_strtod_l+0x73a>
 800b24e:	e65a      	b.n	800af06 <_strtod_l+0x43e>
 800b250:	2e00      	cmp	r6, #0
 800b252:	dd07      	ble.n	800b264 <_strtod_l+0x79c>
 800b254:	4649      	mov	r1, r9
 800b256:	9805      	ldr	r0, [sp, #20]
 800b258:	4632      	mov	r2, r6
 800b25a:	f002 fdfd 	bl	800de58 <__lshift>
 800b25e:	4681      	mov	r9, r0
 800b260:	2800      	cmp	r0, #0
 800b262:	d0d8      	beq.n	800b216 <_strtod_l+0x74e>
 800b264:	2f00      	cmp	r7, #0
 800b266:	dd08      	ble.n	800b27a <_strtod_l+0x7b2>
 800b268:	4641      	mov	r1, r8
 800b26a:	9805      	ldr	r0, [sp, #20]
 800b26c:	463a      	mov	r2, r7
 800b26e:	f002 fdf3 	bl	800de58 <__lshift>
 800b272:	4680      	mov	r8, r0
 800b274:	2800      	cmp	r0, #0
 800b276:	f43f ae46 	beq.w	800af06 <_strtod_l+0x43e>
 800b27a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b27c:	9805      	ldr	r0, [sp, #20]
 800b27e:	464a      	mov	r2, r9
 800b280:	f002 fe72 	bl	800df68 <__mdiff>
 800b284:	4604      	mov	r4, r0
 800b286:	2800      	cmp	r0, #0
 800b288:	f43f ae3d 	beq.w	800af06 <_strtod_l+0x43e>
 800b28c:	68c3      	ldr	r3, [r0, #12]
 800b28e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b290:	2300      	movs	r3, #0
 800b292:	60c3      	str	r3, [r0, #12]
 800b294:	4641      	mov	r1, r8
 800b296:	f002 fe4b 	bl	800df30 <__mcmp>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	da46      	bge.n	800b32c <_strtod_l+0x864>
 800b29e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b2a4:	d16c      	bne.n	800b380 <_strtod_l+0x8b8>
 800b2a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d168      	bne.n	800b380 <_strtod_l+0x8b8>
 800b2ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2b2:	0d1b      	lsrs	r3, r3, #20
 800b2b4:	051b      	lsls	r3, r3, #20
 800b2b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2ba:	d961      	bls.n	800b380 <_strtod_l+0x8b8>
 800b2bc:	6963      	ldr	r3, [r4, #20]
 800b2be:	b913      	cbnz	r3, 800b2c6 <_strtod_l+0x7fe>
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	dd5c      	ble.n	800b380 <_strtod_l+0x8b8>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	9805      	ldr	r0, [sp, #20]
 800b2cc:	f002 fdc4 	bl	800de58 <__lshift>
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	f002 fe2c 	bl	800df30 <__mcmp>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	dd51      	ble.n	800b380 <_strtod_l+0x8b8>
 800b2dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2e0:	9a08      	ldr	r2, [sp, #32]
 800b2e2:	0d1b      	lsrs	r3, r3, #20
 800b2e4:	051b      	lsls	r3, r3, #20
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	d06b      	beq.n	800b3c2 <_strtod_l+0x8fa>
 800b2ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b2ee:	d868      	bhi.n	800b3c2 <_strtod_l+0x8fa>
 800b2f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b2f4:	f67f ae9d 	bls.w	800b032 <_strtod_l+0x56a>
 800b2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b324 <_strtod_l+0x85c>)
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	4659      	mov	r1, fp
 800b2fe:	2200      	movs	r2, #0
 800b300:	f7f5 f99a 	bl	8000638 <__aeabi_dmul>
 800b304:	4b08      	ldr	r3, [pc, #32]	@ (800b328 <_strtod_l+0x860>)
 800b306:	400b      	ands	r3, r1
 800b308:	4682      	mov	sl, r0
 800b30a:	468b      	mov	fp, r1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f47f ae05 	bne.w	800af1c <_strtod_l+0x454>
 800b312:	9a05      	ldr	r2, [sp, #20]
 800b314:	2322      	movs	r3, #34	@ 0x22
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	e600      	b.n	800af1c <_strtod_l+0x454>
 800b31a:	bf00      	nop
 800b31c:	08010048 	.word	0x08010048
 800b320:	fffffc02 	.word	0xfffffc02
 800b324:	39500000 	.word	0x39500000
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b330:	d165      	bne.n	800b3fe <_strtod_l+0x936>
 800b332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b334:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b338:	b35a      	cbz	r2, 800b392 <_strtod_l+0x8ca>
 800b33a:	4a9f      	ldr	r2, [pc, #636]	@ (800b5b8 <_strtod_l+0xaf0>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d12b      	bne.n	800b398 <_strtod_l+0x8d0>
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	4651      	mov	r1, sl
 800b344:	b303      	cbz	r3, 800b388 <_strtod_l+0x8c0>
 800b346:	4b9d      	ldr	r3, [pc, #628]	@ (800b5bc <_strtod_l+0xaf4>)
 800b348:	465a      	mov	r2, fp
 800b34a:	4013      	ands	r3, r2
 800b34c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	d81b      	bhi.n	800b38e <_strtod_l+0x8c6>
 800b356:	0d1b      	lsrs	r3, r3, #20
 800b358:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b35c:	fa02 f303 	lsl.w	r3, r2, r3
 800b360:	4299      	cmp	r1, r3
 800b362:	d119      	bne.n	800b398 <_strtod_l+0x8d0>
 800b364:	4b96      	ldr	r3, [pc, #600]	@ (800b5c0 <_strtod_l+0xaf8>)
 800b366:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b368:	429a      	cmp	r2, r3
 800b36a:	d102      	bne.n	800b372 <_strtod_l+0x8aa>
 800b36c:	3101      	adds	r1, #1
 800b36e:	f43f adca 	beq.w	800af06 <_strtod_l+0x43e>
 800b372:	4b92      	ldr	r3, [pc, #584]	@ (800b5bc <_strtod_l+0xaf4>)
 800b374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b376:	401a      	ands	r2, r3
 800b378:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b37c:	f04f 0a00 	mov.w	sl, #0
 800b380:	9b08      	ldr	r3, [sp, #32]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1b8      	bne.n	800b2f8 <_strtod_l+0x830>
 800b386:	e5c9      	b.n	800af1c <_strtod_l+0x454>
 800b388:	f04f 33ff 	mov.w	r3, #4294967295
 800b38c:	e7e8      	b.n	800b360 <_strtod_l+0x898>
 800b38e:	4613      	mov	r3, r2
 800b390:	e7e6      	b.n	800b360 <_strtod_l+0x898>
 800b392:	ea53 030a 	orrs.w	r3, r3, sl
 800b396:	d0a1      	beq.n	800b2dc <_strtod_l+0x814>
 800b398:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b39a:	b1db      	cbz	r3, 800b3d4 <_strtod_l+0x90c>
 800b39c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b39e:	4213      	tst	r3, r2
 800b3a0:	d0ee      	beq.n	800b380 <_strtod_l+0x8b8>
 800b3a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3a4:	9a08      	ldr	r2, [sp, #32]
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	b1bb      	cbz	r3, 800b3dc <_strtod_l+0x914>
 800b3ac:	f7ff fb6d 	bl	800aa8a <sulp>
 800b3b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3b4:	ec53 2b10 	vmov	r2, r3, d0
 800b3b8:	f7f4 ff88 	bl	80002cc <__adddf3>
 800b3bc:	4682      	mov	sl, r0
 800b3be:	468b      	mov	fp, r1
 800b3c0:	e7de      	b.n	800b380 <_strtod_l+0x8b8>
 800b3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b3c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b3ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b3ce:	f04f 3aff 	mov.w	sl, #4294967295
 800b3d2:	e7d5      	b.n	800b380 <_strtod_l+0x8b8>
 800b3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b3d6:	ea13 0f0a 	tst.w	r3, sl
 800b3da:	e7e1      	b.n	800b3a0 <_strtod_l+0x8d8>
 800b3dc:	f7ff fb55 	bl	800aa8a <sulp>
 800b3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3e4:	ec53 2b10 	vmov	r2, r3, d0
 800b3e8:	f7f4 ff6e 	bl	80002c8 <__aeabi_dsub>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	468b      	mov	fp, r1
 800b3f4:	f7f5 fb88 	bl	8000b08 <__aeabi_dcmpeq>
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d0c1      	beq.n	800b380 <_strtod_l+0x8b8>
 800b3fc:	e619      	b.n	800b032 <_strtod_l+0x56a>
 800b3fe:	4641      	mov	r1, r8
 800b400:	4620      	mov	r0, r4
 800b402:	f002 ff0d 	bl	800e220 <__ratio>
 800b406:	ec57 6b10 	vmov	r6, r7, d0
 800b40a:	2200      	movs	r2, #0
 800b40c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb8c 	bl	8000b30 <__aeabi_dcmple>
 800b418:	2800      	cmp	r0, #0
 800b41a:	d06f      	beq.n	800b4fc <_strtod_l+0xa34>
 800b41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d17a      	bne.n	800b518 <_strtod_l+0xa50>
 800b422:	f1ba 0f00 	cmp.w	sl, #0
 800b426:	d158      	bne.n	800b4da <_strtod_l+0xa12>
 800b428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b42a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d15a      	bne.n	800b4e8 <_strtod_l+0xa20>
 800b432:	4b64      	ldr	r3, [pc, #400]	@ (800b5c4 <_strtod_l+0xafc>)
 800b434:	2200      	movs	r2, #0
 800b436:	4630      	mov	r0, r6
 800b438:	4639      	mov	r1, r7
 800b43a:	f7f5 fb6f 	bl	8000b1c <__aeabi_dcmplt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d159      	bne.n	800b4f6 <_strtod_l+0xa2e>
 800b442:	4630      	mov	r0, r6
 800b444:	4639      	mov	r1, r7
 800b446:	4b60      	ldr	r3, [pc, #384]	@ (800b5c8 <_strtod_l+0xb00>)
 800b448:	2200      	movs	r2, #0
 800b44a:	f7f5 f8f5 	bl	8000638 <__aeabi_dmul>
 800b44e:	4606      	mov	r6, r0
 800b450:	460f      	mov	r7, r1
 800b452:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b456:	9606      	str	r6, [sp, #24]
 800b458:	9307      	str	r3, [sp, #28]
 800b45a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b45e:	4d57      	ldr	r5, [pc, #348]	@ (800b5bc <_strtod_l+0xaf4>)
 800b460:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b466:	401d      	ands	r5, r3
 800b468:	4b58      	ldr	r3, [pc, #352]	@ (800b5cc <_strtod_l+0xb04>)
 800b46a:	429d      	cmp	r5, r3
 800b46c:	f040 80b2 	bne.w	800b5d4 <_strtod_l+0xb0c>
 800b470:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b472:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b476:	ec4b ab10 	vmov	d0, sl, fp
 800b47a:	f002 fe09 	bl	800e090 <__ulp>
 800b47e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b482:	ec51 0b10 	vmov	r0, r1, d0
 800b486:	f7f5 f8d7 	bl	8000638 <__aeabi_dmul>
 800b48a:	4652      	mov	r2, sl
 800b48c:	465b      	mov	r3, fp
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	460b      	mov	r3, r1
 800b494:	4949      	ldr	r1, [pc, #292]	@ (800b5bc <_strtod_l+0xaf4>)
 800b496:	4a4e      	ldr	r2, [pc, #312]	@ (800b5d0 <_strtod_l+0xb08>)
 800b498:	4019      	ands	r1, r3
 800b49a:	4291      	cmp	r1, r2
 800b49c:	4682      	mov	sl, r0
 800b49e:	d942      	bls.n	800b526 <_strtod_l+0xa5e>
 800b4a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b4a2:	4b47      	ldr	r3, [pc, #284]	@ (800b5c0 <_strtod_l+0xaf8>)
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d103      	bne.n	800b4b0 <_strtod_l+0x9e8>
 800b4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	f43f ad2b 	beq.w	800af06 <_strtod_l+0x43e>
 800b4b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b5c0 <_strtod_l+0xaf8>
 800b4b4:	f04f 3aff 	mov.w	sl, #4294967295
 800b4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4ba:	9805      	ldr	r0, [sp, #20]
 800b4bc:	f002 fab4 	bl	800da28 <_Bfree>
 800b4c0:	9805      	ldr	r0, [sp, #20]
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	f002 fab0 	bl	800da28 <_Bfree>
 800b4c8:	9805      	ldr	r0, [sp, #20]
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	f002 faac 	bl	800da28 <_Bfree>
 800b4d0:	9805      	ldr	r0, [sp, #20]
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	f002 faa8 	bl	800da28 <_Bfree>
 800b4d8:	e618      	b.n	800b10c <_strtod_l+0x644>
 800b4da:	f1ba 0f01 	cmp.w	sl, #1
 800b4de:	d103      	bne.n	800b4e8 <_strtod_l+0xa20>
 800b4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f43f ada5 	beq.w	800b032 <_strtod_l+0x56a>
 800b4e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b598 <_strtod_l+0xad0>
 800b4ec:	4f35      	ldr	r7, [pc, #212]	@ (800b5c4 <_strtod_l+0xafc>)
 800b4ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4f2:	2600      	movs	r6, #0
 800b4f4:	e7b1      	b.n	800b45a <_strtod_l+0x992>
 800b4f6:	4f34      	ldr	r7, [pc, #208]	@ (800b5c8 <_strtod_l+0xb00>)
 800b4f8:	2600      	movs	r6, #0
 800b4fa:	e7aa      	b.n	800b452 <_strtod_l+0x98a>
 800b4fc:	4b32      	ldr	r3, [pc, #200]	@ (800b5c8 <_strtod_l+0xb00>)
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	2200      	movs	r2, #0
 800b504:	f7f5 f898 	bl	8000638 <__aeabi_dmul>
 800b508:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d09f      	beq.n	800b452 <_strtod_l+0x98a>
 800b512:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b516:	e7a0      	b.n	800b45a <_strtod_l+0x992>
 800b518:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b5a0 <_strtod_l+0xad8>
 800b51c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b520:	ec57 6b17 	vmov	r6, r7, d7
 800b524:	e799      	b.n	800b45a <_strtod_l+0x992>
 800b526:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d1c1      	bne.n	800b4b8 <_strtod_l+0x9f0>
 800b534:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b538:	0d1b      	lsrs	r3, r3, #20
 800b53a:	051b      	lsls	r3, r3, #20
 800b53c:	429d      	cmp	r5, r3
 800b53e:	d1bb      	bne.n	800b4b8 <_strtod_l+0x9f0>
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 fbd8 	bl	8000cf8 <__aeabi_d2lz>
 800b548:	f7f5 f848 	bl	80005dc <__aeabi_l2d>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4630      	mov	r0, r6
 800b552:	4639      	mov	r1, r7
 800b554:	f7f4 feb8 	bl	80002c8 <__aeabi_dsub>
 800b558:	460b      	mov	r3, r1
 800b55a:	4602      	mov	r2, r0
 800b55c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b560:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b566:	ea46 060a 	orr.w	r6, r6, sl
 800b56a:	431e      	orrs	r6, r3
 800b56c:	d06f      	beq.n	800b64e <_strtod_l+0xb86>
 800b56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b5a8 <_strtod_l+0xae0>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f5 fad2 	bl	8000b1c <__aeabi_dcmplt>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f47f accf 	bne.w	800af1c <_strtod_l+0x454>
 800b57e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b5b0 <_strtod_l+0xae8>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b588:	f7f5 fae6 	bl	8000b58 <__aeabi_dcmpgt>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d093      	beq.n	800b4b8 <_strtod_l+0x9f0>
 800b590:	e4c4      	b.n	800af1c <_strtod_l+0x454>
 800b592:	bf00      	nop
 800b594:	f3af 8000 	nop.w
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	3ff00000 	.word	0x3ff00000
 800b5a8:	94a03595 	.word	0x94a03595
 800b5ac:	3fdfffff 	.word	0x3fdfffff
 800b5b0:	35afe535 	.word	0x35afe535
 800b5b4:	3fe00000 	.word	0x3fe00000
 800b5b8:	000fffff 	.word	0x000fffff
 800b5bc:	7ff00000 	.word	0x7ff00000
 800b5c0:	7fefffff 	.word	0x7fefffff
 800b5c4:	3ff00000 	.word	0x3ff00000
 800b5c8:	3fe00000 	.word	0x3fe00000
 800b5cc:	7fe00000 	.word	0x7fe00000
 800b5d0:	7c9fffff 	.word	0x7c9fffff
 800b5d4:	9b08      	ldr	r3, [sp, #32]
 800b5d6:	b323      	cbz	r3, 800b622 <_strtod_l+0xb5a>
 800b5d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b5dc:	d821      	bhi.n	800b622 <_strtod_l+0xb5a>
 800b5de:	a328      	add	r3, pc, #160	@ (adr r3, 800b680 <_strtod_l+0xbb8>)
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	f7f5 faa2 	bl	8000b30 <__aeabi_dcmple>
 800b5ec:	b1a0      	cbz	r0, 800b618 <_strtod_l+0xb50>
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7f5 faf9 	bl	8000be8 <__aeabi_d2uiz>
 800b5f6:	2801      	cmp	r0, #1
 800b5f8:	bf38      	it	cc
 800b5fa:	2001      	movcc	r0, #1
 800b5fc:	f7f4 ffa2 	bl	8000544 <__aeabi_ui2d>
 800b600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b602:	4606      	mov	r6, r0
 800b604:	460f      	mov	r7, r1
 800b606:	b9fb      	cbnz	r3, 800b648 <_strtod_l+0xb80>
 800b608:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b60c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b60e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b610:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b614:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b618:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b61a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b61e:	1b5b      	subs	r3, r3, r5
 800b620:	9311      	str	r3, [sp, #68]	@ 0x44
 800b622:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b626:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b62a:	f002 fd31 	bl	800e090 <__ulp>
 800b62e:	4650      	mov	r0, sl
 800b630:	ec53 2b10 	vmov	r2, r3, d0
 800b634:	4659      	mov	r1, fp
 800b636:	f7f4 ffff 	bl	8000638 <__aeabi_dmul>
 800b63a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b63e:	f7f4 fe45 	bl	80002cc <__adddf3>
 800b642:	4682      	mov	sl, r0
 800b644:	468b      	mov	fp, r1
 800b646:	e770      	b.n	800b52a <_strtod_l+0xa62>
 800b648:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b64c:	e7e0      	b.n	800b610 <_strtod_l+0xb48>
 800b64e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b688 <_strtod_l+0xbc0>)
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f7f5 fa62 	bl	8000b1c <__aeabi_dcmplt>
 800b658:	e798      	b.n	800b58c <_strtod_l+0xac4>
 800b65a:	2300      	movs	r3, #0
 800b65c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b65e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	f7ff ba6d 	b.w	800ab42 <_strtod_l+0x7a>
 800b668:	2a65      	cmp	r2, #101	@ 0x65
 800b66a:	f43f ab66 	beq.w	800ad3a <_strtod_l+0x272>
 800b66e:	2a45      	cmp	r2, #69	@ 0x45
 800b670:	f43f ab63 	beq.w	800ad3a <_strtod_l+0x272>
 800b674:	2301      	movs	r3, #1
 800b676:	f7ff bb9e 	b.w	800adb6 <_strtod_l+0x2ee>
 800b67a:	bf00      	nop
 800b67c:	f3af 8000 	nop.w
 800b680:	ffc00000 	.word	0xffc00000
 800b684:	41dfffff 	.word	0x41dfffff
 800b688:	94a03595 	.word	0x94a03595
 800b68c:	3fcfffff 	.word	0x3fcfffff

0800b690 <strtod>:
 800b690:	460a      	mov	r2, r1
 800b692:	4601      	mov	r1, r0
 800b694:	4802      	ldr	r0, [pc, #8]	@ (800b6a0 <strtod+0x10>)
 800b696:	4b03      	ldr	r3, [pc, #12]	@ (800b6a4 <strtod+0x14>)
 800b698:	6800      	ldr	r0, [r0, #0]
 800b69a:	f7ff ba15 	b.w	800aac8 <_strtod_l>
 800b69e:	bf00      	nop
 800b6a0:	20000250 	.word	0x20000250
 800b6a4:	200000e4 	.word	0x200000e4

0800b6a8 <_strtol_l.constprop.0>:
 800b6a8:	2b24      	cmp	r3, #36	@ 0x24
 800b6aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ae:	4686      	mov	lr, r0
 800b6b0:	4690      	mov	r8, r2
 800b6b2:	d801      	bhi.n	800b6b8 <_strtol_l.constprop.0+0x10>
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d106      	bne.n	800b6c6 <_strtol_l.constprop.0+0x1e>
 800b6b8:	f000 fe92 	bl	800c3e0 <__errno>
 800b6bc:	2316      	movs	r3, #22
 800b6be:	6003      	str	r3, [r0, #0]
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c6:	4834      	ldr	r0, [pc, #208]	@ (800b798 <_strtol_l.constprop.0+0xf0>)
 800b6c8:	460d      	mov	r5, r1
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6d0:	5d06      	ldrb	r6, [r0, r4]
 800b6d2:	f016 0608 	ands.w	r6, r6, #8
 800b6d6:	d1f8      	bne.n	800b6ca <_strtol_l.constprop.0+0x22>
 800b6d8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b6da:	d12d      	bne.n	800b738 <_strtol_l.constprop.0+0x90>
 800b6dc:	782c      	ldrb	r4, [r5, #0]
 800b6de:	2601      	movs	r6, #1
 800b6e0:	1c95      	adds	r5, r2, #2
 800b6e2:	f033 0210 	bics.w	r2, r3, #16
 800b6e6:	d109      	bne.n	800b6fc <_strtol_l.constprop.0+0x54>
 800b6e8:	2c30      	cmp	r4, #48	@ 0x30
 800b6ea:	d12a      	bne.n	800b742 <_strtol_l.constprop.0+0x9a>
 800b6ec:	782a      	ldrb	r2, [r5, #0]
 800b6ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b6f2:	2a58      	cmp	r2, #88	@ 0x58
 800b6f4:	d125      	bne.n	800b742 <_strtol_l.constprop.0+0x9a>
 800b6f6:	786c      	ldrb	r4, [r5, #1]
 800b6f8:	2310      	movs	r3, #16
 800b6fa:	3502      	adds	r5, #2
 800b6fc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b700:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b704:	2200      	movs	r2, #0
 800b706:	fbbc f9f3 	udiv	r9, ip, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	fb03 ca19 	mls	sl, r3, r9, ip
 800b710:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b714:	2f09      	cmp	r7, #9
 800b716:	d81b      	bhi.n	800b750 <_strtol_l.constprop.0+0xa8>
 800b718:	463c      	mov	r4, r7
 800b71a:	42a3      	cmp	r3, r4
 800b71c:	dd27      	ble.n	800b76e <_strtol_l.constprop.0+0xc6>
 800b71e:	1c57      	adds	r7, r2, #1
 800b720:	d007      	beq.n	800b732 <_strtol_l.constprop.0+0x8a>
 800b722:	4581      	cmp	r9, r0
 800b724:	d320      	bcc.n	800b768 <_strtol_l.constprop.0+0xc0>
 800b726:	d101      	bne.n	800b72c <_strtol_l.constprop.0+0x84>
 800b728:	45a2      	cmp	sl, r4
 800b72a:	db1d      	blt.n	800b768 <_strtol_l.constprop.0+0xc0>
 800b72c:	fb00 4003 	mla	r0, r0, r3, r4
 800b730:	2201      	movs	r2, #1
 800b732:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b736:	e7eb      	b.n	800b710 <_strtol_l.constprop.0+0x68>
 800b738:	2c2b      	cmp	r4, #43	@ 0x2b
 800b73a:	bf04      	itt	eq
 800b73c:	782c      	ldrbeq	r4, [r5, #0]
 800b73e:	1c95      	addeq	r5, r2, #2
 800b740:	e7cf      	b.n	800b6e2 <_strtol_l.constprop.0+0x3a>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1da      	bne.n	800b6fc <_strtol_l.constprop.0+0x54>
 800b746:	2c30      	cmp	r4, #48	@ 0x30
 800b748:	bf0c      	ite	eq
 800b74a:	2308      	moveq	r3, #8
 800b74c:	230a      	movne	r3, #10
 800b74e:	e7d5      	b.n	800b6fc <_strtol_l.constprop.0+0x54>
 800b750:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b754:	2f19      	cmp	r7, #25
 800b756:	d801      	bhi.n	800b75c <_strtol_l.constprop.0+0xb4>
 800b758:	3c37      	subs	r4, #55	@ 0x37
 800b75a:	e7de      	b.n	800b71a <_strtol_l.constprop.0+0x72>
 800b75c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b760:	2f19      	cmp	r7, #25
 800b762:	d804      	bhi.n	800b76e <_strtol_l.constprop.0+0xc6>
 800b764:	3c57      	subs	r4, #87	@ 0x57
 800b766:	e7d8      	b.n	800b71a <_strtol_l.constprop.0+0x72>
 800b768:	f04f 32ff 	mov.w	r2, #4294967295
 800b76c:	e7e1      	b.n	800b732 <_strtol_l.constprop.0+0x8a>
 800b76e:	1c53      	adds	r3, r2, #1
 800b770:	d108      	bne.n	800b784 <_strtol_l.constprop.0+0xdc>
 800b772:	2322      	movs	r3, #34	@ 0x22
 800b774:	f8ce 3000 	str.w	r3, [lr]
 800b778:	4660      	mov	r0, ip
 800b77a:	f1b8 0f00 	cmp.w	r8, #0
 800b77e:	d0a0      	beq.n	800b6c2 <_strtol_l.constprop.0+0x1a>
 800b780:	1e69      	subs	r1, r5, #1
 800b782:	e006      	b.n	800b792 <_strtol_l.constprop.0+0xea>
 800b784:	b106      	cbz	r6, 800b788 <_strtol_l.constprop.0+0xe0>
 800b786:	4240      	negs	r0, r0
 800b788:	f1b8 0f00 	cmp.w	r8, #0
 800b78c:	d099      	beq.n	800b6c2 <_strtol_l.constprop.0+0x1a>
 800b78e:	2a00      	cmp	r2, #0
 800b790:	d1f6      	bne.n	800b780 <_strtol_l.constprop.0+0xd8>
 800b792:	f8c8 1000 	str.w	r1, [r8]
 800b796:	e794      	b.n	800b6c2 <_strtol_l.constprop.0+0x1a>
 800b798:	08010071 	.word	0x08010071

0800b79c <strtol>:
 800b79c:	4613      	mov	r3, r2
 800b79e:	460a      	mov	r2, r1
 800b7a0:	4601      	mov	r1, r0
 800b7a2:	4802      	ldr	r0, [pc, #8]	@ (800b7ac <strtol+0x10>)
 800b7a4:	6800      	ldr	r0, [r0, #0]
 800b7a6:	f7ff bf7f 	b.w	800b6a8 <_strtol_l.constprop.0>
 800b7aa:	bf00      	nop
 800b7ac:	20000250 	.word	0x20000250

0800b7b0 <__cvt>:
 800b7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b4:	ec57 6b10 	vmov	r6, r7, d0
 800b7b8:	2f00      	cmp	r7, #0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4619      	mov	r1, r3
 800b7be:	463b      	mov	r3, r7
 800b7c0:	bfbb      	ittet	lt
 800b7c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b7c6:	461f      	movlt	r7, r3
 800b7c8:	2300      	movge	r3, #0
 800b7ca:	232d      	movlt	r3, #45	@ 0x2d
 800b7cc:	700b      	strb	r3, [r1, #0]
 800b7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b7d4:	4691      	mov	r9, r2
 800b7d6:	f023 0820 	bic.w	r8, r3, #32
 800b7da:	bfbc      	itt	lt
 800b7dc:	4632      	movlt	r2, r6
 800b7de:	4616      	movlt	r6, r2
 800b7e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7e4:	d005      	beq.n	800b7f2 <__cvt+0x42>
 800b7e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b7ea:	d100      	bne.n	800b7ee <__cvt+0x3e>
 800b7ec:	3401      	adds	r4, #1
 800b7ee:	2102      	movs	r1, #2
 800b7f0:	e000      	b.n	800b7f4 <__cvt+0x44>
 800b7f2:	2103      	movs	r1, #3
 800b7f4:	ab03      	add	r3, sp, #12
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	ab02      	add	r3, sp, #8
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	ec47 6b10 	vmov	d0, r6, r7
 800b800:	4653      	mov	r3, sl
 800b802:	4622      	mov	r2, r4
 800b804:	f000 fec0 	bl	800c588 <_dtoa_r>
 800b808:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b80c:	4605      	mov	r5, r0
 800b80e:	d119      	bne.n	800b844 <__cvt+0x94>
 800b810:	f019 0f01 	tst.w	r9, #1
 800b814:	d00e      	beq.n	800b834 <__cvt+0x84>
 800b816:	eb00 0904 	add.w	r9, r0, r4
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f5 f971 	bl	8000b08 <__aeabi_dcmpeq>
 800b826:	b108      	cbz	r0, 800b82c <__cvt+0x7c>
 800b828:	f8cd 900c 	str.w	r9, [sp, #12]
 800b82c:	2230      	movs	r2, #48	@ 0x30
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	454b      	cmp	r3, r9
 800b832:	d31e      	bcc.n	800b872 <__cvt+0xc2>
 800b834:	9b03      	ldr	r3, [sp, #12]
 800b836:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b838:	1b5b      	subs	r3, r3, r5
 800b83a:	4628      	mov	r0, r5
 800b83c:	6013      	str	r3, [r2, #0]
 800b83e:	b004      	add	sp, #16
 800b840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b848:	eb00 0904 	add.w	r9, r0, r4
 800b84c:	d1e5      	bne.n	800b81a <__cvt+0x6a>
 800b84e:	7803      	ldrb	r3, [r0, #0]
 800b850:	2b30      	cmp	r3, #48	@ 0x30
 800b852:	d10a      	bne.n	800b86a <__cvt+0xba>
 800b854:	2200      	movs	r2, #0
 800b856:	2300      	movs	r3, #0
 800b858:	4630      	mov	r0, r6
 800b85a:	4639      	mov	r1, r7
 800b85c:	f7f5 f954 	bl	8000b08 <__aeabi_dcmpeq>
 800b860:	b918      	cbnz	r0, 800b86a <__cvt+0xba>
 800b862:	f1c4 0401 	rsb	r4, r4, #1
 800b866:	f8ca 4000 	str.w	r4, [sl]
 800b86a:	f8da 3000 	ldr.w	r3, [sl]
 800b86e:	4499      	add	r9, r3
 800b870:	e7d3      	b.n	800b81a <__cvt+0x6a>
 800b872:	1c59      	adds	r1, r3, #1
 800b874:	9103      	str	r1, [sp, #12]
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e7d9      	b.n	800b82e <__cvt+0x7e>

0800b87a <__exponent>:
 800b87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b87c:	2900      	cmp	r1, #0
 800b87e:	bfba      	itte	lt
 800b880:	4249      	neglt	r1, r1
 800b882:	232d      	movlt	r3, #45	@ 0x2d
 800b884:	232b      	movge	r3, #43	@ 0x2b
 800b886:	2909      	cmp	r1, #9
 800b888:	7002      	strb	r2, [r0, #0]
 800b88a:	7043      	strb	r3, [r0, #1]
 800b88c:	dd29      	ble.n	800b8e2 <__exponent+0x68>
 800b88e:	f10d 0307 	add.w	r3, sp, #7
 800b892:	461d      	mov	r5, r3
 800b894:	270a      	movs	r7, #10
 800b896:	461a      	mov	r2, r3
 800b898:	fbb1 f6f7 	udiv	r6, r1, r7
 800b89c:	fb07 1416 	mls	r4, r7, r6, r1
 800b8a0:	3430      	adds	r4, #48	@ 0x30
 800b8a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	2c63      	cmp	r4, #99	@ 0x63
 800b8aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8ae:	4631      	mov	r1, r6
 800b8b0:	dcf1      	bgt.n	800b896 <__exponent+0x1c>
 800b8b2:	3130      	adds	r1, #48	@ 0x30
 800b8b4:	1e94      	subs	r4, r2, #2
 800b8b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b8ba:	1c41      	adds	r1, r0, #1
 800b8bc:	4623      	mov	r3, r4
 800b8be:	42ab      	cmp	r3, r5
 800b8c0:	d30a      	bcc.n	800b8d8 <__exponent+0x5e>
 800b8c2:	f10d 0309 	add.w	r3, sp, #9
 800b8c6:	1a9b      	subs	r3, r3, r2
 800b8c8:	42ac      	cmp	r4, r5
 800b8ca:	bf88      	it	hi
 800b8cc:	2300      	movhi	r3, #0
 800b8ce:	3302      	adds	r3, #2
 800b8d0:	4403      	add	r3, r0
 800b8d2:	1a18      	subs	r0, r3, r0
 800b8d4:	b003      	add	sp, #12
 800b8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b8dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8e0:	e7ed      	b.n	800b8be <__exponent+0x44>
 800b8e2:	2330      	movs	r3, #48	@ 0x30
 800b8e4:	3130      	adds	r1, #48	@ 0x30
 800b8e6:	7083      	strb	r3, [r0, #2]
 800b8e8:	70c1      	strb	r1, [r0, #3]
 800b8ea:	1d03      	adds	r3, r0, #4
 800b8ec:	e7f1      	b.n	800b8d2 <__exponent+0x58>
	...

0800b8f0 <_printf_float>:
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f4:	b08d      	sub	sp, #52	@ 0x34
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b8fc:	4616      	mov	r6, r2
 800b8fe:	461f      	mov	r7, r3
 800b900:	4605      	mov	r5, r0
 800b902:	f000 fd23 	bl	800c34c <_localeconv_r>
 800b906:	6803      	ldr	r3, [r0, #0]
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7f4 fcd0 	bl	80002b0 <strlen>
 800b910:	2300      	movs	r3, #0
 800b912:	930a      	str	r3, [sp, #40]	@ 0x28
 800b914:	f8d8 3000 	ldr.w	r3, [r8]
 800b918:	9005      	str	r0, [sp, #20]
 800b91a:	3307      	adds	r3, #7
 800b91c:	f023 0307 	bic.w	r3, r3, #7
 800b920:	f103 0208 	add.w	r2, r3, #8
 800b924:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b928:	f8d4 b000 	ldr.w	fp, [r4]
 800b92c:	f8c8 2000 	str.w	r2, [r8]
 800b930:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b934:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b938:	9307      	str	r3, [sp, #28]
 800b93a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b93e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b946:	4b9c      	ldr	r3, [pc, #624]	@ (800bbb8 <_printf_float+0x2c8>)
 800b948:	f04f 32ff 	mov.w	r2, #4294967295
 800b94c:	f7f5 f90e 	bl	8000b6c <__aeabi_dcmpun>
 800b950:	bb70      	cbnz	r0, 800b9b0 <_printf_float+0xc0>
 800b952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b956:	4b98      	ldr	r3, [pc, #608]	@ (800bbb8 <_printf_float+0x2c8>)
 800b958:	f04f 32ff 	mov.w	r2, #4294967295
 800b95c:	f7f5 f8e8 	bl	8000b30 <__aeabi_dcmple>
 800b960:	bb30      	cbnz	r0, 800b9b0 <_printf_float+0xc0>
 800b962:	2200      	movs	r2, #0
 800b964:	2300      	movs	r3, #0
 800b966:	4640      	mov	r0, r8
 800b968:	4649      	mov	r1, r9
 800b96a:	f7f5 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800b96e:	b110      	cbz	r0, 800b976 <_printf_float+0x86>
 800b970:	232d      	movs	r3, #45	@ 0x2d
 800b972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b976:	4a91      	ldr	r2, [pc, #580]	@ (800bbbc <_printf_float+0x2cc>)
 800b978:	4b91      	ldr	r3, [pc, #580]	@ (800bbc0 <_printf_float+0x2d0>)
 800b97a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b97e:	bf94      	ite	ls
 800b980:	4690      	movls	r8, r2
 800b982:	4698      	movhi	r8, r3
 800b984:	2303      	movs	r3, #3
 800b986:	6123      	str	r3, [r4, #16]
 800b988:	f02b 0304 	bic.w	r3, fp, #4
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	f04f 0900 	mov.w	r9, #0
 800b992:	9700      	str	r7, [sp, #0]
 800b994:	4633      	mov	r3, r6
 800b996:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b998:	4621      	mov	r1, r4
 800b99a:	4628      	mov	r0, r5
 800b99c:	f000 f9d2 	bl	800bd44 <_printf_common>
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	f040 808d 	bne.w	800bac0 <_printf_float+0x1d0>
 800b9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9aa:	b00d      	add	sp, #52	@ 0x34
 800b9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b0:	4642      	mov	r2, r8
 800b9b2:	464b      	mov	r3, r9
 800b9b4:	4640      	mov	r0, r8
 800b9b6:	4649      	mov	r1, r9
 800b9b8:	f7f5 f8d8 	bl	8000b6c <__aeabi_dcmpun>
 800b9bc:	b140      	cbz	r0, 800b9d0 <_printf_float+0xe0>
 800b9be:	464b      	mov	r3, r9
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bfbc      	itt	lt
 800b9c4:	232d      	movlt	r3, #45	@ 0x2d
 800b9c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b9ca:	4a7e      	ldr	r2, [pc, #504]	@ (800bbc4 <_printf_float+0x2d4>)
 800b9cc:	4b7e      	ldr	r3, [pc, #504]	@ (800bbc8 <_printf_float+0x2d8>)
 800b9ce:	e7d4      	b.n	800b97a <_printf_float+0x8a>
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b9d6:	9206      	str	r2, [sp, #24]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	d13b      	bne.n	800ba54 <_printf_float+0x164>
 800b9dc:	2306      	movs	r3, #6
 800b9de:	6063      	str	r3, [r4, #4]
 800b9e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	9303      	str	r3, [sp, #12]
 800b9ea:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b9f0:	ab09      	add	r3, sp, #36	@ 0x24
 800b9f2:	9300      	str	r3, [sp, #0]
 800b9f4:	6861      	ldr	r1, [r4, #4]
 800b9f6:	ec49 8b10 	vmov	d0, r8, r9
 800b9fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f7ff fed6 	bl	800b7b0 <__cvt>
 800ba04:	9b06      	ldr	r3, [sp, #24]
 800ba06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba08:	2b47      	cmp	r3, #71	@ 0x47
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	d129      	bne.n	800ba62 <_printf_float+0x172>
 800ba0e:	1cc8      	adds	r0, r1, #3
 800ba10:	db02      	blt.n	800ba18 <_printf_float+0x128>
 800ba12:	6863      	ldr	r3, [r4, #4]
 800ba14:	4299      	cmp	r1, r3
 800ba16:	dd41      	ble.n	800ba9c <_printf_float+0x1ac>
 800ba18:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba1c:	fa5f fa8a 	uxtb.w	sl, sl
 800ba20:	3901      	subs	r1, #1
 800ba22:	4652      	mov	r2, sl
 800ba24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba28:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba2a:	f7ff ff26 	bl	800b87a <__exponent>
 800ba2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba30:	1813      	adds	r3, r2, r0
 800ba32:	2a01      	cmp	r2, #1
 800ba34:	4681      	mov	r9, r0
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	dc02      	bgt.n	800ba40 <_printf_float+0x150>
 800ba3a:	6822      	ldr	r2, [r4, #0]
 800ba3c:	07d2      	lsls	r2, r2, #31
 800ba3e:	d501      	bpl.n	800ba44 <_printf_float+0x154>
 800ba40:	3301      	adds	r3, #1
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0a2      	beq.n	800b992 <_printf_float+0xa2>
 800ba4c:	232d      	movs	r3, #45	@ 0x2d
 800ba4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba52:	e79e      	b.n	800b992 <_printf_float+0xa2>
 800ba54:	9a06      	ldr	r2, [sp, #24]
 800ba56:	2a47      	cmp	r2, #71	@ 0x47
 800ba58:	d1c2      	bne.n	800b9e0 <_printf_float+0xf0>
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1c0      	bne.n	800b9e0 <_printf_float+0xf0>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e7bd      	b.n	800b9de <_printf_float+0xee>
 800ba62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba66:	d9db      	bls.n	800ba20 <_printf_float+0x130>
 800ba68:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba6c:	d118      	bne.n	800baa0 <_printf_float+0x1b0>
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	6863      	ldr	r3, [r4, #4]
 800ba72:	dd0b      	ble.n	800ba8c <_printf_float+0x19c>
 800ba74:	6121      	str	r1, [r4, #16]
 800ba76:	b913      	cbnz	r3, 800ba7e <_printf_float+0x18e>
 800ba78:	6822      	ldr	r2, [r4, #0]
 800ba7a:	07d0      	lsls	r0, r2, #31
 800ba7c:	d502      	bpl.n	800ba84 <_printf_float+0x194>
 800ba7e:	3301      	adds	r3, #1
 800ba80:	440b      	add	r3, r1
 800ba82:	6123      	str	r3, [r4, #16]
 800ba84:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba86:	f04f 0900 	mov.w	r9, #0
 800ba8a:	e7db      	b.n	800ba44 <_printf_float+0x154>
 800ba8c:	b913      	cbnz	r3, 800ba94 <_printf_float+0x1a4>
 800ba8e:	6822      	ldr	r2, [r4, #0]
 800ba90:	07d2      	lsls	r2, r2, #31
 800ba92:	d501      	bpl.n	800ba98 <_printf_float+0x1a8>
 800ba94:	3302      	adds	r3, #2
 800ba96:	e7f4      	b.n	800ba82 <_printf_float+0x192>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7f2      	b.n	800ba82 <_printf_float+0x192>
 800ba9c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800baa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa2:	4299      	cmp	r1, r3
 800baa4:	db05      	blt.n	800bab2 <_printf_float+0x1c2>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	6121      	str	r1, [r4, #16]
 800baaa:	07d8      	lsls	r0, r3, #31
 800baac:	d5ea      	bpl.n	800ba84 <_printf_float+0x194>
 800baae:	1c4b      	adds	r3, r1, #1
 800bab0:	e7e7      	b.n	800ba82 <_printf_float+0x192>
 800bab2:	2900      	cmp	r1, #0
 800bab4:	bfd4      	ite	le
 800bab6:	f1c1 0202 	rsble	r2, r1, #2
 800baba:	2201      	movgt	r2, #1
 800babc:	4413      	add	r3, r2
 800babe:	e7e0      	b.n	800ba82 <_printf_float+0x192>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	055a      	lsls	r2, r3, #21
 800bac4:	d407      	bmi.n	800bad6 <_printf_float+0x1e6>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	4642      	mov	r2, r8
 800baca:	4631      	mov	r1, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	47b8      	blx	r7
 800bad0:	3001      	adds	r0, #1
 800bad2:	d12b      	bne.n	800bb2c <_printf_float+0x23c>
 800bad4:	e767      	b.n	800b9a6 <_printf_float+0xb6>
 800bad6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bada:	f240 80dd 	bls.w	800bc98 <_printf_float+0x3a8>
 800bade:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bae2:	2200      	movs	r2, #0
 800bae4:	2300      	movs	r3, #0
 800bae6:	f7f5 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 800baea:	2800      	cmp	r0, #0
 800baec:	d033      	beq.n	800bb56 <_printf_float+0x266>
 800baee:	4a37      	ldr	r2, [pc, #220]	@ (800bbcc <_printf_float+0x2dc>)
 800baf0:	2301      	movs	r3, #1
 800baf2:	4631      	mov	r1, r6
 800baf4:	4628      	mov	r0, r5
 800baf6:	47b8      	blx	r7
 800baf8:	3001      	adds	r0, #1
 800bafa:	f43f af54 	beq.w	800b9a6 <_printf_float+0xb6>
 800bafe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb02:	4543      	cmp	r3, r8
 800bb04:	db02      	blt.n	800bb0c <_printf_float+0x21c>
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	07d8      	lsls	r0, r3, #31
 800bb0a:	d50f      	bpl.n	800bb2c <_printf_float+0x23c>
 800bb0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f af45 	beq.w	800b9a6 <_printf_float+0xb6>
 800bb1c:	f04f 0900 	mov.w	r9, #0
 800bb20:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb24:	f104 0a1a 	add.w	sl, r4, #26
 800bb28:	45c8      	cmp	r8, r9
 800bb2a:	dc09      	bgt.n	800bb40 <_printf_float+0x250>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	079b      	lsls	r3, r3, #30
 800bb30:	f100 8103 	bmi.w	800bd3a <_printf_float+0x44a>
 800bb34:	68e0      	ldr	r0, [r4, #12]
 800bb36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb38:	4298      	cmp	r0, r3
 800bb3a:	bfb8      	it	lt
 800bb3c:	4618      	movlt	r0, r3
 800bb3e:	e734      	b.n	800b9aa <_printf_float+0xba>
 800bb40:	2301      	movs	r3, #1
 800bb42:	4652      	mov	r2, sl
 800bb44:	4631      	mov	r1, r6
 800bb46:	4628      	mov	r0, r5
 800bb48:	47b8      	blx	r7
 800bb4a:	3001      	adds	r0, #1
 800bb4c:	f43f af2b 	beq.w	800b9a6 <_printf_float+0xb6>
 800bb50:	f109 0901 	add.w	r9, r9, #1
 800bb54:	e7e8      	b.n	800bb28 <_printf_float+0x238>
 800bb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dc39      	bgt.n	800bbd0 <_printf_float+0x2e0>
 800bb5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bbcc <_printf_float+0x2dc>)
 800bb5e:	2301      	movs	r3, #1
 800bb60:	4631      	mov	r1, r6
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b8      	blx	r7
 800bb66:	3001      	adds	r0, #1
 800bb68:	f43f af1d 	beq.w	800b9a6 <_printf_float+0xb6>
 800bb6c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb70:	ea59 0303 	orrs.w	r3, r9, r3
 800bb74:	d102      	bne.n	800bb7c <_printf_float+0x28c>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	07d9      	lsls	r1, r3, #31
 800bb7a:	d5d7      	bpl.n	800bb2c <_printf_float+0x23c>
 800bb7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f af0d 	beq.w	800b9a6 <_printf_float+0xb6>
 800bb8c:	f04f 0a00 	mov.w	sl, #0
 800bb90:	f104 0b1a 	add.w	fp, r4, #26
 800bb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb96:	425b      	negs	r3, r3
 800bb98:	4553      	cmp	r3, sl
 800bb9a:	dc01      	bgt.n	800bba0 <_printf_float+0x2b0>
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	e793      	b.n	800bac8 <_printf_float+0x1d8>
 800bba0:	2301      	movs	r3, #1
 800bba2:	465a      	mov	r2, fp
 800bba4:	4631      	mov	r1, r6
 800bba6:	4628      	mov	r0, r5
 800bba8:	47b8      	blx	r7
 800bbaa:	3001      	adds	r0, #1
 800bbac:	f43f aefb 	beq.w	800b9a6 <_printf_float+0xb6>
 800bbb0:	f10a 0a01 	add.w	sl, sl, #1
 800bbb4:	e7ee      	b.n	800bb94 <_printf_float+0x2a4>
 800bbb6:	bf00      	nop
 800bbb8:	7fefffff 	.word	0x7fefffff
 800bbbc:	08010171 	.word	0x08010171
 800bbc0:	08010175 	.word	0x08010175
 800bbc4:	08010179 	.word	0x08010179
 800bbc8:	0801017d 	.word	0x0801017d
 800bbcc:	08010181 	.word	0x08010181
 800bbd0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbd2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbd6:	4553      	cmp	r3, sl
 800bbd8:	bfa8      	it	ge
 800bbda:	4653      	movge	r3, sl
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	4699      	mov	r9, r3
 800bbe0:	dc36      	bgt.n	800bc50 <_printf_float+0x360>
 800bbe2:	f04f 0b00 	mov.w	fp, #0
 800bbe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbea:	f104 021a 	add.w	r2, r4, #26
 800bbee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbf0:	9306      	str	r3, [sp, #24]
 800bbf2:	eba3 0309 	sub.w	r3, r3, r9
 800bbf6:	455b      	cmp	r3, fp
 800bbf8:	dc31      	bgt.n	800bc5e <_printf_float+0x36e>
 800bbfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfc:	459a      	cmp	sl, r3
 800bbfe:	dc3a      	bgt.n	800bc76 <_printf_float+0x386>
 800bc00:	6823      	ldr	r3, [r4, #0]
 800bc02:	07da      	lsls	r2, r3, #31
 800bc04:	d437      	bmi.n	800bc76 <_printf_float+0x386>
 800bc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc08:	ebaa 0903 	sub.w	r9, sl, r3
 800bc0c:	9b06      	ldr	r3, [sp, #24]
 800bc0e:	ebaa 0303 	sub.w	r3, sl, r3
 800bc12:	4599      	cmp	r9, r3
 800bc14:	bfa8      	it	ge
 800bc16:	4699      	movge	r9, r3
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	dc33      	bgt.n	800bc86 <_printf_float+0x396>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc26:	f104 0b1a 	add.w	fp, r4, #26
 800bc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc30:	eba3 0309 	sub.w	r3, r3, r9
 800bc34:	4543      	cmp	r3, r8
 800bc36:	f77f af79 	ble.w	800bb2c <_printf_float+0x23c>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	465a      	mov	r2, fp
 800bc3e:	4631      	mov	r1, r6
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b8      	blx	r7
 800bc44:	3001      	adds	r0, #1
 800bc46:	f43f aeae 	beq.w	800b9a6 <_printf_float+0xb6>
 800bc4a:	f108 0801 	add.w	r8, r8, #1
 800bc4e:	e7ec      	b.n	800bc2a <_printf_float+0x33a>
 800bc50:	4642      	mov	r2, r8
 800bc52:	4631      	mov	r1, r6
 800bc54:	4628      	mov	r0, r5
 800bc56:	47b8      	blx	r7
 800bc58:	3001      	adds	r0, #1
 800bc5a:	d1c2      	bne.n	800bbe2 <_printf_float+0x2f2>
 800bc5c:	e6a3      	b.n	800b9a6 <_printf_float+0xb6>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4631      	mov	r1, r6
 800bc62:	4628      	mov	r0, r5
 800bc64:	9206      	str	r2, [sp, #24]
 800bc66:	47b8      	blx	r7
 800bc68:	3001      	adds	r0, #1
 800bc6a:	f43f ae9c 	beq.w	800b9a6 <_printf_float+0xb6>
 800bc6e:	9a06      	ldr	r2, [sp, #24]
 800bc70:	f10b 0b01 	add.w	fp, fp, #1
 800bc74:	e7bb      	b.n	800bbee <_printf_float+0x2fe>
 800bc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	d1c0      	bne.n	800bc06 <_printf_float+0x316>
 800bc84:	e68f      	b.n	800b9a6 <_printf_float+0xb6>
 800bc86:	9a06      	ldr	r2, [sp, #24]
 800bc88:	464b      	mov	r3, r9
 800bc8a:	4442      	add	r2, r8
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	4628      	mov	r0, r5
 800bc90:	47b8      	blx	r7
 800bc92:	3001      	adds	r0, #1
 800bc94:	d1c3      	bne.n	800bc1e <_printf_float+0x32e>
 800bc96:	e686      	b.n	800b9a6 <_printf_float+0xb6>
 800bc98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc9c:	f1ba 0f01 	cmp.w	sl, #1
 800bca0:	dc01      	bgt.n	800bca6 <_printf_float+0x3b6>
 800bca2:	07db      	lsls	r3, r3, #31
 800bca4:	d536      	bpl.n	800bd14 <_printf_float+0x424>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4642      	mov	r2, r8
 800bcaa:	4631      	mov	r1, r6
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b8      	blx	r7
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	f43f ae78 	beq.w	800b9a6 <_printf_float+0xb6>
 800bcb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f43f ae70 	beq.w	800b9a6 <_printf_float+0xb6>
 800bcc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bcca:	2200      	movs	r2, #0
 800bccc:	2300      	movs	r3, #0
 800bcce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcd2:	f7f4 ff19 	bl	8000b08 <__aeabi_dcmpeq>
 800bcd6:	b9c0      	cbnz	r0, 800bd0a <_printf_float+0x41a>
 800bcd8:	4653      	mov	r3, sl
 800bcda:	f108 0201 	add.w	r2, r8, #1
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	d10c      	bne.n	800bd02 <_printf_float+0x412>
 800bce8:	e65d      	b.n	800b9a6 <_printf_float+0xb6>
 800bcea:	2301      	movs	r3, #1
 800bcec:	465a      	mov	r2, fp
 800bcee:	4631      	mov	r1, r6
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	47b8      	blx	r7
 800bcf4:	3001      	adds	r0, #1
 800bcf6:	f43f ae56 	beq.w	800b9a6 <_printf_float+0xb6>
 800bcfa:	f108 0801 	add.w	r8, r8, #1
 800bcfe:	45d0      	cmp	r8, sl
 800bd00:	dbf3      	blt.n	800bcea <_printf_float+0x3fa>
 800bd02:	464b      	mov	r3, r9
 800bd04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd08:	e6df      	b.n	800baca <_printf_float+0x1da>
 800bd0a:	f04f 0800 	mov.w	r8, #0
 800bd0e:	f104 0b1a 	add.w	fp, r4, #26
 800bd12:	e7f4      	b.n	800bcfe <_printf_float+0x40e>
 800bd14:	2301      	movs	r3, #1
 800bd16:	4642      	mov	r2, r8
 800bd18:	e7e1      	b.n	800bcde <_printf_float+0x3ee>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	464a      	mov	r2, r9
 800bd1e:	4631      	mov	r1, r6
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b8      	blx	r7
 800bd24:	3001      	adds	r0, #1
 800bd26:	f43f ae3e 	beq.w	800b9a6 <_printf_float+0xb6>
 800bd2a:	f108 0801 	add.w	r8, r8, #1
 800bd2e:	68e3      	ldr	r3, [r4, #12]
 800bd30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd32:	1a5b      	subs	r3, r3, r1
 800bd34:	4543      	cmp	r3, r8
 800bd36:	dcf0      	bgt.n	800bd1a <_printf_float+0x42a>
 800bd38:	e6fc      	b.n	800bb34 <_printf_float+0x244>
 800bd3a:	f04f 0800 	mov.w	r8, #0
 800bd3e:	f104 0919 	add.w	r9, r4, #25
 800bd42:	e7f4      	b.n	800bd2e <_printf_float+0x43e>

0800bd44 <_printf_common>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	4616      	mov	r6, r2
 800bd4a:	4698      	mov	r8, r3
 800bd4c:	688a      	ldr	r2, [r1, #8]
 800bd4e:	690b      	ldr	r3, [r1, #16]
 800bd50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bfb8      	it	lt
 800bd58:	4613      	movlt	r3, r2
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd60:	4607      	mov	r7, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	b10a      	cbz	r2, 800bd6a <_printf_common+0x26>
 800bd66:	3301      	adds	r3, #1
 800bd68:	6033      	str	r3, [r6, #0]
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	0699      	lsls	r1, r3, #26
 800bd6e:	bf42      	ittt	mi
 800bd70:	6833      	ldrmi	r3, [r6, #0]
 800bd72:	3302      	addmi	r3, #2
 800bd74:	6033      	strmi	r3, [r6, #0]
 800bd76:	6825      	ldr	r5, [r4, #0]
 800bd78:	f015 0506 	ands.w	r5, r5, #6
 800bd7c:	d106      	bne.n	800bd8c <_printf_common+0x48>
 800bd7e:	f104 0a19 	add.w	sl, r4, #25
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	6832      	ldr	r2, [r6, #0]
 800bd86:	1a9b      	subs	r3, r3, r2
 800bd88:	42ab      	cmp	r3, r5
 800bd8a:	dc26      	bgt.n	800bdda <_printf_common+0x96>
 800bd8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd90:	6822      	ldr	r2, [r4, #0]
 800bd92:	3b00      	subs	r3, #0
 800bd94:	bf18      	it	ne
 800bd96:	2301      	movne	r3, #1
 800bd98:	0692      	lsls	r2, r2, #26
 800bd9a:	d42b      	bmi.n	800bdf4 <_printf_common+0xb0>
 800bd9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bda0:	4641      	mov	r1, r8
 800bda2:	4638      	mov	r0, r7
 800bda4:	47c8      	blx	r9
 800bda6:	3001      	adds	r0, #1
 800bda8:	d01e      	beq.n	800bde8 <_printf_common+0xa4>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	f003 0306 	and.w	r3, r3, #6
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	bf02      	ittt	eq
 800bdb6:	68e5      	ldreq	r5, [r4, #12]
 800bdb8:	6833      	ldreq	r3, [r6, #0]
 800bdba:	1aed      	subeq	r5, r5, r3
 800bdbc:	68a3      	ldr	r3, [r4, #8]
 800bdbe:	bf0c      	ite	eq
 800bdc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdc4:	2500      	movne	r5, #0
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	bfc4      	itt	gt
 800bdca:	1a9b      	subgt	r3, r3, r2
 800bdcc:	18ed      	addgt	r5, r5, r3
 800bdce:	2600      	movs	r6, #0
 800bdd0:	341a      	adds	r4, #26
 800bdd2:	42b5      	cmp	r5, r6
 800bdd4:	d11a      	bne.n	800be0c <_printf_common+0xc8>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e008      	b.n	800bdec <_printf_common+0xa8>
 800bdda:	2301      	movs	r3, #1
 800bddc:	4652      	mov	r2, sl
 800bdde:	4641      	mov	r1, r8
 800bde0:	4638      	mov	r0, r7
 800bde2:	47c8      	blx	r9
 800bde4:	3001      	adds	r0, #1
 800bde6:	d103      	bne.n	800bdf0 <_printf_common+0xac>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	e7c6      	b.n	800bd82 <_printf_common+0x3e>
 800bdf4:	18e1      	adds	r1, r4, r3
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	2030      	movs	r0, #48	@ 0x30
 800bdfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdfe:	4422      	add	r2, r4
 800be00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be08:	3302      	adds	r3, #2
 800be0a:	e7c7      	b.n	800bd9c <_printf_common+0x58>
 800be0c:	2301      	movs	r3, #1
 800be0e:	4622      	mov	r2, r4
 800be10:	4641      	mov	r1, r8
 800be12:	4638      	mov	r0, r7
 800be14:	47c8      	blx	r9
 800be16:	3001      	adds	r0, #1
 800be18:	d0e6      	beq.n	800bde8 <_printf_common+0xa4>
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7d9      	b.n	800bdd2 <_printf_common+0x8e>
	...

0800be20 <_printf_i>:
 800be20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be24:	7e0f      	ldrb	r7, [r1, #24]
 800be26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be28:	2f78      	cmp	r7, #120	@ 0x78
 800be2a:	4691      	mov	r9, r2
 800be2c:	4680      	mov	r8, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	469a      	mov	sl, r3
 800be32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be36:	d807      	bhi.n	800be48 <_printf_i+0x28>
 800be38:	2f62      	cmp	r7, #98	@ 0x62
 800be3a:	d80a      	bhi.n	800be52 <_printf_i+0x32>
 800be3c:	2f00      	cmp	r7, #0
 800be3e:	f000 80d2 	beq.w	800bfe6 <_printf_i+0x1c6>
 800be42:	2f58      	cmp	r7, #88	@ 0x58
 800be44:	f000 80b9 	beq.w	800bfba <_printf_i+0x19a>
 800be48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be50:	e03a      	b.n	800bec8 <_printf_i+0xa8>
 800be52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be56:	2b15      	cmp	r3, #21
 800be58:	d8f6      	bhi.n	800be48 <_printf_i+0x28>
 800be5a:	a101      	add	r1, pc, #4	@ (adr r1, 800be60 <_printf_i+0x40>)
 800be5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800becd 	.word	0x0800becd
 800be68:	0800be49 	.word	0x0800be49
 800be6c:	0800be49 	.word	0x0800be49
 800be70:	0800be49 	.word	0x0800be49
 800be74:	0800be49 	.word	0x0800be49
 800be78:	0800becd 	.word	0x0800becd
 800be7c:	0800be49 	.word	0x0800be49
 800be80:	0800be49 	.word	0x0800be49
 800be84:	0800be49 	.word	0x0800be49
 800be88:	0800be49 	.word	0x0800be49
 800be8c:	0800bfcd 	.word	0x0800bfcd
 800be90:	0800bef7 	.word	0x0800bef7
 800be94:	0800bf87 	.word	0x0800bf87
 800be98:	0800be49 	.word	0x0800be49
 800be9c:	0800be49 	.word	0x0800be49
 800bea0:	0800bfef 	.word	0x0800bfef
 800bea4:	0800be49 	.word	0x0800be49
 800bea8:	0800bef7 	.word	0x0800bef7
 800beac:	0800be49 	.word	0x0800be49
 800beb0:	0800be49 	.word	0x0800be49
 800beb4:	0800bf8f 	.word	0x0800bf8f
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	1d1a      	adds	r2, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6032      	str	r2, [r6, #0]
 800bec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bec4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bec8:	2301      	movs	r3, #1
 800beca:	e09d      	b.n	800c008 <_printf_i+0x1e8>
 800becc:	6833      	ldr	r3, [r6, #0]
 800bece:	6820      	ldr	r0, [r4, #0]
 800bed0:	1d19      	adds	r1, r3, #4
 800bed2:	6031      	str	r1, [r6, #0]
 800bed4:	0606      	lsls	r6, r0, #24
 800bed6:	d501      	bpl.n	800bedc <_printf_i+0xbc>
 800bed8:	681d      	ldr	r5, [r3, #0]
 800beda:	e003      	b.n	800bee4 <_printf_i+0xc4>
 800bedc:	0645      	lsls	r5, r0, #25
 800bede:	d5fb      	bpl.n	800bed8 <_printf_i+0xb8>
 800bee0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bee4:	2d00      	cmp	r5, #0
 800bee6:	da03      	bge.n	800bef0 <_printf_i+0xd0>
 800bee8:	232d      	movs	r3, #45	@ 0x2d
 800beea:	426d      	negs	r5, r5
 800beec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef0:	4859      	ldr	r0, [pc, #356]	@ (800c058 <_printf_i+0x238>)
 800bef2:	230a      	movs	r3, #10
 800bef4:	e011      	b.n	800bf1a <_printf_i+0xfa>
 800bef6:	6821      	ldr	r1, [r4, #0]
 800bef8:	6833      	ldr	r3, [r6, #0]
 800befa:	0608      	lsls	r0, r1, #24
 800befc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf00:	d402      	bmi.n	800bf08 <_printf_i+0xe8>
 800bf02:	0649      	lsls	r1, r1, #25
 800bf04:	bf48      	it	mi
 800bf06:	b2ad      	uxthmi	r5, r5
 800bf08:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf0a:	4853      	ldr	r0, [pc, #332]	@ (800c058 <_printf_i+0x238>)
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	bf14      	ite	ne
 800bf10:	230a      	movne	r3, #10
 800bf12:	2308      	moveq	r3, #8
 800bf14:	2100      	movs	r1, #0
 800bf16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf1a:	6866      	ldr	r6, [r4, #4]
 800bf1c:	60a6      	str	r6, [r4, #8]
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	bfa2      	ittt	ge
 800bf22:	6821      	ldrge	r1, [r4, #0]
 800bf24:	f021 0104 	bicge.w	r1, r1, #4
 800bf28:	6021      	strge	r1, [r4, #0]
 800bf2a:	b90d      	cbnz	r5, 800bf30 <_printf_i+0x110>
 800bf2c:	2e00      	cmp	r6, #0
 800bf2e:	d04b      	beq.n	800bfc8 <_printf_i+0x1a8>
 800bf30:	4616      	mov	r6, r2
 800bf32:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf36:	fb03 5711 	mls	r7, r3, r1, r5
 800bf3a:	5dc7      	ldrb	r7, [r0, r7]
 800bf3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf40:	462f      	mov	r7, r5
 800bf42:	42bb      	cmp	r3, r7
 800bf44:	460d      	mov	r5, r1
 800bf46:	d9f4      	bls.n	800bf32 <_printf_i+0x112>
 800bf48:	2b08      	cmp	r3, #8
 800bf4a:	d10b      	bne.n	800bf64 <_printf_i+0x144>
 800bf4c:	6823      	ldr	r3, [r4, #0]
 800bf4e:	07df      	lsls	r7, r3, #31
 800bf50:	d508      	bpl.n	800bf64 <_printf_i+0x144>
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	6861      	ldr	r1, [r4, #4]
 800bf56:	4299      	cmp	r1, r3
 800bf58:	bfde      	ittt	le
 800bf5a:	2330      	movle	r3, #48	@ 0x30
 800bf5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf64:	1b92      	subs	r2, r2, r6
 800bf66:	6122      	str	r2, [r4, #16]
 800bf68:	f8cd a000 	str.w	sl, [sp]
 800bf6c:	464b      	mov	r3, r9
 800bf6e:	aa03      	add	r2, sp, #12
 800bf70:	4621      	mov	r1, r4
 800bf72:	4640      	mov	r0, r8
 800bf74:	f7ff fee6 	bl	800bd44 <_printf_common>
 800bf78:	3001      	adds	r0, #1
 800bf7a:	d14a      	bne.n	800c012 <_printf_i+0x1f2>
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	b004      	add	sp, #16
 800bf82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	f043 0320 	orr.w	r3, r3, #32
 800bf8c:	6023      	str	r3, [r4, #0]
 800bf8e:	4833      	ldr	r0, [pc, #204]	@ (800c05c <_printf_i+0x23c>)
 800bf90:	2778      	movs	r7, #120	@ 0x78
 800bf92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf96:	6823      	ldr	r3, [r4, #0]
 800bf98:	6831      	ldr	r1, [r6, #0]
 800bf9a:	061f      	lsls	r7, r3, #24
 800bf9c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfa0:	d402      	bmi.n	800bfa8 <_printf_i+0x188>
 800bfa2:	065f      	lsls	r7, r3, #25
 800bfa4:	bf48      	it	mi
 800bfa6:	b2ad      	uxthmi	r5, r5
 800bfa8:	6031      	str	r1, [r6, #0]
 800bfaa:	07d9      	lsls	r1, r3, #31
 800bfac:	bf44      	itt	mi
 800bfae:	f043 0320 	orrmi.w	r3, r3, #32
 800bfb2:	6023      	strmi	r3, [r4, #0]
 800bfb4:	b11d      	cbz	r5, 800bfbe <_printf_i+0x19e>
 800bfb6:	2310      	movs	r3, #16
 800bfb8:	e7ac      	b.n	800bf14 <_printf_i+0xf4>
 800bfba:	4827      	ldr	r0, [pc, #156]	@ (800c058 <_printf_i+0x238>)
 800bfbc:	e7e9      	b.n	800bf92 <_printf_i+0x172>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f023 0320 	bic.w	r3, r3, #32
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	e7f6      	b.n	800bfb6 <_printf_i+0x196>
 800bfc8:	4616      	mov	r6, r2
 800bfca:	e7bd      	b.n	800bf48 <_printf_i+0x128>
 800bfcc:	6833      	ldr	r3, [r6, #0]
 800bfce:	6825      	ldr	r5, [r4, #0]
 800bfd0:	6961      	ldr	r1, [r4, #20]
 800bfd2:	1d18      	adds	r0, r3, #4
 800bfd4:	6030      	str	r0, [r6, #0]
 800bfd6:	062e      	lsls	r6, r5, #24
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	d501      	bpl.n	800bfe0 <_printf_i+0x1c0>
 800bfdc:	6019      	str	r1, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <_printf_i+0x1c6>
 800bfe0:	0668      	lsls	r0, r5, #25
 800bfe2:	d5fb      	bpl.n	800bfdc <_printf_i+0x1bc>
 800bfe4:	8019      	strh	r1, [r3, #0]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	6123      	str	r3, [r4, #16]
 800bfea:	4616      	mov	r6, r2
 800bfec:	e7bc      	b.n	800bf68 <_printf_i+0x148>
 800bfee:	6833      	ldr	r3, [r6, #0]
 800bff0:	1d1a      	adds	r2, r3, #4
 800bff2:	6032      	str	r2, [r6, #0]
 800bff4:	681e      	ldr	r6, [r3, #0]
 800bff6:	6862      	ldr	r2, [r4, #4]
 800bff8:	2100      	movs	r1, #0
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7f4 f908 	bl	8000210 <memchr>
 800c000:	b108      	cbz	r0, 800c006 <_printf_i+0x1e6>
 800c002:	1b80      	subs	r0, r0, r6
 800c004:	6060      	str	r0, [r4, #4]
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	6123      	str	r3, [r4, #16]
 800c00a:	2300      	movs	r3, #0
 800c00c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c010:	e7aa      	b.n	800bf68 <_printf_i+0x148>
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	4632      	mov	r2, r6
 800c016:	4649      	mov	r1, r9
 800c018:	4640      	mov	r0, r8
 800c01a:	47d0      	blx	sl
 800c01c:	3001      	adds	r0, #1
 800c01e:	d0ad      	beq.n	800bf7c <_printf_i+0x15c>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	079b      	lsls	r3, r3, #30
 800c024:	d413      	bmi.n	800c04e <_printf_i+0x22e>
 800c026:	68e0      	ldr	r0, [r4, #12]
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	4298      	cmp	r0, r3
 800c02c:	bfb8      	it	lt
 800c02e:	4618      	movlt	r0, r3
 800c030:	e7a6      	b.n	800bf80 <_printf_i+0x160>
 800c032:	2301      	movs	r3, #1
 800c034:	4632      	mov	r2, r6
 800c036:	4649      	mov	r1, r9
 800c038:	4640      	mov	r0, r8
 800c03a:	47d0      	blx	sl
 800c03c:	3001      	adds	r0, #1
 800c03e:	d09d      	beq.n	800bf7c <_printf_i+0x15c>
 800c040:	3501      	adds	r5, #1
 800c042:	68e3      	ldr	r3, [r4, #12]
 800c044:	9903      	ldr	r1, [sp, #12]
 800c046:	1a5b      	subs	r3, r3, r1
 800c048:	42ab      	cmp	r3, r5
 800c04a:	dcf2      	bgt.n	800c032 <_printf_i+0x212>
 800c04c:	e7eb      	b.n	800c026 <_printf_i+0x206>
 800c04e:	2500      	movs	r5, #0
 800c050:	f104 0619 	add.w	r6, r4, #25
 800c054:	e7f5      	b.n	800c042 <_printf_i+0x222>
 800c056:	bf00      	nop
 800c058:	08010183 	.word	0x08010183
 800c05c:	08010194 	.word	0x08010194

0800c060 <std>:
 800c060:	2300      	movs	r3, #0
 800c062:	b510      	push	{r4, lr}
 800c064:	4604      	mov	r4, r0
 800c066:	e9c0 3300 	strd	r3, r3, [r0]
 800c06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c06e:	6083      	str	r3, [r0, #8]
 800c070:	8181      	strh	r1, [r0, #12]
 800c072:	6643      	str	r3, [r0, #100]	@ 0x64
 800c074:	81c2      	strh	r2, [r0, #14]
 800c076:	6183      	str	r3, [r0, #24]
 800c078:	4619      	mov	r1, r3
 800c07a:	2208      	movs	r2, #8
 800c07c:	305c      	adds	r0, #92	@ 0x5c
 800c07e:	f000 f928 	bl	800c2d2 <memset>
 800c082:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b8 <std+0x58>)
 800c084:	6263      	str	r3, [r4, #36]	@ 0x24
 800c086:	4b0d      	ldr	r3, [pc, #52]	@ (800c0bc <std+0x5c>)
 800c088:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c08a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c0 <std+0x60>)
 800c08c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c08e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c4 <std+0x64>)
 800c090:	6323      	str	r3, [r4, #48]	@ 0x30
 800c092:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c8 <std+0x68>)
 800c094:	6224      	str	r4, [r4, #32]
 800c096:	429c      	cmp	r4, r3
 800c098:	d006      	beq.n	800c0a8 <std+0x48>
 800c09a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c09e:	4294      	cmp	r4, r2
 800c0a0:	d002      	beq.n	800c0a8 <std+0x48>
 800c0a2:	33d0      	adds	r3, #208	@ 0xd0
 800c0a4:	429c      	cmp	r4, r3
 800c0a6:	d105      	bne.n	800c0b4 <std+0x54>
 800c0a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b0:	f000 b9c0 	b.w	800c434 <__retarget_lock_init_recursive>
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	bf00      	nop
 800c0b8:	0800c24d 	.word	0x0800c24d
 800c0bc:	0800c26f 	.word	0x0800c26f
 800c0c0:	0800c2a7 	.word	0x0800c2a7
 800c0c4:	0800c2cb 	.word	0x0800c2cb
 800c0c8:	20000b48 	.word	0x20000b48

0800c0cc <stdio_exit_handler>:
 800c0cc:	4a02      	ldr	r2, [pc, #8]	@ (800c0d8 <stdio_exit_handler+0xc>)
 800c0ce:	4903      	ldr	r1, [pc, #12]	@ (800c0dc <stdio_exit_handler+0x10>)
 800c0d0:	4803      	ldr	r0, [pc, #12]	@ (800c0e0 <stdio_exit_handler+0x14>)
 800c0d2:	f000 b869 	b.w	800c1a8 <_fwalk_sglue>
 800c0d6:	bf00      	nop
 800c0d8:	200000d8 	.word	0x200000d8
 800c0dc:	0800e6dd 	.word	0x0800e6dd
 800c0e0:	20000254 	.word	0x20000254

0800c0e4 <cleanup_stdio>:
 800c0e4:	6841      	ldr	r1, [r0, #4]
 800c0e6:	4b0c      	ldr	r3, [pc, #48]	@ (800c118 <cleanup_stdio+0x34>)
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	b510      	push	{r4, lr}
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	d001      	beq.n	800c0f4 <cleanup_stdio+0x10>
 800c0f0:	f002 faf4 	bl	800e6dc <_fflush_r>
 800c0f4:	68a1      	ldr	r1, [r4, #8]
 800c0f6:	4b09      	ldr	r3, [pc, #36]	@ (800c11c <cleanup_stdio+0x38>)
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	d002      	beq.n	800c102 <cleanup_stdio+0x1e>
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f002 faed 	bl	800e6dc <_fflush_r>
 800c102:	68e1      	ldr	r1, [r4, #12]
 800c104:	4b06      	ldr	r3, [pc, #24]	@ (800c120 <cleanup_stdio+0x3c>)
 800c106:	4299      	cmp	r1, r3
 800c108:	d004      	beq.n	800c114 <cleanup_stdio+0x30>
 800c10a:	4620      	mov	r0, r4
 800c10c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c110:	f002 bae4 	b.w	800e6dc <_fflush_r>
 800c114:	bd10      	pop	{r4, pc}
 800c116:	bf00      	nop
 800c118:	20000b48 	.word	0x20000b48
 800c11c:	20000bb0 	.word	0x20000bb0
 800c120:	20000c18 	.word	0x20000c18

0800c124 <global_stdio_init.part.0>:
 800c124:	b510      	push	{r4, lr}
 800c126:	4b0b      	ldr	r3, [pc, #44]	@ (800c154 <global_stdio_init.part.0+0x30>)
 800c128:	4c0b      	ldr	r4, [pc, #44]	@ (800c158 <global_stdio_init.part.0+0x34>)
 800c12a:	4a0c      	ldr	r2, [pc, #48]	@ (800c15c <global_stdio_init.part.0+0x38>)
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	4620      	mov	r0, r4
 800c130:	2200      	movs	r2, #0
 800c132:	2104      	movs	r1, #4
 800c134:	f7ff ff94 	bl	800c060 <std>
 800c138:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c13c:	2201      	movs	r2, #1
 800c13e:	2109      	movs	r1, #9
 800c140:	f7ff ff8e 	bl	800c060 <std>
 800c144:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c148:	2202      	movs	r2, #2
 800c14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c14e:	2112      	movs	r1, #18
 800c150:	f7ff bf86 	b.w	800c060 <std>
 800c154:	20000c80 	.word	0x20000c80
 800c158:	20000b48 	.word	0x20000b48
 800c15c:	0800c0cd 	.word	0x0800c0cd

0800c160 <__sfp_lock_acquire>:
 800c160:	4801      	ldr	r0, [pc, #4]	@ (800c168 <__sfp_lock_acquire+0x8>)
 800c162:	f000 b968 	b.w	800c436 <__retarget_lock_acquire_recursive>
 800c166:	bf00      	nop
 800c168:	20000c89 	.word	0x20000c89

0800c16c <__sfp_lock_release>:
 800c16c:	4801      	ldr	r0, [pc, #4]	@ (800c174 <__sfp_lock_release+0x8>)
 800c16e:	f000 b963 	b.w	800c438 <__retarget_lock_release_recursive>
 800c172:	bf00      	nop
 800c174:	20000c89 	.word	0x20000c89

0800c178 <__sinit>:
 800c178:	b510      	push	{r4, lr}
 800c17a:	4604      	mov	r4, r0
 800c17c:	f7ff fff0 	bl	800c160 <__sfp_lock_acquire>
 800c180:	6a23      	ldr	r3, [r4, #32]
 800c182:	b11b      	cbz	r3, 800c18c <__sinit+0x14>
 800c184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c188:	f7ff bff0 	b.w	800c16c <__sfp_lock_release>
 800c18c:	4b04      	ldr	r3, [pc, #16]	@ (800c1a0 <__sinit+0x28>)
 800c18e:	6223      	str	r3, [r4, #32]
 800c190:	4b04      	ldr	r3, [pc, #16]	@ (800c1a4 <__sinit+0x2c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1f5      	bne.n	800c184 <__sinit+0xc>
 800c198:	f7ff ffc4 	bl	800c124 <global_stdio_init.part.0>
 800c19c:	e7f2      	b.n	800c184 <__sinit+0xc>
 800c19e:	bf00      	nop
 800c1a0:	0800c0e5 	.word	0x0800c0e5
 800c1a4:	20000c80 	.word	0x20000c80

0800c1a8 <_fwalk_sglue>:
 800c1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	4688      	mov	r8, r1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	2600      	movs	r6, #0
 800c1b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1b8:	f1b9 0901 	subs.w	r9, r9, #1
 800c1bc:	d505      	bpl.n	800c1ca <_fwalk_sglue+0x22>
 800c1be:	6824      	ldr	r4, [r4, #0]
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	d1f7      	bne.n	800c1b4 <_fwalk_sglue+0xc>
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d907      	bls.n	800c1e0 <_fwalk_sglue+0x38>
 800c1d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	d003      	beq.n	800c1e0 <_fwalk_sglue+0x38>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	4306      	orrs	r6, r0
 800c1e0:	3568      	adds	r5, #104	@ 0x68
 800c1e2:	e7e9      	b.n	800c1b8 <_fwalk_sglue+0x10>

0800c1e4 <sniprintf>:
 800c1e4:	b40c      	push	{r2, r3}
 800c1e6:	b530      	push	{r4, r5, lr}
 800c1e8:	4b17      	ldr	r3, [pc, #92]	@ (800c248 <sniprintf+0x64>)
 800c1ea:	1e0c      	subs	r4, r1, #0
 800c1ec:	681d      	ldr	r5, [r3, #0]
 800c1ee:	b09d      	sub	sp, #116	@ 0x74
 800c1f0:	da08      	bge.n	800c204 <sniprintf+0x20>
 800c1f2:	238b      	movs	r3, #139	@ 0x8b
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fa:	b01d      	add	sp, #116	@ 0x74
 800c1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c200:	b002      	add	sp, #8
 800c202:	4770      	bx	lr
 800c204:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c208:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c20c:	bf14      	ite	ne
 800c20e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c212:	4623      	moveq	r3, r4
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	9307      	str	r3, [sp, #28]
 800c218:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c21c:	9002      	str	r0, [sp, #8]
 800c21e:	9006      	str	r0, [sp, #24]
 800c220:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c224:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c226:	ab21      	add	r3, sp, #132	@ 0x84
 800c228:	a902      	add	r1, sp, #8
 800c22a:	4628      	mov	r0, r5
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f002 f8d5 	bl	800e3dc <_svfiprintf_r>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	bfbc      	itt	lt
 800c236:	238b      	movlt	r3, #139	@ 0x8b
 800c238:	602b      	strlt	r3, [r5, #0]
 800c23a:	2c00      	cmp	r4, #0
 800c23c:	d0dd      	beq.n	800c1fa <sniprintf+0x16>
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	2200      	movs	r2, #0
 800c242:	701a      	strb	r2, [r3, #0]
 800c244:	e7d9      	b.n	800c1fa <sniprintf+0x16>
 800c246:	bf00      	nop
 800c248:	20000250 	.word	0x20000250

0800c24c <__sread>:
 800c24c:	b510      	push	{r4, lr}
 800c24e:	460c      	mov	r4, r1
 800c250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c254:	f000 f8a0 	bl	800c398 <_read_r>
 800c258:	2800      	cmp	r0, #0
 800c25a:	bfab      	itete	ge
 800c25c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c25e:	89a3      	ldrhlt	r3, [r4, #12]
 800c260:	181b      	addge	r3, r3, r0
 800c262:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c266:	bfac      	ite	ge
 800c268:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c26a:	81a3      	strhlt	r3, [r4, #12]
 800c26c:	bd10      	pop	{r4, pc}

0800c26e <__swrite>:
 800c26e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c272:	461f      	mov	r7, r3
 800c274:	898b      	ldrh	r3, [r1, #12]
 800c276:	05db      	lsls	r3, r3, #23
 800c278:	4605      	mov	r5, r0
 800c27a:	460c      	mov	r4, r1
 800c27c:	4616      	mov	r6, r2
 800c27e:	d505      	bpl.n	800c28c <__swrite+0x1e>
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	2302      	movs	r3, #2
 800c286:	2200      	movs	r2, #0
 800c288:	f000 f874 	bl	800c374 <_lseek_r>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	4632      	mov	r2, r6
 800c29a:	463b      	mov	r3, r7
 800c29c:	4628      	mov	r0, r5
 800c29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a2:	f000 b88b 	b.w	800c3bc <_write_r>

0800c2a6 <__sseek>:
 800c2a6:	b510      	push	{r4, lr}
 800c2a8:	460c      	mov	r4, r1
 800c2aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ae:	f000 f861 	bl	800c374 <_lseek_r>
 800c2b2:	1c43      	adds	r3, r0, #1
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	bf15      	itete	ne
 800c2b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c2ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c2be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c2c2:	81a3      	strheq	r3, [r4, #12]
 800c2c4:	bf18      	it	ne
 800c2c6:	81a3      	strhne	r3, [r4, #12]
 800c2c8:	bd10      	pop	{r4, pc}

0800c2ca <__sclose>:
 800c2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ce:	f000 b841 	b.w	800c354 <_close_r>

0800c2d2 <memset>:
 800c2d2:	4402      	add	r2, r0
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d100      	bne.n	800c2dc <memset+0xa>
 800c2da:	4770      	bx	lr
 800c2dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c2e0:	e7f9      	b.n	800c2d6 <memset+0x4>

0800c2e2 <strcat>:
 800c2e2:	b510      	push	{r4, lr}
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	7814      	ldrb	r4, [r2, #0]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	3201      	adds	r2, #1
 800c2ec:	2c00      	cmp	r4, #0
 800c2ee:	d1fa      	bne.n	800c2e6 <strcat+0x4>
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	d1f9      	bne.n	800c2f2 <strcat+0x10>
 800c2fe:	bd10      	pop	{r4, pc}

0800c300 <strncmp>:
 800c300:	b510      	push	{r4, lr}
 800c302:	b16a      	cbz	r2, 800c320 <strncmp+0x20>
 800c304:	3901      	subs	r1, #1
 800c306:	1884      	adds	r4, r0, r2
 800c308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c30c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c310:	429a      	cmp	r2, r3
 800c312:	d103      	bne.n	800c31c <strncmp+0x1c>
 800c314:	42a0      	cmp	r0, r4
 800c316:	d001      	beq.n	800c31c <strncmp+0x1c>
 800c318:	2a00      	cmp	r2, #0
 800c31a:	d1f5      	bne.n	800c308 <strncmp+0x8>
 800c31c:	1ad0      	subs	r0, r2, r3
 800c31e:	bd10      	pop	{r4, pc}
 800c320:	4610      	mov	r0, r2
 800c322:	e7fc      	b.n	800c31e <strncmp+0x1e>

0800c324 <strncpy>:
 800c324:	b510      	push	{r4, lr}
 800c326:	3901      	subs	r1, #1
 800c328:	4603      	mov	r3, r0
 800c32a:	b132      	cbz	r2, 800c33a <strncpy+0x16>
 800c32c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c330:	f803 4b01 	strb.w	r4, [r3], #1
 800c334:	3a01      	subs	r2, #1
 800c336:	2c00      	cmp	r4, #0
 800c338:	d1f7      	bne.n	800c32a <strncpy+0x6>
 800c33a:	441a      	add	r2, r3
 800c33c:	2100      	movs	r1, #0
 800c33e:	4293      	cmp	r3, r2
 800c340:	d100      	bne.n	800c344 <strncpy+0x20>
 800c342:	bd10      	pop	{r4, pc}
 800c344:	f803 1b01 	strb.w	r1, [r3], #1
 800c348:	e7f9      	b.n	800c33e <strncpy+0x1a>
	...

0800c34c <_localeconv_r>:
 800c34c:	4800      	ldr	r0, [pc, #0]	@ (800c350 <_localeconv_r+0x4>)
 800c34e:	4770      	bx	lr
 800c350:	200001d4 	.word	0x200001d4

0800c354 <_close_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	@ (800c370 <_close_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f9 fb42 	bl	80059e8 <_close>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_close_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_close_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	20000c84 	.word	0x20000c84

0800c374 <_lseek_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	@ (800c394 <_lseek_r+0x20>)
 800c378:	4604      	mov	r4, r0
 800c37a:	4608      	mov	r0, r1
 800c37c:	4611      	mov	r1, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	602a      	str	r2, [r5, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	f7f9 fb57 	bl	8005a36 <_lseek>
 800c388:	1c43      	adds	r3, r0, #1
 800c38a:	d102      	bne.n	800c392 <_lseek_r+0x1e>
 800c38c:	682b      	ldr	r3, [r5, #0]
 800c38e:	b103      	cbz	r3, 800c392 <_lseek_r+0x1e>
 800c390:	6023      	str	r3, [r4, #0]
 800c392:	bd38      	pop	{r3, r4, r5, pc}
 800c394:	20000c84 	.word	0x20000c84

0800c398 <_read_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d07      	ldr	r5, [pc, #28]	@ (800c3b8 <_read_r+0x20>)
 800c39c:	4604      	mov	r4, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	602a      	str	r2, [r5, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f9 fae5 	bl	8005976 <_read>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_read_r+0x1e>
 800c3b0:	682b      	ldr	r3, [r5, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_read_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	20000c84 	.word	0x20000c84

0800c3bc <_write_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d07      	ldr	r5, [pc, #28]	@ (800c3dc <_write_r+0x20>)
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	602a      	str	r2, [r5, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f7f9 faf0 	bl	80059b0 <_write>
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	d102      	bne.n	800c3da <_write_r+0x1e>
 800c3d4:	682b      	ldr	r3, [r5, #0]
 800c3d6:	b103      	cbz	r3, 800c3da <_write_r+0x1e>
 800c3d8:	6023      	str	r3, [r4, #0]
 800c3da:	bd38      	pop	{r3, r4, r5, pc}
 800c3dc:	20000c84 	.word	0x20000c84

0800c3e0 <__errno>:
 800c3e0:	4b01      	ldr	r3, [pc, #4]	@ (800c3e8 <__errno+0x8>)
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20000250 	.word	0x20000250

0800c3ec <__libc_init_array>:
 800c3ec:	b570      	push	{r4, r5, r6, lr}
 800c3ee:	4d0d      	ldr	r5, [pc, #52]	@ (800c424 <__libc_init_array+0x38>)
 800c3f0:	4c0d      	ldr	r4, [pc, #52]	@ (800c428 <__libc_init_array+0x3c>)
 800c3f2:	1b64      	subs	r4, r4, r5
 800c3f4:	10a4      	asrs	r4, r4, #2
 800c3f6:	2600      	movs	r6, #0
 800c3f8:	42a6      	cmp	r6, r4
 800c3fa:	d109      	bne.n	800c410 <__libc_init_array+0x24>
 800c3fc:	4d0b      	ldr	r5, [pc, #44]	@ (800c42c <__libc_init_array+0x40>)
 800c3fe:	4c0c      	ldr	r4, [pc, #48]	@ (800c430 <__libc_init_array+0x44>)
 800c400:	f003 fc7a 	bl	800fcf8 <_init>
 800c404:	1b64      	subs	r4, r4, r5
 800c406:	10a4      	asrs	r4, r4, #2
 800c408:	2600      	movs	r6, #0
 800c40a:	42a6      	cmp	r6, r4
 800c40c:	d105      	bne.n	800c41a <__libc_init_array+0x2e>
 800c40e:	bd70      	pop	{r4, r5, r6, pc}
 800c410:	f855 3b04 	ldr.w	r3, [r5], #4
 800c414:	4798      	blx	r3
 800c416:	3601      	adds	r6, #1
 800c418:	e7ee      	b.n	800c3f8 <__libc_init_array+0xc>
 800c41a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c41e:	4798      	blx	r3
 800c420:	3601      	adds	r6, #1
 800c422:	e7f2      	b.n	800c40a <__libc_init_array+0x1e>
 800c424:	080104d0 	.word	0x080104d0
 800c428:	080104d0 	.word	0x080104d0
 800c42c:	080104d0 	.word	0x080104d0
 800c430:	080104d4 	.word	0x080104d4

0800c434 <__retarget_lock_init_recursive>:
 800c434:	4770      	bx	lr

0800c436 <__retarget_lock_acquire_recursive>:
 800c436:	4770      	bx	lr

0800c438 <__retarget_lock_release_recursive>:
 800c438:	4770      	bx	lr

0800c43a <strcpy>:
 800c43a:	4603      	mov	r3, r0
 800c43c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c440:	f803 2b01 	strb.w	r2, [r3], #1
 800c444:	2a00      	cmp	r2, #0
 800c446:	d1f9      	bne.n	800c43c <strcpy+0x2>
 800c448:	4770      	bx	lr

0800c44a <memcpy>:
 800c44a:	440a      	add	r2, r1
 800c44c:	4291      	cmp	r1, r2
 800c44e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c452:	d100      	bne.n	800c456 <memcpy+0xc>
 800c454:	4770      	bx	lr
 800c456:	b510      	push	{r4, lr}
 800c458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c45c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c460:	4291      	cmp	r1, r2
 800c462:	d1f9      	bne.n	800c458 <memcpy+0xe>
 800c464:	bd10      	pop	{r4, pc}
	...

0800c468 <nan>:
 800c468:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c470 <nan+0x8>
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	00000000 	.word	0x00000000
 800c474:	7ff80000 	.word	0x7ff80000

0800c478 <quorem>:
 800c478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c47c:	6903      	ldr	r3, [r0, #16]
 800c47e:	690c      	ldr	r4, [r1, #16]
 800c480:	42a3      	cmp	r3, r4
 800c482:	4607      	mov	r7, r0
 800c484:	db7e      	blt.n	800c584 <quorem+0x10c>
 800c486:	3c01      	subs	r4, #1
 800c488:	f101 0814 	add.w	r8, r1, #20
 800c48c:	00a3      	lsls	r3, r4, #2
 800c48e:	f100 0514 	add.w	r5, r0, #20
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c49e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4ae:	d32e      	bcc.n	800c50e <quorem+0x96>
 800c4b0:	f04f 0a00 	mov.w	sl, #0
 800c4b4:	46c4      	mov	ip, r8
 800c4b6:	46ae      	mov	lr, r5
 800c4b8:	46d3      	mov	fp, sl
 800c4ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4be:	b298      	uxth	r0, r3
 800c4c0:	fb06 a000 	mla	r0, r6, r0, sl
 800c4c4:	0c02      	lsrs	r2, r0, #16
 800c4c6:	0c1b      	lsrs	r3, r3, #16
 800c4c8:	fb06 2303 	mla	r3, r6, r3, r2
 800c4cc:	f8de 2000 	ldr.w	r2, [lr]
 800c4d0:	b280      	uxth	r0, r0
 800c4d2:	b292      	uxth	r2, r2
 800c4d4:	1a12      	subs	r2, r2, r0
 800c4d6:	445a      	add	r2, fp
 800c4d8:	f8de 0000 	ldr.w	r0, [lr]
 800c4dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c4e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c4f0:	45e1      	cmp	r9, ip
 800c4f2:	f84e 2b04 	str.w	r2, [lr], #4
 800c4f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c4fa:	d2de      	bcs.n	800c4ba <quorem+0x42>
 800c4fc:	9b00      	ldr	r3, [sp, #0]
 800c4fe:	58eb      	ldr	r3, [r5, r3]
 800c500:	b92b      	cbnz	r3, 800c50e <quorem+0x96>
 800c502:	9b01      	ldr	r3, [sp, #4]
 800c504:	3b04      	subs	r3, #4
 800c506:	429d      	cmp	r5, r3
 800c508:	461a      	mov	r2, r3
 800c50a:	d32f      	bcc.n	800c56c <quorem+0xf4>
 800c50c:	613c      	str	r4, [r7, #16]
 800c50e:	4638      	mov	r0, r7
 800c510:	f001 fd0e 	bl	800df30 <__mcmp>
 800c514:	2800      	cmp	r0, #0
 800c516:	db25      	blt.n	800c564 <quorem+0xec>
 800c518:	4629      	mov	r1, r5
 800c51a:	2000      	movs	r0, #0
 800c51c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c520:	f8d1 c000 	ldr.w	ip, [r1]
 800c524:	fa1f fe82 	uxth.w	lr, r2
 800c528:	fa1f f38c 	uxth.w	r3, ip
 800c52c:	eba3 030e 	sub.w	r3, r3, lr
 800c530:	4403      	add	r3, r0
 800c532:	0c12      	lsrs	r2, r2, #16
 800c534:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c538:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c542:	45c1      	cmp	r9, r8
 800c544:	f841 3b04 	str.w	r3, [r1], #4
 800c548:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c54c:	d2e6      	bcs.n	800c51c <quorem+0xa4>
 800c54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c556:	b922      	cbnz	r2, 800c562 <quorem+0xea>
 800c558:	3b04      	subs	r3, #4
 800c55a:	429d      	cmp	r5, r3
 800c55c:	461a      	mov	r2, r3
 800c55e:	d30b      	bcc.n	800c578 <quorem+0x100>
 800c560:	613c      	str	r4, [r7, #16]
 800c562:	3601      	adds	r6, #1
 800c564:	4630      	mov	r0, r6
 800c566:	b003      	add	sp, #12
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	6812      	ldr	r2, [r2, #0]
 800c56e:	3b04      	subs	r3, #4
 800c570:	2a00      	cmp	r2, #0
 800c572:	d1cb      	bne.n	800c50c <quorem+0x94>
 800c574:	3c01      	subs	r4, #1
 800c576:	e7c6      	b.n	800c506 <quorem+0x8e>
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	3b04      	subs	r3, #4
 800c57c:	2a00      	cmp	r2, #0
 800c57e:	d1ef      	bne.n	800c560 <quorem+0xe8>
 800c580:	3c01      	subs	r4, #1
 800c582:	e7ea      	b.n	800c55a <quorem+0xe2>
 800c584:	2000      	movs	r0, #0
 800c586:	e7ee      	b.n	800c566 <quorem+0xee>

0800c588 <_dtoa_r>:
 800c588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c58c:	69c7      	ldr	r7, [r0, #28]
 800c58e:	b099      	sub	sp, #100	@ 0x64
 800c590:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c594:	ec55 4b10 	vmov	r4, r5, d0
 800c598:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c59a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c59c:	4683      	mov	fp, r0
 800c59e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5a2:	b97f      	cbnz	r7, 800c5c4 <_dtoa_r+0x3c>
 800c5a4:	2010      	movs	r0, #16
 800c5a6:	f001 f937 	bl	800d818 <malloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800c5b0:	b920      	cbnz	r0, 800c5bc <_dtoa_r+0x34>
 800c5b2:	4ba7      	ldr	r3, [pc, #668]	@ (800c850 <_dtoa_r+0x2c8>)
 800c5b4:	21ef      	movs	r1, #239	@ 0xef
 800c5b6:	48a7      	ldr	r0, [pc, #668]	@ (800c854 <_dtoa_r+0x2cc>)
 800c5b8:	f002 f8e2 	bl	800e780 <__assert_func>
 800c5bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c5c0:	6007      	str	r7, [r0, #0]
 800c5c2:	60c7      	str	r7, [r0, #12]
 800c5c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5c8:	6819      	ldr	r1, [r3, #0]
 800c5ca:	b159      	cbz	r1, 800c5e4 <_dtoa_r+0x5c>
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	604a      	str	r2, [r1, #4]
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4093      	lsls	r3, r2
 800c5d4:	608b      	str	r3, [r1, #8]
 800c5d6:	4658      	mov	r0, fp
 800c5d8:	f001 fa26 	bl	800da28 <_Bfree>
 800c5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	601a      	str	r2, [r3, #0]
 800c5e4:	1e2b      	subs	r3, r5, #0
 800c5e6:	bfb9      	ittee	lt
 800c5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c5ec:	9303      	strlt	r3, [sp, #12]
 800c5ee:	2300      	movge	r3, #0
 800c5f0:	6033      	strge	r3, [r6, #0]
 800c5f2:	9f03      	ldr	r7, [sp, #12]
 800c5f4:	4b98      	ldr	r3, [pc, #608]	@ (800c858 <_dtoa_r+0x2d0>)
 800c5f6:	bfbc      	itt	lt
 800c5f8:	2201      	movlt	r2, #1
 800c5fa:	6032      	strlt	r2, [r6, #0]
 800c5fc:	43bb      	bics	r3, r7
 800c5fe:	d112      	bne.n	800c626 <_dtoa_r+0x9e>
 800c600:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c602:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c60c:	4323      	orrs	r3, r4
 800c60e:	f000 854d 	beq.w	800d0ac <_dtoa_r+0xb24>
 800c612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c614:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c86c <_dtoa_r+0x2e4>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 854f 	beq.w	800d0bc <_dtoa_r+0xb34>
 800c61e:	f10a 0303 	add.w	r3, sl, #3
 800c622:	f000 bd49 	b.w	800d0b8 <_dtoa_r+0xb30>
 800c626:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c62a:	2200      	movs	r2, #0
 800c62c:	ec51 0b17 	vmov	r0, r1, d7
 800c630:	2300      	movs	r3, #0
 800c632:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c636:	f7f4 fa67 	bl	8000b08 <__aeabi_dcmpeq>
 800c63a:	4680      	mov	r8, r0
 800c63c:	b158      	cbz	r0, 800c656 <_dtoa_r+0xce>
 800c63e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c640:	2301      	movs	r3, #1
 800c642:	6013      	str	r3, [r2, #0]
 800c644:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c646:	b113      	cbz	r3, 800c64e <_dtoa_r+0xc6>
 800c648:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c64a:	4b84      	ldr	r3, [pc, #528]	@ (800c85c <_dtoa_r+0x2d4>)
 800c64c:	6013      	str	r3, [r2, #0]
 800c64e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c870 <_dtoa_r+0x2e8>
 800c652:	f000 bd33 	b.w	800d0bc <_dtoa_r+0xb34>
 800c656:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c65a:	aa16      	add	r2, sp, #88	@ 0x58
 800c65c:	a917      	add	r1, sp, #92	@ 0x5c
 800c65e:	4658      	mov	r0, fp
 800c660:	f001 fd86 	bl	800e170 <__d2b>
 800c664:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c668:	4681      	mov	r9, r0
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	d077      	beq.n	800c75e <_dtoa_r+0x1d6>
 800c66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c670:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c67c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c680:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c684:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c688:	4619      	mov	r1, r3
 800c68a:	2200      	movs	r2, #0
 800c68c:	4b74      	ldr	r3, [pc, #464]	@ (800c860 <_dtoa_r+0x2d8>)
 800c68e:	f7f3 fe1b 	bl	80002c8 <__aeabi_dsub>
 800c692:	a369      	add	r3, pc, #420	@ (adr r3, 800c838 <_dtoa_r+0x2b0>)
 800c694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c698:	f7f3 ffce 	bl	8000638 <__aeabi_dmul>
 800c69c:	a368      	add	r3, pc, #416	@ (adr r3, 800c840 <_dtoa_r+0x2b8>)
 800c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a2:	f7f3 fe13 	bl	80002cc <__adddf3>
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	460d      	mov	r5, r1
 800c6ac:	f7f3 ff5a 	bl	8000564 <__aeabi_i2d>
 800c6b0:	a365      	add	r3, pc, #404	@ (adr r3, 800c848 <_dtoa_r+0x2c0>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f3 ffbf 	bl	8000638 <__aeabi_dmul>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4620      	mov	r0, r4
 800c6c0:	4629      	mov	r1, r5
 800c6c2:	f7f3 fe03 	bl	80002cc <__adddf3>
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	460d      	mov	r5, r1
 800c6ca:	f7f4 fa65 	bl	8000b98 <__aeabi_d2iz>
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f4 fa20 	bl	8000b1c <__aeabi_dcmplt>
 800c6dc:	b140      	cbz	r0, 800c6f0 <_dtoa_r+0x168>
 800c6de:	4638      	mov	r0, r7
 800c6e0:	f7f3 ff40 	bl	8000564 <__aeabi_i2d>
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	462b      	mov	r3, r5
 800c6e8:	f7f4 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 800c6ec:	b900      	cbnz	r0, 800c6f0 <_dtoa_r+0x168>
 800c6ee:	3f01      	subs	r7, #1
 800c6f0:	2f16      	cmp	r7, #22
 800c6f2:	d851      	bhi.n	800c798 <_dtoa_r+0x210>
 800c6f4:	4b5b      	ldr	r3, [pc, #364]	@ (800c864 <_dtoa_r+0x2dc>)
 800c6f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c702:	f7f4 fa0b 	bl	8000b1c <__aeabi_dcmplt>
 800c706:	2800      	cmp	r0, #0
 800c708:	d048      	beq.n	800c79c <_dtoa_r+0x214>
 800c70a:	3f01      	subs	r7, #1
 800c70c:	2300      	movs	r3, #0
 800c70e:	9312      	str	r3, [sp, #72]	@ 0x48
 800c710:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c712:	1b9b      	subs	r3, r3, r6
 800c714:	1e5a      	subs	r2, r3, #1
 800c716:	bf44      	itt	mi
 800c718:	f1c3 0801 	rsbmi	r8, r3, #1
 800c71c:	2300      	movmi	r3, #0
 800c71e:	9208      	str	r2, [sp, #32]
 800c720:	bf54      	ite	pl
 800c722:	f04f 0800 	movpl.w	r8, #0
 800c726:	9308      	strmi	r3, [sp, #32]
 800c728:	2f00      	cmp	r7, #0
 800c72a:	db39      	blt.n	800c7a0 <_dtoa_r+0x218>
 800c72c:	9b08      	ldr	r3, [sp, #32]
 800c72e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c730:	443b      	add	r3, r7
 800c732:	9308      	str	r3, [sp, #32]
 800c734:	2300      	movs	r3, #0
 800c736:	930a      	str	r3, [sp, #40]	@ 0x28
 800c738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73a:	2b09      	cmp	r3, #9
 800c73c:	d864      	bhi.n	800c808 <_dtoa_r+0x280>
 800c73e:	2b05      	cmp	r3, #5
 800c740:	bfc4      	itt	gt
 800c742:	3b04      	subgt	r3, #4
 800c744:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c748:	f1a3 0302 	sub.w	r3, r3, #2
 800c74c:	bfcc      	ite	gt
 800c74e:	2400      	movgt	r4, #0
 800c750:	2401      	movle	r4, #1
 800c752:	2b03      	cmp	r3, #3
 800c754:	d863      	bhi.n	800c81e <_dtoa_r+0x296>
 800c756:	e8df f003 	tbb	[pc, r3]
 800c75a:	372a      	.short	0x372a
 800c75c:	5535      	.short	0x5535
 800c75e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c762:	441e      	add	r6, r3
 800c764:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c768:	2b20      	cmp	r3, #32
 800c76a:	bfc1      	itttt	gt
 800c76c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c770:	409f      	lslgt	r7, r3
 800c772:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c776:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c77a:	bfd6      	itet	le
 800c77c:	f1c3 0320 	rsble	r3, r3, #32
 800c780:	ea47 0003 	orrgt.w	r0, r7, r3
 800c784:	fa04 f003 	lslle.w	r0, r4, r3
 800c788:	f7f3 fedc 	bl	8000544 <__aeabi_ui2d>
 800c78c:	2201      	movs	r2, #1
 800c78e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c792:	3e01      	subs	r6, #1
 800c794:	9214      	str	r2, [sp, #80]	@ 0x50
 800c796:	e777      	b.n	800c688 <_dtoa_r+0x100>
 800c798:	2301      	movs	r3, #1
 800c79a:	e7b8      	b.n	800c70e <_dtoa_r+0x186>
 800c79c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c79e:	e7b7      	b.n	800c710 <_dtoa_r+0x188>
 800c7a0:	427b      	negs	r3, r7
 800c7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	eba8 0807 	sub.w	r8, r8, r7
 800c7aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7ac:	e7c4      	b.n	800c738 <_dtoa_r+0x1b0>
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc35      	bgt.n	800c824 <_dtoa_r+0x29c>
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	9307      	str	r3, [sp, #28]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7c2:	e00b      	b.n	800c7dc <_dtoa_r+0x254>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e7f3      	b.n	800c7b0 <_dtoa_r+0x228>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7ce:	18fb      	adds	r3, r7, r3
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	bfb8      	it	lt
 800c7da:	2301      	movlt	r3, #1
 800c7dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	2204      	movs	r2, #4
 800c7e4:	f102 0514 	add.w	r5, r2, #20
 800c7e8:	429d      	cmp	r5, r3
 800c7ea:	d91f      	bls.n	800c82c <_dtoa_r+0x2a4>
 800c7ec:	6041      	str	r1, [r0, #4]
 800c7ee:	4658      	mov	r0, fp
 800c7f0:	f001 f8da 	bl	800d9a8 <_Balloc>
 800c7f4:	4682      	mov	sl, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d13c      	bne.n	800c874 <_dtoa_r+0x2ec>
 800c7fa:	4b1b      	ldr	r3, [pc, #108]	@ (800c868 <_dtoa_r+0x2e0>)
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800c802:	e6d8      	b.n	800c5b6 <_dtoa_r+0x2e>
 800c804:	2301      	movs	r3, #1
 800c806:	e7e0      	b.n	800c7ca <_dtoa_r+0x242>
 800c808:	2401      	movs	r4, #1
 800c80a:	2300      	movs	r3, #0
 800c80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c80e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c810:	f04f 33ff 	mov.w	r3, #4294967295
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	9307      	str	r3, [sp, #28]
 800c818:	2200      	movs	r2, #0
 800c81a:	2312      	movs	r3, #18
 800c81c:	e7d0      	b.n	800c7c0 <_dtoa_r+0x238>
 800c81e:	2301      	movs	r3, #1
 800c820:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c822:	e7f5      	b.n	800c810 <_dtoa_r+0x288>
 800c824:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	9307      	str	r3, [sp, #28]
 800c82a:	e7d7      	b.n	800c7dc <_dtoa_r+0x254>
 800c82c:	3101      	adds	r1, #1
 800c82e:	0052      	lsls	r2, r2, #1
 800c830:	e7d8      	b.n	800c7e4 <_dtoa_r+0x25c>
 800c832:	bf00      	nop
 800c834:	f3af 8000 	nop.w
 800c838:	636f4361 	.word	0x636f4361
 800c83c:	3fd287a7 	.word	0x3fd287a7
 800c840:	8b60c8b3 	.word	0x8b60c8b3
 800c844:	3fc68a28 	.word	0x3fc68a28
 800c848:	509f79fb 	.word	0x509f79fb
 800c84c:	3fd34413 	.word	0x3fd34413
 800c850:	080101ba 	.word	0x080101ba
 800c854:	080101d1 	.word	0x080101d1
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	08010182 	.word	0x08010182
 800c860:	3ff80000 	.word	0x3ff80000
 800c864:	08010328 	.word	0x08010328
 800c868:	08010229 	.word	0x08010229
 800c86c:	080101b6 	.word	0x080101b6
 800c870:	08010181 	.word	0x08010181
 800c874:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c878:	6018      	str	r0, [r3, #0]
 800c87a:	9b07      	ldr	r3, [sp, #28]
 800c87c:	2b0e      	cmp	r3, #14
 800c87e:	f200 80a4 	bhi.w	800c9ca <_dtoa_r+0x442>
 800c882:	2c00      	cmp	r4, #0
 800c884:	f000 80a1 	beq.w	800c9ca <_dtoa_r+0x442>
 800c888:	2f00      	cmp	r7, #0
 800c88a:	dd33      	ble.n	800c8f4 <_dtoa_r+0x36c>
 800c88c:	4bad      	ldr	r3, [pc, #692]	@ (800cb44 <_dtoa_r+0x5bc>)
 800c88e:	f007 020f 	and.w	r2, r7, #15
 800c892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c896:	ed93 7b00 	vldr	d7, [r3]
 800c89a:	05f8      	lsls	r0, r7, #23
 800c89c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c8a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c8a4:	d516      	bpl.n	800c8d4 <_dtoa_r+0x34c>
 800c8a6:	4ba8      	ldr	r3, [pc, #672]	@ (800cb48 <_dtoa_r+0x5c0>)
 800c8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8b0:	f7f3 ffec 	bl	800088c <__aeabi_ddiv>
 800c8b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8b8:	f004 040f 	and.w	r4, r4, #15
 800c8bc:	2603      	movs	r6, #3
 800c8be:	4da2      	ldr	r5, [pc, #648]	@ (800cb48 <_dtoa_r+0x5c0>)
 800c8c0:	b954      	cbnz	r4, 800c8d8 <_dtoa_r+0x350>
 800c8c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ca:	f7f3 ffdf 	bl	800088c <__aeabi_ddiv>
 800c8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8d2:	e028      	b.n	800c926 <_dtoa_r+0x39e>
 800c8d4:	2602      	movs	r6, #2
 800c8d6:	e7f2      	b.n	800c8be <_dtoa_r+0x336>
 800c8d8:	07e1      	lsls	r1, r4, #31
 800c8da:	d508      	bpl.n	800c8ee <_dtoa_r+0x366>
 800c8dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8e4:	f7f3 fea8 	bl	8000638 <__aeabi_dmul>
 800c8e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8ec:	3601      	adds	r6, #1
 800c8ee:	1064      	asrs	r4, r4, #1
 800c8f0:	3508      	adds	r5, #8
 800c8f2:	e7e5      	b.n	800c8c0 <_dtoa_r+0x338>
 800c8f4:	f000 80d2 	beq.w	800ca9c <_dtoa_r+0x514>
 800c8f8:	427c      	negs	r4, r7
 800c8fa:	4b92      	ldr	r3, [pc, #584]	@ (800cb44 <_dtoa_r+0x5bc>)
 800c8fc:	4d92      	ldr	r5, [pc, #584]	@ (800cb48 <_dtoa_r+0x5c0>)
 800c8fe:	f004 020f 	and.w	r2, r4, #15
 800c902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c90e:	f7f3 fe93 	bl	8000638 <__aeabi_dmul>
 800c912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c916:	1124      	asrs	r4, r4, #4
 800c918:	2300      	movs	r3, #0
 800c91a:	2602      	movs	r6, #2
 800c91c:	2c00      	cmp	r4, #0
 800c91e:	f040 80b2 	bne.w	800ca86 <_dtoa_r+0x4fe>
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1d3      	bne.n	800c8ce <_dtoa_r+0x346>
 800c926:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c928:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 80b7 	beq.w	800caa0 <_dtoa_r+0x518>
 800c932:	4b86      	ldr	r3, [pc, #536]	@ (800cb4c <_dtoa_r+0x5c4>)
 800c934:	2200      	movs	r2, #0
 800c936:	4620      	mov	r0, r4
 800c938:	4629      	mov	r1, r5
 800c93a:	f7f4 f8ef 	bl	8000b1c <__aeabi_dcmplt>
 800c93e:	2800      	cmp	r0, #0
 800c940:	f000 80ae 	beq.w	800caa0 <_dtoa_r+0x518>
 800c944:	9b07      	ldr	r3, [sp, #28]
 800c946:	2b00      	cmp	r3, #0
 800c948:	f000 80aa 	beq.w	800caa0 <_dtoa_r+0x518>
 800c94c:	9b00      	ldr	r3, [sp, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dd37      	ble.n	800c9c2 <_dtoa_r+0x43a>
 800c952:	1e7b      	subs	r3, r7, #1
 800c954:	9304      	str	r3, [sp, #16]
 800c956:	4620      	mov	r0, r4
 800c958:	4b7d      	ldr	r3, [pc, #500]	@ (800cb50 <_dtoa_r+0x5c8>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	4629      	mov	r1, r5
 800c95e:	f7f3 fe6b 	bl	8000638 <__aeabi_dmul>
 800c962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c966:	9c00      	ldr	r4, [sp, #0]
 800c968:	3601      	adds	r6, #1
 800c96a:	4630      	mov	r0, r6
 800c96c:	f7f3 fdfa 	bl	8000564 <__aeabi_i2d>
 800c970:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c974:	f7f3 fe60 	bl	8000638 <__aeabi_dmul>
 800c978:	4b76      	ldr	r3, [pc, #472]	@ (800cb54 <_dtoa_r+0x5cc>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	f7f3 fca6 	bl	80002cc <__adddf3>
 800c980:	4605      	mov	r5, r0
 800c982:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c986:	2c00      	cmp	r4, #0
 800c988:	f040 808d 	bne.w	800caa6 <_dtoa_r+0x51e>
 800c98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c990:	4b71      	ldr	r3, [pc, #452]	@ (800cb58 <_dtoa_r+0x5d0>)
 800c992:	2200      	movs	r2, #0
 800c994:	f7f3 fc98 	bl	80002c8 <__aeabi_dsub>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9a0:	462a      	mov	r2, r5
 800c9a2:	4633      	mov	r3, r6
 800c9a4:	f7f4 f8d8 	bl	8000b58 <__aeabi_dcmpgt>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	f040 828b 	bne.w	800cec4 <_dtoa_r+0x93c>
 800c9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9b8:	f7f4 f8b0 	bl	8000b1c <__aeabi_dcmplt>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	f040 8128 	bne.w	800cc12 <_dtoa_r+0x68a>
 800c9c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c9c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c9ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f2c0 815a 	blt.w	800cc86 <_dtoa_r+0x6fe>
 800c9d2:	2f0e      	cmp	r7, #14
 800c9d4:	f300 8157 	bgt.w	800cc86 <_dtoa_r+0x6fe>
 800c9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800cb44 <_dtoa_r+0x5bc>)
 800c9da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c9de:	ed93 7b00 	vldr	d7, [r3]
 800c9e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	ed8d 7b00 	vstr	d7, [sp]
 800c9ea:	da03      	bge.n	800c9f4 <_dtoa_r+0x46c>
 800c9ec:	9b07      	ldr	r3, [sp, #28]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f340 8101 	ble.w	800cbf6 <_dtoa_r+0x66e>
 800c9f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c9f8:	4656      	mov	r6, sl
 800c9fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9fe:	4620      	mov	r0, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	f7f3 ff43 	bl	800088c <__aeabi_ddiv>
 800ca06:	f7f4 f8c7 	bl	8000b98 <__aeabi_d2iz>
 800ca0a:	4680      	mov	r8, r0
 800ca0c:	f7f3 fdaa 	bl	8000564 <__aeabi_i2d>
 800ca10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca14:	f7f3 fe10 	bl	8000638 <__aeabi_dmul>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	460b      	mov	r3, r1
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	4629      	mov	r1, r5
 800ca20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca24:	f7f3 fc50 	bl	80002c8 <__aeabi_dsub>
 800ca28:	f806 4b01 	strb.w	r4, [r6], #1
 800ca2c:	9d07      	ldr	r5, [sp, #28]
 800ca2e:	eba6 040a 	sub.w	r4, r6, sl
 800ca32:	42a5      	cmp	r5, r4
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	f040 8117 	bne.w	800cc6a <_dtoa_r+0x6e2>
 800ca3c:	f7f3 fc46 	bl	80002cc <__adddf3>
 800ca40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca44:	4604      	mov	r4, r0
 800ca46:	460d      	mov	r5, r1
 800ca48:	f7f4 f886 	bl	8000b58 <__aeabi_dcmpgt>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	f040 80f9 	bne.w	800cc44 <_dtoa_r+0x6bc>
 800ca52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca56:	4620      	mov	r0, r4
 800ca58:	4629      	mov	r1, r5
 800ca5a:	f7f4 f855 	bl	8000b08 <__aeabi_dcmpeq>
 800ca5e:	b118      	cbz	r0, 800ca68 <_dtoa_r+0x4e0>
 800ca60:	f018 0f01 	tst.w	r8, #1
 800ca64:	f040 80ee 	bne.w	800cc44 <_dtoa_r+0x6bc>
 800ca68:	4649      	mov	r1, r9
 800ca6a:	4658      	mov	r0, fp
 800ca6c:	f000 ffdc 	bl	800da28 <_Bfree>
 800ca70:	2300      	movs	r3, #0
 800ca72:	7033      	strb	r3, [r6, #0]
 800ca74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca76:	3701      	adds	r7, #1
 800ca78:	601f      	str	r7, [r3, #0]
 800ca7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 831d 	beq.w	800d0bc <_dtoa_r+0xb34>
 800ca82:	601e      	str	r6, [r3, #0]
 800ca84:	e31a      	b.n	800d0bc <_dtoa_r+0xb34>
 800ca86:	07e2      	lsls	r2, r4, #31
 800ca88:	d505      	bpl.n	800ca96 <_dtoa_r+0x50e>
 800ca8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ca8e:	f7f3 fdd3 	bl	8000638 <__aeabi_dmul>
 800ca92:	3601      	adds	r6, #1
 800ca94:	2301      	movs	r3, #1
 800ca96:	1064      	asrs	r4, r4, #1
 800ca98:	3508      	adds	r5, #8
 800ca9a:	e73f      	b.n	800c91c <_dtoa_r+0x394>
 800ca9c:	2602      	movs	r6, #2
 800ca9e:	e742      	b.n	800c926 <_dtoa_r+0x39e>
 800caa0:	9c07      	ldr	r4, [sp, #28]
 800caa2:	9704      	str	r7, [sp, #16]
 800caa4:	e761      	b.n	800c96a <_dtoa_r+0x3e2>
 800caa6:	4b27      	ldr	r3, [pc, #156]	@ (800cb44 <_dtoa_r+0x5bc>)
 800caa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800caaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800caae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cab2:	4454      	add	r4, sl
 800cab4:	2900      	cmp	r1, #0
 800cab6:	d053      	beq.n	800cb60 <_dtoa_r+0x5d8>
 800cab8:	4928      	ldr	r1, [pc, #160]	@ (800cb5c <_dtoa_r+0x5d4>)
 800caba:	2000      	movs	r0, #0
 800cabc:	f7f3 fee6 	bl	800088c <__aeabi_ddiv>
 800cac0:	4633      	mov	r3, r6
 800cac2:	462a      	mov	r2, r5
 800cac4:	f7f3 fc00 	bl	80002c8 <__aeabi_dsub>
 800cac8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cacc:	4656      	mov	r6, sl
 800cace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cad2:	f7f4 f861 	bl	8000b98 <__aeabi_d2iz>
 800cad6:	4605      	mov	r5, r0
 800cad8:	f7f3 fd44 	bl	8000564 <__aeabi_i2d>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae4:	f7f3 fbf0 	bl	80002c8 <__aeabi_dsub>
 800cae8:	3530      	adds	r5, #48	@ 0x30
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800caf2:	f806 5b01 	strb.w	r5, [r6], #1
 800caf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cafa:	f7f4 f80f 	bl	8000b1c <__aeabi_dcmplt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d171      	bne.n	800cbe6 <_dtoa_r+0x65e>
 800cb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb06:	4911      	ldr	r1, [pc, #68]	@ (800cb4c <_dtoa_r+0x5c4>)
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f7f3 fbdd 	bl	80002c8 <__aeabi_dsub>
 800cb0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb12:	f7f4 f803 	bl	8000b1c <__aeabi_dcmplt>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f040 8095 	bne.w	800cc46 <_dtoa_r+0x6be>
 800cb1c:	42a6      	cmp	r6, r4
 800cb1e:	f43f af50 	beq.w	800c9c2 <_dtoa_r+0x43a>
 800cb22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb26:	4b0a      	ldr	r3, [pc, #40]	@ (800cb50 <_dtoa_r+0x5c8>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f7f3 fd85 	bl	8000638 <__aeabi_dmul>
 800cb2e:	4b08      	ldr	r3, [pc, #32]	@ (800cb50 <_dtoa_r+0x5c8>)
 800cb30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb34:	2200      	movs	r2, #0
 800cb36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb3a:	f7f3 fd7d 	bl	8000638 <__aeabi_dmul>
 800cb3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb42:	e7c4      	b.n	800cace <_dtoa_r+0x546>
 800cb44:	08010328 	.word	0x08010328
 800cb48:	08010300 	.word	0x08010300
 800cb4c:	3ff00000 	.word	0x3ff00000
 800cb50:	40240000 	.word	0x40240000
 800cb54:	401c0000 	.word	0x401c0000
 800cb58:	40140000 	.word	0x40140000
 800cb5c:	3fe00000 	.word	0x3fe00000
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	f7f3 fd68 	bl	8000638 <__aeabi_dmul>
 800cb68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb6e:	4656      	mov	r6, sl
 800cb70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb74:	f7f4 f810 	bl	8000b98 <__aeabi_d2iz>
 800cb78:	4605      	mov	r5, r0
 800cb7a:	f7f3 fcf3 	bl	8000564 <__aeabi_i2d>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb86:	f7f3 fb9f 	bl	80002c8 <__aeabi_dsub>
 800cb8a:	3530      	adds	r5, #48	@ 0x30
 800cb8c:	f806 5b01 	strb.w	r5, [r6], #1
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	42a6      	cmp	r6, r4
 800cb96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb9a:	f04f 0200 	mov.w	r2, #0
 800cb9e:	d124      	bne.n	800cbea <_dtoa_r+0x662>
 800cba0:	4bac      	ldr	r3, [pc, #688]	@ (800ce54 <_dtoa_r+0x8cc>)
 800cba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cba6:	f7f3 fb91 	bl	80002cc <__adddf3>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbb2:	f7f3 ffd1 	bl	8000b58 <__aeabi_dcmpgt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d145      	bne.n	800cc46 <_dtoa_r+0x6be>
 800cbba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbbe:	49a5      	ldr	r1, [pc, #660]	@ (800ce54 <_dtoa_r+0x8cc>)
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f7f3 fb81 	bl	80002c8 <__aeabi_dsub>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbce:	f7f3 ffa5 	bl	8000b1c <__aeabi_dcmplt>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f43f aef5 	beq.w	800c9c2 <_dtoa_r+0x43a>
 800cbd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cbda:	1e73      	subs	r3, r6, #1
 800cbdc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cbde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cbe2:	2b30      	cmp	r3, #48	@ 0x30
 800cbe4:	d0f8      	beq.n	800cbd8 <_dtoa_r+0x650>
 800cbe6:	9f04      	ldr	r7, [sp, #16]
 800cbe8:	e73e      	b.n	800ca68 <_dtoa_r+0x4e0>
 800cbea:	4b9b      	ldr	r3, [pc, #620]	@ (800ce58 <_dtoa_r+0x8d0>)
 800cbec:	f7f3 fd24 	bl	8000638 <__aeabi_dmul>
 800cbf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbf4:	e7bc      	b.n	800cb70 <_dtoa_r+0x5e8>
 800cbf6:	d10c      	bne.n	800cc12 <_dtoa_r+0x68a>
 800cbf8:	4b98      	ldr	r3, [pc, #608]	@ (800ce5c <_dtoa_r+0x8d4>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc00:	f7f3 fd1a 	bl	8000638 <__aeabi_dmul>
 800cc04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc08:	f7f3 ff9c 	bl	8000b44 <__aeabi_dcmpge>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	f000 8157 	beq.w	800cec0 <_dtoa_r+0x938>
 800cc12:	2400      	movs	r4, #0
 800cc14:	4625      	mov	r5, r4
 800cc16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc18:	43db      	mvns	r3, r3
 800cc1a:	9304      	str	r3, [sp, #16]
 800cc1c:	4656      	mov	r6, sl
 800cc1e:	2700      	movs	r7, #0
 800cc20:	4621      	mov	r1, r4
 800cc22:	4658      	mov	r0, fp
 800cc24:	f000 ff00 	bl	800da28 <_Bfree>
 800cc28:	2d00      	cmp	r5, #0
 800cc2a:	d0dc      	beq.n	800cbe6 <_dtoa_r+0x65e>
 800cc2c:	b12f      	cbz	r7, 800cc3a <_dtoa_r+0x6b2>
 800cc2e:	42af      	cmp	r7, r5
 800cc30:	d003      	beq.n	800cc3a <_dtoa_r+0x6b2>
 800cc32:	4639      	mov	r1, r7
 800cc34:	4658      	mov	r0, fp
 800cc36:	f000 fef7 	bl	800da28 <_Bfree>
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 fef3 	bl	800da28 <_Bfree>
 800cc42:	e7d0      	b.n	800cbe6 <_dtoa_r+0x65e>
 800cc44:	9704      	str	r7, [sp, #16]
 800cc46:	4633      	mov	r3, r6
 800cc48:	461e      	mov	r6, r3
 800cc4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc4e:	2a39      	cmp	r2, #57	@ 0x39
 800cc50:	d107      	bne.n	800cc62 <_dtoa_r+0x6da>
 800cc52:	459a      	cmp	sl, r3
 800cc54:	d1f8      	bne.n	800cc48 <_dtoa_r+0x6c0>
 800cc56:	9a04      	ldr	r2, [sp, #16]
 800cc58:	3201      	adds	r2, #1
 800cc5a:	9204      	str	r2, [sp, #16]
 800cc5c:	2230      	movs	r2, #48	@ 0x30
 800cc5e:	f88a 2000 	strb.w	r2, [sl]
 800cc62:	781a      	ldrb	r2, [r3, #0]
 800cc64:	3201      	adds	r2, #1
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	e7bd      	b.n	800cbe6 <_dtoa_r+0x65e>
 800cc6a:	4b7b      	ldr	r3, [pc, #492]	@ (800ce58 <_dtoa_r+0x8d0>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f7f3 fce3 	bl	8000638 <__aeabi_dmul>
 800cc72:	2200      	movs	r2, #0
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
 800cc7a:	f7f3 ff45 	bl	8000b08 <__aeabi_dcmpeq>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	f43f aebb 	beq.w	800c9fa <_dtoa_r+0x472>
 800cc84:	e6f0      	b.n	800ca68 <_dtoa_r+0x4e0>
 800cc86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cc88:	2a00      	cmp	r2, #0
 800cc8a:	f000 80db 	beq.w	800ce44 <_dtoa_r+0x8bc>
 800cc8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc90:	2a01      	cmp	r2, #1
 800cc92:	f300 80bf 	bgt.w	800ce14 <_dtoa_r+0x88c>
 800cc96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cc98:	2a00      	cmp	r2, #0
 800cc9a:	f000 80b7 	beq.w	800ce0c <_dtoa_r+0x884>
 800cc9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cca2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cca4:	4646      	mov	r6, r8
 800cca6:	9a08      	ldr	r2, [sp, #32]
 800cca8:	2101      	movs	r1, #1
 800ccaa:	441a      	add	r2, r3
 800ccac:	4658      	mov	r0, fp
 800ccae:	4498      	add	r8, r3
 800ccb0:	9208      	str	r2, [sp, #32]
 800ccb2:	f000 ffb7 	bl	800dc24 <__i2b>
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	b15e      	cbz	r6, 800ccd2 <_dtoa_r+0x74a>
 800ccba:	9b08      	ldr	r3, [sp, #32]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	dd08      	ble.n	800ccd2 <_dtoa_r+0x74a>
 800ccc0:	42b3      	cmp	r3, r6
 800ccc2:	9a08      	ldr	r2, [sp, #32]
 800ccc4:	bfa8      	it	ge
 800ccc6:	4633      	movge	r3, r6
 800ccc8:	eba8 0803 	sub.w	r8, r8, r3
 800cccc:	1af6      	subs	r6, r6, r3
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	9308      	str	r3, [sp, #32]
 800ccd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccd4:	b1f3      	cbz	r3, 800cd14 <_dtoa_r+0x78c>
 800ccd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	f000 80b7 	beq.w	800ce4c <_dtoa_r+0x8c4>
 800ccde:	b18c      	cbz	r4, 800cd04 <_dtoa_r+0x77c>
 800cce0:	4629      	mov	r1, r5
 800cce2:	4622      	mov	r2, r4
 800cce4:	4658      	mov	r0, fp
 800cce6:	f001 f85d 	bl	800dda4 <__pow5mult>
 800ccea:	464a      	mov	r2, r9
 800ccec:	4601      	mov	r1, r0
 800ccee:	4605      	mov	r5, r0
 800ccf0:	4658      	mov	r0, fp
 800ccf2:	f000 ffad 	bl	800dc50 <__multiply>
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	9004      	str	r0, [sp, #16]
 800ccfa:	4658      	mov	r0, fp
 800ccfc:	f000 fe94 	bl	800da28 <_Bfree>
 800cd00:	9b04      	ldr	r3, [sp, #16]
 800cd02:	4699      	mov	r9, r3
 800cd04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd06:	1b1a      	subs	r2, r3, r4
 800cd08:	d004      	beq.n	800cd14 <_dtoa_r+0x78c>
 800cd0a:	4649      	mov	r1, r9
 800cd0c:	4658      	mov	r0, fp
 800cd0e:	f001 f849 	bl	800dda4 <__pow5mult>
 800cd12:	4681      	mov	r9, r0
 800cd14:	2101      	movs	r1, #1
 800cd16:	4658      	mov	r0, fp
 800cd18:	f000 ff84 	bl	800dc24 <__i2b>
 800cd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd1e:	4604      	mov	r4, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 81cf 	beq.w	800d0c4 <_dtoa_r+0xb3c>
 800cd26:	461a      	mov	r2, r3
 800cd28:	4601      	mov	r1, r0
 800cd2a:	4658      	mov	r0, fp
 800cd2c:	f001 f83a 	bl	800dda4 <__pow5mult>
 800cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	4604      	mov	r4, r0
 800cd36:	f300 8095 	bgt.w	800ce64 <_dtoa_r+0x8dc>
 800cd3a:	9b02      	ldr	r3, [sp, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f040 8087 	bne.w	800ce50 <_dtoa_r+0x8c8>
 800cd42:	9b03      	ldr	r3, [sp, #12]
 800cd44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f040 8089 	bne.w	800ce60 <_dtoa_r+0x8d8>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd54:	0d1b      	lsrs	r3, r3, #20
 800cd56:	051b      	lsls	r3, r3, #20
 800cd58:	b12b      	cbz	r3, 800cd66 <_dtoa_r+0x7de>
 800cd5a:	9b08      	ldr	r3, [sp, #32]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	9308      	str	r3, [sp, #32]
 800cd60:	f108 0801 	add.w	r8, r8, #1
 800cd64:	2301      	movs	r3, #1
 800cd66:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f000 81b0 	beq.w	800d0d0 <_dtoa_r+0xb48>
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd76:	6918      	ldr	r0, [r3, #16]
 800cd78:	f000 ff08 	bl	800db8c <__hi0bits>
 800cd7c:	f1c0 0020 	rsb	r0, r0, #32
 800cd80:	9b08      	ldr	r3, [sp, #32]
 800cd82:	4418      	add	r0, r3
 800cd84:	f010 001f 	ands.w	r0, r0, #31
 800cd88:	d077      	beq.n	800ce7a <_dtoa_r+0x8f2>
 800cd8a:	f1c0 0320 	rsb	r3, r0, #32
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	dd6b      	ble.n	800ce6a <_dtoa_r+0x8e2>
 800cd92:	9b08      	ldr	r3, [sp, #32]
 800cd94:	f1c0 001c 	rsb	r0, r0, #28
 800cd98:	4403      	add	r3, r0
 800cd9a:	4480      	add	r8, r0
 800cd9c:	4406      	add	r6, r0
 800cd9e:	9308      	str	r3, [sp, #32]
 800cda0:	f1b8 0f00 	cmp.w	r8, #0
 800cda4:	dd05      	ble.n	800cdb2 <_dtoa_r+0x82a>
 800cda6:	4649      	mov	r1, r9
 800cda8:	4642      	mov	r2, r8
 800cdaa:	4658      	mov	r0, fp
 800cdac:	f001 f854 	bl	800de58 <__lshift>
 800cdb0:	4681      	mov	r9, r0
 800cdb2:	9b08      	ldr	r3, [sp, #32]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	dd05      	ble.n	800cdc4 <_dtoa_r+0x83c>
 800cdb8:	4621      	mov	r1, r4
 800cdba:	461a      	mov	r2, r3
 800cdbc:	4658      	mov	r0, fp
 800cdbe:	f001 f84b 	bl	800de58 <__lshift>
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d059      	beq.n	800ce7e <_dtoa_r+0x8f6>
 800cdca:	4621      	mov	r1, r4
 800cdcc:	4648      	mov	r0, r9
 800cdce:	f001 f8af 	bl	800df30 <__mcmp>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	da53      	bge.n	800ce7e <_dtoa_r+0x8f6>
 800cdd6:	1e7b      	subs	r3, r7, #1
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	4649      	mov	r1, r9
 800cddc:	2300      	movs	r3, #0
 800cdde:	220a      	movs	r2, #10
 800cde0:	4658      	mov	r0, fp
 800cde2:	f000 fe43 	bl	800da6c <__multadd>
 800cde6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cde8:	4681      	mov	r9, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 8172 	beq.w	800d0d4 <_dtoa_r+0xb4c>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	220a      	movs	r2, #10
 800cdf6:	4658      	mov	r0, fp
 800cdf8:	f000 fe38 	bl	800da6c <__multadd>
 800cdfc:	9b00      	ldr	r3, [sp, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	4605      	mov	r5, r0
 800ce02:	dc67      	bgt.n	800ced4 <_dtoa_r+0x94c>
 800ce04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	dc41      	bgt.n	800ce8e <_dtoa_r+0x906>
 800ce0a:	e063      	b.n	800ced4 <_dtoa_r+0x94c>
 800ce0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce12:	e746      	b.n	800cca2 <_dtoa_r+0x71a>
 800ce14:	9b07      	ldr	r3, [sp, #28]
 800ce16:	1e5c      	subs	r4, r3, #1
 800ce18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce1a:	42a3      	cmp	r3, r4
 800ce1c:	bfbf      	itttt	lt
 800ce1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ce22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ce24:	1ae3      	sublt	r3, r4, r3
 800ce26:	bfb4      	ite	lt
 800ce28:	18d2      	addlt	r2, r2, r3
 800ce2a:	1b1c      	subge	r4, r3, r4
 800ce2c:	9b07      	ldr	r3, [sp, #28]
 800ce2e:	bfbc      	itt	lt
 800ce30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ce32:	2400      	movlt	r4, #0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	bfb5      	itete	lt
 800ce38:	eba8 0603 	sublt.w	r6, r8, r3
 800ce3c:	9b07      	ldrge	r3, [sp, #28]
 800ce3e:	2300      	movlt	r3, #0
 800ce40:	4646      	movge	r6, r8
 800ce42:	e730      	b.n	800cca6 <_dtoa_r+0x71e>
 800ce44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce48:	4646      	mov	r6, r8
 800ce4a:	e735      	b.n	800ccb8 <_dtoa_r+0x730>
 800ce4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce4e:	e75c      	b.n	800cd0a <_dtoa_r+0x782>
 800ce50:	2300      	movs	r3, #0
 800ce52:	e788      	b.n	800cd66 <_dtoa_r+0x7de>
 800ce54:	3fe00000 	.word	0x3fe00000
 800ce58:	40240000 	.word	0x40240000
 800ce5c:	40140000 	.word	0x40140000
 800ce60:	9b02      	ldr	r3, [sp, #8]
 800ce62:	e780      	b.n	800cd66 <_dtoa_r+0x7de>
 800ce64:	2300      	movs	r3, #0
 800ce66:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce68:	e782      	b.n	800cd70 <_dtoa_r+0x7e8>
 800ce6a:	d099      	beq.n	800cda0 <_dtoa_r+0x818>
 800ce6c:	9a08      	ldr	r2, [sp, #32]
 800ce6e:	331c      	adds	r3, #28
 800ce70:	441a      	add	r2, r3
 800ce72:	4498      	add	r8, r3
 800ce74:	441e      	add	r6, r3
 800ce76:	9208      	str	r2, [sp, #32]
 800ce78:	e792      	b.n	800cda0 <_dtoa_r+0x818>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	e7f6      	b.n	800ce6c <_dtoa_r+0x8e4>
 800ce7e:	9b07      	ldr	r3, [sp, #28]
 800ce80:	9704      	str	r7, [sp, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	dc20      	bgt.n	800cec8 <_dtoa_r+0x940>
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	dd1e      	ble.n	800cecc <_dtoa_r+0x944>
 800ce8e:	9b00      	ldr	r3, [sp, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f47f aec0 	bne.w	800cc16 <_dtoa_r+0x68e>
 800ce96:	4621      	mov	r1, r4
 800ce98:	2205      	movs	r2, #5
 800ce9a:	4658      	mov	r0, fp
 800ce9c:	f000 fde6 	bl	800da6c <__multadd>
 800cea0:	4601      	mov	r1, r0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4648      	mov	r0, r9
 800cea6:	f001 f843 	bl	800df30 <__mcmp>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f77f aeb3 	ble.w	800cc16 <_dtoa_r+0x68e>
 800ceb0:	4656      	mov	r6, sl
 800ceb2:	2331      	movs	r3, #49	@ 0x31
 800ceb4:	f806 3b01 	strb.w	r3, [r6], #1
 800ceb8:	9b04      	ldr	r3, [sp, #16]
 800ceba:	3301      	adds	r3, #1
 800cebc:	9304      	str	r3, [sp, #16]
 800cebe:	e6ae      	b.n	800cc1e <_dtoa_r+0x696>
 800cec0:	9c07      	ldr	r4, [sp, #28]
 800cec2:	9704      	str	r7, [sp, #16]
 800cec4:	4625      	mov	r5, r4
 800cec6:	e7f3      	b.n	800ceb0 <_dtoa_r+0x928>
 800cec8:	9b07      	ldr	r3, [sp, #28]
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f000 8104 	beq.w	800d0dc <_dtoa_r+0xb54>
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	dd05      	ble.n	800cee4 <_dtoa_r+0x95c>
 800ced8:	4629      	mov	r1, r5
 800ceda:	4632      	mov	r2, r6
 800cedc:	4658      	mov	r0, fp
 800cede:	f000 ffbb 	bl	800de58 <__lshift>
 800cee2:	4605      	mov	r5, r0
 800cee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d05a      	beq.n	800cfa0 <_dtoa_r+0xa18>
 800ceea:	6869      	ldr	r1, [r5, #4]
 800ceec:	4658      	mov	r0, fp
 800ceee:	f000 fd5b 	bl	800d9a8 <_Balloc>
 800cef2:	4606      	mov	r6, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <_dtoa_r+0x97a>
 800cef6:	4b84      	ldr	r3, [pc, #528]	@ (800d108 <_dtoa_r+0xb80>)
 800cef8:	4602      	mov	r2, r0
 800cefa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cefe:	f7ff bb5a 	b.w	800c5b6 <_dtoa_r+0x2e>
 800cf02:	692a      	ldr	r2, [r5, #16]
 800cf04:	3202      	adds	r2, #2
 800cf06:	0092      	lsls	r2, r2, #2
 800cf08:	f105 010c 	add.w	r1, r5, #12
 800cf0c:	300c      	adds	r0, #12
 800cf0e:	f7ff fa9c 	bl	800c44a <memcpy>
 800cf12:	2201      	movs	r2, #1
 800cf14:	4631      	mov	r1, r6
 800cf16:	4658      	mov	r0, fp
 800cf18:	f000 ff9e 	bl	800de58 <__lshift>
 800cf1c:	f10a 0301 	add.w	r3, sl, #1
 800cf20:	9307      	str	r3, [sp, #28]
 800cf22:	9b00      	ldr	r3, [sp, #0]
 800cf24:	4453      	add	r3, sl
 800cf26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf28:	9b02      	ldr	r3, [sp, #8]
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	462f      	mov	r7, r5
 800cf30:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf32:	4605      	mov	r5, r0
 800cf34:	9b07      	ldr	r3, [sp, #28]
 800cf36:	4621      	mov	r1, r4
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	4648      	mov	r0, r9
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	f7ff fa9b 	bl	800c478 <quorem>
 800cf42:	4639      	mov	r1, r7
 800cf44:	9002      	str	r0, [sp, #8]
 800cf46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf4a:	4648      	mov	r0, r9
 800cf4c:	f000 fff0 	bl	800df30 <__mcmp>
 800cf50:	462a      	mov	r2, r5
 800cf52:	9008      	str	r0, [sp, #32]
 800cf54:	4621      	mov	r1, r4
 800cf56:	4658      	mov	r0, fp
 800cf58:	f001 f806 	bl	800df68 <__mdiff>
 800cf5c:	68c2      	ldr	r2, [r0, #12]
 800cf5e:	4606      	mov	r6, r0
 800cf60:	bb02      	cbnz	r2, 800cfa4 <_dtoa_r+0xa1c>
 800cf62:	4601      	mov	r1, r0
 800cf64:	4648      	mov	r0, r9
 800cf66:	f000 ffe3 	bl	800df30 <__mcmp>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4658      	mov	r0, fp
 800cf70:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf72:	f000 fd59 	bl	800da28 <_Bfree>
 800cf76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf7a:	9e07      	ldr	r6, [sp, #28]
 800cf7c:	ea43 0102 	orr.w	r1, r3, r2
 800cf80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf82:	4319      	orrs	r1, r3
 800cf84:	d110      	bne.n	800cfa8 <_dtoa_r+0xa20>
 800cf86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cf8a:	d029      	beq.n	800cfe0 <_dtoa_r+0xa58>
 800cf8c:	9b08      	ldr	r3, [sp, #32]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	dd02      	ble.n	800cf98 <_dtoa_r+0xa10>
 800cf92:	9b02      	ldr	r3, [sp, #8]
 800cf94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cf98:	9b00      	ldr	r3, [sp, #0]
 800cf9a:	f883 8000 	strb.w	r8, [r3]
 800cf9e:	e63f      	b.n	800cc20 <_dtoa_r+0x698>
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	e7bb      	b.n	800cf1c <_dtoa_r+0x994>
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	e7e1      	b.n	800cf6c <_dtoa_r+0x9e4>
 800cfa8:	9b08      	ldr	r3, [sp, #32]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	db04      	blt.n	800cfb8 <_dtoa_r+0xa30>
 800cfae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfb0:	430b      	orrs	r3, r1
 800cfb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cfb4:	430b      	orrs	r3, r1
 800cfb6:	d120      	bne.n	800cffa <_dtoa_r+0xa72>
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	dded      	ble.n	800cf98 <_dtoa_r+0xa10>
 800cfbc:	4649      	mov	r1, r9
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4658      	mov	r0, fp
 800cfc2:	f000 ff49 	bl	800de58 <__lshift>
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4681      	mov	r9, r0
 800cfca:	f000 ffb1 	bl	800df30 <__mcmp>
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	dc03      	bgt.n	800cfda <_dtoa_r+0xa52>
 800cfd2:	d1e1      	bne.n	800cf98 <_dtoa_r+0xa10>
 800cfd4:	f018 0f01 	tst.w	r8, #1
 800cfd8:	d0de      	beq.n	800cf98 <_dtoa_r+0xa10>
 800cfda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfde:	d1d8      	bne.n	800cf92 <_dtoa_r+0xa0a>
 800cfe0:	9a00      	ldr	r2, [sp, #0]
 800cfe2:	2339      	movs	r3, #57	@ 0x39
 800cfe4:	7013      	strb	r3, [r2, #0]
 800cfe6:	4633      	mov	r3, r6
 800cfe8:	461e      	mov	r6, r3
 800cfea:	3b01      	subs	r3, #1
 800cfec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cff0:	2a39      	cmp	r2, #57	@ 0x39
 800cff2:	d052      	beq.n	800d09a <_dtoa_r+0xb12>
 800cff4:	3201      	adds	r2, #1
 800cff6:	701a      	strb	r2, [r3, #0]
 800cff8:	e612      	b.n	800cc20 <_dtoa_r+0x698>
 800cffa:	2a00      	cmp	r2, #0
 800cffc:	dd07      	ble.n	800d00e <_dtoa_r+0xa86>
 800cffe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d002:	d0ed      	beq.n	800cfe0 <_dtoa_r+0xa58>
 800d004:	9a00      	ldr	r2, [sp, #0]
 800d006:	f108 0301 	add.w	r3, r8, #1
 800d00a:	7013      	strb	r3, [r2, #0]
 800d00c:	e608      	b.n	800cc20 <_dtoa_r+0x698>
 800d00e:	9b07      	ldr	r3, [sp, #28]
 800d010:	9a07      	ldr	r2, [sp, #28]
 800d012:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d018:	4293      	cmp	r3, r2
 800d01a:	d028      	beq.n	800d06e <_dtoa_r+0xae6>
 800d01c:	4649      	mov	r1, r9
 800d01e:	2300      	movs	r3, #0
 800d020:	220a      	movs	r2, #10
 800d022:	4658      	mov	r0, fp
 800d024:	f000 fd22 	bl	800da6c <__multadd>
 800d028:	42af      	cmp	r7, r5
 800d02a:	4681      	mov	r9, r0
 800d02c:	f04f 0300 	mov.w	r3, #0
 800d030:	f04f 020a 	mov.w	r2, #10
 800d034:	4639      	mov	r1, r7
 800d036:	4658      	mov	r0, fp
 800d038:	d107      	bne.n	800d04a <_dtoa_r+0xac2>
 800d03a:	f000 fd17 	bl	800da6c <__multadd>
 800d03e:	4607      	mov	r7, r0
 800d040:	4605      	mov	r5, r0
 800d042:	9b07      	ldr	r3, [sp, #28]
 800d044:	3301      	adds	r3, #1
 800d046:	9307      	str	r3, [sp, #28]
 800d048:	e774      	b.n	800cf34 <_dtoa_r+0x9ac>
 800d04a:	f000 fd0f 	bl	800da6c <__multadd>
 800d04e:	4629      	mov	r1, r5
 800d050:	4607      	mov	r7, r0
 800d052:	2300      	movs	r3, #0
 800d054:	220a      	movs	r2, #10
 800d056:	4658      	mov	r0, fp
 800d058:	f000 fd08 	bl	800da6c <__multadd>
 800d05c:	4605      	mov	r5, r0
 800d05e:	e7f0      	b.n	800d042 <_dtoa_r+0xaba>
 800d060:	9b00      	ldr	r3, [sp, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	bfcc      	ite	gt
 800d066:	461e      	movgt	r6, r3
 800d068:	2601      	movle	r6, #1
 800d06a:	4456      	add	r6, sl
 800d06c:	2700      	movs	r7, #0
 800d06e:	4649      	mov	r1, r9
 800d070:	2201      	movs	r2, #1
 800d072:	4658      	mov	r0, fp
 800d074:	f000 fef0 	bl	800de58 <__lshift>
 800d078:	4621      	mov	r1, r4
 800d07a:	4681      	mov	r9, r0
 800d07c:	f000 ff58 	bl	800df30 <__mcmp>
 800d080:	2800      	cmp	r0, #0
 800d082:	dcb0      	bgt.n	800cfe6 <_dtoa_r+0xa5e>
 800d084:	d102      	bne.n	800d08c <_dtoa_r+0xb04>
 800d086:	f018 0f01 	tst.w	r8, #1
 800d08a:	d1ac      	bne.n	800cfe6 <_dtoa_r+0xa5e>
 800d08c:	4633      	mov	r3, r6
 800d08e:	461e      	mov	r6, r3
 800d090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d094:	2a30      	cmp	r2, #48	@ 0x30
 800d096:	d0fa      	beq.n	800d08e <_dtoa_r+0xb06>
 800d098:	e5c2      	b.n	800cc20 <_dtoa_r+0x698>
 800d09a:	459a      	cmp	sl, r3
 800d09c:	d1a4      	bne.n	800cfe8 <_dtoa_r+0xa60>
 800d09e:	9b04      	ldr	r3, [sp, #16]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	9304      	str	r3, [sp, #16]
 800d0a4:	2331      	movs	r3, #49	@ 0x31
 800d0a6:	f88a 3000 	strb.w	r3, [sl]
 800d0aa:	e5b9      	b.n	800cc20 <_dtoa_r+0x698>
 800d0ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d10c <_dtoa_r+0xb84>
 800d0b2:	b11b      	cbz	r3, 800d0bc <_dtoa_r+0xb34>
 800d0b4:	f10a 0308 	add.w	r3, sl, #8
 800d0b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0ba:	6013      	str	r3, [r2, #0]
 800d0bc:	4650      	mov	r0, sl
 800d0be:	b019      	add	sp, #100	@ 0x64
 800d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	f77f ae37 	ble.w	800cd3a <_dtoa_r+0x7b2>
 800d0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	e655      	b.n	800cd80 <_dtoa_r+0x7f8>
 800d0d4:	9b00      	ldr	r3, [sp, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f77f aed6 	ble.w	800ce88 <_dtoa_r+0x900>
 800d0dc:	4656      	mov	r6, sl
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4648      	mov	r0, r9
 800d0e2:	f7ff f9c9 	bl	800c478 <quorem>
 800d0e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d0ea:	f806 8b01 	strb.w	r8, [r6], #1
 800d0ee:	9b00      	ldr	r3, [sp, #0]
 800d0f0:	eba6 020a 	sub.w	r2, r6, sl
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	ddb3      	ble.n	800d060 <_dtoa_r+0xad8>
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	220a      	movs	r2, #10
 800d0fe:	4658      	mov	r0, fp
 800d100:	f000 fcb4 	bl	800da6c <__multadd>
 800d104:	4681      	mov	r9, r0
 800d106:	e7ea      	b.n	800d0de <_dtoa_r+0xb56>
 800d108:	08010229 	.word	0x08010229
 800d10c:	080101ad 	.word	0x080101ad

0800d110 <_free_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4605      	mov	r5, r0
 800d114:	2900      	cmp	r1, #0
 800d116:	d041      	beq.n	800d19c <_free_r+0x8c>
 800d118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d11c:	1f0c      	subs	r4, r1, #4
 800d11e:	2b00      	cmp	r3, #0
 800d120:	bfb8      	it	lt
 800d122:	18e4      	addlt	r4, r4, r3
 800d124:	f000 fc34 	bl	800d990 <__malloc_lock>
 800d128:	4a1d      	ldr	r2, [pc, #116]	@ (800d1a0 <_free_r+0x90>)
 800d12a:	6813      	ldr	r3, [r2, #0]
 800d12c:	b933      	cbnz	r3, 800d13c <_free_r+0x2c>
 800d12e:	6063      	str	r3, [r4, #4]
 800d130:	6014      	str	r4, [r2, #0]
 800d132:	4628      	mov	r0, r5
 800d134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d138:	f000 bc30 	b.w	800d99c <__malloc_unlock>
 800d13c:	42a3      	cmp	r3, r4
 800d13e:	d908      	bls.n	800d152 <_free_r+0x42>
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	1821      	adds	r1, r4, r0
 800d144:	428b      	cmp	r3, r1
 800d146:	bf01      	itttt	eq
 800d148:	6819      	ldreq	r1, [r3, #0]
 800d14a:	685b      	ldreq	r3, [r3, #4]
 800d14c:	1809      	addeq	r1, r1, r0
 800d14e:	6021      	streq	r1, [r4, #0]
 800d150:	e7ed      	b.n	800d12e <_free_r+0x1e>
 800d152:	461a      	mov	r2, r3
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	b10b      	cbz	r3, 800d15c <_free_r+0x4c>
 800d158:	42a3      	cmp	r3, r4
 800d15a:	d9fa      	bls.n	800d152 <_free_r+0x42>
 800d15c:	6811      	ldr	r1, [r2, #0]
 800d15e:	1850      	adds	r0, r2, r1
 800d160:	42a0      	cmp	r0, r4
 800d162:	d10b      	bne.n	800d17c <_free_r+0x6c>
 800d164:	6820      	ldr	r0, [r4, #0]
 800d166:	4401      	add	r1, r0
 800d168:	1850      	adds	r0, r2, r1
 800d16a:	4283      	cmp	r3, r0
 800d16c:	6011      	str	r1, [r2, #0]
 800d16e:	d1e0      	bne.n	800d132 <_free_r+0x22>
 800d170:	6818      	ldr	r0, [r3, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	6053      	str	r3, [r2, #4]
 800d176:	4408      	add	r0, r1
 800d178:	6010      	str	r0, [r2, #0]
 800d17a:	e7da      	b.n	800d132 <_free_r+0x22>
 800d17c:	d902      	bls.n	800d184 <_free_r+0x74>
 800d17e:	230c      	movs	r3, #12
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	e7d6      	b.n	800d132 <_free_r+0x22>
 800d184:	6820      	ldr	r0, [r4, #0]
 800d186:	1821      	adds	r1, r4, r0
 800d188:	428b      	cmp	r3, r1
 800d18a:	bf04      	itt	eq
 800d18c:	6819      	ldreq	r1, [r3, #0]
 800d18e:	685b      	ldreq	r3, [r3, #4]
 800d190:	6063      	str	r3, [r4, #4]
 800d192:	bf04      	itt	eq
 800d194:	1809      	addeq	r1, r1, r0
 800d196:	6021      	streq	r1, [r4, #0]
 800d198:	6054      	str	r4, [r2, #4]
 800d19a:	e7ca      	b.n	800d132 <_free_r+0x22>
 800d19c:	bd38      	pop	{r3, r4, r5, pc}
 800d19e:	bf00      	nop
 800d1a0:	20000c90 	.word	0x20000c90

0800d1a4 <rshift>:
 800d1a4:	6903      	ldr	r3, [r0, #16]
 800d1a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d1aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d1b2:	f100 0414 	add.w	r4, r0, #20
 800d1b6:	dd45      	ble.n	800d244 <rshift+0xa0>
 800d1b8:	f011 011f 	ands.w	r1, r1, #31
 800d1bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d1c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d1c4:	d10c      	bne.n	800d1e0 <rshift+0x3c>
 800d1c6:	f100 0710 	add.w	r7, r0, #16
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	42b1      	cmp	r1, r6
 800d1ce:	d334      	bcc.n	800d23a <rshift+0x96>
 800d1d0:	1a9b      	subs	r3, r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	1eea      	subs	r2, r5, #3
 800d1d6:	4296      	cmp	r6, r2
 800d1d8:	bf38      	it	cc
 800d1da:	2300      	movcc	r3, #0
 800d1dc:	4423      	add	r3, r4
 800d1de:	e015      	b.n	800d20c <rshift+0x68>
 800d1e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1e4:	f1c1 0820 	rsb	r8, r1, #32
 800d1e8:	40cf      	lsrs	r7, r1
 800d1ea:	f105 0e04 	add.w	lr, r5, #4
 800d1ee:	46a1      	mov	r9, r4
 800d1f0:	4576      	cmp	r6, lr
 800d1f2:	46f4      	mov	ip, lr
 800d1f4:	d815      	bhi.n	800d222 <rshift+0x7e>
 800d1f6:	1a9a      	subs	r2, r3, r2
 800d1f8:	0092      	lsls	r2, r2, #2
 800d1fa:	3a04      	subs	r2, #4
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	42ae      	cmp	r6, r5
 800d200:	bf38      	it	cc
 800d202:	2200      	movcc	r2, #0
 800d204:	18a3      	adds	r3, r4, r2
 800d206:	50a7      	str	r7, [r4, r2]
 800d208:	b107      	cbz	r7, 800d20c <rshift+0x68>
 800d20a:	3304      	adds	r3, #4
 800d20c:	1b1a      	subs	r2, r3, r4
 800d20e:	42a3      	cmp	r3, r4
 800d210:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d214:	bf08      	it	eq
 800d216:	2300      	moveq	r3, #0
 800d218:	6102      	str	r2, [r0, #16]
 800d21a:	bf08      	it	eq
 800d21c:	6143      	streq	r3, [r0, #20]
 800d21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d222:	f8dc c000 	ldr.w	ip, [ip]
 800d226:	fa0c fc08 	lsl.w	ip, ip, r8
 800d22a:	ea4c 0707 	orr.w	r7, ip, r7
 800d22e:	f849 7b04 	str.w	r7, [r9], #4
 800d232:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d236:	40cf      	lsrs	r7, r1
 800d238:	e7da      	b.n	800d1f0 <rshift+0x4c>
 800d23a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d23e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d242:	e7c3      	b.n	800d1cc <rshift+0x28>
 800d244:	4623      	mov	r3, r4
 800d246:	e7e1      	b.n	800d20c <rshift+0x68>

0800d248 <__hexdig_fun>:
 800d248:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d24c:	2b09      	cmp	r3, #9
 800d24e:	d802      	bhi.n	800d256 <__hexdig_fun+0xe>
 800d250:	3820      	subs	r0, #32
 800d252:	b2c0      	uxtb	r0, r0
 800d254:	4770      	bx	lr
 800d256:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d25a:	2b05      	cmp	r3, #5
 800d25c:	d801      	bhi.n	800d262 <__hexdig_fun+0x1a>
 800d25e:	3847      	subs	r0, #71	@ 0x47
 800d260:	e7f7      	b.n	800d252 <__hexdig_fun+0xa>
 800d262:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d266:	2b05      	cmp	r3, #5
 800d268:	d801      	bhi.n	800d26e <__hexdig_fun+0x26>
 800d26a:	3827      	subs	r0, #39	@ 0x27
 800d26c:	e7f1      	b.n	800d252 <__hexdig_fun+0xa>
 800d26e:	2000      	movs	r0, #0
 800d270:	4770      	bx	lr
	...

0800d274 <__gethex>:
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	b085      	sub	sp, #20
 800d27a:	468a      	mov	sl, r1
 800d27c:	9302      	str	r3, [sp, #8]
 800d27e:	680b      	ldr	r3, [r1, #0]
 800d280:	9001      	str	r0, [sp, #4]
 800d282:	4690      	mov	r8, r2
 800d284:	1c9c      	adds	r4, r3, #2
 800d286:	46a1      	mov	r9, r4
 800d288:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d28c:	2830      	cmp	r0, #48	@ 0x30
 800d28e:	d0fa      	beq.n	800d286 <__gethex+0x12>
 800d290:	eba9 0303 	sub.w	r3, r9, r3
 800d294:	f1a3 0b02 	sub.w	fp, r3, #2
 800d298:	f7ff ffd6 	bl	800d248 <__hexdig_fun>
 800d29c:	4605      	mov	r5, r0
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d168      	bne.n	800d374 <__gethex+0x100>
 800d2a2:	49a0      	ldr	r1, [pc, #640]	@ (800d524 <__gethex+0x2b0>)
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	4648      	mov	r0, r9
 800d2a8:	f7ff f82a 	bl	800c300 <strncmp>
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d167      	bne.n	800d382 <__gethex+0x10e>
 800d2b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d2b6:	4626      	mov	r6, r4
 800d2b8:	f7ff ffc6 	bl	800d248 <__hexdig_fun>
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d062      	beq.n	800d386 <__gethex+0x112>
 800d2c0:	4623      	mov	r3, r4
 800d2c2:	7818      	ldrb	r0, [r3, #0]
 800d2c4:	2830      	cmp	r0, #48	@ 0x30
 800d2c6:	4699      	mov	r9, r3
 800d2c8:	f103 0301 	add.w	r3, r3, #1
 800d2cc:	d0f9      	beq.n	800d2c2 <__gethex+0x4e>
 800d2ce:	f7ff ffbb 	bl	800d248 <__hexdig_fun>
 800d2d2:	fab0 f580 	clz	r5, r0
 800d2d6:	096d      	lsrs	r5, r5, #5
 800d2d8:	f04f 0b01 	mov.w	fp, #1
 800d2dc:	464a      	mov	r2, r9
 800d2de:	4616      	mov	r6, r2
 800d2e0:	3201      	adds	r2, #1
 800d2e2:	7830      	ldrb	r0, [r6, #0]
 800d2e4:	f7ff ffb0 	bl	800d248 <__hexdig_fun>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d1f8      	bne.n	800d2de <__gethex+0x6a>
 800d2ec:	498d      	ldr	r1, [pc, #564]	@ (800d524 <__gethex+0x2b0>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f7ff f805 	bl	800c300 <strncmp>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d13f      	bne.n	800d37a <__gethex+0x106>
 800d2fa:	b944      	cbnz	r4, 800d30e <__gethex+0x9a>
 800d2fc:	1c74      	adds	r4, r6, #1
 800d2fe:	4622      	mov	r2, r4
 800d300:	4616      	mov	r6, r2
 800d302:	3201      	adds	r2, #1
 800d304:	7830      	ldrb	r0, [r6, #0]
 800d306:	f7ff ff9f 	bl	800d248 <__hexdig_fun>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	d1f8      	bne.n	800d300 <__gethex+0x8c>
 800d30e:	1ba4      	subs	r4, r4, r6
 800d310:	00a7      	lsls	r7, r4, #2
 800d312:	7833      	ldrb	r3, [r6, #0]
 800d314:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d318:	2b50      	cmp	r3, #80	@ 0x50
 800d31a:	d13e      	bne.n	800d39a <__gethex+0x126>
 800d31c:	7873      	ldrb	r3, [r6, #1]
 800d31e:	2b2b      	cmp	r3, #43	@ 0x2b
 800d320:	d033      	beq.n	800d38a <__gethex+0x116>
 800d322:	2b2d      	cmp	r3, #45	@ 0x2d
 800d324:	d034      	beq.n	800d390 <__gethex+0x11c>
 800d326:	1c71      	adds	r1, r6, #1
 800d328:	2400      	movs	r4, #0
 800d32a:	7808      	ldrb	r0, [r1, #0]
 800d32c:	f7ff ff8c 	bl	800d248 <__hexdig_fun>
 800d330:	1e43      	subs	r3, r0, #1
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b18      	cmp	r3, #24
 800d336:	d830      	bhi.n	800d39a <__gethex+0x126>
 800d338:	f1a0 0210 	sub.w	r2, r0, #16
 800d33c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d340:	f7ff ff82 	bl	800d248 <__hexdig_fun>
 800d344:	f100 3cff 	add.w	ip, r0, #4294967295
 800d348:	fa5f fc8c 	uxtb.w	ip, ip
 800d34c:	f1bc 0f18 	cmp.w	ip, #24
 800d350:	f04f 030a 	mov.w	r3, #10
 800d354:	d91e      	bls.n	800d394 <__gethex+0x120>
 800d356:	b104      	cbz	r4, 800d35a <__gethex+0xe6>
 800d358:	4252      	negs	r2, r2
 800d35a:	4417      	add	r7, r2
 800d35c:	f8ca 1000 	str.w	r1, [sl]
 800d360:	b1ed      	cbz	r5, 800d39e <__gethex+0x12a>
 800d362:	f1bb 0f00 	cmp.w	fp, #0
 800d366:	bf0c      	ite	eq
 800d368:	2506      	moveq	r5, #6
 800d36a:	2500      	movne	r5, #0
 800d36c:	4628      	mov	r0, r5
 800d36e:	b005      	add	sp, #20
 800d370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d374:	2500      	movs	r5, #0
 800d376:	462c      	mov	r4, r5
 800d378:	e7b0      	b.n	800d2dc <__gethex+0x68>
 800d37a:	2c00      	cmp	r4, #0
 800d37c:	d1c7      	bne.n	800d30e <__gethex+0x9a>
 800d37e:	4627      	mov	r7, r4
 800d380:	e7c7      	b.n	800d312 <__gethex+0x9e>
 800d382:	464e      	mov	r6, r9
 800d384:	462f      	mov	r7, r5
 800d386:	2501      	movs	r5, #1
 800d388:	e7c3      	b.n	800d312 <__gethex+0x9e>
 800d38a:	2400      	movs	r4, #0
 800d38c:	1cb1      	adds	r1, r6, #2
 800d38e:	e7cc      	b.n	800d32a <__gethex+0xb6>
 800d390:	2401      	movs	r4, #1
 800d392:	e7fb      	b.n	800d38c <__gethex+0x118>
 800d394:	fb03 0002 	mla	r0, r3, r2, r0
 800d398:	e7ce      	b.n	800d338 <__gethex+0xc4>
 800d39a:	4631      	mov	r1, r6
 800d39c:	e7de      	b.n	800d35c <__gethex+0xe8>
 800d39e:	eba6 0309 	sub.w	r3, r6, r9
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	4629      	mov	r1, r5
 800d3a6:	2b07      	cmp	r3, #7
 800d3a8:	dc0a      	bgt.n	800d3c0 <__gethex+0x14c>
 800d3aa:	9801      	ldr	r0, [sp, #4]
 800d3ac:	f000 fafc 	bl	800d9a8 <_Balloc>
 800d3b0:	4604      	mov	r4, r0
 800d3b2:	b940      	cbnz	r0, 800d3c6 <__gethex+0x152>
 800d3b4:	4b5c      	ldr	r3, [pc, #368]	@ (800d528 <__gethex+0x2b4>)
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	21e4      	movs	r1, #228	@ 0xe4
 800d3ba:	485c      	ldr	r0, [pc, #368]	@ (800d52c <__gethex+0x2b8>)
 800d3bc:	f001 f9e0 	bl	800e780 <__assert_func>
 800d3c0:	3101      	adds	r1, #1
 800d3c2:	105b      	asrs	r3, r3, #1
 800d3c4:	e7ef      	b.n	800d3a6 <__gethex+0x132>
 800d3c6:	f100 0a14 	add.w	sl, r0, #20
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	4655      	mov	r5, sl
 800d3ce:	469b      	mov	fp, r3
 800d3d0:	45b1      	cmp	r9, r6
 800d3d2:	d337      	bcc.n	800d444 <__gethex+0x1d0>
 800d3d4:	f845 bb04 	str.w	fp, [r5], #4
 800d3d8:	eba5 050a 	sub.w	r5, r5, sl
 800d3dc:	10ad      	asrs	r5, r5, #2
 800d3de:	6125      	str	r5, [r4, #16]
 800d3e0:	4658      	mov	r0, fp
 800d3e2:	f000 fbd3 	bl	800db8c <__hi0bits>
 800d3e6:	016d      	lsls	r5, r5, #5
 800d3e8:	f8d8 6000 	ldr.w	r6, [r8]
 800d3ec:	1a2d      	subs	r5, r5, r0
 800d3ee:	42b5      	cmp	r5, r6
 800d3f0:	dd54      	ble.n	800d49c <__gethex+0x228>
 800d3f2:	1bad      	subs	r5, r5, r6
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 ff67 	bl	800e2ca <__any_on>
 800d3fc:	4681      	mov	r9, r0
 800d3fe:	b178      	cbz	r0, 800d420 <__gethex+0x1ac>
 800d400:	1e6b      	subs	r3, r5, #1
 800d402:	1159      	asrs	r1, r3, #5
 800d404:	f003 021f 	and.w	r2, r3, #31
 800d408:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d40c:	f04f 0901 	mov.w	r9, #1
 800d410:	fa09 f202 	lsl.w	r2, r9, r2
 800d414:	420a      	tst	r2, r1
 800d416:	d003      	beq.n	800d420 <__gethex+0x1ac>
 800d418:	454b      	cmp	r3, r9
 800d41a:	dc36      	bgt.n	800d48a <__gethex+0x216>
 800d41c:	f04f 0902 	mov.w	r9, #2
 800d420:	4629      	mov	r1, r5
 800d422:	4620      	mov	r0, r4
 800d424:	f7ff febe 	bl	800d1a4 <rshift>
 800d428:	442f      	add	r7, r5
 800d42a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d42e:	42bb      	cmp	r3, r7
 800d430:	da42      	bge.n	800d4b8 <__gethex+0x244>
 800d432:	9801      	ldr	r0, [sp, #4]
 800d434:	4621      	mov	r1, r4
 800d436:	f000 faf7 	bl	800da28 <_Bfree>
 800d43a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d43c:	2300      	movs	r3, #0
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	25a3      	movs	r5, #163	@ 0xa3
 800d442:	e793      	b.n	800d36c <__gethex+0xf8>
 800d444:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d448:	2a2e      	cmp	r2, #46	@ 0x2e
 800d44a:	d012      	beq.n	800d472 <__gethex+0x1fe>
 800d44c:	2b20      	cmp	r3, #32
 800d44e:	d104      	bne.n	800d45a <__gethex+0x1e6>
 800d450:	f845 bb04 	str.w	fp, [r5], #4
 800d454:	f04f 0b00 	mov.w	fp, #0
 800d458:	465b      	mov	r3, fp
 800d45a:	7830      	ldrb	r0, [r6, #0]
 800d45c:	9303      	str	r3, [sp, #12]
 800d45e:	f7ff fef3 	bl	800d248 <__hexdig_fun>
 800d462:	9b03      	ldr	r3, [sp, #12]
 800d464:	f000 000f 	and.w	r0, r0, #15
 800d468:	4098      	lsls	r0, r3
 800d46a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d46e:	3304      	adds	r3, #4
 800d470:	e7ae      	b.n	800d3d0 <__gethex+0x15c>
 800d472:	45b1      	cmp	r9, r6
 800d474:	d8ea      	bhi.n	800d44c <__gethex+0x1d8>
 800d476:	492b      	ldr	r1, [pc, #172]	@ (800d524 <__gethex+0x2b0>)
 800d478:	9303      	str	r3, [sp, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	4630      	mov	r0, r6
 800d47e:	f7fe ff3f 	bl	800c300 <strncmp>
 800d482:	9b03      	ldr	r3, [sp, #12]
 800d484:	2800      	cmp	r0, #0
 800d486:	d1e1      	bne.n	800d44c <__gethex+0x1d8>
 800d488:	e7a2      	b.n	800d3d0 <__gethex+0x15c>
 800d48a:	1ea9      	subs	r1, r5, #2
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 ff1c 	bl	800e2ca <__any_on>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0c2      	beq.n	800d41c <__gethex+0x1a8>
 800d496:	f04f 0903 	mov.w	r9, #3
 800d49a:	e7c1      	b.n	800d420 <__gethex+0x1ac>
 800d49c:	da09      	bge.n	800d4b2 <__gethex+0x23e>
 800d49e:	1b75      	subs	r5, r6, r5
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	9801      	ldr	r0, [sp, #4]
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	f000 fcd7 	bl	800de58 <__lshift>
 800d4aa:	1b7f      	subs	r7, r7, r5
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	f100 0a14 	add.w	sl, r0, #20
 800d4b2:	f04f 0900 	mov.w	r9, #0
 800d4b6:	e7b8      	b.n	800d42a <__gethex+0x1b6>
 800d4b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d4bc:	42bd      	cmp	r5, r7
 800d4be:	dd6f      	ble.n	800d5a0 <__gethex+0x32c>
 800d4c0:	1bed      	subs	r5, r5, r7
 800d4c2:	42ae      	cmp	r6, r5
 800d4c4:	dc34      	bgt.n	800d530 <__gethex+0x2bc>
 800d4c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d022      	beq.n	800d514 <__gethex+0x2a0>
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d024      	beq.n	800d51c <__gethex+0x2a8>
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d115      	bne.n	800d502 <__gethex+0x28e>
 800d4d6:	42ae      	cmp	r6, r5
 800d4d8:	d113      	bne.n	800d502 <__gethex+0x28e>
 800d4da:	2e01      	cmp	r6, #1
 800d4dc:	d10b      	bne.n	800d4f6 <__gethex+0x282>
 800d4de:	9a02      	ldr	r2, [sp, #8]
 800d4e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	f8ca 3000 	str.w	r3, [sl]
 800d4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4f0:	2562      	movs	r5, #98	@ 0x62
 800d4f2:	601c      	str	r4, [r3, #0]
 800d4f4:	e73a      	b.n	800d36c <__gethex+0xf8>
 800d4f6:	1e71      	subs	r1, r6, #1
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fee6 	bl	800e2ca <__any_on>
 800d4fe:	2800      	cmp	r0, #0
 800d500:	d1ed      	bne.n	800d4de <__gethex+0x26a>
 800d502:	9801      	ldr	r0, [sp, #4]
 800d504:	4621      	mov	r1, r4
 800d506:	f000 fa8f 	bl	800da28 <_Bfree>
 800d50a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d50c:	2300      	movs	r3, #0
 800d50e:	6013      	str	r3, [r2, #0]
 800d510:	2550      	movs	r5, #80	@ 0x50
 800d512:	e72b      	b.n	800d36c <__gethex+0xf8>
 800d514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1f3      	bne.n	800d502 <__gethex+0x28e>
 800d51a:	e7e0      	b.n	800d4de <__gethex+0x26a>
 800d51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1dd      	bne.n	800d4de <__gethex+0x26a>
 800d522:	e7ee      	b.n	800d502 <__gethex+0x28e>
 800d524:	08010018 	.word	0x08010018
 800d528:	08010229 	.word	0x08010229
 800d52c:	0801023a 	.word	0x0801023a
 800d530:	1e6f      	subs	r7, r5, #1
 800d532:	f1b9 0f00 	cmp.w	r9, #0
 800d536:	d130      	bne.n	800d59a <__gethex+0x326>
 800d538:	b127      	cbz	r7, 800d544 <__gethex+0x2d0>
 800d53a:	4639      	mov	r1, r7
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fec4 	bl	800e2ca <__any_on>
 800d542:	4681      	mov	r9, r0
 800d544:	117a      	asrs	r2, r7, #5
 800d546:	2301      	movs	r3, #1
 800d548:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d54c:	f007 071f 	and.w	r7, r7, #31
 800d550:	40bb      	lsls	r3, r7
 800d552:	4213      	tst	r3, r2
 800d554:	4629      	mov	r1, r5
 800d556:	4620      	mov	r0, r4
 800d558:	bf18      	it	ne
 800d55a:	f049 0902 	orrne.w	r9, r9, #2
 800d55e:	f7ff fe21 	bl	800d1a4 <rshift>
 800d562:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d566:	1b76      	subs	r6, r6, r5
 800d568:	2502      	movs	r5, #2
 800d56a:	f1b9 0f00 	cmp.w	r9, #0
 800d56e:	d047      	beq.n	800d600 <__gethex+0x38c>
 800d570:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d574:	2b02      	cmp	r3, #2
 800d576:	d015      	beq.n	800d5a4 <__gethex+0x330>
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d017      	beq.n	800d5ac <__gethex+0x338>
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d109      	bne.n	800d594 <__gethex+0x320>
 800d580:	f019 0f02 	tst.w	r9, #2
 800d584:	d006      	beq.n	800d594 <__gethex+0x320>
 800d586:	f8da 3000 	ldr.w	r3, [sl]
 800d58a:	ea49 0903 	orr.w	r9, r9, r3
 800d58e:	f019 0f01 	tst.w	r9, #1
 800d592:	d10e      	bne.n	800d5b2 <__gethex+0x33e>
 800d594:	f045 0510 	orr.w	r5, r5, #16
 800d598:	e032      	b.n	800d600 <__gethex+0x38c>
 800d59a:	f04f 0901 	mov.w	r9, #1
 800d59e:	e7d1      	b.n	800d544 <__gethex+0x2d0>
 800d5a0:	2501      	movs	r5, #1
 800d5a2:	e7e2      	b.n	800d56a <__gethex+0x2f6>
 800d5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5a6:	f1c3 0301 	rsb	r3, r3, #1
 800d5aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0f0      	beq.n	800d594 <__gethex+0x320>
 800d5b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d5b6:	f104 0314 	add.w	r3, r4, #20
 800d5ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d5be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d5c2:	f04f 0c00 	mov.w	ip, #0
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d5d0:	d01b      	beq.n	800d60a <__gethex+0x396>
 800d5d2:	3201      	adds	r2, #1
 800d5d4:	6002      	str	r2, [r0, #0]
 800d5d6:	2d02      	cmp	r5, #2
 800d5d8:	f104 0314 	add.w	r3, r4, #20
 800d5dc:	d13c      	bne.n	800d658 <__gethex+0x3e4>
 800d5de:	f8d8 2000 	ldr.w	r2, [r8]
 800d5e2:	3a01      	subs	r2, #1
 800d5e4:	42b2      	cmp	r2, r6
 800d5e6:	d109      	bne.n	800d5fc <__gethex+0x388>
 800d5e8:	1171      	asrs	r1, r6, #5
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5f0:	f006 061f 	and.w	r6, r6, #31
 800d5f4:	fa02 f606 	lsl.w	r6, r2, r6
 800d5f8:	421e      	tst	r6, r3
 800d5fa:	d13a      	bne.n	800d672 <__gethex+0x3fe>
 800d5fc:	f045 0520 	orr.w	r5, r5, #32
 800d600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d602:	601c      	str	r4, [r3, #0]
 800d604:	9b02      	ldr	r3, [sp, #8]
 800d606:	601f      	str	r7, [r3, #0]
 800d608:	e6b0      	b.n	800d36c <__gethex+0xf8>
 800d60a:	4299      	cmp	r1, r3
 800d60c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d610:	d8d9      	bhi.n	800d5c6 <__gethex+0x352>
 800d612:	68a3      	ldr	r3, [r4, #8]
 800d614:	459b      	cmp	fp, r3
 800d616:	db17      	blt.n	800d648 <__gethex+0x3d4>
 800d618:	6861      	ldr	r1, [r4, #4]
 800d61a:	9801      	ldr	r0, [sp, #4]
 800d61c:	3101      	adds	r1, #1
 800d61e:	f000 f9c3 	bl	800d9a8 <_Balloc>
 800d622:	4681      	mov	r9, r0
 800d624:	b918      	cbnz	r0, 800d62e <__gethex+0x3ba>
 800d626:	4b1a      	ldr	r3, [pc, #104]	@ (800d690 <__gethex+0x41c>)
 800d628:	4602      	mov	r2, r0
 800d62a:	2184      	movs	r1, #132	@ 0x84
 800d62c:	e6c5      	b.n	800d3ba <__gethex+0x146>
 800d62e:	6922      	ldr	r2, [r4, #16]
 800d630:	3202      	adds	r2, #2
 800d632:	f104 010c 	add.w	r1, r4, #12
 800d636:	0092      	lsls	r2, r2, #2
 800d638:	300c      	adds	r0, #12
 800d63a:	f7fe ff06 	bl	800c44a <memcpy>
 800d63e:	4621      	mov	r1, r4
 800d640:	9801      	ldr	r0, [sp, #4]
 800d642:	f000 f9f1 	bl	800da28 <_Bfree>
 800d646:	464c      	mov	r4, r9
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	1c5a      	adds	r2, r3, #1
 800d64c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d650:	6122      	str	r2, [r4, #16]
 800d652:	2201      	movs	r2, #1
 800d654:	615a      	str	r2, [r3, #20]
 800d656:	e7be      	b.n	800d5d6 <__gethex+0x362>
 800d658:	6922      	ldr	r2, [r4, #16]
 800d65a:	455a      	cmp	r2, fp
 800d65c:	dd0b      	ble.n	800d676 <__gethex+0x402>
 800d65e:	2101      	movs	r1, #1
 800d660:	4620      	mov	r0, r4
 800d662:	f7ff fd9f 	bl	800d1a4 <rshift>
 800d666:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d66a:	3701      	adds	r7, #1
 800d66c:	42bb      	cmp	r3, r7
 800d66e:	f6ff aee0 	blt.w	800d432 <__gethex+0x1be>
 800d672:	2501      	movs	r5, #1
 800d674:	e7c2      	b.n	800d5fc <__gethex+0x388>
 800d676:	f016 061f 	ands.w	r6, r6, #31
 800d67a:	d0fa      	beq.n	800d672 <__gethex+0x3fe>
 800d67c:	4453      	add	r3, sl
 800d67e:	f1c6 0620 	rsb	r6, r6, #32
 800d682:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d686:	f000 fa81 	bl	800db8c <__hi0bits>
 800d68a:	42b0      	cmp	r0, r6
 800d68c:	dbe7      	blt.n	800d65e <__gethex+0x3ea>
 800d68e:	e7f0      	b.n	800d672 <__gethex+0x3fe>
 800d690:	08010229 	.word	0x08010229

0800d694 <L_shift>:
 800d694:	f1c2 0208 	rsb	r2, r2, #8
 800d698:	0092      	lsls	r2, r2, #2
 800d69a:	b570      	push	{r4, r5, r6, lr}
 800d69c:	f1c2 0620 	rsb	r6, r2, #32
 800d6a0:	6843      	ldr	r3, [r0, #4]
 800d6a2:	6804      	ldr	r4, [r0, #0]
 800d6a4:	fa03 f506 	lsl.w	r5, r3, r6
 800d6a8:	432c      	orrs	r4, r5
 800d6aa:	40d3      	lsrs	r3, r2
 800d6ac:	6004      	str	r4, [r0, #0]
 800d6ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800d6b2:	4288      	cmp	r0, r1
 800d6b4:	d3f4      	bcc.n	800d6a0 <L_shift+0xc>
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}

0800d6b8 <__match>:
 800d6b8:	b530      	push	{r4, r5, lr}
 800d6ba:	6803      	ldr	r3, [r0, #0]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6c2:	b914      	cbnz	r4, 800d6ca <__match+0x12>
 800d6c4:	6003      	str	r3, [r0, #0]
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	bd30      	pop	{r4, r5, pc}
 800d6ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d6d2:	2d19      	cmp	r5, #25
 800d6d4:	bf98      	it	ls
 800d6d6:	3220      	addls	r2, #32
 800d6d8:	42a2      	cmp	r2, r4
 800d6da:	d0f0      	beq.n	800d6be <__match+0x6>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	e7f3      	b.n	800d6c8 <__match+0x10>

0800d6e0 <__hexnan>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	680b      	ldr	r3, [r1, #0]
 800d6e6:	6801      	ldr	r1, [r0, #0]
 800d6e8:	115e      	asrs	r6, r3, #5
 800d6ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6ee:	f013 031f 	ands.w	r3, r3, #31
 800d6f2:	b087      	sub	sp, #28
 800d6f4:	bf18      	it	ne
 800d6f6:	3604      	addne	r6, #4
 800d6f8:	2500      	movs	r5, #0
 800d6fa:	1f37      	subs	r7, r6, #4
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	4690      	mov	r8, r2
 800d700:	9301      	str	r3, [sp, #4]
 800d702:	f846 5c04 	str.w	r5, [r6, #-4]
 800d706:	46b9      	mov	r9, r7
 800d708:	463c      	mov	r4, r7
 800d70a:	9502      	str	r5, [sp, #8]
 800d70c:	46ab      	mov	fp, r5
 800d70e:	784a      	ldrb	r2, [r1, #1]
 800d710:	1c4b      	adds	r3, r1, #1
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	b342      	cbz	r2, 800d768 <__hexnan+0x88>
 800d716:	4610      	mov	r0, r2
 800d718:	9105      	str	r1, [sp, #20]
 800d71a:	9204      	str	r2, [sp, #16]
 800d71c:	f7ff fd94 	bl	800d248 <__hexdig_fun>
 800d720:	2800      	cmp	r0, #0
 800d722:	d151      	bne.n	800d7c8 <__hexnan+0xe8>
 800d724:	9a04      	ldr	r2, [sp, #16]
 800d726:	9905      	ldr	r1, [sp, #20]
 800d728:	2a20      	cmp	r2, #32
 800d72a:	d818      	bhi.n	800d75e <__hexnan+0x7e>
 800d72c:	9b02      	ldr	r3, [sp, #8]
 800d72e:	459b      	cmp	fp, r3
 800d730:	dd13      	ble.n	800d75a <__hexnan+0x7a>
 800d732:	454c      	cmp	r4, r9
 800d734:	d206      	bcs.n	800d744 <__hexnan+0x64>
 800d736:	2d07      	cmp	r5, #7
 800d738:	dc04      	bgt.n	800d744 <__hexnan+0x64>
 800d73a:	462a      	mov	r2, r5
 800d73c:	4649      	mov	r1, r9
 800d73e:	4620      	mov	r0, r4
 800d740:	f7ff ffa8 	bl	800d694 <L_shift>
 800d744:	4544      	cmp	r4, r8
 800d746:	d952      	bls.n	800d7ee <__hexnan+0x10e>
 800d748:	2300      	movs	r3, #0
 800d74a:	f1a4 0904 	sub.w	r9, r4, #4
 800d74e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d752:	f8cd b008 	str.w	fp, [sp, #8]
 800d756:	464c      	mov	r4, r9
 800d758:	461d      	mov	r5, r3
 800d75a:	9903      	ldr	r1, [sp, #12]
 800d75c:	e7d7      	b.n	800d70e <__hexnan+0x2e>
 800d75e:	2a29      	cmp	r2, #41	@ 0x29
 800d760:	d157      	bne.n	800d812 <__hexnan+0x132>
 800d762:	3102      	adds	r1, #2
 800d764:	f8ca 1000 	str.w	r1, [sl]
 800d768:	f1bb 0f00 	cmp.w	fp, #0
 800d76c:	d051      	beq.n	800d812 <__hexnan+0x132>
 800d76e:	454c      	cmp	r4, r9
 800d770:	d206      	bcs.n	800d780 <__hexnan+0xa0>
 800d772:	2d07      	cmp	r5, #7
 800d774:	dc04      	bgt.n	800d780 <__hexnan+0xa0>
 800d776:	462a      	mov	r2, r5
 800d778:	4649      	mov	r1, r9
 800d77a:	4620      	mov	r0, r4
 800d77c:	f7ff ff8a 	bl	800d694 <L_shift>
 800d780:	4544      	cmp	r4, r8
 800d782:	d936      	bls.n	800d7f2 <__hexnan+0x112>
 800d784:	f1a8 0204 	sub.w	r2, r8, #4
 800d788:	4623      	mov	r3, r4
 800d78a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d78e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d792:	429f      	cmp	r7, r3
 800d794:	d2f9      	bcs.n	800d78a <__hexnan+0xaa>
 800d796:	1b3b      	subs	r3, r7, r4
 800d798:	f023 0303 	bic.w	r3, r3, #3
 800d79c:	3304      	adds	r3, #4
 800d79e:	3401      	adds	r4, #1
 800d7a0:	3e03      	subs	r6, #3
 800d7a2:	42b4      	cmp	r4, r6
 800d7a4:	bf88      	it	hi
 800d7a6:	2304      	movhi	r3, #4
 800d7a8:	4443      	add	r3, r8
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f843 2b04 	str.w	r2, [r3], #4
 800d7b0:	429f      	cmp	r7, r3
 800d7b2:	d2fb      	bcs.n	800d7ac <__hexnan+0xcc>
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	b91b      	cbnz	r3, 800d7c0 <__hexnan+0xe0>
 800d7b8:	4547      	cmp	r7, r8
 800d7ba:	d128      	bne.n	800d80e <__hexnan+0x12e>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	603b      	str	r3, [r7, #0]
 800d7c0:	2005      	movs	r0, #5
 800d7c2:	b007      	add	sp, #28
 800d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	2d08      	cmp	r5, #8
 800d7cc:	f10b 0b01 	add.w	fp, fp, #1
 800d7d0:	dd06      	ble.n	800d7e0 <__hexnan+0x100>
 800d7d2:	4544      	cmp	r4, r8
 800d7d4:	d9c1      	bls.n	800d75a <__hexnan+0x7a>
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d7dc:	2501      	movs	r5, #1
 800d7de:	3c04      	subs	r4, #4
 800d7e0:	6822      	ldr	r2, [r4, #0]
 800d7e2:	f000 000f 	and.w	r0, r0, #15
 800d7e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7ea:	6020      	str	r0, [r4, #0]
 800d7ec:	e7b5      	b.n	800d75a <__hexnan+0x7a>
 800d7ee:	2508      	movs	r5, #8
 800d7f0:	e7b3      	b.n	800d75a <__hexnan+0x7a>
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d0dd      	beq.n	800d7b4 <__hexnan+0xd4>
 800d7f8:	f1c3 0320 	rsb	r3, r3, #32
 800d7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d800:	40da      	lsrs	r2, r3
 800d802:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d806:	4013      	ands	r3, r2
 800d808:	f846 3c04 	str.w	r3, [r6, #-4]
 800d80c:	e7d2      	b.n	800d7b4 <__hexnan+0xd4>
 800d80e:	3f04      	subs	r7, #4
 800d810:	e7d0      	b.n	800d7b4 <__hexnan+0xd4>
 800d812:	2004      	movs	r0, #4
 800d814:	e7d5      	b.n	800d7c2 <__hexnan+0xe2>
	...

0800d818 <malloc>:
 800d818:	4b02      	ldr	r3, [pc, #8]	@ (800d824 <malloc+0xc>)
 800d81a:	4601      	mov	r1, r0
 800d81c:	6818      	ldr	r0, [r3, #0]
 800d81e:	f000 b825 	b.w	800d86c <_malloc_r>
 800d822:	bf00      	nop
 800d824:	20000250 	.word	0x20000250

0800d828 <sbrk_aligned>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	4e0f      	ldr	r6, [pc, #60]	@ (800d868 <sbrk_aligned+0x40>)
 800d82c:	460c      	mov	r4, r1
 800d82e:	6831      	ldr	r1, [r6, #0]
 800d830:	4605      	mov	r5, r0
 800d832:	b911      	cbnz	r1, 800d83a <sbrk_aligned+0x12>
 800d834:	f000 ff94 	bl	800e760 <_sbrk_r>
 800d838:	6030      	str	r0, [r6, #0]
 800d83a:	4621      	mov	r1, r4
 800d83c:	4628      	mov	r0, r5
 800d83e:	f000 ff8f 	bl	800e760 <_sbrk_r>
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	d103      	bne.n	800d84e <sbrk_aligned+0x26>
 800d846:	f04f 34ff 	mov.w	r4, #4294967295
 800d84a:	4620      	mov	r0, r4
 800d84c:	bd70      	pop	{r4, r5, r6, pc}
 800d84e:	1cc4      	adds	r4, r0, #3
 800d850:	f024 0403 	bic.w	r4, r4, #3
 800d854:	42a0      	cmp	r0, r4
 800d856:	d0f8      	beq.n	800d84a <sbrk_aligned+0x22>
 800d858:	1a21      	subs	r1, r4, r0
 800d85a:	4628      	mov	r0, r5
 800d85c:	f000 ff80 	bl	800e760 <_sbrk_r>
 800d860:	3001      	adds	r0, #1
 800d862:	d1f2      	bne.n	800d84a <sbrk_aligned+0x22>
 800d864:	e7ef      	b.n	800d846 <sbrk_aligned+0x1e>
 800d866:	bf00      	nop
 800d868:	20000c8c 	.word	0x20000c8c

0800d86c <_malloc_r>:
 800d86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d870:	1ccd      	adds	r5, r1, #3
 800d872:	f025 0503 	bic.w	r5, r5, #3
 800d876:	3508      	adds	r5, #8
 800d878:	2d0c      	cmp	r5, #12
 800d87a:	bf38      	it	cc
 800d87c:	250c      	movcc	r5, #12
 800d87e:	2d00      	cmp	r5, #0
 800d880:	4606      	mov	r6, r0
 800d882:	db01      	blt.n	800d888 <_malloc_r+0x1c>
 800d884:	42a9      	cmp	r1, r5
 800d886:	d904      	bls.n	800d892 <_malloc_r+0x26>
 800d888:	230c      	movs	r3, #12
 800d88a:	6033      	str	r3, [r6, #0]
 800d88c:	2000      	movs	r0, #0
 800d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d968 <_malloc_r+0xfc>
 800d896:	f000 f87b 	bl	800d990 <__malloc_lock>
 800d89a:	f8d8 3000 	ldr.w	r3, [r8]
 800d89e:	461c      	mov	r4, r3
 800d8a0:	bb44      	cbnz	r4, 800d8f4 <_malloc_r+0x88>
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	f7ff ffbf 	bl	800d828 <sbrk_aligned>
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	d158      	bne.n	800d962 <_malloc_r+0xf6>
 800d8b0:	f8d8 4000 	ldr.w	r4, [r8]
 800d8b4:	4627      	mov	r7, r4
 800d8b6:	2f00      	cmp	r7, #0
 800d8b8:	d143      	bne.n	800d942 <_malloc_r+0xd6>
 800d8ba:	2c00      	cmp	r4, #0
 800d8bc:	d04b      	beq.n	800d956 <_malloc_r+0xea>
 800d8be:	6823      	ldr	r3, [r4, #0]
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	eb04 0903 	add.w	r9, r4, r3
 800d8c8:	f000 ff4a 	bl	800e760 <_sbrk_r>
 800d8cc:	4581      	cmp	r9, r0
 800d8ce:	d142      	bne.n	800d956 <_malloc_r+0xea>
 800d8d0:	6821      	ldr	r1, [r4, #0]
 800d8d2:	1a6d      	subs	r5, r5, r1
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7ff ffa6 	bl	800d828 <sbrk_aligned>
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d03a      	beq.n	800d956 <_malloc_r+0xea>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	442b      	add	r3, r5
 800d8e4:	6023      	str	r3, [r4, #0]
 800d8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	bb62      	cbnz	r2, 800d948 <_malloc_r+0xdc>
 800d8ee:	f8c8 7000 	str.w	r7, [r8]
 800d8f2:	e00f      	b.n	800d914 <_malloc_r+0xa8>
 800d8f4:	6822      	ldr	r2, [r4, #0]
 800d8f6:	1b52      	subs	r2, r2, r5
 800d8f8:	d420      	bmi.n	800d93c <_malloc_r+0xd0>
 800d8fa:	2a0b      	cmp	r2, #11
 800d8fc:	d917      	bls.n	800d92e <_malloc_r+0xc2>
 800d8fe:	1961      	adds	r1, r4, r5
 800d900:	42a3      	cmp	r3, r4
 800d902:	6025      	str	r5, [r4, #0]
 800d904:	bf18      	it	ne
 800d906:	6059      	strne	r1, [r3, #4]
 800d908:	6863      	ldr	r3, [r4, #4]
 800d90a:	bf08      	it	eq
 800d90c:	f8c8 1000 	streq.w	r1, [r8]
 800d910:	5162      	str	r2, [r4, r5]
 800d912:	604b      	str	r3, [r1, #4]
 800d914:	4630      	mov	r0, r6
 800d916:	f000 f841 	bl	800d99c <__malloc_unlock>
 800d91a:	f104 000b 	add.w	r0, r4, #11
 800d91e:	1d23      	adds	r3, r4, #4
 800d920:	f020 0007 	bic.w	r0, r0, #7
 800d924:	1ac2      	subs	r2, r0, r3
 800d926:	bf1c      	itt	ne
 800d928:	1a1b      	subne	r3, r3, r0
 800d92a:	50a3      	strne	r3, [r4, r2]
 800d92c:	e7af      	b.n	800d88e <_malloc_r+0x22>
 800d92e:	6862      	ldr	r2, [r4, #4]
 800d930:	42a3      	cmp	r3, r4
 800d932:	bf0c      	ite	eq
 800d934:	f8c8 2000 	streq.w	r2, [r8]
 800d938:	605a      	strne	r2, [r3, #4]
 800d93a:	e7eb      	b.n	800d914 <_malloc_r+0xa8>
 800d93c:	4623      	mov	r3, r4
 800d93e:	6864      	ldr	r4, [r4, #4]
 800d940:	e7ae      	b.n	800d8a0 <_malloc_r+0x34>
 800d942:	463c      	mov	r4, r7
 800d944:	687f      	ldr	r7, [r7, #4]
 800d946:	e7b6      	b.n	800d8b6 <_malloc_r+0x4a>
 800d948:	461a      	mov	r2, r3
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	d1fb      	bne.n	800d948 <_malloc_r+0xdc>
 800d950:	2300      	movs	r3, #0
 800d952:	6053      	str	r3, [r2, #4]
 800d954:	e7de      	b.n	800d914 <_malloc_r+0xa8>
 800d956:	230c      	movs	r3, #12
 800d958:	6033      	str	r3, [r6, #0]
 800d95a:	4630      	mov	r0, r6
 800d95c:	f000 f81e 	bl	800d99c <__malloc_unlock>
 800d960:	e794      	b.n	800d88c <_malloc_r+0x20>
 800d962:	6005      	str	r5, [r0, #0]
 800d964:	e7d6      	b.n	800d914 <_malloc_r+0xa8>
 800d966:	bf00      	nop
 800d968:	20000c90 	.word	0x20000c90

0800d96c <__ascii_mbtowc>:
 800d96c:	b082      	sub	sp, #8
 800d96e:	b901      	cbnz	r1, 800d972 <__ascii_mbtowc+0x6>
 800d970:	a901      	add	r1, sp, #4
 800d972:	b142      	cbz	r2, 800d986 <__ascii_mbtowc+0x1a>
 800d974:	b14b      	cbz	r3, 800d98a <__ascii_mbtowc+0x1e>
 800d976:	7813      	ldrb	r3, [r2, #0]
 800d978:	600b      	str	r3, [r1, #0]
 800d97a:	7812      	ldrb	r2, [r2, #0]
 800d97c:	1e10      	subs	r0, r2, #0
 800d97e:	bf18      	it	ne
 800d980:	2001      	movne	r0, #1
 800d982:	b002      	add	sp, #8
 800d984:	4770      	bx	lr
 800d986:	4610      	mov	r0, r2
 800d988:	e7fb      	b.n	800d982 <__ascii_mbtowc+0x16>
 800d98a:	f06f 0001 	mvn.w	r0, #1
 800d98e:	e7f8      	b.n	800d982 <__ascii_mbtowc+0x16>

0800d990 <__malloc_lock>:
 800d990:	4801      	ldr	r0, [pc, #4]	@ (800d998 <__malloc_lock+0x8>)
 800d992:	f7fe bd50 	b.w	800c436 <__retarget_lock_acquire_recursive>
 800d996:	bf00      	nop
 800d998:	20000c88 	.word	0x20000c88

0800d99c <__malloc_unlock>:
 800d99c:	4801      	ldr	r0, [pc, #4]	@ (800d9a4 <__malloc_unlock+0x8>)
 800d99e:	f7fe bd4b 	b.w	800c438 <__retarget_lock_release_recursive>
 800d9a2:	bf00      	nop
 800d9a4:	20000c88 	.word	0x20000c88

0800d9a8 <_Balloc>:
 800d9a8:	b570      	push	{r4, r5, r6, lr}
 800d9aa:	69c6      	ldr	r6, [r0, #28]
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	460d      	mov	r5, r1
 800d9b0:	b976      	cbnz	r6, 800d9d0 <_Balloc+0x28>
 800d9b2:	2010      	movs	r0, #16
 800d9b4:	f7ff ff30 	bl	800d818 <malloc>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	61e0      	str	r0, [r4, #28]
 800d9bc:	b920      	cbnz	r0, 800d9c8 <_Balloc+0x20>
 800d9be:	4b18      	ldr	r3, [pc, #96]	@ (800da20 <_Balloc+0x78>)
 800d9c0:	4818      	ldr	r0, [pc, #96]	@ (800da24 <_Balloc+0x7c>)
 800d9c2:	216b      	movs	r1, #107	@ 0x6b
 800d9c4:	f000 fedc 	bl	800e780 <__assert_func>
 800d9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9cc:	6006      	str	r6, [r0, #0]
 800d9ce:	60c6      	str	r6, [r0, #12]
 800d9d0:	69e6      	ldr	r6, [r4, #28]
 800d9d2:	68f3      	ldr	r3, [r6, #12]
 800d9d4:	b183      	cbz	r3, 800d9f8 <_Balloc+0x50>
 800d9d6:	69e3      	ldr	r3, [r4, #28]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9de:	b9b8      	cbnz	r0, 800da10 <_Balloc+0x68>
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	fa01 f605 	lsl.w	r6, r1, r5
 800d9e6:	1d72      	adds	r2, r6, #5
 800d9e8:	0092      	lsls	r2, r2, #2
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f000 fee6 	bl	800e7bc <_calloc_r>
 800d9f0:	b160      	cbz	r0, 800da0c <_Balloc+0x64>
 800d9f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9f6:	e00e      	b.n	800da16 <_Balloc+0x6e>
 800d9f8:	2221      	movs	r2, #33	@ 0x21
 800d9fa:	2104      	movs	r1, #4
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f000 fedd 	bl	800e7bc <_calloc_r>
 800da02:	69e3      	ldr	r3, [r4, #28]
 800da04:	60f0      	str	r0, [r6, #12]
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1e4      	bne.n	800d9d6 <_Balloc+0x2e>
 800da0c:	2000      	movs	r0, #0
 800da0e:	bd70      	pop	{r4, r5, r6, pc}
 800da10:	6802      	ldr	r2, [r0, #0]
 800da12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da16:	2300      	movs	r3, #0
 800da18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da1c:	e7f7      	b.n	800da0e <_Balloc+0x66>
 800da1e:	bf00      	nop
 800da20:	080101ba 	.word	0x080101ba
 800da24:	0801029a 	.word	0x0801029a

0800da28 <_Bfree>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	69c6      	ldr	r6, [r0, #28]
 800da2c:	4605      	mov	r5, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	b976      	cbnz	r6, 800da50 <_Bfree+0x28>
 800da32:	2010      	movs	r0, #16
 800da34:	f7ff fef0 	bl	800d818 <malloc>
 800da38:	4602      	mov	r2, r0
 800da3a:	61e8      	str	r0, [r5, #28]
 800da3c:	b920      	cbnz	r0, 800da48 <_Bfree+0x20>
 800da3e:	4b09      	ldr	r3, [pc, #36]	@ (800da64 <_Bfree+0x3c>)
 800da40:	4809      	ldr	r0, [pc, #36]	@ (800da68 <_Bfree+0x40>)
 800da42:	218f      	movs	r1, #143	@ 0x8f
 800da44:	f000 fe9c 	bl	800e780 <__assert_func>
 800da48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da4c:	6006      	str	r6, [r0, #0]
 800da4e:	60c6      	str	r6, [r0, #12]
 800da50:	b13c      	cbz	r4, 800da62 <_Bfree+0x3a>
 800da52:	69eb      	ldr	r3, [r5, #28]
 800da54:	6862      	ldr	r2, [r4, #4]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da5c:	6021      	str	r1, [r4, #0]
 800da5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	080101ba 	.word	0x080101ba
 800da68:	0801029a 	.word	0x0801029a

0800da6c <__multadd>:
 800da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da70:	690d      	ldr	r5, [r1, #16]
 800da72:	4607      	mov	r7, r0
 800da74:	460c      	mov	r4, r1
 800da76:	461e      	mov	r6, r3
 800da78:	f101 0c14 	add.w	ip, r1, #20
 800da7c:	2000      	movs	r0, #0
 800da7e:	f8dc 3000 	ldr.w	r3, [ip]
 800da82:	b299      	uxth	r1, r3
 800da84:	fb02 6101 	mla	r1, r2, r1, r6
 800da88:	0c1e      	lsrs	r6, r3, #16
 800da8a:	0c0b      	lsrs	r3, r1, #16
 800da8c:	fb02 3306 	mla	r3, r2, r6, r3
 800da90:	b289      	uxth	r1, r1
 800da92:	3001      	adds	r0, #1
 800da94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da98:	4285      	cmp	r5, r0
 800da9a:	f84c 1b04 	str.w	r1, [ip], #4
 800da9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800daa2:	dcec      	bgt.n	800da7e <__multadd+0x12>
 800daa4:	b30e      	cbz	r6, 800daea <__multadd+0x7e>
 800daa6:	68a3      	ldr	r3, [r4, #8]
 800daa8:	42ab      	cmp	r3, r5
 800daaa:	dc19      	bgt.n	800dae0 <__multadd+0x74>
 800daac:	6861      	ldr	r1, [r4, #4]
 800daae:	4638      	mov	r0, r7
 800dab0:	3101      	adds	r1, #1
 800dab2:	f7ff ff79 	bl	800d9a8 <_Balloc>
 800dab6:	4680      	mov	r8, r0
 800dab8:	b928      	cbnz	r0, 800dac6 <__multadd+0x5a>
 800daba:	4602      	mov	r2, r0
 800dabc:	4b0c      	ldr	r3, [pc, #48]	@ (800daf0 <__multadd+0x84>)
 800dabe:	480d      	ldr	r0, [pc, #52]	@ (800daf4 <__multadd+0x88>)
 800dac0:	21ba      	movs	r1, #186	@ 0xba
 800dac2:	f000 fe5d 	bl	800e780 <__assert_func>
 800dac6:	6922      	ldr	r2, [r4, #16]
 800dac8:	3202      	adds	r2, #2
 800daca:	f104 010c 	add.w	r1, r4, #12
 800dace:	0092      	lsls	r2, r2, #2
 800dad0:	300c      	adds	r0, #12
 800dad2:	f7fe fcba 	bl	800c44a <memcpy>
 800dad6:	4621      	mov	r1, r4
 800dad8:	4638      	mov	r0, r7
 800dada:	f7ff ffa5 	bl	800da28 <_Bfree>
 800dade:	4644      	mov	r4, r8
 800dae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dae4:	3501      	adds	r5, #1
 800dae6:	615e      	str	r6, [r3, #20]
 800dae8:	6125      	str	r5, [r4, #16]
 800daea:	4620      	mov	r0, r4
 800daec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf0:	08010229 	.word	0x08010229
 800daf4:	0801029a 	.word	0x0801029a

0800daf8 <__s2b>:
 800daf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dafc:	460c      	mov	r4, r1
 800dafe:	4615      	mov	r5, r2
 800db00:	461f      	mov	r7, r3
 800db02:	2209      	movs	r2, #9
 800db04:	3308      	adds	r3, #8
 800db06:	4606      	mov	r6, r0
 800db08:	fb93 f3f2 	sdiv	r3, r3, r2
 800db0c:	2100      	movs	r1, #0
 800db0e:	2201      	movs	r2, #1
 800db10:	429a      	cmp	r2, r3
 800db12:	db09      	blt.n	800db28 <__s2b+0x30>
 800db14:	4630      	mov	r0, r6
 800db16:	f7ff ff47 	bl	800d9a8 <_Balloc>
 800db1a:	b940      	cbnz	r0, 800db2e <__s2b+0x36>
 800db1c:	4602      	mov	r2, r0
 800db1e:	4b19      	ldr	r3, [pc, #100]	@ (800db84 <__s2b+0x8c>)
 800db20:	4819      	ldr	r0, [pc, #100]	@ (800db88 <__s2b+0x90>)
 800db22:	21d3      	movs	r1, #211	@ 0xd3
 800db24:	f000 fe2c 	bl	800e780 <__assert_func>
 800db28:	0052      	lsls	r2, r2, #1
 800db2a:	3101      	adds	r1, #1
 800db2c:	e7f0      	b.n	800db10 <__s2b+0x18>
 800db2e:	9b08      	ldr	r3, [sp, #32]
 800db30:	6143      	str	r3, [r0, #20]
 800db32:	2d09      	cmp	r5, #9
 800db34:	f04f 0301 	mov.w	r3, #1
 800db38:	6103      	str	r3, [r0, #16]
 800db3a:	dd16      	ble.n	800db6a <__s2b+0x72>
 800db3c:	f104 0909 	add.w	r9, r4, #9
 800db40:	46c8      	mov	r8, r9
 800db42:	442c      	add	r4, r5
 800db44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db48:	4601      	mov	r1, r0
 800db4a:	3b30      	subs	r3, #48	@ 0x30
 800db4c:	220a      	movs	r2, #10
 800db4e:	4630      	mov	r0, r6
 800db50:	f7ff ff8c 	bl	800da6c <__multadd>
 800db54:	45a0      	cmp	r8, r4
 800db56:	d1f5      	bne.n	800db44 <__s2b+0x4c>
 800db58:	f1a5 0408 	sub.w	r4, r5, #8
 800db5c:	444c      	add	r4, r9
 800db5e:	1b2d      	subs	r5, r5, r4
 800db60:	1963      	adds	r3, r4, r5
 800db62:	42bb      	cmp	r3, r7
 800db64:	db04      	blt.n	800db70 <__s2b+0x78>
 800db66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6a:	340a      	adds	r4, #10
 800db6c:	2509      	movs	r5, #9
 800db6e:	e7f6      	b.n	800db5e <__s2b+0x66>
 800db70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db74:	4601      	mov	r1, r0
 800db76:	3b30      	subs	r3, #48	@ 0x30
 800db78:	220a      	movs	r2, #10
 800db7a:	4630      	mov	r0, r6
 800db7c:	f7ff ff76 	bl	800da6c <__multadd>
 800db80:	e7ee      	b.n	800db60 <__s2b+0x68>
 800db82:	bf00      	nop
 800db84:	08010229 	.word	0x08010229
 800db88:	0801029a 	.word	0x0801029a

0800db8c <__hi0bits>:
 800db8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db90:	4603      	mov	r3, r0
 800db92:	bf36      	itet	cc
 800db94:	0403      	lslcc	r3, r0, #16
 800db96:	2000      	movcs	r0, #0
 800db98:	2010      	movcc	r0, #16
 800db9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db9e:	bf3c      	itt	cc
 800dba0:	021b      	lslcc	r3, r3, #8
 800dba2:	3008      	addcc	r0, #8
 800dba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dba8:	bf3c      	itt	cc
 800dbaa:	011b      	lslcc	r3, r3, #4
 800dbac:	3004      	addcc	r0, #4
 800dbae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dbb2:	bf3c      	itt	cc
 800dbb4:	009b      	lslcc	r3, r3, #2
 800dbb6:	3002      	addcc	r0, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	db05      	blt.n	800dbc8 <__hi0bits+0x3c>
 800dbbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800dbc0:	f100 0001 	add.w	r0, r0, #1
 800dbc4:	bf08      	it	eq
 800dbc6:	2020      	moveq	r0, #32
 800dbc8:	4770      	bx	lr

0800dbca <__lo0bits>:
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	4602      	mov	r2, r0
 800dbce:	f013 0007 	ands.w	r0, r3, #7
 800dbd2:	d00b      	beq.n	800dbec <__lo0bits+0x22>
 800dbd4:	07d9      	lsls	r1, r3, #31
 800dbd6:	d421      	bmi.n	800dc1c <__lo0bits+0x52>
 800dbd8:	0798      	lsls	r0, r3, #30
 800dbda:	bf49      	itett	mi
 800dbdc:	085b      	lsrmi	r3, r3, #1
 800dbde:	089b      	lsrpl	r3, r3, #2
 800dbe0:	2001      	movmi	r0, #1
 800dbe2:	6013      	strmi	r3, [r2, #0]
 800dbe4:	bf5c      	itt	pl
 800dbe6:	6013      	strpl	r3, [r2, #0]
 800dbe8:	2002      	movpl	r0, #2
 800dbea:	4770      	bx	lr
 800dbec:	b299      	uxth	r1, r3
 800dbee:	b909      	cbnz	r1, 800dbf4 <__lo0bits+0x2a>
 800dbf0:	0c1b      	lsrs	r3, r3, #16
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	b2d9      	uxtb	r1, r3
 800dbf6:	b909      	cbnz	r1, 800dbfc <__lo0bits+0x32>
 800dbf8:	3008      	adds	r0, #8
 800dbfa:	0a1b      	lsrs	r3, r3, #8
 800dbfc:	0719      	lsls	r1, r3, #28
 800dbfe:	bf04      	itt	eq
 800dc00:	091b      	lsreq	r3, r3, #4
 800dc02:	3004      	addeq	r0, #4
 800dc04:	0799      	lsls	r1, r3, #30
 800dc06:	bf04      	itt	eq
 800dc08:	089b      	lsreq	r3, r3, #2
 800dc0a:	3002      	addeq	r0, #2
 800dc0c:	07d9      	lsls	r1, r3, #31
 800dc0e:	d403      	bmi.n	800dc18 <__lo0bits+0x4e>
 800dc10:	085b      	lsrs	r3, r3, #1
 800dc12:	f100 0001 	add.w	r0, r0, #1
 800dc16:	d003      	beq.n	800dc20 <__lo0bits+0x56>
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	4770      	bx	lr
 800dc1c:	2000      	movs	r0, #0
 800dc1e:	4770      	bx	lr
 800dc20:	2020      	movs	r0, #32
 800dc22:	4770      	bx	lr

0800dc24 <__i2b>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	460c      	mov	r4, r1
 800dc28:	2101      	movs	r1, #1
 800dc2a:	f7ff febd 	bl	800d9a8 <_Balloc>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	b928      	cbnz	r0, 800dc3e <__i2b+0x1a>
 800dc32:	4b05      	ldr	r3, [pc, #20]	@ (800dc48 <__i2b+0x24>)
 800dc34:	4805      	ldr	r0, [pc, #20]	@ (800dc4c <__i2b+0x28>)
 800dc36:	f240 1145 	movw	r1, #325	@ 0x145
 800dc3a:	f000 fda1 	bl	800e780 <__assert_func>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	6144      	str	r4, [r0, #20]
 800dc42:	6103      	str	r3, [r0, #16]
 800dc44:	bd10      	pop	{r4, pc}
 800dc46:	bf00      	nop
 800dc48:	08010229 	.word	0x08010229
 800dc4c:	0801029a 	.word	0x0801029a

0800dc50 <__multiply>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	4614      	mov	r4, r2
 800dc56:	690a      	ldr	r2, [r1, #16]
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	bfa8      	it	ge
 800dc5e:	4623      	movge	r3, r4
 800dc60:	460f      	mov	r7, r1
 800dc62:	bfa4      	itt	ge
 800dc64:	460c      	movge	r4, r1
 800dc66:	461f      	movge	r7, r3
 800dc68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	6861      	ldr	r1, [r4, #4]
 800dc74:	eb0a 0609 	add.w	r6, sl, r9
 800dc78:	42b3      	cmp	r3, r6
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	bfb8      	it	lt
 800dc7e:	3101      	addlt	r1, #1
 800dc80:	f7ff fe92 	bl	800d9a8 <_Balloc>
 800dc84:	b930      	cbnz	r0, 800dc94 <__multiply+0x44>
 800dc86:	4602      	mov	r2, r0
 800dc88:	4b44      	ldr	r3, [pc, #272]	@ (800dd9c <__multiply+0x14c>)
 800dc8a:	4845      	ldr	r0, [pc, #276]	@ (800dda0 <__multiply+0x150>)
 800dc8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc90:	f000 fd76 	bl	800e780 <__assert_func>
 800dc94:	f100 0514 	add.w	r5, r0, #20
 800dc98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc9c:	462b      	mov	r3, r5
 800dc9e:	2200      	movs	r2, #0
 800dca0:	4543      	cmp	r3, r8
 800dca2:	d321      	bcc.n	800dce8 <__multiply+0x98>
 800dca4:	f107 0114 	add.w	r1, r7, #20
 800dca8:	f104 0214 	add.w	r2, r4, #20
 800dcac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dcb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dcb4:	9302      	str	r3, [sp, #8]
 800dcb6:	1b13      	subs	r3, r2, r4
 800dcb8:	3b15      	subs	r3, #21
 800dcba:	f023 0303 	bic.w	r3, r3, #3
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	f104 0715 	add.w	r7, r4, #21
 800dcc4:	42ba      	cmp	r2, r7
 800dcc6:	bf38      	it	cc
 800dcc8:	2304      	movcc	r3, #4
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	9b02      	ldr	r3, [sp, #8]
 800dcce:	9103      	str	r1, [sp, #12]
 800dcd0:	428b      	cmp	r3, r1
 800dcd2:	d80c      	bhi.n	800dcee <__multiply+0x9e>
 800dcd4:	2e00      	cmp	r6, #0
 800dcd6:	dd03      	ble.n	800dce0 <__multiply+0x90>
 800dcd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d05b      	beq.n	800dd98 <__multiply+0x148>
 800dce0:	6106      	str	r6, [r0, #16]
 800dce2:	b005      	add	sp, #20
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	f843 2b04 	str.w	r2, [r3], #4
 800dcec:	e7d8      	b.n	800dca0 <__multiply+0x50>
 800dcee:	f8b1 a000 	ldrh.w	sl, [r1]
 800dcf2:	f1ba 0f00 	cmp.w	sl, #0
 800dcf6:	d024      	beq.n	800dd42 <__multiply+0xf2>
 800dcf8:	f104 0e14 	add.w	lr, r4, #20
 800dcfc:	46a9      	mov	r9, r5
 800dcfe:	f04f 0c00 	mov.w	ip, #0
 800dd02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd06:	f8d9 3000 	ldr.w	r3, [r9]
 800dd0a:	fa1f fb87 	uxth.w	fp, r7
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	fb0a 330b 	mla	r3, sl, fp, r3
 800dd14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dd18:	f8d9 7000 	ldr.w	r7, [r9]
 800dd1c:	4463      	add	r3, ip
 800dd1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd22:	fb0a c70b 	mla	r7, sl, fp, ip
 800dd26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd30:	4572      	cmp	r2, lr
 800dd32:	f849 3b04 	str.w	r3, [r9], #4
 800dd36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dd3a:	d8e2      	bhi.n	800dd02 <__multiply+0xb2>
 800dd3c:	9b01      	ldr	r3, [sp, #4]
 800dd3e:	f845 c003 	str.w	ip, [r5, r3]
 800dd42:	9b03      	ldr	r3, [sp, #12]
 800dd44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dd48:	3104      	adds	r1, #4
 800dd4a:	f1b9 0f00 	cmp.w	r9, #0
 800dd4e:	d021      	beq.n	800dd94 <__multiply+0x144>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	f104 0c14 	add.w	ip, r4, #20
 800dd56:	46ae      	mov	lr, r5
 800dd58:	f04f 0a00 	mov.w	sl, #0
 800dd5c:	f8bc b000 	ldrh.w	fp, [ip]
 800dd60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd64:	fb09 770b 	mla	r7, r9, fp, r7
 800dd68:	4457      	add	r7, sl
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd70:	f84e 3b04 	str.w	r3, [lr], #4
 800dd74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd7c:	f8be 3000 	ldrh.w	r3, [lr]
 800dd80:	fb09 330a 	mla	r3, r9, sl, r3
 800dd84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd88:	4562      	cmp	r2, ip
 800dd8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd8e:	d8e5      	bhi.n	800dd5c <__multiply+0x10c>
 800dd90:	9f01      	ldr	r7, [sp, #4]
 800dd92:	51eb      	str	r3, [r5, r7]
 800dd94:	3504      	adds	r5, #4
 800dd96:	e799      	b.n	800dccc <__multiply+0x7c>
 800dd98:	3e01      	subs	r6, #1
 800dd9a:	e79b      	b.n	800dcd4 <__multiply+0x84>
 800dd9c:	08010229 	.word	0x08010229
 800dda0:	0801029a 	.word	0x0801029a

0800dda4 <__pow5mult>:
 800dda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda8:	4615      	mov	r5, r2
 800ddaa:	f012 0203 	ands.w	r2, r2, #3
 800ddae:	4607      	mov	r7, r0
 800ddb0:	460e      	mov	r6, r1
 800ddb2:	d007      	beq.n	800ddc4 <__pow5mult+0x20>
 800ddb4:	4c25      	ldr	r4, [pc, #148]	@ (800de4c <__pow5mult+0xa8>)
 800ddb6:	3a01      	subs	r2, #1
 800ddb8:	2300      	movs	r3, #0
 800ddba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddbe:	f7ff fe55 	bl	800da6c <__multadd>
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	10ad      	asrs	r5, r5, #2
 800ddc6:	d03d      	beq.n	800de44 <__pow5mult+0xa0>
 800ddc8:	69fc      	ldr	r4, [r7, #28]
 800ddca:	b97c      	cbnz	r4, 800ddec <__pow5mult+0x48>
 800ddcc:	2010      	movs	r0, #16
 800ddce:	f7ff fd23 	bl	800d818 <malloc>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	61f8      	str	r0, [r7, #28]
 800ddd6:	b928      	cbnz	r0, 800dde4 <__pow5mult+0x40>
 800ddd8:	4b1d      	ldr	r3, [pc, #116]	@ (800de50 <__pow5mult+0xac>)
 800ddda:	481e      	ldr	r0, [pc, #120]	@ (800de54 <__pow5mult+0xb0>)
 800dddc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dde0:	f000 fcce 	bl	800e780 <__assert_func>
 800dde4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dde8:	6004      	str	r4, [r0, #0]
 800ddea:	60c4      	str	r4, [r0, #12]
 800ddec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ddf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddf4:	b94c      	cbnz	r4, 800de0a <__pow5mult+0x66>
 800ddf6:	f240 2171 	movw	r1, #625	@ 0x271
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	f7ff ff12 	bl	800dc24 <__i2b>
 800de00:	2300      	movs	r3, #0
 800de02:	f8c8 0008 	str.w	r0, [r8, #8]
 800de06:	4604      	mov	r4, r0
 800de08:	6003      	str	r3, [r0, #0]
 800de0a:	f04f 0900 	mov.w	r9, #0
 800de0e:	07eb      	lsls	r3, r5, #31
 800de10:	d50a      	bpl.n	800de28 <__pow5mult+0x84>
 800de12:	4631      	mov	r1, r6
 800de14:	4622      	mov	r2, r4
 800de16:	4638      	mov	r0, r7
 800de18:	f7ff ff1a 	bl	800dc50 <__multiply>
 800de1c:	4631      	mov	r1, r6
 800de1e:	4680      	mov	r8, r0
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff fe01 	bl	800da28 <_Bfree>
 800de26:	4646      	mov	r6, r8
 800de28:	106d      	asrs	r5, r5, #1
 800de2a:	d00b      	beq.n	800de44 <__pow5mult+0xa0>
 800de2c:	6820      	ldr	r0, [r4, #0]
 800de2e:	b938      	cbnz	r0, 800de40 <__pow5mult+0x9c>
 800de30:	4622      	mov	r2, r4
 800de32:	4621      	mov	r1, r4
 800de34:	4638      	mov	r0, r7
 800de36:	f7ff ff0b 	bl	800dc50 <__multiply>
 800de3a:	6020      	str	r0, [r4, #0]
 800de3c:	f8c0 9000 	str.w	r9, [r0]
 800de40:	4604      	mov	r4, r0
 800de42:	e7e4      	b.n	800de0e <__pow5mult+0x6a>
 800de44:	4630      	mov	r0, r6
 800de46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4a:	bf00      	nop
 800de4c:	080102f4 	.word	0x080102f4
 800de50:	080101ba 	.word	0x080101ba
 800de54:	0801029a 	.word	0x0801029a

0800de58 <__lshift>:
 800de58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de5c:	460c      	mov	r4, r1
 800de5e:	6849      	ldr	r1, [r1, #4]
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de66:	68a3      	ldr	r3, [r4, #8]
 800de68:	4607      	mov	r7, r0
 800de6a:	4691      	mov	r9, r2
 800de6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de70:	f108 0601 	add.w	r6, r8, #1
 800de74:	42b3      	cmp	r3, r6
 800de76:	db0b      	blt.n	800de90 <__lshift+0x38>
 800de78:	4638      	mov	r0, r7
 800de7a:	f7ff fd95 	bl	800d9a8 <_Balloc>
 800de7e:	4605      	mov	r5, r0
 800de80:	b948      	cbnz	r0, 800de96 <__lshift+0x3e>
 800de82:	4602      	mov	r2, r0
 800de84:	4b28      	ldr	r3, [pc, #160]	@ (800df28 <__lshift+0xd0>)
 800de86:	4829      	ldr	r0, [pc, #164]	@ (800df2c <__lshift+0xd4>)
 800de88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de8c:	f000 fc78 	bl	800e780 <__assert_func>
 800de90:	3101      	adds	r1, #1
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	e7ee      	b.n	800de74 <__lshift+0x1c>
 800de96:	2300      	movs	r3, #0
 800de98:	f100 0114 	add.w	r1, r0, #20
 800de9c:	f100 0210 	add.w	r2, r0, #16
 800dea0:	4618      	mov	r0, r3
 800dea2:	4553      	cmp	r3, sl
 800dea4:	db33      	blt.n	800df0e <__lshift+0xb6>
 800dea6:	6920      	ldr	r0, [r4, #16]
 800dea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800deac:	f104 0314 	add.w	r3, r4, #20
 800deb0:	f019 091f 	ands.w	r9, r9, #31
 800deb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800deb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800debc:	d02b      	beq.n	800df16 <__lshift+0xbe>
 800debe:	f1c9 0e20 	rsb	lr, r9, #32
 800dec2:	468a      	mov	sl, r1
 800dec4:	2200      	movs	r2, #0
 800dec6:	6818      	ldr	r0, [r3, #0]
 800dec8:	fa00 f009 	lsl.w	r0, r0, r9
 800decc:	4310      	orrs	r0, r2
 800dece:	f84a 0b04 	str.w	r0, [sl], #4
 800ded2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded6:	459c      	cmp	ip, r3
 800ded8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dedc:	d8f3      	bhi.n	800dec6 <__lshift+0x6e>
 800dede:	ebac 0304 	sub.w	r3, ip, r4
 800dee2:	3b15      	subs	r3, #21
 800dee4:	f023 0303 	bic.w	r3, r3, #3
 800dee8:	3304      	adds	r3, #4
 800deea:	f104 0015 	add.w	r0, r4, #21
 800deee:	4584      	cmp	ip, r0
 800def0:	bf38      	it	cc
 800def2:	2304      	movcc	r3, #4
 800def4:	50ca      	str	r2, [r1, r3]
 800def6:	b10a      	cbz	r2, 800defc <__lshift+0xa4>
 800def8:	f108 0602 	add.w	r6, r8, #2
 800defc:	3e01      	subs	r6, #1
 800defe:	4638      	mov	r0, r7
 800df00:	612e      	str	r6, [r5, #16]
 800df02:	4621      	mov	r1, r4
 800df04:	f7ff fd90 	bl	800da28 <_Bfree>
 800df08:	4628      	mov	r0, r5
 800df0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800df12:	3301      	adds	r3, #1
 800df14:	e7c5      	b.n	800dea2 <__lshift+0x4a>
 800df16:	3904      	subs	r1, #4
 800df18:	f853 2b04 	ldr.w	r2, [r3], #4
 800df1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800df20:	459c      	cmp	ip, r3
 800df22:	d8f9      	bhi.n	800df18 <__lshift+0xc0>
 800df24:	e7ea      	b.n	800defc <__lshift+0xa4>
 800df26:	bf00      	nop
 800df28:	08010229 	.word	0x08010229
 800df2c:	0801029a 	.word	0x0801029a

0800df30 <__mcmp>:
 800df30:	690a      	ldr	r2, [r1, #16]
 800df32:	4603      	mov	r3, r0
 800df34:	6900      	ldr	r0, [r0, #16]
 800df36:	1a80      	subs	r0, r0, r2
 800df38:	b530      	push	{r4, r5, lr}
 800df3a:	d10e      	bne.n	800df5a <__mcmp+0x2a>
 800df3c:	3314      	adds	r3, #20
 800df3e:	3114      	adds	r1, #20
 800df40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800df44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800df48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df50:	4295      	cmp	r5, r2
 800df52:	d003      	beq.n	800df5c <__mcmp+0x2c>
 800df54:	d205      	bcs.n	800df62 <__mcmp+0x32>
 800df56:	f04f 30ff 	mov.w	r0, #4294967295
 800df5a:	bd30      	pop	{r4, r5, pc}
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	d3f3      	bcc.n	800df48 <__mcmp+0x18>
 800df60:	e7fb      	b.n	800df5a <__mcmp+0x2a>
 800df62:	2001      	movs	r0, #1
 800df64:	e7f9      	b.n	800df5a <__mcmp+0x2a>
	...

0800df68 <__mdiff>:
 800df68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	4689      	mov	r9, r1
 800df6e:	4606      	mov	r6, r0
 800df70:	4611      	mov	r1, r2
 800df72:	4648      	mov	r0, r9
 800df74:	4614      	mov	r4, r2
 800df76:	f7ff ffdb 	bl	800df30 <__mcmp>
 800df7a:	1e05      	subs	r5, r0, #0
 800df7c:	d112      	bne.n	800dfa4 <__mdiff+0x3c>
 800df7e:	4629      	mov	r1, r5
 800df80:	4630      	mov	r0, r6
 800df82:	f7ff fd11 	bl	800d9a8 <_Balloc>
 800df86:	4602      	mov	r2, r0
 800df88:	b928      	cbnz	r0, 800df96 <__mdiff+0x2e>
 800df8a:	4b3f      	ldr	r3, [pc, #252]	@ (800e088 <__mdiff+0x120>)
 800df8c:	f240 2137 	movw	r1, #567	@ 0x237
 800df90:	483e      	ldr	r0, [pc, #248]	@ (800e08c <__mdiff+0x124>)
 800df92:	f000 fbf5 	bl	800e780 <__assert_func>
 800df96:	2301      	movs	r3, #1
 800df98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df9c:	4610      	mov	r0, r2
 800df9e:	b003      	add	sp, #12
 800dfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa4:	bfbc      	itt	lt
 800dfa6:	464b      	movlt	r3, r9
 800dfa8:	46a1      	movlt	r9, r4
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dfb0:	bfba      	itte	lt
 800dfb2:	461c      	movlt	r4, r3
 800dfb4:	2501      	movlt	r5, #1
 800dfb6:	2500      	movge	r5, #0
 800dfb8:	f7ff fcf6 	bl	800d9a8 <_Balloc>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	b918      	cbnz	r0, 800dfc8 <__mdiff+0x60>
 800dfc0:	4b31      	ldr	r3, [pc, #196]	@ (800e088 <__mdiff+0x120>)
 800dfc2:	f240 2145 	movw	r1, #581	@ 0x245
 800dfc6:	e7e3      	b.n	800df90 <__mdiff+0x28>
 800dfc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dfcc:	6926      	ldr	r6, [r4, #16]
 800dfce:	60c5      	str	r5, [r0, #12]
 800dfd0:	f109 0310 	add.w	r3, r9, #16
 800dfd4:	f109 0514 	add.w	r5, r9, #20
 800dfd8:	f104 0e14 	add.w	lr, r4, #20
 800dfdc:	f100 0b14 	add.w	fp, r0, #20
 800dfe0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dfe4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dfe8:	9301      	str	r3, [sp, #4]
 800dfea:	46d9      	mov	r9, fp
 800dfec:	f04f 0c00 	mov.w	ip, #0
 800dff0:	9b01      	ldr	r3, [sp, #4]
 800dff2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dff6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	fa1f f38a 	uxth.w	r3, sl
 800e000:	4619      	mov	r1, r3
 800e002:	b283      	uxth	r3, r0
 800e004:	1acb      	subs	r3, r1, r3
 800e006:	0c00      	lsrs	r0, r0, #16
 800e008:	4463      	add	r3, ip
 800e00a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e00e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e012:	b29b      	uxth	r3, r3
 800e014:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e018:	4576      	cmp	r6, lr
 800e01a:	f849 3b04 	str.w	r3, [r9], #4
 800e01e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e022:	d8e5      	bhi.n	800dff0 <__mdiff+0x88>
 800e024:	1b33      	subs	r3, r6, r4
 800e026:	3b15      	subs	r3, #21
 800e028:	f023 0303 	bic.w	r3, r3, #3
 800e02c:	3415      	adds	r4, #21
 800e02e:	3304      	adds	r3, #4
 800e030:	42a6      	cmp	r6, r4
 800e032:	bf38      	it	cc
 800e034:	2304      	movcc	r3, #4
 800e036:	441d      	add	r5, r3
 800e038:	445b      	add	r3, fp
 800e03a:	461e      	mov	r6, r3
 800e03c:	462c      	mov	r4, r5
 800e03e:	4544      	cmp	r4, r8
 800e040:	d30e      	bcc.n	800e060 <__mdiff+0xf8>
 800e042:	f108 0103 	add.w	r1, r8, #3
 800e046:	1b49      	subs	r1, r1, r5
 800e048:	f021 0103 	bic.w	r1, r1, #3
 800e04c:	3d03      	subs	r5, #3
 800e04e:	45a8      	cmp	r8, r5
 800e050:	bf38      	it	cc
 800e052:	2100      	movcc	r1, #0
 800e054:	440b      	add	r3, r1
 800e056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e05a:	b191      	cbz	r1, 800e082 <__mdiff+0x11a>
 800e05c:	6117      	str	r7, [r2, #16]
 800e05e:	e79d      	b.n	800df9c <__mdiff+0x34>
 800e060:	f854 1b04 	ldr.w	r1, [r4], #4
 800e064:	46e6      	mov	lr, ip
 800e066:	0c08      	lsrs	r0, r1, #16
 800e068:	fa1c fc81 	uxtah	ip, ip, r1
 800e06c:	4471      	add	r1, lr
 800e06e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e072:	b289      	uxth	r1, r1
 800e074:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e078:	f846 1b04 	str.w	r1, [r6], #4
 800e07c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e080:	e7dd      	b.n	800e03e <__mdiff+0xd6>
 800e082:	3f01      	subs	r7, #1
 800e084:	e7e7      	b.n	800e056 <__mdiff+0xee>
 800e086:	bf00      	nop
 800e088:	08010229 	.word	0x08010229
 800e08c:	0801029a 	.word	0x0801029a

0800e090 <__ulp>:
 800e090:	b082      	sub	sp, #8
 800e092:	ed8d 0b00 	vstr	d0, [sp]
 800e096:	9a01      	ldr	r2, [sp, #4]
 800e098:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <__ulp+0x48>)
 800e09a:	4013      	ands	r3, r2
 800e09c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	dc08      	bgt.n	800e0b6 <__ulp+0x26>
 800e0a4:	425b      	negs	r3, r3
 800e0a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e0aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e0ae:	da04      	bge.n	800e0ba <__ulp+0x2a>
 800e0b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e0b4:	4113      	asrs	r3, r2
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	e008      	b.n	800e0cc <__ulp+0x3c>
 800e0ba:	f1a2 0314 	sub.w	r3, r2, #20
 800e0be:	2b1e      	cmp	r3, #30
 800e0c0:	bfda      	itte	le
 800e0c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e0c6:	40da      	lsrle	r2, r3
 800e0c8:	2201      	movgt	r2, #1
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	ec41 0b10 	vmov	d0, r0, r1
 800e0d4:	b002      	add	sp, #8
 800e0d6:	4770      	bx	lr
 800e0d8:	7ff00000 	.word	0x7ff00000

0800e0dc <__b2d>:
 800e0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e0:	6906      	ldr	r6, [r0, #16]
 800e0e2:	f100 0814 	add.w	r8, r0, #20
 800e0e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e0ea:	1f37      	subs	r7, r6, #4
 800e0ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	f7ff fd4b 	bl	800db8c <__hi0bits>
 800e0f6:	f1c0 0320 	rsb	r3, r0, #32
 800e0fa:	280a      	cmp	r0, #10
 800e0fc:	600b      	str	r3, [r1, #0]
 800e0fe:	491b      	ldr	r1, [pc, #108]	@ (800e16c <__b2d+0x90>)
 800e100:	dc15      	bgt.n	800e12e <__b2d+0x52>
 800e102:	f1c0 0c0b 	rsb	ip, r0, #11
 800e106:	fa22 f30c 	lsr.w	r3, r2, ip
 800e10a:	45b8      	cmp	r8, r7
 800e10c:	ea43 0501 	orr.w	r5, r3, r1
 800e110:	bf34      	ite	cc
 800e112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e116:	2300      	movcs	r3, #0
 800e118:	3015      	adds	r0, #21
 800e11a:	fa02 f000 	lsl.w	r0, r2, r0
 800e11e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e122:	4303      	orrs	r3, r0
 800e124:	461c      	mov	r4, r3
 800e126:	ec45 4b10 	vmov	d0, r4, r5
 800e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e12e:	45b8      	cmp	r8, r7
 800e130:	bf3a      	itte	cc
 800e132:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e136:	f1a6 0708 	subcc.w	r7, r6, #8
 800e13a:	2300      	movcs	r3, #0
 800e13c:	380b      	subs	r0, #11
 800e13e:	d012      	beq.n	800e166 <__b2d+0x8a>
 800e140:	f1c0 0120 	rsb	r1, r0, #32
 800e144:	fa23 f401 	lsr.w	r4, r3, r1
 800e148:	4082      	lsls	r2, r0
 800e14a:	4322      	orrs	r2, r4
 800e14c:	4547      	cmp	r7, r8
 800e14e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e152:	bf8c      	ite	hi
 800e154:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e158:	2200      	movls	r2, #0
 800e15a:	4083      	lsls	r3, r0
 800e15c:	40ca      	lsrs	r2, r1
 800e15e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e162:	4313      	orrs	r3, r2
 800e164:	e7de      	b.n	800e124 <__b2d+0x48>
 800e166:	ea42 0501 	orr.w	r5, r2, r1
 800e16a:	e7db      	b.n	800e124 <__b2d+0x48>
 800e16c:	3ff00000 	.word	0x3ff00000

0800e170 <__d2b>:
 800e170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e174:	460f      	mov	r7, r1
 800e176:	2101      	movs	r1, #1
 800e178:	ec59 8b10 	vmov	r8, r9, d0
 800e17c:	4616      	mov	r6, r2
 800e17e:	f7ff fc13 	bl	800d9a8 <_Balloc>
 800e182:	4604      	mov	r4, r0
 800e184:	b930      	cbnz	r0, 800e194 <__d2b+0x24>
 800e186:	4602      	mov	r2, r0
 800e188:	4b23      	ldr	r3, [pc, #140]	@ (800e218 <__d2b+0xa8>)
 800e18a:	4824      	ldr	r0, [pc, #144]	@ (800e21c <__d2b+0xac>)
 800e18c:	f240 310f 	movw	r1, #783	@ 0x30f
 800e190:	f000 faf6 	bl	800e780 <__assert_func>
 800e194:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e198:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e19c:	b10d      	cbz	r5, 800e1a2 <__d2b+0x32>
 800e19e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e1a2:	9301      	str	r3, [sp, #4]
 800e1a4:	f1b8 0300 	subs.w	r3, r8, #0
 800e1a8:	d023      	beq.n	800e1f2 <__d2b+0x82>
 800e1aa:	4668      	mov	r0, sp
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	f7ff fd0c 	bl	800dbca <__lo0bits>
 800e1b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e1b6:	b1d0      	cbz	r0, 800e1ee <__d2b+0x7e>
 800e1b8:	f1c0 0320 	rsb	r3, r0, #32
 800e1bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e1c0:	430b      	orrs	r3, r1
 800e1c2:	40c2      	lsrs	r2, r0
 800e1c4:	6163      	str	r3, [r4, #20]
 800e1c6:	9201      	str	r2, [sp, #4]
 800e1c8:	9b01      	ldr	r3, [sp, #4]
 800e1ca:	61a3      	str	r3, [r4, #24]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2201      	moveq	r2, #1
 800e1d2:	2202      	movne	r2, #2
 800e1d4:	6122      	str	r2, [r4, #16]
 800e1d6:	b1a5      	cbz	r5, 800e202 <__d2b+0x92>
 800e1d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e1dc:	4405      	add	r5, r0
 800e1de:	603d      	str	r5, [r7, #0]
 800e1e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e1e4:	6030      	str	r0, [r6, #0]
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	b003      	add	sp, #12
 800e1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ee:	6161      	str	r1, [r4, #20]
 800e1f0:	e7ea      	b.n	800e1c8 <__d2b+0x58>
 800e1f2:	a801      	add	r0, sp, #4
 800e1f4:	f7ff fce9 	bl	800dbca <__lo0bits>
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	6163      	str	r3, [r4, #20]
 800e1fc:	3020      	adds	r0, #32
 800e1fe:	2201      	movs	r2, #1
 800e200:	e7e8      	b.n	800e1d4 <__d2b+0x64>
 800e202:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e206:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e20a:	6038      	str	r0, [r7, #0]
 800e20c:	6918      	ldr	r0, [r3, #16]
 800e20e:	f7ff fcbd 	bl	800db8c <__hi0bits>
 800e212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e216:	e7e5      	b.n	800e1e4 <__d2b+0x74>
 800e218:	08010229 	.word	0x08010229
 800e21c:	0801029a 	.word	0x0801029a

0800e220 <__ratio>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	b085      	sub	sp, #20
 800e226:	e9cd 1000 	strd	r1, r0, [sp]
 800e22a:	a902      	add	r1, sp, #8
 800e22c:	f7ff ff56 	bl	800e0dc <__b2d>
 800e230:	9800      	ldr	r0, [sp, #0]
 800e232:	a903      	add	r1, sp, #12
 800e234:	ec55 4b10 	vmov	r4, r5, d0
 800e238:	f7ff ff50 	bl	800e0dc <__b2d>
 800e23c:	9b01      	ldr	r3, [sp, #4]
 800e23e:	6919      	ldr	r1, [r3, #16]
 800e240:	9b00      	ldr	r3, [sp, #0]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	1ac9      	subs	r1, r1, r3
 800e246:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e24a:	1a9b      	subs	r3, r3, r2
 800e24c:	ec5b ab10 	vmov	sl, fp, d0
 800e250:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e254:	2b00      	cmp	r3, #0
 800e256:	bfce      	itee	gt
 800e258:	462a      	movgt	r2, r5
 800e25a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e25e:	465a      	movle	r2, fp
 800e260:	462f      	mov	r7, r5
 800e262:	46d9      	mov	r9, fp
 800e264:	bfcc      	ite	gt
 800e266:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e26a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e26e:	464b      	mov	r3, r9
 800e270:	4652      	mov	r2, sl
 800e272:	4620      	mov	r0, r4
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 fb09 	bl	800088c <__aeabi_ddiv>
 800e27a:	ec41 0b10 	vmov	d0, r0, r1
 800e27e:	b005      	add	sp, #20
 800e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e284 <__copybits>:
 800e284:	3901      	subs	r1, #1
 800e286:	b570      	push	{r4, r5, r6, lr}
 800e288:	1149      	asrs	r1, r1, #5
 800e28a:	6914      	ldr	r4, [r2, #16]
 800e28c:	3101      	adds	r1, #1
 800e28e:	f102 0314 	add.w	r3, r2, #20
 800e292:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e296:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e29a:	1f05      	subs	r5, r0, #4
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	d30c      	bcc.n	800e2ba <__copybits+0x36>
 800e2a0:	1aa3      	subs	r3, r4, r2
 800e2a2:	3b11      	subs	r3, #17
 800e2a4:	f023 0303 	bic.w	r3, r3, #3
 800e2a8:	3211      	adds	r2, #17
 800e2aa:	42a2      	cmp	r2, r4
 800e2ac:	bf88      	it	hi
 800e2ae:	2300      	movhi	r3, #0
 800e2b0:	4418      	add	r0, r3
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	4288      	cmp	r0, r1
 800e2b6:	d305      	bcc.n	800e2c4 <__copybits+0x40>
 800e2b8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2be:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2c2:	e7eb      	b.n	800e29c <__copybits+0x18>
 800e2c4:	f840 3b04 	str.w	r3, [r0], #4
 800e2c8:	e7f4      	b.n	800e2b4 <__copybits+0x30>

0800e2ca <__any_on>:
 800e2ca:	f100 0214 	add.w	r2, r0, #20
 800e2ce:	6900      	ldr	r0, [r0, #16]
 800e2d0:	114b      	asrs	r3, r1, #5
 800e2d2:	4298      	cmp	r0, r3
 800e2d4:	b510      	push	{r4, lr}
 800e2d6:	db11      	blt.n	800e2fc <__any_on+0x32>
 800e2d8:	dd0a      	ble.n	800e2f0 <__any_on+0x26>
 800e2da:	f011 011f 	ands.w	r1, r1, #31
 800e2de:	d007      	beq.n	800e2f0 <__any_on+0x26>
 800e2e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2e4:	fa24 f001 	lsr.w	r0, r4, r1
 800e2e8:	fa00 f101 	lsl.w	r1, r0, r1
 800e2ec:	428c      	cmp	r4, r1
 800e2ee:	d10b      	bne.n	800e308 <__any_on+0x3e>
 800e2f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d803      	bhi.n	800e300 <__any_on+0x36>
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	bd10      	pop	{r4, pc}
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	e7f7      	b.n	800e2f0 <__any_on+0x26>
 800e300:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e304:	2900      	cmp	r1, #0
 800e306:	d0f5      	beq.n	800e2f4 <__any_on+0x2a>
 800e308:	2001      	movs	r0, #1
 800e30a:	e7f6      	b.n	800e2fa <__any_on+0x30>

0800e30c <__ascii_wctomb>:
 800e30c:	4603      	mov	r3, r0
 800e30e:	4608      	mov	r0, r1
 800e310:	b141      	cbz	r1, 800e324 <__ascii_wctomb+0x18>
 800e312:	2aff      	cmp	r2, #255	@ 0xff
 800e314:	d904      	bls.n	800e320 <__ascii_wctomb+0x14>
 800e316:	228a      	movs	r2, #138	@ 0x8a
 800e318:	601a      	str	r2, [r3, #0]
 800e31a:	f04f 30ff 	mov.w	r0, #4294967295
 800e31e:	4770      	bx	lr
 800e320:	700a      	strb	r2, [r1, #0]
 800e322:	2001      	movs	r0, #1
 800e324:	4770      	bx	lr

0800e326 <__ssputs_r>:
 800e326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32a:	688e      	ldr	r6, [r1, #8]
 800e32c:	461f      	mov	r7, r3
 800e32e:	42be      	cmp	r6, r7
 800e330:	680b      	ldr	r3, [r1, #0]
 800e332:	4682      	mov	sl, r0
 800e334:	460c      	mov	r4, r1
 800e336:	4690      	mov	r8, r2
 800e338:	d82d      	bhi.n	800e396 <__ssputs_r+0x70>
 800e33a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e33e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e342:	d026      	beq.n	800e392 <__ssputs_r+0x6c>
 800e344:	6965      	ldr	r5, [r4, #20]
 800e346:	6909      	ldr	r1, [r1, #16]
 800e348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e34c:	eba3 0901 	sub.w	r9, r3, r1
 800e350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e354:	1c7b      	adds	r3, r7, #1
 800e356:	444b      	add	r3, r9
 800e358:	106d      	asrs	r5, r5, #1
 800e35a:	429d      	cmp	r5, r3
 800e35c:	bf38      	it	cc
 800e35e:	461d      	movcc	r5, r3
 800e360:	0553      	lsls	r3, r2, #21
 800e362:	d527      	bpl.n	800e3b4 <__ssputs_r+0x8e>
 800e364:	4629      	mov	r1, r5
 800e366:	f7ff fa81 	bl	800d86c <_malloc_r>
 800e36a:	4606      	mov	r6, r0
 800e36c:	b360      	cbz	r0, 800e3c8 <__ssputs_r+0xa2>
 800e36e:	6921      	ldr	r1, [r4, #16]
 800e370:	464a      	mov	r2, r9
 800e372:	f7fe f86a 	bl	800c44a <memcpy>
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e37c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e380:	81a3      	strh	r3, [r4, #12]
 800e382:	6126      	str	r6, [r4, #16]
 800e384:	6165      	str	r5, [r4, #20]
 800e386:	444e      	add	r6, r9
 800e388:	eba5 0509 	sub.w	r5, r5, r9
 800e38c:	6026      	str	r6, [r4, #0]
 800e38e:	60a5      	str	r5, [r4, #8]
 800e390:	463e      	mov	r6, r7
 800e392:	42be      	cmp	r6, r7
 800e394:	d900      	bls.n	800e398 <__ssputs_r+0x72>
 800e396:	463e      	mov	r6, r7
 800e398:	6820      	ldr	r0, [r4, #0]
 800e39a:	4632      	mov	r2, r6
 800e39c:	4641      	mov	r1, r8
 800e39e:	f000 f9c5 	bl	800e72c <memmove>
 800e3a2:	68a3      	ldr	r3, [r4, #8]
 800e3a4:	1b9b      	subs	r3, r3, r6
 800e3a6:	60a3      	str	r3, [r4, #8]
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	4433      	add	r3, r6
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3b4:	462a      	mov	r2, r5
 800e3b6:	f000 fa15 	bl	800e7e4 <_realloc_r>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	2800      	cmp	r0, #0
 800e3be:	d1e0      	bne.n	800e382 <__ssputs_r+0x5c>
 800e3c0:	6921      	ldr	r1, [r4, #16]
 800e3c2:	4650      	mov	r0, sl
 800e3c4:	f7fe fea4 	bl	800d110 <_free_r>
 800e3c8:	230c      	movs	r3, #12
 800e3ca:	f8ca 3000 	str.w	r3, [sl]
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3d4:	81a3      	strh	r3, [r4, #12]
 800e3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3da:	e7e9      	b.n	800e3b0 <__ssputs_r+0x8a>

0800e3dc <_svfiprintf_r>:
 800e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e0:	4698      	mov	r8, r3
 800e3e2:	898b      	ldrh	r3, [r1, #12]
 800e3e4:	061b      	lsls	r3, r3, #24
 800e3e6:	b09d      	sub	sp, #116	@ 0x74
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	4614      	mov	r4, r2
 800e3ee:	d510      	bpl.n	800e412 <_svfiprintf_r+0x36>
 800e3f0:	690b      	ldr	r3, [r1, #16]
 800e3f2:	b973      	cbnz	r3, 800e412 <_svfiprintf_r+0x36>
 800e3f4:	2140      	movs	r1, #64	@ 0x40
 800e3f6:	f7ff fa39 	bl	800d86c <_malloc_r>
 800e3fa:	6028      	str	r0, [r5, #0]
 800e3fc:	6128      	str	r0, [r5, #16]
 800e3fe:	b930      	cbnz	r0, 800e40e <_svfiprintf_r+0x32>
 800e400:	230c      	movs	r3, #12
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	b01d      	add	sp, #116	@ 0x74
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	2340      	movs	r3, #64	@ 0x40
 800e410:	616b      	str	r3, [r5, #20]
 800e412:	2300      	movs	r3, #0
 800e414:	9309      	str	r3, [sp, #36]	@ 0x24
 800e416:	2320      	movs	r3, #32
 800e418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e41c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e420:	2330      	movs	r3, #48	@ 0x30
 800e422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e5c0 <_svfiprintf_r+0x1e4>
 800e426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e42a:	f04f 0901 	mov.w	r9, #1
 800e42e:	4623      	mov	r3, r4
 800e430:	469a      	mov	sl, r3
 800e432:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e436:	b10a      	cbz	r2, 800e43c <_svfiprintf_r+0x60>
 800e438:	2a25      	cmp	r2, #37	@ 0x25
 800e43a:	d1f9      	bne.n	800e430 <_svfiprintf_r+0x54>
 800e43c:	ebba 0b04 	subs.w	fp, sl, r4
 800e440:	d00b      	beq.n	800e45a <_svfiprintf_r+0x7e>
 800e442:	465b      	mov	r3, fp
 800e444:	4622      	mov	r2, r4
 800e446:	4629      	mov	r1, r5
 800e448:	4638      	mov	r0, r7
 800e44a:	f7ff ff6c 	bl	800e326 <__ssputs_r>
 800e44e:	3001      	adds	r0, #1
 800e450:	f000 80a7 	beq.w	800e5a2 <_svfiprintf_r+0x1c6>
 800e454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e456:	445a      	add	r2, fp
 800e458:	9209      	str	r2, [sp, #36]	@ 0x24
 800e45a:	f89a 3000 	ldrb.w	r3, [sl]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f000 809f 	beq.w	800e5a2 <_svfiprintf_r+0x1c6>
 800e464:	2300      	movs	r3, #0
 800e466:	f04f 32ff 	mov.w	r2, #4294967295
 800e46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e46e:	f10a 0a01 	add.w	sl, sl, #1
 800e472:	9304      	str	r3, [sp, #16]
 800e474:	9307      	str	r3, [sp, #28]
 800e476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e47a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e47c:	4654      	mov	r4, sl
 800e47e:	2205      	movs	r2, #5
 800e480:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e484:	484e      	ldr	r0, [pc, #312]	@ (800e5c0 <_svfiprintf_r+0x1e4>)
 800e486:	f7f1 fec3 	bl	8000210 <memchr>
 800e48a:	9a04      	ldr	r2, [sp, #16]
 800e48c:	b9d8      	cbnz	r0, 800e4c6 <_svfiprintf_r+0xea>
 800e48e:	06d0      	lsls	r0, r2, #27
 800e490:	bf44      	itt	mi
 800e492:	2320      	movmi	r3, #32
 800e494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e498:	0711      	lsls	r1, r2, #28
 800e49a:	bf44      	itt	mi
 800e49c:	232b      	movmi	r3, #43	@ 0x2b
 800e49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4a8:	d015      	beq.n	800e4d6 <_svfiprintf_r+0xfa>
 800e4aa:	9a07      	ldr	r2, [sp, #28]
 800e4ac:	4654      	mov	r4, sl
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	f04f 0c0a 	mov.w	ip, #10
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4ba:	3b30      	subs	r3, #48	@ 0x30
 800e4bc:	2b09      	cmp	r3, #9
 800e4be:	d94b      	bls.n	800e558 <_svfiprintf_r+0x17c>
 800e4c0:	b1b0      	cbz	r0, 800e4f0 <_svfiprintf_r+0x114>
 800e4c2:	9207      	str	r2, [sp, #28]
 800e4c4:	e014      	b.n	800e4f0 <_svfiprintf_r+0x114>
 800e4c6:	eba0 0308 	sub.w	r3, r0, r8
 800e4ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	9304      	str	r3, [sp, #16]
 800e4d2:	46a2      	mov	sl, r4
 800e4d4:	e7d2      	b.n	800e47c <_svfiprintf_r+0xa0>
 800e4d6:	9b03      	ldr	r3, [sp, #12]
 800e4d8:	1d19      	adds	r1, r3, #4
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	9103      	str	r1, [sp, #12]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	bfbb      	ittet	lt
 800e4e2:	425b      	neglt	r3, r3
 800e4e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e4e8:	9307      	strge	r3, [sp, #28]
 800e4ea:	9307      	strlt	r3, [sp, #28]
 800e4ec:	bfb8      	it	lt
 800e4ee:	9204      	strlt	r2, [sp, #16]
 800e4f0:	7823      	ldrb	r3, [r4, #0]
 800e4f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4f4:	d10a      	bne.n	800e50c <_svfiprintf_r+0x130>
 800e4f6:	7863      	ldrb	r3, [r4, #1]
 800e4f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4fa:	d132      	bne.n	800e562 <_svfiprintf_r+0x186>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	1d1a      	adds	r2, r3, #4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	9203      	str	r2, [sp, #12]
 800e504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e508:	3402      	adds	r4, #2
 800e50a:	9305      	str	r3, [sp, #20]
 800e50c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e5d0 <_svfiprintf_r+0x1f4>
 800e510:	7821      	ldrb	r1, [r4, #0]
 800e512:	2203      	movs	r2, #3
 800e514:	4650      	mov	r0, sl
 800e516:	f7f1 fe7b 	bl	8000210 <memchr>
 800e51a:	b138      	cbz	r0, 800e52c <_svfiprintf_r+0x150>
 800e51c:	9b04      	ldr	r3, [sp, #16]
 800e51e:	eba0 000a 	sub.w	r0, r0, sl
 800e522:	2240      	movs	r2, #64	@ 0x40
 800e524:	4082      	lsls	r2, r0
 800e526:	4313      	orrs	r3, r2
 800e528:	3401      	adds	r4, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e530:	4824      	ldr	r0, [pc, #144]	@ (800e5c4 <_svfiprintf_r+0x1e8>)
 800e532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e536:	2206      	movs	r2, #6
 800e538:	f7f1 fe6a 	bl	8000210 <memchr>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d036      	beq.n	800e5ae <_svfiprintf_r+0x1d2>
 800e540:	4b21      	ldr	r3, [pc, #132]	@ (800e5c8 <_svfiprintf_r+0x1ec>)
 800e542:	bb1b      	cbnz	r3, 800e58c <_svfiprintf_r+0x1b0>
 800e544:	9b03      	ldr	r3, [sp, #12]
 800e546:	3307      	adds	r3, #7
 800e548:	f023 0307 	bic.w	r3, r3, #7
 800e54c:	3308      	adds	r3, #8
 800e54e:	9303      	str	r3, [sp, #12]
 800e550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e552:	4433      	add	r3, r6
 800e554:	9309      	str	r3, [sp, #36]	@ 0x24
 800e556:	e76a      	b.n	800e42e <_svfiprintf_r+0x52>
 800e558:	fb0c 3202 	mla	r2, ip, r2, r3
 800e55c:	460c      	mov	r4, r1
 800e55e:	2001      	movs	r0, #1
 800e560:	e7a8      	b.n	800e4b4 <_svfiprintf_r+0xd8>
 800e562:	2300      	movs	r3, #0
 800e564:	3401      	adds	r4, #1
 800e566:	9305      	str	r3, [sp, #20]
 800e568:	4619      	mov	r1, r3
 800e56a:	f04f 0c0a 	mov.w	ip, #10
 800e56e:	4620      	mov	r0, r4
 800e570:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e574:	3a30      	subs	r2, #48	@ 0x30
 800e576:	2a09      	cmp	r2, #9
 800e578:	d903      	bls.n	800e582 <_svfiprintf_r+0x1a6>
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d0c6      	beq.n	800e50c <_svfiprintf_r+0x130>
 800e57e:	9105      	str	r1, [sp, #20]
 800e580:	e7c4      	b.n	800e50c <_svfiprintf_r+0x130>
 800e582:	fb0c 2101 	mla	r1, ip, r1, r2
 800e586:	4604      	mov	r4, r0
 800e588:	2301      	movs	r3, #1
 800e58a:	e7f0      	b.n	800e56e <_svfiprintf_r+0x192>
 800e58c:	ab03      	add	r3, sp, #12
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	462a      	mov	r2, r5
 800e592:	4b0e      	ldr	r3, [pc, #56]	@ (800e5cc <_svfiprintf_r+0x1f0>)
 800e594:	a904      	add	r1, sp, #16
 800e596:	4638      	mov	r0, r7
 800e598:	f7fd f9aa 	bl	800b8f0 <_printf_float>
 800e59c:	1c42      	adds	r2, r0, #1
 800e59e:	4606      	mov	r6, r0
 800e5a0:	d1d6      	bne.n	800e550 <_svfiprintf_r+0x174>
 800e5a2:	89ab      	ldrh	r3, [r5, #12]
 800e5a4:	065b      	lsls	r3, r3, #25
 800e5a6:	f53f af2d 	bmi.w	800e404 <_svfiprintf_r+0x28>
 800e5aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5ac:	e72c      	b.n	800e408 <_svfiprintf_r+0x2c>
 800e5ae:	ab03      	add	r3, sp, #12
 800e5b0:	9300      	str	r3, [sp, #0]
 800e5b2:	462a      	mov	r2, r5
 800e5b4:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <_svfiprintf_r+0x1f0>)
 800e5b6:	a904      	add	r1, sp, #16
 800e5b8:	4638      	mov	r0, r7
 800e5ba:	f7fd fc31 	bl	800be20 <_printf_i>
 800e5be:	e7ed      	b.n	800e59c <_svfiprintf_r+0x1c0>
 800e5c0:	080103f0 	.word	0x080103f0
 800e5c4:	080103fa 	.word	0x080103fa
 800e5c8:	0800b8f1 	.word	0x0800b8f1
 800e5cc:	0800e327 	.word	0x0800e327
 800e5d0:	080103f6 	.word	0x080103f6

0800e5d4 <__sflush_r>:
 800e5d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	0716      	lsls	r6, r2, #28
 800e5de:	4605      	mov	r5, r0
 800e5e0:	460c      	mov	r4, r1
 800e5e2:	d454      	bmi.n	800e68e <__sflush_r+0xba>
 800e5e4:	684b      	ldr	r3, [r1, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	dc02      	bgt.n	800e5f0 <__sflush_r+0x1c>
 800e5ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	dd48      	ble.n	800e682 <__sflush_r+0xae>
 800e5f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d045      	beq.n	800e682 <__sflush_r+0xae>
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5fc:	682f      	ldr	r7, [r5, #0]
 800e5fe:	6a21      	ldr	r1, [r4, #32]
 800e600:	602b      	str	r3, [r5, #0]
 800e602:	d030      	beq.n	800e666 <__sflush_r+0x92>
 800e604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	0759      	lsls	r1, r3, #29
 800e60a:	d505      	bpl.n	800e618 <__sflush_r+0x44>
 800e60c:	6863      	ldr	r3, [r4, #4]
 800e60e:	1ad2      	subs	r2, r2, r3
 800e610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e612:	b10b      	cbz	r3, 800e618 <__sflush_r+0x44>
 800e614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e616:	1ad2      	subs	r2, r2, r3
 800e618:	2300      	movs	r3, #0
 800e61a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e61c:	6a21      	ldr	r1, [r4, #32]
 800e61e:	4628      	mov	r0, r5
 800e620:	47b0      	blx	r6
 800e622:	1c43      	adds	r3, r0, #1
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	d106      	bne.n	800e636 <__sflush_r+0x62>
 800e628:	6829      	ldr	r1, [r5, #0]
 800e62a:	291d      	cmp	r1, #29
 800e62c:	d82b      	bhi.n	800e686 <__sflush_r+0xb2>
 800e62e:	4a2a      	ldr	r2, [pc, #168]	@ (800e6d8 <__sflush_r+0x104>)
 800e630:	410a      	asrs	r2, r1
 800e632:	07d6      	lsls	r6, r2, #31
 800e634:	d427      	bmi.n	800e686 <__sflush_r+0xb2>
 800e636:	2200      	movs	r2, #0
 800e638:	6062      	str	r2, [r4, #4]
 800e63a:	04d9      	lsls	r1, r3, #19
 800e63c:	6922      	ldr	r2, [r4, #16]
 800e63e:	6022      	str	r2, [r4, #0]
 800e640:	d504      	bpl.n	800e64c <__sflush_r+0x78>
 800e642:	1c42      	adds	r2, r0, #1
 800e644:	d101      	bne.n	800e64a <__sflush_r+0x76>
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	b903      	cbnz	r3, 800e64c <__sflush_r+0x78>
 800e64a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e64c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e64e:	602f      	str	r7, [r5, #0]
 800e650:	b1b9      	cbz	r1, 800e682 <__sflush_r+0xae>
 800e652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e656:	4299      	cmp	r1, r3
 800e658:	d002      	beq.n	800e660 <__sflush_r+0x8c>
 800e65a:	4628      	mov	r0, r5
 800e65c:	f7fe fd58 	bl	800d110 <_free_r>
 800e660:	2300      	movs	r3, #0
 800e662:	6363      	str	r3, [r4, #52]	@ 0x34
 800e664:	e00d      	b.n	800e682 <__sflush_r+0xae>
 800e666:	2301      	movs	r3, #1
 800e668:	4628      	mov	r0, r5
 800e66a:	47b0      	blx	r6
 800e66c:	4602      	mov	r2, r0
 800e66e:	1c50      	adds	r0, r2, #1
 800e670:	d1c9      	bne.n	800e606 <__sflush_r+0x32>
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d0c6      	beq.n	800e606 <__sflush_r+0x32>
 800e678:	2b1d      	cmp	r3, #29
 800e67a:	d001      	beq.n	800e680 <__sflush_r+0xac>
 800e67c:	2b16      	cmp	r3, #22
 800e67e:	d11e      	bne.n	800e6be <__sflush_r+0xea>
 800e680:	602f      	str	r7, [r5, #0]
 800e682:	2000      	movs	r0, #0
 800e684:	e022      	b.n	800e6cc <__sflush_r+0xf8>
 800e686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e68a:	b21b      	sxth	r3, r3
 800e68c:	e01b      	b.n	800e6c6 <__sflush_r+0xf2>
 800e68e:	690f      	ldr	r7, [r1, #16]
 800e690:	2f00      	cmp	r7, #0
 800e692:	d0f6      	beq.n	800e682 <__sflush_r+0xae>
 800e694:	0793      	lsls	r3, r2, #30
 800e696:	680e      	ldr	r6, [r1, #0]
 800e698:	bf08      	it	eq
 800e69a:	694b      	ldreq	r3, [r1, #20]
 800e69c:	600f      	str	r7, [r1, #0]
 800e69e:	bf18      	it	ne
 800e6a0:	2300      	movne	r3, #0
 800e6a2:	eba6 0807 	sub.w	r8, r6, r7
 800e6a6:	608b      	str	r3, [r1, #8]
 800e6a8:	f1b8 0f00 	cmp.w	r8, #0
 800e6ac:	dde9      	ble.n	800e682 <__sflush_r+0xae>
 800e6ae:	6a21      	ldr	r1, [r4, #32]
 800e6b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6b2:	4643      	mov	r3, r8
 800e6b4:	463a      	mov	r2, r7
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b0      	blx	r6
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	dc08      	bgt.n	800e6d0 <__sflush_r+0xfc>
 800e6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c6:	81a3      	strh	r3, [r4, #12]
 800e6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d0:	4407      	add	r7, r0
 800e6d2:	eba8 0800 	sub.w	r8, r8, r0
 800e6d6:	e7e7      	b.n	800e6a8 <__sflush_r+0xd4>
 800e6d8:	dfbffffe 	.word	0xdfbffffe

0800e6dc <_fflush_r>:
 800e6dc:	b538      	push	{r3, r4, r5, lr}
 800e6de:	690b      	ldr	r3, [r1, #16]
 800e6e0:	4605      	mov	r5, r0
 800e6e2:	460c      	mov	r4, r1
 800e6e4:	b913      	cbnz	r3, 800e6ec <_fflush_r+0x10>
 800e6e6:	2500      	movs	r5, #0
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	bd38      	pop	{r3, r4, r5, pc}
 800e6ec:	b118      	cbz	r0, 800e6f6 <_fflush_r+0x1a>
 800e6ee:	6a03      	ldr	r3, [r0, #32]
 800e6f0:	b90b      	cbnz	r3, 800e6f6 <_fflush_r+0x1a>
 800e6f2:	f7fd fd41 	bl	800c178 <__sinit>
 800e6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d0f3      	beq.n	800e6e6 <_fflush_r+0xa>
 800e6fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e700:	07d0      	lsls	r0, r2, #31
 800e702:	d404      	bmi.n	800e70e <_fflush_r+0x32>
 800e704:	0599      	lsls	r1, r3, #22
 800e706:	d402      	bmi.n	800e70e <_fflush_r+0x32>
 800e708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e70a:	f7fd fe94 	bl	800c436 <__retarget_lock_acquire_recursive>
 800e70e:	4628      	mov	r0, r5
 800e710:	4621      	mov	r1, r4
 800e712:	f7ff ff5f 	bl	800e5d4 <__sflush_r>
 800e716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e718:	07da      	lsls	r2, r3, #31
 800e71a:	4605      	mov	r5, r0
 800e71c:	d4e4      	bmi.n	800e6e8 <_fflush_r+0xc>
 800e71e:	89a3      	ldrh	r3, [r4, #12]
 800e720:	059b      	lsls	r3, r3, #22
 800e722:	d4e1      	bmi.n	800e6e8 <_fflush_r+0xc>
 800e724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e726:	f7fd fe87 	bl	800c438 <__retarget_lock_release_recursive>
 800e72a:	e7dd      	b.n	800e6e8 <_fflush_r+0xc>

0800e72c <memmove>:
 800e72c:	4288      	cmp	r0, r1
 800e72e:	b510      	push	{r4, lr}
 800e730:	eb01 0402 	add.w	r4, r1, r2
 800e734:	d902      	bls.n	800e73c <memmove+0x10>
 800e736:	4284      	cmp	r4, r0
 800e738:	4623      	mov	r3, r4
 800e73a:	d807      	bhi.n	800e74c <memmove+0x20>
 800e73c:	1e43      	subs	r3, r0, #1
 800e73e:	42a1      	cmp	r1, r4
 800e740:	d008      	beq.n	800e754 <memmove+0x28>
 800e742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e74a:	e7f8      	b.n	800e73e <memmove+0x12>
 800e74c:	4402      	add	r2, r0
 800e74e:	4601      	mov	r1, r0
 800e750:	428a      	cmp	r2, r1
 800e752:	d100      	bne.n	800e756 <memmove+0x2a>
 800e754:	bd10      	pop	{r4, pc}
 800e756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e75a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e75e:	e7f7      	b.n	800e750 <memmove+0x24>

0800e760 <_sbrk_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4d06      	ldr	r5, [pc, #24]	@ (800e77c <_sbrk_r+0x1c>)
 800e764:	2300      	movs	r3, #0
 800e766:	4604      	mov	r4, r0
 800e768:	4608      	mov	r0, r1
 800e76a:	602b      	str	r3, [r5, #0]
 800e76c:	f7f7 f970 	bl	8005a50 <_sbrk>
 800e770:	1c43      	adds	r3, r0, #1
 800e772:	d102      	bne.n	800e77a <_sbrk_r+0x1a>
 800e774:	682b      	ldr	r3, [r5, #0]
 800e776:	b103      	cbz	r3, 800e77a <_sbrk_r+0x1a>
 800e778:	6023      	str	r3, [r4, #0]
 800e77a:	bd38      	pop	{r3, r4, r5, pc}
 800e77c:	20000c84 	.word	0x20000c84

0800e780 <__assert_func>:
 800e780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e782:	4614      	mov	r4, r2
 800e784:	461a      	mov	r2, r3
 800e786:	4b09      	ldr	r3, [pc, #36]	@ (800e7ac <__assert_func+0x2c>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4605      	mov	r5, r0
 800e78c:	68d8      	ldr	r0, [r3, #12]
 800e78e:	b954      	cbnz	r4, 800e7a6 <__assert_func+0x26>
 800e790:	4b07      	ldr	r3, [pc, #28]	@ (800e7b0 <__assert_func+0x30>)
 800e792:	461c      	mov	r4, r3
 800e794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e798:	9100      	str	r1, [sp, #0]
 800e79a:	462b      	mov	r3, r5
 800e79c:	4905      	ldr	r1, [pc, #20]	@ (800e7b4 <__assert_func+0x34>)
 800e79e:	f000 f84f 	bl	800e840 <fiprintf>
 800e7a2:	f000 f85f 	bl	800e864 <abort>
 800e7a6:	4b04      	ldr	r3, [pc, #16]	@ (800e7b8 <__assert_func+0x38>)
 800e7a8:	e7f4      	b.n	800e794 <__assert_func+0x14>
 800e7aa:	bf00      	nop
 800e7ac:	20000250 	.word	0x20000250
 800e7b0:	0801043c 	.word	0x0801043c
 800e7b4:	0801040e 	.word	0x0801040e
 800e7b8:	08010401 	.word	0x08010401

0800e7bc <_calloc_r>:
 800e7bc:	b570      	push	{r4, r5, r6, lr}
 800e7be:	fba1 5402 	umull	r5, r4, r1, r2
 800e7c2:	b93c      	cbnz	r4, 800e7d4 <_calloc_r+0x18>
 800e7c4:	4629      	mov	r1, r5
 800e7c6:	f7ff f851 	bl	800d86c <_malloc_r>
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	b928      	cbnz	r0, 800e7da <_calloc_r+0x1e>
 800e7ce:	2600      	movs	r6, #0
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
 800e7d4:	220c      	movs	r2, #12
 800e7d6:	6002      	str	r2, [r0, #0]
 800e7d8:	e7f9      	b.n	800e7ce <_calloc_r+0x12>
 800e7da:	462a      	mov	r2, r5
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f7fd fd78 	bl	800c2d2 <memset>
 800e7e2:	e7f5      	b.n	800e7d0 <_calloc_r+0x14>

0800e7e4 <_realloc_r>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	4680      	mov	r8, r0
 800e7ea:	4615      	mov	r5, r2
 800e7ec:	460c      	mov	r4, r1
 800e7ee:	b921      	cbnz	r1, 800e7fa <_realloc_r+0x16>
 800e7f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	f7ff b839 	b.w	800d86c <_malloc_r>
 800e7fa:	b92a      	cbnz	r2, 800e808 <_realloc_r+0x24>
 800e7fc:	f7fe fc88 	bl	800d110 <_free_r>
 800e800:	2400      	movs	r4, #0
 800e802:	4620      	mov	r0, r4
 800e804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e808:	f000 f833 	bl	800e872 <_malloc_usable_size_r>
 800e80c:	4285      	cmp	r5, r0
 800e80e:	4606      	mov	r6, r0
 800e810:	d802      	bhi.n	800e818 <_realloc_r+0x34>
 800e812:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e816:	d8f4      	bhi.n	800e802 <_realloc_r+0x1e>
 800e818:	4629      	mov	r1, r5
 800e81a:	4640      	mov	r0, r8
 800e81c:	f7ff f826 	bl	800d86c <_malloc_r>
 800e820:	4607      	mov	r7, r0
 800e822:	2800      	cmp	r0, #0
 800e824:	d0ec      	beq.n	800e800 <_realloc_r+0x1c>
 800e826:	42b5      	cmp	r5, r6
 800e828:	462a      	mov	r2, r5
 800e82a:	4621      	mov	r1, r4
 800e82c:	bf28      	it	cs
 800e82e:	4632      	movcs	r2, r6
 800e830:	f7fd fe0b 	bl	800c44a <memcpy>
 800e834:	4621      	mov	r1, r4
 800e836:	4640      	mov	r0, r8
 800e838:	f7fe fc6a 	bl	800d110 <_free_r>
 800e83c:	463c      	mov	r4, r7
 800e83e:	e7e0      	b.n	800e802 <_realloc_r+0x1e>

0800e840 <fiprintf>:
 800e840:	b40e      	push	{r1, r2, r3}
 800e842:	b503      	push	{r0, r1, lr}
 800e844:	4601      	mov	r1, r0
 800e846:	ab03      	add	r3, sp, #12
 800e848:	4805      	ldr	r0, [pc, #20]	@ (800e860 <fiprintf+0x20>)
 800e84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e84e:	6800      	ldr	r0, [r0, #0]
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	f000 f83f 	bl	800e8d4 <_vfiprintf_r>
 800e856:	b002      	add	sp, #8
 800e858:	f85d eb04 	ldr.w	lr, [sp], #4
 800e85c:	b003      	add	sp, #12
 800e85e:	4770      	bx	lr
 800e860:	20000250 	.word	0x20000250

0800e864 <abort>:
 800e864:	b508      	push	{r3, lr}
 800e866:	2006      	movs	r0, #6
 800e868:	f000 fa08 	bl	800ec7c <raise>
 800e86c:	2001      	movs	r0, #1
 800e86e:	f7f7 f877 	bl	8005960 <_exit>

0800e872 <_malloc_usable_size_r>:
 800e872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e876:	1f18      	subs	r0, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	bfbc      	itt	lt
 800e87c:	580b      	ldrlt	r3, [r1, r0]
 800e87e:	18c0      	addlt	r0, r0, r3
 800e880:	4770      	bx	lr

0800e882 <__sfputc_r>:
 800e882:	6893      	ldr	r3, [r2, #8]
 800e884:	3b01      	subs	r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	b410      	push	{r4}
 800e88a:	6093      	str	r3, [r2, #8]
 800e88c:	da08      	bge.n	800e8a0 <__sfputc_r+0x1e>
 800e88e:	6994      	ldr	r4, [r2, #24]
 800e890:	42a3      	cmp	r3, r4
 800e892:	db01      	blt.n	800e898 <__sfputc_r+0x16>
 800e894:	290a      	cmp	r1, #10
 800e896:	d103      	bne.n	800e8a0 <__sfputc_r+0x1e>
 800e898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e89c:	f000 b932 	b.w	800eb04 <__swbuf_r>
 800e8a0:	6813      	ldr	r3, [r2, #0]
 800e8a2:	1c58      	adds	r0, r3, #1
 800e8a4:	6010      	str	r0, [r2, #0]
 800e8a6:	7019      	strb	r1, [r3, #0]
 800e8a8:	4608      	mov	r0, r1
 800e8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <__sfputs_r>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	460f      	mov	r7, r1
 800e8b6:	4614      	mov	r4, r2
 800e8b8:	18d5      	adds	r5, r2, r3
 800e8ba:	42ac      	cmp	r4, r5
 800e8bc:	d101      	bne.n	800e8c2 <__sfputs_r+0x12>
 800e8be:	2000      	movs	r0, #0
 800e8c0:	e007      	b.n	800e8d2 <__sfputs_r+0x22>
 800e8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c6:	463a      	mov	r2, r7
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ffda 	bl	800e882 <__sfputc_r>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d1f3      	bne.n	800e8ba <__sfputs_r+0xa>
 800e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e8d4 <_vfiprintf_r>:
 800e8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d8:	460d      	mov	r5, r1
 800e8da:	b09d      	sub	sp, #116	@ 0x74
 800e8dc:	4614      	mov	r4, r2
 800e8de:	4698      	mov	r8, r3
 800e8e0:	4606      	mov	r6, r0
 800e8e2:	b118      	cbz	r0, 800e8ec <_vfiprintf_r+0x18>
 800e8e4:	6a03      	ldr	r3, [r0, #32]
 800e8e6:	b90b      	cbnz	r3, 800e8ec <_vfiprintf_r+0x18>
 800e8e8:	f7fd fc46 	bl	800c178 <__sinit>
 800e8ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e8ee:	07d9      	lsls	r1, r3, #31
 800e8f0:	d405      	bmi.n	800e8fe <_vfiprintf_r+0x2a>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	059a      	lsls	r2, r3, #22
 800e8f6:	d402      	bmi.n	800e8fe <_vfiprintf_r+0x2a>
 800e8f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e8fa:	f7fd fd9c 	bl	800c436 <__retarget_lock_acquire_recursive>
 800e8fe:	89ab      	ldrh	r3, [r5, #12]
 800e900:	071b      	lsls	r3, r3, #28
 800e902:	d501      	bpl.n	800e908 <_vfiprintf_r+0x34>
 800e904:	692b      	ldr	r3, [r5, #16]
 800e906:	b99b      	cbnz	r3, 800e930 <_vfiprintf_r+0x5c>
 800e908:	4629      	mov	r1, r5
 800e90a:	4630      	mov	r0, r6
 800e90c:	f000 f938 	bl	800eb80 <__swsetup_r>
 800e910:	b170      	cbz	r0, 800e930 <_vfiprintf_r+0x5c>
 800e912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e914:	07dc      	lsls	r4, r3, #31
 800e916:	d504      	bpl.n	800e922 <_vfiprintf_r+0x4e>
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	b01d      	add	sp, #116	@ 0x74
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	89ab      	ldrh	r3, [r5, #12]
 800e924:	0598      	lsls	r0, r3, #22
 800e926:	d4f7      	bmi.n	800e918 <_vfiprintf_r+0x44>
 800e928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e92a:	f7fd fd85 	bl	800c438 <__retarget_lock_release_recursive>
 800e92e:	e7f3      	b.n	800e918 <_vfiprintf_r+0x44>
 800e930:	2300      	movs	r3, #0
 800e932:	9309      	str	r3, [sp, #36]	@ 0x24
 800e934:	2320      	movs	r3, #32
 800e936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e93a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e93e:	2330      	movs	r3, #48	@ 0x30
 800e940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eaf0 <_vfiprintf_r+0x21c>
 800e944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e948:	f04f 0901 	mov.w	r9, #1
 800e94c:	4623      	mov	r3, r4
 800e94e:	469a      	mov	sl, r3
 800e950:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e954:	b10a      	cbz	r2, 800e95a <_vfiprintf_r+0x86>
 800e956:	2a25      	cmp	r2, #37	@ 0x25
 800e958:	d1f9      	bne.n	800e94e <_vfiprintf_r+0x7a>
 800e95a:	ebba 0b04 	subs.w	fp, sl, r4
 800e95e:	d00b      	beq.n	800e978 <_vfiprintf_r+0xa4>
 800e960:	465b      	mov	r3, fp
 800e962:	4622      	mov	r2, r4
 800e964:	4629      	mov	r1, r5
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ffa2 	bl	800e8b0 <__sfputs_r>
 800e96c:	3001      	adds	r0, #1
 800e96e:	f000 80a7 	beq.w	800eac0 <_vfiprintf_r+0x1ec>
 800e972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e974:	445a      	add	r2, fp
 800e976:	9209      	str	r2, [sp, #36]	@ 0x24
 800e978:	f89a 3000 	ldrb.w	r3, [sl]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 809f 	beq.w	800eac0 <_vfiprintf_r+0x1ec>
 800e982:	2300      	movs	r3, #0
 800e984:	f04f 32ff 	mov.w	r2, #4294967295
 800e988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98c:	f10a 0a01 	add.w	sl, sl, #1
 800e990:	9304      	str	r3, [sp, #16]
 800e992:	9307      	str	r3, [sp, #28]
 800e994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e998:	931a      	str	r3, [sp, #104]	@ 0x68
 800e99a:	4654      	mov	r4, sl
 800e99c:	2205      	movs	r2, #5
 800e99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a2:	4853      	ldr	r0, [pc, #332]	@ (800eaf0 <_vfiprintf_r+0x21c>)
 800e9a4:	f7f1 fc34 	bl	8000210 <memchr>
 800e9a8:	9a04      	ldr	r2, [sp, #16]
 800e9aa:	b9d8      	cbnz	r0, 800e9e4 <_vfiprintf_r+0x110>
 800e9ac:	06d1      	lsls	r1, r2, #27
 800e9ae:	bf44      	itt	mi
 800e9b0:	2320      	movmi	r3, #32
 800e9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9b6:	0713      	lsls	r3, r2, #28
 800e9b8:	bf44      	itt	mi
 800e9ba:	232b      	movmi	r3, #43	@ 0x2b
 800e9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9c6:	d015      	beq.n	800e9f4 <_vfiprintf_r+0x120>
 800e9c8:	9a07      	ldr	r2, [sp, #28]
 800e9ca:	4654      	mov	r4, sl
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	f04f 0c0a 	mov.w	ip, #10
 800e9d2:	4621      	mov	r1, r4
 800e9d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9d8:	3b30      	subs	r3, #48	@ 0x30
 800e9da:	2b09      	cmp	r3, #9
 800e9dc:	d94b      	bls.n	800ea76 <_vfiprintf_r+0x1a2>
 800e9de:	b1b0      	cbz	r0, 800ea0e <_vfiprintf_r+0x13a>
 800e9e0:	9207      	str	r2, [sp, #28]
 800e9e2:	e014      	b.n	800ea0e <_vfiprintf_r+0x13a>
 800e9e4:	eba0 0308 	sub.w	r3, r0, r8
 800e9e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	46a2      	mov	sl, r4
 800e9f2:	e7d2      	b.n	800e99a <_vfiprintf_r+0xc6>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	1d19      	adds	r1, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	9103      	str	r1, [sp, #12]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfbb      	ittet	lt
 800ea00:	425b      	neglt	r3, r3
 800ea02:	f042 0202 	orrlt.w	r2, r2, #2
 800ea06:	9307      	strge	r3, [sp, #28]
 800ea08:	9307      	strlt	r3, [sp, #28]
 800ea0a:	bfb8      	it	lt
 800ea0c:	9204      	strlt	r2, [sp, #16]
 800ea0e:	7823      	ldrb	r3, [r4, #0]
 800ea10:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea12:	d10a      	bne.n	800ea2a <_vfiprintf_r+0x156>
 800ea14:	7863      	ldrb	r3, [r4, #1]
 800ea16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea18:	d132      	bne.n	800ea80 <_vfiprintf_r+0x1ac>
 800ea1a:	9b03      	ldr	r3, [sp, #12]
 800ea1c:	1d1a      	adds	r2, r3, #4
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	9203      	str	r2, [sp, #12]
 800ea22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea26:	3402      	adds	r4, #2
 800ea28:	9305      	str	r3, [sp, #20]
 800ea2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb00 <_vfiprintf_r+0x22c>
 800ea2e:	7821      	ldrb	r1, [r4, #0]
 800ea30:	2203      	movs	r2, #3
 800ea32:	4650      	mov	r0, sl
 800ea34:	f7f1 fbec 	bl	8000210 <memchr>
 800ea38:	b138      	cbz	r0, 800ea4a <_vfiprintf_r+0x176>
 800ea3a:	9b04      	ldr	r3, [sp, #16]
 800ea3c:	eba0 000a 	sub.w	r0, r0, sl
 800ea40:	2240      	movs	r2, #64	@ 0x40
 800ea42:	4082      	lsls	r2, r0
 800ea44:	4313      	orrs	r3, r2
 800ea46:	3401      	adds	r4, #1
 800ea48:	9304      	str	r3, [sp, #16]
 800ea4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea4e:	4829      	ldr	r0, [pc, #164]	@ (800eaf4 <_vfiprintf_r+0x220>)
 800ea50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea54:	2206      	movs	r2, #6
 800ea56:	f7f1 fbdb 	bl	8000210 <memchr>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	d03f      	beq.n	800eade <_vfiprintf_r+0x20a>
 800ea5e:	4b26      	ldr	r3, [pc, #152]	@ (800eaf8 <_vfiprintf_r+0x224>)
 800ea60:	bb1b      	cbnz	r3, 800eaaa <_vfiprintf_r+0x1d6>
 800ea62:	9b03      	ldr	r3, [sp, #12]
 800ea64:	3307      	adds	r3, #7
 800ea66:	f023 0307 	bic.w	r3, r3, #7
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	9303      	str	r3, [sp, #12]
 800ea6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea70:	443b      	add	r3, r7
 800ea72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea74:	e76a      	b.n	800e94c <_vfiprintf_r+0x78>
 800ea76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	2001      	movs	r0, #1
 800ea7e:	e7a8      	b.n	800e9d2 <_vfiprintf_r+0xfe>
 800ea80:	2300      	movs	r3, #0
 800ea82:	3401      	adds	r4, #1
 800ea84:	9305      	str	r3, [sp, #20]
 800ea86:	4619      	mov	r1, r3
 800ea88:	f04f 0c0a 	mov.w	ip, #10
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea92:	3a30      	subs	r2, #48	@ 0x30
 800ea94:	2a09      	cmp	r2, #9
 800ea96:	d903      	bls.n	800eaa0 <_vfiprintf_r+0x1cc>
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d0c6      	beq.n	800ea2a <_vfiprintf_r+0x156>
 800ea9c:	9105      	str	r1, [sp, #20]
 800ea9e:	e7c4      	b.n	800ea2a <_vfiprintf_r+0x156>
 800eaa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e7f0      	b.n	800ea8c <_vfiprintf_r+0x1b8>
 800eaaa:	ab03      	add	r3, sp, #12
 800eaac:	9300      	str	r3, [sp, #0]
 800eaae:	462a      	mov	r2, r5
 800eab0:	4b12      	ldr	r3, [pc, #72]	@ (800eafc <_vfiprintf_r+0x228>)
 800eab2:	a904      	add	r1, sp, #16
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7fc ff1b 	bl	800b8f0 <_printf_float>
 800eaba:	4607      	mov	r7, r0
 800eabc:	1c78      	adds	r0, r7, #1
 800eabe:	d1d6      	bne.n	800ea6e <_vfiprintf_r+0x19a>
 800eac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eac2:	07d9      	lsls	r1, r3, #31
 800eac4:	d405      	bmi.n	800ead2 <_vfiprintf_r+0x1fe>
 800eac6:	89ab      	ldrh	r3, [r5, #12]
 800eac8:	059a      	lsls	r2, r3, #22
 800eaca:	d402      	bmi.n	800ead2 <_vfiprintf_r+0x1fe>
 800eacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eace:	f7fd fcb3 	bl	800c438 <__retarget_lock_release_recursive>
 800ead2:	89ab      	ldrh	r3, [r5, #12]
 800ead4:	065b      	lsls	r3, r3, #25
 800ead6:	f53f af1f 	bmi.w	800e918 <_vfiprintf_r+0x44>
 800eada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eadc:	e71e      	b.n	800e91c <_vfiprintf_r+0x48>
 800eade:	ab03      	add	r3, sp, #12
 800eae0:	9300      	str	r3, [sp, #0]
 800eae2:	462a      	mov	r2, r5
 800eae4:	4b05      	ldr	r3, [pc, #20]	@ (800eafc <_vfiprintf_r+0x228>)
 800eae6:	a904      	add	r1, sp, #16
 800eae8:	4630      	mov	r0, r6
 800eaea:	f7fd f999 	bl	800be20 <_printf_i>
 800eaee:	e7e4      	b.n	800eaba <_vfiprintf_r+0x1e6>
 800eaf0:	080103f0 	.word	0x080103f0
 800eaf4:	080103fa 	.word	0x080103fa
 800eaf8:	0800b8f1 	.word	0x0800b8f1
 800eafc:	0800e8b1 	.word	0x0800e8b1
 800eb00:	080103f6 	.word	0x080103f6

0800eb04 <__swbuf_r>:
 800eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb06:	460e      	mov	r6, r1
 800eb08:	4614      	mov	r4, r2
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	b118      	cbz	r0, 800eb16 <__swbuf_r+0x12>
 800eb0e:	6a03      	ldr	r3, [r0, #32]
 800eb10:	b90b      	cbnz	r3, 800eb16 <__swbuf_r+0x12>
 800eb12:	f7fd fb31 	bl	800c178 <__sinit>
 800eb16:	69a3      	ldr	r3, [r4, #24]
 800eb18:	60a3      	str	r3, [r4, #8]
 800eb1a:	89a3      	ldrh	r3, [r4, #12]
 800eb1c:	071a      	lsls	r2, r3, #28
 800eb1e:	d501      	bpl.n	800eb24 <__swbuf_r+0x20>
 800eb20:	6923      	ldr	r3, [r4, #16]
 800eb22:	b943      	cbnz	r3, 800eb36 <__swbuf_r+0x32>
 800eb24:	4621      	mov	r1, r4
 800eb26:	4628      	mov	r0, r5
 800eb28:	f000 f82a 	bl	800eb80 <__swsetup_r>
 800eb2c:	b118      	cbz	r0, 800eb36 <__swbuf_r+0x32>
 800eb2e:	f04f 37ff 	mov.w	r7, #4294967295
 800eb32:	4638      	mov	r0, r7
 800eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	6922      	ldr	r2, [r4, #16]
 800eb3a:	1a98      	subs	r0, r3, r2
 800eb3c:	6963      	ldr	r3, [r4, #20]
 800eb3e:	b2f6      	uxtb	r6, r6
 800eb40:	4283      	cmp	r3, r0
 800eb42:	4637      	mov	r7, r6
 800eb44:	dc05      	bgt.n	800eb52 <__swbuf_r+0x4e>
 800eb46:	4621      	mov	r1, r4
 800eb48:	4628      	mov	r0, r5
 800eb4a:	f7ff fdc7 	bl	800e6dc <_fflush_r>
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	d1ed      	bne.n	800eb2e <__swbuf_r+0x2a>
 800eb52:	68a3      	ldr	r3, [r4, #8]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	60a3      	str	r3, [r4, #8]
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	1c5a      	adds	r2, r3, #1
 800eb5c:	6022      	str	r2, [r4, #0]
 800eb5e:	701e      	strb	r6, [r3, #0]
 800eb60:	6962      	ldr	r2, [r4, #20]
 800eb62:	1c43      	adds	r3, r0, #1
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d004      	beq.n	800eb72 <__swbuf_r+0x6e>
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	07db      	lsls	r3, r3, #31
 800eb6c:	d5e1      	bpl.n	800eb32 <__swbuf_r+0x2e>
 800eb6e:	2e0a      	cmp	r6, #10
 800eb70:	d1df      	bne.n	800eb32 <__swbuf_r+0x2e>
 800eb72:	4621      	mov	r1, r4
 800eb74:	4628      	mov	r0, r5
 800eb76:	f7ff fdb1 	bl	800e6dc <_fflush_r>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d0d9      	beq.n	800eb32 <__swbuf_r+0x2e>
 800eb7e:	e7d6      	b.n	800eb2e <__swbuf_r+0x2a>

0800eb80 <__swsetup_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4b29      	ldr	r3, [pc, #164]	@ (800ec28 <__swsetup_r+0xa8>)
 800eb84:	4605      	mov	r5, r0
 800eb86:	6818      	ldr	r0, [r3, #0]
 800eb88:	460c      	mov	r4, r1
 800eb8a:	b118      	cbz	r0, 800eb94 <__swsetup_r+0x14>
 800eb8c:	6a03      	ldr	r3, [r0, #32]
 800eb8e:	b90b      	cbnz	r3, 800eb94 <__swsetup_r+0x14>
 800eb90:	f7fd faf2 	bl	800c178 <__sinit>
 800eb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb98:	0719      	lsls	r1, r3, #28
 800eb9a:	d422      	bmi.n	800ebe2 <__swsetup_r+0x62>
 800eb9c:	06da      	lsls	r2, r3, #27
 800eb9e:	d407      	bmi.n	800ebb0 <__swsetup_r+0x30>
 800eba0:	2209      	movs	r2, #9
 800eba2:	602a      	str	r2, [r5, #0]
 800eba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eba8:	81a3      	strh	r3, [r4, #12]
 800ebaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ebae:	e033      	b.n	800ec18 <__swsetup_r+0x98>
 800ebb0:	0758      	lsls	r0, r3, #29
 800ebb2:	d512      	bpl.n	800ebda <__swsetup_r+0x5a>
 800ebb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ebb6:	b141      	cbz	r1, 800ebca <__swsetup_r+0x4a>
 800ebb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ebbc:	4299      	cmp	r1, r3
 800ebbe:	d002      	beq.n	800ebc6 <__swsetup_r+0x46>
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f7fe faa5 	bl	800d110 <_free_r>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ebca:	89a3      	ldrh	r3, [r4, #12]
 800ebcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ebd0:	81a3      	strh	r3, [r4, #12]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	6063      	str	r3, [r4, #4]
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	6023      	str	r3, [r4, #0]
 800ebda:	89a3      	ldrh	r3, [r4, #12]
 800ebdc:	f043 0308 	orr.w	r3, r3, #8
 800ebe0:	81a3      	strh	r3, [r4, #12]
 800ebe2:	6923      	ldr	r3, [r4, #16]
 800ebe4:	b94b      	cbnz	r3, 800ebfa <__swsetup_r+0x7a>
 800ebe6:	89a3      	ldrh	r3, [r4, #12]
 800ebe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ebec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebf0:	d003      	beq.n	800ebfa <__swsetup_r+0x7a>
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f000 f883 	bl	800ed00 <__smakebuf_r>
 800ebfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebfe:	f013 0201 	ands.w	r2, r3, #1
 800ec02:	d00a      	beq.n	800ec1a <__swsetup_r+0x9a>
 800ec04:	2200      	movs	r2, #0
 800ec06:	60a2      	str	r2, [r4, #8]
 800ec08:	6962      	ldr	r2, [r4, #20]
 800ec0a:	4252      	negs	r2, r2
 800ec0c:	61a2      	str	r2, [r4, #24]
 800ec0e:	6922      	ldr	r2, [r4, #16]
 800ec10:	b942      	cbnz	r2, 800ec24 <__swsetup_r+0xa4>
 800ec12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec16:	d1c5      	bne.n	800eba4 <__swsetup_r+0x24>
 800ec18:	bd38      	pop	{r3, r4, r5, pc}
 800ec1a:	0799      	lsls	r1, r3, #30
 800ec1c:	bf58      	it	pl
 800ec1e:	6962      	ldrpl	r2, [r4, #20]
 800ec20:	60a2      	str	r2, [r4, #8]
 800ec22:	e7f4      	b.n	800ec0e <__swsetup_r+0x8e>
 800ec24:	2000      	movs	r0, #0
 800ec26:	e7f7      	b.n	800ec18 <__swsetup_r+0x98>
 800ec28:	20000250 	.word	0x20000250

0800ec2c <_raise_r>:
 800ec2c:	291f      	cmp	r1, #31
 800ec2e:	b538      	push	{r3, r4, r5, lr}
 800ec30:	4605      	mov	r5, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	d904      	bls.n	800ec40 <_raise_r+0x14>
 800ec36:	2316      	movs	r3, #22
 800ec38:	6003      	str	r3, [r0, #0]
 800ec3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3e:	bd38      	pop	{r3, r4, r5, pc}
 800ec40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec42:	b112      	cbz	r2, 800ec4a <_raise_r+0x1e>
 800ec44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec48:	b94b      	cbnz	r3, 800ec5e <_raise_r+0x32>
 800ec4a:	4628      	mov	r0, r5
 800ec4c:	f000 f830 	bl	800ecb0 <_getpid_r>
 800ec50:	4622      	mov	r2, r4
 800ec52:	4601      	mov	r1, r0
 800ec54:	4628      	mov	r0, r5
 800ec56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec5a:	f000 b817 	b.w	800ec8c <_kill_r>
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d00a      	beq.n	800ec78 <_raise_r+0x4c>
 800ec62:	1c59      	adds	r1, r3, #1
 800ec64:	d103      	bne.n	800ec6e <_raise_r+0x42>
 800ec66:	2316      	movs	r3, #22
 800ec68:	6003      	str	r3, [r0, #0]
 800ec6a:	2001      	movs	r0, #1
 800ec6c:	e7e7      	b.n	800ec3e <_raise_r+0x12>
 800ec6e:	2100      	movs	r1, #0
 800ec70:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ec74:	4620      	mov	r0, r4
 800ec76:	4798      	blx	r3
 800ec78:	2000      	movs	r0, #0
 800ec7a:	e7e0      	b.n	800ec3e <_raise_r+0x12>

0800ec7c <raise>:
 800ec7c:	4b02      	ldr	r3, [pc, #8]	@ (800ec88 <raise+0xc>)
 800ec7e:	4601      	mov	r1, r0
 800ec80:	6818      	ldr	r0, [r3, #0]
 800ec82:	f7ff bfd3 	b.w	800ec2c <_raise_r>
 800ec86:	bf00      	nop
 800ec88:	20000250 	.word	0x20000250

0800ec8c <_kill_r>:
 800ec8c:	b538      	push	{r3, r4, r5, lr}
 800ec8e:	4d07      	ldr	r5, [pc, #28]	@ (800ecac <_kill_r+0x20>)
 800ec90:	2300      	movs	r3, #0
 800ec92:	4604      	mov	r4, r0
 800ec94:	4608      	mov	r0, r1
 800ec96:	4611      	mov	r1, r2
 800ec98:	602b      	str	r3, [r5, #0]
 800ec9a:	f7f6 fe51 	bl	8005940 <_kill>
 800ec9e:	1c43      	adds	r3, r0, #1
 800eca0:	d102      	bne.n	800eca8 <_kill_r+0x1c>
 800eca2:	682b      	ldr	r3, [r5, #0]
 800eca4:	b103      	cbz	r3, 800eca8 <_kill_r+0x1c>
 800eca6:	6023      	str	r3, [r4, #0]
 800eca8:	bd38      	pop	{r3, r4, r5, pc}
 800ecaa:	bf00      	nop
 800ecac:	20000c84 	.word	0x20000c84

0800ecb0 <_getpid_r>:
 800ecb0:	f7f6 be3e 	b.w	8005930 <_getpid>

0800ecb4 <__swhatbuf_r>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecbc:	2900      	cmp	r1, #0
 800ecbe:	b096      	sub	sp, #88	@ 0x58
 800ecc0:	4615      	mov	r5, r2
 800ecc2:	461e      	mov	r6, r3
 800ecc4:	da0d      	bge.n	800ece2 <__swhatbuf_r+0x2e>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800eccc:	f04f 0100 	mov.w	r1, #0
 800ecd0:	bf14      	ite	ne
 800ecd2:	2340      	movne	r3, #64	@ 0x40
 800ecd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ecd8:	2000      	movs	r0, #0
 800ecda:	6031      	str	r1, [r6, #0]
 800ecdc:	602b      	str	r3, [r5, #0]
 800ecde:	b016      	add	sp, #88	@ 0x58
 800ece0:	bd70      	pop	{r4, r5, r6, pc}
 800ece2:	466a      	mov	r2, sp
 800ece4:	f000 f848 	bl	800ed78 <_fstat_r>
 800ece8:	2800      	cmp	r0, #0
 800ecea:	dbec      	blt.n	800ecc6 <__swhatbuf_r+0x12>
 800ecec:	9901      	ldr	r1, [sp, #4]
 800ecee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ecf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ecf6:	4259      	negs	r1, r3
 800ecf8:	4159      	adcs	r1, r3
 800ecfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ecfe:	e7eb      	b.n	800ecd8 <__swhatbuf_r+0x24>

0800ed00 <__smakebuf_r>:
 800ed00:	898b      	ldrh	r3, [r1, #12]
 800ed02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed04:	079d      	lsls	r5, r3, #30
 800ed06:	4606      	mov	r6, r0
 800ed08:	460c      	mov	r4, r1
 800ed0a:	d507      	bpl.n	800ed1c <__smakebuf_r+0x1c>
 800ed0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	6123      	str	r3, [r4, #16]
 800ed14:	2301      	movs	r3, #1
 800ed16:	6163      	str	r3, [r4, #20]
 800ed18:	b003      	add	sp, #12
 800ed1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed1c:	ab01      	add	r3, sp, #4
 800ed1e:	466a      	mov	r2, sp
 800ed20:	f7ff ffc8 	bl	800ecb4 <__swhatbuf_r>
 800ed24:	9f00      	ldr	r7, [sp, #0]
 800ed26:	4605      	mov	r5, r0
 800ed28:	4639      	mov	r1, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7fe fd9e 	bl	800d86c <_malloc_r>
 800ed30:	b948      	cbnz	r0, 800ed46 <__smakebuf_r+0x46>
 800ed32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed36:	059a      	lsls	r2, r3, #22
 800ed38:	d4ee      	bmi.n	800ed18 <__smakebuf_r+0x18>
 800ed3a:	f023 0303 	bic.w	r3, r3, #3
 800ed3e:	f043 0302 	orr.w	r3, r3, #2
 800ed42:	81a3      	strh	r3, [r4, #12]
 800ed44:	e7e2      	b.n	800ed0c <__smakebuf_r+0xc>
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	6020      	str	r0, [r4, #0]
 800ed4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ed56:	b15b      	cbz	r3, 800ed70 <__smakebuf_r+0x70>
 800ed58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f000 f81d 	bl	800ed9c <_isatty_r>
 800ed62:	b128      	cbz	r0, 800ed70 <__smakebuf_r+0x70>
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f023 0303 	bic.w	r3, r3, #3
 800ed6a:	f043 0301 	orr.w	r3, r3, #1
 800ed6e:	81a3      	strh	r3, [r4, #12]
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	431d      	orrs	r5, r3
 800ed74:	81a5      	strh	r5, [r4, #12]
 800ed76:	e7cf      	b.n	800ed18 <__smakebuf_r+0x18>

0800ed78 <_fstat_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4d07      	ldr	r5, [pc, #28]	@ (800ed98 <_fstat_r+0x20>)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	4611      	mov	r1, r2
 800ed84:	602b      	str	r3, [r5, #0]
 800ed86:	f7f6 fe3b 	bl	8005a00 <_fstat>
 800ed8a:	1c43      	adds	r3, r0, #1
 800ed8c:	d102      	bne.n	800ed94 <_fstat_r+0x1c>
 800ed8e:	682b      	ldr	r3, [r5, #0]
 800ed90:	b103      	cbz	r3, 800ed94 <_fstat_r+0x1c>
 800ed92:	6023      	str	r3, [r4, #0]
 800ed94:	bd38      	pop	{r3, r4, r5, pc}
 800ed96:	bf00      	nop
 800ed98:	20000c84 	.word	0x20000c84

0800ed9c <_isatty_r>:
 800ed9c:	b538      	push	{r3, r4, r5, lr}
 800ed9e:	4d06      	ldr	r5, [pc, #24]	@ (800edb8 <_isatty_r+0x1c>)
 800eda0:	2300      	movs	r3, #0
 800eda2:	4604      	mov	r4, r0
 800eda4:	4608      	mov	r0, r1
 800eda6:	602b      	str	r3, [r5, #0]
 800eda8:	f7f6 fe3a 	bl	8005a20 <_isatty>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	d102      	bne.n	800edb6 <_isatty_r+0x1a>
 800edb0:	682b      	ldr	r3, [r5, #0]
 800edb2:	b103      	cbz	r3, 800edb6 <_isatty_r+0x1a>
 800edb4:	6023      	str	r3, [r4, #0]
 800edb6:	bd38      	pop	{r3, r4, r5, pc}
 800edb8:	20000c84 	.word	0x20000c84

0800edbc <atan2>:
 800edbc:	f000 b9d0 	b.w	800f160 <__ieee754_atan2>

0800edc0 <sqrt>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	ed2d 8b02 	vpush	{d8}
 800edc6:	ec55 4b10 	vmov	r4, r5, d0
 800edca:	f000 f8a5 	bl	800ef18 <__ieee754_sqrt>
 800edce:	4622      	mov	r2, r4
 800edd0:	462b      	mov	r3, r5
 800edd2:	4620      	mov	r0, r4
 800edd4:	4629      	mov	r1, r5
 800edd6:	eeb0 8a40 	vmov.f32	s16, s0
 800edda:	eef0 8a60 	vmov.f32	s17, s1
 800edde:	f7f1 fec5 	bl	8000b6c <__aeabi_dcmpun>
 800ede2:	b990      	cbnz	r0, 800ee0a <sqrt+0x4a>
 800ede4:	2200      	movs	r2, #0
 800ede6:	2300      	movs	r3, #0
 800ede8:	4620      	mov	r0, r4
 800edea:	4629      	mov	r1, r5
 800edec:	f7f1 fe96 	bl	8000b1c <__aeabi_dcmplt>
 800edf0:	b158      	cbz	r0, 800ee0a <sqrt+0x4a>
 800edf2:	f7fd faf5 	bl	800c3e0 <__errno>
 800edf6:	2321      	movs	r3, #33	@ 0x21
 800edf8:	6003      	str	r3, [r0, #0]
 800edfa:	2200      	movs	r2, #0
 800edfc:	2300      	movs	r3, #0
 800edfe:	4610      	mov	r0, r2
 800ee00:	4619      	mov	r1, r3
 800ee02:	f7f1 fd43 	bl	800088c <__aeabi_ddiv>
 800ee06:	ec41 0b18 	vmov	d8, r0, r1
 800ee0a:	eeb0 0a48 	vmov.f32	s0, s16
 800ee0e:	eef0 0a68 	vmov.f32	s1, s17
 800ee12:	ecbd 8b02 	vpop	{d8}
 800ee16:	bd38      	pop	{r3, r4, r5, pc}

0800ee18 <powf>:
 800ee18:	b508      	push	{r3, lr}
 800ee1a:	ed2d 8b04 	vpush	{d8-d9}
 800ee1e:	eeb0 8a60 	vmov.f32	s16, s1
 800ee22:	eeb0 9a40 	vmov.f32	s18, s0
 800ee26:	f000 fc03 	bl	800f630 <__ieee754_powf>
 800ee2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee32:	eef0 8a40 	vmov.f32	s17, s0
 800ee36:	d63e      	bvs.n	800eeb6 <powf+0x9e>
 800ee38:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	d112      	bne.n	800ee68 <powf+0x50>
 800ee42:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ee46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4a:	d039      	beq.n	800eec0 <powf+0xa8>
 800ee4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ee50:	f000 f858 	bl	800ef04 <finitef>
 800ee54:	b378      	cbz	r0, 800eeb6 <powf+0x9e>
 800ee56:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	d52a      	bpl.n	800eeb6 <powf+0x9e>
 800ee60:	f7fd fabe 	bl	800c3e0 <__errno>
 800ee64:	2322      	movs	r3, #34	@ 0x22
 800ee66:	e014      	b.n	800ee92 <powf+0x7a>
 800ee68:	f000 f84c 	bl	800ef04 <finitef>
 800ee6c:	b998      	cbnz	r0, 800ee96 <powf+0x7e>
 800ee6e:	eeb0 0a49 	vmov.f32	s0, s18
 800ee72:	f000 f847 	bl	800ef04 <finitef>
 800ee76:	b170      	cbz	r0, 800ee96 <powf+0x7e>
 800ee78:	eeb0 0a48 	vmov.f32	s0, s16
 800ee7c:	f000 f842 	bl	800ef04 <finitef>
 800ee80:	b148      	cbz	r0, 800ee96 <powf+0x7e>
 800ee82:	eef4 8a68 	vcmp.f32	s17, s17
 800ee86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8a:	d7e9      	bvc.n	800ee60 <powf+0x48>
 800ee8c:	f7fd faa8 	bl	800c3e0 <__errno>
 800ee90:	2321      	movs	r3, #33	@ 0x21
 800ee92:	6003      	str	r3, [r0, #0]
 800ee94:	e00f      	b.n	800eeb6 <powf+0x9e>
 800ee96:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ee9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9e:	d10a      	bne.n	800eeb6 <powf+0x9e>
 800eea0:	eeb0 0a49 	vmov.f32	s0, s18
 800eea4:	f000 f82e 	bl	800ef04 <finitef>
 800eea8:	b128      	cbz	r0, 800eeb6 <powf+0x9e>
 800eeaa:	eeb0 0a48 	vmov.f32	s0, s16
 800eeae:	f000 f829 	bl	800ef04 <finitef>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d1d4      	bne.n	800ee60 <powf+0x48>
 800eeb6:	eeb0 0a68 	vmov.f32	s0, s17
 800eeba:	ecbd 8b04 	vpop	{d8-d9}
 800eebe:	bd08      	pop	{r3, pc}
 800eec0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800eec4:	e7f7      	b.n	800eeb6 <powf+0x9e>
	...

0800eec8 <sqrtf>:
 800eec8:	b508      	push	{r3, lr}
 800eeca:	ed2d 8b02 	vpush	{d8}
 800eece:	eeb0 8a40 	vmov.f32	s16, s0
 800eed2:	f000 f8fb 	bl	800f0cc <__ieee754_sqrtf>
 800eed6:	eeb4 8a48 	vcmp.f32	s16, s16
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	d60c      	bvs.n	800eefa <sqrtf+0x32>
 800eee0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ef00 <sqrtf+0x38>
 800eee4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeec:	d505      	bpl.n	800eefa <sqrtf+0x32>
 800eeee:	f7fd fa77 	bl	800c3e0 <__errno>
 800eef2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eef6:	2321      	movs	r3, #33	@ 0x21
 800eef8:	6003      	str	r3, [r0, #0]
 800eefa:	ecbd 8b02 	vpop	{d8}
 800eefe:	bd08      	pop	{r3, pc}
 800ef00:	00000000 	.word	0x00000000

0800ef04 <finitef>:
 800ef04:	ee10 3a10 	vmov	r3, s0
 800ef08:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ef0c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ef10:	bfac      	ite	ge
 800ef12:	2000      	movge	r0, #0
 800ef14:	2001      	movlt	r0, #1
 800ef16:	4770      	bx	lr

0800ef18 <__ieee754_sqrt>:
 800ef18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef1c:	4a68      	ldr	r2, [pc, #416]	@ (800f0c0 <__ieee754_sqrt+0x1a8>)
 800ef1e:	ec55 4b10 	vmov	r4, r5, d0
 800ef22:	43aa      	bics	r2, r5
 800ef24:	462b      	mov	r3, r5
 800ef26:	4621      	mov	r1, r4
 800ef28:	d110      	bne.n	800ef4c <__ieee754_sqrt+0x34>
 800ef2a:	4622      	mov	r2, r4
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	4629      	mov	r1, r5
 800ef30:	f7f1 fb82 	bl	8000638 <__aeabi_dmul>
 800ef34:	4602      	mov	r2, r0
 800ef36:	460b      	mov	r3, r1
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	f7f1 f9c6 	bl	80002cc <__adddf3>
 800ef40:	4604      	mov	r4, r0
 800ef42:	460d      	mov	r5, r1
 800ef44:	ec45 4b10 	vmov	d0, r4, r5
 800ef48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	2d00      	cmp	r5, #0
 800ef4e:	dc0e      	bgt.n	800ef6e <__ieee754_sqrt+0x56>
 800ef50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ef54:	4322      	orrs	r2, r4
 800ef56:	d0f5      	beq.n	800ef44 <__ieee754_sqrt+0x2c>
 800ef58:	b19d      	cbz	r5, 800ef82 <__ieee754_sqrt+0x6a>
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 f9b2 	bl	80002c8 <__aeabi_dsub>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	f7f1 fc90 	bl	800088c <__aeabi_ddiv>
 800ef6c:	e7e8      	b.n	800ef40 <__ieee754_sqrt+0x28>
 800ef6e:	152a      	asrs	r2, r5, #20
 800ef70:	d115      	bne.n	800ef9e <__ieee754_sqrt+0x86>
 800ef72:	2000      	movs	r0, #0
 800ef74:	e009      	b.n	800ef8a <__ieee754_sqrt+0x72>
 800ef76:	0acb      	lsrs	r3, r1, #11
 800ef78:	3a15      	subs	r2, #21
 800ef7a:	0549      	lsls	r1, r1, #21
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0fa      	beq.n	800ef76 <__ieee754_sqrt+0x5e>
 800ef80:	e7f7      	b.n	800ef72 <__ieee754_sqrt+0x5a>
 800ef82:	462a      	mov	r2, r5
 800ef84:	e7fa      	b.n	800ef7c <__ieee754_sqrt+0x64>
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	3001      	adds	r0, #1
 800ef8a:	02dc      	lsls	r4, r3, #11
 800ef8c:	d5fb      	bpl.n	800ef86 <__ieee754_sqrt+0x6e>
 800ef8e:	1e44      	subs	r4, r0, #1
 800ef90:	1b12      	subs	r2, r2, r4
 800ef92:	f1c0 0420 	rsb	r4, r0, #32
 800ef96:	fa21 f404 	lsr.w	r4, r1, r4
 800ef9a:	4323      	orrs	r3, r4
 800ef9c:	4081      	lsls	r1, r0
 800ef9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efa2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800efa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efaa:	07d2      	lsls	r2, r2, #31
 800efac:	bf5c      	itt	pl
 800efae:	005b      	lslpl	r3, r3, #1
 800efb0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800efb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efb8:	bf58      	it	pl
 800efba:	0049      	lslpl	r1, r1, #1
 800efbc:	2600      	movs	r6, #0
 800efbe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800efc2:	106d      	asrs	r5, r5, #1
 800efc4:	0049      	lsls	r1, r1, #1
 800efc6:	2016      	movs	r0, #22
 800efc8:	4632      	mov	r2, r6
 800efca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800efce:	1917      	adds	r7, r2, r4
 800efd0:	429f      	cmp	r7, r3
 800efd2:	bfde      	ittt	le
 800efd4:	193a      	addle	r2, r7, r4
 800efd6:	1bdb      	suble	r3, r3, r7
 800efd8:	1936      	addle	r6, r6, r4
 800efda:	0fcf      	lsrs	r7, r1, #31
 800efdc:	3801      	subs	r0, #1
 800efde:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800efe2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800efe6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800efea:	d1f0      	bne.n	800efce <__ieee754_sqrt+0xb6>
 800efec:	4604      	mov	r4, r0
 800efee:	2720      	movs	r7, #32
 800eff0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eff4:	429a      	cmp	r2, r3
 800eff6:	eb00 0e0c 	add.w	lr, r0, ip
 800effa:	db02      	blt.n	800f002 <__ieee754_sqrt+0xea>
 800effc:	d113      	bne.n	800f026 <__ieee754_sqrt+0x10e>
 800effe:	458e      	cmp	lr, r1
 800f000:	d811      	bhi.n	800f026 <__ieee754_sqrt+0x10e>
 800f002:	f1be 0f00 	cmp.w	lr, #0
 800f006:	eb0e 000c 	add.w	r0, lr, ip
 800f00a:	da42      	bge.n	800f092 <__ieee754_sqrt+0x17a>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	db40      	blt.n	800f092 <__ieee754_sqrt+0x17a>
 800f010:	f102 0801 	add.w	r8, r2, #1
 800f014:	1a9b      	subs	r3, r3, r2
 800f016:	458e      	cmp	lr, r1
 800f018:	bf88      	it	hi
 800f01a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f01e:	eba1 010e 	sub.w	r1, r1, lr
 800f022:	4464      	add	r4, ip
 800f024:	4642      	mov	r2, r8
 800f026:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f02a:	3f01      	subs	r7, #1
 800f02c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f030:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f034:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f038:	d1dc      	bne.n	800eff4 <__ieee754_sqrt+0xdc>
 800f03a:	4319      	orrs	r1, r3
 800f03c:	d01b      	beq.n	800f076 <__ieee754_sqrt+0x15e>
 800f03e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f0c4 <__ieee754_sqrt+0x1ac>
 800f042:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f0c8 <__ieee754_sqrt+0x1b0>
 800f046:	e9da 0100 	ldrd	r0, r1, [sl]
 800f04a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f04e:	f7f1 f93b 	bl	80002c8 <__aeabi_dsub>
 800f052:	e9da 8900 	ldrd	r8, r9, [sl]
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4640      	mov	r0, r8
 800f05c:	4649      	mov	r1, r9
 800f05e:	f7f1 fd67 	bl	8000b30 <__aeabi_dcmple>
 800f062:	b140      	cbz	r0, 800f076 <__ieee754_sqrt+0x15e>
 800f064:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f068:	e9da 0100 	ldrd	r0, r1, [sl]
 800f06c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f070:	d111      	bne.n	800f096 <__ieee754_sqrt+0x17e>
 800f072:	3601      	adds	r6, #1
 800f074:	463c      	mov	r4, r7
 800f076:	1072      	asrs	r2, r6, #1
 800f078:	0863      	lsrs	r3, r4, #1
 800f07a:	07f1      	lsls	r1, r6, #31
 800f07c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f080:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f084:	bf48      	it	mi
 800f086:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f08a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f08e:	4618      	mov	r0, r3
 800f090:	e756      	b.n	800ef40 <__ieee754_sqrt+0x28>
 800f092:	4690      	mov	r8, r2
 800f094:	e7be      	b.n	800f014 <__ieee754_sqrt+0xfc>
 800f096:	f7f1 f919 	bl	80002cc <__adddf3>
 800f09a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	4640      	mov	r0, r8
 800f0a4:	4649      	mov	r1, r9
 800f0a6:	f7f1 fd39 	bl	8000b1c <__aeabi_dcmplt>
 800f0aa:	b120      	cbz	r0, 800f0b6 <__ieee754_sqrt+0x19e>
 800f0ac:	1ca0      	adds	r0, r4, #2
 800f0ae:	bf08      	it	eq
 800f0b0:	3601      	addeq	r6, #1
 800f0b2:	3402      	adds	r4, #2
 800f0b4:	e7df      	b.n	800f076 <__ieee754_sqrt+0x15e>
 800f0b6:	1c63      	adds	r3, r4, #1
 800f0b8:	f023 0401 	bic.w	r4, r3, #1
 800f0bc:	e7db      	b.n	800f076 <__ieee754_sqrt+0x15e>
 800f0be:	bf00      	nop
 800f0c0:	7ff00000 	.word	0x7ff00000
 800f0c4:	200002a8 	.word	0x200002a8
 800f0c8:	200002a0 	.word	0x200002a0

0800f0cc <__ieee754_sqrtf>:
 800f0cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <round>:
 800f0d4:	ec51 0b10 	vmov	r0, r1, d0
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f0de:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800f0e2:	2a13      	cmp	r2, #19
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	4605      	mov	r5, r0
 800f0e8:	dc1b      	bgt.n	800f122 <round+0x4e>
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	da0b      	bge.n	800f106 <round+0x32>
 800f0ee:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800f0f2:	3201      	adds	r2, #1
 800f0f4:	bf04      	itt	eq
 800f0f6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800f0fa:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800f0fe:	2200      	movs	r2, #0
 800f100:	4619      	mov	r1, r3
 800f102:	4610      	mov	r0, r2
 800f104:	e015      	b.n	800f132 <round+0x5e>
 800f106:	4c15      	ldr	r4, [pc, #84]	@ (800f15c <round+0x88>)
 800f108:	4114      	asrs	r4, r2
 800f10a:	ea04 0601 	and.w	r6, r4, r1
 800f10e:	4306      	orrs	r6, r0
 800f110:	d00f      	beq.n	800f132 <round+0x5e>
 800f112:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800f116:	fa41 f202 	asr.w	r2, r1, r2
 800f11a:	4413      	add	r3, r2
 800f11c:	ea23 0304 	bic.w	r3, r3, r4
 800f120:	e7ed      	b.n	800f0fe <round+0x2a>
 800f122:	2a33      	cmp	r2, #51	@ 0x33
 800f124:	dd08      	ble.n	800f138 <round+0x64>
 800f126:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f12a:	d102      	bne.n	800f132 <round+0x5e>
 800f12c:	4602      	mov	r2, r0
 800f12e:	f7f1 f8cd 	bl	80002cc <__adddf3>
 800f132:	ec41 0b10 	vmov	d0, r0, r1
 800f136:	bd70      	pop	{r4, r5, r6, pc}
 800f138:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f13c:	f04f 34ff 	mov.w	r4, #4294967295
 800f140:	40f4      	lsrs	r4, r6
 800f142:	4204      	tst	r4, r0
 800f144:	d0f5      	beq.n	800f132 <round+0x5e>
 800f146:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f14a:	2201      	movs	r2, #1
 800f14c:	408a      	lsls	r2, r1
 800f14e:	1952      	adds	r2, r2, r5
 800f150:	bf28      	it	cs
 800f152:	3301      	addcs	r3, #1
 800f154:	ea22 0204 	bic.w	r2, r2, r4
 800f158:	e7d2      	b.n	800f100 <round+0x2c>
 800f15a:	bf00      	nop
 800f15c:	000fffff 	.word	0x000fffff

0800f160 <__ieee754_atan2>:
 800f160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f164:	ec57 6b11 	vmov	r6, r7, d1
 800f168:	4273      	negs	r3, r6
 800f16a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f2e8 <__ieee754_atan2+0x188>
 800f16e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f172:	4333      	orrs	r3, r6
 800f174:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f178:	4543      	cmp	r3, r8
 800f17a:	ec51 0b10 	vmov	r0, r1, d0
 800f17e:	4635      	mov	r5, r6
 800f180:	d809      	bhi.n	800f196 <__ieee754_atan2+0x36>
 800f182:	4244      	negs	r4, r0
 800f184:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f188:	4304      	orrs	r4, r0
 800f18a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f18e:	4544      	cmp	r4, r8
 800f190:	468e      	mov	lr, r1
 800f192:	4681      	mov	r9, r0
 800f194:	d907      	bls.n	800f1a6 <__ieee754_atan2+0x46>
 800f196:	4632      	mov	r2, r6
 800f198:	463b      	mov	r3, r7
 800f19a:	f7f1 f897 	bl	80002cc <__adddf3>
 800f19e:	ec41 0b10 	vmov	d0, r0, r1
 800f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f1aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f1ae:	4334      	orrs	r4, r6
 800f1b0:	d103      	bne.n	800f1ba <__ieee754_atan2+0x5a>
 800f1b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1b6:	f000 b89b 	b.w	800f2f0 <atan>
 800f1ba:	17bc      	asrs	r4, r7, #30
 800f1bc:	f004 0402 	and.w	r4, r4, #2
 800f1c0:	ea53 0909 	orrs.w	r9, r3, r9
 800f1c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f1c8:	d107      	bne.n	800f1da <__ieee754_atan2+0x7a>
 800f1ca:	2c02      	cmp	r4, #2
 800f1cc:	d05f      	beq.n	800f28e <__ieee754_atan2+0x12e>
 800f1ce:	2c03      	cmp	r4, #3
 800f1d0:	d1e5      	bne.n	800f19e <__ieee754_atan2+0x3e>
 800f1d2:	a141      	add	r1, pc, #260	@ (adr r1, 800f2d8 <__ieee754_atan2+0x178>)
 800f1d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1d8:	e7e1      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f1da:	4315      	orrs	r5, r2
 800f1dc:	d106      	bne.n	800f1ec <__ieee754_atan2+0x8c>
 800f1de:	f1be 0f00 	cmp.w	lr, #0
 800f1e2:	da5f      	bge.n	800f2a4 <__ieee754_atan2+0x144>
 800f1e4:	a13e      	add	r1, pc, #248	@ (adr r1, 800f2e0 <__ieee754_atan2+0x180>)
 800f1e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ea:	e7d8      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f1ec:	4542      	cmp	r2, r8
 800f1ee:	d10f      	bne.n	800f210 <__ieee754_atan2+0xb0>
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800f1f6:	d107      	bne.n	800f208 <__ieee754_atan2+0xa8>
 800f1f8:	2c02      	cmp	r4, #2
 800f1fa:	d84c      	bhi.n	800f296 <__ieee754_atan2+0x136>
 800f1fc:	4b34      	ldr	r3, [pc, #208]	@ (800f2d0 <__ieee754_atan2+0x170>)
 800f1fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f202:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f206:	e7ca      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f208:	2c02      	cmp	r4, #2
 800f20a:	d848      	bhi.n	800f29e <__ieee754_atan2+0x13e>
 800f20c:	4b31      	ldr	r3, [pc, #196]	@ (800f2d4 <__ieee754_atan2+0x174>)
 800f20e:	e7f6      	b.n	800f1fe <__ieee754_atan2+0x9e>
 800f210:	4543      	cmp	r3, r8
 800f212:	d0e4      	beq.n	800f1de <__ieee754_atan2+0x7e>
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f21a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f21e:	da1e      	bge.n	800f25e <__ieee754_atan2+0xfe>
 800f220:	2f00      	cmp	r7, #0
 800f222:	da01      	bge.n	800f228 <__ieee754_atan2+0xc8>
 800f224:	323c      	adds	r2, #60	@ 0x3c
 800f226:	db1e      	blt.n	800f266 <__ieee754_atan2+0x106>
 800f228:	4632      	mov	r2, r6
 800f22a:	463b      	mov	r3, r7
 800f22c:	f7f1 fb2e 	bl	800088c <__aeabi_ddiv>
 800f230:	ec41 0b10 	vmov	d0, r0, r1
 800f234:	f000 f9f4 	bl	800f620 <fabs>
 800f238:	f000 f85a 	bl	800f2f0 <atan>
 800f23c:	ec51 0b10 	vmov	r0, r1, d0
 800f240:	2c01      	cmp	r4, #1
 800f242:	d013      	beq.n	800f26c <__ieee754_atan2+0x10c>
 800f244:	2c02      	cmp	r4, #2
 800f246:	d015      	beq.n	800f274 <__ieee754_atan2+0x114>
 800f248:	2c00      	cmp	r4, #0
 800f24a:	d0a8      	beq.n	800f19e <__ieee754_atan2+0x3e>
 800f24c:	a318      	add	r3, pc, #96	@ (adr r3, 800f2b0 <__ieee754_atan2+0x150>)
 800f24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f252:	f7f1 f839 	bl	80002c8 <__aeabi_dsub>
 800f256:	a318      	add	r3, pc, #96	@ (adr r3, 800f2b8 <__ieee754_atan2+0x158>)
 800f258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25c:	e014      	b.n	800f288 <__ieee754_atan2+0x128>
 800f25e:	a118      	add	r1, pc, #96	@ (adr r1, 800f2c0 <__ieee754_atan2+0x160>)
 800f260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f264:	e7ec      	b.n	800f240 <__ieee754_atan2+0xe0>
 800f266:	2000      	movs	r0, #0
 800f268:	2100      	movs	r1, #0
 800f26a:	e7e9      	b.n	800f240 <__ieee754_atan2+0xe0>
 800f26c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f270:	4619      	mov	r1, r3
 800f272:	e794      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f274:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2b0 <__ieee754_atan2+0x150>)
 800f276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27a:	f7f1 f825 	bl	80002c8 <__aeabi_dsub>
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	a10d      	add	r1, pc, #52	@ (adr r1, 800f2b8 <__ieee754_atan2+0x158>)
 800f284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f288:	f7f1 f81e 	bl	80002c8 <__aeabi_dsub>
 800f28c:	e787      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f28e:	a10a      	add	r1, pc, #40	@ (adr r1, 800f2b8 <__ieee754_atan2+0x158>)
 800f290:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f294:	e783      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f296:	a10c      	add	r1, pc, #48	@ (adr r1, 800f2c8 <__ieee754_atan2+0x168>)
 800f298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f29c:	e77f      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	e77c      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f2a4:	a106      	add	r1, pc, #24	@ (adr r1, 800f2c0 <__ieee754_atan2+0x160>)
 800f2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2aa:	e778      	b.n	800f19e <__ieee754_atan2+0x3e>
 800f2ac:	f3af 8000 	nop.w
 800f2b0:	33145c07 	.word	0x33145c07
 800f2b4:	3ca1a626 	.word	0x3ca1a626
 800f2b8:	54442d18 	.word	0x54442d18
 800f2bc:	400921fb 	.word	0x400921fb
 800f2c0:	54442d18 	.word	0x54442d18
 800f2c4:	3ff921fb 	.word	0x3ff921fb
 800f2c8:	54442d18 	.word	0x54442d18
 800f2cc:	3fe921fb 	.word	0x3fe921fb
 800f2d0:	08010458 	.word	0x08010458
 800f2d4:	08010440 	.word	0x08010440
 800f2d8:	54442d18 	.word	0x54442d18
 800f2dc:	c00921fb 	.word	0xc00921fb
 800f2e0:	54442d18 	.word	0x54442d18
 800f2e4:	bff921fb 	.word	0xbff921fb
 800f2e8:	7ff00000 	.word	0x7ff00000
 800f2ec:	00000000 	.word	0x00000000

0800f2f0 <atan>:
 800f2f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f4:	ec55 4b10 	vmov	r4, r5, d0
 800f2f8:	4bbf      	ldr	r3, [pc, #764]	@ (800f5f8 <atan+0x308>)
 800f2fa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f2fe:	429e      	cmp	r6, r3
 800f300:	46ab      	mov	fp, r5
 800f302:	d918      	bls.n	800f336 <atan+0x46>
 800f304:	4bbd      	ldr	r3, [pc, #756]	@ (800f5fc <atan+0x30c>)
 800f306:	429e      	cmp	r6, r3
 800f308:	d801      	bhi.n	800f30e <atan+0x1e>
 800f30a:	d109      	bne.n	800f320 <atan+0x30>
 800f30c:	b144      	cbz	r4, 800f320 <atan+0x30>
 800f30e:	4622      	mov	r2, r4
 800f310:	462b      	mov	r3, r5
 800f312:	4620      	mov	r0, r4
 800f314:	4629      	mov	r1, r5
 800f316:	f7f0 ffd9 	bl	80002cc <__adddf3>
 800f31a:	4604      	mov	r4, r0
 800f31c:	460d      	mov	r5, r1
 800f31e:	e006      	b.n	800f32e <atan+0x3e>
 800f320:	f1bb 0f00 	cmp.w	fp, #0
 800f324:	f340 812b 	ble.w	800f57e <atan+0x28e>
 800f328:	a597      	add	r5, pc, #604	@ (adr r5, 800f588 <atan+0x298>)
 800f32a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f32e:	ec45 4b10 	vmov	d0, r4, r5
 800f332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f336:	4bb2      	ldr	r3, [pc, #712]	@ (800f600 <atan+0x310>)
 800f338:	429e      	cmp	r6, r3
 800f33a:	d813      	bhi.n	800f364 <atan+0x74>
 800f33c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f340:	429e      	cmp	r6, r3
 800f342:	d80c      	bhi.n	800f35e <atan+0x6e>
 800f344:	a392      	add	r3, pc, #584	@ (adr r3, 800f590 <atan+0x2a0>)
 800f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34a:	4620      	mov	r0, r4
 800f34c:	4629      	mov	r1, r5
 800f34e:	f7f0 ffbd 	bl	80002cc <__adddf3>
 800f352:	4bac      	ldr	r3, [pc, #688]	@ (800f604 <atan+0x314>)
 800f354:	2200      	movs	r2, #0
 800f356:	f7f1 fbff 	bl	8000b58 <__aeabi_dcmpgt>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d1e7      	bne.n	800f32e <atan+0x3e>
 800f35e:	f04f 3aff 	mov.w	sl, #4294967295
 800f362:	e029      	b.n	800f3b8 <atan+0xc8>
 800f364:	f000 f95c 	bl	800f620 <fabs>
 800f368:	4ba7      	ldr	r3, [pc, #668]	@ (800f608 <atan+0x318>)
 800f36a:	429e      	cmp	r6, r3
 800f36c:	ec55 4b10 	vmov	r4, r5, d0
 800f370:	f200 80bc 	bhi.w	800f4ec <atan+0x1fc>
 800f374:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f378:	429e      	cmp	r6, r3
 800f37a:	f200 809e 	bhi.w	800f4ba <atan+0x1ca>
 800f37e:	4622      	mov	r2, r4
 800f380:	462b      	mov	r3, r5
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	f7f0 ffa1 	bl	80002cc <__adddf3>
 800f38a:	4b9e      	ldr	r3, [pc, #632]	@ (800f604 <atan+0x314>)
 800f38c:	2200      	movs	r2, #0
 800f38e:	f7f0 ff9b 	bl	80002c8 <__aeabi_dsub>
 800f392:	2200      	movs	r2, #0
 800f394:	4606      	mov	r6, r0
 800f396:	460f      	mov	r7, r1
 800f398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f39c:	4620      	mov	r0, r4
 800f39e:	4629      	mov	r1, r5
 800f3a0:	f7f0 ff94 	bl	80002cc <__adddf3>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	4639      	mov	r1, r7
 800f3ac:	f7f1 fa6e 	bl	800088c <__aeabi_ddiv>
 800f3b0:	f04f 0a00 	mov.w	sl, #0
 800f3b4:	4604      	mov	r4, r0
 800f3b6:	460d      	mov	r5, r1
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	462b      	mov	r3, r5
 800f3bc:	4620      	mov	r0, r4
 800f3be:	4629      	mov	r1, r5
 800f3c0:	f7f1 f93a 	bl	8000638 <__aeabi_dmul>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	4680      	mov	r8, r0
 800f3ca:	4689      	mov	r9, r1
 800f3cc:	f7f1 f934 	bl	8000638 <__aeabi_dmul>
 800f3d0:	a371      	add	r3, pc, #452	@ (adr r3, 800f598 <atan+0x2a8>)
 800f3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	460f      	mov	r7, r1
 800f3da:	f7f1 f92d 	bl	8000638 <__aeabi_dmul>
 800f3de:	a370      	add	r3, pc, #448	@ (adr r3, 800f5a0 <atan+0x2b0>)
 800f3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e4:	f7f0 ff72 	bl	80002cc <__adddf3>
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	463b      	mov	r3, r7
 800f3ec:	f7f1 f924 	bl	8000638 <__aeabi_dmul>
 800f3f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800f5a8 <atan+0x2b8>)
 800f3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f6:	f7f0 ff69 	bl	80002cc <__adddf3>
 800f3fa:	4632      	mov	r2, r6
 800f3fc:	463b      	mov	r3, r7
 800f3fe:	f7f1 f91b 	bl	8000638 <__aeabi_dmul>
 800f402:	a36b      	add	r3, pc, #428	@ (adr r3, 800f5b0 <atan+0x2c0>)
 800f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f408:	f7f0 ff60 	bl	80002cc <__adddf3>
 800f40c:	4632      	mov	r2, r6
 800f40e:	463b      	mov	r3, r7
 800f410:	f7f1 f912 	bl	8000638 <__aeabi_dmul>
 800f414:	a368      	add	r3, pc, #416	@ (adr r3, 800f5b8 <atan+0x2c8>)
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	f7f0 ff57 	bl	80002cc <__adddf3>
 800f41e:	4632      	mov	r2, r6
 800f420:	463b      	mov	r3, r7
 800f422:	f7f1 f909 	bl	8000638 <__aeabi_dmul>
 800f426:	a366      	add	r3, pc, #408	@ (adr r3, 800f5c0 <atan+0x2d0>)
 800f428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42c:	f7f0 ff4e 	bl	80002cc <__adddf3>
 800f430:	4642      	mov	r2, r8
 800f432:	464b      	mov	r3, r9
 800f434:	f7f1 f900 	bl	8000638 <__aeabi_dmul>
 800f438:	a363      	add	r3, pc, #396	@ (adr r3, 800f5c8 <atan+0x2d8>)
 800f43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43e:	4680      	mov	r8, r0
 800f440:	4689      	mov	r9, r1
 800f442:	4630      	mov	r0, r6
 800f444:	4639      	mov	r1, r7
 800f446:	f7f1 f8f7 	bl	8000638 <__aeabi_dmul>
 800f44a:	a361      	add	r3, pc, #388	@ (adr r3, 800f5d0 <atan+0x2e0>)
 800f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f450:	f7f0 ff3a 	bl	80002c8 <__aeabi_dsub>
 800f454:	4632      	mov	r2, r6
 800f456:	463b      	mov	r3, r7
 800f458:	f7f1 f8ee 	bl	8000638 <__aeabi_dmul>
 800f45c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f5d8 <atan+0x2e8>)
 800f45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f462:	f7f0 ff31 	bl	80002c8 <__aeabi_dsub>
 800f466:	4632      	mov	r2, r6
 800f468:	463b      	mov	r3, r7
 800f46a:	f7f1 f8e5 	bl	8000638 <__aeabi_dmul>
 800f46e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f5e0 <atan+0x2f0>)
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	f7f0 ff28 	bl	80002c8 <__aeabi_dsub>
 800f478:	4632      	mov	r2, r6
 800f47a:	463b      	mov	r3, r7
 800f47c:	f7f1 f8dc 	bl	8000638 <__aeabi_dmul>
 800f480:	a359      	add	r3, pc, #356	@ (adr r3, 800f5e8 <atan+0x2f8>)
 800f482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f486:	f7f0 ff1f 	bl	80002c8 <__aeabi_dsub>
 800f48a:	4632      	mov	r2, r6
 800f48c:	463b      	mov	r3, r7
 800f48e:	f7f1 f8d3 	bl	8000638 <__aeabi_dmul>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4640      	mov	r0, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	f7f0 ff17 	bl	80002cc <__adddf3>
 800f49e:	4622      	mov	r2, r4
 800f4a0:	462b      	mov	r3, r5
 800f4a2:	f7f1 f8c9 	bl	8000638 <__aeabi_dmul>
 800f4a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f4aa:	4602      	mov	r2, r0
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	d148      	bne.n	800f542 <atan+0x252>
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	f7f0 ff08 	bl	80002c8 <__aeabi_dsub>
 800f4b8:	e72f      	b.n	800f31a <atan+0x2a>
 800f4ba:	4b52      	ldr	r3, [pc, #328]	@ (800f604 <atan+0x314>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f0 ff01 	bl	80002c8 <__aeabi_dsub>
 800f4c6:	4b4f      	ldr	r3, [pc, #316]	@ (800f604 <atan+0x314>)
 800f4c8:	4606      	mov	r6, r0
 800f4ca:	460f      	mov	r7, r1
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	4629      	mov	r1, r5
 800f4d2:	f7f0 fefb 	bl	80002cc <__adddf3>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4630      	mov	r0, r6
 800f4dc:	4639      	mov	r1, r7
 800f4de:	f7f1 f9d5 	bl	800088c <__aeabi_ddiv>
 800f4e2:	f04f 0a01 	mov.w	sl, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	e765      	b.n	800f3b8 <atan+0xc8>
 800f4ec:	4b47      	ldr	r3, [pc, #284]	@ (800f60c <atan+0x31c>)
 800f4ee:	429e      	cmp	r6, r3
 800f4f0:	d21c      	bcs.n	800f52c <atan+0x23c>
 800f4f2:	4b47      	ldr	r3, [pc, #284]	@ (800f610 <atan+0x320>)
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f7f0 fee5 	bl	80002c8 <__aeabi_dsub>
 800f4fe:	4b44      	ldr	r3, [pc, #272]	@ (800f610 <atan+0x320>)
 800f500:	4606      	mov	r6, r0
 800f502:	460f      	mov	r7, r1
 800f504:	2200      	movs	r2, #0
 800f506:	4620      	mov	r0, r4
 800f508:	4629      	mov	r1, r5
 800f50a:	f7f1 f895 	bl	8000638 <__aeabi_dmul>
 800f50e:	4b3d      	ldr	r3, [pc, #244]	@ (800f604 <atan+0x314>)
 800f510:	2200      	movs	r2, #0
 800f512:	f7f0 fedb 	bl	80002cc <__adddf3>
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 f9b5 	bl	800088c <__aeabi_ddiv>
 800f522:	f04f 0a02 	mov.w	sl, #2
 800f526:	4604      	mov	r4, r0
 800f528:	460d      	mov	r5, r1
 800f52a:	e745      	b.n	800f3b8 <atan+0xc8>
 800f52c:	4622      	mov	r2, r4
 800f52e:	462b      	mov	r3, r5
 800f530:	4938      	ldr	r1, [pc, #224]	@ (800f614 <atan+0x324>)
 800f532:	2000      	movs	r0, #0
 800f534:	f7f1 f9aa 	bl	800088c <__aeabi_ddiv>
 800f538:	f04f 0a03 	mov.w	sl, #3
 800f53c:	4604      	mov	r4, r0
 800f53e:	460d      	mov	r5, r1
 800f540:	e73a      	b.n	800f3b8 <atan+0xc8>
 800f542:	4b35      	ldr	r3, [pc, #212]	@ (800f618 <atan+0x328>)
 800f544:	4e35      	ldr	r6, [pc, #212]	@ (800f61c <atan+0x32c>)
 800f546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54e:	f7f0 febb 	bl	80002c8 <__aeabi_dsub>
 800f552:	4622      	mov	r2, r4
 800f554:	462b      	mov	r3, r5
 800f556:	f7f0 feb7 	bl	80002c8 <__aeabi_dsub>
 800f55a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f566:	f7f0 feaf 	bl	80002c8 <__aeabi_dsub>
 800f56a:	f1bb 0f00 	cmp.w	fp, #0
 800f56e:	4604      	mov	r4, r0
 800f570:	460d      	mov	r5, r1
 800f572:	f6bf aedc 	bge.w	800f32e <atan+0x3e>
 800f576:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f57a:	461d      	mov	r5, r3
 800f57c:	e6d7      	b.n	800f32e <atan+0x3e>
 800f57e:	a51c      	add	r5, pc, #112	@ (adr r5, 800f5f0 <atan+0x300>)
 800f580:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f584:	e6d3      	b.n	800f32e <atan+0x3e>
 800f586:	bf00      	nop
 800f588:	54442d18 	.word	0x54442d18
 800f58c:	3ff921fb 	.word	0x3ff921fb
 800f590:	8800759c 	.word	0x8800759c
 800f594:	7e37e43c 	.word	0x7e37e43c
 800f598:	e322da11 	.word	0xe322da11
 800f59c:	3f90ad3a 	.word	0x3f90ad3a
 800f5a0:	24760deb 	.word	0x24760deb
 800f5a4:	3fa97b4b 	.word	0x3fa97b4b
 800f5a8:	a0d03d51 	.word	0xa0d03d51
 800f5ac:	3fb10d66 	.word	0x3fb10d66
 800f5b0:	c54c206e 	.word	0xc54c206e
 800f5b4:	3fb745cd 	.word	0x3fb745cd
 800f5b8:	920083ff 	.word	0x920083ff
 800f5bc:	3fc24924 	.word	0x3fc24924
 800f5c0:	5555550d 	.word	0x5555550d
 800f5c4:	3fd55555 	.word	0x3fd55555
 800f5c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800f5cc:	bfa2b444 	.word	0xbfa2b444
 800f5d0:	52defd9a 	.word	0x52defd9a
 800f5d4:	3fadde2d 	.word	0x3fadde2d
 800f5d8:	af749a6d 	.word	0xaf749a6d
 800f5dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800f5e0:	fe231671 	.word	0xfe231671
 800f5e4:	3fbc71c6 	.word	0x3fbc71c6
 800f5e8:	9998ebc4 	.word	0x9998ebc4
 800f5ec:	3fc99999 	.word	0x3fc99999
 800f5f0:	54442d18 	.word	0x54442d18
 800f5f4:	bff921fb 	.word	0xbff921fb
 800f5f8:	440fffff 	.word	0x440fffff
 800f5fc:	7ff00000 	.word	0x7ff00000
 800f600:	3fdbffff 	.word	0x3fdbffff
 800f604:	3ff00000 	.word	0x3ff00000
 800f608:	3ff2ffff 	.word	0x3ff2ffff
 800f60c:	40038000 	.word	0x40038000
 800f610:	3ff80000 	.word	0x3ff80000
 800f614:	bff00000 	.word	0xbff00000
 800f618:	08010470 	.word	0x08010470
 800f61c:	08010490 	.word	0x08010490

0800f620 <fabs>:
 800f620:	ec51 0b10 	vmov	r0, r1, d0
 800f624:	4602      	mov	r2, r0
 800f626:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f62a:	ec43 2b10 	vmov	d0, r2, r3
 800f62e:	4770      	bx	lr

0800f630 <__ieee754_powf>:
 800f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f634:	ee10 4a90 	vmov	r4, s1
 800f638:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f63c:	ed2d 8b02 	vpush	{d8}
 800f640:	ee10 6a10 	vmov	r6, s0
 800f644:	eeb0 8a40 	vmov.f32	s16, s0
 800f648:	eef0 8a60 	vmov.f32	s17, s1
 800f64c:	d10c      	bne.n	800f668 <__ieee754_powf+0x38>
 800f64e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f652:	0076      	lsls	r6, r6, #1
 800f654:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f658:	f240 829c 	bls.w	800fb94 <__ieee754_powf+0x564>
 800f65c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f660:	ecbd 8b02 	vpop	{d8}
 800f664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f668:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f66c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f670:	d802      	bhi.n	800f678 <__ieee754_powf+0x48>
 800f672:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f676:	d908      	bls.n	800f68a <__ieee754_powf+0x5a>
 800f678:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f67c:	d1ee      	bne.n	800f65c <__ieee754_powf+0x2c>
 800f67e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f682:	0064      	lsls	r4, r4, #1
 800f684:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f688:	e7e6      	b.n	800f658 <__ieee754_powf+0x28>
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	da1e      	bge.n	800f6cc <__ieee754_powf+0x9c>
 800f68e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f692:	d22b      	bcs.n	800f6ec <__ieee754_powf+0xbc>
 800f694:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f698:	d332      	bcc.n	800f700 <__ieee754_powf+0xd0>
 800f69a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f69e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f6a2:	fa49 f503 	asr.w	r5, r9, r3
 800f6a6:	fa05 f303 	lsl.w	r3, r5, r3
 800f6aa:	454b      	cmp	r3, r9
 800f6ac:	d126      	bne.n	800f6fc <__ieee754_powf+0xcc>
 800f6ae:	f005 0501 	and.w	r5, r5, #1
 800f6b2:	f1c5 0502 	rsb	r5, r5, #2
 800f6b6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f6ba:	d122      	bne.n	800f702 <__ieee754_powf+0xd2>
 800f6bc:	2c00      	cmp	r4, #0
 800f6be:	f280 826f 	bge.w	800fba0 <__ieee754_powf+0x570>
 800f6c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f6c6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f6ca:	e7c9      	b.n	800f660 <__ieee754_powf+0x30>
 800f6cc:	2500      	movs	r5, #0
 800f6ce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f6d2:	d1f0      	bne.n	800f6b6 <__ieee754_powf+0x86>
 800f6d4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f6d8:	f000 825c 	beq.w	800fb94 <__ieee754_powf+0x564>
 800f6dc:	d908      	bls.n	800f6f0 <__ieee754_powf+0xc0>
 800f6de:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800fa40 <__ieee754_powf+0x410>
 800f6e2:	2c00      	cmp	r4, #0
 800f6e4:	bfa8      	it	ge
 800f6e6:	eeb0 0a68 	vmovge.f32	s0, s17
 800f6ea:	e7b9      	b.n	800f660 <__ieee754_powf+0x30>
 800f6ec:	2502      	movs	r5, #2
 800f6ee:	e7ee      	b.n	800f6ce <__ieee754_powf+0x9e>
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	f280 8252 	bge.w	800fb9a <__ieee754_powf+0x56a>
 800f6f6:	eeb1 0a68 	vneg.f32	s0, s17
 800f6fa:	e7b1      	b.n	800f660 <__ieee754_powf+0x30>
 800f6fc:	2500      	movs	r5, #0
 800f6fe:	e7da      	b.n	800f6b6 <__ieee754_powf+0x86>
 800f700:	2500      	movs	r5, #0
 800f702:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f706:	d102      	bne.n	800f70e <__ieee754_powf+0xde>
 800f708:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f70c:	e7a8      	b.n	800f660 <__ieee754_powf+0x30>
 800f70e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f712:	d109      	bne.n	800f728 <__ieee754_powf+0xf8>
 800f714:	2e00      	cmp	r6, #0
 800f716:	db07      	blt.n	800f728 <__ieee754_powf+0xf8>
 800f718:	eeb0 0a48 	vmov.f32	s0, s16
 800f71c:	ecbd 8b02 	vpop	{d8}
 800f720:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f724:	f7ff bcd2 	b.w	800f0cc <__ieee754_sqrtf>
 800f728:	eeb0 0a48 	vmov.f32	s0, s16
 800f72c:	f000 fa50 	bl	800fbd0 <fabsf>
 800f730:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f734:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f738:	4647      	mov	r7, r8
 800f73a:	d002      	beq.n	800f742 <__ieee754_powf+0x112>
 800f73c:	f1b8 0f00 	cmp.w	r8, #0
 800f740:	d117      	bne.n	800f772 <__ieee754_powf+0x142>
 800f742:	2c00      	cmp	r4, #0
 800f744:	bfbc      	itt	lt
 800f746:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f74a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f74e:	2e00      	cmp	r6, #0
 800f750:	da86      	bge.n	800f660 <__ieee754_powf+0x30>
 800f752:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f756:	ea58 0805 	orrs.w	r8, r8, r5
 800f75a:	d104      	bne.n	800f766 <__ieee754_powf+0x136>
 800f75c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f760:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f764:	e77c      	b.n	800f660 <__ieee754_powf+0x30>
 800f766:	2d01      	cmp	r5, #1
 800f768:	f47f af7a 	bne.w	800f660 <__ieee754_powf+0x30>
 800f76c:	eeb1 0a40 	vneg.f32	s0, s0
 800f770:	e776      	b.n	800f660 <__ieee754_powf+0x30>
 800f772:	0ff0      	lsrs	r0, r6, #31
 800f774:	3801      	subs	r0, #1
 800f776:	ea55 0300 	orrs.w	r3, r5, r0
 800f77a:	d104      	bne.n	800f786 <__ieee754_powf+0x156>
 800f77c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f780:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f784:	e76c      	b.n	800f660 <__ieee754_powf+0x30>
 800f786:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f78a:	d973      	bls.n	800f874 <__ieee754_powf+0x244>
 800f78c:	4bad      	ldr	r3, [pc, #692]	@ (800fa44 <__ieee754_powf+0x414>)
 800f78e:	4598      	cmp	r8, r3
 800f790:	d808      	bhi.n	800f7a4 <__ieee754_powf+0x174>
 800f792:	2c00      	cmp	r4, #0
 800f794:	da0b      	bge.n	800f7ae <__ieee754_powf+0x17e>
 800f796:	2000      	movs	r0, #0
 800f798:	ecbd 8b02 	vpop	{d8}
 800f79c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	f000 baa4 	b.w	800fcec <__math_oflowf>
 800f7a4:	4ba8      	ldr	r3, [pc, #672]	@ (800fa48 <__ieee754_powf+0x418>)
 800f7a6:	4598      	cmp	r8, r3
 800f7a8:	d908      	bls.n	800f7bc <__ieee754_powf+0x18c>
 800f7aa:	2c00      	cmp	r4, #0
 800f7ac:	dcf3      	bgt.n	800f796 <__ieee754_powf+0x166>
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	ecbd 8b02 	vpop	{d8}
 800f7b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b8:	f000 ba92 	b.w	800fce0 <__math_uflowf>
 800f7bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f7c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7c4:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800fa4c <__ieee754_powf+0x41c>
 800f7c8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f7cc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f7d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f7d4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f7d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f7dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7e0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800fa50 <__ieee754_powf+0x420>
 800f7e4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f7e8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800fa54 <__ieee754_powf+0x424>
 800f7ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f7f0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800fa58 <__ieee754_powf+0x428>
 800f7f4:	eef0 6a67 	vmov.f32	s13, s15
 800f7f8:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f7fc:	ee16 3a90 	vmov	r3, s13
 800f800:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f804:	f023 030f 	bic.w	r3, r3, #15
 800f808:	ee06 3a90 	vmov	s13, r3
 800f80c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f810:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f814:	3d01      	subs	r5, #1
 800f816:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f81a:	4305      	orrs	r5, r0
 800f81c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f820:	f024 040f 	bic.w	r4, r4, #15
 800f824:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f828:	bf18      	it	ne
 800f82a:	eeb0 8a47 	vmovne.f32	s16, s14
 800f82e:	ee07 4a10 	vmov	s14, r4
 800f832:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f836:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f83a:	ee07 3a90 	vmov	s15, r3
 800f83e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f842:	ee07 4a10 	vmov	s14, r4
 800f846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f84a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f84e:	ee17 1a10 	vmov	r1, s14
 800f852:	2900      	cmp	r1, #0
 800f854:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f858:	f340 80dd 	ble.w	800fa16 <__ieee754_powf+0x3e6>
 800f85c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f860:	f240 80ca 	bls.w	800f9f8 <__ieee754_powf+0x3c8>
 800f864:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86c:	bf4c      	ite	mi
 800f86e:	2001      	movmi	r0, #1
 800f870:	2000      	movpl	r0, #0
 800f872:	e791      	b.n	800f798 <__ieee754_powf+0x168>
 800f874:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f878:	bf01      	itttt	eq
 800f87a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fa5c <__ieee754_powf+0x42c>
 800f87e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f882:	f06f 0317 	mvneq.w	r3, #23
 800f886:	ee17 7a90 	vmoveq	r7, s15
 800f88a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f88e:	bf18      	it	ne
 800f890:	2300      	movne	r3, #0
 800f892:	3a7f      	subs	r2, #127	@ 0x7f
 800f894:	441a      	add	r2, r3
 800f896:	4b72      	ldr	r3, [pc, #456]	@ (800fa60 <__ieee754_powf+0x430>)
 800f898:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f89c:	429f      	cmp	r7, r3
 800f89e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f8a2:	dd06      	ble.n	800f8b2 <__ieee754_powf+0x282>
 800f8a4:	4b6f      	ldr	r3, [pc, #444]	@ (800fa64 <__ieee754_powf+0x434>)
 800f8a6:	429f      	cmp	r7, r3
 800f8a8:	f340 80a4 	ble.w	800f9f4 <__ieee754_powf+0x3c4>
 800f8ac:	3201      	adds	r2, #1
 800f8ae:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f8b2:	2600      	movs	r6, #0
 800f8b4:	4b6c      	ldr	r3, [pc, #432]	@ (800fa68 <__ieee754_powf+0x438>)
 800f8b6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f8ba:	ee07 1a10 	vmov	s14, r1
 800f8be:	edd3 5a00 	vldr	s11, [r3]
 800f8c2:	4b6a      	ldr	r3, [pc, #424]	@ (800fa6c <__ieee754_powf+0x43c>)
 800f8c4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f8c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8cc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f8d0:	1049      	asrs	r1, r1, #1
 800f8d2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f8d6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f8da:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f8de:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f8e2:	ee07 1a90 	vmov	s15, r1
 800f8e6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f8ea:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f8ee:	ee15 7a10 	vmov	r7, s10
 800f8f2:	401f      	ands	r7, r3
 800f8f4:	ee06 7a90 	vmov	s13, r7
 800f8f8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f8fc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f900:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f904:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f908:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fa70 <__ieee754_powf+0x440>
 800f90c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fa74 <__ieee754_powf+0x444>
 800f910:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f914:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fa78 <__ieee754_powf+0x448>
 800f918:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f91c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fa4c <__ieee754_powf+0x41c>
 800f920:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f924:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fa7c <__ieee754_powf+0x44c>
 800f928:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f92c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fa80 <__ieee754_powf+0x450>
 800f930:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f934:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f938:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f93c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f940:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f944:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f948:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f94c:	eef0 5a67 	vmov.f32	s11, s15
 800f950:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f954:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f958:	ee15 1a90 	vmov	r1, s11
 800f95c:	4019      	ands	r1, r3
 800f95e:	ee05 1a90 	vmov	s11, r1
 800f962:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f966:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f96a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f96e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f972:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f976:	eeb0 6a67 	vmov.f32	s12, s15
 800f97a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f97e:	ee16 1a10 	vmov	r1, s12
 800f982:	4019      	ands	r1, r3
 800f984:	ee06 1a10 	vmov	s12, r1
 800f988:	eeb0 7a46 	vmov.f32	s14, s12
 800f98c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f990:	493c      	ldr	r1, [pc, #240]	@ (800fa84 <__ieee754_powf+0x454>)
 800f992:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f996:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f99a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fa88 <__ieee754_powf+0x458>
 800f99e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fa8c <__ieee754_powf+0x45c>
 800f9a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f9a6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fa90 <__ieee754_powf+0x460>
 800f9aa:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f9ae:	ed91 7a00 	vldr	s14, [r1]
 800f9b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9b6:	ee07 2a10 	vmov	s14, r2
 800f9ba:	eef0 6a67 	vmov.f32	s13, s15
 800f9be:	4a35      	ldr	r2, [pc, #212]	@ (800fa94 <__ieee754_powf+0x464>)
 800f9c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f9c4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f9c8:	ed92 5a00 	vldr	s10, [r2]
 800f9cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f9d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f9d4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f9d8:	ee16 2a90 	vmov	r2, s13
 800f9dc:	4013      	ands	r3, r2
 800f9de:	ee06 3a90 	vmov	s13, r3
 800f9e2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f9e6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f9ea:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f9ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9f2:	e70f      	b.n	800f814 <__ieee754_powf+0x1e4>
 800f9f4:	2601      	movs	r6, #1
 800f9f6:	e75d      	b.n	800f8b4 <__ieee754_powf+0x284>
 800f9f8:	d152      	bne.n	800faa0 <__ieee754_powf+0x470>
 800f9fa:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fa98 <__ieee754_powf+0x468>
 800f9fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa02:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fa06:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0e:	f73f af29 	bgt.w	800f864 <__ieee754_powf+0x234>
 800fa12:	2386      	movs	r3, #134	@ 0x86
 800fa14:	e048      	b.n	800faa8 <__ieee754_powf+0x478>
 800fa16:	4a21      	ldr	r2, [pc, #132]	@ (800fa9c <__ieee754_powf+0x46c>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d907      	bls.n	800fa2c <__ieee754_powf+0x3fc>
 800fa1c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fa20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa24:	bf4c      	ite	mi
 800fa26:	2001      	movmi	r0, #1
 800fa28:	2000      	movpl	r0, #0
 800fa2a:	e6c1      	b.n	800f7b0 <__ieee754_powf+0x180>
 800fa2c:	d138      	bne.n	800faa0 <__ieee754_powf+0x470>
 800fa2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa32:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3a:	dbea      	blt.n	800fa12 <__ieee754_powf+0x3e2>
 800fa3c:	e7ee      	b.n	800fa1c <__ieee754_powf+0x3ec>
 800fa3e:	bf00      	nop
 800fa40:	00000000 	.word	0x00000000
 800fa44:	3f7ffff3 	.word	0x3f7ffff3
 800fa48:	3f800007 	.word	0x3f800007
 800fa4c:	3eaaaaab 	.word	0x3eaaaaab
 800fa50:	3fb8aa3b 	.word	0x3fb8aa3b
 800fa54:	36eca570 	.word	0x36eca570
 800fa58:	3fb8aa00 	.word	0x3fb8aa00
 800fa5c:	4b800000 	.word	0x4b800000
 800fa60:	001cc471 	.word	0x001cc471
 800fa64:	005db3d6 	.word	0x005db3d6
 800fa68:	080104c0 	.word	0x080104c0
 800fa6c:	fffff000 	.word	0xfffff000
 800fa70:	3e6c3255 	.word	0x3e6c3255
 800fa74:	3e53f142 	.word	0x3e53f142
 800fa78:	3e8ba305 	.word	0x3e8ba305
 800fa7c:	3edb6db7 	.word	0x3edb6db7
 800fa80:	3f19999a 	.word	0x3f19999a
 800fa84:	080104b0 	.word	0x080104b0
 800fa88:	3f76384f 	.word	0x3f76384f
 800fa8c:	3f763800 	.word	0x3f763800
 800fa90:	369dc3a0 	.word	0x369dc3a0
 800fa94:	080104b8 	.word	0x080104b8
 800fa98:	3338aa3c 	.word	0x3338aa3c
 800fa9c:	43160000 	.word	0x43160000
 800faa0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800faa4:	d971      	bls.n	800fb8a <__ieee754_powf+0x55a>
 800faa6:	15db      	asrs	r3, r3, #23
 800faa8:	3b7e      	subs	r3, #126	@ 0x7e
 800faaa:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800faae:	4118      	asrs	r0, r3
 800fab0:	4408      	add	r0, r1
 800fab2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fab6:	4a3c      	ldr	r2, [pc, #240]	@ (800fba8 <__ieee754_powf+0x578>)
 800fab8:	3b7f      	subs	r3, #127	@ 0x7f
 800faba:	411a      	asrs	r2, r3
 800fabc:	4002      	ands	r2, r0
 800fabe:	ee07 2a10 	vmov	s14, r2
 800fac2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800fac6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800faca:	f1c3 0317 	rsb	r3, r3, #23
 800face:	4118      	asrs	r0, r3
 800fad0:	2900      	cmp	r1, #0
 800fad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fad6:	bfb8      	it	lt
 800fad8:	4240      	neglt	r0, r0
 800fada:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800fade:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800fbac <__ieee754_powf+0x57c>
 800fae2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800fbb0 <__ieee754_powf+0x580>
 800fae6:	ee17 3a10 	vmov	r3, s14
 800faea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800faee:	f023 030f 	bic.w	r3, r3, #15
 800faf2:	ee07 3a10 	vmov	s14, r3
 800faf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fafa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fafe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fb02:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800fbb4 <__ieee754_powf+0x584>
 800fb06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb0a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800fb0e:	eef0 6a67 	vmov.f32	s13, s15
 800fb12:	eee7 6a06 	vfma.f32	s13, s14, s12
 800fb16:	eef0 5a66 	vmov.f32	s11, s13
 800fb1a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800fb1e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fb22:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fb26:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800fbb8 <__ieee754_powf+0x588>
 800fb2a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800fbbc <__ieee754_powf+0x58c>
 800fb2e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fb32:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800fbc0 <__ieee754_powf+0x590>
 800fb36:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fb3a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800fbc4 <__ieee754_powf+0x594>
 800fb3e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fb42:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fbc8 <__ieee754_powf+0x598>
 800fb46:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fb4a:	eeb0 6a66 	vmov.f32	s12, s13
 800fb4e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800fb52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fb56:	ee66 5a86 	vmul.f32	s11, s13, s12
 800fb5a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fb5e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800fb62:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fb66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb72:	ee10 3a10 	vmov	r3, s0
 800fb76:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fb7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb7e:	da06      	bge.n	800fb8e <__ieee754_powf+0x55e>
 800fb80:	f000 f82e 	bl	800fbe0 <scalbnf>
 800fb84:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fb88:	e56a      	b.n	800f660 <__ieee754_powf+0x30>
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	e7a5      	b.n	800fada <__ieee754_powf+0x4aa>
 800fb8e:	ee00 3a10 	vmov	s0, r3
 800fb92:	e7f7      	b.n	800fb84 <__ieee754_powf+0x554>
 800fb94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fb98:	e562      	b.n	800f660 <__ieee754_powf+0x30>
 800fb9a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fbcc <__ieee754_powf+0x59c>
 800fb9e:	e55f      	b.n	800f660 <__ieee754_powf+0x30>
 800fba0:	eeb0 0a48 	vmov.f32	s0, s16
 800fba4:	e55c      	b.n	800f660 <__ieee754_powf+0x30>
 800fba6:	bf00      	nop
 800fba8:	ff800000 	.word	0xff800000
 800fbac:	3f317218 	.word	0x3f317218
 800fbb0:	3f317200 	.word	0x3f317200
 800fbb4:	35bfbe8c 	.word	0x35bfbe8c
 800fbb8:	b5ddea0e 	.word	0xb5ddea0e
 800fbbc:	3331bb4c 	.word	0x3331bb4c
 800fbc0:	388ab355 	.word	0x388ab355
 800fbc4:	bb360b61 	.word	0xbb360b61
 800fbc8:	3e2aaaab 	.word	0x3e2aaaab
 800fbcc:	00000000 	.word	0x00000000

0800fbd0 <fabsf>:
 800fbd0:	ee10 3a10 	vmov	r3, s0
 800fbd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fbd8:	ee00 3a10 	vmov	s0, r3
 800fbdc:	4770      	bx	lr
	...

0800fbe0 <scalbnf>:
 800fbe0:	ee10 3a10 	vmov	r3, s0
 800fbe4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fbe8:	d02b      	beq.n	800fc42 <scalbnf+0x62>
 800fbea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fbee:	d302      	bcc.n	800fbf6 <scalbnf+0x16>
 800fbf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fbf4:	4770      	bx	lr
 800fbf6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fbfa:	d123      	bne.n	800fc44 <scalbnf+0x64>
 800fbfc:	4b24      	ldr	r3, [pc, #144]	@ (800fc90 <scalbnf+0xb0>)
 800fbfe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fc94 <scalbnf+0xb4>
 800fc02:	4298      	cmp	r0, r3
 800fc04:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc08:	db17      	blt.n	800fc3a <scalbnf+0x5a>
 800fc0a:	ee10 3a10 	vmov	r3, s0
 800fc0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc12:	3a19      	subs	r2, #25
 800fc14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fc18:	4288      	cmp	r0, r1
 800fc1a:	dd15      	ble.n	800fc48 <scalbnf+0x68>
 800fc1c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fc98 <scalbnf+0xb8>
 800fc20:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fc9c <scalbnf+0xbc>
 800fc24:	ee10 3a10 	vmov	r3, s0
 800fc28:	eeb0 7a67 	vmov.f32	s14, s15
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	bfb8      	it	lt
 800fc30:	eef0 7a66 	vmovlt.f32	s15, s13
 800fc34:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fc38:	4770      	bx	lr
 800fc3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fca0 <scalbnf+0xc0>
 800fc3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc42:	4770      	bx	lr
 800fc44:	0dd2      	lsrs	r2, r2, #23
 800fc46:	e7e5      	b.n	800fc14 <scalbnf+0x34>
 800fc48:	4410      	add	r0, r2
 800fc4a:	28fe      	cmp	r0, #254	@ 0xfe
 800fc4c:	dce6      	bgt.n	800fc1c <scalbnf+0x3c>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	dd06      	ble.n	800fc60 <scalbnf+0x80>
 800fc52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc56:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc5a:	ee00 3a10 	vmov	s0, r3
 800fc5e:	4770      	bx	lr
 800fc60:	f110 0f16 	cmn.w	r0, #22
 800fc64:	da09      	bge.n	800fc7a <scalbnf+0x9a>
 800fc66:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fca0 <scalbnf+0xc0>
 800fc6a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fca4 <scalbnf+0xc4>
 800fc6e:	ee10 3a10 	vmov	r3, s0
 800fc72:	eeb0 7a67 	vmov.f32	s14, s15
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	e7d9      	b.n	800fc2e <scalbnf+0x4e>
 800fc7a:	3019      	adds	r0, #25
 800fc7c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fca8 <scalbnf+0xc8>
 800fc88:	ee07 3a90 	vmov	s15, r3
 800fc8c:	e7d7      	b.n	800fc3e <scalbnf+0x5e>
 800fc8e:	bf00      	nop
 800fc90:	ffff3cb0 	.word	0xffff3cb0
 800fc94:	4c000000 	.word	0x4c000000
 800fc98:	7149f2ca 	.word	0x7149f2ca
 800fc9c:	f149f2ca 	.word	0xf149f2ca
 800fca0:	0da24260 	.word	0x0da24260
 800fca4:	8da24260 	.word	0x8da24260
 800fca8:	33000000 	.word	0x33000000

0800fcac <with_errnof>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	ed2d 8b02 	vpush	{d8}
 800fcb2:	eeb0 8a40 	vmov.f32	s16, s0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	f7fc fb92 	bl	800c3e0 <__errno>
 800fcbc:	eeb0 0a48 	vmov.f32	s0, s16
 800fcc0:	ecbd 8b02 	vpop	{d8}
 800fcc4:	6004      	str	r4, [r0, #0]
 800fcc6:	bd10      	pop	{r4, pc}

0800fcc8 <xflowf>:
 800fcc8:	b130      	cbz	r0, 800fcd8 <xflowf+0x10>
 800fcca:	eef1 7a40 	vneg.f32	s15, s0
 800fcce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fcd2:	2022      	movs	r0, #34	@ 0x22
 800fcd4:	f7ff bfea 	b.w	800fcac <with_errnof>
 800fcd8:	eef0 7a40 	vmov.f32	s15, s0
 800fcdc:	e7f7      	b.n	800fcce <xflowf+0x6>
	...

0800fce0 <__math_uflowf>:
 800fce0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fce8 <__math_uflowf+0x8>
 800fce4:	f7ff bff0 	b.w	800fcc8 <xflowf>
 800fce8:	10000000 	.word	0x10000000

0800fcec <__math_oflowf>:
 800fcec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fcf4 <__math_oflowf+0x8>
 800fcf0:	f7ff bfea 	b.w	800fcc8 <xflowf>
 800fcf4:	70000000 	.word	0x70000000

0800fcf8 <_init>:
 800fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfa:	bf00      	nop
 800fcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcfe:	bc08      	pop	{r3}
 800fd00:	469e      	mov	lr, r3
 800fd02:	4770      	bx	lr

0800fd04 <_fini>:
 800fd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd06:	bf00      	nop
 800fd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd0a:	bc08      	pop	{r3}
 800fd0c:	469e      	mov	lr, r3
 800fd0e:	4770      	bx	lr
