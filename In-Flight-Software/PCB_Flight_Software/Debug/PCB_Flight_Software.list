
PCB_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800d9a8  0800d9a8  0000e9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0c0  0800e0c0  000102a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0c0  0800e0c0  0000f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0c8  0800e0c8  000102a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c8  0800e0c8  0000f0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0cc  0800e0cc  0000f0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002a0  20000000  0800e0d0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  200002a0  0800e370  000102a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  0800e370  00010c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012234  00000000  00000000  000102d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bb  00000000  00000000  00022504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00024dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eba  00000000  00000000  00026068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213b8  00000000  00000000  00026f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015fe3  00000000  00000000  000482da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c817b  00000000  00000000  0005e2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000681c  00000000  00000000  0012647c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0012cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002a0 	.word	0x200002a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d990 	.word	0x0800d990

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002a4 	.word	0x200002a4
 800020c:	0800d990 	.word	0x0800d990

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <USART1_IRQHandler>:
};

HAL_StatusTypeDef result;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART1_IRQHandler(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&huart1);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <USART1_IRQHandler+0x10>)
 800102a:	f006 fd41 	bl	8007ab0 <HAL_UART_IRQHandler>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200005ac 	.word	0x200005ac

08001038 <calculate_auto_gyro_speed>:

// Auto Gyro Rotation Sensor ------------------------------------------------------------

// Speed calculation function
void calculate_auto_gyro_speed(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    auto_gyro_rotation_rate = (pulse_count * 360) / PULSES_PER_ROTATION;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <calculate_auto_gyro_speed+0x38>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001044:	fb02 f303 	mul.w	r3, r2, r3
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <calculate_auto_gyro_speed+0x3c>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	ee07 3a90 	vmov	s15, r3
 8001054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <calculate_auto_gyro_speed+0x40>)
 800105a:	edc3 7a00 	vstr	s15, [r3]
    pulse_count = 0;
 800105e:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <calculate_auto_gyro_speed+0x38>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000850 	.word	0x20000850
 8001074:	cccccccd 	.word	0xcccccccd
 8001078:	20000630 	.word	0x20000630

0800107c <Stepper_SetStep>:

// Stepper Motor Functions ---------------------------------------------------------------------------
void Stepper_SetStep(uint8_t i) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, steps[i][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <Stepper_SetStep+0x8c>)
 800108a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	2140      	movs	r1, #64	@ 0x40
 800109c:	481b      	ldr	r0, [pc, #108]	@ (800110c <Stepper_SetStep+0x90>)
 800109e:	f003 fabb 	bl	8004618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, steps[i][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <Stepper_SetStep+0x8c>)
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	4814      	ldr	r0, [pc, #80]	@ (800110c <Stepper_SetStep+0x90>)
 80010bc:	f003 faac 	bl	8004618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, steps[i][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <Stepper_SetStep+0x8c>)
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <Stepper_SetStep+0x90>)
 80010dc:	f003 fa9c 	bl	8004618 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, steps[i][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <Stepper_SetStep+0x8c>)
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	78db      	ldrb	r3, [r3, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	461a      	mov	r2, r3
 80010f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <Stepper_SetStep+0x90>)
 80010fc:	f003 fa8c 	bl	8004618 <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200000ac 	.word	0x200000ac
 800110c:	40020800 	.word	0x40020800

08001110 <Stepper_Rotate>:

// Rotate the motor a specified number of steps
void Stepper_Rotate(int stepsCount, int delayMs) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    int direction = (stepsCount > 0) ? 1 : -1;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	dd01      	ble.n	8001124 <Stepper_Rotate+0x14>
 8001120:	2301      	movs	r3, #1
 8001122:	e001      	b.n	8001128 <Stepper_Rotate+0x18>
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	60bb      	str	r3, [r7, #8]
    stepsCount = abs(stepsCount);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	bfb8      	it	lt
 8001130:	425b      	neglt	r3, r3
 8001132:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < stepsCount; i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e021      	b.n	800117e <Stepper_Rotate+0x6e>
        Stepper_SetStep(stepIndex);
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <Stepper_Rotate+0x80>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff9b 	bl	800107c <Stepper_SetStep>
        HAL_Delay(delayMs);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fd13 	bl	8003b74 <HAL_Delay>

        stepIndex += direction;
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <Stepper_Rotate+0x80>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <Stepper_Rotate+0x80>)
 8001158:	6013      	str	r3, [r2, #0]
        if (stepIndex >= 8) stepIndex = 0;
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <Stepper_Rotate+0x80>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b07      	cmp	r3, #7
 8001160:	dd03      	ble.n	800116a <Stepper_Rotate+0x5a>
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <Stepper_Rotate+0x80>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e006      	b.n	8001178 <Stepper_Rotate+0x68>
        else if (stepIndex < 0) stepIndex = 7;
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <Stepper_Rotate+0x80>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	da02      	bge.n	8001178 <Stepper_Rotate+0x68>
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <Stepper_Rotate+0x80>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < stepsCount; i++) {
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	429a      	cmp	r2, r3
 8001184:	dbd9      	blt.n	800113a <Stepper_Rotate+0x2a>
    }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000009c 	.word	0x2000009c

08001194 <Stepper_Correction>:

// Rotate the motor to correct its direction to all way to the North
void Stepper_Correction(){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	read_MMC5603();
 800119a:	f000 fbed 	bl	8001978 <read_MMC5603>
	float dir_change = stepper_direction - direction;
 800119e:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <Stepper_Correction+0x15c>)
 80011a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <Stepper_Correction+0x160>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f88d 	bl	80002c8 <__aeabi_dsub>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fd37 	bl	8000c28 <__aeabi_d2f>
 80011ba:	4603      	mov	r3, r0
 80011bc:	607b      	str	r3, [r7, #4]
	if (dir_change > 180) dir_change -= 360;
 80011be:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80012f8 <Stepper_Correction+0x164>
 80011c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd08      	ble.n	80011e2 <Stepper_Correction+0x4e>
 80011d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80012fc <Stepper_Correction+0x168>
 80011d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80011e0:	e010      	b.n	8001204 <Stepper_Correction+0x70>
	else if (dir_change < -180) dir_change += 360;
 80011e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001300 <Stepper_Correction+0x16c>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d507      	bpl.n	8001204 <Stepper_Correction+0x70>
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80012fc <Stepper_Correction+0x168>
 80011fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001200:	edc7 7a01 	vstr	s15, [r7, #4]

	int num_steps = round(dir_change * STEPS_PER_REV / 360);
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001304 <Stepper_Correction+0x170>
 800120c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001210:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80012fc <Stepper_Correction+0x168>
 8001214:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001218:	ee16 0a90 	vmov	r0, s13
 800121c:	f7ff f9b4 	bl	8000588 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f00b fd9c 	bl	800cd64 <round>
 800122c:	ec53 2b10 	vmov	r2, r3, d0
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcb0 	bl	8000b98 <__aeabi_d2iz>
 8001238:	4603      	mov	r3, r0
 800123a:	603b      	str	r3, [r7, #0]

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <Stepper_Correction+0x15c>)
 800123e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f7ff f98e 	bl	8000564 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b2e      	ldr	r3, [pc, #184]	@ (8001308 <Stepper_Correction+0x174>)
 800124e:	f7ff f9f3 	bl	8000638 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <Stepper_Correction+0x178>)
 8001260:	f7ff fb14 	bl	800088c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f82c 	bl	80002c8 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	491e      	ldr	r1, [pc, #120]	@ (80012f0 <Stepper_Correction+0x15c>)
 8001276:	e9c1 2300 	strd	r2, r3, [r1]
	if (stepper_direction > 360) stepper_direction -= 360;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <Stepper_Correction+0x15c>)
 800127c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <Stepper_Correction+0x174>)
 8001286:	f7ff fc67 	bl	8000b58 <__aeabi_dcmpgt>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00d      	beq.n	80012ac <Stepper_Correction+0x118>
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <Stepper_Correction+0x15c>)
 8001292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <Stepper_Correction+0x174>)
 800129c:	f7ff f814 	bl	80002c8 <__aeabi_dsub>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4912      	ldr	r1, [pc, #72]	@ (80012f0 <Stepper_Correction+0x15c>)
 80012a6:	e9c1 2300 	strd	r2, r3, [r1]
 80012aa:	e018      	b.n	80012de <Stepper_Correction+0x14a>
	else if (stepper_direction < 0) stepper_direction += 360;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <Stepper_Correction+0x15c>)
 80012ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	f7ff fc2f 	bl	8000b1c <__aeabi_dcmplt>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00c      	beq.n	80012de <Stepper_Correction+0x14a>
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <Stepper_Correction+0x15c>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <Stepper_Correction+0x174>)
 80012d0:	f7fe fffc 	bl	80002cc <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4905      	ldr	r1, [pc, #20]	@ (80012f0 <Stepper_Correction+0x15c>)
 80012da:	e9c1 2300 	strd	r2, r3, [r1]

	Stepper_Rotate(num_steps, 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	f7ff ff15 	bl	8001110 <Stepper_Rotate>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000860 	.word	0x20000860
 80012f4:	20000858 	.word	0x20000858
 80012f8:	43340000 	.word	0x43340000
 80012fc:	43b40000 	.word	0x43b40000
 8001300:	c3340000 	.word	0xc3340000
 8001304:	45800000 	.word	0x45800000
 8001308:	40768000 	.word	0x40768000
 800130c:	40b00000 	.word	0x40b00000

08001310 <set_stepper_north>:

void set_stepper_north(){
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
//	direction_offset = direction;
	stepper_direction = direction;
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <set_stepper_north+0x1c>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	4905      	ldr	r1, [pc, #20]	@ (8001330 <set_stepper_north+0x20>)
 800131c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000858 	.word	0x20000858
 8001330:	20000860 	.word	0x20000860

08001334 <Set_Servo_Angle>:

// Servo Motor Functions -------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t angle) {
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
    // Limit the angle between 0° and 180°
    if (angle > 180) {
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2bb4      	cmp	r3, #180	@ 0xb4
 8001342:	d901      	bls.n	8001348 <Set_Servo_Angle+0x14>
        angle = 180;
 8001344:	23b4      	movs	r3, #180	@ 0xb4
 8001346:	71fb      	strb	r3, [r7, #7]
    }

    // Map the angle to the pulse width
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
                           ((SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH) * angle) / 180;
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
 8001352:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001356:	617b      	str	r3, [r7, #20]

    // Calculate the duty cycle for the given pulse width
    uint32_t tim_period = htim2.Init.Period + 1;   // Get the timer period
 8001358:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <Set_Servo_Angle+0x54>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
    uint32_t pulse = (tim_period * pulse_width) / (1000000 / SERVO_FREQUENCY);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	4a08      	ldr	r2, [pc, #32]	@ (800138c <Set_Servo_Angle+0x58>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0b9b      	lsrs	r3, r3, #14
 8001370:	60fb      	str	r3, [r7, #12]

    // Set the pulse width to TIM2 Channel 3
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulse);
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <Set_Servo_Angle+0x54>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800137a:	bf00      	nop
 800137c:	371c      	adds	r7, #28
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000564 	.word	0x20000564
 800138c:	d1b71759 	.word	0xd1b71759

08001390 <Servo_Init>:

void Servo_Init() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Start PWM signal on TIM2 Channel 1
 8001394:	2108      	movs	r1, #8
 8001396:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <Servo_Init+0x10>)
 8001398:	f005 fc68 	bl	8006c6c <HAL_TIM_PWM_Start>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000564 	.word	0x20000564

080013a4 <time_seconds>:

// Flash Data Functions ---------------------------------------------------------------------------------
uint32_t time_seconds(uint8_t hr, uint8_t min, uint8_t sec){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
	return 3600 * hr + 60 * min + sec;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80013bc:	fb02 f103 	mul.w	r1, r2, r3
 80013c0:	79ba      	ldrb	r2, [r7, #6]
 80013c2:	4613      	mov	r3, r2
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	18ca      	adds	r2, r1, r3
 80013cc:	797b      	ldrb	r3, [r7, #5]
 80013ce:	4413      	add	r3, r2
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <get_time_dif>:

int32_t get_time_dif(){
 80013dc:	b598      	push	{r3, r4, r7, lr}
 80013de:	af00      	add	r7, sp, #0
	return time_seconds(mission_time_hr, mission_time_min, mission_time_sec) - time_seconds(gps_time_hr, gps_time_min, gps_time_sec);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <get_time_dif+0x40>)
 80013e2:	f993 3000 	ldrsb.w	r3, [r3]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <get_time_dif+0x44>)
 80013ea:	f992 2000 	ldrsb.w	r2, [r2]
 80013ee:	b2d1      	uxtb	r1, r2
 80013f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <get_time_dif+0x48>)
 80013f2:	f992 2000 	ldrsb.w	r2, [r2]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ffd3 	bl	80013a4 <time_seconds>
 80013fe:	4604      	mov	r4, r0
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <get_time_dif+0x4c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <get_time_dif+0x50>)
 8001406:	7811      	ldrb	r1, [r2, #0]
 8001408:	4a09      	ldr	r2, [pc, #36]	@ (8001430 <get_time_dif+0x54>)
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ffc9 	bl	80013a4 <time_seconds>
 8001412:	4603      	mov	r3, r0
 8001414:	1ae3      	subs	r3, r4, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd98      	pop	{r3, r4, r7, pc}
 800141a:	bf00      	nop
 800141c:	200005f4 	.word	0x200005f4
 8001420:	200005f5 	.word	0x200005f5
 8001424:	200005f6 	.word	0x200005f6
 8001428:	20000634 	.word	0x20000634
 800142c:	20000635 	.word	0x20000635
 8001430:	20000636 	.word	0x20000636

08001434 <get_mission_time>:

void get_mission_time(){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	int32_t mission_time = (time_seconds(gps_time_hr, gps_time_min, gps_time_sec) + time_dif) % 86400;
 800143a:	4b31      	ldr	r3, [pc, #196]	@ (8001500 <get_mission_time+0xcc>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	4a31      	ldr	r2, [pc, #196]	@ (8001504 <get_mission_time+0xd0>)
 8001440:	7811      	ldrb	r1, [r2, #0]
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <get_mission_time+0xd4>)
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ffac 	bl	80013a4 <time_seconds>
 800144c:	4602      	mov	r2, r0
 800144e:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <get_mission_time+0xd8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	441a      	add	r2, r3
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <get_mission_time+0xdc>)
 8001456:	fba3 1302 	umull	r1, r3, r3, r2
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	492d      	ldr	r1, [pc, #180]	@ (8001514 <get_mission_time+0xe0>)
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	607b      	str	r3, [r7, #4]
	if (mission_time < 0) mission_time += 86400;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da05      	bge.n	8001478 <get_mission_time+0x44>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8001472:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8001476:	607b      	str	r3, [r7, #4]
	mission_time_sec = mission_time % 60;
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <get_mission_time+0xe4>)
 800147c:	fb83 1302 	smull	r1, r3, r3, r2
 8001480:	4413      	add	r3, r2
 8001482:	1159      	asrs	r1, r3, #5
 8001484:	17d3      	asrs	r3, r2, #31
 8001486:	1ac9      	subs	r1, r1, r3
 8001488:	460b      	mov	r3, r1
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	1a5b      	subs	r3, r3, r1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	1ad1      	subs	r1, r2, r3
 8001492:	b24a      	sxtb	r2, r1
 8001494:	4b21      	ldr	r3, [pc, #132]	@ (800151c <get_mission_time+0xe8>)
 8001496:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_sec;
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <get_mission_time+0xe8>)
 800149a:	f993 3000 	ldrsb.w	r3, [r3]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	1a9b      	subs	r3, r3, r2
 80014a4:	607b      	str	r3, [r7, #4]
	mission_time_min = (mission_time % 3600) / 60;
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <get_mission_time+0xec>)
 80014aa:	fb83 1302 	smull	r1, r3, r3, r2
 80014ae:	4413      	add	r3, r2
 80014b0:	12d9      	asrs	r1, r3, #11
 80014b2:	17d3      	asrs	r3, r2, #31
 80014b4:	1acb      	subs	r3, r1, r3
 80014b6:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <get_mission_time+0xe4>)
 80014c2:	fb82 1203 	smull	r1, r2, r2, r3
 80014c6:	441a      	add	r2, r3
 80014c8:	1152      	asrs	r2, r2, #5
 80014ca:	17db      	asrs	r3, r3, #31
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <get_mission_time+0xf0>)
 80014d2:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_min;
 80014d4:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <get_mission_time+0xf0>)
 80014d6:	f993 3000 	ldrsb.w	r3, [r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	607b      	str	r3, [r7, #4]
	mission_time_hr = mission_time / 3600;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <get_mission_time+0xec>)
 80014e6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ea:	441a      	add	r2, r3
 80014ec:	12d2      	asrs	r2, r2, #11
 80014ee:	17db      	asrs	r3, r3, #31
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b25a      	sxtb	r2, r3
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <get_mission_time+0xf4>)
 80014f6:	701a      	strb	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000634 	.word	0x20000634
 8001504:	20000635 	.word	0x20000635
 8001508:	20000636 	.word	0x20000636
 800150c:	2000084c 	.word	0x2000084c
 8001510:	c22e4507 	.word	0xc22e4507
 8001514:	00015180 	.word	0x00015180
 8001518:	88888889 	.word	0x88888889
 800151c:	200005f6 	.word	0x200005f6
 8001520:	91a2b3c5 	.word	0x91a2b3c5
 8001524:	200005f5 	.word	0x200005f5
 8001528:	200005f4 	.word	0x200005f4

0800152c <store_flash_data>:

void store_flash_data(){
 800152c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001530:	b088      	sub	sp, #32
 8001532:	af00      	add	r7, sp, #0
	// Store altitude offset, magnetic offsets, mission time
	HAL_FLASH_Unlock();
 8001534:	f002 fd3a 	bl	8003fac <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(SECTOR, FLASH_VOLTAGE_RANGE_2);
 8001538:	2101      	movs	r1, #1
 800153a:	200b      	movs	r0, #11
 800153c:	f002 fea8 	bl	8004290 <FLASH_Erase_Sector>
	HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f002 fb17 	bl	8003b74 <HAL_Delay>

	uint32_t altitude_offset_bits, mag_x_offset_bits, mag_y_offset_bits, mag_z_offset_bits;

	// Copy the float data into the 32-bit unsigned integer variables
	memcpy(&altitude_offset_bits, &altitude_offset, sizeof(altitude_offset));
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <store_flash_data+0xb0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61fb      	str	r3, [r7, #28]
	memcpy(&mag_x_offset_bits, &mag_x_offset, sizeof(mag_x_offset));
 800154c:	4b24      	ldr	r3, [pc, #144]	@ (80015e0 <store_flash_data+0xb4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	61bb      	str	r3, [r7, #24]
	memcpy(&mag_y_offset_bits, &mag_y_offset, sizeof(mag_y_offset));
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <store_flash_data+0xb8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	617b      	str	r3, [r7, #20]
	memcpy(&mag_z_offset_bits, &mag_z_offset, sizeof(mag_z_offset));
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <store_flash_data+0xbc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ALTITUDE_OFFSET_ADDRESS, altitude_offset_bits);
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	2200      	movs	r2, #0
 8001562:	461c      	mov	r4, r3
 8001564:	4615      	mov	r5, r2
 8001566:	4622      	mov	r2, r4
 8001568:	462b      	mov	r3, r5
 800156a:	4920      	ldr	r1, [pc, #128]	@ (80015ec <store_flash_data+0xc0>)
 800156c:	2002      	movs	r0, #2
 800156e:	f002 fcc9 	bl	8003f04 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_X_OFFSET_ADDRESS, mag_x_offset_bits);
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2200      	movs	r2, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	60fa      	str	r2, [r7, #12]
 800157a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800157e:	491c      	ldr	r1, [pc, #112]	@ (80015f0 <store_flash_data+0xc4>)
 8001580:	2002      	movs	r0, #2
 8001582:	f002 fcbf 	bl	8003f04 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Y_OFFSET_ADDRESS, mag_y_offset_bits);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2200      	movs	r2, #0
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001592:	4918      	ldr	r1, [pc, #96]	@ (80015f4 <store_flash_data+0xc8>)
 8001594:	2002      	movs	r0, #2
 8001596:	f002 fcb5 	bl	8003f04 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Z_OFFSET_ADDRESS, mag_z_offset_bits);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2200      	movs	r2, #0
 800159e:	469a      	mov	sl, r3
 80015a0:	4693      	mov	fp, r2
 80015a2:	4652      	mov	r2, sl
 80015a4:	465b      	mov	r3, fp
 80015a6:	4914      	ldr	r1, [pc, #80]	@ (80015f8 <store_flash_data+0xcc>)
 80015a8:	2002      	movs	r0, #2
 80015aa:	f002 fcab 	bl	8003f04 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_TIME_DIF_ADDRESS, get_time_dif());
 80015ae:	f7ff ff15 	bl	80013dc <get_time_dif>
 80015b2:	4603      	mov	r3, r0
 80015b4:	17da      	asrs	r2, r3, #31
 80015b6:	4698      	mov	r8, r3
 80015b8:	4691      	mov	r9, r2
 80015ba:	4642      	mov	r2, r8
 80015bc:	464b      	mov	r3, r9
 80015be:	490f      	ldr	r1, [pc, #60]	@ (80015fc <store_flash_data+0xd0>)
 80015c0:	2002      	movs	r0, #2
 80015c2:	f002 fc9f 	bl	8003f04 <HAL_FLASH_Program>
	HAL_Delay(100);
 80015c6:	2064      	movs	r0, #100	@ 0x64
 80015c8:	f002 fad4 	bl	8003b74 <HAL_Delay>

	HAL_FLASH_Lock();
 80015cc:	f002 fd10 	bl	8003ff0 <HAL_FLASH_Lock>
}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015da:	bf00      	nop
 80015dc:	20000974 	.word	0x20000974
 80015e0:	20000958 	.word	0x20000958
 80015e4:	2000095c 	.word	0x2000095c
 80015e8:	20000960 	.word	0x20000960
 80015ec:	080e0000 	.word	0x080e0000
 80015f0:	080e0004 	.word	0x080e0004
 80015f4:	080e0008 	.word	0x080e0008
 80015f8:	080e000c 	.word	0x080e000c
 80015fc:	080e0010 	.word	0x080e0010

08001600 <load_flash_data>:

void load_flash_data(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001604:	f002 fcd2 	bl	8003fac <HAL_FLASH_Unlock>

//	altitude_offset = * (float*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = *(float*)FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (float*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (float*) FLASH_MAG_Z_OFFSET_ADDRESS;
	memcpy(&altitude_offset, (float*)FLASH_ALTITUDE_OFFSET_ADDRESS, sizeof(float));
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <load_flash_data+0x38>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0b      	ldr	r2, [pc, #44]	@ (800163c <load_flash_data+0x3c>)
 800160e:	6013      	str	r3, [r2, #0]
	memcpy(&mag_x_offset, (float*)FLASH_MAG_X_OFFSET_ADDRESS, sizeof(float));
 8001610:	4b0b      	ldr	r3, [pc, #44]	@ (8001640 <load_flash_data+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	@ (8001644 <load_flash_data+0x44>)
 8001616:	6013      	str	r3, [r2, #0]
	memcpy(&mag_y_offset, (float*)FLASH_MAG_Y_OFFSET_ADDRESS, sizeof(float));
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <load_flash_data+0x48>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <load_flash_data+0x4c>)
 800161e:	6013      	str	r3, [r2, #0]
	memcpy(&mag_z_offset, (float*)FLASH_MAG_Z_OFFSET_ADDRESS, sizeof(float));
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <load_flash_data+0x50>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0b      	ldr	r2, [pc, #44]	@ (8001654 <load_flash_data+0x54>)
 8001626:	6013      	str	r3, [r2, #0]
	memcpy(&time_dif, (int32_t*)FLASH_TIME_DIF_ADDRESS, sizeof(int32_t));
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <load_flash_data+0x58>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	@ (800165c <load_flash_data+0x5c>)
 800162e:	6013      	str	r3, [r2, #0]

	HAL_FLASH_Lock();
 8001630:	f002 fcde 	bl	8003ff0 <HAL_FLASH_Lock>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	080e0000 	.word	0x080e0000
 800163c:	20000974 	.word	0x20000974
 8001640:	080e0004 	.word	0x080e0004
 8001644:	20000958 	.word	0x20000958
 8001648:	080e0008 	.word	0x080e0008
 800164c:	2000095c 	.word	0x2000095c
 8001650:	080e000c 	.word	0x080e000c
 8001654:	20000960 	.word	0x20000960
 8001658:	080e0010 	.word	0x080e0010
 800165c:	2000084c 	.word	0x2000084c

08001660 <set_gps>:

// Sensor Read Functions -----------------------------------------------------------------------------
uint8_t set_gps(char* buf, uint8_t order){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <set_gps+0x18>
		return 0;
 8001674:	2300      	movs	r3, #0
 8001676:	e0c8      	b.n	800180a <set_gps+0x1aa>

	switch(order) {
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b09      	cmp	r3, #9
 800167c:	f200 80bd 	bhi.w	80017fa <set_gps+0x19a>
 8001680:	a201      	add	r2, pc, #4	@ (adr r2, 8001688 <set_gps+0x28>)
 8001682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001686:	bf00      	nop
 8001688:	080016b1 	.word	0x080016b1
 800168c:	080016e9 	.word	0x080016e9
 8001690:	0800173d 	.word	0x0800173d
 8001694:	08001765 	.word	0x08001765
 8001698:	08001787 	.word	0x08001787
 800169c:	080017af 	.word	0x080017af
 80016a0:	080017fb 	.word	0x080017fb
 80016a4:	080017d1 	.word	0x080017d1
 80016a8:	080017fb 	.word	0x080017fb
 80016ac:	080017e1 	.word	0x080017e1
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7fe fdfd 	bl	80002b0 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d913      	bls.n	80016e4 <set_gps+0x84>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b47      	cmp	r3, #71	@ 0x47
 80016c2:	d10f      	bne.n	80016e4 <set_gps+0x84>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3302      	adds	r3, #2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b47      	cmp	r3, #71	@ 0x47
 80016cc:	d10a      	bne.n	80016e4 <set_gps+0x84>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3303      	adds	r3, #3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b47      	cmp	r3, #71	@ 0x47
 80016d6:	d105      	bne.n	80016e4 <set_gps+0x84>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3304      	adds	r3, #4
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b41      	cmp	r3, #65	@ 0x41
 80016e0:	f000 808d 	beq.w	80017fe <set_gps+0x19e>
			return 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e090      	b.n	800180a <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 f932 	bl	800895e <atoi>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b45      	ldr	r3, [pc, #276]	@ (8001814 <set_gps+0x1b4>)
 8001700:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3302      	adds	r3, #2
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4618      	mov	r0, r3
 8001712:	f007 f924 	bl	800895e <atoi>
 8001716:	4603      	mov	r3, r0
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b3f      	ldr	r3, [pc, #252]	@ (8001818 <set_gps+0x1b8>)
 800171c:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3304      	adds	r3, #4
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4618      	mov	r0, r3
 800172e:	f007 f916 	bl	800895e <atoi>
 8001732:	4603      	mov	r3, r0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <set_gps+0x1bc>)
 8001738:	701a      	strb	r2, [r3, #0]

		break;
 800173a:	e065      	b.n	8001808 <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f007 f90b 	bl	8008958 <atof>
 8001742:	ec51 0b10 	vmov	r0, r1, d0
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <set_gps+0x1c0>)
 800174c:	f7ff f89e 	bl	800088c <__aeabi_ddiv>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa66 	bl	8000c28 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a31      	ldr	r2, [pc, #196]	@ (8001824 <set_gps+0x1c4>)
 8001760:	6013      	str	r3, [r2, #0]
		break;
 8001762:	e051      	b.n	8001808 <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b2f      	ldr	r3, [pc, #188]	@ (8001828 <set_gps+0x1c8>)
 800176a:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <set_gps+0x1c8>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b53      	cmp	r3, #83	@ 0x53
 8001772:	d146      	bne.n	8001802 <set_gps+0x1a2>
			gps_latitude*= -1;
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <set_gps+0x1c4>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eef1 7a67 	vneg.f32	s15, s15
 800177e:	4b29      	ldr	r3, [pc, #164]	@ (8001824 <set_gps+0x1c4>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8001784:	e03d      	b.n	8001802 <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f007 f8e6 	bl	8008958 <atof>
 800178c:	ec51 0b10 	vmov	r0, r1, d0
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <set_gps+0x1c0>)
 8001796:	f7ff f879 	bl	800088c <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff fa41 	bl	8000c28 <__aeabi_d2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a20      	ldr	r2, [pc, #128]	@ (800182c <set_gps+0x1cc>)
 80017aa:	6013      	str	r3, [r2, #0]
		break;
 80017ac:	e02c      	b.n	8001808 <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <set_gps+0x1d0>)
 80017b4:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <set_gps+0x1d0>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b57      	cmp	r3, #87	@ 0x57
 80017bc:	d123      	bne.n	8001806 <set_gps+0x1a6>
			gps_longitude*= -1;
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <set_gps+0x1cc>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eef1 7a67 	vneg.f32	s15, s15
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <set_gps+0x1cc>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80017ce:	e01a      	b.n	8001806 <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f007 f8c4 	bl	800895e <atoi>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <set_gps+0x1d4>)
 80017dc:	701a      	strb	r2, [r3, #0]
		break;
 80017de:	e013      	b.n	8001808 <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f007 f8b9 	bl	8008958 <atof>
 80017e6:	ec53 2b10 	vmov	r2, r3, d0
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa1b 	bl	8000c28 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <set_gps+0x1d8>)
 80017f6:	6013      	str	r3, [r2, #0]
		break;
 80017f8:	e006      	b.n	8001808 <set_gps+0x1a8>
	default:
		break;
 80017fa:	bf00      	nop
 80017fc:	e004      	b.n	8001808 <set_gps+0x1a8>
		break;
 80017fe:	bf00      	nop
 8001800:	e002      	b.n	8001808 <set_gps+0x1a8>
		break;
 8001802:	bf00      	nop
 8001804:	e000      	b.n	8001808 <set_gps+0x1a8>
		break;
 8001806:	bf00      	nop
	}

	return 0;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000634 	.word	0x20000634
 8001818:	20000635 	.word	0x20000635
 800181c:	20000636 	.word	0x20000636
 8001820:	40590000 	.word	0x40590000
 8001824:	2000063c 	.word	0x2000063c
 8001828:	20000847 	.word	0x20000847
 800182c:	20000640 	.word	0x20000640
 8001830:	20000848 	.word	0x20000848
 8001834:	20000644 	.word	0x20000644
 8001838:	20000638 	.word	0x20000638

0800183c <parse_nmea>:

bool parse_nmea(char *buf){
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
 8001850:	e032      	b.n	80018b8 <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b2c      	cmp	r3, #44	@ 0x2c
 800185c:	d123      	bne.n	80018a6 <parse_nmea+0x6a>
			if (last != i){
 800185e:	7bba      	ldrb	r2, [r7, #14]
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	429a      	cmp	r2, r3
 8001864:	d018      	beq.n	8001898 <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 8001866:	22ff      	movs	r2, #255	@ 0xff
 8001868:	2100      	movs	r1, #0
 800186a:	4818      	ldr	r0, [pc, #96]	@ (80018cc <parse_nmea+0x90>)
 800186c:	f008 fca1 	bl	800a1b2 <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	18d1      	adds	r1, r2, r3
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	461a      	mov	r2, r3
 800187e:	4813      	ldr	r0, [pc, #76]	@ (80018cc <parse_nmea+0x90>)
 8001880:	f008 fd53 	bl	800a32a <memcpy>
				if(set_gps(parse_buf, order)){
 8001884:	7b7b      	ldrb	r3, [r7, #13]
 8001886:	4619      	mov	r1, r3
 8001888:	4810      	ldr	r0, [pc, #64]	@ (80018cc <parse_nmea+0x90>)
 800188a:	f7ff fee9 	bl	8001660 <set_gps>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <parse_nmea+0x5c>
					return false;
 8001894:	2300      	movs	r3, #0
 8001896:	e015      	b.n	80018c4 <parse_nmea+0x88>
				}
			}
			last = i + 1;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	3301      	adds	r3, #1
 800189c:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 800189e:	7b7b      	ldrb	r3, [r7, #13]
 80018a0:	3301      	adds	r3, #1
 80018a2:	737b      	strb	r3, [r7, #13]
 80018a4:	e005      	b.n	80018b2 <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80018b0:	d006      	beq.n	80018c0 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	3301      	adds	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2bff      	cmp	r3, #255	@ 0xff
 80018bc:	d1c9      	bne.n	8001852 <parse_nmea+0x16>
 80018be:	e000      	b.n	80018c2 <parse_nmea+0x86>
			break;
 80018c0:	bf00      	nop
		}
	}

	return true;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000748 	.word	0x20000748

080018d0 <calculate_altitude>:

float calculate_altitude(float pressure) {
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe54 	bl	8000588 <__aeabi_f2d>
 80018e0:	a323      	add	r3, pc, #140	@ (adr r3, 8001970 <calculate_altitude+0xa0>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe ffd1 	bl	800088c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f999 	bl	8000c28 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001968 <calculate_altitude+0x98>
 80018fc:	ee00 3a10 	vmov	s0, r3
 8001900:	f00b f9ce 	bl	800cca0 <powf>
 8001904:	eef0 7a40 	vmov.f32	s15, s0
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001910:	ee17 0a90 	vmov	r0, s15
 8001914:	f7fe fe38 	bl	8000588 <__aeabi_f2d>
 8001918:	a311      	add	r3, pc, #68	@ (adr r3, 8001960 <calculate_altitude+0x90>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe8b 	bl	8000638 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4614      	mov	r4, r2
 8001928:	461d      	mov	r5, r3
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <calculate_altitude+0x9c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fcc6 	bl	80002cc <__adddf3>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f96e 	bl	8000c28 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	ee07 3a90 	vmov	s15, r3
}
 8001952:	eeb0 0a67 	vmov.f32	s0, s15
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	f3af 8000 	nop.w
 8001960:	a3d70a3d 	.word	0xa3d70a3d
 8001964:	40e5a558 	.word	0x40e5a558
 8001968:	3e42d45b 	.word	0x3e42d45b
 800196c:	20000974 	.word	0x20000974
 8001970:	2f1a9fbe 	.word	0x2f1a9fbe
 8001974:	405954dd 	.word	0x405954dd

08001978 <read_MMC5603>:

void read_MMC5603(void) {
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	result = HAL_I2C_Master_Transmit(&hi2c1, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY);
 8001982:	1dfa      	adds	r2, r7, #7
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	2160      	movs	r1, #96	@ 0x60
 800198e:	4884      	ldr	r0, [pc, #528]	@ (8001ba0 <read_MMC5603+0x228>)
 8001990:	f002 ffc4 	bl	800491c <HAL_I2C_Master_Transmit>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b82      	ldr	r3, [pc, #520]	@ (8001ba4 <read_MMC5603+0x22c>)
 800199a:	701a      	strb	r2, [r3, #0]
	if (result != HAL_OK) {
 800199c:	4b81      	ldr	r3, [pc, #516]	@ (8001ba4 <read_MMC5603+0x22c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f040 80ed 	bne.w	8001b80 <read_MMC5603+0x208>
	}

//	HAL_Delay(10);

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c1, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 80019a6:	f107 0208 	add.w	r2, r7, #8
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2309      	movs	r3, #9
 80019b2:	2160      	movs	r1, #96	@ 0x60
 80019b4:	487a      	ldr	r0, [pc, #488]	@ (8001ba0 <read_MMC5603+0x228>)
 80019b6:	f003 f8af 	bl	8004b18 <HAL_I2C_Master_Receive>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 80e1 	bne.w	8001b84 <read_MMC5603+0x20c>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 80019c2:	7a3b      	ldrb	r3, [r7, #8]
 80019c4:	031a      	lsls	r2, r3, #12
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4313      	orrs	r3, r2
 80019cc:	7bba      	ldrb	r2, [r7, #14]
 80019ce:	0912      	lsrs	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 80019d6:	7abb      	ldrb	r3, [r7, #10]
 80019d8:	031a      	lsls	r2, r3, #12
 80019da:	7afb      	ldrb	r3, [r7, #11]
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	4313      	orrs	r3, r2
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	0912      	lsrs	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	031a      	lsls	r2, r3, #12
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	4313      	orrs	r3, r2
 80019f4:	7c3a      	ldrb	r2, [r7, #16]
 80019f6:	0912      	lsrs	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8001a04:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8001a0c:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8001a14:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625 - mag_x_offset;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a20:	ee17 0a90 	vmov	r0, s15
 8001a24:	f7fe fdb0 	bl	8000588 <__aeabi_f2d>
 8001a28:	a359      	add	r3, pc, #356	@ (adr r3, 8001b90 <read_MMC5603+0x218>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fe03 	bl	8000638 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	461d      	mov	r5, r3
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba8 <read_MMC5603+0x230>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fda2 	bl	8000588 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fc3c 	bl	80002c8 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f8e6 	bl	8000c28 <__aeabi_d2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a53      	ldr	r2, [pc, #332]	@ (8001bac <read_MMC5603+0x234>)
 8001a60:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625 - mag_y_offset;
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ee17 0a90 	vmov	r0, s15
 8001a70:	f7fe fd8a 	bl	8000588 <__aeabi_f2d>
 8001a74:	a346      	add	r3, pc, #280	@ (adr r3, 8001b90 <read_MMC5603+0x218>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fddd 	bl	8000638 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb0 <read_MMC5603+0x238>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd7c 	bl	8000588 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc16 	bl	80002c8 <__aeabi_dsub>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8c0 	bl	8000c28 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a42      	ldr	r2, [pc, #264]	@ (8001bb4 <read_MMC5603+0x23c>)
 8001aac:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625 - mag_z_offset;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd64 	bl	8000588 <__aeabi_f2d>
 8001ac0:	a333      	add	r3, pc, #204	@ (adr r3, 8001b90 <read_MMC5603+0x218>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fdb7 	bl	8000638 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <read_MMC5603+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd56 	bl	8000588 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	f7fe fbf0 	bl	80002c8 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f89a 	bl	8000c28 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a31      	ldr	r2, [pc, #196]	@ (8001bbc <read_MMC5603+0x244>)
 8001af8:	6013      	str	r3, [r2, #0]

	direction = atan2(mag_y, mag_x) * 180 / PI;
 8001afa:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <read_MMC5603+0x23c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd42 	bl	8000588 <__aeabi_f2d>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <read_MMC5603+0x234>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	ec43 2b11 	vmov	d1, r2, r3
 8001b1a:	ec45 4b10 	vmov	d0, r4, r5
 8001b1e:	f00b f8bd 	bl	800cc9c <atan2>
 8001b22:	ec51 0b10 	vmov	r0, r1, d0
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b25      	ldr	r3, [pc, #148]	@ (8001bc0 <read_MMC5603+0x248>)
 8001b2c:	f7fe fd84 	bl	8000638 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	a317      	add	r3, pc, #92	@ (adr r3, 8001b98 <read_MMC5603+0x220>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fea5 	bl	800088c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	491f      	ldr	r1, [pc, #124]	@ (8001bc4 <read_MMC5603+0x24c>)
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]
	if (direction < 0){
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <read_MMC5603+0x24c>)
 8001b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	f7fe ffdf 	bl	8000b1c <__aeabi_dcmplt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <read_MMC5603+0x20e>
		direction += 360;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <read_MMC5603+0x24c>)
 8001b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <read_MMC5603+0x250>)
 8001b70:	f7fe fbac 	bl	80002cc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4912      	ldr	r1, [pc, #72]	@ (8001bc4 <read_MMC5603+0x24c>)
 8001b7a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b7e:	e002      	b.n	8001b86 <read_MMC5603+0x20e>
		return;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <read_MMC5603+0x20e>
		return;
 8001b84:	bf00      	nop
	}
}
 8001b86:	3720      	adds	r7, #32
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8c:	f3af 8000 	nop.w
 8001b90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b94:	3f10624d 	.word	0x3f10624d
 8001b98:	fc8b007a 	.word	0xfc8b007a
 8001b9c:	400921fa 	.word	0x400921fa
 8001ba0:	200004bc 	.word	0x200004bc
 8001ba4:	20000a84 	.word	0x20000a84
 8001ba8:	20000958 	.word	0x20000958
 8001bac:	20000624 	.word	0x20000624
 8001bb0:	2000095c 	.word	0x2000095c
 8001bb4:	20000628 	.word	0x20000628
 8001bb8:	20000960 	.word	0x20000960
 8001bbc:	2000062c 	.word	0x2000062c
 8001bc0:	40668000 	.word	0x40668000
 8001bc4:	20000858 	.word	0x20000858
 8001bc8:	40768000 	.word	0x40768000

08001bcc <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd6:	9302      	str	r3, [sp, #8]
 8001bd8:	2309      	movs	r3, #9
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	2201      	movs	r2, #1
 8001be4:	21c0      	movs	r1, #192	@ 0xc0
 8001be6:	482b      	ldr	r0, [pc, #172]	@ (8001c94 <read_MPL3115A2+0xc8>)
 8001be8:	f003 fac2 	bl	8005170 <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8001bec:	793b      	ldrb	r3, [r7, #4]
 8001bee:	041a      	lsls	r2, r3, #16
 8001bf0:	797b      	ldrb	r3, [r7, #5]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	79ba      	ldrb	r2, [r7, #6]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7fe fc9e 	bl	8000544 <__aeabi_ui2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <read_MPL3115A2+0xcc>)
 8001c0e:	f7fe fe3d 	bl	800088c <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <read_MPL3115A2+0xd0>)
 8001c20:	f7fe fe34 	bl	800088c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe fffc 	bl	8000c28 <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca0 <read_MPL3115A2+0xd4>)
 8001c34:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8001c44:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c48:	111b      	asrs	r3, r3, #4
 8001c4a:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8001c4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc87 	bl	8000564 <__aeabi_i2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4b12      	ldr	r3, [pc, #72]	@ (8001ca4 <read_MPL3115A2+0xd8>)
 8001c5c:	f7fe fe16 	bl	800088c <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ffde 	bl	8000c28 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <read_MPL3115A2+0xdc>)
 8001c70:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 8001c72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <read_MPL3115A2+0xd4>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	f7ff fe28 	bl	80018d0 <calculate_altitude>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <read_MPL3115A2+0xe0>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200004bc 	.word	0x200004bc
 8001c98:	40100000 	.word	0x40100000
 8001c9c:	408f4000 	.word	0x408f4000
 8001ca0:	20000604 	.word	0x20000604
 8001ca4:	40300000 	.word	0x40300000
 8001ca8:	20000600 	.word	0x20000600
 8001cac:	200005fc 	.word	0x200005fc

08001cb0 <read_MPU6050>:

void read_MPU6050(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8001cb6:	233b      	movs	r3, #59	@ 0x3b
 8001cb8:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 8001cba:	2343      	movs	r3, #67	@ 0x43
 8001cbc:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDRESS, 3, 5);
 8001cca:	2305      	movs	r3, #5
 8001ccc:	2203      	movs	r2, #3
 8001cce:	21d0      	movs	r1, #208	@ 0xd0
 8001cd0:	4871      	ldr	r0, [pc, #452]	@ (8001e98 <read_MPU6050+0x1e8>)
 8001cd2:	f003 fc7f 	bl	80055d4 <HAL_I2C_IsDeviceReady>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 8001cda:	7c7b      	ldrb	r3, [r7, #17]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f040 80d2 	bne.w	8001e86 <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &imu_addr, 1, 100);
 8001ce2:	f107 0209 	add.w	r2, r7, #9
 8001ce6:	2364      	movs	r3, #100	@ 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	21d0      	movs	r1, #208	@ 0xd0
 8001cee:	486a      	ldr	r0, [pc, #424]	@ (8001e98 <read_MPU6050+0x1e8>)
 8001cf0:	f002 fe14 	bl	800491c <HAL_I2C_Master_Transmit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8001cf8:	7c7b      	ldrb	r3, [r7, #17]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d15a      	bne.n	8001db4 <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8001cfe:	463a      	mov	r2, r7
 8001d00:	2364      	movs	r3, #100	@ 0x64
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2306      	movs	r3, #6
 8001d06:	21d0      	movs	r1, #208	@ 0xd0
 8001d08:	4863      	ldr	r0, [pc, #396]	@ (8001e98 <read_MPU6050+0x1e8>)
 8001d0a:	f002 ff05 	bl	8004b18 <HAL_I2C_Master_Receive>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 8001d12:	7c7b      	ldrb	r3, [r7, #17]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d14d      	bne.n	8001db4 <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 8001d18:	783b      	ldrb	r3, [r7, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	787b      	ldrb	r3, [r7, #1]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 8001d26:	78bb      	ldrb	r3, [r7, #2]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 8001d34:	793b      	ldrb	r3, [r7, #4]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	797b      	ldrb	r3, [r7, #5]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 8001d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc0c 	bl	8000564 <__aeabi_i2d>
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b52      	ldr	r3, [pc, #328]	@ (8001e9c <read_MPU6050+0x1ec>)
 8001d52:	f7fe fd9b 	bl	800088c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe ff63 	bl	8000c28 <__aeabi_d2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea0 <read_MPU6050+0x1f0>)
 8001d66:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 8001d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf9 	bl	8000564 <__aeabi_i2d>
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	4b49      	ldr	r3, [pc, #292]	@ (8001e9c <read_MPU6050+0x1ec>)
 8001d78:	f7fe fd88 	bl	800088c <__aeabi_ddiv>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe ff50 	bl	8000c28 <__aeabi_d2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a46      	ldr	r2, [pc, #280]	@ (8001ea4 <read_MPU6050+0x1f4>)
 8001d8c:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 8001d8e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbe6 	bl	8000564 <__aeabi_i2d>
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <read_MPU6050+0x1ec>)
 8001d9e:	f7fe fd75 	bl	800088c <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe ff3d 	bl	8000c28 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea8 <read_MPU6050+0x1f8>)
 8001db2:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 8001db4:	f107 0208 	add.w	r2, r7, #8
 8001db8:	2364      	movs	r3, #100	@ 0x64
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	21d0      	movs	r1, #208	@ 0xd0
 8001dc0:	4835      	ldr	r0, [pc, #212]	@ (8001e98 <read_MPU6050+0x1e8>)
 8001dc2:	f002 fdab 	bl	800491c <HAL_I2C_Master_Transmit>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8001dca:	7c7b      	ldrb	r3, [r7, #17]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d15a      	bne.n	8001e86 <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8001dd0:	463a      	mov	r2, r7
 8001dd2:	2364      	movs	r3, #100	@ 0x64
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	21d0      	movs	r1, #208	@ 0xd0
 8001dda:	482f      	ldr	r0, [pc, #188]	@ (8001e98 <read_MPU6050+0x1e8>)
 8001ddc:	f002 fe9c 	bl	8004b18 <HAL_I2C_Master_Receive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 8001de4:	7c7b      	ldrb	r3, [r7, #17]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d14d      	bne.n	8001e86 <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 8001dea:	783b      	ldrb	r3, [r7, #0]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	b21b      	sxth	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	021b      	lsls	r3, r3, #8
 8001dfc:	b21a      	sxth	r2, r3
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	4313      	orrs	r3, r2
 8001e04:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 8001e06:	793b      	ldrb	r3, [r7, #4]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	b21b      	sxth	r3, r3
 8001e10:	4313      	orrs	r3, r2
 8001e12:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 8001e14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fba3 	bl	8000564 <__aeabi_i2d>
 8001e1e:	a31c      	add	r3, pc, #112	@ (adr r3, 8001e90 <read_MPU6050+0x1e0>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fd32 	bl	800088c <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fefa 	bl	8000c28 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <read_MPU6050+0x1fc>)
 8001e38:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 8001e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb90 	bl	8000564 <__aeabi_i2d>
 8001e44:	a312      	add	r3, pc, #72	@ (adr r3, 8001e90 <read_MPU6050+0x1e0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fd1f 	bl	800088c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fee7 	bl	8000c28 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <read_MPU6050+0x200>)
 8001e5e:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 8001e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb7d 	bl	8000564 <__aeabi_i2d>
 8001e6a:	a309      	add	r3, pc, #36	@ (adr r3, 8001e90 <read_MPU6050+0x1e0>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fd0c 	bl	800088c <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fed4 	bl	8000c28 <__aeabi_d2f>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <read_MPU6050+0x204>)
 8001e84:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40606000 	.word	0x40606000
 8001e98:	200004bc 	.word	0x200004bc
 8001e9c:	40d00000 	.word	0x40d00000
 8001ea0:	20000618 	.word	0x20000618
 8001ea4:	2000061c 	.word	0x2000061c
 8001ea8:	20000620 	.word	0x20000620
 8001eac:	2000060c 	.word	0x2000060c
 8001eb0:	20000610 	.word	0x20000610
 8001eb4:	20000614 	.word	0x20000614

08001eb8 <read_PA1010D>:

bool read_PA1010D()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af02      	add	r7, sp, #8
	uint8_t pa_buf_index = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t pa_bytebuf = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	717b      	strb	r3, [r7, #5]
    bool ret = false;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	71bb      	strb	r3, [r7, #6]

	/* PA1010D (GPS) */
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, HAL_MAX_DELAY) == HAL_OK){
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	2203      	movs	r2, #3
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	4815      	ldr	r0, [pc, #84]	@ (8001f28 <read_PA1010D+0x70>)
 8001ed4:	f003 fb7e 	bl	80055d4 <HAL_I2C_IsDeviceReady>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11e      	bne.n	8001f1c <read_PA1010D+0x64>
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 8001ede:	2300      	movs	r3, #0
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	e015      	b.n	8001f10 <read_PA1010D+0x58>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa_bytebuf, 1, HAL_MAX_DELAY);
 8001ee4:	1d7a      	adds	r2, r7, #5
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2301      	movs	r3, #1
 8001eee:	2120      	movs	r1, #32
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <read_PA1010D+0x70>)
 8001ef2:	f002 fe11 	bl	8004b18 <HAL_I2C_Master_Receive>
			if (pa_bytebuf == '$'){
 8001ef6:	797b      	ldrb	r3, [r7, #5]
 8001ef8:	2b24      	cmp	r3, #36	@ 0x24
 8001efa:	d102      	bne.n	8001f02 <read_PA1010D+0x4a>
				ret = true;
 8001efc:	2301      	movs	r3, #1
 8001efe:	71bb      	strb	r3, [r7, #6]
				break; // Idea: take away break statement and see what the whole sentence looks like
 8001f00:	e009      	b.n	8001f16 <read_PA1010D+0x5e>
			}
			pa_buf[pa_buf_index] = pa_bytebuf;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	7979      	ldrb	r1, [r7, #5]
 8001f06:	4a09      	ldr	r2, [pc, #36]	@ (8001f2c <read_PA1010D+0x74>)
 8001f08:	54d1      	strb	r1, [r2, r3]
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d1e6      	bne.n	8001ee4 <read_PA1010D+0x2c>
		}
		parse_nmea(pa_buf);
 8001f16:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <read_PA1010D+0x74>)
 8001f18:	f7ff fc90 	bl	800183c <parse_nmea>
	}
	return ret;
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200004bc 	.word	0x200004bc
 8001f2c:	20000648 	.word	0x20000648

08001f30 <flush_PA1010D>:

void flush_PA1010D(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	while(read_PA1010D());
 8001f34:	bf00      	nop
 8001f36:	f7ff ffbf 	bl	8001eb8 <read_PA1010D>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1fa      	bne.n	8001f36 <flush_PA1010D+0x6>
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <calibrate_mmc>:

	}

}

void calibrate_mmc(){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	read_MMC5603();
 8001f4c:	f7ff fd14 	bl	8001978 <read_MMC5603>
	if (mag_x < mag_x_min){
 8001f50:	4b44      	ldr	r3, [pc, #272]	@ (8002064 <calibrate_mmc+0x11c>)
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	4b44      	ldr	r3, [pc, #272]	@ (8002068 <calibrate_mmc+0x120>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d503      	bpl.n	8001f6e <calibrate_mmc+0x26>
		mag_x_min = mag_x;
 8001f66:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <calibrate_mmc+0x11c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002068 <calibrate_mmc+0x120>)
 8001f6c:	6013      	str	r3, [r2, #0]
	}
	if (mag_x > mag_x_max){
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002064 <calibrate_mmc+0x11c>)
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	4b3d      	ldr	r3, [pc, #244]	@ (800206c <calibrate_mmc+0x124>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	dd03      	ble.n	8001f8c <calibrate_mmc+0x44>
		mag_x_max = mag_x;
 8001f84:	4b37      	ldr	r3, [pc, #220]	@ (8002064 <calibrate_mmc+0x11c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a38      	ldr	r2, [pc, #224]	@ (800206c <calibrate_mmc+0x124>)
 8001f8a:	6013      	str	r3, [r2, #0]
	}
	if (mag_y < mag_y_min){
 8001f8c:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <calibrate_mmc+0x128>)
 8001f8e:	ed93 7a00 	vldr	s14, [r3]
 8001f92:	4b38      	ldr	r3, [pc, #224]	@ (8002074 <calibrate_mmc+0x12c>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	d503      	bpl.n	8001faa <calibrate_mmc+0x62>
		mag_y_min = mag_y;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <calibrate_mmc+0x128>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <calibrate_mmc+0x12c>)
 8001fa8:	6013      	str	r3, [r2, #0]
	}
	if (mag_y > mag_y_max){
 8001faa:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <calibrate_mmc+0x128>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <calibrate_mmc+0x130>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbe:	dd03      	ble.n	8001fc8 <calibrate_mmc+0x80>
		mag_y_max = mag_y;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <calibrate_mmc+0x128>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <calibrate_mmc+0x130>)
 8001fc6:	6013      	str	r3, [r2, #0]
	}
	if (mag_z < mag_z_min){
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <calibrate_mmc+0x134>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <calibrate_mmc+0x138>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	d503      	bpl.n	8001fe6 <calibrate_mmc+0x9e>
		mag_z_min = mag_z;
 8001fde:	4b27      	ldr	r3, [pc, #156]	@ (800207c <calibrate_mmc+0x134>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <calibrate_mmc+0x138>)
 8001fe4:	6013      	str	r3, [r2, #0]
	}
	if (mag_z > mag_z_max){
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <calibrate_mmc+0x134>)
 8001fe8:	ed93 7a00 	vldr	s14, [r3]
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <calibrate_mmc+0x13c>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	dd03      	ble.n	8002004 <calibrate_mmc+0xbc>
		mag_z_max = mag_z;
 8001ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <calibrate_mmc+0x134>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <calibrate_mmc+0x13c>)
 8002002:	6013      	str	r3, [r2, #0]
	}

	mag_x_offset = (mag_x_min + mag_x_max) / 2;
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <calibrate_mmc+0x120>)
 8002006:	ed93 7a00 	vldr	s14, [r3]
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <calibrate_mmc+0x124>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002014:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201c:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <calibrate_mmc+0x140>)
 800201e:	edc3 7a00 	vstr	s15, [r3]
	mag_y_offset = (mag_y_min + mag_y_max) / 2;
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <calibrate_mmc+0x12c>)
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <calibrate_mmc+0x130>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002032:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203a:	4b14      	ldr	r3, [pc, #80]	@ (800208c <calibrate_mmc+0x144>)
 800203c:	edc3 7a00 	vstr	s15, [r3]
	mag_z_offset = (mag_z_min + mag_z_max) / 2;
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <calibrate_mmc+0x138>)
 8002042:	ed93 7a00 	vldr	s14, [r3]
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <calibrate_mmc+0x13c>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002050:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <calibrate_mmc+0x148>)
 800205a:	edc3 7a00 	vstr	s15, [r3]
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000624 	.word	0x20000624
 8002068:	20000964 	.word	0x20000964
 800206c:	20000970 	.word	0x20000970
 8002070:	20000628 	.word	0x20000628
 8002074:	20000968 	.word	0x20000968
 8002078:	200000a0 	.word	0x200000a0
 800207c:	2000062c 	.word	0x2000062c
 8002080:	2000096c 	.word	0x2000096c
 8002084:	200000a4 	.word	0x200000a4
 8002088:	20000958 	.word	0x20000958
 800208c:	2000095c 	.word	0x2000095c
 8002090:	20000960 	.word	0x20000960

08002094 <init_MMC5603>:

// Sensor Init Functions -------------------------------------------------------------------
void init_MMC5603(void) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 800209a:	2364      	movs	r3, #100	@ 0x64
 800209c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 80020a6:	2310      	movs	r3, #16
 80020a8:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	2301      	movs	r3, #1
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	1d7b      	adds	r3, r7, #5
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	221c      	movs	r2, #28
 80020bc:	2160      	movs	r1, #96	@ 0x60
 80020be:	482f      	ldr	r0, [pc, #188]	@ (800217c <init_MMC5603+0xe8>)
 80020c0:	f002 ff5c 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80020c4:	2014      	movs	r0, #20
 80020c6:	f001 fd55 	bl	8003b74 <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 80020ca:	2308      	movs	r3, #8
 80020cc:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2301      	movs	r3, #1
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	1cfb      	adds	r3, r7, #3
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2301      	movs	r3, #1
 80020de:	221b      	movs	r2, #27
 80020e0:	2160      	movs	r1, #96	@ 0x60
 80020e2:	4826      	ldr	r0, [pc, #152]	@ (800217c <init_MMC5603+0xe8>)
 80020e4:	f002 ff4a 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f001 fd43 	bl	8003b74 <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 80020ee:	2310      	movs	r3, #16
 80020f0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	1cbb      	adds	r3, r7, #2
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	221b      	movs	r2, #27
 8002104:	2160      	movs	r1, #96	@ 0x60
 8002106:	481d      	ldr	r0, [pc, #116]	@ (800217c <init_MMC5603+0xe8>)
 8002108:	f002 ff38 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 800210c:	2001      	movs	r0, #1
 800210e:	f001 fd31 	bl	8003b74 <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2301      	movs	r3, #1
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	1dfb      	adds	r3, r7, #7
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2301      	movs	r3, #1
 8002122:	221a      	movs	r2, #26
 8002124:	2160      	movs	r1, #96	@ 0x60
 8002126:	4815      	ldr	r0, [pc, #84]	@ (800217c <init_MMC5603+0xe8>)
 8002128:	f002 ff28 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800212c:	200a      	movs	r0, #10
 800212e:	f001 fd21 	bl	8003b74 <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2301      	movs	r3, #1
 8002142:	221b      	movs	r2, #27
 8002144:	2160      	movs	r1, #96	@ 0x60
 8002146:	480d      	ldr	r0, [pc, #52]	@ (800217c <init_MMC5603+0xe8>)
 8002148:	f002 ff18 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800214c:	200a      	movs	r0, #10
 800214e:	f001 fd11 	bl	8003b74 <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2301      	movs	r3, #1
 8002162:	221d      	movs	r2, #29
 8002164:	2160      	movs	r1, #96	@ 0x60
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <init_MMC5603+0xe8>)
 8002168:	f002 ff08 	bl	8004f7c <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 800216c:	200a      	movs	r0, #10
 800216e:	f001 fd01 	bl	8003b74 <HAL_Delay>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200004bc 	.word	0x200004bc

08002180 <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	9302      	str	r3, [sp, #8]
 8002190:	2301      	movs	r3, #1
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	220c      	movs	r2, #12
 800219c:	21c0      	movs	r1, #192	@ 0xc0
 800219e:	480c      	ldr	r0, [pc, #48]	@ (80021d0 <init_MPL3115A2+0x50>)
 80021a0:	f002 ffe6 	bl	8005170 <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	2bc4      	cmp	r3, #196	@ 0xc4
 80021a8:	d10e      	bne.n	80021c8 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 80021aa:	2339      	movs	r3, #57	@ 0x39
 80021ac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	2301      	movs	r3, #1
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	2226      	movs	r2, #38	@ 0x26
 80021c0:	21c0      	movs	r1, #192	@ 0xc0
 80021c2:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <init_MPL3115A2+0x50>)
 80021c4:	f002 feda 	bl	8004f7c <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200004bc 	.word	0x200004bc

080021d4 <init_MPU6050>:

void init_MPU6050(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 80021de:	2307      	movs	r3, #7
 80021e0:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 80021e2:	2300      	movs	r3, #0
 80021e4:	717b      	strb	r3, [r7, #5]
	uint8_t clockSource = 0x01;
 80021e6:	2301      	movs	r3, #1
 80021e8:	713b      	strb	r3, [r7, #4]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 80021ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	2301      	movs	r3, #1
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2301      	movs	r3, #1
 80021fa:	226b      	movs	r2, #107	@ 0x6b
 80021fc:	21d0      	movs	r1, #208	@ 0xd0
 80021fe:	481d      	ldr	r0, [pc, #116]	@ (8002274 <init_MPU6050+0xa0>)
 8002200:	f002 febc 	bl	8004f7c <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 8002204:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2301      	movs	r3, #1
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	2219      	movs	r2, #25
 8002216:	21d0      	movs	r1, #208	@ 0xd0
 8002218:	4816      	ldr	r0, [pc, #88]	@ (8002274 <init_MPU6050+0xa0>)
 800221a:	f002 feaf 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 800221e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002222:	9302      	str	r3, [sp, #8]
 8002224:	2301      	movs	r3, #1
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	1d7b      	adds	r3, r7, #5
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2301      	movs	r3, #1
 800222e:	221b      	movs	r2, #27
 8002230:	21d0      	movs	r1, #208	@ 0xd0
 8002232:	4810      	ldr	r0, [pc, #64]	@ (8002274 <init_MPU6050+0xa0>)
 8002234:	f002 fea2 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 8002238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2301      	movs	r3, #1
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	1d7b      	adds	r3, r7, #5
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2301      	movs	r3, #1
 8002248:	221c      	movs	r2, #28
 800224a:	21d0      	movs	r1, #208	@ 0xd0
 800224c:	4809      	ldr	r0, [pc, #36]	@ (8002274 <init_MPU6050+0xa0>)
 800224e:	f002 fe95 	bl	8004f7c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, I2C_MEMADD_SIZE_8BIT, &clockSource, 1, HAL_MAX_DELAY);
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	226b      	movs	r2, #107	@ 0x6b
 8002264:	21d0      	movs	r1, #208	@ 0xd0
 8002266:	4803      	ldr	r0, [pc, #12]	@ (8002274 <init_MPU6050+0xa0>)
 8002268:	f002 fe88 	bl	8004f7c <HAL_I2C_Mem_Write>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200004bc 	.word	0x200004bc

08002278 <init_PA1010D>:

void init_PA1010D(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af02      	add	r7, sp, #8
	uint8_t pa1010d_bytebuf;

	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 800227e:	4827      	ldr	r0, [pc, #156]	@ (800231c <init_PA1010D+0xa4>)
 8002280:	f7fe f816 	bl	80002b0 <strlen>
 8002284:	4603      	mov	r3, r0
 8002286:	b29b      	uxth	r3, r3
 8002288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	4a23      	ldr	r2, [pc, #140]	@ (800231c <init_PA1010D+0xa4>)
 8002290:	2120      	movs	r1, #32
 8002292:	4823      	ldr	r0, [pc, #140]	@ (8002320 <init_PA1010D+0xa8>)
 8002294:	f002 fb42 	bl	800491c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
 8002298:	4822      	ldr	r0, [pc, #136]	@ (8002324 <init_PA1010D+0xac>)
 800229a:	f7fe f809 	bl	80002b0 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <init_PA1010D+0xac>)
 80022aa:	2120      	movs	r1, #32
 80022ac:	481c      	ldr	r0, [pc, #112]	@ (8002320 <init_PA1010D+0xa8>)
 80022ae:	f002 fb35 	bl	800491c <HAL_I2C_Master_Transmit>
//	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);

//	HAL_Delay(10000);
	//Wait for stabilization
	for(int j=0; j<10; j++){
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e029      	b.n	800230c <init_PA1010D+0x94>
		for(int i=0; i<255; i++){
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	e014      	b.n	80022e8 <init_PA1010D+0x70>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
 80022be:	1dfa      	adds	r2, r7, #7
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2301      	movs	r3, #1
 80022c8:	2120      	movs	r1, #32
 80022ca:	4815      	ldr	r0, [pc, #84]	@ (8002320 <init_PA1010D+0xa8>)
 80022cc:	f002 fc24 	bl	8004b18 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	2b24      	cmp	r3, #36	@ 0x24
 80022d4:	d00c      	beq.n	80022f0 <init_PA1010D+0x78>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 80022d6:	79f9      	ldrb	r1, [r7, #7]
 80022d8:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <init_PA1010D+0xb0>)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	460a      	mov	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80022ec:	dde7      	ble.n	80022be <init_PA1010D+0x46>
 80022ee:	e000      	b.n	80022f2 <init_PA1010D+0x7a>
				break;
 80022f0:	bf00      	nop
		}
		if (j>5){
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	dd02      	ble.n	80022fe <init_PA1010D+0x86>
			parse_nmea(pa_buf);
 80022f8:	480b      	ldr	r0, [pc, #44]	@ (8002328 <init_PA1010D+0xb0>)
 80022fa:	f7ff fa9f 	bl	800183c <parse_nmea>
		}
		HAL_Delay(500);
 80022fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002302:	f001 fc37 	bl	8003b74 <HAL_Delay>
	for(int j=0; j<10; j++){
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b09      	cmp	r3, #9
 8002310:	ddd2      	ble.n	80022b8 <init_PA1010D+0x40>
	}
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000068 	.word	0x20000068
 8002320:	200004bc 	.word	0x200004bc
 8002324:	20000054 	.word	0x20000054
 8002328:	20000648 	.word	0x20000648

0800232c <read_sensors>:
	uint8_t ina_config[2] = {0b00000001, 0b00011101};
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);
}

void read_sensors(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	read_MPU6050(); // Accel/ tilt
 8002332:	f7ff fcbd 	bl	8001cb0 <read_MPU6050>
	read_MPL3115A2(); // Temperature/ Pressure
 8002336:	f7ff fc49 	bl	8001bcc <read_MPL3115A2>
	if (setting_cam_north) read_MMC5603(); // Magnetic Field
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <read_sensors+0x3c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <read_sensors+0x1a>
 8002342:	f7ff fb19 	bl	8001978 <read_MMC5603>
	for (int i = 0; i < 10; ++i){
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	e004      	b.n	8002356 <read_sensors+0x2a>
		read_PA1010D(); // GPS
 800234c:	f7ff fdb4 	bl	8001eb8 <read_PA1010D>
	for (int i = 0; i < 10; ++i){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3301      	adds	r3, #1
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b09      	cmp	r3, #9
 800235a:	ddf7      	ble.n	800234c <read_sensors+0x20>
	}
	calculate_auto_gyro_speed();
 800235c:	f7fe fe6c 	bl	8001038 <calculate_auto_gyro_speed>
//	read_INA219(); // Voltage
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000868 	.word	0x20000868

0800236c <reset_MPU6050>:

void reset_MPU6050(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af04      	add	r7, sp, #16
    uint8_t reset_command = 0x80;  // Set the reset bit in PWR_MGMT_1
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1, &reset_command, 1, HAL_MAX_DELAY);
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2301      	movs	r3, #1
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	226b      	movs	r2, #107	@ 0x6b
 8002388:	21d0      	movs	r1, #208	@ 0xd0
 800238a:	4805      	ldr	r0, [pc, #20]	@ (80023a0 <reset_MPU6050+0x34>)
 800238c:	f002 fdf6 	bl	8004f7c <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Wait for reset to complete
 8002390:	2064      	movs	r0, #100	@ 0x64
 8002392:	f001 fbef 	bl	8003b74 <HAL_Delay>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200004bc 	.word	0x200004bc

080023a4 <init_sensors>:

void init_sensors(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80023a8:	480b      	ldr	r0, [pc, #44]	@ (80023d8 <init_sensors+0x34>)
 80023aa:	f003 fa41 	bl	8005830 <HAL_I2C_GetState>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d001      	beq.n	80023b8 <init_sensors+0x14>
		reset_MPU6050();
 80023b4:	f7ff ffda 	bl	800236c <reset_MPU6050>
	}

	init_MPU6050(); // Must be first
 80023b8:	f7ff ff0c 	bl	80021d4 <init_MPU6050>
	init_MPL3115A2();
 80023bc:	f7ff fee0 	bl	8002180 <init_MPL3115A2>
	init_MMC5603();
 80023c0:	f7ff fe68 	bl	8002094 <init_MMC5603>
	init_PA1010D();
 80023c4:	f7ff ff58 	bl	8002278 <init_PA1010D>
//	init_INA219();

	read_PA1010D();
 80023c8:	f7ff fd76 	bl	8001eb8 <read_PA1010D>
	get_mission_time();
 80023cc:	f7ff f832 	bl	8001434 <get_mission_time>

	flush_PA1010D();
 80023d0:	f7ff fdae 	bl	8001f30 <flush_PA1010D>
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200004bc 	.word	0x200004bc

080023dc <init_commands>:

void init_commands(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <init_commands+0xa4>)
 80023e2:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <init_commands+0xa8>)
 80023e4:	210e      	movs	r1, #14
 80023e6:	4828      	ldr	r0, [pc, #160]	@ (8002488 <init_commands+0xac>)
 80023e8:	f007 fe6c 	bl	800a0c4 <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <init_commands+0xa4>)
 80023ee:	4a27      	ldr	r2, [pc, #156]	@ (800248c <init_commands+0xb0>)
 80023f0:	210f      	movs	r1, #15
 80023f2:	4827      	ldr	r0, [pc, #156]	@ (8002490 <init_commands+0xb4>)
 80023f4:	f007 fe66 	bl	800a0c4 <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <init_commands+0xa4>)
 80023fa:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <init_commands+0xb8>)
 80023fc:	210d      	movs	r1, #13
 80023fe:	4826      	ldr	r0, [pc, #152]	@ (8002498 <init_commands+0xbc>)
 8002400:	f007 fe60 	bl	800a0c4 <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL", TEAM_ID);
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <init_commands+0xa4>)
 8002406:	4a25      	ldr	r2, [pc, #148]	@ (800249c <init_commands+0xc0>)
 8002408:	210e      	movs	r1, #14
 800240a:	4825      	ldr	r0, [pc, #148]	@ (80024a0 <init_commands+0xc4>)
 800240c:	f007 fe5a 	bl	800a0c4 <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <init_commands+0xa4>)
 8002412:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <init_commands+0xc8>)
 8002414:	2110      	movs	r1, #16
 8002416:	4824      	ldr	r0, [pc, #144]	@ (80024a8 <init_commands+0xcc>)
 8002418:	f007 fe54 	bl	800a0c4 <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <init_commands+0xa4>)
 800241e:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <init_commands+0xd0>)
 8002420:	2111      	movs	r1, #17
 8002422:	4823      	ldr	r0, [pc, #140]	@ (80024b0 <init_commands+0xd4>)
 8002424:	f007 fe4e 	bl	800a0c4 <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <init_commands+0xa4>)
 800242a:	4a22      	ldr	r2, [pc, #136]	@ (80024b4 <init_commands+0xd8>)
 800242c:	210f      	movs	r1, #15
 800242e:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <init_commands+0xdc>)
 8002430:	f007 fe48 	bl	800a0c4 <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <init_commands+0xa4>)
 8002436:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <init_commands+0xe0>)
 8002438:	2110      	movs	r1, #16
 800243a:	4821      	ldr	r0, [pc, #132]	@ (80024c0 <init_commands+0xe4>)
 800243c:	f007 fe42 	bl	800a0c4 <sniprintf>
	snprintf(cal_comp_on_command, sizeof(cal_comp_on_command), "CMD,%s,CC,ON", TEAM_ID);
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <init_commands+0xa4>)
 8002442:	4a20      	ldr	r2, [pc, #128]	@ (80024c4 <init_commands+0xe8>)
 8002444:	210f      	movs	r1, #15
 8002446:	4820      	ldr	r0, [pc, #128]	@ (80024c8 <init_commands+0xec>)
 8002448:	f007 fe3c 	bl	800a0c4 <sniprintf>
	snprintf(cal_comp_off_command, sizeof(cal_comp_off_command), "CMD,%s,CC,OFF", TEAM_ID);
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <init_commands+0xa4>)
 800244e:	4a1f      	ldr	r2, [pc, #124]	@ (80024cc <init_commands+0xf0>)
 8002450:	2110      	movs	r1, #16
 8002452:	481f      	ldr	r0, [pc, #124]	@ (80024d0 <init_commands+0xf4>)
 8002454:	f007 fe36 	bl	800a0c4 <sniprintf>
	snprintf(set_camera_north_on_command, sizeof(set_camera_north_on_command), "CMD,%s,SCN,ON", TEAM_ID);
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <init_commands+0xa4>)
 800245a:	4a1e      	ldr	r2, [pc, #120]	@ (80024d4 <init_commands+0xf8>)
 800245c:	2111      	movs	r1, #17
 800245e:	481e      	ldr	r0, [pc, #120]	@ (80024d8 <init_commands+0xfc>)
 8002460:	f007 fe30 	bl	800a0c4 <sniprintf>
	snprintf(set_camera_north_off_command, sizeof(set_camera_north_off_command), "CMD,%s,SCN,OFF", TEAM_ID);
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <init_commands+0xa4>)
 8002466:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <init_commands+0x100>)
 8002468:	2112      	movs	r1, #18
 800246a:	481d      	ldr	r0, [pc, #116]	@ (80024e0 <init_commands+0x104>)
 800246c:	f007 fe2a 	bl	800a0c4 <sniprintf>
	snprintf(release_payload_command, sizeof(release_payload_command), "CMD,%s,MEC,PAYLOAD,ON", TEAM_ID);
 8002470:	4b03      	ldr	r3, [pc, #12]	@ (8002480 <init_commands+0xa4>)
 8002472:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <init_commands+0x108>)
 8002474:	2119      	movs	r1, #25
 8002476:	481c      	ldr	r0, [pc, #112]	@ (80024e8 <init_commands+0x10c>)
 8002478:	f007 fe24 	bl	800a0c4 <sniprintf>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	0800d9a8 	.word	0x0800d9a8
 8002484:	0800d9b0 	.word	0x0800d9b0
 8002488:	2000086c 	.word	0x2000086c
 800248c:	0800d9bc 	.word	0x0800d9bc
 8002490:	2000087c 	.word	0x2000087c
 8002494:	0800d9cc 	.word	0x0800d9cc
 8002498:	2000088c 	.word	0x2000088c
 800249c:	0800d9d8 	.word	0x0800d9d8
 80024a0:	2000089c 	.word	0x2000089c
 80024a4:	0800d9e4 	.word	0x0800d9e4
 80024a8:	200008d4 	.word	0x200008d4
 80024ac:	0800d9f4 	.word	0x0800d9f4
 80024b0:	200008e4 	.word	0x200008e4
 80024b4:	0800da04 	.word	0x0800da04
 80024b8:	200008f8 	.word	0x200008f8
 80024bc:	0800da14 	.word	0x0800da14
 80024c0:	20000908 	.word	0x20000908
 80024c4:	0800da24 	.word	0x0800da24
 80024c8:	20000918 	.word	0x20000918
 80024cc:	0800da34 	.word	0x0800da34
 80024d0:	20000928 	.word	0x20000928
 80024d4:	0800da44 	.word	0x0800da44
 80024d8:	200008ac 	.word	0x200008ac
 80024dc:	0800da54 	.word	0x0800da54
 80024e0:	200008c0 	.word	0x200008c0
 80024e4:	0800da64 	.word	0x0800da64
 80024e8:	20000938 	.word	0x20000938

080024ec <calculate_checksum>:

// Xbee and Command Functions ----------------------------------------------------------------
uint8_t calculate_checksum(const char *data) {
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 80024f8:	e006      	b.n	8002508 <calculate_checksum+0x1c>
		checksum += *data++;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	781a      	ldrb	r2, [r3, #0]
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	4413      	add	r3, r2
 8002506:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f4      	bne.n	80024fa <calculate_checksum+0xe>
	}
	return checksum % 256;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <send_packet>:

void send_packet(){
 8002520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002524:	f2ad 5d2c 	subw	sp, sp, #1324	@ 0x52c
 8002528:	af2e      	add	r7, sp, #184	@ 0xb8

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	packet_count += 1;
 800252a:	4b92      	ldr	r3, [pc, #584]	@ (8002774 <send_packet+0x254>)
 800252c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002530:	b29b      	uxth	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b8e      	ldr	r3, [pc, #568]	@ (8002774 <send_packet+0x254>)
 800253a:	801a      	strh	r2, [r3, #0]

	snprintf(data, sizeof(data),
 800253c:	4b8e      	ldr	r3, [pc, #568]	@ (8002778 <send_packet+0x258>)
 800253e:	f993 3000 	ldrsb.w	r3, [r3]
 8002542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002546:	4b8d      	ldr	r3, [pc, #564]	@ (800277c <send_packet+0x25c>)
 8002548:	f993 3000 	ldrsb.w	r3, [r3]
 800254c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002550:	4b8b      	ldr	r3, [pc, #556]	@ (8002780 <send_packet+0x260>)
 8002552:	f993 3000 	ldrsb.w	r3, [r3]
 8002556:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002558:	4b86      	ldr	r3, [pc, #536]	@ (8002774 <send_packet+0x254>)
 800255a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002560:	4b88      	ldr	r3, [pc, #544]	@ (8002784 <send_packet+0x264>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	677b      	str	r3, [r7, #116]	@ 0x74
 8002566:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <send_packet+0x268>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f80c 	bl	8000588 <__aeabi_f2d>
 8002570:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8002574:	4b85      	ldr	r3, [pc, #532]	@ (800278c <send_packet+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f805 	bl	8000588 <__aeabi_f2d>
 800257e:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8002582:	4b83      	ldr	r3, [pc, #524]	@ (8002790 <send_packet+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fffe 	bl	8000588 <__aeabi_f2d>
 800258c:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8002590:	4b80      	ldr	r3, [pc, #512]	@ (8002794 <send_packet+0x274>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd fff7 	bl	8000588 <__aeabi_f2d>
 800259a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 800259e:	4b7e      	ldr	r3, [pc, #504]	@ (8002798 <send_packet+0x278>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 80025ac:	4b7b      	ldr	r3, [pc, #492]	@ (800279c <send_packet+0x27c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ffe9 	bl	8000588 <__aeabi_f2d>
 80025b6:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80025ba:	4b79      	ldr	r3, [pc, #484]	@ (80027a0 <send_packet+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd ffe2 	bl	8000588 <__aeabi_f2d>
 80025c4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80025c8:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <send_packet+0x284>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffdb 	bl	8000588 <__aeabi_f2d>
 80025d2:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80025d6:	4b74      	ldr	r3, [pc, #464]	@ (80027a8 <send_packet+0x288>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ffd4 	bl	8000588 <__aeabi_f2d>
 80025e0:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80025e4:	4b71      	ldr	r3, [pc, #452]	@ (80027ac <send_packet+0x28c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ffcd 	bl	8000588 <__aeabi_f2d>
 80025ee:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80025f2:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <send_packet+0x290>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ffc6 	bl	8000588 <__aeabi_f2d>
 80025fc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002600:	4b6c      	ldr	r3, [pc, #432]	@ (80027b4 <send_packet+0x294>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffbf 	bl	8000588 <__aeabi_f2d>
 800260a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800260e:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <send_packet+0x298>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ffb8 	bl	8000588 <__aeabi_f2d>
 8002618:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800261c:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <send_packet+0x29c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd ffb1 	bl	8000588 <__aeabi_f2d>
 8002626:	4682      	mov	sl, r0
 8002628:	468b      	mov	fp, r1
 800262a:	4b65      	ldr	r3, [pc, #404]	@ (80027c0 <send_packet+0x2a0>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002630:	4b64      	ldr	r3, [pc, #400]	@ (80027c4 <send_packet+0x2a4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b64      	ldr	r3, [pc, #400]	@ (80027c8 <send_packet+0x2a8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	4b63      	ldr	r3, [pc, #396]	@ (80027cc <send_packet+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ffa1 	bl	8000588 <__aeabi_f2d>
 8002646:	4680      	mov	r8, r0
 8002648:	4689      	mov	r9, r1
 800264a:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <send_packet+0x2b0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff9a 	bl	8000588 <__aeabi_f2d>
 8002654:	4604      	mov	r4, r0
 8002656:	460d      	mov	r5, r1
 8002658:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <send_packet+0x2b4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff93 	bl	8000588 <__aeabi_f2d>
 8002662:	4b5d      	ldr	r3, [pc, #372]	@ (80027d8 <send_packet+0x2b8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	f107 068c 	add.w	r6, r7, #140	@ 0x8c
 800266c:	4b5b      	ldr	r3, [pc, #364]	@ (80027dc <send_packet+0x2bc>)
 800266e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8002670:	922c      	str	r2, [sp, #176]	@ 0xb0
 8002672:	e9cd 012a 	strd	r0, r1, [sp, #168]	@ 0xa8
 8002676:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 800267a:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	9224      	str	r2, [sp, #144]	@ 0x90
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	9223      	str	r2, [sp, #140]	@ 0x8c
 8002686:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002688:	9222      	str	r2, [sp, #136]	@ 0x88
 800268a:	e9cd ab20 	strd	sl, fp, [sp, #128]	@ 0x80
 800268e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002692:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 8002696:	ed97 7b04 	vldr	d7, [r7, #16]
 800269a:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 800269e:	ed97 7b06 	vldr	d7, [r7, #24]
 80026a2:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 80026a6:	ed97 7b08 	vldr	d7, [r7, #32]
 80026aa:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 80026ae:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80026b2:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 80026b6:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80026ba:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80026be:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80026c2:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80026c6:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80026ca:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80026ce:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80026d2:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80026d6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80026da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80026de:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80026e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80026e6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80026ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 80026ee:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 80026f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <send_packet+0x2c0>)
 80026f8:	9305      	str	r3, [sp, #20]
 80026fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80026fc:	9204      	str	r2, [sp, #16]
 80026fe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002700:	9203      	str	r2, [sp, #12]
 8002702:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002704:	9202      	str	r2, [sp, #8]
 8002706:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800270a:	9201      	str	r2, [sp, #4]
 800270c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <send_packet+0x2c4>)
 8002714:	4a34      	ldr	r2, [pc, #208]	@ (80027e8 <send_packet+0x2c8>)
 8002716:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800271a:	4630      	mov	r0, r6
 800271c:	f007 fcd2 	bl	800a0c4 <sniprintf>
		 mode, state, altitude, temperature, pressure, voltage,
		 gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z, mag_x, mag_y, mag_z,
		 auto_gyro_rotation_rate, gps_time_hr, gps_time_min, gps_time_sec,
		 gps_altitude, gps_latitude, gps_longitude, gps_sats, cmd_echo);

	uint8_t checksum = calculate_checksum(data);
 8002720:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fee1 	bl	80024ec <calculate_checksum>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 8002730:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8002734:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8002738:	f507 701b 	add.w	r0, r7, #620	@ 0x26c
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4613      	mov	r3, r2
 8002740:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <send_packet+0x2cc>)
 8002742:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002746:	f007 fcbd 	bl	800a0c4 <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 800274a:	f507 731b 	add.w	r3, r7, #620	@ 0x26c
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fdae 	bl	80002b0 <strlen>
 8002754:	4603      	mov	r3, r0
 8002756:	b29a      	uxth	r2, r3
 8002758:	f507 711b 	add.w	r1, r7, #620	@ 0x26c
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	4823      	ldr	r0, [pc, #140]	@ (80027f0 <send_packet+0x2d0>)
 8002762:	f005 f8bd 	bl	80078e0 <HAL_UART_Transmit>
}
 8002766:	bf00      	nop
 8002768:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	200005f8 	.word	0x200005f8
 8002778:	200005f4 	.word	0x200005f4
 800277c:	200005f5 	.word	0x200005f5
 8002780:	200005f6 	.word	0x200005f6
 8002784:	20000000 	.word	0x20000000
 8002788:	200005fc 	.word	0x200005fc
 800278c:	20000600 	.word	0x20000600
 8002790:	20000604 	.word	0x20000604
 8002794:	20000608 	.word	0x20000608
 8002798:	2000060c 	.word	0x2000060c
 800279c:	20000610 	.word	0x20000610
 80027a0:	20000614 	.word	0x20000614
 80027a4:	20000618 	.word	0x20000618
 80027a8:	2000061c 	.word	0x2000061c
 80027ac:	20000620 	.word	0x20000620
 80027b0:	20000624 	.word	0x20000624
 80027b4:	20000628 	.word	0x20000628
 80027b8:	2000062c 	.word	0x2000062c
 80027bc:	20000630 	.word	0x20000630
 80027c0:	20000634 	.word	0x20000634
 80027c4:	20000635 	.word	0x20000635
 80027c8:	20000636 	.word	0x20000636
 80027cc:	20000638 	.word	0x20000638
 80027d0:	2000063c 	.word	0x2000063c
 80027d4:	20000640 	.word	0x20000640
 80027d8:	20000644 	.word	0x20000644
 80027dc:	20000014 	.word	0x20000014
 80027e0:	20000004 	.word	0x20000004
 80027e4:	0800d9a8 	.word	0x0800d9a8
 80027e8:	0800da7c 	.word	0x0800da7c
 80027ec:	0800db04 	.word	0x0800db04
 80027f0:	200005ac 	.word	0x200005ac

080027f4 <handle_state>:

void handle_state(){
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	// States: ‘LAUNCH_PAD’,‘ASCENT’, ‘APOGEE’, ‘DESCENT’, ‘PROBE_RELEASE’, ‘LANDED’
	int8_t current_movement;

	// Determine ascending, descending, or stationary
	if (altitude < (prev_alt + 0.5) && altitude > (prev_alt - 0.5)){
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <handle_state+0x17c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fec2 	bl	8000588 <__aeabi_f2d>
 8002804:	4604      	mov	r4, r0
 8002806:	460d      	mov	r5, r1
 8002808:	4b5a      	ldr	r3, [pc, #360]	@ (8002974 <handle_state+0x180>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd febb 	bl	8000588 <__aeabi_f2d>
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <handle_state+0x184>)
 8002818:	f7fd fd58 	bl	80002cc <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4620      	mov	r0, r4
 8002822:	4629      	mov	r1, r5
 8002824:	f7fe f97a 	bl	8000b1c <__aeabi_dcmplt>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d01c      	beq.n	8002868 <handle_state+0x74>
 800282e:	4b50      	ldr	r3, [pc, #320]	@ (8002970 <handle_state+0x17c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fea8 	bl	8000588 <__aeabi_f2d>
 8002838:	4604      	mov	r4, r0
 800283a:	460d      	mov	r5, r1
 800283c:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <handle_state+0x180>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fea1 	bl	8000588 <__aeabi_f2d>
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b4b      	ldr	r3, [pc, #300]	@ (8002978 <handle_state+0x184>)
 800284c:	f7fd fd3c 	bl	80002c8 <__aeabi_dsub>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4620      	mov	r0, r4
 8002856:	4629      	mov	r1, r5
 8002858:	f7fe f97e 	bl	8000b58 <__aeabi_dcmpgt>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <handle_state+0x74>
		current_movement = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	71fb      	strb	r3, [r7, #7]
 8002866:	e00f      	b.n	8002888 <handle_state+0x94>
	}
	else if (altitude < prev_alt) {
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <handle_state+0x17c>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	4b41      	ldr	r3, [pc, #260]	@ (8002974 <handle_state+0x180>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287c:	d502      	bpl.n	8002884 <handle_state+0x90>
		current_movement = -1;
 800287e:	23ff      	movs	r3, #255	@ 0xff
 8002880:	71fb      	strb	r3, [r7, #7]
 8002882:	e001      	b.n	8002888 <handle_state+0x94>
	}
	else {
		current_movement = 1;
 8002884:	2301      	movs	r3, #1
 8002886:	71fb      	strb	r3, [r7, #7]
		strncpy(state, "PROBE_RELEASE", strlen("PROBE_RELEASE"));
		// Deploy Auto Gyro
	}

	// Ascent if ascending and probe not released
	else if (current_movement == 1){
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10a      	bne.n	80028a6 <handle_state+0xb2>
		memset(state, 0, sizeof(state));
 8002890:	220e      	movs	r2, #14
 8002892:	2100      	movs	r1, #0
 8002894:	4839      	ldr	r0, [pc, #228]	@ (800297c <handle_state+0x188>)
 8002896:	f007 fc8c 	bl	800a1b2 <memset>
		strncpy(state, "ASCENDING", strlen("ASCENDING"));
 800289a:	4b38      	ldr	r3, [pc, #224]	@ (800297c <handle_state+0x188>)
 800289c:	4a38      	ldr	r2, [pc, #224]	@ (8002980 <handle_state+0x18c>)
 800289e:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a0:	c303      	stmia	r3!, {r0, r1}
 80028a2:	701a      	strb	r2, [r3, #0]
 80028a4:	e05b      	b.n	800295e <handle_state+0x16a>
	}

	// Apogee if current state is ascent and now stationary or descending
	else if ((strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0 || strncmp(state, "PROBE_RELEASE", strlen("PROBE_RELEASE")) == 0) && current_movement != 1){
 80028a6:	2209      	movs	r2, #9
 80028a8:	4935      	ldr	r1, [pc, #212]	@ (8002980 <handle_state+0x18c>)
 80028aa:	4834      	ldr	r0, [pc, #208]	@ (800297c <handle_state+0x188>)
 80028ac:	f007 fc98 	bl	800a1e0 <strncmp>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <handle_state+0xd2>
 80028b6:	220d      	movs	r2, #13
 80028b8:	4932      	ldr	r1, [pc, #200]	@ (8002984 <handle_state+0x190>)
 80028ba:	4830      	ldr	r0, [pc, #192]	@ (800297c <handle_state+0x188>)
 80028bc:	f007 fc90 	bl	800a1e0 <strncmp>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d110      	bne.n	80028e8 <handle_state+0xf4>
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d00c      	beq.n	80028e8 <handle_state+0xf4>
		memset(state, 0, sizeof(state));
 80028ce:	220e      	movs	r2, #14
 80028d0:	2100      	movs	r1, #0
 80028d2:	482a      	ldr	r0, [pc, #168]	@ (800297c <handle_state+0x188>)
 80028d4:	f007 fc6d 	bl	800a1b2 <memset>
		strncpy(state, "APOGEE", strlen("APOGEE"));
 80028d8:	4b28      	ldr	r3, [pc, #160]	@ (800297c <handle_state+0x188>)
 80028da:	4a2b      	ldr	r2, [pc, #172]	@ (8002988 <handle_state+0x194>)
 80028dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028e0:	6018      	str	r0, [r3, #0]
 80028e2:	3304      	adds	r3, #4
 80028e4:	8019      	strh	r1, [r3, #0]
 80028e6:	e03a      	b.n	800295e <handle_state+0x16a>
	}

	// Descent if not apogee and descending
	else if (current_movement == -1){
 80028e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d10a      	bne.n	8002908 <handle_state+0x114>
		memset(state, 0, sizeof(state));
 80028f2:	220e      	movs	r2, #14
 80028f4:	2100      	movs	r1, #0
 80028f6:	4821      	ldr	r0, [pc, #132]	@ (800297c <handle_state+0x188>)
 80028f8:	f007 fc5b 	bl	800a1b2 <memset>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
 80028fc:	4b1f      	ldr	r3, [pc, #124]	@ (800297c <handle_state+0x188>)
 80028fe:	4a23      	ldr	r2, [pc, #140]	@ (800298c <handle_state+0x198>)
 8002900:	ca07      	ldmia	r2, {r0, r1, r2}
 8002902:	c303      	stmia	r3!, {r0, r1}
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	e02a      	b.n	800295e <handle_state+0x16a>
	}

	// Landed if not moving and was previously descending or landed
	else if (current_movement == 0 && (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0 || strncmp(state, "LANDED", strlen("LANDED")) == 0)){
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11c      	bne.n	800294a <handle_state+0x156>
 8002910:	220a      	movs	r2, #10
 8002912:	491e      	ldr	r1, [pc, #120]	@ (800298c <handle_state+0x198>)
 8002914:	4819      	ldr	r0, [pc, #100]	@ (800297c <handle_state+0x188>)
 8002916:	f007 fc63 	bl	800a1e0 <strncmp>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <handle_state+0x13c>
 8002920:	2206      	movs	r2, #6
 8002922:	491b      	ldr	r1, [pc, #108]	@ (8002990 <handle_state+0x19c>)
 8002924:	4815      	ldr	r0, [pc, #84]	@ (800297c <handle_state+0x188>)
 8002926:	f007 fc5b 	bl	800a1e0 <strncmp>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <handle_state+0x156>
		memset(state, 0, sizeof(state));
 8002930:	220e      	movs	r2, #14
 8002932:	2100      	movs	r1, #0
 8002934:	4811      	ldr	r0, [pc, #68]	@ (800297c <handle_state+0x188>)
 8002936:	f007 fc3c 	bl	800a1b2 <memset>
		strncpy(state, "LANDED", strlen("LANDED"));
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <handle_state+0x188>)
 800293c:	4a14      	ldr	r2, [pc, #80]	@ (8002990 <handle_state+0x19c>)
 800293e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002942:	6018      	str	r0, [r3, #0]
 8002944:	3304      	adds	r3, #4
 8002946:	8019      	strh	r1, [r3, #0]
 8002948:	e009      	b.n	800295e <handle_state+0x16a>
		// stop telemetry transmission
	}

	else{
		memset(state, 0, sizeof(state));
 800294a:	220e      	movs	r2, #14
 800294c:	2100      	movs	r1, #0
 800294e:	480b      	ldr	r0, [pc, #44]	@ (800297c <handle_state+0x188>)
 8002950:	f007 fc2f 	bl	800a1b2 <memset>
		strncpy(state, "LAUNCH_PAD", strlen("LAUNCH_PAD"));
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <handle_state+0x188>)
 8002956:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <handle_state+0x1a0>)
 8002958:	ca07      	ldmia	r2, {r0, r1, r2}
 800295a:	c303      	stmia	r3!, {r0, r1}
 800295c:	801a      	strh	r2, [r3, #0]
	}

	prev_alt = altitude;
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <handle_state+0x17c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a04      	ldr	r2, [pc, #16]	@ (8002974 <handle_state+0x180>)
 8002964:	6013      	str	r3, [r2, #0]
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bdb0      	pop	{r4, r5, r7, pc}
 800296e:	bf00      	nop
 8002970:	200005fc 	.word	0x200005fc
 8002974:	20000954 	.word	0x20000954
 8002978:	3fe00000 	.word	0x3fe00000
 800297c:	20000004 	.word	0x20000004
 8002980:	0800db0c 	.word	0x0800db0c
 8002984:	0800db18 	.word	0x0800db18
 8002988:	0800db28 	.word	0x0800db28
 800298c:	0800db30 	.word	0x0800db30
 8002990:	0800db3c 	.word	0x0800db3c
 8002994:	0800db44 	.word	0x0800db44

08002998 <read_transmit_telemetry>:

void read_transmit_telemetry (){
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	if (mode == 'F') {
 800299c:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <read_transmit_telemetry+0x18>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b46      	cmp	r3, #70	@ 0x46
 80029a2:	d101      	bne.n	80029a8 <read_transmit_telemetry+0x10>
		read_sensors();
 80029a4:	f7ff fcc2 	bl	800232c <read_sensors>
	}

	send_packet();
 80029a8:	f7ff fdba 	bl	8002520 <send_packet>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20000000 	.word	0x20000000

080029b4 <set_cmd_echo>:

void set_cmd_echo(const char *cmd)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	memset(cmd_echo, '\0', sizeof(cmd_echo));
 80029bc:	2240      	movs	r2, #64	@ 0x40
 80029be:	2100      	movs	r1, #0
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <set_cmd_echo+0x2c>)
 80029c2:	f007 fbf6 	bl	800a1b2 <memset>
	strncpy(cmd_echo, cmd, strlen(cmd));
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fd fc72 	bl	80002b0 <strlen>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <set_cmd_echo+0x2c>)
 80029d4:	f007 fc16 	bl	800a204 <strncpy>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000014 	.word	0x20000014

080029e4 <handle_command>:

void handle_command(const char *cmd) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	@ 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]

	// SIM command
	if (strncmp(cmd, sim_command, strlen(sim_command)) == 0) {
 80029ec:	48b5      	ldr	r0, [pc, #724]	@ (8002cc4 <handle_command+0x2e0>)
 80029ee:	f7fd fc5f 	bl	80002b0 <strlen>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	49b3      	ldr	r1, [pc, #716]	@ (8002cc4 <handle_command+0x2e0>)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f007 fbf1 	bl	800a1e0 <strncmp>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12a      	bne.n	8002a5a <handle_command+0x76>

		// disable
		if (cmd[13] == 'D'){
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	330d      	adds	r3, #13
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b44      	cmp	r3, #68	@ 0x44
 8002a0c:	d108      	bne.n	8002a20 <handle_command+0x3c>
			set_cmd_echo("SIMDISABLE");
 8002a0e:	48ae      	ldr	r0, [pc, #696]	@ (8002cc8 <handle_command+0x2e4>)
 8002a10:	f7ff ffd0 	bl	80029b4 <set_cmd_echo>
			mode = 'F';
 8002a14:	4bad      	ldr	r3, [pc, #692]	@ (8002ccc <handle_command+0x2e8>)
 8002a16:	2246      	movs	r2, #70	@ 0x46
 8002a18:	701a      	strb	r2, [r3, #0]
			sim_enabled = false;
 8002a1a:	4bad      	ldr	r3, [pc, #692]	@ (8002cd0 <handle_command+0x2ec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
		}

		// enable
		if (cmd[13] == 'E'){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	330d      	adds	r3, #13
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b45      	cmp	r3, #69	@ 0x45
 8002a28:	d105      	bne.n	8002a36 <handle_command+0x52>
			set_cmd_echo("SIMENABLE");
 8002a2a:	48aa      	ldr	r0, [pc, #680]	@ (8002cd4 <handle_command+0x2f0>)
 8002a2c:	f7ff ffc2 	bl	80029b4 <set_cmd_echo>
			sim_enabled = true;
 8002a30:	4ba7      	ldr	r3, [pc, #668]	@ (8002cd0 <handle_command+0x2ec>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
		}

		// activate
		if (cmd[13] == 'A' && sim_enabled == true){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	330d      	adds	r3, #13
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b41      	cmp	r3, #65	@ 0x41
 8002a3e:	f040 821c 	bne.w	8002e7a <handle_command+0x496>
 8002a42:	4ba3      	ldr	r3, [pc, #652]	@ (8002cd0 <handle_command+0x2ec>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	f040 8217 	bne.w	8002e7a <handle_command+0x496>
			mode = 'S';
 8002a4c:	4b9f      	ldr	r3, [pc, #636]	@ (8002ccc <handle_command+0x2e8>)
 8002a4e:	2253      	movs	r2, #83	@ 0x53
 8002a50:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("SIMACTIVATE");
 8002a52:	48a1      	ldr	r0, [pc, #644]	@ (8002cd8 <handle_command+0x2f4>)
 8002a54:	f7ff ffae 	bl	80029b4 <set_cmd_echo>
		set_cmd_echo("MECPAYLOAD");
		Set_Servo_Angle(90);
		sim_enabled = false;
	}

}
 8002a58:	e20f      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, simp_command, strlen(simp_command)) == 0) {
 8002a5a:	48a0      	ldr	r0, [pc, #640]	@ (8002cdc <handle_command+0x2f8>)
 8002a5c:	f7fd fc28 	bl	80002b0 <strlen>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	499d      	ldr	r1, [pc, #628]	@ (8002cdc <handle_command+0x2f8>)
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f007 fbba 	bl	800a1e0 <strncmp>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d157      	bne.n	8002b22 <handle_command+0x13e>
		if (mode == 'S') {
 8002a72:	4b96      	ldr	r3, [pc, #600]	@ (8002ccc <handle_command+0x2e8>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b53      	cmp	r3, #83	@ 0x53
 8002a78:	d14f      	bne.n	8002b1a <handle_command+0x136>
			strncpy(pressure_str, &cmd[14], 6);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 010e 	add.w	r1, r3, #14
 8002a80:	f107 0318 	add.w	r3, r7, #24
 8002a84:	2206      	movs	r2, #6
 8002a86:	4618      	mov	r0, r3
 8002a88:	f007 fbbc 	bl	800a204 <strncpy>
			pressure_str[6] = '\0';
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	77bb      	strb	r3, [r7, #30]
			read_sensors();
 8002a90:	f7ff fc4c 	bl	800232c <read_sensors>
			pressure = atof(pressure_str)/1000;
 8002a94:	f107 0318 	add.w	r3, r7, #24
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f005 ff5d 	bl	8008958 <atof>
 8002a9e:	ec51 0b10 	vmov	r0, r1, d0
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce0 <handle_command+0x2fc>)
 8002aa8:	f7fd fef0 	bl	800088c <__aeabi_ddiv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f8b8 	bl	8000c28 <__aeabi_d2f>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a8a      	ldr	r2, [pc, #552]	@ (8002ce4 <handle_command+0x300>)
 8002abc:	6013      	str	r3, [r2, #0]
			altitude = calculate_altitude(pressure);
 8002abe:	4b89      	ldr	r3, [pc, #548]	@ (8002ce4 <handle_command+0x300>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac8:	f7fe ff02 	bl	80018d0 <calculate_altitude>
 8002acc:	eef0 7a40 	vmov.f32	s15, s0
 8002ad0:	4b85      	ldr	r3, [pc, #532]	@ (8002ce8 <handle_command+0x304>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
			char temp[12] = "SIMP";
 8002ad6:	4a85      	ldr	r2, [pc, #532]	@ (8002cec <handle_command+0x308>)
 8002ad8:	f107 030c 	add.w	r3, r7, #12
 8002adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae0:	6018      	str	r0, [r3, #0]
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	7019      	strb	r1, [r3, #0]
 8002ae6:	f107 0311 	add.w	r3, r7, #17
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f8c3 2003 	str.w	r2, [r3, #3]
			strcat(temp, pressure_str);
 8002af2:	f107 0218 	add.w	r2, r7, #24
 8002af6:	f107 030c 	add.w	r3, r7, #12
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 fb60 	bl	800a1c2 <strcat>
			set_cmd_echo(temp);
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff54 	bl	80029b4 <set_cmd_echo>
			memset(pressure_str, '\0', sizeof(pressure_str));
 8002b0c:	f107 0318 	add.w	r3, r7, #24
 8002b10:	2207      	movs	r2, #7
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f007 fb4c 	bl	800a1b2 <memset>
		sim_enabled = false;
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd0 <handle_command+0x2ec>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
}
 8002b20:	e1ab      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, set_time_command, strlen(set_time_command)) == 0) {
 8002b22:	4873      	ldr	r0, [pc, #460]	@ (8002cf0 <handle_command+0x30c>)
 8002b24:	f7fd fbc4 	bl	80002b0 <strlen>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4970      	ldr	r1, [pc, #448]	@ (8002cf0 <handle_command+0x30c>)
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f007 fb56 	bl	800a1e0 <strncmp>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d17a      	bne.n	8002c30 <handle_command+0x24c>
		if (cmd[12]=='G') {
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b47      	cmp	r3, #71	@ 0x47
 8002b42:	d112      	bne.n	8002b6a <handle_command+0x186>
			mission_time_hr = (int16_t)gps_time_hr;
 8002b44:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf4 <handle_command+0x310>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf8 <handle_command+0x314>)
 8002b4c:	701a      	strb	r2, [r3, #0]
			mission_time_min = (int16_t)gps_time_min;
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <handle_command+0x318>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b25a      	sxtb	r2, r3
 8002b54:	4b6a      	ldr	r3, [pc, #424]	@ (8002d00 <handle_command+0x31c>)
 8002b56:	701a      	strb	r2, [r3, #0]
			mission_time_sec = (int16_t)gps_time_sec;
 8002b58:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <handle_command+0x320>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b25a      	sxtb	r2, r3
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <handle_command+0x324>)
 8002b60:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("STGPS");
 8002b62:	486a      	ldr	r0, [pc, #424]	@ (8002d0c <handle_command+0x328>)
 8002b64:	f7ff ff26 	bl	80029b4 <set_cmd_echo>
 8002b68:	e05f      	b.n	8002c2a <handle_command+0x246>
			memset(temp, 0, sizeof(temp));
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	2203      	movs	r2, #3
 8002b70:	2100      	movs	r1, #0
 8002b72:	4618      	mov	r0, r3
 8002b74:	f007 fb1d 	bl	800a1b2 <memset>
			temp[0] = cmd[12];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[13];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	330d      	adds	r3, #13
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	727b      	strb	r3, [r7, #9]
			mission_time_hr = atoi(temp);
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 fee6 	bl	800895e <atoi>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b25a      	sxtb	r2, r3
 8002b96:	4b58      	ldr	r3, [pc, #352]	@ (8002cf8 <handle_command+0x314>)
 8002b98:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f007 fb05 	bl	800a1b2 <memset>
			temp[0] = cmd[15];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	330f      	adds	r3, #15
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[16];
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3310      	adds	r3, #16
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	727b      	strb	r3, [r7, #9]
			mission_time_min = atoi(temp);
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f005 fece 	bl	800895e <atoi>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	b25a      	sxtb	r2, r3
 8002bc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d00 <handle_command+0x31c>)
 8002bc8:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 8002bca:	f107 0308 	add.w	r3, r7, #8
 8002bce:	2203      	movs	r2, #3
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 faed 	bl	800a1b2 <memset>
			temp[0] = cmd[18];
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3312      	adds	r3, #18
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[19];
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3313      	adds	r3, #19
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	727b      	strb	r3, [r7, #9]
			mission_time_sec = atoi(temp);
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 feb6 	bl	800895e <atoi>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b25a      	sxtb	r2, r3
 8002bf6:	4b44      	ldr	r3, [pc, #272]	@ (8002d08 <handle_command+0x324>)
 8002bf8:	701a      	strb	r2, [r3, #0]
			memset(cmd_echo, '\0', sizeof(cmd_echo));
 8002bfa:	2240      	movs	r2, #64	@ 0x40
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4844      	ldr	r0, [pc, #272]	@ (8002d10 <handle_command+0x32c>)
 8002c00:	f007 fad7 	bl	800a1b2 <memset>
			snprintf(cmd_echo, 11, "ST%02d:%02d:%02d", mission_time_hr, mission_time_min, mission_time_sec);
 8002c04:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf8 <handle_command+0x314>)
 8002c06:	f993 3000 	ldrsb.w	r3, [r3]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d00 <handle_command+0x31c>)
 8002c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b3c      	ldr	r3, [pc, #240]	@ (8002d08 <handle_command+0x324>)
 8002c16:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	9200      	str	r2, [sp, #0]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4a3c      	ldr	r2, [pc, #240]	@ (8002d14 <handle_command+0x330>)
 8002c22:	210b      	movs	r1, #11
 8002c24:	483a      	ldr	r0, [pc, #232]	@ (8002d10 <handle_command+0x32c>)
 8002c26:	f007 fa4d 	bl	800a0c4 <sniprintf>
		store_flash_data();
 8002c2a:	f7fe fc7f 	bl	800152c <store_flash_data>
}
 8002c2e:	e124      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, cal_alt_command, strlen(cal_alt_command)) == 0) {
 8002c30:	4839      	ldr	r0, [pc, #228]	@ (8002d18 <handle_command+0x334>)
 8002c32:	f7fd fb3d 	bl	80002b0 <strlen>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4937      	ldr	r1, [pc, #220]	@ (8002d18 <handle_command+0x334>)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f007 facf 	bl	800a1e0 <strncmp>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d125      	bne.n	8002c94 <handle_command+0x2b0>
		altitude_offset -= altitude;
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <handle_command+0x338>)
 8002c4a:	ed93 7a00 	vldr	s14, [r3]
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <handle_command+0x304>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c58:	4b30      	ldr	r3, [pc, #192]	@ (8002d1c <handle_command+0x338>)
 8002c5a:	edc3 7a00 	vstr	s15, [r3]
		store_flash_data();
 8002c5e:	f7fe fc65 	bl	800152c <store_flash_data>
		set_cmd_echo("CAL");
 8002c62:	482f      	ldr	r0, [pc, #188]	@ (8002d20 <handle_command+0x33c>)
 8002c64:	f7ff fea6 	bl	80029b4 <set_cmd_echo>
		if (strncmp(state, "PRE-LAUNCH", strlen("PRE-LAUNCH")) == 0) {
 8002c68:	220a      	movs	r2, #10
 8002c6a:	492e      	ldr	r1, [pc, #184]	@ (8002d24 <handle_command+0x340>)
 8002c6c:	482e      	ldr	r0, [pc, #184]	@ (8002d28 <handle_command+0x344>)
 8002c6e:	f007 fab7 	bl	800a1e0 <strncmp>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <handle_command+0x2a8>
			memset(state, 0, sizeof(state));
 8002c78:	220e      	movs	r2, #14
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	482a      	ldr	r0, [pc, #168]	@ (8002d28 <handle_command+0x344>)
 8002c7e:	f007 fa98 	bl	800a1b2 <memset>
			strncpy(state, "LAUNCH-READY", strlen("LAUNCH-READY"));
 8002c82:	4b29      	ldr	r3, [pc, #164]	@ (8002d28 <handle_command+0x344>)
 8002c84:	4a29      	ldr	r2, [pc, #164]	@ (8002d2c <handle_command+0x348>)
 8002c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		sim_enabled = false;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <handle_command+0x2ec>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
}
 8002c92:	e0f2      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, tel_on_command, strlen(tel_on_command)) == 0) {
 8002c94:	4826      	ldr	r0, [pc, #152]	@ (8002d30 <handle_command+0x34c>)
 8002c96:	f7fd fb0b 	bl	80002b0 <strlen>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4924      	ldr	r1, [pc, #144]	@ (8002d30 <handle_command+0x34c>)
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f007 fa9d 	bl	800a1e0 <strncmp>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d147      	bne.n	8002d3c <handle_command+0x358>
		telemetry_status = 1;
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <handle_command+0x350>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXON");
 8002cb2:	4821      	ldr	r0, [pc, #132]	@ (8002d38 <handle_command+0x354>)
 8002cb4:	f7ff fe7e 	bl	80029b4 <set_cmd_echo>
		sim_enabled = false;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <handle_command+0x2ec>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
		flush_PA1010D();
 8002cbe:	f7ff f937 	bl	8001f30 <flush_PA1010D>
}
 8002cc2:	e0da      	b.n	8002e7a <handle_command+0x496>
 8002cc4:	2000086c 	.word	0x2000086c
 8002cc8:	0800db50 	.word	0x0800db50
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000978 	.word	0x20000978
 8002cd4:	0800db5c 	.word	0x0800db5c
 8002cd8:	0800db68 	.word	0x0800db68
 8002cdc:	2000087c 	.word	0x2000087c
 8002ce0:	408f4000 	.word	0x408f4000
 8002ce4:	20000604 	.word	0x20000604
 8002ce8:	200005fc 	.word	0x200005fc
 8002cec:	0800dbec 	.word	0x0800dbec
 8002cf0:	2000088c 	.word	0x2000088c
 8002cf4:	20000634 	.word	0x20000634
 8002cf8:	200005f4 	.word	0x200005f4
 8002cfc:	20000635 	.word	0x20000635
 8002d00:	200005f5 	.word	0x200005f5
 8002d04:	20000636 	.word	0x20000636
 8002d08:	200005f6 	.word	0x200005f6
 8002d0c:	0800db74 	.word	0x0800db74
 8002d10:	20000014 	.word	0x20000014
 8002d14:	0800db7c 	.word	0x0800db7c
 8002d18:	2000089c 	.word	0x2000089c
 8002d1c:	20000974 	.word	0x20000974
 8002d20:	0800db90 	.word	0x0800db90
 8002d24:	0800db94 	.word	0x0800db94
 8002d28:	20000004 	.word	0x20000004
 8002d2c:	0800dba0 	.word	0x0800dba0
 8002d30:	200008f8 	.word	0x200008f8
 8002d34:	200000a8 	.word	0x200000a8
 8002d38:	0800dbb0 	.word	0x0800dbb0
	else if (strncmp(cmd, tel_off_command, strlen(tel_off_command)) == 0) {
 8002d3c:	4851      	ldr	r0, [pc, #324]	@ (8002e84 <handle_command+0x4a0>)
 8002d3e:	f7fd fab7 	bl	80002b0 <strlen>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	494f      	ldr	r1, [pc, #316]	@ (8002e84 <handle_command+0x4a0>)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f007 fa49 	bl	800a1e0 <strncmp>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d109      	bne.n	8002d68 <handle_command+0x384>
		telemetry_status = 0;
 8002d54:	4b4c      	ldr	r3, [pc, #304]	@ (8002e88 <handle_command+0x4a4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXOFF");
 8002d5a:	484c      	ldr	r0, [pc, #304]	@ (8002e8c <handle_command+0x4a8>)
 8002d5c:	f7ff fe2a 	bl	80029b4 <set_cmd_echo>
		sim_enabled = false;
 8002d60:	4b4b      	ldr	r3, [pc, #300]	@ (8002e90 <handle_command+0x4ac>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
}
 8002d66:	e088      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, cal_comp_on_command, strlen(cal_comp_on_command)) == 0) {
 8002d68:	484a      	ldr	r0, [pc, #296]	@ (8002e94 <handle_command+0x4b0>)
 8002d6a:	f7fd faa1 	bl	80002b0 <strlen>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4948      	ldr	r1, [pc, #288]	@ (8002e94 <handle_command+0x4b0>)
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f007 fa33 	bl	800a1e0 <strncmp>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d121      	bne.n	8002dc4 <handle_command+0x3e0>
		mag_x_min = mag_x;
 8002d80:	4b45      	ldr	r3, [pc, #276]	@ (8002e98 <handle_command+0x4b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a45      	ldr	r2, [pc, #276]	@ (8002e9c <handle_command+0x4b8>)
 8002d86:	6013      	str	r3, [r2, #0]
		mag_x_max = mag_x;
 8002d88:	4b43      	ldr	r3, [pc, #268]	@ (8002e98 <handle_command+0x4b4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a44      	ldr	r2, [pc, #272]	@ (8002ea0 <handle_command+0x4bc>)
 8002d8e:	6013      	str	r3, [r2, #0]
		mag_y_min = mag_y;
 8002d90:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <handle_command+0x4c0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a44      	ldr	r2, [pc, #272]	@ (8002ea8 <handle_command+0x4c4>)
 8002d96:	6013      	str	r3, [r2, #0]
		mag_y_max = mag_y;
 8002d98:	4b42      	ldr	r3, [pc, #264]	@ (8002ea4 <handle_command+0x4c0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <handle_command+0x4c8>)
 8002d9e:	6013      	str	r3, [r2, #0]
		mag_z_min = mag_z;
 8002da0:	4b43      	ldr	r3, [pc, #268]	@ (8002eb0 <handle_command+0x4cc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a43      	ldr	r2, [pc, #268]	@ (8002eb4 <handle_command+0x4d0>)
 8002da6:	6013      	str	r3, [r2, #0]
		mag_z_max = mag_z;
 8002da8:	4b41      	ldr	r3, [pc, #260]	@ (8002eb0 <handle_command+0x4cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a42      	ldr	r2, [pc, #264]	@ (8002eb8 <handle_command+0x4d4>)
 8002dae:	6013      	str	r3, [r2, #0]
		calibrating_compass = 1;
 8002db0:	4b42      	ldr	r3, [pc, #264]	@ (8002ebc <handle_command+0x4d8>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
		set_cmd_echo("CCON");
 8002db6:	4842      	ldr	r0, [pc, #264]	@ (8002ec0 <handle_command+0x4dc>)
 8002db8:	f7ff fdfc 	bl	80029b4 <set_cmd_echo>
		sim_enabled = false;
 8002dbc:	4b34      	ldr	r3, [pc, #208]	@ (8002e90 <handle_command+0x4ac>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]
}
 8002dc2:	e05a      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, cal_comp_off_command, strlen(cal_comp_off_command)) == 0) {
 8002dc4:	483f      	ldr	r0, [pc, #252]	@ (8002ec4 <handle_command+0x4e0>)
 8002dc6:	f7fd fa73 	bl	80002b0 <strlen>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	493d      	ldr	r1, [pc, #244]	@ (8002ec4 <handle_command+0x4e0>)
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f007 fa05 	bl	800a1e0 <strncmp>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10b      	bne.n	8002df4 <handle_command+0x410>
		calibrating_compass = 0;
 8002ddc:	4b37      	ldr	r3, [pc, #220]	@ (8002ebc <handle_command+0x4d8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
		store_flash_data();
 8002de2:	f7fe fba3 	bl	800152c <store_flash_data>
		set_cmd_echo("CCOFF");
 8002de6:	4838      	ldr	r0, [pc, #224]	@ (8002ec8 <handle_command+0x4e4>)
 8002de8:	f7ff fde4 	bl	80029b4 <set_cmd_echo>
		sim_enabled = false;
 8002dec:	4b28      	ldr	r3, [pc, #160]	@ (8002e90 <handle_command+0x4ac>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
}
 8002df2:	e042      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, set_camera_north_on_command, strlen(set_camera_north_on_command)) == 0) {
 8002df4:	4835      	ldr	r0, [pc, #212]	@ (8002ecc <handle_command+0x4e8>)
 8002df6:	f7fd fa5b 	bl	80002b0 <strlen>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4933      	ldr	r1, [pc, #204]	@ (8002ecc <handle_command+0x4e8>)
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f007 f9ed 	bl	800a1e0 <strncmp>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <handle_command+0x43c>
		set_cmd_echo("SCNON");
 8002e0c:	4830      	ldr	r0, [pc, #192]	@ (8002ed0 <handle_command+0x4ec>)
 8002e0e:	f7ff fdd1 	bl	80029b4 <set_cmd_echo>
		setting_cam_north = true;
 8002e12:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <handle_command+0x4f0>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <handle_command+0x4ac>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	701a      	strb	r2, [r3, #0]
}
 8002e1e:	e02c      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, set_camera_north_off_command, strlen(set_camera_north_off_command)) == 0) {
 8002e20:	482d      	ldr	r0, [pc, #180]	@ (8002ed8 <handle_command+0x4f4>)
 8002e22:	f7fd fa45 	bl	80002b0 <strlen>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	492b      	ldr	r1, [pc, #172]	@ (8002ed8 <handle_command+0x4f4>)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f007 f9d7 	bl	800a1e0 <strncmp>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <handle_command+0x46c>
		set_cmd_echo("SCNOFF");
 8002e38:	4828      	ldr	r0, [pc, #160]	@ (8002edc <handle_command+0x4f8>)
 8002e3a:	f7ff fdbb 	bl	80029b4 <set_cmd_echo>
		setting_cam_north = false;
 8002e3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <handle_command+0x4f0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
		set_stepper_north();
 8002e44:	f7fe fa64 	bl	8001310 <set_stepper_north>
		sim_enabled = false;
 8002e48:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <handle_command+0x4ac>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
}
 8002e4e:	e014      	b.n	8002e7a <handle_command+0x496>
	else if (strncmp(cmd, release_payload_command, strlen(release_payload_command)) == 0) {
 8002e50:	4823      	ldr	r0, [pc, #140]	@ (8002ee0 <handle_command+0x4fc>)
 8002e52:	f7fd fa2d 	bl	80002b0 <strlen>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4921      	ldr	r1, [pc, #132]	@ (8002ee0 <handle_command+0x4fc>)
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f007 f9bf 	bl	800a1e0 <strncmp>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <handle_command+0x496>
		set_cmd_echo("MECPAYLOAD");
 8002e68:	481e      	ldr	r0, [pc, #120]	@ (8002ee4 <handle_command+0x500>)
 8002e6a:	f7ff fda3 	bl	80029b4 <set_cmd_echo>
		Set_Servo_Angle(90);
 8002e6e:	205a      	movs	r0, #90	@ 0x5a
 8002e70:	f7fe fa60 	bl	8001334 <Set_Servo_Angle>
		sim_enabled = false;
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <handle_command+0x4ac>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000908 	.word	0x20000908
 8002e88:	200000a8 	.word	0x200000a8
 8002e8c:	0800dbb8 	.word	0x0800dbb8
 8002e90:	20000978 	.word	0x20000978
 8002e94:	20000918 	.word	0x20000918
 8002e98:	20000624 	.word	0x20000624
 8002e9c:	20000964 	.word	0x20000964
 8002ea0:	20000970 	.word	0x20000970
 8002ea4:	20000628 	.word	0x20000628
 8002ea8:	20000968 	.word	0x20000968
 8002eac:	200000a0 	.word	0x200000a0
 8002eb0:	2000062c 	.word	0x2000062c
 8002eb4:	2000096c 	.word	0x2000096c
 8002eb8:	200000a4 	.word	0x200000a4
 8002ebc:	20000a7c 	.word	0x20000a7c
 8002ec0:	0800dbc0 	.word	0x0800dbc0
 8002ec4:	20000928 	.word	0x20000928
 8002ec8:	0800dbc8 	.word	0x0800dbc8
 8002ecc:	200008ac 	.word	0x200008ac
 8002ed0:	0800dbd0 	.word	0x0800dbd0
 8002ed4:	20000868 	.word	0x20000868
 8002ed8:	200008c0 	.word	0x200008c0
 8002edc:	0800dbd8 	.word	0x0800dbd8
 8002ee0:	20000938 	.word	0x20000938
 8002ee4:	0800dbe0 	.word	0x0800dbe0

08002ee8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);
 8002ef4:	4a24      	ldr	r2, [pc, #144]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002ef6:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	23ff      	movs	r3, #255	@ 0xff
 8002efe:	461a      	mov	r2, r3
 8002f00:	f007 fa13 	bl	800a32a <memcpy>

	memset(rx_data, 0, sizeof(rx_data));
 8002f04:	22ff      	movs	r2, #255	@ 0xff
 8002f06:	2100      	movs	r1, #0
 8002f08:	4820      	ldr	r0, [pc, #128]	@ (8002f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8002f0a:	f007 f952 	bl	800a1b2 <memset>

	if (rx_packet[0] == '~') {
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b7e      	cmp	r3, #126	@ 0x7e
 8002f14:	d12b      	bne.n	8002f6e <HAL_UARTEx_RxEventCallback+0x86>
		// Calculate where the comma and checksum should be
		char *comma_pos = &rx_packet[Size - 3];  // Comma is 3 characters from the end (2 for checksum, 1 for comma)
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	3b03      	subs	r3, #3
 8002f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]

		// Ensure the expected comma is at the right position
		if (*comma_pos == ',') {
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b2c      	cmp	r3, #44	@ 0x2c
 8002f26:	d122      	bne.n	8002f6e <HAL_UARTEx_RxEventCallback+0x86>
			// Null-terminate the data part (exclude comma and checksum)
			*comma_pos = '\0';
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]

			// Extract and convert the received checksum (2 characters after the comma)
			uint8_t received_checksum = (uint8_t)strtol(&rx_packet[Size - 2], NULL, 16);  // Convert checksum to integer
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	3b02      	subs	r3, #2
 8002f32:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002f34:	4413      	add	r3, r2
 8002f36:	2210      	movs	r2, #16
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f006 fb9e 	bl	800967c <strtol>
 8002f40:	4603      	mov	r3, r0
 8002f42:	72fb      	strb	r3, [r7, #11]
			// Calculate checksum of the data part (after '~' and before comma)
			uint8_t calculated_checksum = calculate_checksum(&rx_packet[1]);
 8002f44:	4812      	ldr	r0, [pc, #72]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002f46:	f7ff fad1 	bl	80024ec <calculate_checksum>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	72bb      	strb	r3, [r7, #10]
			// Compare calculated checksum with the received one
			if (calculated_checksum == received_checksum && command_ready == false) {
 8002f4e:	7aba      	ldrb	r2, [r7, #10]
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10b      	bne.n	8002f6e <HAL_UARTEx_RxEventCallback+0x86>
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_UARTEx_RxEventCallback+0xac>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <HAL_UARTEx_RxEventCallback+0x86>
				// Checksum is valid, process the command
				strcpy(command_buffer, &rx_packet[1]);
 8002f60:	490b      	ldr	r1, [pc, #44]	@ (8002f90 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002f62:	480d      	ldr	r0, [pc, #52]	@ (8002f98 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002f64:	f007 f9d9 	bl	800a31a <strcpy>
				command_ready = true;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <HAL_UARTEx_RxEventCallback+0xac>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Call function for next packet
	uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_data, RX_BFR_SIZE);
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	4906      	ldr	r1, [pc, #24]	@ (8002f8c <HAL_UARTEx_RxEventCallback+0xa4>)
 8002f72:	480a      	ldr	r0, [pc, #40]	@ (8002f9c <HAL_UARTEx_RxEventCallback+0xb4>)
 8002f74:	f004 fd3f 	bl	80079f6 <HAL_UARTEx_ReceiveToIdle_IT>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_UARTEx_RxEventCallback+0xb8>)
 8002f7e:	701a      	strb	r2, [r3, #0]

}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200002bc 	.word	0x200002bc
 8002f8c:	2000097c 	.word	0x2000097c
 8002f90:	200002bd 	.word	0x200002bd
 8002f94:	200003bb 	.word	0x200003bb
 8002f98:	200003bc 	.word	0x200003bc
 8002f9c:	200005ac 	.word	0x200005ac
 8002fa0:	20000a7b 	.word	0x20000a7b

08002fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa8:	f000 fd72 	bl	8003a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fac:	f000 f8c6 	bl	800313c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fb0:	f000 fa1e 	bl	80033f0 <MX_GPIO_Init>
  MX_I2C3_Init();
 8002fb4:	f000 f94e 	bl	8003254 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002fb8:	f000 f97a 	bl	80032b0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002fbc:	f000 f9ee 	bl	800339c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002fc0:	f000 f91a 	bl	80031f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  store_flash_data(); // Do this the first time to put the data into flash memory.
 8002fc4:	f7fe fab2 	bl	800152c <store_flash_data>
  load_flash_data();
 8002fc8:	f7fe fb1a 	bl	8001600 <load_flash_data>

  result = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDRESS, 3, 5);
 8002fcc:	2305      	movs	r3, #5
 8002fce:	2203      	movs	r2, #3
 8002fd0:	21d0      	movs	r1, #208	@ 0xd0
 8002fd2:	484c      	ldr	r0, [pc, #304]	@ (8003104 <main+0x160>)
 8002fd4:	f002 fafe 	bl	80055d4 <HAL_I2C_IsDeviceReady>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <main+0x164>)
 8002fde:	701a      	strb	r2, [r3, #0]

  init_sensors();
 8002fe0:	f7ff f9e0 	bl	80023a4 <init_sensors>
  init_commands();
 8002fe4:	f7ff f9fa 	bl	80023dc <init_commands>
  Servo_Init();
 8002fe8:	f7fe f9d2 	bl	8001390 <Servo_Init>

  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_data, RX_BFR_SIZE);
 8002fec:	22ff      	movs	r2, #255	@ 0xff
 8002fee:	4947      	ldr	r1, [pc, #284]	@ (800310c <main+0x168>)
 8002ff0:	4847      	ldr	r0, [pc, #284]	@ (8003110 <main+0x16c>)
 8002ff2:	f004 fd00 	bl	80079f6 <HAL_UARTEx_ReceiveToIdle_IT>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <main+0x170>)
 8002ffc:	701a      	strb	r2, [r3, #0]

  Set_Servo_Angle(0);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fe f998 	bl	8001334 <Set_Servo_Angle>

  // Set North Direction Offset
  read_MMC5603();
 8003004:	f7fe fcb8 	bl	8001978 <read_MMC5603>
  set_stepper_north();
 8003008:	f7fe f982 	bl	8001310 <set_stepper_north>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Correction of Camera Angle
	  if (!setting_cam_north){
 800300c:	4b42      	ldr	r3, [pc, #264]	@ (8003118 <main+0x174>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <main+0x74>
		  Stepper_Correction();
 8003014:	f7fe f8be 	bl	8001194 <Stepper_Correction>
	  }

	  // Happens 1 time per second
	  if (msCounter >= 1000){
 8003018:	4b40      	ldr	r3, [pc, #256]	@ (800311c <main+0x178>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003020:	d36b      	bcc.n	80030fa <main+0x156>
		  msCounter -= 1000;
 8003022:	4b3e      	ldr	r3, [pc, #248]	@ (800311c <main+0x178>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800302a:	4a3c      	ldr	r2, [pc, #240]	@ (800311c <main+0x178>)
 800302c:	6013      	str	r3, [r2, #0]

		  if (command_ready){
 800302e:	4b3c      	ldr	r3, [pc, #240]	@ (8003120 <main+0x17c>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <main+0xa0>
			  handle_command(command_buffer);
 8003038:	483a      	ldr	r0, [pc, #232]	@ (8003124 <main+0x180>)
 800303a:	f7ff fcd3 	bl	80029e4 <handle_command>
			  command_ready = false;
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <main+0x17c>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
		  }

		  if (calibrating_compass == 1){
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <main+0x184>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <main+0xac>
			  calibrate_mmc();
 800304c:	f7fe ff7c 	bl	8001f48 <calibrate_mmc>
		  }

		  if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003050:	482c      	ldr	r0, [pc, #176]	@ (8003104 <main+0x160>)
 8003052:	f002 fbed 	bl	8005830 <HAL_I2C_GetState>
 8003056:	4603      	mov	r3, r0
 8003058:	2b20      	cmp	r3, #32
 800305a:	d001      	beq.n	8003060 <main+0xbc>
			  init_sensors();
 800305c:	f7ff f9a2 	bl	80023a4 <init_sensors>
		  }

		  // Handle Mission Time
		  mission_time_sec++;
 8003060:	4b32      	ldr	r3, [pc, #200]	@ (800312c <main+0x188>)
 8003062:	f993 3000 	ldrsb.w	r3, [r3]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	b25a      	sxtb	r2, r3
 800306e:	4b2f      	ldr	r3, [pc, #188]	@ (800312c <main+0x188>)
 8003070:	701a      	strb	r2, [r3, #0]
		  if ( mission_time_sec >= 60 ){
 8003072:	4b2e      	ldr	r3, [pc, #184]	@ (800312c <main+0x188>)
 8003074:	f993 3000 	ldrsb.w	r3, [r3]
 8003078:	2b3b      	cmp	r3, #59	@ 0x3b
 800307a:	dd11      	ble.n	80030a0 <main+0xfc>
			  mission_time_sec -= 60;
 800307c:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <main+0x188>)
 800307e:	f993 3000 	ldrsb.w	r3, [r3]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3b3c      	subs	r3, #60	@ 0x3c
 8003086:	b2db      	uxtb	r3, r3
 8003088:	b25a      	sxtb	r2, r3
 800308a:	4b28      	ldr	r3, [pc, #160]	@ (800312c <main+0x188>)
 800308c:	701a      	strb	r2, [r3, #0]
			  mission_time_min += 1;
 800308e:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <main+0x18c>)
 8003090:	f993 3000 	ldrsb.w	r3, [r3]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3301      	adds	r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b25a      	sxtb	r2, r3
 800309c:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <main+0x18c>)
 800309e:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_min >= 60 ){
 80030a0:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <main+0x18c>)
 80030a2:	f993 3000 	ldrsb.w	r3, [r3]
 80030a6:	2b3b      	cmp	r3, #59	@ 0x3b
 80030a8:	dd11      	ble.n	80030ce <main+0x12a>
			  mission_time_min -= 60;
 80030aa:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <main+0x18c>)
 80030ac:	f993 3000 	ldrsb.w	r3, [r3]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	3b3c      	subs	r3, #60	@ 0x3c
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	b25a      	sxtb	r2, r3
 80030b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <main+0x18c>)
 80030ba:	701a      	strb	r2, [r3, #0]
			  mission_time_hr += 1;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <main+0x190>)
 80030be:	f993 3000 	ldrsb.w	r3, [r3]
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	b25a      	sxtb	r2, r3
 80030ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003134 <main+0x190>)
 80030cc:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_hr >= 24 ){
 80030ce:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <main+0x190>)
 80030d0:	f993 3000 	ldrsb.w	r3, [r3]
 80030d4:	2b17      	cmp	r3, #23
 80030d6:	dd08      	ble.n	80030ea <main+0x146>
			  mission_time_hr -= 24;
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <main+0x190>)
 80030da:	f993 3000 	ldrsb.w	r3, [r3]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3b18      	subs	r3, #24
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	b25a      	sxtb	r2, r3
 80030e6:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <main+0x190>)
 80030e8:	701a      	strb	r2, [r3, #0]
		  }

		  handle_state();
 80030ea:	f7ff fb83 	bl	80027f4 <handle_state>

		  // Control Telemetry
		  if (telemetry_status == 1){
 80030ee:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <main+0x194>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <main+0x156>
			  read_transmit_telemetry();
 80030f6:	f7ff fc4f 	bl	8002998 <read_transmit_telemetry>
		  }
	  }

	  HAL_Delay(50);
 80030fa:	2032      	movs	r0, #50	@ 0x32
 80030fc:	f000 fd3a 	bl	8003b74 <HAL_Delay>
	  if (!setting_cam_north){
 8003100:	e784      	b.n	800300c <main+0x68>
 8003102:	bf00      	nop
 8003104:	200004bc 	.word	0x200004bc
 8003108:	20000a84 	.word	0x20000a84
 800310c:	2000097c 	.word	0x2000097c
 8003110:	200005ac 	.word	0x200005ac
 8003114:	20000a7b 	.word	0x20000a7b
 8003118:	20000868 	.word	0x20000868
 800311c:	20000a80 	.word	0x20000a80
 8003120:	200003bb 	.word	0x200003bb
 8003124:	200003bc 	.word	0x200003bc
 8003128:	20000a7c 	.word	0x20000a7c
 800312c:	200005f6 	.word	0x200005f6
 8003130:	200005f5 	.word	0x200005f5
 8003134:	200005f4 	.word	0x200005f4
 8003138:	200000a8 	.word	0x200000a8

0800313c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b094      	sub	sp, #80	@ 0x50
 8003140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	2234      	movs	r2, #52	@ 0x34
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f007 f831 	bl	800a1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	2300      	movs	r3, #0
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <SystemClock_Config+0xb4>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	4a21      	ldr	r2, [pc, #132]	@ (80031f0 <SystemClock_Config+0xb4>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003170:	4b1f      	ldr	r3, [pc, #124]	@ (80031f0 <SystemClock_Config+0xb4>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800317c:	2300      	movs	r3, #0
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	4b1c      	ldr	r3, [pc, #112]	@ (80031f4 <SystemClock_Config+0xb8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <SystemClock_Config+0xb8>)
 8003186:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <SystemClock_Config+0xb8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800319c:	2301      	movs	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a0:	2310      	movs	r3, #16
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fa31 	bl	8006614 <HAL_RCC_OscConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80031b8:	f000 f9a4 	bl	8003504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031bc:	230f      	movs	r3, #15
 80031be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 f83c 	bl	8006254 <HAL_RCC_ClockConfig>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80031e2:	f000 f98f 	bl	8003504 <Error_Handler>
  }
}
 80031e6:	bf00      	nop
 80031e8:	3750      	adds	r7, #80	@ 0x50
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40007000 	.word	0x40007000

080031f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031fc:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <MX_I2C1_Init+0x50>)
 80031fe:	4a13      	ldr	r2, [pc, #76]	@ (800324c <MX_I2C1_Init+0x54>)
 8003200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003204:	4a12      	ldr	r2, [pc, #72]	@ (8003250 <MX_I2C1_Init+0x58>)
 8003206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003208:	4b0f      	ldr	r3, [pc, #60]	@ (8003248 <MX_I2C1_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003216:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800321a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <MX_I2C1_Init+0x50>)
 800321e:	2200      	movs	r2, #0
 8003220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003224:	2200      	movs	r2, #0
 8003226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <MX_I2C1_Init+0x50>)
 800322a:	2200      	movs	r2, #0
 800322c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <MX_I2C1_Init+0x50>)
 8003236:	f001 fa2d 	bl	8004694 <HAL_I2C_Init>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003240:	f000 f960 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200004bc 	.word	0x200004bc
 800324c:	40005400 	.word	0x40005400
 8003250:	000186a0 	.word	0x000186a0

08003254 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003258:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <MX_I2C3_Init+0x50>)
 800325a:	4a13      	ldr	r2, [pc, #76]	@ (80032a8 <MX_I2C3_Init+0x54>)
 800325c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800325e:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003260:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <MX_I2C3_Init+0x58>)
 8003262:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003264:	4b0f      	ldr	r3, [pc, #60]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800326a:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <MX_I2C3_Init+0x50>)
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003270:	4b0c      	ldr	r3, [pc, #48]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003272:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003276:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <MX_I2C3_Init+0x50>)
 800327a:	2200      	movs	r2, #0
 800327c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800327e:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003284:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <MX_I2C3_Init+0x50>)
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003290:	4804      	ldr	r0, [pc, #16]	@ (80032a4 <MX_I2C3_Init+0x50>)
 8003292:	f001 f9ff 	bl	8004694 <HAL_I2C_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800329c:	f000 f932 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000510 	.word	0x20000510
 80032a8:	40005c00 	.word	0x40005c00
 80032ac:	000186a0 	.word	0x000186a0

080032b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	@ 0x38
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
 80032c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c4:	f107 0320 	add.w	r3, r7, #32
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ce:	1d3b      	adds	r3, r7, #4
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
 80032dc:	615a      	str	r2, [r3, #20]
 80032de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003398 <MX_TIM2_Init+0xe8>)
 80032e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80032e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80032e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <MX_TIM2_Init+0xe8>)
 80032ea:	2253      	movs	r2, #83	@ 0x53
 80032ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <MX_TIM2_Init+0xe8>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80032f4:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <MX_TIM2_Init+0xe8>)
 80032f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80032fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fc:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <MX_TIM2_Init+0xe8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <MX_TIM2_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003308:	4823      	ldr	r0, [pc, #140]	@ (8003398 <MX_TIM2_Init+0xe8>)
 800330a:	f003 fc07 	bl	8006b1c <HAL_TIM_Base_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003314:	f000 f8f6 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003318:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800331e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003322:	4619      	mov	r1, r3
 8003324:	481c      	ldr	r0, [pc, #112]	@ (8003398 <MX_TIM2_Init+0xe8>)
 8003326:	f003 fe2b 	bl	8006f80 <HAL_TIM_ConfigClockSource>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003330:	f000 f8e8 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003334:	4818      	ldr	r0, [pc, #96]	@ (8003398 <MX_TIM2_Init+0xe8>)
 8003336:	f003 fc40 	bl	8006bba <HAL_TIM_PWM_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003340:	f000 f8e0 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003344:	2300      	movs	r3, #0
 8003346:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800334c:	f107 0320 	add.w	r3, r7, #32
 8003350:	4619      	mov	r1, r3
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <MX_TIM2_Init+0xe8>)
 8003354:	f004 f9f8 	bl	8007748 <HAL_TIMEx_MasterConfigSynchronization>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800335e:	f000 f8d1 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003362:	2360      	movs	r3, #96	@ 0x60
 8003364:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003366:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800336a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003374:	1d3b      	adds	r3, r7, #4
 8003376:	2208      	movs	r2, #8
 8003378:	4619      	mov	r1, r3
 800337a:	4807      	ldr	r0, [pc, #28]	@ (8003398 <MX_TIM2_Init+0xe8>)
 800337c:	f003 fd3e 	bl	8006dfc <HAL_TIM_PWM_ConfigChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003386:	f000 f8bd 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800338a:	4803      	ldr	r0, [pc, #12]	@ (8003398 <MX_TIM2_Init+0xe8>)
 800338c:	f000 f9a6 	bl	80036dc <HAL_TIM_MspPostInit>

}
 8003390:	bf00      	nop
 8003392:	3738      	adds	r7, #56	@ 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000564 	.word	0x20000564

0800339c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033a2:	4a12      	ldr	r2, [pc, #72]	@ (80033ec <MX_USART1_UART_Init+0x50>)
 80033a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033a6:	4b10      	ldr	r3, [pc, #64]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033b4:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033c2:	220c      	movs	r2, #12
 80033c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033d2:	4805      	ldr	r0, [pc, #20]	@ (80033e8 <MX_USART1_UART_Init+0x4c>)
 80033d4:	f004 fa34 	bl	8007840 <HAL_UART_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033de:	f000 f891 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200005ac 	.word	0x200005ac
 80033ec:	40011000 	.word	0x40011000

080033f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f6:	f107 0314 	add.w	r3, r7, #20
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b3b      	ldr	r3, [pc, #236]	@ (80034f8 <MX_GPIO_Init+0x108>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	4a3a      	ldr	r2, [pc, #232]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003414:	6313      	str	r3, [r2, #48]	@ 0x30
 8003416:	4b38      	ldr	r3, [pc, #224]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	4a33      	ldr	r2, [pc, #204]	@ (80034f8 <MX_GPIO_Init+0x108>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6313      	str	r3, [r2, #48]	@ 0x30
 8003432:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	4a2c      	ldr	r2, [pc, #176]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6313      	str	r3, [r2, #48]	@ 0x30
 800344e:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	4a25      	ldr	r2, [pc, #148]	@ (80034f8 <MX_GPIO_Init+0x108>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	6313      	str	r3, [r2, #48]	@ 0x30
 800346a:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <MX_GPIO_Init+0x108>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	607b      	str	r3, [r7, #4]
 8003474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800347c:	481f      	ldr	r0, [pc, #124]	@ (80034fc <MX_GPIO_Init+0x10c>)
 800347e:	f001 f8cb 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003482:	2200      	movs	r2, #0
 8003484:	2110      	movs	r1, #16
 8003486:	481e      	ldr	r0, [pc, #120]	@ (8003500 <MX_GPIO_Init+0x110>)
 8003488:	f001 f8c6 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step1_Pin Step2_Pin Step3_Pin Step4_Pin */
  GPIO_InitStruct.Pin = Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin;
 800348c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	4815      	ldr	r0, [pc, #84]	@ (80034fc <MX_GPIO_Init+0x10c>)
 80034a6:	f000 ff3b 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80034aa:	2310      	movs	r3, #16
 80034ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	480f      	ldr	r0, [pc, #60]	@ (8003500 <MX_GPIO_Init+0x110>)
 80034c2:	f000 ff2d 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Sensor_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_Pin;
 80034c6:	2320      	movs	r3, #32
 80034c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80034ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Sensor_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	4809      	ldr	r0, [pc, #36]	@ (8003500 <MX_GPIO_Init+0x110>)
 80034dc:	f000 ff20 	bl	8004320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2100      	movs	r1, #0
 80034e4:	2017      	movs	r0, #23
 80034e6:	f000 fc44 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034ea:	2017      	movs	r0, #23
 80034ec:	f000 fc5d 	bl	8003daa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034f0:	bf00      	nop
 80034f2:	3728      	adds	r7, #40	@ 0x28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020800 	.word	0x40020800
 8003500:	40020400 	.word	0x40020400

08003504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <Error_Handler+0x8>

08003510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_MspInit+0x4c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <HAL_MspInit+0x4c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_MspInit+0x4c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_MspInit+0x4c>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	4a08      	ldr	r2, [pc, #32]	@ (800355c <HAL_MspInit+0x4c>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	@ 0x40
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_MspInit+0x4c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	@ 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a42      	ldr	r2, [pc, #264]	@ (8003688 <HAL_I2C_MspInit+0x128>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d12c      	bne.n	80035dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b41      	ldr	r3, [pc, #260]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	4a40      	ldr	r2, [pc, #256]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	6313      	str	r3, [r2, #48]	@ 0x30
 8003592:	4b3e      	ldr	r3, [pc, #248]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800359e:	23c0      	movs	r3, #192	@ 0xc0
 80035a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035a2:	2312      	movs	r3, #18
 80035a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ae:	2304      	movs	r3, #4
 80035b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	f107 031c 	add.w	r3, r7, #28
 80035b6:	4619      	mov	r1, r3
 80035b8:	4835      	ldr	r0, [pc, #212]	@ (8003690 <HAL_I2C_MspInit+0x130>)
 80035ba:	f000 feb1 	bl	8004320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	4b32      	ldr	r3, [pc, #200]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a31      	ldr	r2, [pc, #196]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b2f      	ldr	r3, [pc, #188]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80035da:	e050      	b.n	800367e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003694 <HAL_I2C_MspInit+0x134>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d14b      	bne.n	800367e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	4b28      	ldr	r3, [pc, #160]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a27      	ldr	r2, [pc, #156]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b25      	ldr	r3, [pc, #148]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	613b      	str	r3, [r7, #16]
 8003600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	4b21      	ldr	r3, [pc, #132]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	4a20      	ldr	r2, [pc, #128]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	6313      	str	r3, [r2, #48]	@ 0x30
 8003612:	4b1e      	ldr	r3, [pc, #120]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800361e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003624:	2312      	movs	r3, #18
 8003626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800362c:	2303      	movs	r3, #3
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003630:	2304      	movs	r3, #4
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 031c 	add.w	r3, r7, #28
 8003638:	4619      	mov	r1, r3
 800363a:	4817      	ldr	r0, [pc, #92]	@ (8003698 <HAL_I2C_MspInit+0x138>)
 800363c:	f000 fe70 	bl	8004320 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003646:	2312      	movs	r3, #18
 8003648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364e:	2303      	movs	r3, #3
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8003652:	2309      	movs	r3, #9
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003656:	f107 031c 	add.w	r3, r7, #28
 800365a:	4619      	mov	r1, r3
 800365c:	480c      	ldr	r0, [pc, #48]	@ (8003690 <HAL_I2C_MspInit+0x130>)
 800365e:	f000 fe5f 	bl	8004320 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4a08      	ldr	r2, [pc, #32]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 800366c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003670:	6413      	str	r3, [r2, #64]	@ 0x40
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_I2C_MspInit+0x12c>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
}
 800367e:	bf00      	nop
 8003680:	3730      	adds	r7, #48	@ 0x30
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40005400 	.word	0x40005400
 800368c:	40023800 	.word	0x40023800
 8003690:	40020400 	.word	0x40020400
 8003694:	40005c00 	.word	0x40005c00
 8003698:	40020000 	.word	0x40020000

0800369c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d10d      	bne.n	80036ca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_TIM_Base_MspInit+0x3c>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <HAL_TIM_Base_MspInit+0x3c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_TIM_Base_MspInit+0x3c>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800

080036dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fc:	d11d      	bne.n	800373a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_TIM_MspPostInit+0x68>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	4a0f      	ldr	r2, [pc, #60]	@ (8003744 <HAL_TIM_MspPostInit+0x68>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6313      	str	r3, [r2, #48]	@ 0x30
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <HAL_TIM_MspPostInit+0x68>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 800371a:	2304      	movs	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371e:	2302      	movs	r3, #2
 8003720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800372a:	2301      	movs	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4619      	mov	r1, r3
 8003734:	4804      	ldr	r0, [pc, #16]	@ (8003748 <HAL_TIM_MspPostInit+0x6c>)
 8003736:	f000 fdf3 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40020000 	.word	0x40020000

0800374c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	@ 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a19      	ldr	r2, [pc, #100]	@ (80037d0 <HAL_UART_MspInit+0x84>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d12c      	bne.n	80037c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	4a17      	ldr	r2, [pc, #92]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 8003778:	f043 0310 	orr.w	r3, r3, #16
 800377c:	6453      	str	r3, [r2, #68]	@ 0x44
 800377e:	4b15      	ldr	r3, [pc, #84]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <HAL_UART_MspInit+0x88>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80037aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037b8:	2307      	movs	r3, #7
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4619      	mov	r1, r3
 80037c2:	4805      	ldr	r0, [pc, #20]	@ (80037d8 <HAL_UART_MspInit+0x8c>)
 80037c4:	f000 fdac 	bl	8004320 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80037c8:	bf00      	nop
 80037ca:	3728      	adds	r7, #40	@ 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40011000 	.word	0x40011000
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020000 	.word	0x40020000

080037dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <NMI_Handler+0x4>

080037e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <HardFault_Handler+0x4>

080037ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <MemManage_Handler+0x4>

080037f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <BusFault_Handler+0x4>

080037fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <UsageFault_Handler+0x4>

08003804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003834:	f000 f97e 	bl	8003b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  msCounter++;
 8003838:	4b03      	ldr	r3, [pc, #12]	@ (8003848 <SysTick_Handler+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	4a02      	ldr	r2, [pc, #8]	@ (8003848 <SysTick_Handler+0x18>)
 8003840:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000a80 	.word	0x20000a80

0800384c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	uint32_t current_time = HAL_GetTick(); // Get current system time in milliseconds
 8003852:	f000 f983 	bl	8003b5c <HAL_GetTick>
 8003856:	6078      	str	r0, [r7, #4]

	// Check if the interrupt is within the debounce period
	if (current_time - last_interrupt_time > 10)  // 10 ms debounce time
 8003858:	4b0a      	ldr	r3, [pc, #40]	@ (8003884 <EXTI9_5_IRQHandler+0x38>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b0a      	cmp	r3, #10
 8003862:	d907      	bls.n	8003874 <EXTI9_5_IRQHandler+0x28>
	{
		pulse_count++;   // Increment pulse count only if outside debounce period
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <EXTI9_5_IRQHandler+0x3c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	4a07      	ldr	r2, [pc, #28]	@ (8003888 <EXTI9_5_IRQHandler+0x3c>)
 800386c:	6013      	str	r3, [r2, #0]
		last_interrupt_time = current_time; // Update last interrupt time
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <EXTI9_5_IRQHandler+0x38>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_Pin);
 8003874:	2020      	movs	r0, #32
 8003876:	f000 fee9 	bl	800464c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000a88 	.word	0x20000a88
 8003888:	20000850 	.word	0x20000850

0800388c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return 1;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <_kill>:

int _kill(int pid, int sig)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80038a6:	f006 fd0b 	bl	800a2c0 <__errno>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2216      	movs	r2, #22
 80038ae:	601a      	str	r2, [r3, #0]
  return -1;
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <_exit>:

void _exit (int status)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038c4:	f04f 31ff 	mov.w	r1, #4294967295
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ffe7 	bl	800389c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <_exit+0x12>

080038d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b086      	sub	sp, #24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e00a      	b.n	80038fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038e4:	f3af 8000 	nop.w
 80038e8:	4601      	mov	r1, r0
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	60ba      	str	r2, [r7, #8]
 80038f0:	b2ca      	uxtb	r2, r1
 80038f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbf0      	blt.n	80038e4 <_read+0x12>
  }

  return len;
 8003902:	687b      	ldr	r3, [r7, #4]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e009      	b.n	8003932 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	60ba      	str	r2, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3301      	adds	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	429a      	cmp	r2, r3
 8003938:	dbf1      	blt.n	800391e <_write+0x12>
  }
  return len;
 800393a:	687b      	ldr	r3, [r7, #4]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_close>:

int _close(int file)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800396c:	605a      	str	r2, [r3, #4]
  return 0;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <_isatty>:

int _isatty(int file)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <_sbrk+0x5c>)
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <_sbrk+0x60>)
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <_sbrk+0x64>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <_sbrk+0x64>)
 80039ca:	4a12      	ldr	r2, [pc, #72]	@ (8003a14 <_sbrk+0x68>)
 80039cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039ce:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <_sbrk+0x64>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d207      	bcs.n	80039ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039dc:	f006 fc70 	bl	800a2c0 <__errno>
 80039e0:	4603      	mov	r3, r0
 80039e2:	220c      	movs	r2, #12
 80039e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	e009      	b.n	8003a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039ec:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <_sbrk+0x64>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039f2:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <_sbrk+0x64>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	4a05      	ldr	r2, [pc, #20]	@ (8003a10 <_sbrk+0x64>)
 80039fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20040000 	.word	0x20040000
 8003a0c:	00000400 	.word	0x00000400
 8003a10:	20000a8c 	.word	0x20000a8c
 8003a14:	20000c00 	.word	0x20000c00

08003a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <SystemInit+0x20>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a22:	4a05      	ldr	r2, [pc, #20]	@ (8003a38 <SystemInit+0x20>)
 8003a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003a3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a40:	f7ff ffea 	bl	8003a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a44:	480c      	ldr	r0, [pc, #48]	@ (8003a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a46:	490d      	ldr	r1, [pc, #52]	@ (8003a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a48:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a4c:	e002      	b.n	8003a54 <LoopCopyDataInit>

08003a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a52:	3304      	adds	r3, #4

08003a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a58:	d3f9      	bcc.n	8003a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a60:	e001      	b.n	8003a66 <LoopFillZerobss>

08003a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a64:	3204      	adds	r2, #4

08003a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a68:	d3fb      	bcc.n	8003a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a6a:	f006 fc2f 	bl	800a2cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a6e:	f7ff fa99 	bl	8002fa4 <main>
  bx  lr    
 8003a72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a74:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a7c:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003a80:	0800e0d0 	.word	0x0800e0d0
  ldr r2, =_sbss
 8003a84:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003a88:	20000c00 	.word	0x20000c00

08003a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a8c:	e7fe      	b.n	8003a8c <ADC_IRQHandler>
	...

08003a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a94:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <HAL_Init+0x40>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad0 <HAL_Init+0x40>)
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_Init+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <HAL_Init+0x40>)
 8003aa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003aac:	4b08      	ldr	r3, [pc, #32]	@ (8003ad0 <HAL_Init+0x40>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a07      	ldr	r2, [pc, #28]	@ (8003ad0 <HAL_Init+0x40>)
 8003ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab8:	2003      	movs	r0, #3
 8003aba:	f000 f94f 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003abe:	200f      	movs	r0, #15
 8003ac0:	f000 f808 	bl	8003ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ac4:	f7ff fd24 	bl	8003510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023c00 	.word	0x40023c00

08003ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_InitTick+0x54>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b12      	ldr	r3, [pc, #72]	@ (8003b2c <HAL_InitTick+0x58>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f967 	bl	8003dc6 <HAL_SYSTICK_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e00e      	b.n	8003b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d80a      	bhi.n	8003b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f000 f92f 	bl	8003d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b14:	4a06      	ldr	r2, [pc, #24]	@ (8003b30 <HAL_InitTick+0x5c>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200000cc 	.word	0x200000cc
 8003b2c:	200000d4 	.word	0x200000d4
 8003b30:	200000d0 	.word	0x200000d0

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_IncTick+0x20>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_IncTick+0x24>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	200000d4 	.word	0x200000d4
 8003b58:	20000a90 	.word	0x20000a90

08003b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b60:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <HAL_GetTick+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	20000a90 	.word	0x20000a90

08003b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff ffee 	bl	8003b5c <HAL_GetTick>
 8003b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d005      	beq.n	8003b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <HAL_Delay+0x44>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b9a:	bf00      	nop
 8003b9c:	f7ff ffde 	bl	8003b5c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d8f7      	bhi.n	8003b9c <HAL_Delay+0x28>
  {
  }
}
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200000d4 	.word	0x200000d4

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	@ (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	@ (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7ff ff8e 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff29 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d84:	f7ff ff3e 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	f7ff ff8e 	bl	8003cb0 <NVIC_EncodePriority>
 8003d94:	4602      	mov	r2, r0
 8003d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff5d 	bl	8003c5c <__NVIC_SetPriority>
}
 8003da2:	bf00      	nop
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff31 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ffa2 	bl	8003d18 <SysTick_Config>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff feb6 	bl	8003b5c <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d008      	beq.n	8003e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e052      	b.n	8003eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0216 	bic.w	r2, r2, #22
 8003e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <HAL_DMA_Abort+0x62>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0208 	bic.w	r2, r2, #8
 8003e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e60:	e013      	b.n	8003e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e62:	f7ff fe7b 	bl	8003b5c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d90c      	bls.n	8003e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e015      	b.n	8003eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e4      	bne.n	8003e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	223f      	movs	r2, #63	@ 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d004      	beq.n	8003edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2280      	movs	r2, #128	@ 0x80
 8003ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e00c      	b.n	8003ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f16:	4b23      	ldr	r3, [pc, #140]	@ (8003fa4 <HAL_FLASH_Program+0xa0>)
 8003f18:	7e1b      	ldrb	r3, [r3, #24]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_FLASH_Program+0x1e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e03b      	b.n	8003f9a <HAL_FLASH_Program+0x96>
 8003f22:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <HAL_FLASH_Program+0xa0>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f2c:	f000 f870 	bl	8004010 <FLASH_WaitForLastOperation>
 8003f30:	4603      	mov	r3, r0
 8003f32:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12b      	bne.n	8003f92 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003f40:	783b      	ldrb	r3, [r7, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	f000 f91b 	bl	8004180 <FLASH_Program_Byte>
 8003f4a:	e016      	b.n	8003f7a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d105      	bne.n	8003f5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003f52:	883b      	ldrh	r3, [r7, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	68b8      	ldr	r0, [r7, #8]
 8003f58:	f000 f8ee 	bl	8004138 <FLASH_Program_HalfWord>
 8003f5c:	e00d      	b.n	8003f7a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d105      	bne.n	8003f70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	68b8      	ldr	r0, [r7, #8]
 8003f6a:	f000 f8c3 	bl	80040f4 <FLASH_Program_Word>
 8003f6e:	e004      	b.n	8003f7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f74:	68b8      	ldr	r0, [r7, #8]
 8003f76:	f000 f88b 	bl	8004090 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f7a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f7e:	f000 f847 	bl	8004010 <FLASH_WaitForLastOperation>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003f86:	4b08      	ldr	r3, [pc, #32]	@ (8003fa8 <HAL_FLASH_Program+0xa4>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	@ (8003fa8 <HAL_FLASH_Program+0xa4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f92:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <HAL_FLASH_Program+0xa0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	761a      	strb	r2, [r3, #24]

  return status;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000a94 	.word	0x20000a94
 8003fa8:	40023c00 	.word	0x40023c00

08003fac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da0b      	bge.n	8003fd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	@ (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <HAL_FLASH_Unlock+0x3c>)
 8003fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fc4:	4b07      	ldr	r3, [pc, #28]	@ (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fc6:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_FLASH_Unlock+0x40>)
 8003fc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fca:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da01      	bge.n	8003fd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	45670123 	.word	0x45670123
 8003fec:	cdef89ab 	.word	0xcdef89ab

08003ff0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	@ (800400c <HAL_FLASH_Lock+0x1c>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a04      	ldr	r2, [pc, #16]	@ (800400c <HAL_FLASH_Lock+0x1c>)
 8003ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ffe:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40023c00 	.word	0x40023c00

08004010 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800401c:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <FLASH_WaitForLastOperation+0x78>)
 800401e:	2200      	movs	r2, #0
 8004020:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004022:	f7ff fd9b 	bl	8003b5c <HAL_GetTick>
 8004026:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004028:	e010      	b.n	800404c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d00c      	beq.n	800404c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <FLASH_WaitForLastOperation+0x38>
 8004038:	f7ff fd90 	bl	8003b5c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d201      	bcs.n	800404c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e019      	b.n	8004080 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <FLASH_WaitForLastOperation+0x7c>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e8      	bne.n	800402a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <FLASH_WaitForLastOperation+0x7c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <FLASH_WaitForLastOperation+0x7c>)
 8004066:	2201      	movs	r2, #1
 8004068:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <FLASH_WaitForLastOperation+0x7c>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004076:	f000 f8a5 	bl	80041c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0

}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000a94 	.word	0x20000a94
 800408c:	40023c00 	.word	0x40023c00

08004090 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800409c:	4b14      	ldr	r3, [pc, #80]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4a13      	ldr	r2, [pc, #76]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 80040ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80040b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	@ (80040f0 <FLASH_Program_DoubleWord+0x60>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80040c6:	f3bf 8f6f 	isb	sy
}
 80040ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80040cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	000a      	movs	r2, r1
 80040da:	2300      	movs	r3, #0
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	3104      	adds	r1, #4
 80040e0:	4613      	mov	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40023c00 	.word	0x40023c00

080040f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004134 <FLASH_Program_Word+0x40>)
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	4a0c      	ldr	r2, [pc, #48]	@ (8004134 <FLASH_Program_Word+0x40>)
 8004104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004108:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800410a:	4b0a      	ldr	r3, [pc, #40]	@ (8004134 <FLASH_Program_Word+0x40>)
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <FLASH_Program_Word+0x40>)
 8004110:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004114:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004116:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <FLASH_Program_Word+0x40>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4a06      	ldr	r2, [pc, #24]	@ (8004134 <FLASH_Program_Word+0x40>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40023c00 	.word	0x40023c00

08004138 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004144:	4b0d      	ldr	r3, [pc, #52]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 800414a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800414e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004150:	4b0a      	ldr	r3, [pc, #40]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	4a09      	ldr	r2, [pc, #36]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 8004156:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800415a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800415c:	4b07      	ldr	r3, [pc, #28]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4a06      	ldr	r2, [pc, #24]	@ (800417c <FLASH_Program_HalfWord+0x44>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	887a      	ldrh	r2, [r7, #2]
 800416c:	801a      	strh	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023c00 	.word	0x40023c00

08004180 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a0b      	ldr	r2, [pc, #44]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 8004192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 800419a:	4a09      	ldr	r2, [pc, #36]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041a0:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	4a06      	ldr	r2, [pc, #24]	@ (80041c0 <FLASH_Program_Byte+0x40>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	701a      	strb	r2, [r3, #0]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40023c00 	.word	0x40023c00

080041c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80041c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80041d4:	4b2d      	ldr	r3, [pc, #180]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f043 0310 	orr.w	r3, r3, #16
 80041dc:	4a2b      	ldr	r2, [pc, #172]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 80041de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80041e0:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 80041e2:	2210      	movs	r2, #16
 80041e4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80041e6:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80041f2:	4b26      	ldr	r3, [pc, #152]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f043 0308 	orr.w	r3, r3, #8
 80041fa:	4a24      	ldr	r2, [pc, #144]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 80041fc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80041fe:	4b22      	ldr	r3, [pc, #136]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 8004200:	2220      	movs	r2, #32
 8004202:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004204:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004210:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 800421a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 800421e:	2240      	movs	r2, #64	@ 0x40
 8004220:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004222:	4b19      	ldr	r3, [pc, #100]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 8004238:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800423a:	4b13      	ldr	r3, [pc, #76]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 800423c:	2280      	movs	r2, #128	@ 0x80
 800423e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004240:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d009      	beq.n	8004260 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800424c:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 8004256:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 800425a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800425e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004260:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800426c:	4b07      	ldr	r3, [pc, #28]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	4a05      	ldr	r2, [pc, #20]	@ (800428c <FLASH_SetErrorCode+0xc8>)
 8004276:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <FLASH_SetErrorCode+0xc4>)
 800427a:	2202      	movs	r2, #2
 800427c:	60da      	str	r2, [r3, #12]
  }
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40023c00 	.word	0x40023c00
 800428c:	20000a94 	.word	0x20000a94

08004290 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e010      	b.n	80042ce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d103      	bne.n	80042ba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80042b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e009      	b.n	80042ce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d103      	bne.n	80042c8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80042c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e002      	b.n	80042ce <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80042c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80042cc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042ce:	4b13      	ldr	r3, [pc, #76]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80042da:	4b10      	ldr	r3, [pc, #64]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	490f      	ldr	r1, [pc, #60]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80042f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	4313      	orrs	r3, r2
 80042fc:	4a07      	ldr	r2, [pc, #28]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	4a04      	ldr	r2, [pc, #16]	@ (800431c <FLASH_Erase_Sector+0x8c>)
 800430a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430e:	6113      	str	r3, [r2, #16]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	40023c00 	.word	0x40023c00

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b089      	sub	sp, #36	@ 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
 800433a:	e153      	b.n	80045e4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	429a      	cmp	r2, r3
 8004356:	f040 8142 	bne.w	80045de <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d005      	beq.n	8004372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436e:	2b02      	cmp	r3, #2
 8004370:	d130      	bne.n	80043d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	2203      	movs	r2, #3
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a8:	2201      	movs	r2, #1
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	f003 0201 	and.w	r2, r3, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d017      	beq.n	8004410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2203      	movs	r2, #3
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d123      	bne.n	8004464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	08da      	lsrs	r2, r3, #3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3208      	adds	r2, #8
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	220f      	movs	r2, #15
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4013      	ands	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08da      	lsrs	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3208      	adds	r2, #8
 800445e:	69b9      	ldr	r1, [r7, #24]
 8004460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	2203      	movs	r2, #3
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0203 	and.w	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 809c 	beq.w	80045de <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	4b54      	ldr	r3, [pc, #336]	@ (80045fc <HAL_GPIO_Init+0x2dc>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	4a53      	ldr	r2, [pc, #332]	@ (80045fc <HAL_GPIO_Init+0x2dc>)
 80044b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b6:	4b51      	ldr	r3, [pc, #324]	@ (80045fc <HAL_GPIO_Init+0x2dc>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044c2:	4a4f      	ldr	r2, [pc, #316]	@ (8004600 <HAL_GPIO_Init+0x2e0>)
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a46      	ldr	r2, [pc, #280]	@ (8004604 <HAL_GPIO_Init+0x2e4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_GPIO_Init+0x1f6>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a45      	ldr	r2, [pc, #276]	@ (8004608 <HAL_GPIO_Init+0x2e8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00d      	beq.n	8004512 <HAL_GPIO_Init+0x1f2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a44      	ldr	r2, [pc, #272]	@ (800460c <HAL_GPIO_Init+0x2ec>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d007      	beq.n	800450e <HAL_GPIO_Init+0x1ee>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a43      	ldr	r2, [pc, #268]	@ (8004610 <HAL_GPIO_Init+0x2f0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d101      	bne.n	800450a <HAL_GPIO_Init+0x1ea>
 8004506:	2303      	movs	r3, #3
 8004508:	e006      	b.n	8004518 <HAL_GPIO_Init+0x1f8>
 800450a:	2307      	movs	r3, #7
 800450c:	e004      	b.n	8004518 <HAL_GPIO_Init+0x1f8>
 800450e:	2302      	movs	r3, #2
 8004510:	e002      	b.n	8004518 <HAL_GPIO_Init+0x1f8>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <HAL_GPIO_Init+0x1f8>
 8004516:	2300      	movs	r3, #0
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	f002 0203 	and.w	r2, r2, #3
 800451e:	0092      	lsls	r2, r2, #2
 8004520:	4093      	lsls	r3, r2
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004528:	4935      	ldr	r1, [pc, #212]	@ (8004600 <HAL_GPIO_Init+0x2e0>)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	3302      	adds	r3, #2
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004536:	4b37      	ldr	r3, [pc, #220]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	43db      	mvns	r3, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4013      	ands	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455a:	4a2e      	ldr	r2, [pc, #184]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004560:	4b2c      	ldr	r3, [pc, #176]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004584:	4a23      	ldr	r2, [pc, #140]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458a:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	43db      	mvns	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4013      	ands	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ae:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b4:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004614 <HAL_GPIO_Init+0x2f4>)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3301      	adds	r3, #1
 80045e2:	61fb      	str	r3, [r7, #28]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b0f      	cmp	r3, #15
 80045e8:	f67f aea8 	bls.w	800433c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3724      	adds	r7, #36	@ 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	40013800 	.word	0x40013800
 8004604:	40020000 	.word	0x40020000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020800 	.word	0x40020800
 8004610:	40020c00 	.word	0x40020c00
 8004614:	40013c00 	.word	0x40013c00

08004618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
 8004624:	4613      	mov	r3, r2
 8004626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004628:	787b      	ldrb	r3, [r7, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004634:	e003      	b.n	800463e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004636:	887b      	ldrh	r3, [r7, #2]
 8004638:	041a      	lsls	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	619a      	str	r2, [r3, #24]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004656:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	4013      	ands	r3, r2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d006      	beq.n	8004670 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004662:	4a05      	ldr	r2, [pc, #20]	@ (8004678 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004668:	88fb      	ldrh	r3, [r7, #6]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f806 	bl	800467c <HAL_GPIO_EXTI_Callback>
  }
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40013c00 	.word	0x40013c00

0800467c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e12b      	b.n	80048fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe ff50 	bl	8003560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2224      	movs	r2, #36	@ 0x24
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046f8:	f001 ff64 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4a81      	ldr	r2, [pc, #516]	@ (8004908 <HAL_I2C_Init+0x274>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d807      	bhi.n	8004718 <HAL_I2C_Init+0x84>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a80      	ldr	r2, [pc, #512]	@ (800490c <HAL_I2C_Init+0x278>)
 800470c:	4293      	cmp	r3, r2
 800470e:	bf94      	ite	ls
 8004710:	2301      	movls	r3, #1
 8004712:	2300      	movhi	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e006      	b.n	8004726 <HAL_I2C_Init+0x92>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a7d      	ldr	r2, [pc, #500]	@ (8004910 <HAL_I2C_Init+0x27c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	bf94      	ite	ls
 8004720:	2301      	movls	r3, #1
 8004722:	2300      	movhi	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0e7      	b.n	80048fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a78      	ldr	r2, [pc, #480]	@ (8004914 <HAL_I2C_Init+0x280>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0c9b      	lsrs	r3, r3, #18
 8004738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a6a      	ldr	r2, [pc, #424]	@ (8004908 <HAL_I2C_Init+0x274>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <HAL_I2C_Init+0xd4>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3301      	adds	r3, #1
 8004766:	e009      	b.n	800477c <HAL_I2C_Init+0xe8>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	4a69      	ldr	r2, [pc, #420]	@ (8004918 <HAL_I2C_Init+0x284>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	099b      	lsrs	r3, r3, #6
 800477a:	3301      	adds	r3, #1
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	430b      	orrs	r3, r1
 8004782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800478e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	495c      	ldr	r1, [pc, #368]	@ (8004908 <HAL_I2C_Init+0x274>)
 8004798:	428b      	cmp	r3, r1
 800479a:	d819      	bhi.n	80047d0 <HAL_I2C_Init+0x13c>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1e59      	subs	r1, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047aa:	1c59      	adds	r1, r3, #1
 80047ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047b0:	400b      	ands	r3, r1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_I2C_Init+0x138>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e59      	subs	r1, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c4:	3301      	adds	r3, #1
 80047c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ca:	e051      	b.n	8004870 <HAL_I2C_Init+0x1dc>
 80047cc:	2304      	movs	r3, #4
 80047ce:	e04f      	b.n	8004870 <HAL_I2C_Init+0x1dc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d111      	bne.n	80047fc <HAL_I2C_Init+0x168>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	1e58      	subs	r0, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6859      	ldr	r1, [r3, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	440b      	add	r3, r1
 80047e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e012      	b.n	8004822 <HAL_I2C_Init+0x18e>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1e58      	subs	r0, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	0099      	lsls	r1, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004812:	3301      	adds	r3, #1
 8004814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Init+0x196>
 8004826:	2301      	movs	r3, #1
 8004828:	e022      	b.n	8004870 <HAL_I2C_Init+0x1dc>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10e      	bne.n	8004850 <HAL_I2C_Init+0x1bc>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1e58      	subs	r0, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	460b      	mov	r3, r1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	440b      	add	r3, r1
 8004840:	fbb0 f3f3 	udiv	r3, r0, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800484e:	e00f      	b.n	8004870 <HAL_I2C_Init+0x1dc>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	1e58      	subs	r0, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6859      	ldr	r1, [r3, #4]
 8004858:	460b      	mov	r3, r1
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	0099      	lsls	r1, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	fbb0 f3f3 	udiv	r3, r0, r3
 8004866:	3301      	adds	r3, #1
 8004868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	6809      	ldr	r1, [r1, #0]
 8004874:	4313      	orrs	r3, r2
 8004876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800489e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6911      	ldr	r1, [r2, #16]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68d2      	ldr	r2, [r2, #12]
 80048aa:	4311      	orrs	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	000186a0 	.word	0x000186a0
 800490c:	001e847f 	.word	0x001e847f
 8004910:	003d08ff 	.word	0x003d08ff
 8004914:	431bde83 	.word	0x431bde83
 8004918:	10624dd3 	.word	0x10624dd3

0800491c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	461a      	mov	r2, r3
 8004928:	460b      	mov	r3, r1
 800492a:	817b      	strh	r3, [r7, #10]
 800492c:	4613      	mov	r3, r2
 800492e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004930:	f7ff f914 	bl	8003b5c <HAL_GetTick>
 8004934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	f040 80e0 	bne.w	8004b04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2319      	movs	r3, #25
 800494a:	2201      	movs	r2, #1
 800494c:	4970      	ldr	r1, [pc, #448]	@ (8004b10 <HAL_I2C_Master_Transmit+0x1f4>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f001 fa4a 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	e0d3      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_I2C_Master_Transmit+0x50>
 8004968:	2302      	movs	r3, #2
 800496a:	e0cc      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d007      	beq.n	8004992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2221      	movs	r2, #33	@ 0x21
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2210      	movs	r2, #16
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	893a      	ldrh	r2, [r7, #8]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a50      	ldr	r2, [pc, #320]	@ (8004b14 <HAL_I2C_Master_Transmit+0x1f8>)
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049d4:	8979      	ldrh	r1, [r7, #10]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 ff36 	bl	800584c <I2C_MasterRequestWrite>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e08d      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a00:	e066      	b.n	8004ad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	6a39      	ldr	r1, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f001 fb08 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d107      	bne.n	8004a2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_I2C_Master_Transmit+0x188>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	6a39      	ldr	r1, [r7, #32]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f001 faff 	bl	80060ac <I2C_WaitOnBTFFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d107      	bne.n	8004acc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e01a      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d194      	bne.n	8004a02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	00100002 	.word	0x00100002
 8004b14:	ffff0000 	.word	0xffff0000

08004b18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08c      	sub	sp, #48	@ 0x30
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	461a      	mov	r2, r3
 8004b24:	460b      	mov	r3, r1
 8004b26:	817b      	strh	r3, [r7, #10]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b2c:	f7ff f816 	bl	8003b5c <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	f040 8217 	bne.w	8004f6e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2319      	movs	r3, #25
 8004b46:	2201      	movs	r2, #1
 8004b48:	497c      	ldr	r1, [pc, #496]	@ (8004d3c <HAL_I2C_Master_Receive+0x224>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f001 f94c 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
 8004b58:	e20a      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_I2C_Master_Receive+0x50>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e203      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d007      	beq.n	8004b8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0201 	orr.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2222      	movs	r2, #34	@ 0x22
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	893a      	ldrh	r2, [r7, #8]
 8004bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a5c      	ldr	r2, [pc, #368]	@ (8004d40 <HAL_I2C_Master_Receive+0x228>)
 8004bce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004bd0:	8979      	ldrh	r1, [r7, #10]
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 feba 	bl	8005950 <I2C_MasterRequestRead>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e1c4      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d113      	bne.n	8004c16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e198      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d11b      	bne.n	8004c56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e178      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d11b      	bne.n	8004c96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	e158      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cbc:	e144      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	f200 80f1 	bhi.w	8004eaa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d123      	bne.n	8004d18 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f001 fa31 	bl	800613c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e145      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d16:	e117      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d14e      	bne.n	8004dbe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d26:	2200      	movs	r2, #0
 8004d28:	4906      	ldr	r1, [pc, #24]	@ (8004d44 <HAL_I2C_Master_Receive+0x22c>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f001 f85c 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e11a      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
 8004d3a:	bf00      	nop
 8004d3c:	00100002 	.word	0x00100002
 8004d40:	ffff0000 	.word	0xffff0000
 8004d44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dbc:	e0c4      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	496c      	ldr	r1, [pc, #432]	@ (8004f78 <HAL_I2C_Master_Receive+0x460>)
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f001 f80d 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0cb      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	4955      	ldr	r1, [pc, #340]	@ (8004f78 <HAL_I2C_Master_Receive+0x460>)
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 ffdf 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e09d      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ea8:	e04e      	b.n	8004f48 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f001 f944 	bl	800613c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e058      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d124      	bne.n	8004f48 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d107      	bne.n	8004f16 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f14:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f aeb6 	bne.w	8004cbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	@ 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	00010004 	.word	0x00010004

08004f7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f96:	f7fe fde1 	bl	8003b5c <HAL_GetTick>
 8004f9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	f040 80d9 	bne.w	800515c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	2319      	movs	r3, #25
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	496d      	ldr	r1, [pc, #436]	@ (8005168 <HAL_I2C_Mem_Write+0x1ec>)
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 ff17 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e0cc      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <HAL_I2C_Mem_Write+0x56>
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e0c5      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d007      	beq.n	8004ff8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005006:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2221      	movs	r2, #33	@ 0x21
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2240      	movs	r2, #64	@ 0x40
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a3a      	ldr	r2, [r7, #32]
 8005022:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a4d      	ldr	r2, [pc, #308]	@ (800516c <HAL_I2C_Mem_Write+0x1f0>)
 8005038:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800503a:	88f8      	ldrh	r0, [r7, #6]
 800503c:	893a      	ldrh	r2, [r7, #8]
 800503e:	8979      	ldrh	r1, [r7, #10]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	4603      	mov	r3, r0
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fd4e 	bl	8005aec <I2C_RequestMemoryWrite>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d052      	beq.n	80050fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e081      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 ffdc 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005080:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06b      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d11b      	bne.n	80050fc <HAL_I2C_Mem_Write+0x180>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d017      	beq.n	80050fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1aa      	bne.n	800505a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 ffcf 	bl	80060ac <I2C_WaitOnBTFFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	2b04      	cmp	r3, #4
 800511a:	d107      	bne.n	800512c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e016      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	00100002 	.word	0x00100002
 800516c:	ffff0000 	.word	0xffff0000

08005170 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	@ 0x30
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	4608      	mov	r0, r1
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	4603      	mov	r3, r0
 8005180:	817b      	strh	r3, [r7, #10]
 8005182:	460b      	mov	r3, r1
 8005184:	813b      	strh	r3, [r7, #8]
 8005186:	4613      	mov	r3, r2
 8005188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800518a:	f7fe fce7 	bl	8003b5c <HAL_GetTick>
 800518e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b20      	cmp	r3, #32
 800519a:	f040 8214 	bne.w	80055c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	2319      	movs	r3, #25
 80051a4:	2201      	movs	r2, #1
 80051a6:	497b      	ldr	r1, [pc, #492]	@ (8005394 <HAL_I2C_Mem_Read+0x224>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fe1d 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
 80051b6:	e207      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_I2C_Mem_Read+0x56>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e200      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d007      	beq.n	80051ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2222      	movs	r2, #34	@ 0x22
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2240      	movs	r2, #64	@ 0x40
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800521c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a5b      	ldr	r2, [pc, #364]	@ (8005398 <HAL_I2C_Mem_Read+0x228>)
 800522c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800522e:	88f8      	ldrh	r0, [r7, #6]
 8005230:	893a      	ldrh	r2, [r7, #8]
 8005232:	8979      	ldrh	r1, [r7, #10]
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	4603      	mov	r3, r0
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fcea 	bl	8005c18 <I2C_RequestMemoryRead>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e1bc      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d113      	bne.n	800527e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	2300      	movs	r3, #0
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	623b      	str	r3, [r7, #32]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	623b      	str	r3, [r7, #32]
 800526a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e190      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005282:	2b01      	cmp	r3, #1
 8005284:	d11b      	bne.n	80052be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e170      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d11b      	bne.n	80052fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	e150      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005314:	e144      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531a:	2b03      	cmp	r3, #3
 800531c:	f200 80f1 	bhi.w	8005502 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005324:	2b01      	cmp	r3, #1
 8005326:	d123      	bne.n	8005370 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 ff05 	bl	800613c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e145      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800536e:	e117      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005374:	2b02      	cmp	r3, #2
 8005376:	d14e      	bne.n	8005416 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537e:	2200      	movs	r2, #0
 8005380:	4906      	ldr	r1, [pc, #24]	@ (800539c <HAL_I2C_Mem_Read+0x22c>)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fd30 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e11a      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
 8005392:	bf00      	nop
 8005394:	00100002 	.word	0x00100002
 8005398:	ffff0000 	.word	0xffff0000
 800539c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005414:	e0c4      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541c:	2200      	movs	r2, #0
 800541e:	496c      	ldr	r1, [pc, #432]	@ (80055d0 <HAL_I2C_Mem_Read+0x460>)
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fce1 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0cb      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b01      	subs	r3, #1
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2200      	movs	r2, #0
 800547a:	4955      	ldr	r1, [pc, #340]	@ (80055d0 <HAL_I2C_Mem_Read+0x460>)
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fcb3 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e09d      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800549a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005500:	e04e      	b.n	80055a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fe18 	bl	800613c <I2C_WaitOnRXNEFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e058      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b04      	cmp	r3, #4
 8005554:	d124      	bne.n	80055a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555a:	2b03      	cmp	r3, #3
 800555c:	d107      	bne.n	800556e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f47f aeb6 	bne.w	8005316 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
  }
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3728      	adds	r7, #40	@ 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	00010004 	.word	0x00010004

080055d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	460b      	mov	r3, r1
 80055e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7fe faba 	bl	8003b5c <HAL_GetTick>
 80055e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	f040 8111 	bne.w	800581e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2319      	movs	r3, #25
 8005602:	2201      	movs	r2, #1
 8005604:	4988      	ldr	r1, [pc, #544]	@ (8005828 <HAL_I2C_IsDeviceReady+0x254>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fbee 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	e104      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_I2C_IsDeviceReady+0x50>
 8005620:	2302      	movs	r3, #2
 8005622:	e0fd      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d007      	beq.n	800564a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2224      	movs	r2, #36	@ 0x24
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a70      	ldr	r2, [pc, #448]	@ (800582c <HAL_I2C_IsDeviceReady+0x258>)
 800566c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800567c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fbac 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a4:	d103      	bne.n	80056ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0b6      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056b2:	897b      	ldrh	r3, [r7, #10]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80056c2:	f7fe fa4b 	bl	8003b5c <HAL_GetTick>
 80056c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056f6:	e025      	b.n	8005744 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7fe fa30 	bl	8003b5c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <HAL_I2C_IsDeviceReady+0x13a>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	22a0      	movs	r2, #160	@ 0xa0
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b02      	cmp	r3, #2
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2ba0      	cmp	r3, #160	@ 0xa0
 800574e:	d005      	beq.n	800575c <HAL_I2C_IsDeviceReady+0x188>
 8005750:	7dfb      	ldrb	r3, [r7, #23]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_I2C_IsDeviceReady+0x188>
 8005756:	7dbb      	ldrb	r3, [r7, #22]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0cd      	beq.n	80056f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d129      	bne.n	80057c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005780:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	613b      	str	r3, [r7, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	2319      	movs	r3, #25
 800579e:	2201      	movs	r2, #1
 80057a0:	4921      	ldr	r1, [pc, #132]	@ (8005828 <HAL_I2C_IsDeviceReady+0x254>)
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fb20 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e036      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e02c      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2319      	movs	r3, #25
 80057e6:	2201      	movs	r2, #1
 80057e8:	490f      	ldr	r1, [pc, #60]	@ (8005828 <HAL_I2C_IsDeviceReady+0x254>)
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fafc 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e012      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3301      	adds	r3, #1
 80057fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	f4ff af32 	bcc.w	800566e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e000      	b.n	8005820 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800581e:	2302      	movs	r3, #2
  }
}
 8005820:	4618      	mov	r0, r3
 8005822:	3720      	adds	r7, #32
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	00100002 	.word	0x00100002
 800582c:	ffff0000 	.word	0xffff0000

08005830 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583e:	b2db      	uxtb	r3, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	460b      	mov	r3, r1
 800585a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d006      	beq.n	8005876 <I2C_MasterRequestWrite+0x2a>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d003      	beq.n	8005876 <I2C_MasterRequestWrite+0x2a>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005874:	d108      	bne.n	8005888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e00b      	b.n	80058a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	2b12      	cmp	r3, #18
 800588e:	d107      	bne.n	80058a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fa9b 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c6:	d103      	bne.n	80058d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e035      	b.n	8005940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058dc:	d108      	bne.n	80058f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058de:	897b      	ldrh	r3, [r7, #10]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058ec:	611a      	str	r2, [r3, #16]
 80058ee:	e01b      	b.n	8005928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	11db      	asrs	r3, r3, #7
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0306 	and.w	r3, r3, #6
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f063 030f 	orn	r3, r3, #15
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	490e      	ldr	r1, [pc, #56]	@ (8005948 <I2C_MasterRequestWrite+0xfc>)
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fae4 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e010      	b.n	8005940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4907      	ldr	r1, [pc, #28]	@ (800594c <I2C_MasterRequestWrite+0x100>)
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fad4 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	00010008 	.word	0x00010008
 800594c:	00010002 	.word	0x00010002

08005950 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	460b      	mov	r3, r1
 800595e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005974:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d006      	beq.n	800598a <I2C_MasterRequestRead+0x3a>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d003      	beq.n	800598a <I2C_MasterRequestRead+0x3a>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005988:	d108      	bne.n	800599c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e00b      	b.n	80059b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	2b11      	cmp	r3, #17
 80059a2:	d107      	bne.n	80059b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fa11 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00d      	beq.n	80059e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059da:	d103      	bne.n	80059e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e079      	b.n	8005adc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059f0:	d108      	bne.n	8005a04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059f2:	897b      	ldrh	r3, [r7, #10]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	611a      	str	r2, [r3, #16]
 8005a02:	e05f      	b.n	8005ac4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a04:	897b      	ldrh	r3, [r7, #10]
 8005a06:	11db      	asrs	r3, r3, #7
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	f003 0306 	and.w	r3, r3, #6
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	f063 030f 	orn	r3, r3, #15
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4930      	ldr	r1, [pc, #192]	@ (8005ae4 <I2C_MasterRequestRead+0x194>)
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fa5a 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e054      	b.n	8005adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a32:	897b      	ldrh	r3, [r7, #10]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4929      	ldr	r1, [pc, #164]	@ (8005ae8 <I2C_MasterRequestRead+0x198>)
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fa4a 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e044      	b.n	8005adc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a52:	2300      	movs	r3, #0
 8005a54:	613b      	str	r3, [r7, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f9af 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9e:	d103      	bne.n	8005aa8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e017      	b.n	8005adc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	11db      	asrs	r3, r3, #7
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0306 	and.w	r3, r3, #6
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f063 030e 	orn	r3, r3, #14
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4907      	ldr	r1, [pc, #28]	@ (8005ae8 <I2C_MasterRequestRead+0x198>)
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa06 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	00010008 	.word	0x00010008
 8005ae8:	00010002 	.word	0x00010002

08005aec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	4608      	mov	r0, r1
 8005af6:	4611      	mov	r1, r2
 8005af8:	461a      	mov	r2, r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	817b      	strh	r3, [r7, #10]
 8005afe:	460b      	mov	r3, r1
 8005b00:	813b      	strh	r3, [r7, #8]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f960 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00d      	beq.n	8005b4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3c:	d103      	bne.n	8005b46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e05f      	b.n	8005c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b4a:	897b      	ldrh	r3, [r7, #10]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	6a3a      	ldr	r2, [r7, #32]
 8005b5e:	492d      	ldr	r1, [pc, #180]	@ (8005c14 <I2C_RequestMemoryWrite+0x128>)
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f9bb 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e04c      	b.n	8005c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b88:	6a39      	ldr	r1, [r7, #32]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fa46 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d107      	bne.n	8005bae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e02b      	b.n	8005c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d105      	bne.n	8005bc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb8:	893b      	ldrh	r3, [r7, #8]
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	611a      	str	r2, [r3, #16]
 8005bc2:	e021      	b.n	8005c08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bc4:	893b      	ldrh	r3, [r7, #8]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd4:	6a39      	ldr	r1, [r7, #32]
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fa20 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00d      	beq.n	8005bfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d107      	bne.n	8005bfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e005      	b.n	8005c0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfe:	893b      	ldrh	r3, [r7, #8]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	00010002 	.word	0x00010002

08005c18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f8c2 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00d      	beq.n	8005c86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c78:	d103      	bne.n	8005c82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e0aa      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	6a3a      	ldr	r2, [r7, #32]
 8005c9a:	4952      	ldr	r1, [pc, #328]	@ (8005de4 <I2C_RequestMemoryRead+0x1cc>)
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f91d 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e097      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cac:	2300      	movs	r3, #0
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f9a8 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00d      	beq.n	8005cee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d107      	bne.n	8005cea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e076      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cf4:	893b      	ldrh	r3, [r7, #8]
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	611a      	str	r2, [r3, #16]
 8005cfe:	e021      	b.n	8005d44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	0a1b      	lsrs	r3, r3, #8
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d10:	6a39      	ldr	r1, [r7, #32]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f982 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00d      	beq.n	8005d3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d107      	bne.n	8005d36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e050      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d3a:	893b      	ldrh	r3, [r7, #8]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d46:	6a39      	ldr	r1, [r7, #32]
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f967 	bl	800601c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00d      	beq.n	8005d70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d107      	bne.n	8005d6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e035      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f82b 	bl	8005de8 <I2C_WaitOnFlagUntilTimeout>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005da6:	d103      	bne.n	8005db0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e013      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005db4:	897b      	ldrh	r3, [r7, #10]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	6a3a      	ldr	r2, [r7, #32]
 8005dc8:	4906      	ldr	r1, [pc, #24]	@ (8005de4 <I2C_RequestMemoryRead+0x1cc>)
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 f886 	bl	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	00010002 	.word	0x00010002

08005de8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df8:	e048      	b.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d044      	beq.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e02:	f7fd feab 	bl	8003b5c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d302      	bcc.n	8005e18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d139      	bne.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	0c1b      	lsrs	r3, r3, #16
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d10d      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	e00c      	b.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	43da      	mvns	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	79fb      	ldrb	r3, [r7, #7]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d116      	bne.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	f043 0220 	orr.w	r2, r3, #32
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e023      	b.n	8005ed4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10d      	bne.n	8005eb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	43da      	mvns	r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	e00c      	b.n	8005ecc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	43da      	mvns	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d093      	beq.n	8005dfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eea:	e071      	b.n	8005fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005efa:	d123      	bne.n	8005f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f30:	f043 0204 	orr.w	r2, r3, #4
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e067      	b.n	8006014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d041      	beq.n	8005fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fd fe06 	bl	8003b5c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d136      	bne.n	8005fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10c      	bne.n	8005f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf14      	ite	ne
 8005f7e:	2301      	movne	r3, #1
 8005f80:	2300      	moveq	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	e00b      	b.n	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	43da      	mvns	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf14      	ite	ne
 8005f98:	2301      	movne	r3, #1
 8005f9a:	2300      	moveq	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbc:	f043 0220 	orr.w	r2, r3, #32
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e021      	b.n	8006014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	0c1b      	lsrs	r3, r3, #16
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d10c      	bne.n	8005ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	43da      	mvns	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e00b      	b.n	800600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4013      	ands	r3, r2
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af6d 	bne.w	8005eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006028:	e034      	b.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f8e3 	bl	80061f6 <I2C_IsAcknowledgeFailed>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e034      	b.n	80060a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d028      	beq.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fd fd8b 	bl	8003b5c <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11d      	bne.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006062:	2b80      	cmp	r3, #128	@ 0x80
 8006064:	d016      	beq.n	8006094 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2220      	movs	r2, #32
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	f043 0220 	orr.w	r2, r3, #32
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e007      	b.n	80060a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609e:	2b80      	cmp	r3, #128	@ 0x80
 80060a0:	d1c3      	bne.n	800602a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060b8:	e034      	b.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f89b 	bl	80061f6 <I2C_IsAcknowledgeFailed>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e034      	b.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d028      	beq.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d2:	f7fd fd43 	bl	8003b5c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d302      	bcc.n	80060e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11d      	bne.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d016      	beq.n	8006124 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e007      	b.n	8006134 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b04      	cmp	r3, #4
 8006130:	d1c3      	bne.n	80060ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006148:	e049      	b.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2b10      	cmp	r3, #16
 8006156:	d119      	bne.n	800618c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0210 	mvn.w	r2, #16
 8006160:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e030      	b.n	80061ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618c:	f7fd fce6 	bl	8003b5c <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11d      	bne.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ac:	2b40      	cmp	r3, #64	@ 0x40
 80061ae:	d016      	beq.n	80061de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e007      	b.n	80061ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d1ae      	bne.n	800614a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620c:	d11b      	bne.n	8006246 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006216:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	f043 0204 	orr.w	r2, r3, #4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e0cc      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006268:	4b68      	ldr	r3, [pc, #416]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d90c      	bls.n	8006290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006276:	4b65      	ldr	r3, [pc, #404]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800627e:	4b63      	ldr	r3, [pc, #396]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d001      	beq.n	8006290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0b8      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d020      	beq.n	80062de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062a8:	4b59      	ldr	r3, [pc, #356]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4a58      	ldr	r2, [pc, #352]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c0:	4b53      	ldr	r3, [pc, #332]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	4a52      	ldr	r2, [pc, #328]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062cc:	4b50      	ldr	r3, [pc, #320]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	494d      	ldr	r1, [pc, #308]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d044      	beq.n	8006374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f2:	4b47      	ldr	r3, [pc, #284]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d119      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e07f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d003      	beq.n	8006312 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630e:	2b03      	cmp	r3, #3
 8006310:	d107      	bne.n	8006322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006312:	4b3f      	ldr	r3, [pc, #252]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e06f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006322:	4b3b      	ldr	r3, [pc, #236]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e067      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006332:	4b37      	ldr	r3, [pc, #220]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 0203 	bic.w	r2, r3, #3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4934      	ldr	r1, [pc, #208]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	4313      	orrs	r3, r2
 8006342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006344:	f7fd fc0a 	bl	8003b5c <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634a:	e00a      	b.n	8006362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800634c:	f7fd fc06 	bl	8003b5c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635a:	4293      	cmp	r3, r2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e04f      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006362:	4b2b      	ldr	r3, [pc, #172]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 020c 	and.w	r2, r3, #12
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	429a      	cmp	r2, r3
 8006372:	d1eb      	bne.n	800634c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006374:	4b25      	ldr	r3, [pc, #148]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d20c      	bcs.n	800639c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b22      	ldr	r3, [pc, #136]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638a:	4b20      	ldr	r3, [pc, #128]	@ (800640c <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0307 	and.w	r3, r3, #7
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d001      	beq.n	800639c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e032      	b.n	8006402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063a8:	4b19      	ldr	r3, [pc, #100]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4916      	ldr	r1, [pc, #88]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063c6:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	490e      	ldr	r1, [pc, #56]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063da:	f000 f821 	bl	8006420 <HAL_RCC_GetSysClockFreq>
 80063de:	4602      	mov	r2, r0
 80063e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	490a      	ldr	r1, [pc, #40]	@ (8006414 <HAL_RCC_ClockConfig+0x1c0>)
 80063ec:	5ccb      	ldrb	r3, [r1, r3]
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	4a09      	ldr	r2, [pc, #36]	@ (8006418 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063f6:	4b09      	ldr	r3, [pc, #36]	@ (800641c <HAL_RCC_ClockConfig+0x1c8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fb6a 	bl	8003ad4 <HAL_InitTick>

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40023c00 	.word	0x40023c00
 8006410:	40023800 	.word	0x40023800
 8006414:	0800dbf8 	.word	0x0800dbf8
 8006418:	200000cc 	.word	0x200000cc
 800641c:	200000d0 	.word	0x200000d0

08006420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006424:	b090      	sub	sp, #64	@ 0x40
 8006426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006438:	4b59      	ldr	r3, [pc, #356]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 030c 	and.w	r3, r3, #12
 8006440:	2b08      	cmp	r3, #8
 8006442:	d00d      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x40>
 8006444:	2b08      	cmp	r3, #8
 8006446:	f200 80a1 	bhi.w	800658c <HAL_RCC_GetSysClockFreq+0x16c>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0x34>
 800644e:	2b04      	cmp	r3, #4
 8006450:	d003      	beq.n	800645a <HAL_RCC_GetSysClockFreq+0x3a>
 8006452:	e09b      	b.n	800658c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006454:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006456:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006458:	e09b      	b.n	8006592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645a:	4b53      	ldr	r3, [pc, #332]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800645c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800645e:	e098      	b.n	8006592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006460:	4b4f      	ldr	r3, [pc, #316]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800646a:	4b4d      	ldr	r3, [pc, #308]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d028      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006476:	4b4a      	ldr	r3, [pc, #296]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	2200      	movs	r2, #0
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	627a      	str	r2, [r7, #36]	@ 0x24
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006488:	2100      	movs	r1, #0
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800648c:	fb03 f201 	mul.w	r2, r3, r1
 8006490:	2300      	movs	r3, #0
 8006492:	fb00 f303 	mul.w	r3, r0, r3
 8006496:	4413      	add	r3, r2
 8006498:	4a43      	ldr	r2, [pc, #268]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800649a:	fba0 1202 	umull	r1, r2, r0, r2
 800649e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a0:	460a      	mov	r2, r1
 80064a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064a6:	4413      	add	r3, r2
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	2200      	movs	r2, #0
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	61fa      	str	r2, [r7, #28]
 80064b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064ba:	f7fa fc05 	bl	8000cc8 <__aeabi_uldivmod>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4613      	mov	r3, r2
 80064c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c6:	e053      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c8:	4b35      	ldr	r3, [pc, #212]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	099b      	lsrs	r3, r3, #6
 80064ce:	2200      	movs	r2, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	617a      	str	r2, [r7, #20]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064da:	f04f 0b00 	mov.w	fp, #0
 80064de:	4652      	mov	r2, sl
 80064e0:	465b      	mov	r3, fp
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	0159      	lsls	r1, r3, #5
 80064ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f0:	0150      	lsls	r0, r2, #5
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	ebb2 080a 	subs.w	r8, r2, sl
 80064fa:	eb63 090b 	sbc.w	r9, r3, fp
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800650a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800650e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006512:	ebb2 0408 	subs.w	r4, r2, r8
 8006516:	eb63 0509 	sbc.w	r5, r3, r9
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	00eb      	lsls	r3, r5, #3
 8006524:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006528:	00e2      	lsls	r2, r4, #3
 800652a:	4614      	mov	r4, r2
 800652c:	461d      	mov	r5, r3
 800652e:	eb14 030a 	adds.w	r3, r4, sl
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	eb45 030b 	adc.w	r3, r5, fp
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	f04f 0200 	mov.w	r2, #0
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006546:	4629      	mov	r1, r5
 8006548:	028b      	lsls	r3, r1, #10
 800654a:	4621      	mov	r1, r4
 800654c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006550:	4621      	mov	r1, r4
 8006552:	028a      	lsls	r2, r1, #10
 8006554:	4610      	mov	r0, r2
 8006556:	4619      	mov	r1, r3
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	2200      	movs	r2, #0
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	60fa      	str	r2, [r7, #12]
 8006560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006564:	f7fa fbb0 	bl	8000cc8 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4613      	mov	r3, r2
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006570:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	0c1b      	lsrs	r3, r3, #16
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	3301      	adds	r3, #1
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006580:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800658a:	e002      	b.n	8006592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800658c:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800658e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006594:	4618      	mov	r0, r3
 8006596:	3740      	adds	r7, #64	@ 0x40
 8006598:	46bd      	mov	sp, r7
 800659a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659e:	bf00      	nop
 80065a0:	40023800 	.word	0x40023800
 80065a4:	00f42400 	.word	0x00f42400
 80065a8:	017d7840 	.word	0x017d7840

080065ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065ac:	b480      	push	{r7}
 80065ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b0:	4b03      	ldr	r3, [pc, #12]	@ (80065c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b2:	681b      	ldr	r3, [r3, #0]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	200000cc 	.word	0x200000cc

080065c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065c8:	f7ff fff0 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 80065cc:	4602      	mov	r2, r0
 80065ce:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	0a9b      	lsrs	r3, r3, #10
 80065d4:	f003 0307 	and.w	r3, r3, #7
 80065d8:	4903      	ldr	r1, [pc, #12]	@ (80065e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065da:	5ccb      	ldrb	r3, [r1, r3]
 80065dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	40023800 	.word	0x40023800
 80065e8:	0800dc08 	.word	0x0800dc08

080065ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065f0:	f7ff ffdc 	bl	80065ac <HAL_RCC_GetHCLKFreq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4b05      	ldr	r3, [pc, #20]	@ (800660c <HAL_RCC_GetPCLK2Freq+0x20>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	0b5b      	lsrs	r3, r3, #13
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	4903      	ldr	r1, [pc, #12]	@ (8006610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006602:	5ccb      	ldrb	r3, [r1, r3]
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800
 8006610:	0800dc08 	.word	0x0800dc08

08006614 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e273      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d075      	beq.n	800671e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006632:	4b88      	ldr	r3, [pc, #544]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b04      	cmp	r3, #4
 800663c:	d00c      	beq.n	8006658 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800663e:	4b85      	ldr	r3, [pc, #532]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
        || \
 8006646:	2b08      	cmp	r3, #8
 8006648:	d112      	bne.n	8006670 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800664a:	4b82      	ldr	r3, [pc, #520]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006656:	d10b      	bne.n	8006670 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	4b7e      	ldr	r3, [pc, #504]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d05b      	beq.n	800671c <HAL_RCC_OscConfig+0x108>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d157      	bne.n	800671c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e24e      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006678:	d106      	bne.n	8006688 <HAL_RCC_OscConfig+0x74>
 800667a:	4b76      	ldr	r3, [pc, #472]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a75      	ldr	r2, [pc, #468]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e01d      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x98>
 8006692:	4b70      	ldr	r3, [pc, #448]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6f      	ldr	r2, [pc, #444]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006698:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b6d      	ldr	r3, [pc, #436]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a6c      	ldr	r2, [pc, #432]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 80066ac:	4b69      	ldr	r3, [pc, #420]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a68      	ldr	r2, [pc, #416]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a65      	ldr	r2, [pc, #404]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fd fa46 	bl	8003b5c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fd fa42 	bl	8003b5c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	@ 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e213      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0xc0>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd fa32 	bl	8003b5c <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fd fa2e 	bl	8003b5c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	@ 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e1ff      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670e:	4b51      	ldr	r3, [pc, #324]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0xe8>
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d063      	beq.n	80067f2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800672a:	4b4a      	ldr	r3, [pc, #296]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006736:	4b47      	ldr	r3, [pc, #284]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
        || \
 800673e:	2b08      	cmp	r3, #8
 8006740:	d11c      	bne.n	800677c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006742:	4b44      	ldr	r3, [pc, #272]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d116      	bne.n	800677c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674e:	4b41      	ldr	r3, [pc, #260]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_RCC_OscConfig+0x152>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d001      	beq.n	8006766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e1d3      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006766:	4b3b      	ldr	r3, [pc, #236]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4937      	ldr	r1, [pc, #220]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677a:	e03a      	b.n	80067f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d020      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006784:	4b34      	ldr	r3, [pc, #208]	@ (8006858 <HAL_RCC_OscConfig+0x244>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fd f9e7 	bl	8003b5c <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006792:	f7fd f9e3 	bl	8003b5c <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e1b4      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b0:	4b28      	ldr	r3, [pc, #160]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4925      	ldr	r1, [pc, #148]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	600b      	str	r3, [r1, #0]
 80067c4:	e015      	b.n	80067f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c6:	4b24      	ldr	r3, [pc, #144]	@ (8006858 <HAL_RCC_OscConfig+0x244>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fd f9c6 	bl	8003b5c <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fd f9c2 	bl	8003b5c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e193      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d036      	beq.n	800686c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006806:	4b15      	ldr	r3, [pc, #84]	@ (800685c <HAL_RCC_OscConfig+0x248>)
 8006808:	2201      	movs	r2, #1
 800680a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680c:	f7fd f9a6 	bl	8003b5c <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006814:	f7fd f9a2 	bl	8003b5c <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e173      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006826:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <HAL_RCC_OscConfig+0x240>)
 8006828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x200>
 8006832:	e01b      	b.n	800686c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006834:	4b09      	ldr	r3, [pc, #36]	@ (800685c <HAL_RCC_OscConfig+0x248>)
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fd f98f 	bl	8003b5c <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006840:	e00e      	b.n	8006860 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006842:	f7fd f98b 	bl	8003b5c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d907      	bls.n	8006860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e15c      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
 8006854:	40023800 	.word	0x40023800
 8006858:	42470000 	.word	0x42470000
 800685c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006860:	4b8a      	ldr	r3, [pc, #552]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ea      	bne.n	8006842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8097 	beq.w	80069a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800687e:	4b83      	ldr	r3, [pc, #524]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	4b7f      	ldr	r3, [pc, #508]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006892:	4a7e      	ldr	r2, [pc, #504]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006898:	6413      	str	r3, [r2, #64]	@ 0x40
 800689a:	4b7c      	ldr	r3, [pc, #496]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068aa:	4b79      	ldr	r3, [pc, #484]	@ (8006a90 <HAL_RCC_OscConfig+0x47c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d118      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068b6:	4b76      	ldr	r3, [pc, #472]	@ (8006a90 <HAL_RCC_OscConfig+0x47c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a75      	ldr	r2, [pc, #468]	@ (8006a90 <HAL_RCC_OscConfig+0x47c>)
 80068bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c2:	f7fd f94b 	bl	8003b5c <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ca:	f7fd f947 	bl	8003b5c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e118      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068dc:	4b6c      	ldr	r3, [pc, #432]	@ (8006a90 <HAL_RCC_OscConfig+0x47c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d106      	bne.n	80068fe <HAL_RCC_OscConfig+0x2ea>
 80068f0:	4b66      	ldr	r3, [pc, #408]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a65      	ldr	r2, [pc, #404]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fc:	e01c      	b.n	8006938 <HAL_RCC_OscConfig+0x324>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b05      	cmp	r3, #5
 8006904:	d10c      	bne.n	8006920 <HAL_RCC_OscConfig+0x30c>
 8006906:	4b61      	ldr	r3, [pc, #388]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690a:	4a60      	ldr	r2, [pc, #384]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 800690c:	f043 0304 	orr.w	r3, r3, #4
 8006910:	6713      	str	r3, [r2, #112]	@ 0x70
 8006912:	4b5e      	ldr	r3, [pc, #376]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006916:	4a5d      	ldr	r2, [pc, #372]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6713      	str	r3, [r2, #112]	@ 0x70
 800691e:	e00b      	b.n	8006938 <HAL_RCC_OscConfig+0x324>
 8006920:	4b5a      	ldr	r3, [pc, #360]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006924:	4a59      	ldr	r2, [pc, #356]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	6713      	str	r3, [r2, #112]	@ 0x70
 800692c:	4b57      	ldr	r3, [pc, #348]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006930:	4a56      	ldr	r2, [pc, #344]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006932:	f023 0304 	bic.w	r3, r3, #4
 8006936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d015      	beq.n	800696c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006940:	f7fd f90c 	bl	8003b5c <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006946:	e00a      	b.n	800695e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006948:	f7fd f908 	bl	8003b5c <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e0d7      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800695e:	4b4b      	ldr	r3, [pc, #300]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0ee      	beq.n	8006948 <HAL_RCC_OscConfig+0x334>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696c:	f7fd f8f6 	bl	8003b5c <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fd f8f2 	bl	8003b5c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e0c1      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698a:	4b40      	ldr	r3, [pc, #256]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ee      	bne.n	8006974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d105      	bne.n	80069a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800699c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 800699e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a0:	4a3a      	ldr	r2, [pc, #232]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 80069a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80ad 	beq.w	8006b0c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069b2:	4b36      	ldr	r3, [pc, #216]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d060      	beq.n	8006a80 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d145      	bne.n	8006a52 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c6:	4b33      	ldr	r3, [pc, #204]	@ (8006a94 <HAL_RCC_OscConfig+0x480>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069cc:	f7fd f8c6 	bl	8003b5c <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d4:	f7fd f8c2 	bl	8003b5c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e093      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	4b29      	ldr	r3, [pc, #164]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	071b      	lsls	r3, r3, #28
 8006a1e:	491b      	ldr	r1, [pc, #108]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a24:	4b1b      	ldr	r3, [pc, #108]	@ (8006a94 <HAL_RCC_OscConfig+0x480>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2a:	f7fd f897 	bl	8003b5c <HAL_GetTick>
 8006a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a32:	f7fd f893 	bl	8003b5c <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e064      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a44:	4b11      	ldr	r3, [pc, #68]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCC_OscConfig+0x41e>
 8006a50:	e05c      	b.n	8006b0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a52:	4b10      	ldr	r3, [pc, #64]	@ (8006a94 <HAL_RCC_OscConfig+0x480>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a58:	f7fd f880 	bl	8003b5c <HAL_GetTick>
 8006a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5e:	e008      	b.n	8006a72 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a60:	f7fd f87c 	bl	8003b5c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e04d      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a72:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f0      	bne.n	8006a60 <HAL_RCC_OscConfig+0x44c>
 8006a7e:	e045      	b.n	8006b0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e040      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40007000 	.word	0x40007000
 8006a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a98:	4b1f      	ldr	r3, [pc, #124]	@ (8006b18 <HAL_RCC_OscConfig+0x504>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d030      	beq.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d129      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d122      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ac8:	4013      	ands	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d119      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d10f      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d107      	bne.n	8006b08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d001      	beq.n	8006b0c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800

08006b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e041      	b.n	8006bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fc fdaa 	bl	800369c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f000 fad8 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e041      	b.n	8006c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f839 	bl	8006c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f000 fa89 	bl	8007110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x24>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e022      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x3e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e015      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x58>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e008      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e07c      	b.n	8006dd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0x82>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cec:	e013      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0x92>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cfc:	e00b      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d0c:	e003      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fcec 	bl	80076fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2d      	ldr	r2, [pc, #180]	@ (8006de0 <HAL_TIM_PWM_Start+0x174>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_PWM_Start+0xcc>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2c      	ldr	r2, [pc, #176]	@ (8006de4 <HAL_TIM_PWM_Start+0x178>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d101      	bne.n	8006d3c <HAL_TIM_PWM_Start+0xd0>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <HAL_TIM_PWM_Start+0xd2>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d007      	beq.n	8006d52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a22      	ldr	r2, [pc, #136]	@ (8006de0 <HAL_TIM_PWM_Start+0x174>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d022      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d01d      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006de8 <HAL_TIM_PWM_Start+0x17c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d018      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	@ (8006dec <HAL_TIM_PWM_Start+0x180>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006df0 <HAL_TIM_PWM_Start+0x184>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00e      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a16      	ldr	r2, [pc, #88]	@ (8006de4 <HAL_TIM_PWM_Start+0x178>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a18      	ldr	r2, [pc, #96]	@ (8006df4 <HAL_TIM_PWM_Start+0x188>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x136>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a16      	ldr	r2, [pc, #88]	@ (8006df8 <HAL_TIM_PWM_Start+0x18c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d111      	bne.n	8006dc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2b06      	cmp	r3, #6
 8006db2:	d010      	beq.n	8006dd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc4:	e007      	b.n	8006dd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40014000 	.word	0x40014000
 8006df8:	40001800 	.word	0x40001800

08006dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e0ae      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b0c      	cmp	r3, #12
 8006e26:	f200 809f 	bhi.w	8006f68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e65 	.word	0x08006e65
 8006e34:	08006f69 	.word	0x08006f69
 8006e38:	08006f69 	.word	0x08006f69
 8006e3c:	08006f69 	.word	0x08006f69
 8006e40:	08006ea5 	.word	0x08006ea5
 8006e44:	08006f69 	.word	0x08006f69
 8006e48:	08006f69 	.word	0x08006f69
 8006e4c:	08006f69 	.word	0x08006f69
 8006e50:	08006ee7 	.word	0x08006ee7
 8006e54:	08006f69 	.word	0x08006f69
 8006e58:	08006f69 	.word	0x08006f69
 8006e5c:	08006f69 	.word	0x08006f69
 8006e60:	08006f27 	.word	0x08006f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68b9      	ldr	r1, [r7, #8]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f000 f9fc 	bl	8007268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0208 	orr.w	r2, r2, #8
 8006e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	699a      	ldr	r2, [r3, #24]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0204 	bic.w	r2, r2, #4
 8006e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6999      	ldr	r1, [r3, #24]
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	619a      	str	r2, [r3, #24]
      break;
 8006ea2:	e064      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fa4c 	bl	8007348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6999      	ldr	r1, [r3, #24]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	619a      	str	r2, [r3, #24]
      break;
 8006ee4:	e043      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 faa1 	bl	8007434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0208 	orr.w	r2, r2, #8
 8006f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0204 	bic.w	r2, r2, #4
 8006f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69d9      	ldr	r1, [r3, #28]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	61da      	str	r2, [r3, #28]
      break;
 8006f24:	e023      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 faf5 	bl	800751c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69da      	ldr	r2, [r3, #28]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	69d9      	ldr	r1, [r3, #28]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	021a      	lsls	r2, r3, #8
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	61da      	str	r2, [r3, #28]
      break;
 8006f66:	e002      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_ConfigClockSource+0x1c>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e0b4      	b.n	8007106 <HAL_TIM_ConfigClockSource+0x186>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fd4:	d03e      	beq.n	8007054 <HAL_TIM_ConfigClockSource+0xd4>
 8006fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fda:	f200 8087 	bhi.w	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe2:	f000 8086 	beq.w	80070f2 <HAL_TIM_ConfigClockSource+0x172>
 8006fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fea:	d87f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b70      	cmp	r3, #112	@ 0x70
 8006fee:	d01a      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0xa6>
 8006ff0:	2b70      	cmp	r3, #112	@ 0x70
 8006ff2:	d87b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b60      	cmp	r3, #96	@ 0x60
 8006ff6:	d050      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x11a>
 8006ff8:	2b60      	cmp	r3, #96	@ 0x60
 8006ffa:	d877      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b50      	cmp	r3, #80	@ 0x50
 8006ffe:	d03c      	beq.n	800707a <HAL_TIM_ConfigClockSource+0xfa>
 8007000:	2b50      	cmp	r3, #80	@ 0x50
 8007002:	d873      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007004:	2b40      	cmp	r3, #64	@ 0x40
 8007006:	d058      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x13a>
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	d86f      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800700c:	2b30      	cmp	r3, #48	@ 0x30
 800700e:	d064      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007010:	2b30      	cmp	r3, #48	@ 0x30
 8007012:	d86b      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 8007014:	2b20      	cmp	r3, #32
 8007016:	d060      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007018:	2b20      	cmp	r3, #32
 800701a:	d867      	bhi.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d05c      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007020:	2b10      	cmp	r3, #16
 8007022:	d05a      	beq.n	80070da <HAL_TIM_ConfigClockSource+0x15a>
 8007024:	e062      	b.n	80070ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007036:	f000 fb41 	bl	80076bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007048:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	609a      	str	r2, [r3, #8]
      break;
 8007052:	e04f      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007064:	f000 fb2a 	bl	80076bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007076:	609a      	str	r2, [r3, #8]
      break;
 8007078:	e03c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007086:	461a      	mov	r2, r3
 8007088:	f000 fa9e 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2150      	movs	r1, #80	@ 0x50
 8007092:	4618      	mov	r0, r3
 8007094:	f000 faf7 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 8007098:	e02c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 fabd 	bl	8007626 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2160      	movs	r1, #96	@ 0x60
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 fae7 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80070b8:	e01c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c6:	461a      	mov	r2, r3
 80070c8:	f000 fa7e 	bl	80075c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2140      	movs	r1, #64	@ 0x40
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fad7 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80070d8:	e00c      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 face 	bl	8007686 <TIM_ITRx_SetConfig>
      break;
 80070ea:	e003      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
      break;
 80070f0:	e000      	b.n	80070f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a46      	ldr	r2, [pc, #280]	@ (800723c <TIM_Base_SetConfig+0x12c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d013      	beq.n	8007150 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712e:	d00f      	beq.n	8007150 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a43      	ldr	r2, [pc, #268]	@ (8007240 <TIM_Base_SetConfig+0x130>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00b      	beq.n	8007150 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a42      	ldr	r2, [pc, #264]	@ (8007244 <TIM_Base_SetConfig+0x134>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a41      	ldr	r2, [pc, #260]	@ (8007248 <TIM_Base_SetConfig+0x138>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a40      	ldr	r2, [pc, #256]	@ (800724c <TIM_Base_SetConfig+0x13c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d108      	bne.n	8007162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a35      	ldr	r2, [pc, #212]	@ (800723c <TIM_Base_SetConfig+0x12c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d02b      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007170:	d027      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a32      	ldr	r2, [pc, #200]	@ (8007240 <TIM_Base_SetConfig+0x130>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d023      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a31      	ldr	r2, [pc, #196]	@ (8007244 <TIM_Base_SetConfig+0x134>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01f      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a30      	ldr	r2, [pc, #192]	@ (8007248 <TIM_Base_SetConfig+0x138>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01b      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2f      	ldr	r2, [pc, #188]	@ (800724c <TIM_Base_SetConfig+0x13c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d017      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2e      	ldr	r2, [pc, #184]	@ (8007250 <TIM_Base_SetConfig+0x140>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2d      	ldr	r2, [pc, #180]	@ (8007254 <TIM_Base_SetConfig+0x144>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00f      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007258 <TIM_Base_SetConfig+0x148>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00b      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2b      	ldr	r2, [pc, #172]	@ (800725c <TIM_Base_SetConfig+0x14c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d007      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007260 <TIM_Base_SetConfig+0x150>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d003      	beq.n	80071c2 <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a29      	ldr	r2, [pc, #164]	@ (8007264 <TIM_Base_SetConfig+0x154>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d108      	bne.n	80071d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	689a      	ldr	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a10      	ldr	r2, [pc, #64]	@ (800723c <TIM_Base_SetConfig+0x12c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_Base_SetConfig+0xf8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a12      	ldr	r2, [pc, #72]	@ (800724c <TIM_Base_SetConfig+0x13c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d103      	bne.n	8007210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b01      	cmp	r3, #1
 8007220:	d105      	bne.n	800722e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f023 0201 	bic.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]
  }
}
 800722e:	bf00      	nop
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	40010000 	.word	0x40010000
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40010400 	.word	0x40010400
 8007250:	40014000 	.word	0x40014000
 8007254:	40014400 	.word	0x40014400
 8007258:	40014800 	.word	0x40014800
 800725c:	40001800 	.word	0x40001800
 8007260:	40001c00 	.word	0x40001c00
 8007264:	40002000 	.word	0x40002000

08007268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f023 0201 	bic.w	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0303 	bic.w	r3, r3, #3
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f023 0302 	bic.w	r3, r3, #2
 80072b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a20      	ldr	r2, [pc, #128]	@ (8007340 <TIM_OC1_SetConfig+0xd8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d003      	beq.n	80072cc <TIM_OC1_SetConfig+0x64>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007344 <TIM_OC1_SetConfig+0xdc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10c      	bne.n	80072e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f023 0308 	bic.w	r3, r3, #8
 80072d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	4313      	orrs	r3, r2
 80072dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f023 0304 	bic.w	r3, r3, #4
 80072e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <TIM_OC1_SetConfig+0xd8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_OC1_SetConfig+0x8e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a14      	ldr	r2, [pc, #80]	@ (8007344 <TIM_OC1_SetConfig+0xdc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d111      	bne.n	800731a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40010000 	.word	0x40010000
 8007344:	40010400 	.word	0x40010400

08007348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f023 0210 	bic.w	r2, r3, #16
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0320 	bic.w	r3, r3, #32
 8007392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a22      	ldr	r2, [pc, #136]	@ (800742c <TIM_OC2_SetConfig+0xe4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <TIM_OC2_SetConfig+0x68>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a21      	ldr	r2, [pc, #132]	@ (8007430 <TIM_OC2_SetConfig+0xe8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d10d      	bne.n	80073cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a17      	ldr	r2, [pc, #92]	@ (800742c <TIM_OC2_SetConfig+0xe4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_OC2_SetConfig+0x94>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a16      	ldr	r2, [pc, #88]	@ (8007430 <TIM_OC2_SetConfig+0xe8>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d113      	bne.n	8007404 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40010400 	.word	0x40010400

08007434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a21      	ldr	r2, [pc, #132]	@ (8007514 <TIM_OC3_SetConfig+0xe0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d003      	beq.n	800749a <TIM_OC3_SetConfig+0x66>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <TIM_OC3_SetConfig+0xe4>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d10d      	bne.n	80074b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a16      	ldr	r2, [pc, #88]	@ (8007514 <TIM_OC3_SetConfig+0xe0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_OC3_SetConfig+0x92>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a15      	ldr	r2, [pc, #84]	@ (8007518 <TIM_OC3_SetConfig+0xe4>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d113      	bne.n	80074ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	011b      	lsls	r3, r3, #4
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4313      	orrs	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	621a      	str	r2, [r3, #32]
}
 8007508:	bf00      	nop
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	40010000 	.word	0x40010000
 8007518:	40010400 	.word	0x40010400

0800751c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	031b      	lsls	r3, r3, #12
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a12      	ldr	r2, [pc, #72]	@ (80075c0 <TIM_OC4_SetConfig+0xa4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_OC4_SetConfig+0x68>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a11      	ldr	r2, [pc, #68]	@ (80075c4 <TIM_OC4_SetConfig+0xa8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d109      	bne.n	8007598 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800758a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	019b      	lsls	r3, r3, #6
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4313      	orrs	r3, r2
 8007596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40010400 	.word	0x40010400

080075c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 030a 	bic.w	r3, r3, #10
 8007604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4313      	orrs	r3, r2
 800760c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	f023 0210 	bic.w	r2, r3, #16
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	031b      	lsls	r3, r3, #12
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007662:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	621a      	str	r2, [r3, #32]
}
 800767a:	bf00      	nop
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007686:	b480      	push	{r7}
 8007688:	b085      	sub	sp, #20
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800769c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f043 0307 	orr.w	r3, r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	609a      	str	r2, [r3, #8]
}
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	431a      	orrs	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	609a      	str	r2, [r3, #8]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b087      	sub	sp, #28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	2201      	movs	r2, #1
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6a1a      	ldr	r2, [r3, #32]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	43db      	mvns	r3, r3
 800771e:	401a      	ands	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	431a      	orrs	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800775c:	2302      	movs	r3, #2
 800775e:	e05a      	b.n	8007816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a21      	ldr	r2, [pc, #132]	@ (8007824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d022      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ac:	d01d      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d018      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d013      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00e      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a18      	ldr	r2, [pc, #96]	@ (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a17      	ldr	r2, [pc, #92]	@ (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a15      	ldr	r2, [pc, #84]	@ (800783c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d10c      	bne.n	8007804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3714      	adds	r7, #20
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	40010000 	.word	0x40010000
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40010400 	.word	0x40010400
 8007838:	40014000 	.word	0x40014000
 800783c:	40001800 	.word	0x40001800

08007840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e042      	b.n	80078d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb ff70 	bl	800374c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2224      	movs	r2, #36	@ 0x24
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68da      	ldr	r2, [r3, #12]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fdf3 	bl	8008470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695a      	ldr	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	@ 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d175      	bne.n	80079ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <HAL_UART_Transmit+0x2c>
 8007906:	88fb      	ldrh	r3, [r7, #6]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e06e      	b.n	80079ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2221      	movs	r2, #33	@ 0x21
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800791e:	f7fc f91d 	bl	8003b5c <HAL_GetTick>
 8007922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	88fa      	ldrh	r2, [r7, #6]
 800792e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007938:	d108      	bne.n	800794c <HAL_UART_Transmit+0x6c>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e003      	b.n	8007954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007954:	e02e      	b.n	80079b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2200      	movs	r2, #0
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fb55 	bl	8008010 <UART_WaitOnFlagUntilTimeout>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e03a      	b.n	80079ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	881b      	ldrh	r3, [r3, #0]
 8007982:	461a      	mov	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800798c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	3302      	adds	r3, #2
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e007      	b.n	80079a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	3301      	adds	r3, #1
 80079a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1cb      	bne.n	8007956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2140      	movs	r1, #64	@ 0x40
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fb21 	bl	8008010 <UART_WaitOnFlagUntilTimeout>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2220      	movs	r2, #32
 80079d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e006      	b.n	80079ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e000      	b.n	80079ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b08c      	sub	sp, #48	@ 0x30
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	4613      	mov	r3, r2
 8007a02:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d14a      	bne.n	8007aa6 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e043      	b.n	8007aa8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8007a2c:	88fb      	ldrh	r3, [r7, #6]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fb45 	bl	80080c2 <UART_Start_Receive_IT>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d12c      	bne.n	8007aa0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d125      	bne.n	8007a9a <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a4e:	2300      	movs	r3, #0
 8007a50:	613b      	str	r3, [r7, #16]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	613b      	str	r3, [r7, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	330c      	adds	r3, #12
 8007a6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	617b      	str	r3, [r7, #20]
   return(result);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f043 0310 	orr.w	r3, r3, #16
 8007a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a84:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6a39      	ldr	r1, [r7, #32]
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8007a98:	e002      	b.n	8007aa0 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007aa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007aa4:	e000      	b.n	8007aa8 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b0ba      	sub	sp, #232	@ 0xe8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10f      	bne.n	8007b16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <HAL_UART_IRQHandler+0x66>
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fbf0 	bl	80082f4 <UART_Receive_IT>
      return;
 8007b14:	e25b      	b.n	8007fce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 80de 	beq.w	8007cdc <HAL_UART_IRQHandler+0x22c>
 8007b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 80d1 	beq.w	8007cdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00b      	beq.n	8007b5e <HAL_UART_IRQHandler+0xae>
 8007b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b56:	f043 0201 	orr.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00b      	beq.n	8007b82 <HAL_UART_IRQHandler+0xd2>
 8007b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b7a:	f043 0202 	orr.w	r2, r3, #2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <HAL_UART_IRQHandler+0xf6>
 8007b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9e:	f043 0204 	orr.w	r2, r3, #4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d011      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x126>
 8007bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d005      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bce:	f043 0208 	orr.w	r2, r3, #8
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 81f2 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_UART_IRQHandler+0x14e>
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb7b 	bl	80082f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c08:	2b40      	cmp	r3, #64	@ 0x40
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <HAL_UART_IRQHandler+0x17a>
 8007c22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d04f      	beq.n	8007cca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa83 	bl	8008136 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c3a:	2b40      	cmp	r3, #64	@ 0x40
 8007c3c:	d141      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3314      	adds	r3, #20
 8007c44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3314      	adds	r3, #20
 8007c66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1d9      	bne.n	8007c3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d013      	beq.n	8007cba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c96:	4a7e      	ldr	r2, [pc, #504]	@ (8007e90 <HAL_UART_IRQHandler+0x3e0>)
 8007c98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fc f90d 	bl	8003ebe <HAL_DMA_Abort_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb8:	e00e      	b.n	8007cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f99e 	bl	8007ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	e00a      	b.n	8007cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f99a 	bl	8007ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e006      	b.n	8007cd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f996 	bl	8007ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007cd6:	e175      	b.n	8007fc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	bf00      	nop
    return;
 8007cda:	e173      	b.n	8007fc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f040 814f 	bne.w	8007f84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cea:	f003 0310 	and.w	r3, r3, #16
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8148 	beq.w	8007f84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8141 	beq.w	8007f84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d02:	2300      	movs	r3, #0
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d22:	2b40      	cmp	r3, #64	@ 0x40
 8007d24:	f040 80b6 	bne.w	8007e94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 8145 	beq.w	8007fc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d46:	429a      	cmp	r2, r3
 8007d48:	f080 813e 	bcs.w	8007fc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d5e:	f000 8088 	beq.w	8007e72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	330c      	adds	r3, #12
 8007d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	330c      	adds	r3, #12
 8007d8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1d9      	bne.n	8007d62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3314      	adds	r3, #20
 8007db4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3314      	adds	r3, #20
 8007dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007dd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007dd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007de4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e1      	bne.n	8007dae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e3      	bne.n	8007dea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2220      	movs	r2, #32
 8007e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e3      	bne.n	8007e30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fb ffb6 	bl	8003dde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7fb f82d 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e8e:	e09b      	b.n	8007fc8 <HAL_UART_IRQHandler+0x518>
 8007e90:	080081fd 	.word	0x080081fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 808e 	beq.w	8007fcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 8089 	beq.w	8007fcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	330c      	adds	r3, #12
 8007ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e3      	bne.n	8007eba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3314      	adds	r3, #20
 8007ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	623b      	str	r3, [r7, #32]
   return(result);
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3314      	adds	r3, #20
 8007f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e3      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0310 	bic.w	r3, r3, #16
 8007f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	330c      	adds	r3, #12
 8007f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f5c:	61fa      	str	r2, [r7, #28]
 8007f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e3      	bne.n	8007f38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fa ffb3 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f82:	e023      	b.n	8007fcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d009      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x4f4>
 8007f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f941 	bl	8008224 <UART_Transmit_IT>
    return;
 8007fa2:	e014      	b.n	8007fce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00e      	beq.n	8007fce <HAL_UART_IRQHandler+0x51e>
 8007fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f981 	bl	80082c4 <UART_EndTransmit_IT>
    return;
 8007fc2:	e004      	b.n	8007fce <HAL_UART_IRQHandler+0x51e>
    return;
 8007fc4:	bf00      	nop
 8007fc6:	e002      	b.n	8007fce <HAL_UART_IRQHandler+0x51e>
      return;
 8007fc8:	bf00      	nop
 8007fca:	e000      	b.n	8007fce <HAL_UART_IRQHandler+0x51e>
      return;
 8007fcc:	bf00      	nop
  }
}
 8007fce:	37e8      	adds	r7, #232	@ 0xe8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	603b      	str	r3, [r7, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008020:	e03b      	b.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008028:	d037      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802a:	f7fb fd97 	bl	8003b5c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	6a3a      	ldr	r2, [r7, #32]
 8008036:	429a      	cmp	r2, r3
 8008038:	d302      	bcc.n	8008040 <UART_WaitOnFlagUntilTimeout+0x30>
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e03a      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0304 	and.w	r3, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	d023      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b80      	cmp	r3, #128	@ 0x80
 8008056:	d020      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b40      	cmp	r3, #64	@ 0x40
 800805c:	d01d      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b08      	cmp	r3, #8
 800806a:	d116      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 f857 	bl	8008136 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2208      	movs	r2, #8
 800808c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e00f      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d0b4      	beq.n	8008022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	4613      	mov	r3, r2
 80080ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	88fa      	ldrh	r2, [r7, #6]
 80080da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2222      	movs	r2, #34	@ 0x22
 80080ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008106:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	695a      	ldr	r2, [r3, #20]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0201 	orr.w	r2, r2, #1
 8008116:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0220 	orr.w	r2, r2, #32
 8008126:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008136:	b480      	push	{r7}
 8008138:	b095      	sub	sp, #84	@ 0x54
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008148:	e853 3f00 	ldrex	r3, [r3]
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800815e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008162:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800816c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1e5      	bne.n	800813e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3314      	adds	r3, #20
 8008178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	61fb      	str	r3, [r7, #28]
   return(result);
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3314      	adds	r3, #20
 8008190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008194:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e5      	bne.n	8008172 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d119      	bne.n	80081e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	330c      	adds	r3, #12
 80081b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	e853 3f00 	ldrex	r3, [r3]
 80081bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f023 0310 	bic.w	r3, r3, #16
 80081c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ce:	61ba      	str	r2, [r7, #24]
 80081d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d2:	6979      	ldr	r1, [r7, #20]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	613b      	str	r3, [r7, #16]
   return(result);
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e5      	bne.n	80081ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081f0:	bf00      	nop
 80081f2:	3754      	adds	r7, #84	@ 0x54
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff fef0 	bl	8007ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b21      	cmp	r3, #33	@ 0x21
 8008236:	d13e      	bne.n	80082b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008240:	d114      	bne.n	800826c <UART_Transmit_IT+0x48>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d110      	bne.n	800826c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	461a      	mov	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800825e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	1c9a      	adds	r2, r3, #2
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	621a      	str	r2, [r3, #32]
 800826a:	e008      	b.n	800827e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	1c59      	adds	r1, r3, #1
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6211      	str	r1, [r2, #32]
 8008276:	781a      	ldrb	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008282:	b29b      	uxth	r3, r3
 8008284:	3b01      	subs	r3, #1
 8008286:	b29b      	uxth	r3, r3
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	4619      	mov	r1, r3
 800828c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082b6:	2302      	movs	r3, #2
  }
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2220      	movs	r2, #32
 80082e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fe75 	bl	8007fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08c      	sub	sp, #48	@ 0x30
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008302:	b2db      	uxtb	r3, r3
 8008304:	2b22      	cmp	r3, #34	@ 0x22
 8008306:	f040 80ae 	bne.w	8008466 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008312:	d117      	bne.n	8008344 <UART_Receive_IT+0x50>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d113      	bne.n	8008344 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800831c:	2300      	movs	r3, #0
 800831e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008324:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008332:	b29a      	uxth	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	1c9a      	adds	r2, r3, #2
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	629a      	str	r2, [r3, #40]	@ 0x28
 8008342:	e026      	b.n	8008392 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008356:	d007      	beq.n	8008368 <UART_Receive_IT+0x74>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <UART_Receive_IT+0x82>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	b2da      	uxtb	r2, r3
 8008370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	e008      	b.n	8008388 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	b2db      	uxtb	r3, r3
 800837e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008382:	b2da      	uxtb	r2, r3
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29b      	uxth	r3, r3
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4619      	mov	r1, r3
 80083a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d15d      	bne.n	8008462 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0220 	bic.w	r2, r2, #32
 80083b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0201 	bic.w	r2, r2, #1
 80083d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d135      	bne.n	8008458 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	330c      	adds	r3, #12
 80083f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f023 0310 	bic.w	r3, r3, #16
 8008408:	627b      	str	r3, [r7, #36]	@ 0x24
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	330c      	adds	r3, #12
 8008410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008412:	623a      	str	r2, [r7, #32]
 8008414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	69f9      	ldr	r1, [r7, #28]
 8008418:	6a3a      	ldr	r2, [r7, #32]
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e5      	bne.n	80083f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b10      	cmp	r3, #16
 8008432:	d10a      	bne.n	800844a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f7fa fd49 	bl	8002ee8 <HAL_UARTEx_RxEventCallback>
 8008456:	e002      	b.n	800845e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fdc5 	bl	8007fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e002      	b.n	8008468 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e000      	b.n	8008468 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3730      	adds	r7, #48	@ 0x30
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008474:	b0c0      	sub	sp, #256	@ 0x100
 8008476:	af00      	add	r7, sp, #0
 8008478:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800847c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	68d9      	ldr	r1, [r3, #12]
 800848e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	ea40 0301 	orr.w	r3, r0, r1
 8008498:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800849a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084c8:	f021 010c 	bic.w	r1, r1, #12
 80084cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80084d6:	430b      	orrs	r3, r1
 80084d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80084e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ea:	6999      	ldr	r1, [r3, #24]
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	ea40 0301 	orr.w	r3, r0, r1
 80084f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80084f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b8f      	ldr	r3, [pc, #572]	@ (800873c <UART_SetConfig+0x2cc>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d005      	beq.n	8008510 <UART_SetConfig+0xa0>
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b8d      	ldr	r3, [pc, #564]	@ (8008740 <UART_SetConfig+0x2d0>)
 800850c:	429a      	cmp	r2, r3
 800850e:	d104      	bne.n	800851a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008510:	f7fe f86c 	bl	80065ec <HAL_RCC_GetPCLK2Freq>
 8008514:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008518:	e003      	b.n	8008522 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800851a:	f7fe f853 	bl	80065c4 <HAL_RCC_GetPCLK1Freq>
 800851e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800852c:	f040 810c 	bne.w	8008748 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008534:	2200      	movs	r2, #0
 8008536:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800853a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800853e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008542:	4622      	mov	r2, r4
 8008544:	462b      	mov	r3, r5
 8008546:	1891      	adds	r1, r2, r2
 8008548:	65b9      	str	r1, [r7, #88]	@ 0x58
 800854a:	415b      	adcs	r3, r3
 800854c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800854e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008552:	4621      	mov	r1, r4
 8008554:	eb12 0801 	adds.w	r8, r2, r1
 8008558:	4629      	mov	r1, r5
 800855a:	eb43 0901 	adc.w	r9, r3, r1
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800856a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800856e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008572:	4690      	mov	r8, r2
 8008574:	4699      	mov	r9, r3
 8008576:	4623      	mov	r3, r4
 8008578:	eb18 0303 	adds.w	r3, r8, r3
 800857c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008580:	462b      	mov	r3, r5
 8008582:	eb49 0303 	adc.w	r3, r9, r3
 8008586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800858a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008596:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800859a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800859e:	460b      	mov	r3, r1
 80085a0:	18db      	adds	r3, r3, r3
 80085a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80085a4:	4613      	mov	r3, r2
 80085a6:	eb42 0303 	adc.w	r3, r2, r3
 80085aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085b4:	f7f8 fb88 	bl	8000cc8 <__aeabi_uldivmod>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4b61      	ldr	r3, [pc, #388]	@ (8008744 <UART_SetConfig+0x2d4>)
 80085be:	fba3 2302 	umull	r2, r3, r3, r2
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	011c      	lsls	r4, r3, #4
 80085c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80085d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	1891      	adds	r1, r2, r2
 80085de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80085e0:	415b      	adcs	r3, r3
 80085e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80085e8:	4641      	mov	r1, r8
 80085ea:	eb12 0a01 	adds.w	sl, r2, r1
 80085ee:	4649      	mov	r1, r9
 80085f0:	eb43 0b01 	adc.w	fp, r3, r1
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008600:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008608:	4692      	mov	sl, r2
 800860a:	469b      	mov	fp, r3
 800860c:	4643      	mov	r3, r8
 800860e:	eb1a 0303 	adds.w	r3, sl, r3
 8008612:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008616:	464b      	mov	r3, r9
 8008618:	eb4b 0303 	adc.w	r3, fp, r3
 800861c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800862c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008630:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008634:	460b      	mov	r3, r1
 8008636:	18db      	adds	r3, r3, r3
 8008638:	643b      	str	r3, [r7, #64]	@ 0x40
 800863a:	4613      	mov	r3, r2
 800863c:	eb42 0303 	adc.w	r3, r2, r3
 8008640:	647b      	str	r3, [r7, #68]	@ 0x44
 8008642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008646:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800864a:	f7f8 fb3d 	bl	8000cc8 <__aeabi_uldivmod>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4611      	mov	r1, r2
 8008654:	4b3b      	ldr	r3, [pc, #236]	@ (8008744 <UART_SetConfig+0x2d4>)
 8008656:	fba3 2301 	umull	r2, r3, r3, r1
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	2264      	movs	r2, #100	@ 0x64
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	1acb      	subs	r3, r1, r3
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800866a:	4b36      	ldr	r3, [pc, #216]	@ (8008744 <UART_SetConfig+0x2d4>)
 800866c:	fba3 2302 	umull	r2, r3, r3, r2
 8008670:	095b      	lsrs	r3, r3, #5
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008678:	441c      	add	r4, r3
 800867a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800867e:	2200      	movs	r2, #0
 8008680:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008684:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008688:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	1891      	adds	r1, r2, r2
 8008692:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008694:	415b      	adcs	r3, r3
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008698:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800869c:	4641      	mov	r1, r8
 800869e:	1851      	adds	r1, r2, r1
 80086a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80086a2:	4649      	mov	r1, r9
 80086a4:	414b      	adcs	r3, r1
 80086a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	f04f 0300 	mov.w	r3, #0
 80086b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086b4:	4659      	mov	r1, fp
 80086b6:	00cb      	lsls	r3, r1, #3
 80086b8:	4651      	mov	r1, sl
 80086ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086be:	4651      	mov	r1, sl
 80086c0:	00ca      	lsls	r2, r1, #3
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	4603      	mov	r3, r0
 80086c8:	4642      	mov	r2, r8
 80086ca:	189b      	adds	r3, r3, r2
 80086cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086d0:	464b      	mov	r3, r9
 80086d2:	460a      	mov	r2, r1
 80086d4:	eb42 0303 	adc.w	r3, r2, r3
 80086d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80086ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086f0:	460b      	mov	r3, r1
 80086f2:	18db      	adds	r3, r3, r3
 80086f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086f6:	4613      	mov	r3, r2
 80086f8:	eb42 0303 	adc.w	r3, r2, r3
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008702:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008706:	f7f8 fadf 	bl	8000cc8 <__aeabi_uldivmod>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <UART_SetConfig+0x2d4>)
 8008710:	fba3 1302 	umull	r1, r3, r3, r2
 8008714:	095b      	lsrs	r3, r3, #5
 8008716:	2164      	movs	r1, #100	@ 0x64
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	3332      	adds	r3, #50	@ 0x32
 8008722:	4a08      	ldr	r2, [pc, #32]	@ (8008744 <UART_SetConfig+0x2d4>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	f003 0207 	and.w	r2, r3, #7
 800872e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4422      	add	r2, r4
 8008736:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008738:	e106      	b.n	8008948 <UART_SetConfig+0x4d8>
 800873a:	bf00      	nop
 800873c:	40011000 	.word	0x40011000
 8008740:	40011400 	.word	0x40011400
 8008744:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800874c:	2200      	movs	r2, #0
 800874e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008752:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008756:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	1891      	adds	r1, r2, r2
 8008760:	6239      	str	r1, [r7, #32]
 8008762:	415b      	adcs	r3, r3
 8008764:	627b      	str	r3, [r7, #36]	@ 0x24
 8008766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800876a:	4641      	mov	r1, r8
 800876c:	1854      	adds	r4, r2, r1
 800876e:	4649      	mov	r1, r9
 8008770:	eb43 0501 	adc.w	r5, r3, r1
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	00eb      	lsls	r3, r5, #3
 800877e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008782:	00e2      	lsls	r2, r4, #3
 8008784:	4614      	mov	r4, r2
 8008786:	461d      	mov	r5, r3
 8008788:	4643      	mov	r3, r8
 800878a:	18e3      	adds	r3, r4, r3
 800878c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008790:	464b      	mov	r3, r9
 8008792:	eb45 0303 	adc.w	r3, r5, r3
 8008796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087aa:	f04f 0200 	mov.w	r2, #0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087b6:	4629      	mov	r1, r5
 80087b8:	008b      	lsls	r3, r1, #2
 80087ba:	4621      	mov	r1, r4
 80087bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c0:	4621      	mov	r1, r4
 80087c2:	008a      	lsls	r2, r1, #2
 80087c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087c8:	f7f8 fa7e 	bl	8000cc8 <__aeabi_uldivmod>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4b60      	ldr	r3, [pc, #384]	@ (8008954 <UART_SetConfig+0x4e4>)
 80087d2:	fba3 2302 	umull	r2, r3, r3, r2
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	011c      	lsls	r4, r3, #4
 80087da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087de:	2200      	movs	r2, #0
 80087e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80087e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80087ec:	4642      	mov	r2, r8
 80087ee:	464b      	mov	r3, r9
 80087f0:	1891      	adds	r1, r2, r2
 80087f2:	61b9      	str	r1, [r7, #24]
 80087f4:	415b      	adcs	r3, r3
 80087f6:	61fb      	str	r3, [r7, #28]
 80087f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087fc:	4641      	mov	r1, r8
 80087fe:	1851      	adds	r1, r2, r1
 8008800:	6139      	str	r1, [r7, #16]
 8008802:	4649      	mov	r1, r9
 8008804:	414b      	adcs	r3, r1
 8008806:	617b      	str	r3, [r7, #20]
 8008808:	f04f 0200 	mov.w	r2, #0
 800880c:	f04f 0300 	mov.w	r3, #0
 8008810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008814:	4659      	mov	r1, fp
 8008816:	00cb      	lsls	r3, r1, #3
 8008818:	4651      	mov	r1, sl
 800881a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800881e:	4651      	mov	r1, sl
 8008820:	00ca      	lsls	r2, r1, #3
 8008822:	4610      	mov	r0, r2
 8008824:	4619      	mov	r1, r3
 8008826:	4603      	mov	r3, r0
 8008828:	4642      	mov	r2, r8
 800882a:	189b      	adds	r3, r3, r2
 800882c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008830:	464b      	mov	r3, r9
 8008832:	460a      	mov	r2, r1
 8008834:	eb42 0303 	adc.w	r3, r2, r3
 8008838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800883c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008846:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008854:	4649      	mov	r1, r9
 8008856:	008b      	lsls	r3, r1, #2
 8008858:	4641      	mov	r1, r8
 800885a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800885e:	4641      	mov	r1, r8
 8008860:	008a      	lsls	r2, r1, #2
 8008862:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008866:	f7f8 fa2f 	bl	8000cc8 <__aeabi_uldivmod>
 800886a:	4602      	mov	r2, r0
 800886c:	460b      	mov	r3, r1
 800886e:	4611      	mov	r1, r2
 8008870:	4b38      	ldr	r3, [pc, #224]	@ (8008954 <UART_SetConfig+0x4e4>)
 8008872:	fba3 2301 	umull	r2, r3, r3, r1
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	2264      	movs	r2, #100	@ 0x64
 800887a:	fb02 f303 	mul.w	r3, r2, r3
 800887e:	1acb      	subs	r3, r1, r3
 8008880:	011b      	lsls	r3, r3, #4
 8008882:	3332      	adds	r3, #50	@ 0x32
 8008884:	4a33      	ldr	r2, [pc, #204]	@ (8008954 <UART_SetConfig+0x4e4>)
 8008886:	fba2 2303 	umull	r2, r3, r2, r3
 800888a:	095b      	lsrs	r3, r3, #5
 800888c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008890:	441c      	add	r4, r3
 8008892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008896:	2200      	movs	r2, #0
 8008898:	673b      	str	r3, [r7, #112]	@ 0x70
 800889a:	677a      	str	r2, [r7, #116]	@ 0x74
 800889c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	1891      	adds	r1, r2, r2
 80088a6:	60b9      	str	r1, [r7, #8]
 80088a8:	415b      	adcs	r3, r3
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088b0:	4641      	mov	r1, r8
 80088b2:	1851      	adds	r1, r2, r1
 80088b4:	6039      	str	r1, [r7, #0]
 80088b6:	4649      	mov	r1, r9
 80088b8:	414b      	adcs	r3, r1
 80088ba:	607b      	str	r3, [r7, #4]
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088c8:	4659      	mov	r1, fp
 80088ca:	00cb      	lsls	r3, r1, #3
 80088cc:	4651      	mov	r1, sl
 80088ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d2:	4651      	mov	r1, sl
 80088d4:	00ca      	lsls	r2, r1, #3
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	4603      	mov	r3, r0
 80088dc:	4642      	mov	r2, r8
 80088de:	189b      	adds	r3, r3, r2
 80088e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088e2:	464b      	mov	r3, r9
 80088e4:	460a      	mov	r2, r1
 80088e6:	eb42 0303 	adc.w	r3, r2, r3
 80088ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80088f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	f04f 0300 	mov.w	r3, #0
 8008900:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008904:	4649      	mov	r1, r9
 8008906:	008b      	lsls	r3, r1, #2
 8008908:	4641      	mov	r1, r8
 800890a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800890e:	4641      	mov	r1, r8
 8008910:	008a      	lsls	r2, r1, #2
 8008912:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008916:	f7f8 f9d7 	bl	8000cc8 <__aeabi_uldivmod>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4b0d      	ldr	r3, [pc, #52]	@ (8008954 <UART_SetConfig+0x4e4>)
 8008920:	fba3 1302 	umull	r1, r3, r3, r2
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	2164      	movs	r1, #100	@ 0x64
 8008928:	fb01 f303 	mul.w	r3, r1, r3
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	011b      	lsls	r3, r3, #4
 8008930:	3332      	adds	r3, #50	@ 0x32
 8008932:	4a08      	ldr	r2, [pc, #32]	@ (8008954 <UART_SetConfig+0x4e4>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	095b      	lsrs	r3, r3, #5
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4422      	add	r2, r4
 8008946:	609a      	str	r2, [r3, #8]
}
 8008948:	bf00      	nop
 800894a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800894e:	46bd      	mov	sp, r7
 8008950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008954:	51eb851f 	.word	0x51eb851f

08008958 <atof>:
 8008958:	2100      	movs	r1, #0
 800895a:	f000 be09 	b.w	8009570 <strtod>

0800895e <atoi>:
 800895e:	220a      	movs	r2, #10
 8008960:	2100      	movs	r1, #0
 8008962:	f000 be8b 	b.w	800967c <strtol>

08008966 <sulp>:
 8008966:	b570      	push	{r4, r5, r6, lr}
 8008968:	4604      	mov	r4, r0
 800896a:	460d      	mov	r5, r1
 800896c:	ec45 4b10 	vmov	d0, r4, r5
 8008970:	4616      	mov	r6, r2
 8008972:	f003 fafd 	bl	800bf70 <__ulp>
 8008976:	ec51 0b10 	vmov	r0, r1, d0
 800897a:	b17e      	cbz	r6, 800899c <sulp+0x36>
 800897c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008980:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008984:	2b00      	cmp	r3, #0
 8008986:	dd09      	ble.n	800899c <sulp+0x36>
 8008988:	051b      	lsls	r3, r3, #20
 800898a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800898e:	2400      	movs	r4, #0
 8008990:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008994:	4622      	mov	r2, r4
 8008996:	462b      	mov	r3, r5
 8008998:	f7f7 fe4e 	bl	8000638 <__aeabi_dmul>
 800899c:	ec41 0b10 	vmov	d0, r0, r1
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
 80089a2:	0000      	movs	r0, r0
 80089a4:	0000      	movs	r0, r0
	...

080089a8 <_strtod_l>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	b09f      	sub	sp, #124	@ 0x7c
 80089ae:	460c      	mov	r4, r1
 80089b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80089b2:	2200      	movs	r2, #0
 80089b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80089b6:	9005      	str	r0, [sp, #20]
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	f04f 0b00 	mov.w	fp, #0
 80089c0:	460a      	mov	r2, r1
 80089c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089c4:	7811      	ldrb	r1, [r2, #0]
 80089c6:	292b      	cmp	r1, #43	@ 0x2b
 80089c8:	d04a      	beq.n	8008a60 <_strtod_l+0xb8>
 80089ca:	d838      	bhi.n	8008a3e <_strtod_l+0x96>
 80089cc:	290d      	cmp	r1, #13
 80089ce:	d832      	bhi.n	8008a36 <_strtod_l+0x8e>
 80089d0:	2908      	cmp	r1, #8
 80089d2:	d832      	bhi.n	8008a3a <_strtod_l+0x92>
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d03b      	beq.n	8008a50 <_strtod_l+0xa8>
 80089d8:	2200      	movs	r2, #0
 80089da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80089dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80089de:	782a      	ldrb	r2, [r5, #0]
 80089e0:	2a30      	cmp	r2, #48	@ 0x30
 80089e2:	f040 80b3 	bne.w	8008b4c <_strtod_l+0x1a4>
 80089e6:	786a      	ldrb	r2, [r5, #1]
 80089e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80089ec:	2a58      	cmp	r2, #88	@ 0x58
 80089ee:	d16e      	bne.n	8008ace <_strtod_l+0x126>
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4a8e      	ldr	r2, [pc, #568]	@ (8008c34 <_strtod_l+0x28c>)
 80089fc:	9805      	ldr	r0, [sp, #20]
 80089fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a00:	a919      	add	r1, sp, #100	@ 0x64
 8008a02:	f002 fba7 	bl	800b154 <__gethex>
 8008a06:	f010 060f 	ands.w	r6, r0, #15
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	d005      	beq.n	8008a1a <_strtod_l+0x72>
 8008a0e:	2e06      	cmp	r6, #6
 8008a10:	d128      	bne.n	8008a64 <_strtod_l+0xbc>
 8008a12:	3501      	adds	r5, #1
 8008a14:	2300      	movs	r3, #0
 8008a16:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f040 858e 	bne.w	800953e <_strtod_l+0xb96>
 8008a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a24:	b1cb      	cbz	r3, 8008a5a <_strtod_l+0xb2>
 8008a26:	4652      	mov	r2, sl
 8008a28:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a2c:	ec43 2b10 	vmov	d0, r2, r3
 8008a30:	b01f      	add	sp, #124	@ 0x7c
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	2920      	cmp	r1, #32
 8008a38:	d1ce      	bne.n	80089d8 <_strtod_l+0x30>
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	e7c1      	b.n	80089c2 <_strtod_l+0x1a>
 8008a3e:	292d      	cmp	r1, #45	@ 0x2d
 8008a40:	d1ca      	bne.n	80089d8 <_strtod_l+0x30>
 8008a42:	2101      	movs	r1, #1
 8008a44:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008a46:	1c51      	adds	r1, r2, #1
 8008a48:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a4a:	7852      	ldrb	r2, [r2, #1]
 8008a4c:	2a00      	cmp	r2, #0
 8008a4e:	d1c5      	bne.n	80089dc <_strtod_l+0x34>
 8008a50:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a52:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 8570 	bne.w	800953a <_strtod_l+0xb92>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	e7e5      	b.n	8008a2c <_strtod_l+0x84>
 8008a60:	2100      	movs	r1, #0
 8008a62:	e7ef      	b.n	8008a44 <_strtod_l+0x9c>
 8008a64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a66:	b13a      	cbz	r2, 8008a78 <_strtod_l+0xd0>
 8008a68:	2135      	movs	r1, #53	@ 0x35
 8008a6a:	a81c      	add	r0, sp, #112	@ 0x70
 8008a6c:	f003 fb7a 	bl	800c164 <__copybits>
 8008a70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a72:	9805      	ldr	r0, [sp, #20]
 8008a74:	f002 ff48 	bl	800b908 <_Bfree>
 8008a78:	3e01      	subs	r6, #1
 8008a7a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008a7c:	2e04      	cmp	r6, #4
 8008a7e:	d806      	bhi.n	8008a8e <_strtod_l+0xe6>
 8008a80:	e8df f006 	tbb	[pc, r6]
 8008a84:	201d0314 	.word	0x201d0314
 8008a88:	14          	.byte	0x14
 8008a89:	00          	.byte	0x00
 8008a8a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a8e:	05e1      	lsls	r1, r4, #23
 8008a90:	bf48      	it	mi
 8008a92:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a9a:	0d1b      	lsrs	r3, r3, #20
 8008a9c:	051b      	lsls	r3, r3, #20
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1bb      	bne.n	8008a1a <_strtod_l+0x72>
 8008aa2:	f001 fc0d 	bl	800a2c0 <__errno>
 8008aa6:	2322      	movs	r3, #34	@ 0x22
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	e7b6      	b.n	8008a1a <_strtod_l+0x72>
 8008aac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ab0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ab4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ab8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008abc:	e7e7      	b.n	8008a8e <_strtod_l+0xe6>
 8008abe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008c3c <_strtod_l+0x294>
 8008ac2:	e7e4      	b.n	8008a8e <_strtod_l+0xe6>
 8008ac4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008ac8:	f04f 3aff 	mov.w	sl, #4294967295
 8008acc:	e7df      	b.n	8008a8e <_strtod_l+0xe6>
 8008ace:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b30      	cmp	r3, #48	@ 0x30
 8008ad8:	d0f9      	beq.n	8008ace <_strtod_l+0x126>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d09d      	beq.n	8008a1a <_strtod_l+0x72>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ae4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	9308      	str	r3, [sp, #32]
 8008aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aec:	461f      	mov	r7, r3
 8008aee:	220a      	movs	r2, #10
 8008af0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008af2:	7805      	ldrb	r5, [r0, #0]
 8008af4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008af8:	b2d9      	uxtb	r1, r3
 8008afa:	2909      	cmp	r1, #9
 8008afc:	d928      	bls.n	8008b50 <_strtod_l+0x1a8>
 8008afe:	494e      	ldr	r1, [pc, #312]	@ (8008c38 <_strtod_l+0x290>)
 8008b00:	2201      	movs	r2, #1
 8008b02:	f001 fb6d 	bl	800a1e0 <strncmp>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d032      	beq.n	8008b70 <_strtod_l+0x1c8>
 8008b0a:	2000      	movs	r0, #0
 8008b0c:	462a      	mov	r2, r5
 8008b0e:	4681      	mov	r9, r0
 8008b10:	463d      	mov	r5, r7
 8008b12:	4603      	mov	r3, r0
 8008b14:	2a65      	cmp	r2, #101	@ 0x65
 8008b16:	d001      	beq.n	8008b1c <_strtod_l+0x174>
 8008b18:	2a45      	cmp	r2, #69	@ 0x45
 8008b1a:	d114      	bne.n	8008b46 <_strtod_l+0x19e>
 8008b1c:	b91d      	cbnz	r5, 8008b26 <_strtod_l+0x17e>
 8008b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b20:	4302      	orrs	r2, r0
 8008b22:	d095      	beq.n	8008a50 <_strtod_l+0xa8>
 8008b24:	2500      	movs	r5, #0
 8008b26:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b28:	1c62      	adds	r2, r4, #1
 8008b2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b2c:	7862      	ldrb	r2, [r4, #1]
 8008b2e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b30:	d077      	beq.n	8008c22 <_strtod_l+0x27a>
 8008b32:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b34:	d07b      	beq.n	8008c2e <_strtod_l+0x286>
 8008b36:	f04f 0c00 	mov.w	ip, #0
 8008b3a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b3e:	2909      	cmp	r1, #9
 8008b40:	f240 8082 	bls.w	8008c48 <_strtod_l+0x2a0>
 8008b44:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b46:	f04f 0800 	mov.w	r8, #0
 8008b4a:	e0a2      	b.n	8008c92 <_strtod_l+0x2ea>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e7c7      	b.n	8008ae0 <_strtod_l+0x138>
 8008b50:	2f08      	cmp	r7, #8
 8008b52:	bfd5      	itete	le
 8008b54:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008b56:	9908      	ldrgt	r1, [sp, #32]
 8008b58:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b5c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008b60:	f100 0001 	add.w	r0, r0, #1
 8008b64:	bfd4      	ite	le
 8008b66:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008b68:	9308      	strgt	r3, [sp, #32]
 8008b6a:	3701      	adds	r7, #1
 8008b6c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b6e:	e7bf      	b.n	8008af0 <_strtod_l+0x148>
 8008b70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b76:	785a      	ldrb	r2, [r3, #1]
 8008b78:	b37f      	cbz	r7, 8008bda <_strtod_l+0x232>
 8008b7a:	4681      	mov	r9, r0
 8008b7c:	463d      	mov	r5, r7
 8008b7e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008b82:	2b09      	cmp	r3, #9
 8008b84:	d912      	bls.n	8008bac <_strtod_l+0x204>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7c4      	b.n	8008b14 <_strtod_l+0x16c>
 8008b8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b90:	785a      	ldrb	r2, [r3, #1]
 8008b92:	3001      	adds	r0, #1
 8008b94:	2a30      	cmp	r2, #48	@ 0x30
 8008b96:	d0f8      	beq.n	8008b8a <_strtod_l+0x1e2>
 8008b98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	f200 84d3 	bhi.w	8009548 <_strtod_l+0xba0>
 8008ba2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ba6:	4681      	mov	r9, r0
 8008ba8:	2000      	movs	r0, #0
 8008baa:	4605      	mov	r5, r0
 8008bac:	3a30      	subs	r2, #48	@ 0x30
 8008bae:	f100 0301 	add.w	r3, r0, #1
 8008bb2:	d02a      	beq.n	8008c0a <_strtod_l+0x262>
 8008bb4:	4499      	add	r9, r3
 8008bb6:	eb00 0c05 	add.w	ip, r0, r5
 8008bba:	462b      	mov	r3, r5
 8008bbc:	210a      	movs	r1, #10
 8008bbe:	4563      	cmp	r3, ip
 8008bc0:	d10d      	bne.n	8008bde <_strtod_l+0x236>
 8008bc2:	1c69      	adds	r1, r5, #1
 8008bc4:	4401      	add	r1, r0
 8008bc6:	4428      	add	r0, r5
 8008bc8:	2808      	cmp	r0, #8
 8008bca:	dc16      	bgt.n	8008bfa <_strtod_l+0x252>
 8008bcc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008bce:	230a      	movs	r3, #10
 8008bd0:	fb03 2300 	mla	r3, r3, r0, r2
 8008bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e018      	b.n	8008c0c <_strtod_l+0x264>
 8008bda:	4638      	mov	r0, r7
 8008bdc:	e7da      	b.n	8008b94 <_strtod_l+0x1ec>
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	f103 0301 	add.w	r3, r3, #1
 8008be4:	dc03      	bgt.n	8008bee <_strtod_l+0x246>
 8008be6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008be8:	434e      	muls	r6, r1
 8008bea:	960a      	str	r6, [sp, #40]	@ 0x28
 8008bec:	e7e7      	b.n	8008bbe <_strtod_l+0x216>
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	bfde      	ittt	le
 8008bf2:	9e08      	ldrle	r6, [sp, #32]
 8008bf4:	434e      	mulle	r6, r1
 8008bf6:	9608      	strle	r6, [sp, #32]
 8008bf8:	e7e1      	b.n	8008bbe <_strtod_l+0x216>
 8008bfa:	280f      	cmp	r0, #15
 8008bfc:	dceb      	bgt.n	8008bd6 <_strtod_l+0x22e>
 8008bfe:	9808      	ldr	r0, [sp, #32]
 8008c00:	230a      	movs	r3, #10
 8008c02:	fb03 2300 	mla	r3, r3, r0, r2
 8008c06:	9308      	str	r3, [sp, #32]
 8008c08:	e7e5      	b.n	8008bd6 <_strtod_l+0x22e>
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c0e:	1c50      	adds	r0, r2, #1
 8008c10:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c12:	7852      	ldrb	r2, [r2, #1]
 8008c14:	4618      	mov	r0, r3
 8008c16:	460d      	mov	r5, r1
 8008c18:	e7b1      	b.n	8008b7e <_strtod_l+0x1d6>
 8008c1a:	f04f 0900 	mov.w	r9, #0
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e77d      	b.n	8008b1e <_strtod_l+0x176>
 8008c22:	f04f 0c00 	mov.w	ip, #0
 8008c26:	1ca2      	adds	r2, r4, #2
 8008c28:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c2a:	78a2      	ldrb	r2, [r4, #2]
 8008c2c:	e785      	b.n	8008b3a <_strtod_l+0x192>
 8008c2e:	f04f 0c01 	mov.w	ip, #1
 8008c32:	e7f8      	b.n	8008c26 <_strtod_l+0x27e>
 8008c34:	0800dc28 	.word	0x0800dc28
 8008c38:	0800dc10 	.word	0x0800dc10
 8008c3c:	7ff00000 	.word	0x7ff00000
 8008c40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c42:	1c51      	adds	r1, r2, #1
 8008c44:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c46:	7852      	ldrb	r2, [r2, #1]
 8008c48:	2a30      	cmp	r2, #48	@ 0x30
 8008c4a:	d0f9      	beq.n	8008c40 <_strtod_l+0x298>
 8008c4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c50:	2908      	cmp	r1, #8
 8008c52:	f63f af78 	bhi.w	8008b46 <_strtod_l+0x19e>
 8008c56:	3a30      	subs	r2, #48	@ 0x30
 8008c58:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c5e:	f04f 080a 	mov.w	r8, #10
 8008c62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c64:	1c56      	adds	r6, r2, #1
 8008c66:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c68:	7852      	ldrb	r2, [r2, #1]
 8008c6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008c6e:	f1be 0f09 	cmp.w	lr, #9
 8008c72:	d939      	bls.n	8008ce8 <_strtod_l+0x340>
 8008c74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008c76:	1a76      	subs	r6, r6, r1
 8008c78:	2e08      	cmp	r6, #8
 8008c7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008c7e:	dc03      	bgt.n	8008c88 <_strtod_l+0x2e0>
 8008c80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c82:	4588      	cmp	r8, r1
 8008c84:	bfa8      	it	ge
 8008c86:	4688      	movge	r8, r1
 8008c88:	f1bc 0f00 	cmp.w	ip, #0
 8008c8c:	d001      	beq.n	8008c92 <_strtod_l+0x2ea>
 8008c8e:	f1c8 0800 	rsb	r8, r8, #0
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	d14e      	bne.n	8008d34 <_strtod_l+0x38c>
 8008c96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c98:	4308      	orrs	r0, r1
 8008c9a:	f47f aebe 	bne.w	8008a1a <_strtod_l+0x72>
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f47f aed6 	bne.w	8008a50 <_strtod_l+0xa8>
 8008ca4:	2a69      	cmp	r2, #105	@ 0x69
 8008ca6:	d028      	beq.n	8008cfa <_strtod_l+0x352>
 8008ca8:	dc25      	bgt.n	8008cf6 <_strtod_l+0x34e>
 8008caa:	2a49      	cmp	r2, #73	@ 0x49
 8008cac:	d025      	beq.n	8008cfa <_strtod_l+0x352>
 8008cae:	2a4e      	cmp	r2, #78	@ 0x4e
 8008cb0:	f47f aece 	bne.w	8008a50 <_strtod_l+0xa8>
 8008cb4:	499b      	ldr	r1, [pc, #620]	@ (8008f24 <_strtod_l+0x57c>)
 8008cb6:	a819      	add	r0, sp, #100	@ 0x64
 8008cb8:	f002 fc6e 	bl	800b598 <__match>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	f43f aec7 	beq.w	8008a50 <_strtod_l+0xa8>
 8008cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b28      	cmp	r3, #40	@ 0x28
 8008cc8:	d12e      	bne.n	8008d28 <_strtod_l+0x380>
 8008cca:	4997      	ldr	r1, [pc, #604]	@ (8008f28 <_strtod_l+0x580>)
 8008ccc:	aa1c      	add	r2, sp, #112	@ 0x70
 8008cce:	a819      	add	r0, sp, #100	@ 0x64
 8008cd0:	f002 fc76 	bl	800b5c0 <__hexnan>
 8008cd4:	2805      	cmp	r0, #5
 8008cd6:	d127      	bne.n	8008d28 <_strtod_l+0x380>
 8008cd8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008cda:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008cde:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ce2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ce6:	e698      	b.n	8008a1a <_strtod_l+0x72>
 8008ce8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cea:	fb08 2101 	mla	r1, r8, r1, r2
 8008cee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008cf2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cf4:	e7b5      	b.n	8008c62 <_strtod_l+0x2ba>
 8008cf6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008cf8:	e7da      	b.n	8008cb0 <_strtod_l+0x308>
 8008cfa:	498c      	ldr	r1, [pc, #560]	@ (8008f2c <_strtod_l+0x584>)
 8008cfc:	a819      	add	r0, sp, #100	@ 0x64
 8008cfe:	f002 fc4b 	bl	800b598 <__match>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f43f aea4 	beq.w	8008a50 <_strtod_l+0xa8>
 8008d08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d0a:	4989      	ldr	r1, [pc, #548]	@ (8008f30 <_strtod_l+0x588>)
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	a819      	add	r0, sp, #100	@ 0x64
 8008d10:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d12:	f002 fc41 	bl	800b598 <__match>
 8008d16:	b910      	cbnz	r0, 8008d1e <_strtod_l+0x376>
 8008d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008f40 <_strtod_l+0x598>
 8008d22:	f04f 0a00 	mov.w	sl, #0
 8008d26:	e678      	b.n	8008a1a <_strtod_l+0x72>
 8008d28:	4882      	ldr	r0, [pc, #520]	@ (8008f34 <_strtod_l+0x58c>)
 8008d2a:	f001 fb0d 	bl	800a348 <nan>
 8008d2e:	ec5b ab10 	vmov	sl, fp, d0
 8008d32:	e672      	b.n	8008a1a <_strtod_l+0x72>
 8008d34:	eba8 0309 	sub.w	r3, r8, r9
 8008d38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	bf08      	it	eq
 8008d40:	462f      	moveq	r7, r5
 8008d42:	2d10      	cmp	r5, #16
 8008d44:	462c      	mov	r4, r5
 8008d46:	bfa8      	it	ge
 8008d48:	2410      	movge	r4, #16
 8008d4a:	f7f7 fbfb 	bl	8000544 <__aeabi_ui2d>
 8008d4e:	2d09      	cmp	r5, #9
 8008d50:	4682      	mov	sl, r0
 8008d52:	468b      	mov	fp, r1
 8008d54:	dc13      	bgt.n	8008d7e <_strtod_l+0x3d6>
 8008d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f43f ae5e 	beq.w	8008a1a <_strtod_l+0x72>
 8008d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d60:	dd78      	ble.n	8008e54 <_strtod_l+0x4ac>
 8008d62:	2b16      	cmp	r3, #22
 8008d64:	dc5f      	bgt.n	8008e26 <_strtod_l+0x47e>
 8008d66:	4974      	ldr	r1, [pc, #464]	@ (8008f38 <_strtod_l+0x590>)
 8008d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d70:	4652      	mov	r2, sl
 8008d72:	465b      	mov	r3, fp
 8008d74:	f7f7 fc60 	bl	8000638 <__aeabi_dmul>
 8008d78:	4682      	mov	sl, r0
 8008d7a:	468b      	mov	fp, r1
 8008d7c:	e64d      	b.n	8008a1a <_strtod_l+0x72>
 8008d7e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f38 <_strtod_l+0x590>)
 8008d80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d88:	f7f7 fc56 	bl	8000638 <__aeabi_dmul>
 8008d8c:	4682      	mov	sl, r0
 8008d8e:	9808      	ldr	r0, [sp, #32]
 8008d90:	468b      	mov	fp, r1
 8008d92:	f7f7 fbd7 	bl	8000544 <__aeabi_ui2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	f7f7 fa95 	bl	80002cc <__adddf3>
 8008da2:	2d0f      	cmp	r5, #15
 8008da4:	4682      	mov	sl, r0
 8008da6:	468b      	mov	fp, r1
 8008da8:	ddd5      	ble.n	8008d56 <_strtod_l+0x3ae>
 8008daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dac:	1b2c      	subs	r4, r5, r4
 8008dae:	441c      	add	r4, r3
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	f340 8096 	ble.w	8008ee2 <_strtod_l+0x53a>
 8008db6:	f014 030f 	ands.w	r3, r4, #15
 8008dba:	d00a      	beq.n	8008dd2 <_strtod_l+0x42a>
 8008dbc:	495e      	ldr	r1, [pc, #376]	@ (8008f38 <_strtod_l+0x590>)
 8008dbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dca:	f7f7 fc35 	bl	8000638 <__aeabi_dmul>
 8008dce:	4682      	mov	sl, r0
 8008dd0:	468b      	mov	fp, r1
 8008dd2:	f034 040f 	bics.w	r4, r4, #15
 8008dd6:	d073      	beq.n	8008ec0 <_strtod_l+0x518>
 8008dd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008ddc:	dd48      	ble.n	8008e70 <_strtod_l+0x4c8>
 8008dde:	2400      	movs	r4, #0
 8008de0:	46a0      	mov	r8, r4
 8008de2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008de4:	46a1      	mov	r9, r4
 8008de6:	9a05      	ldr	r2, [sp, #20]
 8008de8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008f40 <_strtod_l+0x598>
 8008dec:	2322      	movs	r3, #34	@ 0x22
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	f04f 0a00 	mov.w	sl, #0
 8008df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f43f ae0f 	beq.w	8008a1a <_strtod_l+0x72>
 8008dfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dfe:	9805      	ldr	r0, [sp, #20]
 8008e00:	f002 fd82 	bl	800b908 <_Bfree>
 8008e04:	9805      	ldr	r0, [sp, #20]
 8008e06:	4649      	mov	r1, r9
 8008e08:	f002 fd7e 	bl	800b908 <_Bfree>
 8008e0c:	9805      	ldr	r0, [sp, #20]
 8008e0e:	4641      	mov	r1, r8
 8008e10:	f002 fd7a 	bl	800b908 <_Bfree>
 8008e14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e16:	9805      	ldr	r0, [sp, #20]
 8008e18:	f002 fd76 	bl	800b908 <_Bfree>
 8008e1c:	9805      	ldr	r0, [sp, #20]
 8008e1e:	4621      	mov	r1, r4
 8008e20:	f002 fd72 	bl	800b908 <_Bfree>
 8008e24:	e5f9      	b.n	8008a1a <_strtod_l+0x72>
 8008e26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	dbbc      	blt.n	8008daa <_strtod_l+0x402>
 8008e30:	4c41      	ldr	r4, [pc, #260]	@ (8008f38 <_strtod_l+0x590>)
 8008e32:	f1c5 050f 	rsb	r5, r5, #15
 8008e36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	465b      	mov	r3, fp
 8008e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e42:	f7f7 fbf9 	bl	8000638 <__aeabi_dmul>
 8008e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e48:	1b5d      	subs	r5, r3, r5
 8008e4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e52:	e78f      	b.n	8008d74 <_strtod_l+0x3cc>
 8008e54:	3316      	adds	r3, #22
 8008e56:	dba8      	blt.n	8008daa <_strtod_l+0x402>
 8008e58:	4b37      	ldr	r3, [pc, #220]	@ (8008f38 <_strtod_l+0x590>)
 8008e5a:	eba9 0808 	sub.w	r8, r9, r8
 8008e5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008e66:	4650      	mov	r0, sl
 8008e68:	4659      	mov	r1, fp
 8008e6a:	f7f7 fd0f 	bl	800088c <__aeabi_ddiv>
 8008e6e:	e783      	b.n	8008d78 <_strtod_l+0x3d0>
 8008e70:	4b32      	ldr	r3, [pc, #200]	@ (8008f3c <_strtod_l+0x594>)
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	2300      	movs	r3, #0
 8008e76:	1124      	asrs	r4, r4, #4
 8008e78:	4650      	mov	r0, sl
 8008e7a:	4659      	mov	r1, fp
 8008e7c:	461e      	mov	r6, r3
 8008e7e:	2c01      	cmp	r4, #1
 8008e80:	dc21      	bgt.n	8008ec6 <_strtod_l+0x51e>
 8008e82:	b10b      	cbz	r3, 8008e88 <_strtod_l+0x4e0>
 8008e84:	4682      	mov	sl, r0
 8008e86:	468b      	mov	fp, r1
 8008e88:	492c      	ldr	r1, [pc, #176]	@ (8008f3c <_strtod_l+0x594>)
 8008e8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e92:	4652      	mov	r2, sl
 8008e94:	465b      	mov	r3, fp
 8008e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9a:	f7f7 fbcd 	bl	8000638 <__aeabi_dmul>
 8008e9e:	4b28      	ldr	r3, [pc, #160]	@ (8008f40 <_strtod_l+0x598>)
 8008ea0:	460a      	mov	r2, r1
 8008ea2:	400b      	ands	r3, r1
 8008ea4:	4927      	ldr	r1, [pc, #156]	@ (8008f44 <_strtod_l+0x59c>)
 8008ea6:	428b      	cmp	r3, r1
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	d898      	bhi.n	8008dde <_strtod_l+0x436>
 8008eac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf86      	itte	hi
 8008eb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008f48 <_strtod_l+0x5a0>
 8008eb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ebc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9308      	str	r3, [sp, #32]
 8008ec4:	e07a      	b.n	8008fbc <_strtod_l+0x614>
 8008ec6:	07e2      	lsls	r2, r4, #31
 8008ec8:	d505      	bpl.n	8008ed6 <_strtod_l+0x52e>
 8008eca:	9b08      	ldr	r3, [sp, #32]
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 fbb2 	bl	8000638 <__aeabi_dmul>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	9a08      	ldr	r2, [sp, #32]
 8008ed8:	3208      	adds	r2, #8
 8008eda:	3601      	adds	r6, #1
 8008edc:	1064      	asrs	r4, r4, #1
 8008ede:	9208      	str	r2, [sp, #32]
 8008ee0:	e7cd      	b.n	8008e7e <_strtod_l+0x4d6>
 8008ee2:	d0ed      	beq.n	8008ec0 <_strtod_l+0x518>
 8008ee4:	4264      	negs	r4, r4
 8008ee6:	f014 020f 	ands.w	r2, r4, #15
 8008eea:	d00a      	beq.n	8008f02 <_strtod_l+0x55a>
 8008eec:	4b12      	ldr	r3, [pc, #72]	@ (8008f38 <_strtod_l+0x590>)
 8008eee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ef2:	4650      	mov	r0, sl
 8008ef4:	4659      	mov	r1, fp
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	f7f7 fcc7 	bl	800088c <__aeabi_ddiv>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	1124      	asrs	r4, r4, #4
 8008f04:	d0dc      	beq.n	8008ec0 <_strtod_l+0x518>
 8008f06:	2c1f      	cmp	r4, #31
 8008f08:	dd20      	ble.n	8008f4c <_strtod_l+0x5a4>
 8008f0a:	2400      	movs	r4, #0
 8008f0c:	46a0      	mov	r8, r4
 8008f0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f10:	46a1      	mov	r9, r4
 8008f12:	9a05      	ldr	r2, [sp, #20]
 8008f14:	2322      	movs	r3, #34	@ 0x22
 8008f16:	f04f 0a00 	mov.w	sl, #0
 8008f1a:	f04f 0b00 	mov.w	fp, #0
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e768      	b.n	8008df4 <_strtod_l+0x44c>
 8008f22:	bf00      	nop
 8008f24:	0800dd76 	.word	0x0800dd76
 8008f28:	0800dc14 	.word	0x0800dc14
 8008f2c:	0800dd6e 	.word	0x0800dd6e
 8008f30:	0800dda8 	.word	0x0800dda8
 8008f34:	0800e034 	.word	0x0800e034
 8008f38:	0800df20 	.word	0x0800df20
 8008f3c:	0800def8 	.word	0x0800def8
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	7ca00000 	.word	0x7ca00000
 8008f48:	7fefffff 	.word	0x7fefffff
 8008f4c:	f014 0310 	ands.w	r3, r4, #16
 8008f50:	bf18      	it	ne
 8008f52:	236a      	movne	r3, #106	@ 0x6a
 8008f54:	4ea9      	ldr	r6, [pc, #676]	@ (80091fc <_strtod_l+0x854>)
 8008f56:	9308      	str	r3, [sp, #32]
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	07e2      	lsls	r2, r4, #31
 8008f60:	d504      	bpl.n	8008f6c <_strtod_l+0x5c4>
 8008f62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f66:	f7f7 fb67 	bl	8000638 <__aeabi_dmul>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	1064      	asrs	r4, r4, #1
 8008f6e:	f106 0608 	add.w	r6, r6, #8
 8008f72:	d1f4      	bne.n	8008f5e <_strtod_l+0x5b6>
 8008f74:	b10b      	cbz	r3, 8008f7a <_strtod_l+0x5d2>
 8008f76:	4682      	mov	sl, r0
 8008f78:	468b      	mov	fp, r1
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	b1b3      	cbz	r3, 8008fac <_strtod_l+0x604>
 8008f7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008f82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	4659      	mov	r1, fp
 8008f8a:	dd0f      	ble.n	8008fac <_strtod_l+0x604>
 8008f8c:	2b1f      	cmp	r3, #31
 8008f8e:	dd55      	ble.n	800903c <_strtod_l+0x694>
 8008f90:	2b34      	cmp	r3, #52	@ 0x34
 8008f92:	bfde      	ittt	le
 8008f94:	f04f 33ff 	movle.w	r3, #4294967295
 8008f98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f9c:	4093      	lslle	r3, r2
 8008f9e:	f04f 0a00 	mov.w	sl, #0
 8008fa2:	bfcc      	ite	gt
 8008fa4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008fa8:	ea03 0b01 	andle.w	fp, r3, r1
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	f7f7 fda8 	bl	8000b08 <__aeabi_dcmpeq>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d1a6      	bne.n	8008f0a <_strtod_l+0x562>
 8008fbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008fc2:	9805      	ldr	r0, [sp, #20]
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	f002 fd06 	bl	800b9d8 <__s2b>
 8008fcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f af05 	beq.w	8008dde <_strtod_l+0x436>
 8008fd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fd6:	2a00      	cmp	r2, #0
 8008fd8:	eba9 0308 	sub.w	r3, r9, r8
 8008fdc:	bfa8      	it	ge
 8008fde:	2300      	movge	r3, #0
 8008fe0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fe2:	2400      	movs	r4, #0
 8008fe4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fe8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008fea:	46a0      	mov	r8, r4
 8008fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fee:	9805      	ldr	r0, [sp, #20]
 8008ff0:	6859      	ldr	r1, [r3, #4]
 8008ff2:	f002 fc49 	bl	800b888 <_Balloc>
 8008ff6:	4681      	mov	r9, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f43f aef4 	beq.w	8008de6 <_strtod_l+0x43e>
 8008ffe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	3202      	adds	r2, #2
 8009004:	f103 010c 	add.w	r1, r3, #12
 8009008:	0092      	lsls	r2, r2, #2
 800900a:	300c      	adds	r0, #12
 800900c:	f001 f98d 	bl	800a32a <memcpy>
 8009010:	ec4b ab10 	vmov	d0, sl, fp
 8009014:	9805      	ldr	r0, [sp, #20]
 8009016:	aa1c      	add	r2, sp, #112	@ 0x70
 8009018:	a91b      	add	r1, sp, #108	@ 0x6c
 800901a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800901e:	f003 f817 	bl	800c050 <__d2b>
 8009022:	901a      	str	r0, [sp, #104]	@ 0x68
 8009024:	2800      	cmp	r0, #0
 8009026:	f43f aede 	beq.w	8008de6 <_strtod_l+0x43e>
 800902a:	9805      	ldr	r0, [sp, #20]
 800902c:	2101      	movs	r1, #1
 800902e:	f002 fd69 	bl	800bb04 <__i2b>
 8009032:	4680      	mov	r8, r0
 8009034:	b948      	cbnz	r0, 800904a <_strtod_l+0x6a2>
 8009036:	f04f 0800 	mov.w	r8, #0
 800903a:	e6d4      	b.n	8008de6 <_strtod_l+0x43e>
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	fa02 f303 	lsl.w	r3, r2, r3
 8009044:	ea03 0a0a 	and.w	sl, r3, sl
 8009048:	e7b0      	b.n	8008fac <_strtod_l+0x604>
 800904a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800904c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800904e:	2d00      	cmp	r5, #0
 8009050:	bfab      	itete	ge
 8009052:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009054:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009056:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009058:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800905a:	bfac      	ite	ge
 800905c:	18ef      	addge	r7, r5, r3
 800905e:	1b5e      	sublt	r6, r3, r5
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	1aed      	subs	r5, r5, r3
 8009064:	4415      	add	r5, r2
 8009066:	4b66      	ldr	r3, [pc, #408]	@ (8009200 <_strtod_l+0x858>)
 8009068:	3d01      	subs	r5, #1
 800906a:	429d      	cmp	r5, r3
 800906c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009070:	da50      	bge.n	8009114 <_strtod_l+0x76c>
 8009072:	1b5b      	subs	r3, r3, r5
 8009074:	2b1f      	cmp	r3, #31
 8009076:	eba2 0203 	sub.w	r2, r2, r3
 800907a:	f04f 0101 	mov.w	r1, #1
 800907e:	dc3d      	bgt.n	80090fc <_strtod_l+0x754>
 8009080:	fa01 f303 	lsl.w	r3, r1, r3
 8009084:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009086:	2300      	movs	r3, #0
 8009088:	9310      	str	r3, [sp, #64]	@ 0x40
 800908a:	18bd      	adds	r5, r7, r2
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	42af      	cmp	r7, r5
 8009090:	4416      	add	r6, r2
 8009092:	441e      	add	r6, r3
 8009094:	463b      	mov	r3, r7
 8009096:	bfa8      	it	ge
 8009098:	462b      	movge	r3, r5
 800909a:	42b3      	cmp	r3, r6
 800909c:	bfa8      	it	ge
 800909e:	4633      	movge	r3, r6
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	bfc2      	ittt	gt
 80090a4:	1aed      	subgt	r5, r5, r3
 80090a6:	1af6      	subgt	r6, r6, r3
 80090a8:	1aff      	subgt	r7, r7, r3
 80090aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd16      	ble.n	80090de <_strtod_l+0x736>
 80090b0:	4641      	mov	r1, r8
 80090b2:	9805      	ldr	r0, [sp, #20]
 80090b4:	461a      	mov	r2, r3
 80090b6:	f002 fde5 	bl	800bc84 <__pow5mult>
 80090ba:	4680      	mov	r8, r0
 80090bc:	2800      	cmp	r0, #0
 80090be:	d0ba      	beq.n	8009036 <_strtod_l+0x68e>
 80090c0:	4601      	mov	r1, r0
 80090c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090c4:	9805      	ldr	r0, [sp, #20]
 80090c6:	f002 fd33 	bl	800bb30 <__multiply>
 80090ca:	900e      	str	r0, [sp, #56]	@ 0x38
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f ae8a 	beq.w	8008de6 <_strtod_l+0x43e>
 80090d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090d4:	9805      	ldr	r0, [sp, #20]
 80090d6:	f002 fc17 	bl	800b908 <_Bfree>
 80090da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80090de:	2d00      	cmp	r5, #0
 80090e0:	dc1d      	bgt.n	800911e <_strtod_l+0x776>
 80090e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	dd23      	ble.n	8009130 <_strtod_l+0x788>
 80090e8:	4649      	mov	r1, r9
 80090ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80090ec:	9805      	ldr	r0, [sp, #20]
 80090ee:	f002 fdc9 	bl	800bc84 <__pow5mult>
 80090f2:	4681      	mov	r9, r0
 80090f4:	b9e0      	cbnz	r0, 8009130 <_strtod_l+0x788>
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	e674      	b.n	8008de6 <_strtod_l+0x43e>
 80090fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009100:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009104:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009108:	35e2      	adds	r5, #226	@ 0xe2
 800910a:	fa01 f305 	lsl.w	r3, r1, r5
 800910e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009110:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009112:	e7ba      	b.n	800908a <_strtod_l+0x6e2>
 8009114:	2300      	movs	r3, #0
 8009116:	9310      	str	r3, [sp, #64]	@ 0x40
 8009118:	2301      	movs	r3, #1
 800911a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800911c:	e7b5      	b.n	800908a <_strtod_l+0x6e2>
 800911e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009120:	9805      	ldr	r0, [sp, #20]
 8009122:	462a      	mov	r2, r5
 8009124:	f002 fe08 	bl	800bd38 <__lshift>
 8009128:	901a      	str	r0, [sp, #104]	@ 0x68
 800912a:	2800      	cmp	r0, #0
 800912c:	d1d9      	bne.n	80090e2 <_strtod_l+0x73a>
 800912e:	e65a      	b.n	8008de6 <_strtod_l+0x43e>
 8009130:	2e00      	cmp	r6, #0
 8009132:	dd07      	ble.n	8009144 <_strtod_l+0x79c>
 8009134:	4649      	mov	r1, r9
 8009136:	9805      	ldr	r0, [sp, #20]
 8009138:	4632      	mov	r2, r6
 800913a:	f002 fdfd 	bl	800bd38 <__lshift>
 800913e:	4681      	mov	r9, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	d0d8      	beq.n	80090f6 <_strtod_l+0x74e>
 8009144:	2f00      	cmp	r7, #0
 8009146:	dd08      	ble.n	800915a <_strtod_l+0x7b2>
 8009148:	4641      	mov	r1, r8
 800914a:	9805      	ldr	r0, [sp, #20]
 800914c:	463a      	mov	r2, r7
 800914e:	f002 fdf3 	bl	800bd38 <__lshift>
 8009152:	4680      	mov	r8, r0
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f ae46 	beq.w	8008de6 <_strtod_l+0x43e>
 800915a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800915c:	9805      	ldr	r0, [sp, #20]
 800915e:	464a      	mov	r2, r9
 8009160:	f002 fe72 	bl	800be48 <__mdiff>
 8009164:	4604      	mov	r4, r0
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f ae3d 	beq.w	8008de6 <_strtod_l+0x43e>
 800916c:	68c3      	ldr	r3, [r0, #12]
 800916e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009170:	2300      	movs	r3, #0
 8009172:	60c3      	str	r3, [r0, #12]
 8009174:	4641      	mov	r1, r8
 8009176:	f002 fe4b 	bl	800be10 <__mcmp>
 800917a:	2800      	cmp	r0, #0
 800917c:	da46      	bge.n	800920c <_strtod_l+0x864>
 800917e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009180:	ea53 030a 	orrs.w	r3, r3, sl
 8009184:	d16c      	bne.n	8009260 <_strtod_l+0x8b8>
 8009186:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800918a:	2b00      	cmp	r3, #0
 800918c:	d168      	bne.n	8009260 <_strtod_l+0x8b8>
 800918e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009192:	0d1b      	lsrs	r3, r3, #20
 8009194:	051b      	lsls	r3, r3, #20
 8009196:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800919a:	d961      	bls.n	8009260 <_strtod_l+0x8b8>
 800919c:	6963      	ldr	r3, [r4, #20]
 800919e:	b913      	cbnz	r3, 80091a6 <_strtod_l+0x7fe>
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	dd5c      	ble.n	8009260 <_strtod_l+0x8b8>
 80091a6:	4621      	mov	r1, r4
 80091a8:	2201      	movs	r2, #1
 80091aa:	9805      	ldr	r0, [sp, #20]
 80091ac:	f002 fdc4 	bl	800bd38 <__lshift>
 80091b0:	4641      	mov	r1, r8
 80091b2:	4604      	mov	r4, r0
 80091b4:	f002 fe2c 	bl	800be10 <__mcmp>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dd51      	ble.n	8009260 <_strtod_l+0x8b8>
 80091bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091c0:	9a08      	ldr	r2, [sp, #32]
 80091c2:	0d1b      	lsrs	r3, r3, #20
 80091c4:	051b      	lsls	r3, r3, #20
 80091c6:	2a00      	cmp	r2, #0
 80091c8:	d06b      	beq.n	80092a2 <_strtod_l+0x8fa>
 80091ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091ce:	d868      	bhi.n	80092a2 <_strtod_l+0x8fa>
 80091d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80091d4:	f67f ae9d 	bls.w	8008f12 <_strtod_l+0x56a>
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <_strtod_l+0x85c>)
 80091da:	4650      	mov	r0, sl
 80091dc:	4659      	mov	r1, fp
 80091de:	2200      	movs	r2, #0
 80091e0:	f7f7 fa2a 	bl	8000638 <__aeabi_dmul>
 80091e4:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <_strtod_l+0x860>)
 80091e6:	400b      	ands	r3, r1
 80091e8:	4682      	mov	sl, r0
 80091ea:	468b      	mov	fp, r1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f47f ae05 	bne.w	8008dfc <_strtod_l+0x454>
 80091f2:	9a05      	ldr	r2, [sp, #20]
 80091f4:	2322      	movs	r3, #34	@ 0x22
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	e600      	b.n	8008dfc <_strtod_l+0x454>
 80091fa:	bf00      	nop
 80091fc:	0800dc40 	.word	0x0800dc40
 8009200:	fffffc02 	.word	0xfffffc02
 8009204:	39500000 	.word	0x39500000
 8009208:	7ff00000 	.word	0x7ff00000
 800920c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009210:	d165      	bne.n	80092de <_strtod_l+0x936>
 8009212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009218:	b35a      	cbz	r2, 8009272 <_strtod_l+0x8ca>
 800921a:	4a9f      	ldr	r2, [pc, #636]	@ (8009498 <_strtod_l+0xaf0>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d12b      	bne.n	8009278 <_strtod_l+0x8d0>
 8009220:	9b08      	ldr	r3, [sp, #32]
 8009222:	4651      	mov	r1, sl
 8009224:	b303      	cbz	r3, 8009268 <_strtod_l+0x8c0>
 8009226:	4b9d      	ldr	r3, [pc, #628]	@ (800949c <_strtod_l+0xaf4>)
 8009228:	465a      	mov	r2, fp
 800922a:	4013      	ands	r3, r2
 800922c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009230:	f04f 32ff 	mov.w	r2, #4294967295
 8009234:	d81b      	bhi.n	800926e <_strtod_l+0x8c6>
 8009236:	0d1b      	lsrs	r3, r3, #20
 8009238:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800923c:	fa02 f303 	lsl.w	r3, r2, r3
 8009240:	4299      	cmp	r1, r3
 8009242:	d119      	bne.n	8009278 <_strtod_l+0x8d0>
 8009244:	4b96      	ldr	r3, [pc, #600]	@ (80094a0 <_strtod_l+0xaf8>)
 8009246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009248:	429a      	cmp	r2, r3
 800924a:	d102      	bne.n	8009252 <_strtod_l+0x8aa>
 800924c:	3101      	adds	r1, #1
 800924e:	f43f adca 	beq.w	8008de6 <_strtod_l+0x43e>
 8009252:	4b92      	ldr	r3, [pc, #584]	@ (800949c <_strtod_l+0xaf4>)
 8009254:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009256:	401a      	ands	r2, r3
 8009258:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800925c:	f04f 0a00 	mov.w	sl, #0
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1b8      	bne.n	80091d8 <_strtod_l+0x830>
 8009266:	e5c9      	b.n	8008dfc <_strtod_l+0x454>
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	e7e8      	b.n	8009240 <_strtod_l+0x898>
 800926e:	4613      	mov	r3, r2
 8009270:	e7e6      	b.n	8009240 <_strtod_l+0x898>
 8009272:	ea53 030a 	orrs.w	r3, r3, sl
 8009276:	d0a1      	beq.n	80091bc <_strtod_l+0x814>
 8009278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800927a:	b1db      	cbz	r3, 80092b4 <_strtod_l+0x90c>
 800927c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800927e:	4213      	tst	r3, r2
 8009280:	d0ee      	beq.n	8009260 <_strtod_l+0x8b8>
 8009282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009284:	9a08      	ldr	r2, [sp, #32]
 8009286:	4650      	mov	r0, sl
 8009288:	4659      	mov	r1, fp
 800928a:	b1bb      	cbz	r3, 80092bc <_strtod_l+0x914>
 800928c:	f7ff fb6b 	bl	8008966 <sulp>
 8009290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009294:	ec53 2b10 	vmov	r2, r3, d0
 8009298:	f7f7 f818 	bl	80002cc <__adddf3>
 800929c:	4682      	mov	sl, r0
 800929e:	468b      	mov	fp, r1
 80092a0:	e7de      	b.n	8009260 <_strtod_l+0x8b8>
 80092a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80092a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092ae:	f04f 3aff 	mov.w	sl, #4294967295
 80092b2:	e7d5      	b.n	8009260 <_strtod_l+0x8b8>
 80092b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092b6:	ea13 0f0a 	tst.w	r3, sl
 80092ba:	e7e1      	b.n	8009280 <_strtod_l+0x8d8>
 80092bc:	f7ff fb53 	bl	8008966 <sulp>
 80092c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092c4:	ec53 2b10 	vmov	r2, r3, d0
 80092c8:	f7f6 fffe 	bl	80002c8 <__aeabi_dsub>
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4682      	mov	sl, r0
 80092d2:	468b      	mov	fp, r1
 80092d4:	f7f7 fc18 	bl	8000b08 <__aeabi_dcmpeq>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d0c1      	beq.n	8009260 <_strtod_l+0x8b8>
 80092dc:	e619      	b.n	8008f12 <_strtod_l+0x56a>
 80092de:	4641      	mov	r1, r8
 80092e0:	4620      	mov	r0, r4
 80092e2:	f002 ff0d 	bl	800c100 <__ratio>
 80092e6:	ec57 6b10 	vmov	r6, r7, d0
 80092ea:	2200      	movs	r2, #0
 80092ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f7 fc1c 	bl	8000b30 <__aeabi_dcmple>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d06f      	beq.n	80093dc <_strtod_l+0xa34>
 80092fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d17a      	bne.n	80093f8 <_strtod_l+0xa50>
 8009302:	f1ba 0f00 	cmp.w	sl, #0
 8009306:	d158      	bne.n	80093ba <_strtod_l+0xa12>
 8009308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800930a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800930e:	2b00      	cmp	r3, #0
 8009310:	d15a      	bne.n	80093c8 <_strtod_l+0xa20>
 8009312:	4b64      	ldr	r3, [pc, #400]	@ (80094a4 <_strtod_l+0xafc>)
 8009314:	2200      	movs	r2, #0
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fbff 	bl	8000b1c <__aeabi_dcmplt>
 800931e:	2800      	cmp	r0, #0
 8009320:	d159      	bne.n	80093d6 <_strtod_l+0xa2e>
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	4b60      	ldr	r3, [pc, #384]	@ (80094a8 <_strtod_l+0xb00>)
 8009328:	2200      	movs	r2, #0
 800932a:	f7f7 f985 	bl	8000638 <__aeabi_dmul>
 800932e:	4606      	mov	r6, r0
 8009330:	460f      	mov	r7, r1
 8009332:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009336:	9606      	str	r6, [sp, #24]
 8009338:	9307      	str	r3, [sp, #28]
 800933a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800933e:	4d57      	ldr	r5, [pc, #348]	@ (800949c <_strtod_l+0xaf4>)
 8009340:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009346:	401d      	ands	r5, r3
 8009348:	4b58      	ldr	r3, [pc, #352]	@ (80094ac <_strtod_l+0xb04>)
 800934a:	429d      	cmp	r5, r3
 800934c:	f040 80b2 	bne.w	80094b4 <_strtod_l+0xb0c>
 8009350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009352:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009356:	ec4b ab10 	vmov	d0, sl, fp
 800935a:	f002 fe09 	bl	800bf70 <__ulp>
 800935e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009362:	ec51 0b10 	vmov	r0, r1, d0
 8009366:	f7f7 f967 	bl	8000638 <__aeabi_dmul>
 800936a:	4652      	mov	r2, sl
 800936c:	465b      	mov	r3, fp
 800936e:	f7f6 ffad 	bl	80002cc <__adddf3>
 8009372:	460b      	mov	r3, r1
 8009374:	4949      	ldr	r1, [pc, #292]	@ (800949c <_strtod_l+0xaf4>)
 8009376:	4a4e      	ldr	r2, [pc, #312]	@ (80094b0 <_strtod_l+0xb08>)
 8009378:	4019      	ands	r1, r3
 800937a:	4291      	cmp	r1, r2
 800937c:	4682      	mov	sl, r0
 800937e:	d942      	bls.n	8009406 <_strtod_l+0xa5e>
 8009380:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009382:	4b47      	ldr	r3, [pc, #284]	@ (80094a0 <_strtod_l+0xaf8>)
 8009384:	429a      	cmp	r2, r3
 8009386:	d103      	bne.n	8009390 <_strtod_l+0x9e8>
 8009388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800938a:	3301      	adds	r3, #1
 800938c:	f43f ad2b 	beq.w	8008de6 <_strtod_l+0x43e>
 8009390:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80094a0 <_strtod_l+0xaf8>
 8009394:	f04f 3aff 	mov.w	sl, #4294967295
 8009398:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800939a:	9805      	ldr	r0, [sp, #20]
 800939c:	f002 fab4 	bl	800b908 <_Bfree>
 80093a0:	9805      	ldr	r0, [sp, #20]
 80093a2:	4649      	mov	r1, r9
 80093a4:	f002 fab0 	bl	800b908 <_Bfree>
 80093a8:	9805      	ldr	r0, [sp, #20]
 80093aa:	4641      	mov	r1, r8
 80093ac:	f002 faac 	bl	800b908 <_Bfree>
 80093b0:	9805      	ldr	r0, [sp, #20]
 80093b2:	4621      	mov	r1, r4
 80093b4:	f002 faa8 	bl	800b908 <_Bfree>
 80093b8:	e618      	b.n	8008fec <_strtod_l+0x644>
 80093ba:	f1ba 0f01 	cmp.w	sl, #1
 80093be:	d103      	bne.n	80093c8 <_strtod_l+0xa20>
 80093c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f43f ada5 	beq.w	8008f12 <_strtod_l+0x56a>
 80093c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009478 <_strtod_l+0xad0>
 80093cc:	4f35      	ldr	r7, [pc, #212]	@ (80094a4 <_strtod_l+0xafc>)
 80093ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093d2:	2600      	movs	r6, #0
 80093d4:	e7b1      	b.n	800933a <_strtod_l+0x992>
 80093d6:	4f34      	ldr	r7, [pc, #208]	@ (80094a8 <_strtod_l+0xb00>)
 80093d8:	2600      	movs	r6, #0
 80093da:	e7aa      	b.n	8009332 <_strtod_l+0x98a>
 80093dc:	4b32      	ldr	r3, [pc, #200]	@ (80094a8 <_strtod_l+0xb00>)
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	2200      	movs	r2, #0
 80093e4:	f7f7 f928 	bl	8000638 <__aeabi_dmul>
 80093e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d09f      	beq.n	8009332 <_strtod_l+0x98a>
 80093f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80093f6:	e7a0      	b.n	800933a <_strtod_l+0x992>
 80093f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009480 <_strtod_l+0xad8>
 80093fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009400:	ec57 6b17 	vmov	r6, r7, d7
 8009404:	e799      	b.n	800933a <_strtod_l+0x992>
 8009406:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1c1      	bne.n	8009398 <_strtod_l+0x9f0>
 8009414:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009418:	0d1b      	lsrs	r3, r3, #20
 800941a:	051b      	lsls	r3, r3, #20
 800941c:	429d      	cmp	r5, r3
 800941e:	d1bb      	bne.n	8009398 <_strtod_l+0x9f0>
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f7 fc68 	bl	8000cf8 <__aeabi_d2lz>
 8009428:	f7f7 f8d8 	bl	80005dc <__aeabi_l2d>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f6 ff48 	bl	80002c8 <__aeabi_dsub>
 8009438:	460b      	mov	r3, r1
 800943a:	4602      	mov	r2, r0
 800943c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009440:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009446:	ea46 060a 	orr.w	r6, r6, sl
 800944a:	431e      	orrs	r6, r3
 800944c:	d06f      	beq.n	800952e <_strtod_l+0xb86>
 800944e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009488 <_strtod_l+0xae0>)
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f7f7 fb62 	bl	8000b1c <__aeabi_dcmplt>
 8009458:	2800      	cmp	r0, #0
 800945a:	f47f accf 	bne.w	8008dfc <_strtod_l+0x454>
 800945e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009490 <_strtod_l+0xae8>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009468:	f7f7 fb76 	bl	8000b58 <__aeabi_dcmpgt>
 800946c:	2800      	cmp	r0, #0
 800946e:	d093      	beq.n	8009398 <_strtod_l+0x9f0>
 8009470:	e4c4      	b.n	8008dfc <_strtod_l+0x454>
 8009472:	bf00      	nop
 8009474:	f3af 8000 	nop.w
 8009478:	00000000 	.word	0x00000000
 800947c:	bff00000 	.word	0xbff00000
 8009480:	00000000 	.word	0x00000000
 8009484:	3ff00000 	.word	0x3ff00000
 8009488:	94a03595 	.word	0x94a03595
 800948c:	3fdfffff 	.word	0x3fdfffff
 8009490:	35afe535 	.word	0x35afe535
 8009494:	3fe00000 	.word	0x3fe00000
 8009498:	000fffff 	.word	0x000fffff
 800949c:	7ff00000 	.word	0x7ff00000
 80094a0:	7fefffff 	.word	0x7fefffff
 80094a4:	3ff00000 	.word	0x3ff00000
 80094a8:	3fe00000 	.word	0x3fe00000
 80094ac:	7fe00000 	.word	0x7fe00000
 80094b0:	7c9fffff 	.word	0x7c9fffff
 80094b4:	9b08      	ldr	r3, [sp, #32]
 80094b6:	b323      	cbz	r3, 8009502 <_strtod_l+0xb5a>
 80094b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80094bc:	d821      	bhi.n	8009502 <_strtod_l+0xb5a>
 80094be:	a328      	add	r3, pc, #160	@ (adr r3, 8009560 <_strtod_l+0xbb8>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	4630      	mov	r0, r6
 80094c6:	4639      	mov	r1, r7
 80094c8:	f7f7 fb32 	bl	8000b30 <__aeabi_dcmple>
 80094cc:	b1a0      	cbz	r0, 80094f8 <_strtod_l+0xb50>
 80094ce:	4639      	mov	r1, r7
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7f7 fb89 	bl	8000be8 <__aeabi_d2uiz>
 80094d6:	2801      	cmp	r0, #1
 80094d8:	bf38      	it	cc
 80094da:	2001      	movcc	r0, #1
 80094dc:	f7f7 f832 	bl	8000544 <__aeabi_ui2d>
 80094e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094e2:	4606      	mov	r6, r0
 80094e4:	460f      	mov	r7, r1
 80094e6:	b9fb      	cbnz	r3, 8009528 <_strtod_l+0xb80>
 80094e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80094ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80094ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80094f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80094f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80094f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80094fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80094fe:	1b5b      	subs	r3, r3, r5
 8009500:	9311      	str	r3, [sp, #68]	@ 0x44
 8009502:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009506:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800950a:	f002 fd31 	bl	800bf70 <__ulp>
 800950e:	4650      	mov	r0, sl
 8009510:	ec53 2b10 	vmov	r2, r3, d0
 8009514:	4659      	mov	r1, fp
 8009516:	f7f7 f88f 	bl	8000638 <__aeabi_dmul>
 800951a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800951e:	f7f6 fed5 	bl	80002cc <__adddf3>
 8009522:	4682      	mov	sl, r0
 8009524:	468b      	mov	fp, r1
 8009526:	e770      	b.n	800940a <_strtod_l+0xa62>
 8009528:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800952c:	e7e0      	b.n	80094f0 <_strtod_l+0xb48>
 800952e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009568 <_strtod_l+0xbc0>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f7f7 faf2 	bl	8000b1c <__aeabi_dcmplt>
 8009538:	e798      	b.n	800946c <_strtod_l+0xac4>
 800953a:	2300      	movs	r3, #0
 800953c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800953e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	f7ff ba6d 	b.w	8008a22 <_strtod_l+0x7a>
 8009548:	2a65      	cmp	r2, #101	@ 0x65
 800954a:	f43f ab66 	beq.w	8008c1a <_strtod_l+0x272>
 800954e:	2a45      	cmp	r2, #69	@ 0x45
 8009550:	f43f ab63 	beq.w	8008c1a <_strtod_l+0x272>
 8009554:	2301      	movs	r3, #1
 8009556:	f7ff bb9e 	b.w	8008c96 <_strtod_l+0x2ee>
 800955a:	bf00      	nop
 800955c:	f3af 8000 	nop.w
 8009560:	ffc00000 	.word	0xffc00000
 8009564:	41dfffff 	.word	0x41dfffff
 8009568:	94a03595 	.word	0x94a03595
 800956c:	3fcfffff 	.word	0x3fcfffff

08009570 <strtod>:
 8009570:	460a      	mov	r2, r1
 8009572:	4601      	mov	r1, r0
 8009574:	4802      	ldr	r0, [pc, #8]	@ (8009580 <strtod+0x10>)
 8009576:	4b03      	ldr	r3, [pc, #12]	@ (8009584 <strtod+0x14>)
 8009578:	6800      	ldr	r0, [r0, #0]
 800957a:	f7ff ba15 	b.w	80089a8 <_strtod_l>
 800957e:	bf00      	nop
 8009580:	20000250 	.word	0x20000250
 8009584:	200000e4 	.word	0x200000e4

08009588 <_strtol_l.constprop.0>:
 8009588:	2b24      	cmp	r3, #36	@ 0x24
 800958a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800958e:	4686      	mov	lr, r0
 8009590:	4690      	mov	r8, r2
 8009592:	d801      	bhi.n	8009598 <_strtol_l.constprop.0+0x10>
 8009594:	2b01      	cmp	r3, #1
 8009596:	d106      	bne.n	80095a6 <_strtol_l.constprop.0+0x1e>
 8009598:	f000 fe92 	bl	800a2c0 <__errno>
 800959c:	2316      	movs	r3, #22
 800959e:	6003      	str	r3, [r0, #0]
 80095a0:	2000      	movs	r0, #0
 80095a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a6:	4834      	ldr	r0, [pc, #208]	@ (8009678 <_strtol_l.constprop.0+0xf0>)
 80095a8:	460d      	mov	r5, r1
 80095aa:	462a      	mov	r2, r5
 80095ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095b0:	5d06      	ldrb	r6, [r0, r4]
 80095b2:	f016 0608 	ands.w	r6, r6, #8
 80095b6:	d1f8      	bne.n	80095aa <_strtol_l.constprop.0+0x22>
 80095b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80095ba:	d12d      	bne.n	8009618 <_strtol_l.constprop.0+0x90>
 80095bc:	782c      	ldrb	r4, [r5, #0]
 80095be:	2601      	movs	r6, #1
 80095c0:	1c95      	adds	r5, r2, #2
 80095c2:	f033 0210 	bics.w	r2, r3, #16
 80095c6:	d109      	bne.n	80095dc <_strtol_l.constprop.0+0x54>
 80095c8:	2c30      	cmp	r4, #48	@ 0x30
 80095ca:	d12a      	bne.n	8009622 <_strtol_l.constprop.0+0x9a>
 80095cc:	782a      	ldrb	r2, [r5, #0]
 80095ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80095d2:	2a58      	cmp	r2, #88	@ 0x58
 80095d4:	d125      	bne.n	8009622 <_strtol_l.constprop.0+0x9a>
 80095d6:	786c      	ldrb	r4, [r5, #1]
 80095d8:	2310      	movs	r3, #16
 80095da:	3502      	adds	r5, #2
 80095dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80095e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095e4:	2200      	movs	r2, #0
 80095e6:	fbbc f9f3 	udiv	r9, ip, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80095f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80095f4:	2f09      	cmp	r7, #9
 80095f6:	d81b      	bhi.n	8009630 <_strtol_l.constprop.0+0xa8>
 80095f8:	463c      	mov	r4, r7
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	dd27      	ble.n	800964e <_strtol_l.constprop.0+0xc6>
 80095fe:	1c57      	adds	r7, r2, #1
 8009600:	d007      	beq.n	8009612 <_strtol_l.constprop.0+0x8a>
 8009602:	4581      	cmp	r9, r0
 8009604:	d320      	bcc.n	8009648 <_strtol_l.constprop.0+0xc0>
 8009606:	d101      	bne.n	800960c <_strtol_l.constprop.0+0x84>
 8009608:	45a2      	cmp	sl, r4
 800960a:	db1d      	blt.n	8009648 <_strtol_l.constprop.0+0xc0>
 800960c:	fb00 4003 	mla	r0, r0, r3, r4
 8009610:	2201      	movs	r2, #1
 8009612:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009616:	e7eb      	b.n	80095f0 <_strtol_l.constprop.0+0x68>
 8009618:	2c2b      	cmp	r4, #43	@ 0x2b
 800961a:	bf04      	itt	eq
 800961c:	782c      	ldrbeq	r4, [r5, #0]
 800961e:	1c95      	addeq	r5, r2, #2
 8009620:	e7cf      	b.n	80095c2 <_strtol_l.constprop.0+0x3a>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1da      	bne.n	80095dc <_strtol_l.constprop.0+0x54>
 8009626:	2c30      	cmp	r4, #48	@ 0x30
 8009628:	bf0c      	ite	eq
 800962a:	2308      	moveq	r3, #8
 800962c:	230a      	movne	r3, #10
 800962e:	e7d5      	b.n	80095dc <_strtol_l.constprop.0+0x54>
 8009630:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009634:	2f19      	cmp	r7, #25
 8009636:	d801      	bhi.n	800963c <_strtol_l.constprop.0+0xb4>
 8009638:	3c37      	subs	r4, #55	@ 0x37
 800963a:	e7de      	b.n	80095fa <_strtol_l.constprop.0+0x72>
 800963c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009640:	2f19      	cmp	r7, #25
 8009642:	d804      	bhi.n	800964e <_strtol_l.constprop.0+0xc6>
 8009644:	3c57      	subs	r4, #87	@ 0x57
 8009646:	e7d8      	b.n	80095fa <_strtol_l.constprop.0+0x72>
 8009648:	f04f 32ff 	mov.w	r2, #4294967295
 800964c:	e7e1      	b.n	8009612 <_strtol_l.constprop.0+0x8a>
 800964e:	1c53      	adds	r3, r2, #1
 8009650:	d108      	bne.n	8009664 <_strtol_l.constprop.0+0xdc>
 8009652:	2322      	movs	r3, #34	@ 0x22
 8009654:	f8ce 3000 	str.w	r3, [lr]
 8009658:	4660      	mov	r0, ip
 800965a:	f1b8 0f00 	cmp.w	r8, #0
 800965e:	d0a0      	beq.n	80095a2 <_strtol_l.constprop.0+0x1a>
 8009660:	1e69      	subs	r1, r5, #1
 8009662:	e006      	b.n	8009672 <_strtol_l.constprop.0+0xea>
 8009664:	b106      	cbz	r6, 8009668 <_strtol_l.constprop.0+0xe0>
 8009666:	4240      	negs	r0, r0
 8009668:	f1b8 0f00 	cmp.w	r8, #0
 800966c:	d099      	beq.n	80095a2 <_strtol_l.constprop.0+0x1a>
 800966e:	2a00      	cmp	r2, #0
 8009670:	d1f6      	bne.n	8009660 <_strtol_l.constprop.0+0xd8>
 8009672:	f8c8 1000 	str.w	r1, [r8]
 8009676:	e794      	b.n	80095a2 <_strtol_l.constprop.0+0x1a>
 8009678:	0800dc69 	.word	0x0800dc69

0800967c <strtol>:
 800967c:	4613      	mov	r3, r2
 800967e:	460a      	mov	r2, r1
 8009680:	4601      	mov	r1, r0
 8009682:	4802      	ldr	r0, [pc, #8]	@ (800968c <strtol+0x10>)
 8009684:	6800      	ldr	r0, [r0, #0]
 8009686:	f7ff bf7f 	b.w	8009588 <_strtol_l.constprop.0>
 800968a:	bf00      	nop
 800968c:	20000250 	.word	0x20000250

08009690 <__cvt>:
 8009690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	ec57 6b10 	vmov	r6, r7, d0
 8009698:	2f00      	cmp	r7, #0
 800969a:	460c      	mov	r4, r1
 800969c:	4619      	mov	r1, r3
 800969e:	463b      	mov	r3, r7
 80096a0:	bfbb      	ittet	lt
 80096a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80096a6:	461f      	movlt	r7, r3
 80096a8:	2300      	movge	r3, #0
 80096aa:	232d      	movlt	r3, #45	@ 0x2d
 80096ac:	700b      	strb	r3, [r1, #0]
 80096ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80096b4:	4691      	mov	r9, r2
 80096b6:	f023 0820 	bic.w	r8, r3, #32
 80096ba:	bfbc      	itt	lt
 80096bc:	4632      	movlt	r2, r6
 80096be:	4616      	movlt	r6, r2
 80096c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096c4:	d005      	beq.n	80096d2 <__cvt+0x42>
 80096c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80096ca:	d100      	bne.n	80096ce <__cvt+0x3e>
 80096cc:	3401      	adds	r4, #1
 80096ce:	2102      	movs	r1, #2
 80096d0:	e000      	b.n	80096d4 <__cvt+0x44>
 80096d2:	2103      	movs	r1, #3
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	ab02      	add	r3, sp, #8
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	ec47 6b10 	vmov	d0, r6, r7
 80096e0:	4653      	mov	r3, sl
 80096e2:	4622      	mov	r2, r4
 80096e4:	f000 fec0 	bl	800a468 <_dtoa_r>
 80096e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80096ec:	4605      	mov	r5, r0
 80096ee:	d119      	bne.n	8009724 <__cvt+0x94>
 80096f0:	f019 0f01 	tst.w	r9, #1
 80096f4:	d00e      	beq.n	8009714 <__cvt+0x84>
 80096f6:	eb00 0904 	add.w	r9, r0, r4
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f7 fa01 	bl	8000b08 <__aeabi_dcmpeq>
 8009706:	b108      	cbz	r0, 800970c <__cvt+0x7c>
 8009708:	f8cd 900c 	str.w	r9, [sp, #12]
 800970c:	2230      	movs	r2, #48	@ 0x30
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	454b      	cmp	r3, r9
 8009712:	d31e      	bcc.n	8009752 <__cvt+0xc2>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009718:	1b5b      	subs	r3, r3, r5
 800971a:	4628      	mov	r0, r5
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	b004      	add	sp, #16
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009728:	eb00 0904 	add.w	r9, r0, r4
 800972c:	d1e5      	bne.n	80096fa <__cvt+0x6a>
 800972e:	7803      	ldrb	r3, [r0, #0]
 8009730:	2b30      	cmp	r3, #48	@ 0x30
 8009732:	d10a      	bne.n	800974a <__cvt+0xba>
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8009740:	b918      	cbnz	r0, 800974a <__cvt+0xba>
 8009742:	f1c4 0401 	rsb	r4, r4, #1
 8009746:	f8ca 4000 	str.w	r4, [sl]
 800974a:	f8da 3000 	ldr.w	r3, [sl]
 800974e:	4499      	add	r9, r3
 8009750:	e7d3      	b.n	80096fa <__cvt+0x6a>
 8009752:	1c59      	adds	r1, r3, #1
 8009754:	9103      	str	r1, [sp, #12]
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	e7d9      	b.n	800970e <__cvt+0x7e>

0800975a <__exponent>:
 800975a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800975c:	2900      	cmp	r1, #0
 800975e:	bfba      	itte	lt
 8009760:	4249      	neglt	r1, r1
 8009762:	232d      	movlt	r3, #45	@ 0x2d
 8009764:	232b      	movge	r3, #43	@ 0x2b
 8009766:	2909      	cmp	r1, #9
 8009768:	7002      	strb	r2, [r0, #0]
 800976a:	7043      	strb	r3, [r0, #1]
 800976c:	dd29      	ble.n	80097c2 <__exponent+0x68>
 800976e:	f10d 0307 	add.w	r3, sp, #7
 8009772:	461d      	mov	r5, r3
 8009774:	270a      	movs	r7, #10
 8009776:	461a      	mov	r2, r3
 8009778:	fbb1 f6f7 	udiv	r6, r1, r7
 800977c:	fb07 1416 	mls	r4, r7, r6, r1
 8009780:	3430      	adds	r4, #48	@ 0x30
 8009782:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009786:	460c      	mov	r4, r1
 8009788:	2c63      	cmp	r4, #99	@ 0x63
 800978a:	f103 33ff 	add.w	r3, r3, #4294967295
 800978e:	4631      	mov	r1, r6
 8009790:	dcf1      	bgt.n	8009776 <__exponent+0x1c>
 8009792:	3130      	adds	r1, #48	@ 0x30
 8009794:	1e94      	subs	r4, r2, #2
 8009796:	f803 1c01 	strb.w	r1, [r3, #-1]
 800979a:	1c41      	adds	r1, r0, #1
 800979c:	4623      	mov	r3, r4
 800979e:	42ab      	cmp	r3, r5
 80097a0:	d30a      	bcc.n	80097b8 <__exponent+0x5e>
 80097a2:	f10d 0309 	add.w	r3, sp, #9
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	42ac      	cmp	r4, r5
 80097aa:	bf88      	it	hi
 80097ac:	2300      	movhi	r3, #0
 80097ae:	3302      	adds	r3, #2
 80097b0:	4403      	add	r3, r0
 80097b2:	1a18      	subs	r0, r3, r0
 80097b4:	b003      	add	sp, #12
 80097b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097c0:	e7ed      	b.n	800979e <__exponent+0x44>
 80097c2:	2330      	movs	r3, #48	@ 0x30
 80097c4:	3130      	adds	r1, #48	@ 0x30
 80097c6:	7083      	strb	r3, [r0, #2]
 80097c8:	70c1      	strb	r1, [r0, #3]
 80097ca:	1d03      	adds	r3, r0, #4
 80097cc:	e7f1      	b.n	80097b2 <__exponent+0x58>
	...

080097d0 <_printf_float>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	b08d      	sub	sp, #52	@ 0x34
 80097d6:	460c      	mov	r4, r1
 80097d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80097dc:	4616      	mov	r6, r2
 80097de:	461f      	mov	r7, r3
 80097e0:	4605      	mov	r5, r0
 80097e2:	f000 fd23 	bl	800a22c <_localeconv_r>
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f6 fd60 	bl	80002b0 <strlen>
 80097f0:	2300      	movs	r3, #0
 80097f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f4:	f8d8 3000 	ldr.w	r3, [r8]
 80097f8:	9005      	str	r0, [sp, #20]
 80097fa:	3307      	adds	r3, #7
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	f103 0208 	add.w	r2, r3, #8
 8009804:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009808:	f8d4 b000 	ldr.w	fp, [r4]
 800980c:	f8c8 2000 	str.w	r2, [r8]
 8009810:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009814:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	f8cd 8018 	str.w	r8, [sp, #24]
 800981e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009826:	4b9c      	ldr	r3, [pc, #624]	@ (8009a98 <_printf_float+0x2c8>)
 8009828:	f04f 32ff 	mov.w	r2, #4294967295
 800982c:	f7f7 f99e 	bl	8000b6c <__aeabi_dcmpun>
 8009830:	bb70      	cbnz	r0, 8009890 <_printf_float+0xc0>
 8009832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009836:	4b98      	ldr	r3, [pc, #608]	@ (8009a98 <_printf_float+0x2c8>)
 8009838:	f04f 32ff 	mov.w	r2, #4294967295
 800983c:	f7f7 f978 	bl	8000b30 <__aeabi_dcmple>
 8009840:	bb30      	cbnz	r0, 8009890 <_printf_float+0xc0>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f7 f967 	bl	8000b1c <__aeabi_dcmplt>
 800984e:	b110      	cbz	r0, 8009856 <_printf_float+0x86>
 8009850:	232d      	movs	r3, #45	@ 0x2d
 8009852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009856:	4a91      	ldr	r2, [pc, #580]	@ (8009a9c <_printf_float+0x2cc>)
 8009858:	4b91      	ldr	r3, [pc, #580]	@ (8009aa0 <_printf_float+0x2d0>)
 800985a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800985e:	bf94      	ite	ls
 8009860:	4690      	movls	r8, r2
 8009862:	4698      	movhi	r8, r3
 8009864:	2303      	movs	r3, #3
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	f02b 0304 	bic.w	r3, fp, #4
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	9700      	str	r7, [sp, #0]
 8009874:	4633      	mov	r3, r6
 8009876:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f9d2 	bl	8009c24 <_printf_common>
 8009880:	3001      	adds	r0, #1
 8009882:	f040 808d 	bne.w	80099a0 <_printf_float+0x1d0>
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	b00d      	add	sp, #52	@ 0x34
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7f7 f968 	bl	8000b6c <__aeabi_dcmpun>
 800989c:	b140      	cbz	r0, 80098b0 <_printf_float+0xe0>
 800989e:	464b      	mov	r3, r9
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfbc      	itt	lt
 80098a4:	232d      	movlt	r3, #45	@ 0x2d
 80098a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098aa:	4a7e      	ldr	r2, [pc, #504]	@ (8009aa4 <_printf_float+0x2d4>)
 80098ac:	4b7e      	ldr	r3, [pc, #504]	@ (8009aa8 <_printf_float+0x2d8>)
 80098ae:	e7d4      	b.n	800985a <_printf_float+0x8a>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80098b6:	9206      	str	r2, [sp, #24]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	d13b      	bne.n	8009934 <_printf_float+0x164>
 80098bc:	2306      	movs	r3, #6
 80098be:	6063      	str	r3, [r4, #4]
 80098c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80098c4:	2300      	movs	r3, #0
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80098cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80098d0:	ab09      	add	r3, sp, #36	@ 0x24
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	6861      	ldr	r1, [r4, #4]
 80098d6:	ec49 8b10 	vmov	d0, r8, r9
 80098da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098de:	4628      	mov	r0, r5
 80098e0:	f7ff fed6 	bl	8009690 <__cvt>
 80098e4:	9b06      	ldr	r3, [sp, #24]
 80098e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098e8:	2b47      	cmp	r3, #71	@ 0x47
 80098ea:	4680      	mov	r8, r0
 80098ec:	d129      	bne.n	8009942 <_printf_float+0x172>
 80098ee:	1cc8      	adds	r0, r1, #3
 80098f0:	db02      	blt.n	80098f8 <_printf_float+0x128>
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	4299      	cmp	r1, r3
 80098f6:	dd41      	ble.n	800997c <_printf_float+0x1ac>
 80098f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80098fc:	fa5f fa8a 	uxtb.w	sl, sl
 8009900:	3901      	subs	r1, #1
 8009902:	4652      	mov	r2, sl
 8009904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009908:	9109      	str	r1, [sp, #36]	@ 0x24
 800990a:	f7ff ff26 	bl	800975a <__exponent>
 800990e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009910:	1813      	adds	r3, r2, r0
 8009912:	2a01      	cmp	r2, #1
 8009914:	4681      	mov	r9, r0
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	dc02      	bgt.n	8009920 <_printf_float+0x150>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	07d2      	lsls	r2, r2, #31
 800991e:	d501      	bpl.n	8009924 <_printf_float+0x154>
 8009920:	3301      	adds	r3, #1
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0a2      	beq.n	8009872 <_printf_float+0xa2>
 800992c:	232d      	movs	r3, #45	@ 0x2d
 800992e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009932:	e79e      	b.n	8009872 <_printf_float+0xa2>
 8009934:	9a06      	ldr	r2, [sp, #24]
 8009936:	2a47      	cmp	r2, #71	@ 0x47
 8009938:	d1c2      	bne.n	80098c0 <_printf_float+0xf0>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1c0      	bne.n	80098c0 <_printf_float+0xf0>
 800993e:	2301      	movs	r3, #1
 8009940:	e7bd      	b.n	80098be <_printf_float+0xee>
 8009942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009946:	d9db      	bls.n	8009900 <_printf_float+0x130>
 8009948:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800994c:	d118      	bne.n	8009980 <_printf_float+0x1b0>
 800994e:	2900      	cmp	r1, #0
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	dd0b      	ble.n	800996c <_printf_float+0x19c>
 8009954:	6121      	str	r1, [r4, #16]
 8009956:	b913      	cbnz	r3, 800995e <_printf_float+0x18e>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	07d0      	lsls	r0, r2, #31
 800995c:	d502      	bpl.n	8009964 <_printf_float+0x194>
 800995e:	3301      	adds	r3, #1
 8009960:	440b      	add	r3, r1
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	e7db      	b.n	8009924 <_printf_float+0x154>
 800996c:	b913      	cbnz	r3, 8009974 <_printf_float+0x1a4>
 800996e:	6822      	ldr	r2, [r4, #0]
 8009970:	07d2      	lsls	r2, r2, #31
 8009972:	d501      	bpl.n	8009978 <_printf_float+0x1a8>
 8009974:	3302      	adds	r3, #2
 8009976:	e7f4      	b.n	8009962 <_printf_float+0x192>
 8009978:	2301      	movs	r3, #1
 800997a:	e7f2      	b.n	8009962 <_printf_float+0x192>
 800997c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009982:	4299      	cmp	r1, r3
 8009984:	db05      	blt.n	8009992 <_printf_float+0x1c2>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	6121      	str	r1, [r4, #16]
 800998a:	07d8      	lsls	r0, r3, #31
 800998c:	d5ea      	bpl.n	8009964 <_printf_float+0x194>
 800998e:	1c4b      	adds	r3, r1, #1
 8009990:	e7e7      	b.n	8009962 <_printf_float+0x192>
 8009992:	2900      	cmp	r1, #0
 8009994:	bfd4      	ite	le
 8009996:	f1c1 0202 	rsble	r2, r1, #2
 800999a:	2201      	movgt	r2, #1
 800999c:	4413      	add	r3, r2
 800999e:	e7e0      	b.n	8009962 <_printf_float+0x192>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	055a      	lsls	r2, r3, #21
 80099a4:	d407      	bmi.n	80099b6 <_printf_float+0x1e6>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	4642      	mov	r2, r8
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	d12b      	bne.n	8009a0c <_printf_float+0x23c>
 80099b4:	e767      	b.n	8009886 <_printf_float+0xb6>
 80099b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099ba:	f240 80dd 	bls.w	8009b78 <_printf_float+0x3a8>
 80099be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f7f7 f89f 	bl	8000b08 <__aeabi_dcmpeq>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d033      	beq.n	8009a36 <_printf_float+0x266>
 80099ce:	4a37      	ldr	r2, [pc, #220]	@ (8009aac <_printf_float+0x2dc>)
 80099d0:	2301      	movs	r3, #1
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f af54 	beq.w	8009886 <_printf_float+0xb6>
 80099de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099e2:	4543      	cmp	r3, r8
 80099e4:	db02      	blt.n	80099ec <_printf_float+0x21c>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	07d8      	lsls	r0, r3, #31
 80099ea:	d50f      	bpl.n	8009a0c <_printf_float+0x23c>
 80099ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af45 	beq.w	8009886 <_printf_float+0xb6>
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a04:	f104 0a1a 	add.w	sl, r4, #26
 8009a08:	45c8      	cmp	r8, r9
 8009a0a:	dc09      	bgt.n	8009a20 <_printf_float+0x250>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	f100 8103 	bmi.w	8009c1a <_printf_float+0x44a>
 8009a14:	68e0      	ldr	r0, [r4, #12]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	bfb8      	it	lt
 8009a1c:	4618      	movlt	r0, r3
 8009a1e:	e734      	b.n	800988a <_printf_float+0xba>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4652      	mov	r2, sl
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f af2b 	beq.w	8009886 <_printf_float+0xb6>
 8009a30:	f109 0901 	add.w	r9, r9, #1
 8009a34:	e7e8      	b.n	8009a08 <_printf_float+0x238>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc39      	bgt.n	8009ab0 <_printf_float+0x2e0>
 8009a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009aac <_printf_float+0x2dc>)
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f af1d 	beq.w	8009886 <_printf_float+0xb6>
 8009a4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a50:	ea59 0303 	orrs.w	r3, r9, r3
 8009a54:	d102      	bne.n	8009a5c <_printf_float+0x28c>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d5d7      	bpl.n	8009a0c <_printf_float+0x23c>
 8009a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af0d 	beq.w	8009886 <_printf_float+0xb6>
 8009a6c:	f04f 0a00 	mov.w	sl, #0
 8009a70:	f104 0b1a 	add.w	fp, r4, #26
 8009a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a76:	425b      	negs	r3, r3
 8009a78:	4553      	cmp	r3, sl
 8009a7a:	dc01      	bgt.n	8009a80 <_printf_float+0x2b0>
 8009a7c:	464b      	mov	r3, r9
 8009a7e:	e793      	b.n	80099a8 <_printf_float+0x1d8>
 8009a80:	2301      	movs	r3, #1
 8009a82:	465a      	mov	r2, fp
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f aefb 	beq.w	8009886 <_printf_float+0xb6>
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	e7ee      	b.n	8009a74 <_printf_float+0x2a4>
 8009a96:	bf00      	nop
 8009a98:	7fefffff 	.word	0x7fefffff
 8009a9c:	0800dd69 	.word	0x0800dd69
 8009aa0:	0800dd6d 	.word	0x0800dd6d
 8009aa4:	0800dd71 	.word	0x0800dd71
 8009aa8:	0800dd75 	.word	0x0800dd75
 8009aac:	0800dd79 	.word	0x0800dd79
 8009ab0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ab2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ab6:	4553      	cmp	r3, sl
 8009ab8:	bfa8      	it	ge
 8009aba:	4653      	movge	r3, sl
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	4699      	mov	r9, r3
 8009ac0:	dc36      	bgt.n	8009b30 <_printf_float+0x360>
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aca:	f104 021a 	add.w	r2, r4, #26
 8009ace:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ad0:	9306      	str	r3, [sp, #24]
 8009ad2:	eba3 0309 	sub.w	r3, r3, r9
 8009ad6:	455b      	cmp	r3, fp
 8009ad8:	dc31      	bgt.n	8009b3e <_printf_float+0x36e>
 8009ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009adc:	459a      	cmp	sl, r3
 8009ade:	dc3a      	bgt.n	8009b56 <_printf_float+0x386>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07da      	lsls	r2, r3, #31
 8009ae4:	d437      	bmi.n	8009b56 <_printf_float+0x386>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae8:	ebaa 0903 	sub.w	r9, sl, r3
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	ebaa 0303 	sub.w	r3, sl, r3
 8009af2:	4599      	cmp	r9, r3
 8009af4:	bfa8      	it	ge
 8009af6:	4699      	movge	r9, r3
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	dc33      	bgt.n	8009b66 <_printf_float+0x396>
 8009afe:	f04f 0800 	mov.w	r8, #0
 8009b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b06:	f104 0b1a 	add.w	fp, r4, #26
 8009b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b10:	eba3 0309 	sub.w	r3, r3, r9
 8009b14:	4543      	cmp	r3, r8
 8009b16:	f77f af79 	ble.w	8009a0c <_printf_float+0x23c>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	465a      	mov	r2, fp
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f aeae 	beq.w	8009886 <_printf_float+0xb6>
 8009b2a:	f108 0801 	add.w	r8, r8, #1
 8009b2e:	e7ec      	b.n	8009b0a <_printf_float+0x33a>
 8009b30:	4642      	mov	r2, r8
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1c2      	bne.n	8009ac2 <_printf_float+0x2f2>
 8009b3c:	e6a3      	b.n	8009886 <_printf_float+0xb6>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	9206      	str	r2, [sp, #24]
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f ae9c 	beq.w	8009886 <_printf_float+0xb6>
 8009b4e:	9a06      	ldr	r2, [sp, #24]
 8009b50:	f10b 0b01 	add.w	fp, fp, #1
 8009b54:	e7bb      	b.n	8009ace <_printf_float+0x2fe>
 8009b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1c0      	bne.n	8009ae6 <_printf_float+0x316>
 8009b64:	e68f      	b.n	8009886 <_printf_float+0xb6>
 8009b66:	9a06      	ldr	r2, [sp, #24]
 8009b68:	464b      	mov	r3, r9
 8009b6a:	4442      	add	r2, r8
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	d1c3      	bne.n	8009afe <_printf_float+0x32e>
 8009b76:	e686      	b.n	8009886 <_printf_float+0xb6>
 8009b78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b7c:	f1ba 0f01 	cmp.w	sl, #1
 8009b80:	dc01      	bgt.n	8009b86 <_printf_float+0x3b6>
 8009b82:	07db      	lsls	r3, r3, #31
 8009b84:	d536      	bpl.n	8009bf4 <_printf_float+0x424>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4642      	mov	r2, r8
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f ae78 	beq.w	8009886 <_printf_float+0xb6>
 8009b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f ae70 	beq.w	8009886 <_printf_float+0xb6>
 8009ba6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009baa:	2200      	movs	r2, #0
 8009bac:	2300      	movs	r3, #0
 8009bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb2:	f7f6 ffa9 	bl	8000b08 <__aeabi_dcmpeq>
 8009bb6:	b9c0      	cbnz	r0, 8009bea <_printf_float+0x41a>
 8009bb8:	4653      	mov	r3, sl
 8009bba:	f108 0201 	add.w	r2, r8, #1
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d10c      	bne.n	8009be2 <_printf_float+0x412>
 8009bc8:	e65d      	b.n	8009886 <_printf_float+0xb6>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	465a      	mov	r2, fp
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	47b8      	blx	r7
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f43f ae56 	beq.w	8009886 <_printf_float+0xb6>
 8009bda:	f108 0801 	add.w	r8, r8, #1
 8009bde:	45d0      	cmp	r8, sl
 8009be0:	dbf3      	blt.n	8009bca <_printf_float+0x3fa>
 8009be2:	464b      	mov	r3, r9
 8009be4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009be8:	e6df      	b.n	80099aa <_printf_float+0x1da>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	f104 0b1a 	add.w	fp, r4, #26
 8009bf2:	e7f4      	b.n	8009bde <_printf_float+0x40e>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	e7e1      	b.n	8009bbe <_printf_float+0x3ee>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	464a      	mov	r2, r9
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	f43f ae3e 	beq.w	8009886 <_printf_float+0xb6>
 8009c0a:	f108 0801 	add.w	r8, r8, #1
 8009c0e:	68e3      	ldr	r3, [r4, #12]
 8009c10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c12:	1a5b      	subs	r3, r3, r1
 8009c14:	4543      	cmp	r3, r8
 8009c16:	dcf0      	bgt.n	8009bfa <_printf_float+0x42a>
 8009c18:	e6fc      	b.n	8009a14 <_printf_float+0x244>
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	f104 0919 	add.w	r9, r4, #25
 8009c22:	e7f4      	b.n	8009c0e <_printf_float+0x43e>

08009c24 <_printf_common>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	4616      	mov	r6, r2
 8009c2a:	4698      	mov	r8, r3
 8009c2c:	688a      	ldr	r2, [r1, #8]
 8009c2e:	690b      	ldr	r3, [r1, #16]
 8009c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	bfb8      	it	lt
 8009c38:	4613      	movlt	r3, r2
 8009c3a:	6033      	str	r3, [r6, #0]
 8009c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c40:	4607      	mov	r7, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b10a      	cbz	r2, 8009c4a <_printf_common+0x26>
 8009c46:	3301      	adds	r3, #1
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	0699      	lsls	r1, r3, #26
 8009c4e:	bf42      	ittt	mi
 8009c50:	6833      	ldrmi	r3, [r6, #0]
 8009c52:	3302      	addmi	r3, #2
 8009c54:	6033      	strmi	r3, [r6, #0]
 8009c56:	6825      	ldr	r5, [r4, #0]
 8009c58:	f015 0506 	ands.w	r5, r5, #6
 8009c5c:	d106      	bne.n	8009c6c <_printf_common+0x48>
 8009c5e:	f104 0a19 	add.w	sl, r4, #25
 8009c62:	68e3      	ldr	r3, [r4, #12]
 8009c64:	6832      	ldr	r2, [r6, #0]
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dc26      	bgt.n	8009cba <_printf_common+0x96>
 8009c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	3b00      	subs	r3, #0
 8009c74:	bf18      	it	ne
 8009c76:	2301      	movne	r3, #1
 8009c78:	0692      	lsls	r2, r2, #26
 8009c7a:	d42b      	bmi.n	8009cd4 <_printf_common+0xb0>
 8009c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c80:	4641      	mov	r1, r8
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c8      	blx	r9
 8009c86:	3001      	adds	r0, #1
 8009c88:	d01e      	beq.n	8009cc8 <_printf_common+0xa4>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	6922      	ldr	r2, [r4, #16]
 8009c8e:	f003 0306 	and.w	r3, r3, #6
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	bf02      	ittt	eq
 8009c96:	68e5      	ldreq	r5, [r4, #12]
 8009c98:	6833      	ldreq	r3, [r6, #0]
 8009c9a:	1aed      	subeq	r5, r5, r3
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	bf0c      	ite	eq
 8009ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca4:	2500      	movne	r5, #0
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	bfc4      	itt	gt
 8009caa:	1a9b      	subgt	r3, r3, r2
 8009cac:	18ed      	addgt	r5, r5, r3
 8009cae:	2600      	movs	r6, #0
 8009cb0:	341a      	adds	r4, #26
 8009cb2:	42b5      	cmp	r5, r6
 8009cb4:	d11a      	bne.n	8009cec <_printf_common+0xc8>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e008      	b.n	8009ccc <_printf_common+0xa8>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	47c8      	blx	r9
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d103      	bne.n	8009cd0 <_printf_common+0xac>
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	e7c6      	b.n	8009c62 <_printf_common+0x3e>
 8009cd4:	18e1      	adds	r1, r4, r3
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	2030      	movs	r0, #48	@ 0x30
 8009cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cde:	4422      	add	r2, r4
 8009ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ce8:	3302      	adds	r3, #2
 8009cea:	e7c7      	b.n	8009c7c <_printf_common+0x58>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4641      	mov	r1, r8
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c8      	blx	r9
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d0e6      	beq.n	8009cc8 <_printf_common+0xa4>
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	e7d9      	b.n	8009cb2 <_printf_common+0x8e>
	...

08009d00 <_printf_i>:
 8009d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	7e0f      	ldrb	r7, [r1, #24]
 8009d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d08:	2f78      	cmp	r7, #120	@ 0x78
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	469a      	mov	sl, r3
 8009d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d16:	d807      	bhi.n	8009d28 <_printf_i+0x28>
 8009d18:	2f62      	cmp	r7, #98	@ 0x62
 8009d1a:	d80a      	bhi.n	8009d32 <_printf_i+0x32>
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	f000 80d2 	beq.w	8009ec6 <_printf_i+0x1c6>
 8009d22:	2f58      	cmp	r7, #88	@ 0x58
 8009d24:	f000 80b9 	beq.w	8009e9a <_printf_i+0x19a>
 8009d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d30:	e03a      	b.n	8009da8 <_printf_i+0xa8>
 8009d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d36:	2b15      	cmp	r3, #21
 8009d38:	d8f6      	bhi.n	8009d28 <_printf_i+0x28>
 8009d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d40 <_printf_i+0x40>)
 8009d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009dad 	.word	0x08009dad
 8009d48:	08009d29 	.word	0x08009d29
 8009d4c:	08009d29 	.word	0x08009d29
 8009d50:	08009d29 	.word	0x08009d29
 8009d54:	08009d29 	.word	0x08009d29
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009d29 	.word	0x08009d29
 8009d60:	08009d29 	.word	0x08009d29
 8009d64:	08009d29 	.word	0x08009d29
 8009d68:	08009d29 	.word	0x08009d29
 8009d6c:	08009ead 	.word	0x08009ead
 8009d70:	08009dd7 	.word	0x08009dd7
 8009d74:	08009e67 	.word	0x08009e67
 8009d78:	08009d29 	.word	0x08009d29
 8009d7c:	08009d29 	.word	0x08009d29
 8009d80:	08009ecf 	.word	0x08009ecf
 8009d84:	08009d29 	.word	0x08009d29
 8009d88:	08009dd7 	.word	0x08009dd7
 8009d8c:	08009d29 	.word	0x08009d29
 8009d90:	08009d29 	.word	0x08009d29
 8009d94:	08009e6f 	.word	0x08009e6f
 8009d98:	6833      	ldr	r3, [r6, #0]
 8009d9a:	1d1a      	adds	r2, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6032      	str	r2, [r6, #0]
 8009da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009da8:	2301      	movs	r3, #1
 8009daa:	e09d      	b.n	8009ee8 <_printf_i+0x1e8>
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	1d19      	adds	r1, r3, #4
 8009db2:	6031      	str	r1, [r6, #0]
 8009db4:	0606      	lsls	r6, r0, #24
 8009db6:	d501      	bpl.n	8009dbc <_printf_i+0xbc>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	e003      	b.n	8009dc4 <_printf_i+0xc4>
 8009dbc:	0645      	lsls	r5, r0, #25
 8009dbe:	d5fb      	bpl.n	8009db8 <_printf_i+0xb8>
 8009dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	da03      	bge.n	8009dd0 <_printf_i+0xd0>
 8009dc8:	232d      	movs	r3, #45	@ 0x2d
 8009dca:	426d      	negs	r5, r5
 8009dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd0:	4859      	ldr	r0, [pc, #356]	@ (8009f38 <_printf_i+0x238>)
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	e011      	b.n	8009dfa <_printf_i+0xfa>
 8009dd6:	6821      	ldr	r1, [r4, #0]
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	0608      	lsls	r0, r1, #24
 8009ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009de0:	d402      	bmi.n	8009de8 <_printf_i+0xe8>
 8009de2:	0649      	lsls	r1, r1, #25
 8009de4:	bf48      	it	mi
 8009de6:	b2ad      	uxthmi	r5, r5
 8009de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dea:	4853      	ldr	r0, [pc, #332]	@ (8009f38 <_printf_i+0x238>)
 8009dec:	6033      	str	r3, [r6, #0]
 8009dee:	bf14      	ite	ne
 8009df0:	230a      	movne	r3, #10
 8009df2:	2308      	moveq	r3, #8
 8009df4:	2100      	movs	r1, #0
 8009df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dfa:	6866      	ldr	r6, [r4, #4]
 8009dfc:	60a6      	str	r6, [r4, #8]
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	bfa2      	ittt	ge
 8009e02:	6821      	ldrge	r1, [r4, #0]
 8009e04:	f021 0104 	bicge.w	r1, r1, #4
 8009e08:	6021      	strge	r1, [r4, #0]
 8009e0a:	b90d      	cbnz	r5, 8009e10 <_printf_i+0x110>
 8009e0c:	2e00      	cmp	r6, #0
 8009e0e:	d04b      	beq.n	8009ea8 <_printf_i+0x1a8>
 8009e10:	4616      	mov	r6, r2
 8009e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e16:	fb03 5711 	mls	r7, r3, r1, r5
 8009e1a:	5dc7      	ldrb	r7, [r0, r7]
 8009e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e20:	462f      	mov	r7, r5
 8009e22:	42bb      	cmp	r3, r7
 8009e24:	460d      	mov	r5, r1
 8009e26:	d9f4      	bls.n	8009e12 <_printf_i+0x112>
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d10b      	bne.n	8009e44 <_printf_i+0x144>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	07df      	lsls	r7, r3, #31
 8009e30:	d508      	bpl.n	8009e44 <_printf_i+0x144>
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	6861      	ldr	r1, [r4, #4]
 8009e36:	4299      	cmp	r1, r3
 8009e38:	bfde      	ittt	le
 8009e3a:	2330      	movle	r3, #48	@ 0x30
 8009e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e44:	1b92      	subs	r2, r2, r6
 8009e46:	6122      	str	r2, [r4, #16]
 8009e48:	f8cd a000 	str.w	sl, [sp]
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	aa03      	add	r2, sp, #12
 8009e50:	4621      	mov	r1, r4
 8009e52:	4640      	mov	r0, r8
 8009e54:	f7ff fee6 	bl	8009c24 <_printf_common>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d14a      	bne.n	8009ef2 <_printf_i+0x1f2>
 8009e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e60:	b004      	add	sp, #16
 8009e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	f043 0320 	orr.w	r3, r3, #32
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	4833      	ldr	r0, [pc, #204]	@ (8009f3c <_printf_i+0x23c>)
 8009e70:	2778      	movs	r7, #120	@ 0x78
 8009e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	6831      	ldr	r1, [r6, #0]
 8009e7a:	061f      	lsls	r7, r3, #24
 8009e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e80:	d402      	bmi.n	8009e88 <_printf_i+0x188>
 8009e82:	065f      	lsls	r7, r3, #25
 8009e84:	bf48      	it	mi
 8009e86:	b2ad      	uxthmi	r5, r5
 8009e88:	6031      	str	r1, [r6, #0]
 8009e8a:	07d9      	lsls	r1, r3, #31
 8009e8c:	bf44      	itt	mi
 8009e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8009e92:	6023      	strmi	r3, [r4, #0]
 8009e94:	b11d      	cbz	r5, 8009e9e <_printf_i+0x19e>
 8009e96:	2310      	movs	r3, #16
 8009e98:	e7ac      	b.n	8009df4 <_printf_i+0xf4>
 8009e9a:	4827      	ldr	r0, [pc, #156]	@ (8009f38 <_printf_i+0x238>)
 8009e9c:	e7e9      	b.n	8009e72 <_printf_i+0x172>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	f023 0320 	bic.w	r3, r3, #32
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	e7f6      	b.n	8009e96 <_printf_i+0x196>
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	e7bd      	b.n	8009e28 <_printf_i+0x128>
 8009eac:	6833      	ldr	r3, [r6, #0]
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	6961      	ldr	r1, [r4, #20]
 8009eb2:	1d18      	adds	r0, r3, #4
 8009eb4:	6030      	str	r0, [r6, #0]
 8009eb6:	062e      	lsls	r6, r5, #24
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	d501      	bpl.n	8009ec0 <_printf_i+0x1c0>
 8009ebc:	6019      	str	r1, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <_printf_i+0x1c6>
 8009ec0:	0668      	lsls	r0, r5, #25
 8009ec2:	d5fb      	bpl.n	8009ebc <_printf_i+0x1bc>
 8009ec4:	8019      	strh	r1, [r3, #0]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	4616      	mov	r6, r2
 8009ecc:	e7bc      	b.n	8009e48 <_printf_i+0x148>
 8009ece:	6833      	ldr	r3, [r6, #0]
 8009ed0:	1d1a      	adds	r2, r3, #4
 8009ed2:	6032      	str	r2, [r6, #0]
 8009ed4:	681e      	ldr	r6, [r3, #0]
 8009ed6:	6862      	ldr	r2, [r4, #4]
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7f6 f998 	bl	8000210 <memchr>
 8009ee0:	b108      	cbz	r0, 8009ee6 <_printf_i+0x1e6>
 8009ee2:	1b80      	subs	r0, r0, r6
 8009ee4:	6060      	str	r0, [r4, #4]
 8009ee6:	6863      	ldr	r3, [r4, #4]
 8009ee8:	6123      	str	r3, [r4, #16]
 8009eea:	2300      	movs	r3, #0
 8009eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ef0:	e7aa      	b.n	8009e48 <_printf_i+0x148>
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	4640      	mov	r0, r8
 8009efa:	47d0      	blx	sl
 8009efc:	3001      	adds	r0, #1
 8009efe:	d0ad      	beq.n	8009e5c <_printf_i+0x15c>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	079b      	lsls	r3, r3, #30
 8009f04:	d413      	bmi.n	8009f2e <_printf_i+0x22e>
 8009f06:	68e0      	ldr	r0, [r4, #12]
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	4298      	cmp	r0, r3
 8009f0c:	bfb8      	it	lt
 8009f0e:	4618      	movlt	r0, r3
 8009f10:	e7a6      	b.n	8009e60 <_printf_i+0x160>
 8009f12:	2301      	movs	r3, #1
 8009f14:	4632      	mov	r2, r6
 8009f16:	4649      	mov	r1, r9
 8009f18:	4640      	mov	r0, r8
 8009f1a:	47d0      	blx	sl
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d09d      	beq.n	8009e5c <_printf_i+0x15c>
 8009f20:	3501      	adds	r5, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	9903      	ldr	r1, [sp, #12]
 8009f26:	1a5b      	subs	r3, r3, r1
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	dcf2      	bgt.n	8009f12 <_printf_i+0x212>
 8009f2c:	e7eb      	b.n	8009f06 <_printf_i+0x206>
 8009f2e:	2500      	movs	r5, #0
 8009f30:	f104 0619 	add.w	r6, r4, #25
 8009f34:	e7f5      	b.n	8009f22 <_printf_i+0x222>
 8009f36:	bf00      	nop
 8009f38:	0800dd7b 	.word	0x0800dd7b
 8009f3c:	0800dd8c 	.word	0x0800dd8c

08009f40 <std>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	b510      	push	{r4, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	e9c0 3300 	strd	r3, r3, [r0]
 8009f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4e:	6083      	str	r3, [r0, #8]
 8009f50:	8181      	strh	r1, [r0, #12]
 8009f52:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f54:	81c2      	strh	r2, [r0, #14]
 8009f56:	6183      	str	r3, [r0, #24]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	305c      	adds	r0, #92	@ 0x5c
 8009f5e:	f000 f928 	bl	800a1b2 <memset>
 8009f62:	4b0d      	ldr	r3, [pc, #52]	@ (8009f98 <std+0x58>)
 8009f64:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <std+0x5c>)
 8009f68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa0 <std+0x60>)
 8009f6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <std+0x64>)
 8009f70:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f72:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa8 <std+0x68>)
 8009f74:	6224      	str	r4, [r4, #32]
 8009f76:	429c      	cmp	r4, r3
 8009f78:	d006      	beq.n	8009f88 <std+0x48>
 8009f7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f7e:	4294      	cmp	r4, r2
 8009f80:	d002      	beq.n	8009f88 <std+0x48>
 8009f82:	33d0      	adds	r3, #208	@ 0xd0
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d105      	bne.n	8009f94 <std+0x54>
 8009f88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f90:	f000 b9c0 	b.w	800a314 <__retarget_lock_init_recursive>
 8009f94:	bd10      	pop	{r4, pc}
 8009f96:	bf00      	nop
 8009f98:	0800a12d 	.word	0x0800a12d
 8009f9c:	0800a14f 	.word	0x0800a14f
 8009fa0:	0800a187 	.word	0x0800a187
 8009fa4:	0800a1ab 	.word	0x0800a1ab
 8009fa8:	20000ab4 	.word	0x20000ab4

08009fac <stdio_exit_handler>:
 8009fac:	4a02      	ldr	r2, [pc, #8]	@ (8009fb8 <stdio_exit_handler+0xc>)
 8009fae:	4903      	ldr	r1, [pc, #12]	@ (8009fbc <stdio_exit_handler+0x10>)
 8009fb0:	4803      	ldr	r0, [pc, #12]	@ (8009fc0 <stdio_exit_handler+0x14>)
 8009fb2:	f000 b869 	b.w	800a088 <_fwalk_sglue>
 8009fb6:	bf00      	nop
 8009fb8:	200000d8 	.word	0x200000d8
 8009fbc:	0800c5bd 	.word	0x0800c5bd
 8009fc0:	20000254 	.word	0x20000254

08009fc4 <cleanup_stdio>:
 8009fc4:	6841      	ldr	r1, [r0, #4]
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <cleanup_stdio+0x34>)
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	d001      	beq.n	8009fd4 <cleanup_stdio+0x10>
 8009fd0:	f002 faf4 	bl	800c5bc <_fflush_r>
 8009fd4:	68a1      	ldr	r1, [r4, #8]
 8009fd6:	4b09      	ldr	r3, [pc, #36]	@ (8009ffc <cleanup_stdio+0x38>)
 8009fd8:	4299      	cmp	r1, r3
 8009fda:	d002      	beq.n	8009fe2 <cleanup_stdio+0x1e>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f002 faed 	bl	800c5bc <_fflush_r>
 8009fe2:	68e1      	ldr	r1, [r4, #12]
 8009fe4:	4b06      	ldr	r3, [pc, #24]	@ (800a000 <cleanup_stdio+0x3c>)
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	d004      	beq.n	8009ff4 <cleanup_stdio+0x30>
 8009fea:	4620      	mov	r0, r4
 8009fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff0:	f002 bae4 	b.w	800c5bc <_fflush_r>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20000ab4 	.word	0x20000ab4
 8009ffc:	20000b1c 	.word	0x20000b1c
 800a000:	20000b84 	.word	0x20000b84

0800a004 <global_stdio_init.part.0>:
 800a004:	b510      	push	{r4, lr}
 800a006:	4b0b      	ldr	r3, [pc, #44]	@ (800a034 <global_stdio_init.part.0+0x30>)
 800a008:	4c0b      	ldr	r4, [pc, #44]	@ (800a038 <global_stdio_init.part.0+0x34>)
 800a00a:	4a0c      	ldr	r2, [pc, #48]	@ (800a03c <global_stdio_init.part.0+0x38>)
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	4620      	mov	r0, r4
 800a010:	2200      	movs	r2, #0
 800a012:	2104      	movs	r1, #4
 800a014:	f7ff ff94 	bl	8009f40 <std>
 800a018:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a01c:	2201      	movs	r2, #1
 800a01e:	2109      	movs	r1, #9
 800a020:	f7ff ff8e 	bl	8009f40 <std>
 800a024:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a028:	2202      	movs	r2, #2
 800a02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02e:	2112      	movs	r1, #18
 800a030:	f7ff bf86 	b.w	8009f40 <std>
 800a034:	20000bec 	.word	0x20000bec
 800a038:	20000ab4 	.word	0x20000ab4
 800a03c:	08009fad 	.word	0x08009fad

0800a040 <__sfp_lock_acquire>:
 800a040:	4801      	ldr	r0, [pc, #4]	@ (800a048 <__sfp_lock_acquire+0x8>)
 800a042:	f000 b968 	b.w	800a316 <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	20000bf5 	.word	0x20000bf5

0800a04c <__sfp_lock_release>:
 800a04c:	4801      	ldr	r0, [pc, #4]	@ (800a054 <__sfp_lock_release+0x8>)
 800a04e:	f000 b963 	b.w	800a318 <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	20000bf5 	.word	0x20000bf5

0800a058 <__sinit>:
 800a058:	b510      	push	{r4, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	f7ff fff0 	bl	800a040 <__sfp_lock_acquire>
 800a060:	6a23      	ldr	r3, [r4, #32]
 800a062:	b11b      	cbz	r3, 800a06c <__sinit+0x14>
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	f7ff bff0 	b.w	800a04c <__sfp_lock_release>
 800a06c:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <__sinit+0x28>)
 800a06e:	6223      	str	r3, [r4, #32]
 800a070:	4b04      	ldr	r3, [pc, #16]	@ (800a084 <__sinit+0x2c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1f5      	bne.n	800a064 <__sinit+0xc>
 800a078:	f7ff ffc4 	bl	800a004 <global_stdio_init.part.0>
 800a07c:	e7f2      	b.n	800a064 <__sinit+0xc>
 800a07e:	bf00      	nop
 800a080:	08009fc5 	.word	0x08009fc5
 800a084:	20000bec 	.word	0x20000bec

0800a088 <_fwalk_sglue>:
 800a088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a08c:	4607      	mov	r7, r0
 800a08e:	4688      	mov	r8, r1
 800a090:	4614      	mov	r4, r2
 800a092:	2600      	movs	r6, #0
 800a094:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a098:	f1b9 0901 	subs.w	r9, r9, #1
 800a09c:	d505      	bpl.n	800a0aa <_fwalk_sglue+0x22>
 800a09e:	6824      	ldr	r4, [r4, #0]
 800a0a0:	2c00      	cmp	r4, #0
 800a0a2:	d1f7      	bne.n	800a094 <_fwalk_sglue+0xc>
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0aa:	89ab      	ldrh	r3, [r5, #12]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d907      	bls.n	800a0c0 <_fwalk_sglue+0x38>
 800a0b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	d003      	beq.n	800a0c0 <_fwalk_sglue+0x38>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	47c0      	blx	r8
 800a0be:	4306      	orrs	r6, r0
 800a0c0:	3568      	adds	r5, #104	@ 0x68
 800a0c2:	e7e9      	b.n	800a098 <_fwalk_sglue+0x10>

0800a0c4 <sniprintf>:
 800a0c4:	b40c      	push	{r2, r3}
 800a0c6:	b530      	push	{r4, r5, lr}
 800a0c8:	4b17      	ldr	r3, [pc, #92]	@ (800a128 <sniprintf+0x64>)
 800a0ca:	1e0c      	subs	r4, r1, #0
 800a0cc:	681d      	ldr	r5, [r3, #0]
 800a0ce:	b09d      	sub	sp, #116	@ 0x74
 800a0d0:	da08      	bge.n	800a0e4 <sniprintf+0x20>
 800a0d2:	238b      	movs	r3, #139	@ 0x8b
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0da:	b01d      	add	sp, #116	@ 0x74
 800a0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0e0:	b002      	add	sp, #8
 800a0e2:	4770      	bx	lr
 800a0e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a0e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a0ec:	bf14      	ite	ne
 800a0ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a0f2:	4623      	moveq	r3, r4
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	9307      	str	r3, [sp, #28]
 800a0f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0fc:	9002      	str	r0, [sp, #8]
 800a0fe:	9006      	str	r0, [sp, #24]
 800a100:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a104:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a106:	ab21      	add	r3, sp, #132	@ 0x84
 800a108:	a902      	add	r1, sp, #8
 800a10a:	4628      	mov	r0, r5
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	f002 f8d5 	bl	800c2bc <_svfiprintf_r>
 800a112:	1c43      	adds	r3, r0, #1
 800a114:	bfbc      	itt	lt
 800a116:	238b      	movlt	r3, #139	@ 0x8b
 800a118:	602b      	strlt	r3, [r5, #0]
 800a11a:	2c00      	cmp	r4, #0
 800a11c:	d0dd      	beq.n	800a0da <sniprintf+0x16>
 800a11e:	9b02      	ldr	r3, [sp, #8]
 800a120:	2200      	movs	r2, #0
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	e7d9      	b.n	800a0da <sniprintf+0x16>
 800a126:	bf00      	nop
 800a128:	20000250 	.word	0x20000250

0800a12c <__sread>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	460c      	mov	r4, r1
 800a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a134:	f000 f8a0 	bl	800a278 <_read_r>
 800a138:	2800      	cmp	r0, #0
 800a13a:	bfab      	itete	ge
 800a13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a13e:	89a3      	ldrhlt	r3, [r4, #12]
 800a140:	181b      	addge	r3, r3, r0
 800a142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a146:	bfac      	ite	ge
 800a148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a14a:	81a3      	strhlt	r3, [r4, #12]
 800a14c:	bd10      	pop	{r4, pc}

0800a14e <__swrite>:
 800a14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	461f      	mov	r7, r3
 800a154:	898b      	ldrh	r3, [r1, #12]
 800a156:	05db      	lsls	r3, r3, #23
 800a158:	4605      	mov	r5, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	4616      	mov	r6, r2
 800a15e:	d505      	bpl.n	800a16c <__swrite+0x1e>
 800a160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a164:	2302      	movs	r3, #2
 800a166:	2200      	movs	r2, #0
 800a168:	f000 f874 	bl	800a254 <_lseek_r>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	4632      	mov	r2, r6
 800a17a:	463b      	mov	r3, r7
 800a17c:	4628      	mov	r0, r5
 800a17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	f000 b88b 	b.w	800a29c <_write_r>

0800a186 <__sseek>:
 800a186:	b510      	push	{r4, lr}
 800a188:	460c      	mov	r4, r1
 800a18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18e:	f000 f861 	bl	800a254 <_lseek_r>
 800a192:	1c43      	adds	r3, r0, #1
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	bf15      	itete	ne
 800a198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1a2:	81a3      	strheq	r3, [r4, #12]
 800a1a4:	bf18      	it	ne
 800a1a6:	81a3      	strhne	r3, [r4, #12]
 800a1a8:	bd10      	pop	{r4, pc}

0800a1aa <__sclose>:
 800a1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ae:	f000 b841 	b.w	800a234 <_close_r>

0800a1b2 <memset>:
 800a1b2:	4402      	add	r2, r0
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d100      	bne.n	800a1bc <memset+0xa>
 800a1ba:	4770      	bx	lr
 800a1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c0:	e7f9      	b.n	800a1b6 <memset+0x4>

0800a1c2 <strcat>:
 800a1c2:	b510      	push	{r4, lr}
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	7814      	ldrb	r4, [r2, #0]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	3201      	adds	r2, #1
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d1fa      	bne.n	800a1c6 <strcat+0x4>
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	d1f9      	bne.n	800a1d2 <strcat+0x10>
 800a1de:	bd10      	pop	{r4, pc}

0800a1e0 <strncmp>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	b16a      	cbz	r2, 800a200 <strncmp+0x20>
 800a1e4:	3901      	subs	r1, #1
 800a1e6:	1884      	adds	r4, r0, r2
 800a1e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d103      	bne.n	800a1fc <strncmp+0x1c>
 800a1f4:	42a0      	cmp	r0, r4
 800a1f6:	d001      	beq.n	800a1fc <strncmp+0x1c>
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	d1f5      	bne.n	800a1e8 <strncmp+0x8>
 800a1fc:	1ad0      	subs	r0, r2, r3
 800a1fe:	bd10      	pop	{r4, pc}
 800a200:	4610      	mov	r0, r2
 800a202:	e7fc      	b.n	800a1fe <strncmp+0x1e>

0800a204 <strncpy>:
 800a204:	b510      	push	{r4, lr}
 800a206:	3901      	subs	r1, #1
 800a208:	4603      	mov	r3, r0
 800a20a:	b132      	cbz	r2, 800a21a <strncpy+0x16>
 800a20c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a210:	f803 4b01 	strb.w	r4, [r3], #1
 800a214:	3a01      	subs	r2, #1
 800a216:	2c00      	cmp	r4, #0
 800a218:	d1f7      	bne.n	800a20a <strncpy+0x6>
 800a21a:	441a      	add	r2, r3
 800a21c:	2100      	movs	r1, #0
 800a21e:	4293      	cmp	r3, r2
 800a220:	d100      	bne.n	800a224 <strncpy+0x20>
 800a222:	bd10      	pop	{r4, pc}
 800a224:	f803 1b01 	strb.w	r1, [r3], #1
 800a228:	e7f9      	b.n	800a21e <strncpy+0x1a>
	...

0800a22c <_localeconv_r>:
 800a22c:	4800      	ldr	r0, [pc, #0]	@ (800a230 <_localeconv_r+0x4>)
 800a22e:	4770      	bx	lr
 800a230:	200001d4 	.word	0x200001d4

0800a234 <_close_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d06      	ldr	r5, [pc, #24]	@ (800a250 <_close_r+0x1c>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	602b      	str	r3, [r5, #0]
 800a240:	f7f9 fb80 	bl	8003944 <_close>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_close_r+0x1a>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_close_r+0x1a>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000bf0 	.word	0x20000bf0

0800a254 <_lseek_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d07      	ldr	r5, [pc, #28]	@ (800a274 <_lseek_r+0x20>)
 800a258:	4604      	mov	r4, r0
 800a25a:	4608      	mov	r0, r1
 800a25c:	4611      	mov	r1, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	602a      	str	r2, [r5, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	f7f9 fb95 	bl	8003992 <_lseek>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_lseek_r+0x1e>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_lseek_r+0x1e>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000bf0 	.word	0x20000bf0

0800a278 <_read_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4d07      	ldr	r5, [pc, #28]	@ (800a298 <_read_r+0x20>)
 800a27c:	4604      	mov	r4, r0
 800a27e:	4608      	mov	r0, r1
 800a280:	4611      	mov	r1, r2
 800a282:	2200      	movs	r2, #0
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	f7f9 fb23 	bl	80038d2 <_read>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_read_r+0x1e>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	b103      	cbz	r3, 800a296 <_read_r+0x1e>
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000bf0 	.word	0x20000bf0

0800a29c <_write_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d07      	ldr	r5, [pc, #28]	@ (800a2bc <_write_r+0x20>)
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4608      	mov	r0, r1
 800a2a4:	4611      	mov	r1, r2
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	602a      	str	r2, [r5, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f7f9 fb2e 	bl	800390c <_write>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_write_r+0x1e>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_write_r+0x1e>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000bf0 	.word	0x20000bf0

0800a2c0 <__errno>:
 800a2c0:	4b01      	ldr	r3, [pc, #4]	@ (800a2c8 <__errno+0x8>)
 800a2c2:	6818      	ldr	r0, [r3, #0]
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	20000250 	.word	0x20000250

0800a2cc <__libc_init_array>:
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	4d0d      	ldr	r5, [pc, #52]	@ (800a304 <__libc_init_array+0x38>)
 800a2d0:	4c0d      	ldr	r4, [pc, #52]	@ (800a308 <__libc_init_array+0x3c>)
 800a2d2:	1b64      	subs	r4, r4, r5
 800a2d4:	10a4      	asrs	r4, r4, #2
 800a2d6:	2600      	movs	r6, #0
 800a2d8:	42a6      	cmp	r6, r4
 800a2da:	d109      	bne.n	800a2f0 <__libc_init_array+0x24>
 800a2dc:	4d0b      	ldr	r5, [pc, #44]	@ (800a30c <__libc_init_array+0x40>)
 800a2de:	4c0c      	ldr	r4, [pc, #48]	@ (800a310 <__libc_init_array+0x44>)
 800a2e0:	f003 fb56 	bl	800d990 <_init>
 800a2e4:	1b64      	subs	r4, r4, r5
 800a2e6:	10a4      	asrs	r4, r4, #2
 800a2e8:	2600      	movs	r6, #0
 800a2ea:	42a6      	cmp	r6, r4
 800a2ec:	d105      	bne.n	800a2fa <__libc_init_array+0x2e>
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}
 800a2f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2f4:	4798      	blx	r3
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7ee      	b.n	800a2d8 <__libc_init_array+0xc>
 800a2fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2fe:	4798      	blx	r3
 800a300:	3601      	adds	r6, #1
 800a302:	e7f2      	b.n	800a2ea <__libc_init_array+0x1e>
 800a304:	0800e0c8 	.word	0x0800e0c8
 800a308:	0800e0c8 	.word	0x0800e0c8
 800a30c:	0800e0c8 	.word	0x0800e0c8
 800a310:	0800e0cc 	.word	0x0800e0cc

0800a314 <__retarget_lock_init_recursive>:
 800a314:	4770      	bx	lr

0800a316 <__retarget_lock_acquire_recursive>:
 800a316:	4770      	bx	lr

0800a318 <__retarget_lock_release_recursive>:
 800a318:	4770      	bx	lr

0800a31a <strcpy>:
 800a31a:	4603      	mov	r3, r0
 800a31c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a320:	f803 2b01 	strb.w	r2, [r3], #1
 800a324:	2a00      	cmp	r2, #0
 800a326:	d1f9      	bne.n	800a31c <strcpy+0x2>
 800a328:	4770      	bx	lr

0800a32a <memcpy>:
 800a32a:	440a      	add	r2, r1
 800a32c:	4291      	cmp	r1, r2
 800a32e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a332:	d100      	bne.n	800a336 <memcpy+0xc>
 800a334:	4770      	bx	lr
 800a336:	b510      	push	{r4, lr}
 800a338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a340:	4291      	cmp	r1, r2
 800a342:	d1f9      	bne.n	800a338 <memcpy+0xe>
 800a344:	bd10      	pop	{r4, pc}
	...

0800a348 <nan>:
 800a348:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a350 <nan+0x8>
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	00000000 	.word	0x00000000
 800a354:	7ff80000 	.word	0x7ff80000

0800a358 <quorem>:
 800a358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	6903      	ldr	r3, [r0, #16]
 800a35e:	690c      	ldr	r4, [r1, #16]
 800a360:	42a3      	cmp	r3, r4
 800a362:	4607      	mov	r7, r0
 800a364:	db7e      	blt.n	800a464 <quorem+0x10c>
 800a366:	3c01      	subs	r4, #1
 800a368:	f101 0814 	add.w	r8, r1, #20
 800a36c:	00a3      	lsls	r3, r4, #2
 800a36e:	f100 0514 	add.w	r5, r0, #20
 800a372:	9300      	str	r3, [sp, #0]
 800a374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a37e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a382:	3301      	adds	r3, #1
 800a384:	429a      	cmp	r2, r3
 800a386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a38a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a38e:	d32e      	bcc.n	800a3ee <quorem+0x96>
 800a390:	f04f 0a00 	mov.w	sl, #0
 800a394:	46c4      	mov	ip, r8
 800a396:	46ae      	mov	lr, r5
 800a398:	46d3      	mov	fp, sl
 800a39a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a39e:	b298      	uxth	r0, r3
 800a3a0:	fb06 a000 	mla	r0, r6, r0, sl
 800a3a4:	0c02      	lsrs	r2, r0, #16
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	fb06 2303 	mla	r3, r6, r3, r2
 800a3ac:	f8de 2000 	ldr.w	r2, [lr]
 800a3b0:	b280      	uxth	r0, r0
 800a3b2:	b292      	uxth	r2, r2
 800a3b4:	1a12      	subs	r2, r2, r0
 800a3b6:	445a      	add	r2, fp
 800a3b8:	f8de 0000 	ldr.w	r0, [lr]
 800a3bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a3c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a3d0:	45e1      	cmp	r9, ip
 800a3d2:	f84e 2b04 	str.w	r2, [lr], #4
 800a3d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a3da:	d2de      	bcs.n	800a39a <quorem+0x42>
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	58eb      	ldr	r3, [r5, r3]
 800a3e0:	b92b      	cbnz	r3, 800a3ee <quorem+0x96>
 800a3e2:	9b01      	ldr	r3, [sp, #4]
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	429d      	cmp	r5, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	d32f      	bcc.n	800a44c <quorem+0xf4>
 800a3ec:	613c      	str	r4, [r7, #16]
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	f001 fd0e 	bl	800be10 <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	db25      	blt.n	800a444 <quorem+0xec>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a400:	f8d1 c000 	ldr.w	ip, [r1]
 800a404:	fa1f fe82 	uxth.w	lr, r2
 800a408:	fa1f f38c 	uxth.w	r3, ip
 800a40c:	eba3 030e 	sub.w	r3, r3, lr
 800a410:	4403      	add	r3, r0
 800a412:	0c12      	lsrs	r2, r2, #16
 800a414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a422:	45c1      	cmp	r9, r8
 800a424:	f841 3b04 	str.w	r3, [r1], #4
 800a428:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a42c:	d2e6      	bcs.n	800a3fc <quorem+0xa4>
 800a42e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a436:	b922      	cbnz	r2, 800a442 <quorem+0xea>
 800a438:	3b04      	subs	r3, #4
 800a43a:	429d      	cmp	r5, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	d30b      	bcc.n	800a458 <quorem+0x100>
 800a440:	613c      	str	r4, [r7, #16]
 800a442:	3601      	adds	r6, #1
 800a444:	4630      	mov	r0, r6
 800a446:	b003      	add	sp, #12
 800a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44c:	6812      	ldr	r2, [r2, #0]
 800a44e:	3b04      	subs	r3, #4
 800a450:	2a00      	cmp	r2, #0
 800a452:	d1cb      	bne.n	800a3ec <quorem+0x94>
 800a454:	3c01      	subs	r4, #1
 800a456:	e7c6      	b.n	800a3e6 <quorem+0x8e>
 800a458:	6812      	ldr	r2, [r2, #0]
 800a45a:	3b04      	subs	r3, #4
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d1ef      	bne.n	800a440 <quorem+0xe8>
 800a460:	3c01      	subs	r4, #1
 800a462:	e7ea      	b.n	800a43a <quorem+0xe2>
 800a464:	2000      	movs	r0, #0
 800a466:	e7ee      	b.n	800a446 <quorem+0xee>

0800a468 <_dtoa_r>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	69c7      	ldr	r7, [r0, #28]
 800a46e:	b099      	sub	sp, #100	@ 0x64
 800a470:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a474:	ec55 4b10 	vmov	r4, r5, d0
 800a478:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a47a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a47c:	4683      	mov	fp, r0
 800a47e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a480:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a482:	b97f      	cbnz	r7, 800a4a4 <_dtoa_r+0x3c>
 800a484:	2010      	movs	r0, #16
 800a486:	f001 f937 	bl	800b6f8 <malloc>
 800a48a:	4602      	mov	r2, r0
 800a48c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a490:	b920      	cbnz	r0, 800a49c <_dtoa_r+0x34>
 800a492:	4ba7      	ldr	r3, [pc, #668]	@ (800a730 <_dtoa_r+0x2c8>)
 800a494:	21ef      	movs	r1, #239	@ 0xef
 800a496:	48a7      	ldr	r0, [pc, #668]	@ (800a734 <_dtoa_r+0x2cc>)
 800a498:	f002 f8e2 	bl	800c660 <__assert_func>
 800a49c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4a0:	6007      	str	r7, [r0, #0]
 800a4a2:	60c7      	str	r7, [r0, #12]
 800a4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4a8:	6819      	ldr	r1, [r3, #0]
 800a4aa:	b159      	cbz	r1, 800a4c4 <_dtoa_r+0x5c>
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	604a      	str	r2, [r1, #4]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4093      	lsls	r3, r2
 800a4b4:	608b      	str	r3, [r1, #8]
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f001 fa26 	bl	800b908 <_Bfree>
 800a4bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	1e2b      	subs	r3, r5, #0
 800a4c6:	bfb9      	ittee	lt
 800a4c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a4cc:	9303      	strlt	r3, [sp, #12]
 800a4ce:	2300      	movge	r3, #0
 800a4d0:	6033      	strge	r3, [r6, #0]
 800a4d2:	9f03      	ldr	r7, [sp, #12]
 800a4d4:	4b98      	ldr	r3, [pc, #608]	@ (800a738 <_dtoa_r+0x2d0>)
 800a4d6:	bfbc      	itt	lt
 800a4d8:	2201      	movlt	r2, #1
 800a4da:	6032      	strlt	r2, [r6, #0]
 800a4dc:	43bb      	bics	r3, r7
 800a4de:	d112      	bne.n	800a506 <_dtoa_r+0x9e>
 800a4e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a4e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a4ec:	4323      	orrs	r3, r4
 800a4ee:	f000 854d 	beq.w	800af8c <_dtoa_r+0xb24>
 800a4f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a74c <_dtoa_r+0x2e4>
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 854f 	beq.w	800af9c <_dtoa_r+0xb34>
 800a4fe:	f10a 0303 	add.w	r3, sl, #3
 800a502:	f000 bd49 	b.w	800af98 <_dtoa_r+0xb30>
 800a506:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	ec51 0b17 	vmov	r0, r1, d7
 800a510:	2300      	movs	r3, #0
 800a512:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a516:	f7f6 faf7 	bl	8000b08 <__aeabi_dcmpeq>
 800a51a:	4680      	mov	r8, r0
 800a51c:	b158      	cbz	r0, 800a536 <_dtoa_r+0xce>
 800a51e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a520:	2301      	movs	r3, #1
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a526:	b113      	cbz	r3, 800a52e <_dtoa_r+0xc6>
 800a528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a52a:	4b84      	ldr	r3, [pc, #528]	@ (800a73c <_dtoa_r+0x2d4>)
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a750 <_dtoa_r+0x2e8>
 800a532:	f000 bd33 	b.w	800af9c <_dtoa_r+0xb34>
 800a536:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a53a:	aa16      	add	r2, sp, #88	@ 0x58
 800a53c:	a917      	add	r1, sp, #92	@ 0x5c
 800a53e:	4658      	mov	r0, fp
 800a540:	f001 fd86 	bl	800c050 <__d2b>
 800a544:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a548:	4681      	mov	r9, r0
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	d077      	beq.n	800a63e <_dtoa_r+0x1d6>
 800a54e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a550:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a55c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a560:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a564:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a568:	4619      	mov	r1, r3
 800a56a:	2200      	movs	r2, #0
 800a56c:	4b74      	ldr	r3, [pc, #464]	@ (800a740 <_dtoa_r+0x2d8>)
 800a56e:	f7f5 feab 	bl	80002c8 <__aeabi_dsub>
 800a572:	a369      	add	r3, pc, #420	@ (adr r3, 800a718 <_dtoa_r+0x2b0>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f7f6 f85e 	bl	8000638 <__aeabi_dmul>
 800a57c:	a368      	add	r3, pc, #416	@ (adr r3, 800a720 <_dtoa_r+0x2b8>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	f7f5 fea3 	bl	80002cc <__adddf3>
 800a586:	4604      	mov	r4, r0
 800a588:	4630      	mov	r0, r6
 800a58a:	460d      	mov	r5, r1
 800a58c:	f7f5 ffea 	bl	8000564 <__aeabi_i2d>
 800a590:	a365      	add	r3, pc, #404	@ (adr r3, 800a728 <_dtoa_r+0x2c0>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f6 f84f 	bl	8000638 <__aeabi_dmul>
 800a59a:	4602      	mov	r2, r0
 800a59c:	460b      	mov	r3, r1
 800a59e:	4620      	mov	r0, r4
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	f7f5 fe93 	bl	80002cc <__adddf3>
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	f7f6 faf5 	bl	8000b98 <__aeabi_d2iz>
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4607      	mov	r7, r0
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f6 fab0 	bl	8000b1c <__aeabi_dcmplt>
 800a5bc:	b140      	cbz	r0, 800a5d0 <_dtoa_r+0x168>
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f7f5 ffd0 	bl	8000564 <__aeabi_i2d>
 800a5c4:	4622      	mov	r2, r4
 800a5c6:	462b      	mov	r3, r5
 800a5c8:	f7f6 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 800a5cc:	b900      	cbnz	r0, 800a5d0 <_dtoa_r+0x168>
 800a5ce:	3f01      	subs	r7, #1
 800a5d0:	2f16      	cmp	r7, #22
 800a5d2:	d851      	bhi.n	800a678 <_dtoa_r+0x210>
 800a5d4:	4b5b      	ldr	r3, [pc, #364]	@ (800a744 <_dtoa_r+0x2dc>)
 800a5d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5e2:	f7f6 fa9b 	bl	8000b1c <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d048      	beq.n	800a67c <_dtoa_r+0x214>
 800a5ea:	3f01      	subs	r7, #1
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a5f2:	1b9b      	subs	r3, r3, r6
 800a5f4:	1e5a      	subs	r2, r3, #1
 800a5f6:	bf44      	itt	mi
 800a5f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a5fc:	2300      	movmi	r3, #0
 800a5fe:	9208      	str	r2, [sp, #32]
 800a600:	bf54      	ite	pl
 800a602:	f04f 0800 	movpl.w	r8, #0
 800a606:	9308      	strmi	r3, [sp, #32]
 800a608:	2f00      	cmp	r7, #0
 800a60a:	db39      	blt.n	800a680 <_dtoa_r+0x218>
 800a60c:	9b08      	ldr	r3, [sp, #32]
 800a60e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a610:	443b      	add	r3, r7
 800a612:	9308      	str	r3, [sp, #32]
 800a614:	2300      	movs	r3, #0
 800a616:	930a      	str	r3, [sp, #40]	@ 0x28
 800a618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d864      	bhi.n	800a6e8 <_dtoa_r+0x280>
 800a61e:	2b05      	cmp	r3, #5
 800a620:	bfc4      	itt	gt
 800a622:	3b04      	subgt	r3, #4
 800a624:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a628:	f1a3 0302 	sub.w	r3, r3, #2
 800a62c:	bfcc      	ite	gt
 800a62e:	2400      	movgt	r4, #0
 800a630:	2401      	movle	r4, #1
 800a632:	2b03      	cmp	r3, #3
 800a634:	d863      	bhi.n	800a6fe <_dtoa_r+0x296>
 800a636:	e8df f003 	tbb	[pc, r3]
 800a63a:	372a      	.short	0x372a
 800a63c:	5535      	.short	0x5535
 800a63e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a642:	441e      	add	r6, r3
 800a644:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a648:	2b20      	cmp	r3, #32
 800a64a:	bfc1      	itttt	gt
 800a64c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a650:	409f      	lslgt	r7, r3
 800a652:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a656:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a65a:	bfd6      	itet	le
 800a65c:	f1c3 0320 	rsble	r3, r3, #32
 800a660:	ea47 0003 	orrgt.w	r0, r7, r3
 800a664:	fa04 f003 	lslle.w	r0, r4, r3
 800a668:	f7f5 ff6c 	bl	8000544 <__aeabi_ui2d>
 800a66c:	2201      	movs	r2, #1
 800a66e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a672:	3e01      	subs	r6, #1
 800a674:	9214      	str	r2, [sp, #80]	@ 0x50
 800a676:	e777      	b.n	800a568 <_dtoa_r+0x100>
 800a678:	2301      	movs	r3, #1
 800a67a:	e7b8      	b.n	800a5ee <_dtoa_r+0x186>
 800a67c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a67e:	e7b7      	b.n	800a5f0 <_dtoa_r+0x188>
 800a680:	427b      	negs	r3, r7
 800a682:	930a      	str	r3, [sp, #40]	@ 0x28
 800a684:	2300      	movs	r3, #0
 800a686:	eba8 0807 	sub.w	r8, r8, r7
 800a68a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a68c:	e7c4      	b.n	800a618 <_dtoa_r+0x1b0>
 800a68e:	2300      	movs	r3, #0
 800a690:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a694:	2b00      	cmp	r3, #0
 800a696:	dc35      	bgt.n	800a704 <_dtoa_r+0x29c>
 800a698:	2301      	movs	r3, #1
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	461a      	mov	r2, r3
 800a6a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6a2:	e00b      	b.n	800a6bc <_dtoa_r+0x254>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e7f3      	b.n	800a690 <_dtoa_r+0x228>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ae:	18fb      	adds	r3, r7, r3
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	bfb8      	it	lt
 800a6ba:	2301      	movlt	r3, #1
 800a6bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	2204      	movs	r2, #4
 800a6c4:	f102 0514 	add.w	r5, r2, #20
 800a6c8:	429d      	cmp	r5, r3
 800a6ca:	d91f      	bls.n	800a70c <_dtoa_r+0x2a4>
 800a6cc:	6041      	str	r1, [r0, #4]
 800a6ce:	4658      	mov	r0, fp
 800a6d0:	f001 f8da 	bl	800b888 <_Balloc>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d13c      	bne.n	800a754 <_dtoa_r+0x2ec>
 800a6da:	4b1b      	ldr	r3, [pc, #108]	@ (800a748 <_dtoa_r+0x2e0>)
 800a6dc:	4602      	mov	r2, r0
 800a6de:	f240 11af 	movw	r1, #431	@ 0x1af
 800a6e2:	e6d8      	b.n	800a496 <_dtoa_r+0x2e>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e7e0      	b.n	800a6aa <_dtoa_r+0x242>
 800a6e8:	2401      	movs	r4, #1
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	9307      	str	r3, [sp, #28]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	2312      	movs	r3, #18
 800a6fc:	e7d0      	b.n	800a6a0 <_dtoa_r+0x238>
 800a6fe:	2301      	movs	r3, #1
 800a700:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a702:	e7f5      	b.n	800a6f0 <_dtoa_r+0x288>
 800a704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	9307      	str	r3, [sp, #28]
 800a70a:	e7d7      	b.n	800a6bc <_dtoa_r+0x254>
 800a70c:	3101      	adds	r1, #1
 800a70e:	0052      	lsls	r2, r2, #1
 800a710:	e7d8      	b.n	800a6c4 <_dtoa_r+0x25c>
 800a712:	bf00      	nop
 800a714:	f3af 8000 	nop.w
 800a718:	636f4361 	.word	0x636f4361
 800a71c:	3fd287a7 	.word	0x3fd287a7
 800a720:	8b60c8b3 	.word	0x8b60c8b3
 800a724:	3fc68a28 	.word	0x3fc68a28
 800a728:	509f79fb 	.word	0x509f79fb
 800a72c:	3fd34413 	.word	0x3fd34413
 800a730:	0800ddb2 	.word	0x0800ddb2
 800a734:	0800ddc9 	.word	0x0800ddc9
 800a738:	7ff00000 	.word	0x7ff00000
 800a73c:	0800dd7a 	.word	0x0800dd7a
 800a740:	3ff80000 	.word	0x3ff80000
 800a744:	0800df20 	.word	0x0800df20
 800a748:	0800de21 	.word	0x0800de21
 800a74c:	0800ddae 	.word	0x0800ddae
 800a750:	0800dd79 	.word	0x0800dd79
 800a754:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a758:	6018      	str	r0, [r3, #0]
 800a75a:	9b07      	ldr	r3, [sp, #28]
 800a75c:	2b0e      	cmp	r3, #14
 800a75e:	f200 80a4 	bhi.w	800a8aa <_dtoa_r+0x442>
 800a762:	2c00      	cmp	r4, #0
 800a764:	f000 80a1 	beq.w	800a8aa <_dtoa_r+0x442>
 800a768:	2f00      	cmp	r7, #0
 800a76a:	dd33      	ble.n	800a7d4 <_dtoa_r+0x36c>
 800a76c:	4bad      	ldr	r3, [pc, #692]	@ (800aa24 <_dtoa_r+0x5bc>)
 800a76e:	f007 020f 	and.w	r2, r7, #15
 800a772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a776:	ed93 7b00 	vldr	d7, [r3]
 800a77a:	05f8      	lsls	r0, r7, #23
 800a77c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a780:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a784:	d516      	bpl.n	800a7b4 <_dtoa_r+0x34c>
 800a786:	4ba8      	ldr	r3, [pc, #672]	@ (800aa28 <_dtoa_r+0x5c0>)
 800a788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a78c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a790:	f7f6 f87c 	bl	800088c <__aeabi_ddiv>
 800a794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a798:	f004 040f 	and.w	r4, r4, #15
 800a79c:	2603      	movs	r6, #3
 800a79e:	4da2      	ldr	r5, [pc, #648]	@ (800aa28 <_dtoa_r+0x5c0>)
 800a7a0:	b954      	cbnz	r4, 800a7b8 <_dtoa_r+0x350>
 800a7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7aa:	f7f6 f86f 	bl	800088c <__aeabi_ddiv>
 800a7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b2:	e028      	b.n	800a806 <_dtoa_r+0x39e>
 800a7b4:	2602      	movs	r6, #2
 800a7b6:	e7f2      	b.n	800a79e <_dtoa_r+0x336>
 800a7b8:	07e1      	lsls	r1, r4, #31
 800a7ba:	d508      	bpl.n	800a7ce <_dtoa_r+0x366>
 800a7bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7c4:	f7f5 ff38 	bl	8000638 <__aeabi_dmul>
 800a7c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	1064      	asrs	r4, r4, #1
 800a7d0:	3508      	adds	r5, #8
 800a7d2:	e7e5      	b.n	800a7a0 <_dtoa_r+0x338>
 800a7d4:	f000 80d2 	beq.w	800a97c <_dtoa_r+0x514>
 800a7d8:	427c      	negs	r4, r7
 800a7da:	4b92      	ldr	r3, [pc, #584]	@ (800aa24 <_dtoa_r+0x5bc>)
 800a7dc:	4d92      	ldr	r5, [pc, #584]	@ (800aa28 <_dtoa_r+0x5c0>)
 800a7de:	f004 020f 	and.w	r2, r4, #15
 800a7e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a7ee:	f7f5 ff23 	bl	8000638 <__aeabi_dmul>
 800a7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7f6:	1124      	asrs	r4, r4, #4
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	2602      	movs	r6, #2
 800a7fc:	2c00      	cmp	r4, #0
 800a7fe:	f040 80b2 	bne.w	800a966 <_dtoa_r+0x4fe>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1d3      	bne.n	800a7ae <_dtoa_r+0x346>
 800a806:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a808:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f000 80b7 	beq.w	800a980 <_dtoa_r+0x518>
 800a812:	4b86      	ldr	r3, [pc, #536]	@ (800aa2c <_dtoa_r+0x5c4>)
 800a814:	2200      	movs	r2, #0
 800a816:	4620      	mov	r0, r4
 800a818:	4629      	mov	r1, r5
 800a81a:	f7f6 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	f000 80ae 	beq.w	800a980 <_dtoa_r+0x518>
 800a824:	9b07      	ldr	r3, [sp, #28]
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 80aa 	beq.w	800a980 <_dtoa_r+0x518>
 800a82c:	9b00      	ldr	r3, [sp, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	dd37      	ble.n	800a8a2 <_dtoa_r+0x43a>
 800a832:	1e7b      	subs	r3, r7, #1
 800a834:	9304      	str	r3, [sp, #16]
 800a836:	4620      	mov	r0, r4
 800a838:	4b7d      	ldr	r3, [pc, #500]	@ (800aa30 <_dtoa_r+0x5c8>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	4629      	mov	r1, r5
 800a83e:	f7f5 fefb 	bl	8000638 <__aeabi_dmul>
 800a842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a846:	9c00      	ldr	r4, [sp, #0]
 800a848:	3601      	adds	r6, #1
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7f5 fe8a 	bl	8000564 <__aeabi_i2d>
 800a850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a854:	f7f5 fef0 	bl	8000638 <__aeabi_dmul>
 800a858:	4b76      	ldr	r3, [pc, #472]	@ (800aa34 <_dtoa_r+0x5cc>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	f7f5 fd36 	bl	80002cc <__adddf3>
 800a860:	4605      	mov	r5, r0
 800a862:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a866:	2c00      	cmp	r4, #0
 800a868:	f040 808d 	bne.w	800a986 <_dtoa_r+0x51e>
 800a86c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a870:	4b71      	ldr	r3, [pc, #452]	@ (800aa38 <_dtoa_r+0x5d0>)
 800a872:	2200      	movs	r2, #0
 800a874:	f7f5 fd28 	bl	80002c8 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a880:	462a      	mov	r2, r5
 800a882:	4633      	mov	r3, r6
 800a884:	f7f6 f968 	bl	8000b58 <__aeabi_dcmpgt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	f040 828b 	bne.w	800ada4 <_dtoa_r+0x93c>
 800a88e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a892:	462a      	mov	r2, r5
 800a894:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a898:	f7f6 f940 	bl	8000b1c <__aeabi_dcmplt>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	f040 8128 	bne.w	800aaf2 <_dtoa_r+0x68a>
 800a8a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a8a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a8aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f2c0 815a 	blt.w	800ab66 <_dtoa_r+0x6fe>
 800a8b2:	2f0e      	cmp	r7, #14
 800a8b4:	f300 8157 	bgt.w	800ab66 <_dtoa_r+0x6fe>
 800a8b8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa24 <_dtoa_r+0x5bc>)
 800a8ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a8be:	ed93 7b00 	vldr	d7, [r3]
 800a8c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	ed8d 7b00 	vstr	d7, [sp]
 800a8ca:	da03      	bge.n	800a8d4 <_dtoa_r+0x46c>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f340 8101 	ble.w	800aad6 <_dtoa_r+0x66e>
 800a8d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a8d8:	4656      	mov	r6, sl
 800a8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f7f5 ffd3 	bl	800088c <__aeabi_ddiv>
 800a8e6:	f7f6 f957 	bl	8000b98 <__aeabi_d2iz>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	f7f5 fe3a 	bl	8000564 <__aeabi_i2d>
 800a8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f4:	f7f5 fea0 	bl	8000638 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a904:	f7f5 fce0 	bl	80002c8 <__aeabi_dsub>
 800a908:	f806 4b01 	strb.w	r4, [r6], #1
 800a90c:	9d07      	ldr	r5, [sp, #28]
 800a90e:	eba6 040a 	sub.w	r4, r6, sl
 800a912:	42a5      	cmp	r5, r4
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	f040 8117 	bne.w	800ab4a <_dtoa_r+0x6e2>
 800a91c:	f7f5 fcd6 	bl	80002cc <__adddf3>
 800a920:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	f7f6 f916 	bl	8000b58 <__aeabi_dcmpgt>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f040 80f9 	bne.w	800ab24 <_dtoa_r+0x6bc>
 800a932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f6 f8e5 	bl	8000b08 <__aeabi_dcmpeq>
 800a93e:	b118      	cbz	r0, 800a948 <_dtoa_r+0x4e0>
 800a940:	f018 0f01 	tst.w	r8, #1
 800a944:	f040 80ee 	bne.w	800ab24 <_dtoa_r+0x6bc>
 800a948:	4649      	mov	r1, r9
 800a94a:	4658      	mov	r0, fp
 800a94c:	f000 ffdc 	bl	800b908 <_Bfree>
 800a950:	2300      	movs	r3, #0
 800a952:	7033      	strb	r3, [r6, #0]
 800a954:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a956:	3701      	adds	r7, #1
 800a958:	601f      	str	r7, [r3, #0]
 800a95a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 831d 	beq.w	800af9c <_dtoa_r+0xb34>
 800a962:	601e      	str	r6, [r3, #0]
 800a964:	e31a      	b.n	800af9c <_dtoa_r+0xb34>
 800a966:	07e2      	lsls	r2, r4, #31
 800a968:	d505      	bpl.n	800a976 <_dtoa_r+0x50e>
 800a96a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a96e:	f7f5 fe63 	bl	8000638 <__aeabi_dmul>
 800a972:	3601      	adds	r6, #1
 800a974:	2301      	movs	r3, #1
 800a976:	1064      	asrs	r4, r4, #1
 800a978:	3508      	adds	r5, #8
 800a97a:	e73f      	b.n	800a7fc <_dtoa_r+0x394>
 800a97c:	2602      	movs	r6, #2
 800a97e:	e742      	b.n	800a806 <_dtoa_r+0x39e>
 800a980:	9c07      	ldr	r4, [sp, #28]
 800a982:	9704      	str	r7, [sp, #16]
 800a984:	e761      	b.n	800a84a <_dtoa_r+0x3e2>
 800a986:	4b27      	ldr	r3, [pc, #156]	@ (800aa24 <_dtoa_r+0x5bc>)
 800a988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a98a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a98e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a992:	4454      	add	r4, sl
 800a994:	2900      	cmp	r1, #0
 800a996:	d053      	beq.n	800aa40 <_dtoa_r+0x5d8>
 800a998:	4928      	ldr	r1, [pc, #160]	@ (800aa3c <_dtoa_r+0x5d4>)
 800a99a:	2000      	movs	r0, #0
 800a99c:	f7f5 ff76 	bl	800088c <__aeabi_ddiv>
 800a9a0:	4633      	mov	r3, r6
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	f7f5 fc90 	bl	80002c8 <__aeabi_dsub>
 800a9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9ac:	4656      	mov	r6, sl
 800a9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9b2:	f7f6 f8f1 	bl	8000b98 <__aeabi_d2iz>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	f7f5 fdd4 	bl	8000564 <__aeabi_i2d>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c4:	f7f5 fc80 	bl	80002c8 <__aeabi_dsub>
 800a9c8:	3530      	adds	r5, #48	@ 0x30
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9d2:	f806 5b01 	strb.w	r5, [r6], #1
 800a9d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9da:	f7f6 f89f 	bl	8000b1c <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d171      	bne.n	800aac6 <_dtoa_r+0x65e>
 800a9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9e6:	4911      	ldr	r1, [pc, #68]	@ (800aa2c <_dtoa_r+0x5c4>)
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f7f5 fc6d 	bl	80002c8 <__aeabi_dsub>
 800a9ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9f2:	f7f6 f893 	bl	8000b1c <__aeabi_dcmplt>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f040 8095 	bne.w	800ab26 <_dtoa_r+0x6be>
 800a9fc:	42a6      	cmp	r6, r4
 800a9fe:	f43f af50 	beq.w	800a8a2 <_dtoa_r+0x43a>
 800aa02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa06:	4b0a      	ldr	r3, [pc, #40]	@ (800aa30 <_dtoa_r+0x5c8>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f7f5 fe15 	bl	8000638 <__aeabi_dmul>
 800aa0e:	4b08      	ldr	r3, [pc, #32]	@ (800aa30 <_dtoa_r+0x5c8>)
 800aa10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa14:	2200      	movs	r2, #0
 800aa16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa1a:	f7f5 fe0d 	bl	8000638 <__aeabi_dmul>
 800aa1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa22:	e7c4      	b.n	800a9ae <_dtoa_r+0x546>
 800aa24:	0800df20 	.word	0x0800df20
 800aa28:	0800def8 	.word	0x0800def8
 800aa2c:	3ff00000 	.word	0x3ff00000
 800aa30:	40240000 	.word	0x40240000
 800aa34:	401c0000 	.word	0x401c0000
 800aa38:	40140000 	.word	0x40140000
 800aa3c:	3fe00000 	.word	0x3fe00000
 800aa40:	4631      	mov	r1, r6
 800aa42:	4628      	mov	r0, r5
 800aa44:	f7f5 fdf8 	bl	8000638 <__aeabi_dmul>
 800aa48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aa4c:	9415      	str	r4, [sp, #84]	@ 0x54
 800aa4e:	4656      	mov	r6, sl
 800aa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa54:	f7f6 f8a0 	bl	8000b98 <__aeabi_d2iz>
 800aa58:	4605      	mov	r5, r0
 800aa5a:	f7f5 fd83 	bl	8000564 <__aeabi_i2d>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa66:	f7f5 fc2f 	bl	80002c8 <__aeabi_dsub>
 800aa6a:	3530      	adds	r5, #48	@ 0x30
 800aa6c:	f806 5b01 	strb.w	r5, [r6], #1
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	42a6      	cmp	r6, r4
 800aa76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa7a:	f04f 0200 	mov.w	r2, #0
 800aa7e:	d124      	bne.n	800aaca <_dtoa_r+0x662>
 800aa80:	4bac      	ldr	r3, [pc, #688]	@ (800ad34 <_dtoa_r+0x8cc>)
 800aa82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa86:	f7f5 fc21 	bl	80002cc <__adddf3>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa92:	f7f6 f861 	bl	8000b58 <__aeabi_dcmpgt>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d145      	bne.n	800ab26 <_dtoa_r+0x6be>
 800aa9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa9e:	49a5      	ldr	r1, [pc, #660]	@ (800ad34 <_dtoa_r+0x8cc>)
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f7f5 fc11 	bl	80002c8 <__aeabi_dsub>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaae:	f7f6 f835 	bl	8000b1c <__aeabi_dcmplt>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f43f aef5 	beq.w	800a8a2 <_dtoa_r+0x43a>
 800aab8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aaba:	1e73      	subs	r3, r6, #1
 800aabc:	9315      	str	r3, [sp, #84]	@ 0x54
 800aabe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aac2:	2b30      	cmp	r3, #48	@ 0x30
 800aac4:	d0f8      	beq.n	800aab8 <_dtoa_r+0x650>
 800aac6:	9f04      	ldr	r7, [sp, #16]
 800aac8:	e73e      	b.n	800a948 <_dtoa_r+0x4e0>
 800aaca:	4b9b      	ldr	r3, [pc, #620]	@ (800ad38 <_dtoa_r+0x8d0>)
 800aacc:	f7f5 fdb4 	bl	8000638 <__aeabi_dmul>
 800aad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad4:	e7bc      	b.n	800aa50 <_dtoa_r+0x5e8>
 800aad6:	d10c      	bne.n	800aaf2 <_dtoa_r+0x68a>
 800aad8:	4b98      	ldr	r3, [pc, #608]	@ (800ad3c <_dtoa_r+0x8d4>)
 800aada:	2200      	movs	r2, #0
 800aadc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aae0:	f7f5 fdaa 	bl	8000638 <__aeabi_dmul>
 800aae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aae8:	f7f6 f82c 	bl	8000b44 <__aeabi_dcmpge>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	f000 8157 	beq.w	800ada0 <_dtoa_r+0x938>
 800aaf2:	2400      	movs	r4, #0
 800aaf4:	4625      	mov	r5, r4
 800aaf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf8:	43db      	mvns	r3, r3
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	4656      	mov	r6, sl
 800aafe:	2700      	movs	r7, #0
 800ab00:	4621      	mov	r1, r4
 800ab02:	4658      	mov	r0, fp
 800ab04:	f000 ff00 	bl	800b908 <_Bfree>
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	d0dc      	beq.n	800aac6 <_dtoa_r+0x65e>
 800ab0c:	b12f      	cbz	r7, 800ab1a <_dtoa_r+0x6b2>
 800ab0e:	42af      	cmp	r7, r5
 800ab10:	d003      	beq.n	800ab1a <_dtoa_r+0x6b2>
 800ab12:	4639      	mov	r1, r7
 800ab14:	4658      	mov	r0, fp
 800ab16:	f000 fef7 	bl	800b908 <_Bfree>
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fef3 	bl	800b908 <_Bfree>
 800ab22:	e7d0      	b.n	800aac6 <_dtoa_r+0x65e>
 800ab24:	9704      	str	r7, [sp, #16]
 800ab26:	4633      	mov	r3, r6
 800ab28:	461e      	mov	r6, r3
 800ab2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab2e:	2a39      	cmp	r2, #57	@ 0x39
 800ab30:	d107      	bne.n	800ab42 <_dtoa_r+0x6da>
 800ab32:	459a      	cmp	sl, r3
 800ab34:	d1f8      	bne.n	800ab28 <_dtoa_r+0x6c0>
 800ab36:	9a04      	ldr	r2, [sp, #16]
 800ab38:	3201      	adds	r2, #1
 800ab3a:	9204      	str	r2, [sp, #16]
 800ab3c:	2230      	movs	r2, #48	@ 0x30
 800ab3e:	f88a 2000 	strb.w	r2, [sl]
 800ab42:	781a      	ldrb	r2, [r3, #0]
 800ab44:	3201      	adds	r2, #1
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	e7bd      	b.n	800aac6 <_dtoa_r+0x65e>
 800ab4a:	4b7b      	ldr	r3, [pc, #492]	@ (800ad38 <_dtoa_r+0x8d0>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f7f5 fd73 	bl	8000638 <__aeabi_dmul>
 800ab52:	2200      	movs	r2, #0
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	460d      	mov	r5, r1
 800ab5a:	f7f5 ffd5 	bl	8000b08 <__aeabi_dcmpeq>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f43f aebb 	beq.w	800a8da <_dtoa_r+0x472>
 800ab64:	e6f0      	b.n	800a948 <_dtoa_r+0x4e0>
 800ab66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	f000 80db 	beq.w	800ad24 <_dtoa_r+0x8bc>
 800ab6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab70:	2a01      	cmp	r2, #1
 800ab72:	f300 80bf 	bgt.w	800acf4 <_dtoa_r+0x88c>
 800ab76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ab78:	2a00      	cmp	r2, #0
 800ab7a:	f000 80b7 	beq.w	800acec <_dtoa_r+0x884>
 800ab7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab84:	4646      	mov	r6, r8
 800ab86:	9a08      	ldr	r2, [sp, #32]
 800ab88:	2101      	movs	r1, #1
 800ab8a:	441a      	add	r2, r3
 800ab8c:	4658      	mov	r0, fp
 800ab8e:	4498      	add	r8, r3
 800ab90:	9208      	str	r2, [sp, #32]
 800ab92:	f000 ffb7 	bl	800bb04 <__i2b>
 800ab96:	4605      	mov	r5, r0
 800ab98:	b15e      	cbz	r6, 800abb2 <_dtoa_r+0x74a>
 800ab9a:	9b08      	ldr	r3, [sp, #32]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd08      	ble.n	800abb2 <_dtoa_r+0x74a>
 800aba0:	42b3      	cmp	r3, r6
 800aba2:	9a08      	ldr	r2, [sp, #32]
 800aba4:	bfa8      	it	ge
 800aba6:	4633      	movge	r3, r6
 800aba8:	eba8 0803 	sub.w	r8, r8, r3
 800abac:	1af6      	subs	r6, r6, r3
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	9308      	str	r3, [sp, #32]
 800abb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb4:	b1f3      	cbz	r3, 800abf4 <_dtoa_r+0x78c>
 800abb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80b7 	beq.w	800ad2c <_dtoa_r+0x8c4>
 800abbe:	b18c      	cbz	r4, 800abe4 <_dtoa_r+0x77c>
 800abc0:	4629      	mov	r1, r5
 800abc2:	4622      	mov	r2, r4
 800abc4:	4658      	mov	r0, fp
 800abc6:	f001 f85d 	bl	800bc84 <__pow5mult>
 800abca:	464a      	mov	r2, r9
 800abcc:	4601      	mov	r1, r0
 800abce:	4605      	mov	r5, r0
 800abd0:	4658      	mov	r0, fp
 800abd2:	f000 ffad 	bl	800bb30 <__multiply>
 800abd6:	4649      	mov	r1, r9
 800abd8:	9004      	str	r0, [sp, #16]
 800abda:	4658      	mov	r0, fp
 800abdc:	f000 fe94 	bl	800b908 <_Bfree>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	4699      	mov	r9, r3
 800abe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abe6:	1b1a      	subs	r2, r3, r4
 800abe8:	d004      	beq.n	800abf4 <_dtoa_r+0x78c>
 800abea:	4649      	mov	r1, r9
 800abec:	4658      	mov	r0, fp
 800abee:	f001 f849 	bl	800bc84 <__pow5mult>
 800abf2:	4681      	mov	r9, r0
 800abf4:	2101      	movs	r1, #1
 800abf6:	4658      	mov	r0, fp
 800abf8:	f000 ff84 	bl	800bb04 <__i2b>
 800abfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abfe:	4604      	mov	r4, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 81cf 	beq.w	800afa4 <_dtoa_r+0xb3c>
 800ac06:	461a      	mov	r2, r3
 800ac08:	4601      	mov	r1, r0
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f001 f83a 	bl	800bc84 <__pow5mult>
 800ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	4604      	mov	r4, r0
 800ac16:	f300 8095 	bgt.w	800ad44 <_dtoa_r+0x8dc>
 800ac1a:	9b02      	ldr	r3, [sp, #8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f040 8087 	bne.w	800ad30 <_dtoa_r+0x8c8>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f040 8089 	bne.w	800ad40 <_dtoa_r+0x8d8>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac34:	0d1b      	lsrs	r3, r3, #20
 800ac36:	051b      	lsls	r3, r3, #20
 800ac38:	b12b      	cbz	r3, 800ac46 <_dtoa_r+0x7de>
 800ac3a:	9b08      	ldr	r3, [sp, #32]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	9308      	str	r3, [sp, #32]
 800ac40:	f108 0801 	add.w	r8, r8, #1
 800ac44:	2301      	movs	r3, #1
 800ac46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 81b0 	beq.w	800afb0 <_dtoa_r+0xb48>
 800ac50:	6923      	ldr	r3, [r4, #16]
 800ac52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac56:	6918      	ldr	r0, [r3, #16]
 800ac58:	f000 ff08 	bl	800ba6c <__hi0bits>
 800ac5c:	f1c0 0020 	rsb	r0, r0, #32
 800ac60:	9b08      	ldr	r3, [sp, #32]
 800ac62:	4418      	add	r0, r3
 800ac64:	f010 001f 	ands.w	r0, r0, #31
 800ac68:	d077      	beq.n	800ad5a <_dtoa_r+0x8f2>
 800ac6a:	f1c0 0320 	rsb	r3, r0, #32
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	dd6b      	ble.n	800ad4a <_dtoa_r+0x8e2>
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	f1c0 001c 	rsb	r0, r0, #28
 800ac78:	4403      	add	r3, r0
 800ac7a:	4480      	add	r8, r0
 800ac7c:	4406      	add	r6, r0
 800ac7e:	9308      	str	r3, [sp, #32]
 800ac80:	f1b8 0f00 	cmp.w	r8, #0
 800ac84:	dd05      	ble.n	800ac92 <_dtoa_r+0x82a>
 800ac86:	4649      	mov	r1, r9
 800ac88:	4642      	mov	r2, r8
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f001 f854 	bl	800bd38 <__lshift>
 800ac90:	4681      	mov	r9, r0
 800ac92:	9b08      	ldr	r3, [sp, #32]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dd05      	ble.n	800aca4 <_dtoa_r+0x83c>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4658      	mov	r0, fp
 800ac9e:	f001 f84b 	bl	800bd38 <__lshift>
 800aca2:	4604      	mov	r4, r0
 800aca4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d059      	beq.n	800ad5e <_dtoa_r+0x8f6>
 800acaa:	4621      	mov	r1, r4
 800acac:	4648      	mov	r0, r9
 800acae:	f001 f8af 	bl	800be10 <__mcmp>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	da53      	bge.n	800ad5e <_dtoa_r+0x8f6>
 800acb6:	1e7b      	subs	r3, r7, #1
 800acb8:	9304      	str	r3, [sp, #16]
 800acba:	4649      	mov	r1, r9
 800acbc:	2300      	movs	r3, #0
 800acbe:	220a      	movs	r2, #10
 800acc0:	4658      	mov	r0, fp
 800acc2:	f000 fe43 	bl	800b94c <__multadd>
 800acc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acc8:	4681      	mov	r9, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 8172 	beq.w	800afb4 <_dtoa_r+0xb4c>
 800acd0:	2300      	movs	r3, #0
 800acd2:	4629      	mov	r1, r5
 800acd4:	220a      	movs	r2, #10
 800acd6:	4658      	mov	r0, fp
 800acd8:	f000 fe38 	bl	800b94c <__multadd>
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	4605      	mov	r5, r0
 800ace2:	dc67      	bgt.n	800adb4 <_dtoa_r+0x94c>
 800ace4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	dc41      	bgt.n	800ad6e <_dtoa_r+0x906>
 800acea:	e063      	b.n	800adb4 <_dtoa_r+0x94c>
 800acec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800acee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800acf2:	e746      	b.n	800ab82 <_dtoa_r+0x71a>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	1e5c      	subs	r4, r3, #1
 800acf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acfa:	42a3      	cmp	r3, r4
 800acfc:	bfbf      	itttt	lt
 800acfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ad00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ad02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ad04:	1ae3      	sublt	r3, r4, r3
 800ad06:	bfb4      	ite	lt
 800ad08:	18d2      	addlt	r2, r2, r3
 800ad0a:	1b1c      	subge	r4, r3, r4
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	bfbc      	itt	lt
 800ad10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ad12:	2400      	movlt	r4, #0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bfb5      	itete	lt
 800ad18:	eba8 0603 	sublt.w	r6, r8, r3
 800ad1c:	9b07      	ldrge	r3, [sp, #28]
 800ad1e:	2300      	movlt	r3, #0
 800ad20:	4646      	movge	r6, r8
 800ad22:	e730      	b.n	800ab86 <_dtoa_r+0x71e>
 800ad24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ad28:	4646      	mov	r6, r8
 800ad2a:	e735      	b.n	800ab98 <_dtoa_r+0x730>
 800ad2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ad2e:	e75c      	b.n	800abea <_dtoa_r+0x782>
 800ad30:	2300      	movs	r3, #0
 800ad32:	e788      	b.n	800ac46 <_dtoa_r+0x7de>
 800ad34:	3fe00000 	.word	0x3fe00000
 800ad38:	40240000 	.word	0x40240000
 800ad3c:	40140000 	.word	0x40140000
 800ad40:	9b02      	ldr	r3, [sp, #8]
 800ad42:	e780      	b.n	800ac46 <_dtoa_r+0x7de>
 800ad44:	2300      	movs	r3, #0
 800ad46:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad48:	e782      	b.n	800ac50 <_dtoa_r+0x7e8>
 800ad4a:	d099      	beq.n	800ac80 <_dtoa_r+0x818>
 800ad4c:	9a08      	ldr	r2, [sp, #32]
 800ad4e:	331c      	adds	r3, #28
 800ad50:	441a      	add	r2, r3
 800ad52:	4498      	add	r8, r3
 800ad54:	441e      	add	r6, r3
 800ad56:	9208      	str	r2, [sp, #32]
 800ad58:	e792      	b.n	800ac80 <_dtoa_r+0x818>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	e7f6      	b.n	800ad4c <_dtoa_r+0x8e4>
 800ad5e:	9b07      	ldr	r3, [sp, #28]
 800ad60:	9704      	str	r7, [sp, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	dc20      	bgt.n	800ada8 <_dtoa_r+0x940>
 800ad66:	9300      	str	r3, [sp, #0]
 800ad68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	dd1e      	ble.n	800adac <_dtoa_r+0x944>
 800ad6e:	9b00      	ldr	r3, [sp, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f47f aec0 	bne.w	800aaf6 <_dtoa_r+0x68e>
 800ad76:	4621      	mov	r1, r4
 800ad78:	2205      	movs	r2, #5
 800ad7a:	4658      	mov	r0, fp
 800ad7c:	f000 fde6 	bl	800b94c <__multadd>
 800ad80:	4601      	mov	r1, r0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4648      	mov	r0, r9
 800ad86:	f001 f843 	bl	800be10 <__mcmp>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f77f aeb3 	ble.w	800aaf6 <_dtoa_r+0x68e>
 800ad90:	4656      	mov	r6, sl
 800ad92:	2331      	movs	r3, #49	@ 0x31
 800ad94:	f806 3b01 	strb.w	r3, [r6], #1
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	e6ae      	b.n	800aafe <_dtoa_r+0x696>
 800ada0:	9c07      	ldr	r4, [sp, #28]
 800ada2:	9704      	str	r7, [sp, #16]
 800ada4:	4625      	mov	r5, r4
 800ada6:	e7f3      	b.n	800ad90 <_dtoa_r+0x928>
 800ada8:	9b07      	ldr	r3, [sp, #28]
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 8104 	beq.w	800afbc <_dtoa_r+0xb54>
 800adb4:	2e00      	cmp	r6, #0
 800adb6:	dd05      	ble.n	800adc4 <_dtoa_r+0x95c>
 800adb8:	4629      	mov	r1, r5
 800adba:	4632      	mov	r2, r6
 800adbc:	4658      	mov	r0, fp
 800adbe:	f000 ffbb 	bl	800bd38 <__lshift>
 800adc2:	4605      	mov	r5, r0
 800adc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d05a      	beq.n	800ae80 <_dtoa_r+0xa18>
 800adca:	6869      	ldr	r1, [r5, #4]
 800adcc:	4658      	mov	r0, fp
 800adce:	f000 fd5b 	bl	800b888 <_Balloc>
 800add2:	4606      	mov	r6, r0
 800add4:	b928      	cbnz	r0, 800ade2 <_dtoa_r+0x97a>
 800add6:	4b84      	ldr	r3, [pc, #528]	@ (800afe8 <_dtoa_r+0xb80>)
 800add8:	4602      	mov	r2, r0
 800adda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800adde:	f7ff bb5a 	b.w	800a496 <_dtoa_r+0x2e>
 800ade2:	692a      	ldr	r2, [r5, #16]
 800ade4:	3202      	adds	r2, #2
 800ade6:	0092      	lsls	r2, r2, #2
 800ade8:	f105 010c 	add.w	r1, r5, #12
 800adec:	300c      	adds	r0, #12
 800adee:	f7ff fa9c 	bl	800a32a <memcpy>
 800adf2:	2201      	movs	r2, #1
 800adf4:	4631      	mov	r1, r6
 800adf6:	4658      	mov	r0, fp
 800adf8:	f000 ff9e 	bl	800bd38 <__lshift>
 800adfc:	f10a 0301 	add.w	r3, sl, #1
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	9b00      	ldr	r3, [sp, #0]
 800ae04:	4453      	add	r3, sl
 800ae06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae08:	9b02      	ldr	r3, [sp, #8]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	462f      	mov	r7, r5
 800ae10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae12:	4605      	mov	r5, r0
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	4621      	mov	r1, r4
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	4648      	mov	r0, r9
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	f7ff fa9b 	bl	800a358 <quorem>
 800ae22:	4639      	mov	r1, r7
 800ae24:	9002      	str	r0, [sp, #8]
 800ae26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f000 fff0 	bl	800be10 <__mcmp>
 800ae30:	462a      	mov	r2, r5
 800ae32:	9008      	str	r0, [sp, #32]
 800ae34:	4621      	mov	r1, r4
 800ae36:	4658      	mov	r0, fp
 800ae38:	f001 f806 	bl	800be48 <__mdiff>
 800ae3c:	68c2      	ldr	r2, [r0, #12]
 800ae3e:	4606      	mov	r6, r0
 800ae40:	bb02      	cbnz	r2, 800ae84 <_dtoa_r+0xa1c>
 800ae42:	4601      	mov	r1, r0
 800ae44:	4648      	mov	r0, r9
 800ae46:	f000 ffe3 	bl	800be10 <__mcmp>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4658      	mov	r0, fp
 800ae50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae52:	f000 fd59 	bl	800b908 <_Bfree>
 800ae56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae5a:	9e07      	ldr	r6, [sp, #28]
 800ae5c:	ea43 0102 	orr.w	r1, r3, r2
 800ae60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae62:	4319      	orrs	r1, r3
 800ae64:	d110      	bne.n	800ae88 <_dtoa_r+0xa20>
 800ae66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae6a:	d029      	beq.n	800aec0 <_dtoa_r+0xa58>
 800ae6c:	9b08      	ldr	r3, [sp, #32]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dd02      	ble.n	800ae78 <_dtoa_r+0xa10>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ae78:	9b00      	ldr	r3, [sp, #0]
 800ae7a:	f883 8000 	strb.w	r8, [r3]
 800ae7e:	e63f      	b.n	800ab00 <_dtoa_r+0x698>
 800ae80:	4628      	mov	r0, r5
 800ae82:	e7bb      	b.n	800adfc <_dtoa_r+0x994>
 800ae84:	2201      	movs	r2, #1
 800ae86:	e7e1      	b.n	800ae4c <_dtoa_r+0x9e4>
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	db04      	blt.n	800ae98 <_dtoa_r+0xa30>
 800ae8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae90:	430b      	orrs	r3, r1
 800ae92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae94:	430b      	orrs	r3, r1
 800ae96:	d120      	bne.n	800aeda <_dtoa_r+0xa72>
 800ae98:	2a00      	cmp	r2, #0
 800ae9a:	dded      	ble.n	800ae78 <_dtoa_r+0xa10>
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4658      	mov	r0, fp
 800aea2:	f000 ff49 	bl	800bd38 <__lshift>
 800aea6:	4621      	mov	r1, r4
 800aea8:	4681      	mov	r9, r0
 800aeaa:	f000 ffb1 	bl	800be10 <__mcmp>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	dc03      	bgt.n	800aeba <_dtoa_r+0xa52>
 800aeb2:	d1e1      	bne.n	800ae78 <_dtoa_r+0xa10>
 800aeb4:	f018 0f01 	tst.w	r8, #1
 800aeb8:	d0de      	beq.n	800ae78 <_dtoa_r+0xa10>
 800aeba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aebe:	d1d8      	bne.n	800ae72 <_dtoa_r+0xa0a>
 800aec0:	9a00      	ldr	r2, [sp, #0]
 800aec2:	2339      	movs	r3, #57	@ 0x39
 800aec4:	7013      	strb	r3, [r2, #0]
 800aec6:	4633      	mov	r3, r6
 800aec8:	461e      	mov	r6, r3
 800aeca:	3b01      	subs	r3, #1
 800aecc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aed0:	2a39      	cmp	r2, #57	@ 0x39
 800aed2:	d052      	beq.n	800af7a <_dtoa_r+0xb12>
 800aed4:	3201      	adds	r2, #1
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	e612      	b.n	800ab00 <_dtoa_r+0x698>
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	dd07      	ble.n	800aeee <_dtoa_r+0xa86>
 800aede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aee2:	d0ed      	beq.n	800aec0 <_dtoa_r+0xa58>
 800aee4:	9a00      	ldr	r2, [sp, #0]
 800aee6:	f108 0301 	add.w	r3, r8, #1
 800aeea:	7013      	strb	r3, [r2, #0]
 800aeec:	e608      	b.n	800ab00 <_dtoa_r+0x698>
 800aeee:	9b07      	ldr	r3, [sp, #28]
 800aef0:	9a07      	ldr	r2, [sp, #28]
 800aef2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d028      	beq.n	800af4e <_dtoa_r+0xae6>
 800aefc:	4649      	mov	r1, r9
 800aefe:	2300      	movs	r3, #0
 800af00:	220a      	movs	r2, #10
 800af02:	4658      	mov	r0, fp
 800af04:	f000 fd22 	bl	800b94c <__multadd>
 800af08:	42af      	cmp	r7, r5
 800af0a:	4681      	mov	r9, r0
 800af0c:	f04f 0300 	mov.w	r3, #0
 800af10:	f04f 020a 	mov.w	r2, #10
 800af14:	4639      	mov	r1, r7
 800af16:	4658      	mov	r0, fp
 800af18:	d107      	bne.n	800af2a <_dtoa_r+0xac2>
 800af1a:	f000 fd17 	bl	800b94c <__multadd>
 800af1e:	4607      	mov	r7, r0
 800af20:	4605      	mov	r5, r0
 800af22:	9b07      	ldr	r3, [sp, #28]
 800af24:	3301      	adds	r3, #1
 800af26:	9307      	str	r3, [sp, #28]
 800af28:	e774      	b.n	800ae14 <_dtoa_r+0x9ac>
 800af2a:	f000 fd0f 	bl	800b94c <__multadd>
 800af2e:	4629      	mov	r1, r5
 800af30:	4607      	mov	r7, r0
 800af32:	2300      	movs	r3, #0
 800af34:	220a      	movs	r2, #10
 800af36:	4658      	mov	r0, fp
 800af38:	f000 fd08 	bl	800b94c <__multadd>
 800af3c:	4605      	mov	r5, r0
 800af3e:	e7f0      	b.n	800af22 <_dtoa_r+0xaba>
 800af40:	9b00      	ldr	r3, [sp, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	bfcc      	ite	gt
 800af46:	461e      	movgt	r6, r3
 800af48:	2601      	movle	r6, #1
 800af4a:	4456      	add	r6, sl
 800af4c:	2700      	movs	r7, #0
 800af4e:	4649      	mov	r1, r9
 800af50:	2201      	movs	r2, #1
 800af52:	4658      	mov	r0, fp
 800af54:	f000 fef0 	bl	800bd38 <__lshift>
 800af58:	4621      	mov	r1, r4
 800af5a:	4681      	mov	r9, r0
 800af5c:	f000 ff58 	bl	800be10 <__mcmp>
 800af60:	2800      	cmp	r0, #0
 800af62:	dcb0      	bgt.n	800aec6 <_dtoa_r+0xa5e>
 800af64:	d102      	bne.n	800af6c <_dtoa_r+0xb04>
 800af66:	f018 0f01 	tst.w	r8, #1
 800af6a:	d1ac      	bne.n	800aec6 <_dtoa_r+0xa5e>
 800af6c:	4633      	mov	r3, r6
 800af6e:	461e      	mov	r6, r3
 800af70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af74:	2a30      	cmp	r2, #48	@ 0x30
 800af76:	d0fa      	beq.n	800af6e <_dtoa_r+0xb06>
 800af78:	e5c2      	b.n	800ab00 <_dtoa_r+0x698>
 800af7a:	459a      	cmp	sl, r3
 800af7c:	d1a4      	bne.n	800aec8 <_dtoa_r+0xa60>
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	3301      	adds	r3, #1
 800af82:	9304      	str	r3, [sp, #16]
 800af84:	2331      	movs	r3, #49	@ 0x31
 800af86:	f88a 3000 	strb.w	r3, [sl]
 800af8a:	e5b9      	b.n	800ab00 <_dtoa_r+0x698>
 800af8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800afec <_dtoa_r+0xb84>
 800af92:	b11b      	cbz	r3, 800af9c <_dtoa_r+0xb34>
 800af94:	f10a 0308 	add.w	r3, sl, #8
 800af98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	4650      	mov	r0, sl
 800af9e:	b019      	add	sp, #100	@ 0x64
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	f77f ae37 	ble.w	800ac1a <_dtoa_r+0x7b2>
 800afac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afae:	930a      	str	r3, [sp, #40]	@ 0x28
 800afb0:	2001      	movs	r0, #1
 800afb2:	e655      	b.n	800ac60 <_dtoa_r+0x7f8>
 800afb4:	9b00      	ldr	r3, [sp, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f77f aed6 	ble.w	800ad68 <_dtoa_r+0x900>
 800afbc:	4656      	mov	r6, sl
 800afbe:	4621      	mov	r1, r4
 800afc0:	4648      	mov	r0, r9
 800afc2:	f7ff f9c9 	bl	800a358 <quorem>
 800afc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afca:	f806 8b01 	strb.w	r8, [r6], #1
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	eba6 020a 	sub.w	r2, r6, sl
 800afd4:	4293      	cmp	r3, r2
 800afd6:	ddb3      	ble.n	800af40 <_dtoa_r+0xad8>
 800afd8:	4649      	mov	r1, r9
 800afda:	2300      	movs	r3, #0
 800afdc:	220a      	movs	r2, #10
 800afde:	4658      	mov	r0, fp
 800afe0:	f000 fcb4 	bl	800b94c <__multadd>
 800afe4:	4681      	mov	r9, r0
 800afe6:	e7ea      	b.n	800afbe <_dtoa_r+0xb56>
 800afe8:	0800de21 	.word	0x0800de21
 800afec:	0800dda5 	.word	0x0800dda5

0800aff0 <_free_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4605      	mov	r5, r0
 800aff4:	2900      	cmp	r1, #0
 800aff6:	d041      	beq.n	800b07c <_free_r+0x8c>
 800aff8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800affc:	1f0c      	subs	r4, r1, #4
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfb8      	it	lt
 800b002:	18e4      	addlt	r4, r4, r3
 800b004:	f000 fc34 	bl	800b870 <__malloc_lock>
 800b008:	4a1d      	ldr	r2, [pc, #116]	@ (800b080 <_free_r+0x90>)
 800b00a:	6813      	ldr	r3, [r2, #0]
 800b00c:	b933      	cbnz	r3, 800b01c <_free_r+0x2c>
 800b00e:	6063      	str	r3, [r4, #4]
 800b010:	6014      	str	r4, [r2, #0]
 800b012:	4628      	mov	r0, r5
 800b014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b018:	f000 bc30 	b.w	800b87c <__malloc_unlock>
 800b01c:	42a3      	cmp	r3, r4
 800b01e:	d908      	bls.n	800b032 <_free_r+0x42>
 800b020:	6820      	ldr	r0, [r4, #0]
 800b022:	1821      	adds	r1, r4, r0
 800b024:	428b      	cmp	r3, r1
 800b026:	bf01      	itttt	eq
 800b028:	6819      	ldreq	r1, [r3, #0]
 800b02a:	685b      	ldreq	r3, [r3, #4]
 800b02c:	1809      	addeq	r1, r1, r0
 800b02e:	6021      	streq	r1, [r4, #0]
 800b030:	e7ed      	b.n	800b00e <_free_r+0x1e>
 800b032:	461a      	mov	r2, r3
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	b10b      	cbz	r3, 800b03c <_free_r+0x4c>
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d9fa      	bls.n	800b032 <_free_r+0x42>
 800b03c:	6811      	ldr	r1, [r2, #0]
 800b03e:	1850      	adds	r0, r2, r1
 800b040:	42a0      	cmp	r0, r4
 800b042:	d10b      	bne.n	800b05c <_free_r+0x6c>
 800b044:	6820      	ldr	r0, [r4, #0]
 800b046:	4401      	add	r1, r0
 800b048:	1850      	adds	r0, r2, r1
 800b04a:	4283      	cmp	r3, r0
 800b04c:	6011      	str	r1, [r2, #0]
 800b04e:	d1e0      	bne.n	800b012 <_free_r+0x22>
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	6053      	str	r3, [r2, #4]
 800b056:	4408      	add	r0, r1
 800b058:	6010      	str	r0, [r2, #0]
 800b05a:	e7da      	b.n	800b012 <_free_r+0x22>
 800b05c:	d902      	bls.n	800b064 <_free_r+0x74>
 800b05e:	230c      	movs	r3, #12
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	e7d6      	b.n	800b012 <_free_r+0x22>
 800b064:	6820      	ldr	r0, [r4, #0]
 800b066:	1821      	adds	r1, r4, r0
 800b068:	428b      	cmp	r3, r1
 800b06a:	bf04      	itt	eq
 800b06c:	6819      	ldreq	r1, [r3, #0]
 800b06e:	685b      	ldreq	r3, [r3, #4]
 800b070:	6063      	str	r3, [r4, #4]
 800b072:	bf04      	itt	eq
 800b074:	1809      	addeq	r1, r1, r0
 800b076:	6021      	streq	r1, [r4, #0]
 800b078:	6054      	str	r4, [r2, #4]
 800b07a:	e7ca      	b.n	800b012 <_free_r+0x22>
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	20000bfc 	.word	0x20000bfc

0800b084 <rshift>:
 800b084:	6903      	ldr	r3, [r0, #16]
 800b086:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b08a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b08e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b092:	f100 0414 	add.w	r4, r0, #20
 800b096:	dd45      	ble.n	800b124 <rshift+0xa0>
 800b098:	f011 011f 	ands.w	r1, r1, #31
 800b09c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0a4:	d10c      	bne.n	800b0c0 <rshift+0x3c>
 800b0a6:	f100 0710 	add.w	r7, r0, #16
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	42b1      	cmp	r1, r6
 800b0ae:	d334      	bcc.n	800b11a <rshift+0x96>
 800b0b0:	1a9b      	subs	r3, r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	1eea      	subs	r2, r5, #3
 800b0b6:	4296      	cmp	r6, r2
 800b0b8:	bf38      	it	cc
 800b0ba:	2300      	movcc	r3, #0
 800b0bc:	4423      	add	r3, r4
 800b0be:	e015      	b.n	800b0ec <rshift+0x68>
 800b0c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0c4:	f1c1 0820 	rsb	r8, r1, #32
 800b0c8:	40cf      	lsrs	r7, r1
 800b0ca:	f105 0e04 	add.w	lr, r5, #4
 800b0ce:	46a1      	mov	r9, r4
 800b0d0:	4576      	cmp	r6, lr
 800b0d2:	46f4      	mov	ip, lr
 800b0d4:	d815      	bhi.n	800b102 <rshift+0x7e>
 800b0d6:	1a9a      	subs	r2, r3, r2
 800b0d8:	0092      	lsls	r2, r2, #2
 800b0da:	3a04      	subs	r2, #4
 800b0dc:	3501      	adds	r5, #1
 800b0de:	42ae      	cmp	r6, r5
 800b0e0:	bf38      	it	cc
 800b0e2:	2200      	movcc	r2, #0
 800b0e4:	18a3      	adds	r3, r4, r2
 800b0e6:	50a7      	str	r7, [r4, r2]
 800b0e8:	b107      	cbz	r7, 800b0ec <rshift+0x68>
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	1b1a      	subs	r2, r3, r4
 800b0ee:	42a3      	cmp	r3, r4
 800b0f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0f4:	bf08      	it	eq
 800b0f6:	2300      	moveq	r3, #0
 800b0f8:	6102      	str	r2, [r0, #16]
 800b0fa:	bf08      	it	eq
 800b0fc:	6143      	streq	r3, [r0, #20]
 800b0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b102:	f8dc c000 	ldr.w	ip, [ip]
 800b106:	fa0c fc08 	lsl.w	ip, ip, r8
 800b10a:	ea4c 0707 	orr.w	r7, ip, r7
 800b10e:	f849 7b04 	str.w	r7, [r9], #4
 800b112:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b116:	40cf      	lsrs	r7, r1
 800b118:	e7da      	b.n	800b0d0 <rshift+0x4c>
 800b11a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b11e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b122:	e7c3      	b.n	800b0ac <rshift+0x28>
 800b124:	4623      	mov	r3, r4
 800b126:	e7e1      	b.n	800b0ec <rshift+0x68>

0800b128 <__hexdig_fun>:
 800b128:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b12c:	2b09      	cmp	r3, #9
 800b12e:	d802      	bhi.n	800b136 <__hexdig_fun+0xe>
 800b130:	3820      	subs	r0, #32
 800b132:	b2c0      	uxtb	r0, r0
 800b134:	4770      	bx	lr
 800b136:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b13a:	2b05      	cmp	r3, #5
 800b13c:	d801      	bhi.n	800b142 <__hexdig_fun+0x1a>
 800b13e:	3847      	subs	r0, #71	@ 0x47
 800b140:	e7f7      	b.n	800b132 <__hexdig_fun+0xa>
 800b142:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b146:	2b05      	cmp	r3, #5
 800b148:	d801      	bhi.n	800b14e <__hexdig_fun+0x26>
 800b14a:	3827      	subs	r0, #39	@ 0x27
 800b14c:	e7f1      	b.n	800b132 <__hexdig_fun+0xa>
 800b14e:	2000      	movs	r0, #0
 800b150:	4770      	bx	lr
	...

0800b154 <__gethex>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	b085      	sub	sp, #20
 800b15a:	468a      	mov	sl, r1
 800b15c:	9302      	str	r3, [sp, #8]
 800b15e:	680b      	ldr	r3, [r1, #0]
 800b160:	9001      	str	r0, [sp, #4]
 800b162:	4690      	mov	r8, r2
 800b164:	1c9c      	adds	r4, r3, #2
 800b166:	46a1      	mov	r9, r4
 800b168:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b16c:	2830      	cmp	r0, #48	@ 0x30
 800b16e:	d0fa      	beq.n	800b166 <__gethex+0x12>
 800b170:	eba9 0303 	sub.w	r3, r9, r3
 800b174:	f1a3 0b02 	sub.w	fp, r3, #2
 800b178:	f7ff ffd6 	bl	800b128 <__hexdig_fun>
 800b17c:	4605      	mov	r5, r0
 800b17e:	2800      	cmp	r0, #0
 800b180:	d168      	bne.n	800b254 <__gethex+0x100>
 800b182:	49a0      	ldr	r1, [pc, #640]	@ (800b404 <__gethex+0x2b0>)
 800b184:	2201      	movs	r2, #1
 800b186:	4648      	mov	r0, r9
 800b188:	f7ff f82a 	bl	800a1e0 <strncmp>
 800b18c:	4607      	mov	r7, r0
 800b18e:	2800      	cmp	r0, #0
 800b190:	d167      	bne.n	800b262 <__gethex+0x10e>
 800b192:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b196:	4626      	mov	r6, r4
 800b198:	f7ff ffc6 	bl	800b128 <__hexdig_fun>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d062      	beq.n	800b266 <__gethex+0x112>
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	7818      	ldrb	r0, [r3, #0]
 800b1a4:	2830      	cmp	r0, #48	@ 0x30
 800b1a6:	4699      	mov	r9, r3
 800b1a8:	f103 0301 	add.w	r3, r3, #1
 800b1ac:	d0f9      	beq.n	800b1a2 <__gethex+0x4e>
 800b1ae:	f7ff ffbb 	bl	800b128 <__hexdig_fun>
 800b1b2:	fab0 f580 	clz	r5, r0
 800b1b6:	096d      	lsrs	r5, r5, #5
 800b1b8:	f04f 0b01 	mov.w	fp, #1
 800b1bc:	464a      	mov	r2, r9
 800b1be:	4616      	mov	r6, r2
 800b1c0:	3201      	adds	r2, #1
 800b1c2:	7830      	ldrb	r0, [r6, #0]
 800b1c4:	f7ff ffb0 	bl	800b128 <__hexdig_fun>
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d1f8      	bne.n	800b1be <__gethex+0x6a>
 800b1cc:	498d      	ldr	r1, [pc, #564]	@ (800b404 <__gethex+0x2b0>)
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7ff f805 	bl	800a1e0 <strncmp>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d13f      	bne.n	800b25a <__gethex+0x106>
 800b1da:	b944      	cbnz	r4, 800b1ee <__gethex+0x9a>
 800b1dc:	1c74      	adds	r4, r6, #1
 800b1de:	4622      	mov	r2, r4
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	3201      	adds	r2, #1
 800b1e4:	7830      	ldrb	r0, [r6, #0]
 800b1e6:	f7ff ff9f 	bl	800b128 <__hexdig_fun>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d1f8      	bne.n	800b1e0 <__gethex+0x8c>
 800b1ee:	1ba4      	subs	r4, r4, r6
 800b1f0:	00a7      	lsls	r7, r4, #2
 800b1f2:	7833      	ldrb	r3, [r6, #0]
 800b1f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b1f8:	2b50      	cmp	r3, #80	@ 0x50
 800b1fa:	d13e      	bne.n	800b27a <__gethex+0x126>
 800b1fc:	7873      	ldrb	r3, [r6, #1]
 800b1fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800b200:	d033      	beq.n	800b26a <__gethex+0x116>
 800b202:	2b2d      	cmp	r3, #45	@ 0x2d
 800b204:	d034      	beq.n	800b270 <__gethex+0x11c>
 800b206:	1c71      	adds	r1, r6, #1
 800b208:	2400      	movs	r4, #0
 800b20a:	7808      	ldrb	r0, [r1, #0]
 800b20c:	f7ff ff8c 	bl	800b128 <__hexdig_fun>
 800b210:	1e43      	subs	r3, r0, #1
 800b212:	b2db      	uxtb	r3, r3
 800b214:	2b18      	cmp	r3, #24
 800b216:	d830      	bhi.n	800b27a <__gethex+0x126>
 800b218:	f1a0 0210 	sub.w	r2, r0, #16
 800b21c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b220:	f7ff ff82 	bl	800b128 <__hexdig_fun>
 800b224:	f100 3cff 	add.w	ip, r0, #4294967295
 800b228:	fa5f fc8c 	uxtb.w	ip, ip
 800b22c:	f1bc 0f18 	cmp.w	ip, #24
 800b230:	f04f 030a 	mov.w	r3, #10
 800b234:	d91e      	bls.n	800b274 <__gethex+0x120>
 800b236:	b104      	cbz	r4, 800b23a <__gethex+0xe6>
 800b238:	4252      	negs	r2, r2
 800b23a:	4417      	add	r7, r2
 800b23c:	f8ca 1000 	str.w	r1, [sl]
 800b240:	b1ed      	cbz	r5, 800b27e <__gethex+0x12a>
 800b242:	f1bb 0f00 	cmp.w	fp, #0
 800b246:	bf0c      	ite	eq
 800b248:	2506      	moveq	r5, #6
 800b24a:	2500      	movne	r5, #0
 800b24c:	4628      	mov	r0, r5
 800b24e:	b005      	add	sp, #20
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	2500      	movs	r5, #0
 800b256:	462c      	mov	r4, r5
 800b258:	e7b0      	b.n	800b1bc <__gethex+0x68>
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d1c7      	bne.n	800b1ee <__gethex+0x9a>
 800b25e:	4627      	mov	r7, r4
 800b260:	e7c7      	b.n	800b1f2 <__gethex+0x9e>
 800b262:	464e      	mov	r6, r9
 800b264:	462f      	mov	r7, r5
 800b266:	2501      	movs	r5, #1
 800b268:	e7c3      	b.n	800b1f2 <__gethex+0x9e>
 800b26a:	2400      	movs	r4, #0
 800b26c:	1cb1      	adds	r1, r6, #2
 800b26e:	e7cc      	b.n	800b20a <__gethex+0xb6>
 800b270:	2401      	movs	r4, #1
 800b272:	e7fb      	b.n	800b26c <__gethex+0x118>
 800b274:	fb03 0002 	mla	r0, r3, r2, r0
 800b278:	e7ce      	b.n	800b218 <__gethex+0xc4>
 800b27a:	4631      	mov	r1, r6
 800b27c:	e7de      	b.n	800b23c <__gethex+0xe8>
 800b27e:	eba6 0309 	sub.w	r3, r6, r9
 800b282:	3b01      	subs	r3, #1
 800b284:	4629      	mov	r1, r5
 800b286:	2b07      	cmp	r3, #7
 800b288:	dc0a      	bgt.n	800b2a0 <__gethex+0x14c>
 800b28a:	9801      	ldr	r0, [sp, #4]
 800b28c:	f000 fafc 	bl	800b888 <_Balloc>
 800b290:	4604      	mov	r4, r0
 800b292:	b940      	cbnz	r0, 800b2a6 <__gethex+0x152>
 800b294:	4b5c      	ldr	r3, [pc, #368]	@ (800b408 <__gethex+0x2b4>)
 800b296:	4602      	mov	r2, r0
 800b298:	21e4      	movs	r1, #228	@ 0xe4
 800b29a:	485c      	ldr	r0, [pc, #368]	@ (800b40c <__gethex+0x2b8>)
 800b29c:	f001 f9e0 	bl	800c660 <__assert_func>
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	105b      	asrs	r3, r3, #1
 800b2a4:	e7ef      	b.n	800b286 <__gethex+0x132>
 800b2a6:	f100 0a14 	add.w	sl, r0, #20
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	4655      	mov	r5, sl
 800b2ae:	469b      	mov	fp, r3
 800b2b0:	45b1      	cmp	r9, r6
 800b2b2:	d337      	bcc.n	800b324 <__gethex+0x1d0>
 800b2b4:	f845 bb04 	str.w	fp, [r5], #4
 800b2b8:	eba5 050a 	sub.w	r5, r5, sl
 800b2bc:	10ad      	asrs	r5, r5, #2
 800b2be:	6125      	str	r5, [r4, #16]
 800b2c0:	4658      	mov	r0, fp
 800b2c2:	f000 fbd3 	bl	800ba6c <__hi0bits>
 800b2c6:	016d      	lsls	r5, r5, #5
 800b2c8:	f8d8 6000 	ldr.w	r6, [r8]
 800b2cc:	1a2d      	subs	r5, r5, r0
 800b2ce:	42b5      	cmp	r5, r6
 800b2d0:	dd54      	ble.n	800b37c <__gethex+0x228>
 800b2d2:	1bad      	subs	r5, r5, r6
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4620      	mov	r0, r4
 800b2d8:	f000 ff67 	bl	800c1aa <__any_on>
 800b2dc:	4681      	mov	r9, r0
 800b2de:	b178      	cbz	r0, 800b300 <__gethex+0x1ac>
 800b2e0:	1e6b      	subs	r3, r5, #1
 800b2e2:	1159      	asrs	r1, r3, #5
 800b2e4:	f003 021f 	and.w	r2, r3, #31
 800b2e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2ec:	f04f 0901 	mov.w	r9, #1
 800b2f0:	fa09 f202 	lsl.w	r2, r9, r2
 800b2f4:	420a      	tst	r2, r1
 800b2f6:	d003      	beq.n	800b300 <__gethex+0x1ac>
 800b2f8:	454b      	cmp	r3, r9
 800b2fa:	dc36      	bgt.n	800b36a <__gethex+0x216>
 800b2fc:	f04f 0902 	mov.w	r9, #2
 800b300:	4629      	mov	r1, r5
 800b302:	4620      	mov	r0, r4
 800b304:	f7ff febe 	bl	800b084 <rshift>
 800b308:	442f      	add	r7, r5
 800b30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b30e:	42bb      	cmp	r3, r7
 800b310:	da42      	bge.n	800b398 <__gethex+0x244>
 800b312:	9801      	ldr	r0, [sp, #4]
 800b314:	4621      	mov	r1, r4
 800b316:	f000 faf7 	bl	800b908 <_Bfree>
 800b31a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b31c:	2300      	movs	r3, #0
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	25a3      	movs	r5, #163	@ 0xa3
 800b322:	e793      	b.n	800b24c <__gethex+0xf8>
 800b324:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b328:	2a2e      	cmp	r2, #46	@ 0x2e
 800b32a:	d012      	beq.n	800b352 <__gethex+0x1fe>
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d104      	bne.n	800b33a <__gethex+0x1e6>
 800b330:	f845 bb04 	str.w	fp, [r5], #4
 800b334:	f04f 0b00 	mov.w	fp, #0
 800b338:	465b      	mov	r3, fp
 800b33a:	7830      	ldrb	r0, [r6, #0]
 800b33c:	9303      	str	r3, [sp, #12]
 800b33e:	f7ff fef3 	bl	800b128 <__hexdig_fun>
 800b342:	9b03      	ldr	r3, [sp, #12]
 800b344:	f000 000f 	and.w	r0, r0, #15
 800b348:	4098      	lsls	r0, r3
 800b34a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b34e:	3304      	adds	r3, #4
 800b350:	e7ae      	b.n	800b2b0 <__gethex+0x15c>
 800b352:	45b1      	cmp	r9, r6
 800b354:	d8ea      	bhi.n	800b32c <__gethex+0x1d8>
 800b356:	492b      	ldr	r1, [pc, #172]	@ (800b404 <__gethex+0x2b0>)
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	2201      	movs	r2, #1
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7fe ff3f 	bl	800a1e0 <strncmp>
 800b362:	9b03      	ldr	r3, [sp, #12]
 800b364:	2800      	cmp	r0, #0
 800b366:	d1e1      	bne.n	800b32c <__gethex+0x1d8>
 800b368:	e7a2      	b.n	800b2b0 <__gethex+0x15c>
 800b36a:	1ea9      	subs	r1, r5, #2
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 ff1c 	bl	800c1aa <__any_on>
 800b372:	2800      	cmp	r0, #0
 800b374:	d0c2      	beq.n	800b2fc <__gethex+0x1a8>
 800b376:	f04f 0903 	mov.w	r9, #3
 800b37a:	e7c1      	b.n	800b300 <__gethex+0x1ac>
 800b37c:	da09      	bge.n	800b392 <__gethex+0x23e>
 800b37e:	1b75      	subs	r5, r6, r5
 800b380:	4621      	mov	r1, r4
 800b382:	9801      	ldr	r0, [sp, #4]
 800b384:	462a      	mov	r2, r5
 800b386:	f000 fcd7 	bl	800bd38 <__lshift>
 800b38a:	1b7f      	subs	r7, r7, r5
 800b38c:	4604      	mov	r4, r0
 800b38e:	f100 0a14 	add.w	sl, r0, #20
 800b392:	f04f 0900 	mov.w	r9, #0
 800b396:	e7b8      	b.n	800b30a <__gethex+0x1b6>
 800b398:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b39c:	42bd      	cmp	r5, r7
 800b39e:	dd6f      	ble.n	800b480 <__gethex+0x32c>
 800b3a0:	1bed      	subs	r5, r5, r7
 800b3a2:	42ae      	cmp	r6, r5
 800b3a4:	dc34      	bgt.n	800b410 <__gethex+0x2bc>
 800b3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d022      	beq.n	800b3f4 <__gethex+0x2a0>
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d024      	beq.n	800b3fc <__gethex+0x2a8>
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d115      	bne.n	800b3e2 <__gethex+0x28e>
 800b3b6:	42ae      	cmp	r6, r5
 800b3b8:	d113      	bne.n	800b3e2 <__gethex+0x28e>
 800b3ba:	2e01      	cmp	r6, #1
 800b3bc:	d10b      	bne.n	800b3d6 <__gethex+0x282>
 800b3be:	9a02      	ldr	r2, [sp, #8]
 800b3c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	f8ca 3000 	str.w	r3, [sl]
 800b3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3d0:	2562      	movs	r5, #98	@ 0x62
 800b3d2:	601c      	str	r4, [r3, #0]
 800b3d4:	e73a      	b.n	800b24c <__gethex+0xf8>
 800b3d6:	1e71      	subs	r1, r6, #1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f000 fee6 	bl	800c1aa <__any_on>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d1ed      	bne.n	800b3be <__gethex+0x26a>
 800b3e2:	9801      	ldr	r0, [sp, #4]
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	f000 fa8f 	bl	800b908 <_Bfree>
 800b3ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	6013      	str	r3, [r2, #0]
 800b3f0:	2550      	movs	r5, #80	@ 0x50
 800b3f2:	e72b      	b.n	800b24c <__gethex+0xf8>
 800b3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1f3      	bne.n	800b3e2 <__gethex+0x28e>
 800b3fa:	e7e0      	b.n	800b3be <__gethex+0x26a>
 800b3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1dd      	bne.n	800b3be <__gethex+0x26a>
 800b402:	e7ee      	b.n	800b3e2 <__gethex+0x28e>
 800b404:	0800dc10 	.word	0x0800dc10
 800b408:	0800de21 	.word	0x0800de21
 800b40c:	0800de32 	.word	0x0800de32
 800b410:	1e6f      	subs	r7, r5, #1
 800b412:	f1b9 0f00 	cmp.w	r9, #0
 800b416:	d130      	bne.n	800b47a <__gethex+0x326>
 800b418:	b127      	cbz	r7, 800b424 <__gethex+0x2d0>
 800b41a:	4639      	mov	r1, r7
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fec4 	bl	800c1aa <__any_on>
 800b422:	4681      	mov	r9, r0
 800b424:	117a      	asrs	r2, r7, #5
 800b426:	2301      	movs	r3, #1
 800b428:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b42c:	f007 071f 	and.w	r7, r7, #31
 800b430:	40bb      	lsls	r3, r7
 800b432:	4213      	tst	r3, r2
 800b434:	4629      	mov	r1, r5
 800b436:	4620      	mov	r0, r4
 800b438:	bf18      	it	ne
 800b43a:	f049 0902 	orrne.w	r9, r9, #2
 800b43e:	f7ff fe21 	bl	800b084 <rshift>
 800b442:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b446:	1b76      	subs	r6, r6, r5
 800b448:	2502      	movs	r5, #2
 800b44a:	f1b9 0f00 	cmp.w	r9, #0
 800b44e:	d047      	beq.n	800b4e0 <__gethex+0x38c>
 800b450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d015      	beq.n	800b484 <__gethex+0x330>
 800b458:	2b03      	cmp	r3, #3
 800b45a:	d017      	beq.n	800b48c <__gethex+0x338>
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d109      	bne.n	800b474 <__gethex+0x320>
 800b460:	f019 0f02 	tst.w	r9, #2
 800b464:	d006      	beq.n	800b474 <__gethex+0x320>
 800b466:	f8da 3000 	ldr.w	r3, [sl]
 800b46a:	ea49 0903 	orr.w	r9, r9, r3
 800b46e:	f019 0f01 	tst.w	r9, #1
 800b472:	d10e      	bne.n	800b492 <__gethex+0x33e>
 800b474:	f045 0510 	orr.w	r5, r5, #16
 800b478:	e032      	b.n	800b4e0 <__gethex+0x38c>
 800b47a:	f04f 0901 	mov.w	r9, #1
 800b47e:	e7d1      	b.n	800b424 <__gethex+0x2d0>
 800b480:	2501      	movs	r5, #1
 800b482:	e7e2      	b.n	800b44a <__gethex+0x2f6>
 800b484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b486:	f1c3 0301 	rsb	r3, r3, #1
 800b48a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d0f0      	beq.n	800b474 <__gethex+0x320>
 800b492:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b496:	f104 0314 	add.w	r3, r4, #20
 800b49a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b49e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4a2:	f04f 0c00 	mov.w	ip, #0
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4b0:	d01b      	beq.n	800b4ea <__gethex+0x396>
 800b4b2:	3201      	adds	r2, #1
 800b4b4:	6002      	str	r2, [r0, #0]
 800b4b6:	2d02      	cmp	r5, #2
 800b4b8:	f104 0314 	add.w	r3, r4, #20
 800b4bc:	d13c      	bne.n	800b538 <__gethex+0x3e4>
 800b4be:	f8d8 2000 	ldr.w	r2, [r8]
 800b4c2:	3a01      	subs	r2, #1
 800b4c4:	42b2      	cmp	r2, r6
 800b4c6:	d109      	bne.n	800b4dc <__gethex+0x388>
 800b4c8:	1171      	asrs	r1, r6, #5
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4d0:	f006 061f 	and.w	r6, r6, #31
 800b4d4:	fa02 f606 	lsl.w	r6, r2, r6
 800b4d8:	421e      	tst	r6, r3
 800b4da:	d13a      	bne.n	800b552 <__gethex+0x3fe>
 800b4dc:	f045 0520 	orr.w	r5, r5, #32
 800b4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e2:	601c      	str	r4, [r3, #0]
 800b4e4:	9b02      	ldr	r3, [sp, #8]
 800b4e6:	601f      	str	r7, [r3, #0]
 800b4e8:	e6b0      	b.n	800b24c <__gethex+0xf8>
 800b4ea:	4299      	cmp	r1, r3
 800b4ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4f0:	d8d9      	bhi.n	800b4a6 <__gethex+0x352>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	459b      	cmp	fp, r3
 800b4f6:	db17      	blt.n	800b528 <__gethex+0x3d4>
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	9801      	ldr	r0, [sp, #4]
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	f000 f9c3 	bl	800b888 <_Balloc>
 800b502:	4681      	mov	r9, r0
 800b504:	b918      	cbnz	r0, 800b50e <__gethex+0x3ba>
 800b506:	4b1a      	ldr	r3, [pc, #104]	@ (800b570 <__gethex+0x41c>)
 800b508:	4602      	mov	r2, r0
 800b50a:	2184      	movs	r1, #132	@ 0x84
 800b50c:	e6c5      	b.n	800b29a <__gethex+0x146>
 800b50e:	6922      	ldr	r2, [r4, #16]
 800b510:	3202      	adds	r2, #2
 800b512:	f104 010c 	add.w	r1, r4, #12
 800b516:	0092      	lsls	r2, r2, #2
 800b518:	300c      	adds	r0, #12
 800b51a:	f7fe ff06 	bl	800a32a <memcpy>
 800b51e:	4621      	mov	r1, r4
 800b520:	9801      	ldr	r0, [sp, #4]
 800b522:	f000 f9f1 	bl	800b908 <_Bfree>
 800b526:	464c      	mov	r4, r9
 800b528:	6923      	ldr	r3, [r4, #16]
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b530:	6122      	str	r2, [r4, #16]
 800b532:	2201      	movs	r2, #1
 800b534:	615a      	str	r2, [r3, #20]
 800b536:	e7be      	b.n	800b4b6 <__gethex+0x362>
 800b538:	6922      	ldr	r2, [r4, #16]
 800b53a:	455a      	cmp	r2, fp
 800b53c:	dd0b      	ble.n	800b556 <__gethex+0x402>
 800b53e:	2101      	movs	r1, #1
 800b540:	4620      	mov	r0, r4
 800b542:	f7ff fd9f 	bl	800b084 <rshift>
 800b546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b54a:	3701      	adds	r7, #1
 800b54c:	42bb      	cmp	r3, r7
 800b54e:	f6ff aee0 	blt.w	800b312 <__gethex+0x1be>
 800b552:	2501      	movs	r5, #1
 800b554:	e7c2      	b.n	800b4dc <__gethex+0x388>
 800b556:	f016 061f 	ands.w	r6, r6, #31
 800b55a:	d0fa      	beq.n	800b552 <__gethex+0x3fe>
 800b55c:	4453      	add	r3, sl
 800b55e:	f1c6 0620 	rsb	r6, r6, #32
 800b562:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b566:	f000 fa81 	bl	800ba6c <__hi0bits>
 800b56a:	42b0      	cmp	r0, r6
 800b56c:	dbe7      	blt.n	800b53e <__gethex+0x3ea>
 800b56e:	e7f0      	b.n	800b552 <__gethex+0x3fe>
 800b570:	0800de21 	.word	0x0800de21

0800b574 <L_shift>:
 800b574:	f1c2 0208 	rsb	r2, r2, #8
 800b578:	0092      	lsls	r2, r2, #2
 800b57a:	b570      	push	{r4, r5, r6, lr}
 800b57c:	f1c2 0620 	rsb	r6, r2, #32
 800b580:	6843      	ldr	r3, [r0, #4]
 800b582:	6804      	ldr	r4, [r0, #0]
 800b584:	fa03 f506 	lsl.w	r5, r3, r6
 800b588:	432c      	orrs	r4, r5
 800b58a:	40d3      	lsrs	r3, r2
 800b58c:	6004      	str	r4, [r0, #0]
 800b58e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b592:	4288      	cmp	r0, r1
 800b594:	d3f4      	bcc.n	800b580 <L_shift+0xc>
 800b596:	bd70      	pop	{r4, r5, r6, pc}

0800b598 <__match>:
 800b598:	b530      	push	{r4, r5, lr}
 800b59a:	6803      	ldr	r3, [r0, #0]
 800b59c:	3301      	adds	r3, #1
 800b59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a2:	b914      	cbnz	r4, 800b5aa <__match+0x12>
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	bd30      	pop	{r4, r5, pc}
 800b5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b5b2:	2d19      	cmp	r5, #25
 800b5b4:	bf98      	it	ls
 800b5b6:	3220      	addls	r2, #32
 800b5b8:	42a2      	cmp	r2, r4
 800b5ba:	d0f0      	beq.n	800b59e <__match+0x6>
 800b5bc:	2000      	movs	r0, #0
 800b5be:	e7f3      	b.n	800b5a8 <__match+0x10>

0800b5c0 <__hexnan>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	680b      	ldr	r3, [r1, #0]
 800b5c6:	6801      	ldr	r1, [r0, #0]
 800b5c8:	115e      	asrs	r6, r3, #5
 800b5ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5ce:	f013 031f 	ands.w	r3, r3, #31
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	bf18      	it	ne
 800b5d6:	3604      	addne	r6, #4
 800b5d8:	2500      	movs	r5, #0
 800b5da:	1f37      	subs	r7, r6, #4
 800b5dc:	4682      	mov	sl, r0
 800b5de:	4690      	mov	r8, r2
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5e6:	46b9      	mov	r9, r7
 800b5e8:	463c      	mov	r4, r7
 800b5ea:	9502      	str	r5, [sp, #8]
 800b5ec:	46ab      	mov	fp, r5
 800b5ee:	784a      	ldrb	r2, [r1, #1]
 800b5f0:	1c4b      	adds	r3, r1, #1
 800b5f2:	9303      	str	r3, [sp, #12]
 800b5f4:	b342      	cbz	r2, 800b648 <__hexnan+0x88>
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	9105      	str	r1, [sp, #20]
 800b5fa:	9204      	str	r2, [sp, #16]
 800b5fc:	f7ff fd94 	bl	800b128 <__hexdig_fun>
 800b600:	2800      	cmp	r0, #0
 800b602:	d151      	bne.n	800b6a8 <__hexnan+0xe8>
 800b604:	9a04      	ldr	r2, [sp, #16]
 800b606:	9905      	ldr	r1, [sp, #20]
 800b608:	2a20      	cmp	r2, #32
 800b60a:	d818      	bhi.n	800b63e <__hexnan+0x7e>
 800b60c:	9b02      	ldr	r3, [sp, #8]
 800b60e:	459b      	cmp	fp, r3
 800b610:	dd13      	ble.n	800b63a <__hexnan+0x7a>
 800b612:	454c      	cmp	r4, r9
 800b614:	d206      	bcs.n	800b624 <__hexnan+0x64>
 800b616:	2d07      	cmp	r5, #7
 800b618:	dc04      	bgt.n	800b624 <__hexnan+0x64>
 800b61a:	462a      	mov	r2, r5
 800b61c:	4649      	mov	r1, r9
 800b61e:	4620      	mov	r0, r4
 800b620:	f7ff ffa8 	bl	800b574 <L_shift>
 800b624:	4544      	cmp	r4, r8
 800b626:	d952      	bls.n	800b6ce <__hexnan+0x10e>
 800b628:	2300      	movs	r3, #0
 800b62a:	f1a4 0904 	sub.w	r9, r4, #4
 800b62e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b632:	f8cd b008 	str.w	fp, [sp, #8]
 800b636:	464c      	mov	r4, r9
 800b638:	461d      	mov	r5, r3
 800b63a:	9903      	ldr	r1, [sp, #12]
 800b63c:	e7d7      	b.n	800b5ee <__hexnan+0x2e>
 800b63e:	2a29      	cmp	r2, #41	@ 0x29
 800b640:	d157      	bne.n	800b6f2 <__hexnan+0x132>
 800b642:	3102      	adds	r1, #2
 800b644:	f8ca 1000 	str.w	r1, [sl]
 800b648:	f1bb 0f00 	cmp.w	fp, #0
 800b64c:	d051      	beq.n	800b6f2 <__hexnan+0x132>
 800b64e:	454c      	cmp	r4, r9
 800b650:	d206      	bcs.n	800b660 <__hexnan+0xa0>
 800b652:	2d07      	cmp	r5, #7
 800b654:	dc04      	bgt.n	800b660 <__hexnan+0xa0>
 800b656:	462a      	mov	r2, r5
 800b658:	4649      	mov	r1, r9
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff ff8a 	bl	800b574 <L_shift>
 800b660:	4544      	cmp	r4, r8
 800b662:	d936      	bls.n	800b6d2 <__hexnan+0x112>
 800b664:	f1a8 0204 	sub.w	r2, r8, #4
 800b668:	4623      	mov	r3, r4
 800b66a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b66e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b672:	429f      	cmp	r7, r3
 800b674:	d2f9      	bcs.n	800b66a <__hexnan+0xaa>
 800b676:	1b3b      	subs	r3, r7, r4
 800b678:	f023 0303 	bic.w	r3, r3, #3
 800b67c:	3304      	adds	r3, #4
 800b67e:	3401      	adds	r4, #1
 800b680:	3e03      	subs	r6, #3
 800b682:	42b4      	cmp	r4, r6
 800b684:	bf88      	it	hi
 800b686:	2304      	movhi	r3, #4
 800b688:	4443      	add	r3, r8
 800b68a:	2200      	movs	r2, #0
 800b68c:	f843 2b04 	str.w	r2, [r3], #4
 800b690:	429f      	cmp	r7, r3
 800b692:	d2fb      	bcs.n	800b68c <__hexnan+0xcc>
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	b91b      	cbnz	r3, 800b6a0 <__hexnan+0xe0>
 800b698:	4547      	cmp	r7, r8
 800b69a:	d128      	bne.n	800b6ee <__hexnan+0x12e>
 800b69c:	2301      	movs	r3, #1
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	2005      	movs	r0, #5
 800b6a2:	b007      	add	sp, #28
 800b6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a8:	3501      	adds	r5, #1
 800b6aa:	2d08      	cmp	r5, #8
 800b6ac:	f10b 0b01 	add.w	fp, fp, #1
 800b6b0:	dd06      	ble.n	800b6c0 <__hexnan+0x100>
 800b6b2:	4544      	cmp	r4, r8
 800b6b4:	d9c1      	bls.n	800b63a <__hexnan+0x7a>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6bc:	2501      	movs	r5, #1
 800b6be:	3c04      	subs	r4, #4
 800b6c0:	6822      	ldr	r2, [r4, #0]
 800b6c2:	f000 000f 	and.w	r0, r0, #15
 800b6c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b6ca:	6020      	str	r0, [r4, #0]
 800b6cc:	e7b5      	b.n	800b63a <__hexnan+0x7a>
 800b6ce:	2508      	movs	r5, #8
 800b6d0:	e7b3      	b.n	800b63a <__hexnan+0x7a>
 800b6d2:	9b01      	ldr	r3, [sp, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0dd      	beq.n	800b694 <__hexnan+0xd4>
 800b6d8:	f1c3 0320 	rsb	r3, r3, #32
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e0:	40da      	lsrs	r2, r3
 800b6e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6ec:	e7d2      	b.n	800b694 <__hexnan+0xd4>
 800b6ee:	3f04      	subs	r7, #4
 800b6f0:	e7d0      	b.n	800b694 <__hexnan+0xd4>
 800b6f2:	2004      	movs	r0, #4
 800b6f4:	e7d5      	b.n	800b6a2 <__hexnan+0xe2>
	...

0800b6f8 <malloc>:
 800b6f8:	4b02      	ldr	r3, [pc, #8]	@ (800b704 <malloc+0xc>)
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	f000 b825 	b.w	800b74c <_malloc_r>
 800b702:	bf00      	nop
 800b704:	20000250 	.word	0x20000250

0800b708 <sbrk_aligned>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	4e0f      	ldr	r6, [pc, #60]	@ (800b748 <sbrk_aligned+0x40>)
 800b70c:	460c      	mov	r4, r1
 800b70e:	6831      	ldr	r1, [r6, #0]
 800b710:	4605      	mov	r5, r0
 800b712:	b911      	cbnz	r1, 800b71a <sbrk_aligned+0x12>
 800b714:	f000 ff94 	bl	800c640 <_sbrk_r>
 800b718:	6030      	str	r0, [r6, #0]
 800b71a:	4621      	mov	r1, r4
 800b71c:	4628      	mov	r0, r5
 800b71e:	f000 ff8f 	bl	800c640 <_sbrk_r>
 800b722:	1c43      	adds	r3, r0, #1
 800b724:	d103      	bne.n	800b72e <sbrk_aligned+0x26>
 800b726:	f04f 34ff 	mov.w	r4, #4294967295
 800b72a:	4620      	mov	r0, r4
 800b72c:	bd70      	pop	{r4, r5, r6, pc}
 800b72e:	1cc4      	adds	r4, r0, #3
 800b730:	f024 0403 	bic.w	r4, r4, #3
 800b734:	42a0      	cmp	r0, r4
 800b736:	d0f8      	beq.n	800b72a <sbrk_aligned+0x22>
 800b738:	1a21      	subs	r1, r4, r0
 800b73a:	4628      	mov	r0, r5
 800b73c:	f000 ff80 	bl	800c640 <_sbrk_r>
 800b740:	3001      	adds	r0, #1
 800b742:	d1f2      	bne.n	800b72a <sbrk_aligned+0x22>
 800b744:	e7ef      	b.n	800b726 <sbrk_aligned+0x1e>
 800b746:	bf00      	nop
 800b748:	20000bf8 	.word	0x20000bf8

0800b74c <_malloc_r>:
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b750:	1ccd      	adds	r5, r1, #3
 800b752:	f025 0503 	bic.w	r5, r5, #3
 800b756:	3508      	adds	r5, #8
 800b758:	2d0c      	cmp	r5, #12
 800b75a:	bf38      	it	cc
 800b75c:	250c      	movcc	r5, #12
 800b75e:	2d00      	cmp	r5, #0
 800b760:	4606      	mov	r6, r0
 800b762:	db01      	blt.n	800b768 <_malloc_r+0x1c>
 800b764:	42a9      	cmp	r1, r5
 800b766:	d904      	bls.n	800b772 <_malloc_r+0x26>
 800b768:	230c      	movs	r3, #12
 800b76a:	6033      	str	r3, [r6, #0]
 800b76c:	2000      	movs	r0, #0
 800b76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b772:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b848 <_malloc_r+0xfc>
 800b776:	f000 f87b 	bl	800b870 <__malloc_lock>
 800b77a:	f8d8 3000 	ldr.w	r3, [r8]
 800b77e:	461c      	mov	r4, r3
 800b780:	bb44      	cbnz	r4, 800b7d4 <_malloc_r+0x88>
 800b782:	4629      	mov	r1, r5
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff ffbf 	bl	800b708 <sbrk_aligned>
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	4604      	mov	r4, r0
 800b78e:	d158      	bne.n	800b842 <_malloc_r+0xf6>
 800b790:	f8d8 4000 	ldr.w	r4, [r8]
 800b794:	4627      	mov	r7, r4
 800b796:	2f00      	cmp	r7, #0
 800b798:	d143      	bne.n	800b822 <_malloc_r+0xd6>
 800b79a:	2c00      	cmp	r4, #0
 800b79c:	d04b      	beq.n	800b836 <_malloc_r+0xea>
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	eb04 0903 	add.w	r9, r4, r3
 800b7a8:	f000 ff4a 	bl	800c640 <_sbrk_r>
 800b7ac:	4581      	cmp	r9, r0
 800b7ae:	d142      	bne.n	800b836 <_malloc_r+0xea>
 800b7b0:	6821      	ldr	r1, [r4, #0]
 800b7b2:	1a6d      	subs	r5, r5, r1
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7ff ffa6 	bl	800b708 <sbrk_aligned>
 800b7bc:	3001      	adds	r0, #1
 800b7be:	d03a      	beq.n	800b836 <_malloc_r+0xea>
 800b7c0:	6823      	ldr	r3, [r4, #0]
 800b7c2:	442b      	add	r3, r5
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	bb62      	cbnz	r2, 800b828 <_malloc_r+0xdc>
 800b7ce:	f8c8 7000 	str.w	r7, [r8]
 800b7d2:	e00f      	b.n	800b7f4 <_malloc_r+0xa8>
 800b7d4:	6822      	ldr	r2, [r4, #0]
 800b7d6:	1b52      	subs	r2, r2, r5
 800b7d8:	d420      	bmi.n	800b81c <_malloc_r+0xd0>
 800b7da:	2a0b      	cmp	r2, #11
 800b7dc:	d917      	bls.n	800b80e <_malloc_r+0xc2>
 800b7de:	1961      	adds	r1, r4, r5
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	6025      	str	r5, [r4, #0]
 800b7e4:	bf18      	it	ne
 800b7e6:	6059      	strne	r1, [r3, #4]
 800b7e8:	6863      	ldr	r3, [r4, #4]
 800b7ea:	bf08      	it	eq
 800b7ec:	f8c8 1000 	streq.w	r1, [r8]
 800b7f0:	5162      	str	r2, [r4, r5]
 800b7f2:	604b      	str	r3, [r1, #4]
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f000 f841 	bl	800b87c <__malloc_unlock>
 800b7fa:	f104 000b 	add.w	r0, r4, #11
 800b7fe:	1d23      	adds	r3, r4, #4
 800b800:	f020 0007 	bic.w	r0, r0, #7
 800b804:	1ac2      	subs	r2, r0, r3
 800b806:	bf1c      	itt	ne
 800b808:	1a1b      	subne	r3, r3, r0
 800b80a:	50a3      	strne	r3, [r4, r2]
 800b80c:	e7af      	b.n	800b76e <_malloc_r+0x22>
 800b80e:	6862      	ldr	r2, [r4, #4]
 800b810:	42a3      	cmp	r3, r4
 800b812:	bf0c      	ite	eq
 800b814:	f8c8 2000 	streq.w	r2, [r8]
 800b818:	605a      	strne	r2, [r3, #4]
 800b81a:	e7eb      	b.n	800b7f4 <_malloc_r+0xa8>
 800b81c:	4623      	mov	r3, r4
 800b81e:	6864      	ldr	r4, [r4, #4]
 800b820:	e7ae      	b.n	800b780 <_malloc_r+0x34>
 800b822:	463c      	mov	r4, r7
 800b824:	687f      	ldr	r7, [r7, #4]
 800b826:	e7b6      	b.n	800b796 <_malloc_r+0x4a>
 800b828:	461a      	mov	r2, r3
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	d1fb      	bne.n	800b828 <_malloc_r+0xdc>
 800b830:	2300      	movs	r3, #0
 800b832:	6053      	str	r3, [r2, #4]
 800b834:	e7de      	b.n	800b7f4 <_malloc_r+0xa8>
 800b836:	230c      	movs	r3, #12
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 f81e 	bl	800b87c <__malloc_unlock>
 800b840:	e794      	b.n	800b76c <_malloc_r+0x20>
 800b842:	6005      	str	r5, [r0, #0]
 800b844:	e7d6      	b.n	800b7f4 <_malloc_r+0xa8>
 800b846:	bf00      	nop
 800b848:	20000bfc 	.word	0x20000bfc

0800b84c <__ascii_mbtowc>:
 800b84c:	b082      	sub	sp, #8
 800b84e:	b901      	cbnz	r1, 800b852 <__ascii_mbtowc+0x6>
 800b850:	a901      	add	r1, sp, #4
 800b852:	b142      	cbz	r2, 800b866 <__ascii_mbtowc+0x1a>
 800b854:	b14b      	cbz	r3, 800b86a <__ascii_mbtowc+0x1e>
 800b856:	7813      	ldrb	r3, [r2, #0]
 800b858:	600b      	str	r3, [r1, #0]
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	1e10      	subs	r0, r2, #0
 800b85e:	bf18      	it	ne
 800b860:	2001      	movne	r0, #1
 800b862:	b002      	add	sp, #8
 800b864:	4770      	bx	lr
 800b866:	4610      	mov	r0, r2
 800b868:	e7fb      	b.n	800b862 <__ascii_mbtowc+0x16>
 800b86a:	f06f 0001 	mvn.w	r0, #1
 800b86e:	e7f8      	b.n	800b862 <__ascii_mbtowc+0x16>

0800b870 <__malloc_lock>:
 800b870:	4801      	ldr	r0, [pc, #4]	@ (800b878 <__malloc_lock+0x8>)
 800b872:	f7fe bd50 	b.w	800a316 <__retarget_lock_acquire_recursive>
 800b876:	bf00      	nop
 800b878:	20000bf4 	.word	0x20000bf4

0800b87c <__malloc_unlock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	@ (800b884 <__malloc_unlock+0x8>)
 800b87e:	f7fe bd4b 	b.w	800a318 <__retarget_lock_release_recursive>
 800b882:	bf00      	nop
 800b884:	20000bf4 	.word	0x20000bf4

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	69c6      	ldr	r6, [r0, #28]
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7ff ff30 	bl	800b6f8 <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	61e0      	str	r0, [r4, #28]
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	@ (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	@ (800b904 <_Balloc+0x7c>)
 800b8a2:	216b      	movs	r1, #107	@ 0x6b
 800b8a4:	f000 fedc 	bl	800c660 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	69e6      	ldr	r6, [r4, #28]
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	69e3      	ldr	r3, [r4, #28]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fee6 	bl	800c69c <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	@ 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fedd 	bl	800c69c <_calloc_r>
 800b8e2:	69e3      	ldr	r3, [r4, #28]
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0800ddb2 	.word	0x0800ddb2
 800b904:	0800de92 	.word	0x0800de92

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	69c6      	ldr	r6, [r0, #28]
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7ff fef0 	bl	800b6f8 <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	61e8      	str	r0, [r5, #28]
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <_Bfree+0x40>)
 800b922:	218f      	movs	r1, #143	@ 0x8f
 800b924:	f000 fe9c 	bl	800c660 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	69eb      	ldr	r3, [r5, #28]
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0800ddb2 	.word	0x0800ddb2
 800b948:	0800de92 	.word	0x0800de92

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <__multadd+0x88>)
 800b9a0:	21ba      	movs	r1, #186	@ 0xba
 800b9a2:	f000 fe5d 	bl	800c660 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f7fe fcba 	bl	800a32a <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0800de21 	.word	0x0800de21
 800b9d4:	0800de92 	.word	0x0800de92

0800b9d8 <__s2b>:
 800b9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	460c      	mov	r4, r1
 800b9de:	4615      	mov	r5, r2
 800b9e0:	461f      	mov	r7, r3
 800b9e2:	2209      	movs	r2, #9
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db09      	blt.n	800ba08 <__s2b+0x30>
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	f7ff ff47 	bl	800b888 <_Balloc>
 800b9fa:	b940      	cbnz	r0, 800ba0e <__s2b+0x36>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	4b19      	ldr	r3, [pc, #100]	@ (800ba64 <__s2b+0x8c>)
 800ba00:	4819      	ldr	r0, [pc, #100]	@ (800ba68 <__s2b+0x90>)
 800ba02:	21d3      	movs	r1, #211	@ 0xd3
 800ba04:	f000 fe2c 	bl	800c660 <__assert_func>
 800ba08:	0052      	lsls	r2, r2, #1
 800ba0a:	3101      	adds	r1, #1
 800ba0c:	e7f0      	b.n	800b9f0 <__s2b+0x18>
 800ba0e:	9b08      	ldr	r3, [sp, #32]
 800ba10:	6143      	str	r3, [r0, #20]
 800ba12:	2d09      	cmp	r5, #9
 800ba14:	f04f 0301 	mov.w	r3, #1
 800ba18:	6103      	str	r3, [r0, #16]
 800ba1a:	dd16      	ble.n	800ba4a <__s2b+0x72>
 800ba1c:	f104 0909 	add.w	r9, r4, #9
 800ba20:	46c8      	mov	r8, r9
 800ba22:	442c      	add	r4, r5
 800ba24:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba28:	4601      	mov	r1, r0
 800ba2a:	3b30      	subs	r3, #48	@ 0x30
 800ba2c:	220a      	movs	r2, #10
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f7ff ff8c 	bl	800b94c <__multadd>
 800ba34:	45a0      	cmp	r8, r4
 800ba36:	d1f5      	bne.n	800ba24 <__s2b+0x4c>
 800ba38:	f1a5 0408 	sub.w	r4, r5, #8
 800ba3c:	444c      	add	r4, r9
 800ba3e:	1b2d      	subs	r5, r5, r4
 800ba40:	1963      	adds	r3, r4, r5
 800ba42:	42bb      	cmp	r3, r7
 800ba44:	db04      	blt.n	800ba50 <__s2b+0x78>
 800ba46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4a:	340a      	adds	r4, #10
 800ba4c:	2509      	movs	r5, #9
 800ba4e:	e7f6      	b.n	800ba3e <__s2b+0x66>
 800ba50:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba54:	4601      	mov	r1, r0
 800ba56:	3b30      	subs	r3, #48	@ 0x30
 800ba58:	220a      	movs	r2, #10
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7ff ff76 	bl	800b94c <__multadd>
 800ba60:	e7ee      	b.n	800ba40 <__s2b+0x68>
 800ba62:	bf00      	nop
 800ba64:	0800de21 	.word	0x0800de21
 800ba68:	0800de92 	.word	0x0800de92

0800ba6c <__hi0bits>:
 800ba6c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba70:	4603      	mov	r3, r0
 800ba72:	bf36      	itet	cc
 800ba74:	0403      	lslcc	r3, r0, #16
 800ba76:	2000      	movcs	r0, #0
 800ba78:	2010      	movcc	r0, #16
 800ba7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba7e:	bf3c      	itt	cc
 800ba80:	021b      	lslcc	r3, r3, #8
 800ba82:	3008      	addcc	r0, #8
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba88:	bf3c      	itt	cc
 800ba8a:	011b      	lslcc	r3, r3, #4
 800ba8c:	3004      	addcc	r0, #4
 800ba8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba92:	bf3c      	itt	cc
 800ba94:	009b      	lslcc	r3, r3, #2
 800ba96:	3002      	addcc	r0, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	db05      	blt.n	800baa8 <__hi0bits+0x3c>
 800ba9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800baa0:	f100 0001 	add.w	r0, r0, #1
 800baa4:	bf08      	it	eq
 800baa6:	2020      	moveq	r0, #32
 800baa8:	4770      	bx	lr

0800baaa <__lo0bits>:
 800baaa:	6803      	ldr	r3, [r0, #0]
 800baac:	4602      	mov	r2, r0
 800baae:	f013 0007 	ands.w	r0, r3, #7
 800bab2:	d00b      	beq.n	800bacc <__lo0bits+0x22>
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d421      	bmi.n	800bafc <__lo0bits+0x52>
 800bab8:	0798      	lsls	r0, r3, #30
 800baba:	bf49      	itett	mi
 800babc:	085b      	lsrmi	r3, r3, #1
 800babe:	089b      	lsrpl	r3, r3, #2
 800bac0:	2001      	movmi	r0, #1
 800bac2:	6013      	strmi	r3, [r2, #0]
 800bac4:	bf5c      	itt	pl
 800bac6:	6013      	strpl	r3, [r2, #0]
 800bac8:	2002      	movpl	r0, #2
 800baca:	4770      	bx	lr
 800bacc:	b299      	uxth	r1, r3
 800bace:	b909      	cbnz	r1, 800bad4 <__lo0bits+0x2a>
 800bad0:	0c1b      	lsrs	r3, r3, #16
 800bad2:	2010      	movs	r0, #16
 800bad4:	b2d9      	uxtb	r1, r3
 800bad6:	b909      	cbnz	r1, 800badc <__lo0bits+0x32>
 800bad8:	3008      	adds	r0, #8
 800bada:	0a1b      	lsrs	r3, r3, #8
 800badc:	0719      	lsls	r1, r3, #28
 800bade:	bf04      	itt	eq
 800bae0:	091b      	lsreq	r3, r3, #4
 800bae2:	3004      	addeq	r0, #4
 800bae4:	0799      	lsls	r1, r3, #30
 800bae6:	bf04      	itt	eq
 800bae8:	089b      	lsreq	r3, r3, #2
 800baea:	3002      	addeq	r0, #2
 800baec:	07d9      	lsls	r1, r3, #31
 800baee:	d403      	bmi.n	800baf8 <__lo0bits+0x4e>
 800baf0:	085b      	lsrs	r3, r3, #1
 800baf2:	f100 0001 	add.w	r0, r0, #1
 800baf6:	d003      	beq.n	800bb00 <__lo0bits+0x56>
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	4770      	bx	lr
 800bafc:	2000      	movs	r0, #0
 800bafe:	4770      	bx	lr
 800bb00:	2020      	movs	r0, #32
 800bb02:	4770      	bx	lr

0800bb04 <__i2b>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	460c      	mov	r4, r1
 800bb08:	2101      	movs	r1, #1
 800bb0a:	f7ff febd 	bl	800b888 <_Balloc>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	b928      	cbnz	r0, 800bb1e <__i2b+0x1a>
 800bb12:	4b05      	ldr	r3, [pc, #20]	@ (800bb28 <__i2b+0x24>)
 800bb14:	4805      	ldr	r0, [pc, #20]	@ (800bb2c <__i2b+0x28>)
 800bb16:	f240 1145 	movw	r1, #325	@ 0x145
 800bb1a:	f000 fda1 	bl	800c660 <__assert_func>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	6144      	str	r4, [r0, #20]
 800bb22:	6103      	str	r3, [r0, #16]
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	bf00      	nop
 800bb28:	0800de21 	.word	0x0800de21
 800bb2c:	0800de92 	.word	0x0800de92

0800bb30 <__multiply>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	4614      	mov	r4, r2
 800bb36:	690a      	ldr	r2, [r1, #16]
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bfa8      	it	ge
 800bb3e:	4623      	movge	r3, r4
 800bb40:	460f      	mov	r7, r1
 800bb42:	bfa4      	itt	ge
 800bb44:	460c      	movge	r4, r1
 800bb46:	461f      	movge	r7, r3
 800bb48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb50:	68a3      	ldr	r3, [r4, #8]
 800bb52:	6861      	ldr	r1, [r4, #4]
 800bb54:	eb0a 0609 	add.w	r6, sl, r9
 800bb58:	42b3      	cmp	r3, r6
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	bfb8      	it	lt
 800bb5e:	3101      	addlt	r1, #1
 800bb60:	f7ff fe92 	bl	800b888 <_Balloc>
 800bb64:	b930      	cbnz	r0, 800bb74 <__multiply+0x44>
 800bb66:	4602      	mov	r2, r0
 800bb68:	4b44      	ldr	r3, [pc, #272]	@ (800bc7c <__multiply+0x14c>)
 800bb6a:	4845      	ldr	r0, [pc, #276]	@ (800bc80 <__multiply+0x150>)
 800bb6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb70:	f000 fd76 	bl	800c660 <__assert_func>
 800bb74:	f100 0514 	add.w	r5, r0, #20
 800bb78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4543      	cmp	r3, r8
 800bb82:	d321      	bcc.n	800bbc8 <__multiply+0x98>
 800bb84:	f107 0114 	add.w	r1, r7, #20
 800bb88:	f104 0214 	add.w	r2, r4, #20
 800bb8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb94:	9302      	str	r3, [sp, #8]
 800bb96:	1b13      	subs	r3, r2, r4
 800bb98:	3b15      	subs	r3, #21
 800bb9a:	f023 0303 	bic.w	r3, r3, #3
 800bb9e:	3304      	adds	r3, #4
 800bba0:	f104 0715 	add.w	r7, r4, #21
 800bba4:	42ba      	cmp	r2, r7
 800bba6:	bf38      	it	cc
 800bba8:	2304      	movcc	r3, #4
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	9103      	str	r1, [sp, #12]
 800bbb0:	428b      	cmp	r3, r1
 800bbb2:	d80c      	bhi.n	800bbce <__multiply+0x9e>
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	dd03      	ble.n	800bbc0 <__multiply+0x90>
 800bbb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d05b      	beq.n	800bc78 <__multiply+0x148>
 800bbc0:	6106      	str	r6, [r0, #16]
 800bbc2:	b005      	add	sp, #20
 800bbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc8:	f843 2b04 	str.w	r2, [r3], #4
 800bbcc:	e7d8      	b.n	800bb80 <__multiply+0x50>
 800bbce:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbd2:	f1ba 0f00 	cmp.w	sl, #0
 800bbd6:	d024      	beq.n	800bc22 <__multiply+0xf2>
 800bbd8:	f104 0e14 	add.w	lr, r4, #20
 800bbdc:	46a9      	mov	r9, r5
 800bbde:	f04f 0c00 	mov.w	ip, #0
 800bbe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbe6:	f8d9 3000 	ldr.w	r3, [r9]
 800bbea:	fa1f fb87 	uxth.w	fp, r7
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bbf8:	f8d9 7000 	ldr.w	r7, [r9]
 800bbfc:	4463      	add	r3, ip
 800bbfe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc02:	fb0a c70b 	mla	r7, sl, fp, ip
 800bc06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc10:	4572      	cmp	r2, lr
 800bc12:	f849 3b04 	str.w	r3, [r9], #4
 800bc16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc1a:	d8e2      	bhi.n	800bbe2 <__multiply+0xb2>
 800bc1c:	9b01      	ldr	r3, [sp, #4]
 800bc1e:	f845 c003 	str.w	ip, [r5, r3]
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc28:	3104      	adds	r1, #4
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	d021      	beq.n	800bc74 <__multiply+0x144>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	f104 0c14 	add.w	ip, r4, #20
 800bc36:	46ae      	mov	lr, r5
 800bc38:	f04f 0a00 	mov.w	sl, #0
 800bc3c:	f8bc b000 	ldrh.w	fp, [ip]
 800bc40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc44:	fb09 770b 	mla	r7, r9, fp, r7
 800bc48:	4457      	add	r7, sl
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc50:	f84e 3b04 	str.w	r3, [lr], #4
 800bc54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc5c:	f8be 3000 	ldrh.w	r3, [lr]
 800bc60:	fb09 330a 	mla	r3, r9, sl, r3
 800bc64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc68:	4562      	cmp	r2, ip
 800bc6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc6e:	d8e5      	bhi.n	800bc3c <__multiply+0x10c>
 800bc70:	9f01      	ldr	r7, [sp, #4]
 800bc72:	51eb      	str	r3, [r5, r7]
 800bc74:	3504      	adds	r5, #4
 800bc76:	e799      	b.n	800bbac <__multiply+0x7c>
 800bc78:	3e01      	subs	r6, #1
 800bc7a:	e79b      	b.n	800bbb4 <__multiply+0x84>
 800bc7c:	0800de21 	.word	0x0800de21
 800bc80:	0800de92 	.word	0x0800de92

0800bc84 <__pow5mult>:
 800bc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc88:	4615      	mov	r5, r2
 800bc8a:	f012 0203 	ands.w	r2, r2, #3
 800bc8e:	4607      	mov	r7, r0
 800bc90:	460e      	mov	r6, r1
 800bc92:	d007      	beq.n	800bca4 <__pow5mult+0x20>
 800bc94:	4c25      	ldr	r4, [pc, #148]	@ (800bd2c <__pow5mult+0xa8>)
 800bc96:	3a01      	subs	r2, #1
 800bc98:	2300      	movs	r3, #0
 800bc9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc9e:	f7ff fe55 	bl	800b94c <__multadd>
 800bca2:	4606      	mov	r6, r0
 800bca4:	10ad      	asrs	r5, r5, #2
 800bca6:	d03d      	beq.n	800bd24 <__pow5mult+0xa0>
 800bca8:	69fc      	ldr	r4, [r7, #28]
 800bcaa:	b97c      	cbnz	r4, 800bccc <__pow5mult+0x48>
 800bcac:	2010      	movs	r0, #16
 800bcae:	f7ff fd23 	bl	800b6f8 <malloc>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	61f8      	str	r0, [r7, #28]
 800bcb6:	b928      	cbnz	r0, 800bcc4 <__pow5mult+0x40>
 800bcb8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd30 <__pow5mult+0xac>)
 800bcba:	481e      	ldr	r0, [pc, #120]	@ (800bd34 <__pow5mult+0xb0>)
 800bcbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcc0:	f000 fcce 	bl	800c660 <__assert_func>
 800bcc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcc8:	6004      	str	r4, [r0, #0]
 800bcca:	60c4      	str	r4, [r0, #12]
 800bccc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcd4:	b94c      	cbnz	r4, 800bcea <__pow5mult+0x66>
 800bcd6:	f240 2171 	movw	r1, #625	@ 0x271
 800bcda:	4638      	mov	r0, r7
 800bcdc:	f7ff ff12 	bl	800bb04 <__i2b>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bce6:	4604      	mov	r4, r0
 800bce8:	6003      	str	r3, [r0, #0]
 800bcea:	f04f 0900 	mov.w	r9, #0
 800bcee:	07eb      	lsls	r3, r5, #31
 800bcf0:	d50a      	bpl.n	800bd08 <__pow5mult+0x84>
 800bcf2:	4631      	mov	r1, r6
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f7ff ff1a 	bl	800bb30 <__multiply>
 800bcfc:	4631      	mov	r1, r6
 800bcfe:	4680      	mov	r8, r0
 800bd00:	4638      	mov	r0, r7
 800bd02:	f7ff fe01 	bl	800b908 <_Bfree>
 800bd06:	4646      	mov	r6, r8
 800bd08:	106d      	asrs	r5, r5, #1
 800bd0a:	d00b      	beq.n	800bd24 <__pow5mult+0xa0>
 800bd0c:	6820      	ldr	r0, [r4, #0]
 800bd0e:	b938      	cbnz	r0, 800bd20 <__pow5mult+0x9c>
 800bd10:	4622      	mov	r2, r4
 800bd12:	4621      	mov	r1, r4
 800bd14:	4638      	mov	r0, r7
 800bd16:	f7ff ff0b 	bl	800bb30 <__multiply>
 800bd1a:	6020      	str	r0, [r4, #0]
 800bd1c:	f8c0 9000 	str.w	r9, [r0]
 800bd20:	4604      	mov	r4, r0
 800bd22:	e7e4      	b.n	800bcee <__pow5mult+0x6a>
 800bd24:	4630      	mov	r0, r6
 800bd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800deec 	.word	0x0800deec
 800bd30:	0800ddb2 	.word	0x0800ddb2
 800bd34:	0800de92 	.word	0x0800de92

0800bd38 <__lshift>:
 800bd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	6849      	ldr	r1, [r1, #4]
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd46:	68a3      	ldr	r3, [r4, #8]
 800bd48:	4607      	mov	r7, r0
 800bd4a:	4691      	mov	r9, r2
 800bd4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd50:	f108 0601 	add.w	r6, r8, #1
 800bd54:	42b3      	cmp	r3, r6
 800bd56:	db0b      	blt.n	800bd70 <__lshift+0x38>
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f7ff fd95 	bl	800b888 <_Balloc>
 800bd5e:	4605      	mov	r5, r0
 800bd60:	b948      	cbnz	r0, 800bd76 <__lshift+0x3e>
 800bd62:	4602      	mov	r2, r0
 800bd64:	4b28      	ldr	r3, [pc, #160]	@ (800be08 <__lshift+0xd0>)
 800bd66:	4829      	ldr	r0, [pc, #164]	@ (800be0c <__lshift+0xd4>)
 800bd68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd6c:	f000 fc78 	bl	800c660 <__assert_func>
 800bd70:	3101      	adds	r1, #1
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	e7ee      	b.n	800bd54 <__lshift+0x1c>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f100 0114 	add.w	r1, r0, #20
 800bd7c:	f100 0210 	add.w	r2, r0, #16
 800bd80:	4618      	mov	r0, r3
 800bd82:	4553      	cmp	r3, sl
 800bd84:	db33      	blt.n	800bdee <__lshift+0xb6>
 800bd86:	6920      	ldr	r0, [r4, #16]
 800bd88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd8c:	f104 0314 	add.w	r3, r4, #20
 800bd90:	f019 091f 	ands.w	r9, r9, #31
 800bd94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd9c:	d02b      	beq.n	800bdf6 <__lshift+0xbe>
 800bd9e:	f1c9 0e20 	rsb	lr, r9, #32
 800bda2:	468a      	mov	sl, r1
 800bda4:	2200      	movs	r2, #0
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	fa00 f009 	lsl.w	r0, r0, r9
 800bdac:	4310      	orrs	r0, r2
 800bdae:	f84a 0b04 	str.w	r0, [sl], #4
 800bdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb6:	459c      	cmp	ip, r3
 800bdb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdbc:	d8f3      	bhi.n	800bda6 <__lshift+0x6e>
 800bdbe:	ebac 0304 	sub.w	r3, ip, r4
 800bdc2:	3b15      	subs	r3, #21
 800bdc4:	f023 0303 	bic.w	r3, r3, #3
 800bdc8:	3304      	adds	r3, #4
 800bdca:	f104 0015 	add.w	r0, r4, #21
 800bdce:	4584      	cmp	ip, r0
 800bdd0:	bf38      	it	cc
 800bdd2:	2304      	movcc	r3, #4
 800bdd4:	50ca      	str	r2, [r1, r3]
 800bdd6:	b10a      	cbz	r2, 800bddc <__lshift+0xa4>
 800bdd8:	f108 0602 	add.w	r6, r8, #2
 800bddc:	3e01      	subs	r6, #1
 800bdde:	4638      	mov	r0, r7
 800bde0:	612e      	str	r6, [r5, #16]
 800bde2:	4621      	mov	r1, r4
 800bde4:	f7ff fd90 	bl	800b908 <_Bfree>
 800bde8:	4628      	mov	r0, r5
 800bdea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdee:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	e7c5      	b.n	800bd82 <__lshift+0x4a>
 800bdf6:	3904      	subs	r1, #4
 800bdf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800be00:	459c      	cmp	ip, r3
 800be02:	d8f9      	bhi.n	800bdf8 <__lshift+0xc0>
 800be04:	e7ea      	b.n	800bddc <__lshift+0xa4>
 800be06:	bf00      	nop
 800be08:	0800de21 	.word	0x0800de21
 800be0c:	0800de92 	.word	0x0800de92

0800be10 <__mcmp>:
 800be10:	690a      	ldr	r2, [r1, #16]
 800be12:	4603      	mov	r3, r0
 800be14:	6900      	ldr	r0, [r0, #16]
 800be16:	1a80      	subs	r0, r0, r2
 800be18:	b530      	push	{r4, r5, lr}
 800be1a:	d10e      	bne.n	800be3a <__mcmp+0x2a>
 800be1c:	3314      	adds	r3, #20
 800be1e:	3114      	adds	r1, #20
 800be20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be30:	4295      	cmp	r5, r2
 800be32:	d003      	beq.n	800be3c <__mcmp+0x2c>
 800be34:	d205      	bcs.n	800be42 <__mcmp+0x32>
 800be36:	f04f 30ff 	mov.w	r0, #4294967295
 800be3a:	bd30      	pop	{r4, r5, pc}
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	d3f3      	bcc.n	800be28 <__mcmp+0x18>
 800be40:	e7fb      	b.n	800be3a <__mcmp+0x2a>
 800be42:	2001      	movs	r0, #1
 800be44:	e7f9      	b.n	800be3a <__mcmp+0x2a>
	...

0800be48 <__mdiff>:
 800be48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4c:	4689      	mov	r9, r1
 800be4e:	4606      	mov	r6, r0
 800be50:	4611      	mov	r1, r2
 800be52:	4648      	mov	r0, r9
 800be54:	4614      	mov	r4, r2
 800be56:	f7ff ffdb 	bl	800be10 <__mcmp>
 800be5a:	1e05      	subs	r5, r0, #0
 800be5c:	d112      	bne.n	800be84 <__mdiff+0x3c>
 800be5e:	4629      	mov	r1, r5
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff fd11 	bl	800b888 <_Balloc>
 800be66:	4602      	mov	r2, r0
 800be68:	b928      	cbnz	r0, 800be76 <__mdiff+0x2e>
 800be6a:	4b3f      	ldr	r3, [pc, #252]	@ (800bf68 <__mdiff+0x120>)
 800be6c:	f240 2137 	movw	r1, #567	@ 0x237
 800be70:	483e      	ldr	r0, [pc, #248]	@ (800bf6c <__mdiff+0x124>)
 800be72:	f000 fbf5 	bl	800c660 <__assert_func>
 800be76:	2301      	movs	r3, #1
 800be78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be7c:	4610      	mov	r0, r2
 800be7e:	b003      	add	sp, #12
 800be80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be84:	bfbc      	itt	lt
 800be86:	464b      	movlt	r3, r9
 800be88:	46a1      	movlt	r9, r4
 800be8a:	4630      	mov	r0, r6
 800be8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be90:	bfba      	itte	lt
 800be92:	461c      	movlt	r4, r3
 800be94:	2501      	movlt	r5, #1
 800be96:	2500      	movge	r5, #0
 800be98:	f7ff fcf6 	bl	800b888 <_Balloc>
 800be9c:	4602      	mov	r2, r0
 800be9e:	b918      	cbnz	r0, 800bea8 <__mdiff+0x60>
 800bea0:	4b31      	ldr	r3, [pc, #196]	@ (800bf68 <__mdiff+0x120>)
 800bea2:	f240 2145 	movw	r1, #581	@ 0x245
 800bea6:	e7e3      	b.n	800be70 <__mdiff+0x28>
 800bea8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800beac:	6926      	ldr	r6, [r4, #16]
 800beae:	60c5      	str	r5, [r0, #12]
 800beb0:	f109 0310 	add.w	r3, r9, #16
 800beb4:	f109 0514 	add.w	r5, r9, #20
 800beb8:	f104 0e14 	add.w	lr, r4, #20
 800bebc:	f100 0b14 	add.w	fp, r0, #20
 800bec0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bec4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	46d9      	mov	r9, fp
 800becc:	f04f 0c00 	mov.w	ip, #0
 800bed0:	9b01      	ldr	r3, [sp, #4]
 800bed2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bed6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	fa1f f38a 	uxth.w	r3, sl
 800bee0:	4619      	mov	r1, r3
 800bee2:	b283      	uxth	r3, r0
 800bee4:	1acb      	subs	r3, r1, r3
 800bee6:	0c00      	lsrs	r0, r0, #16
 800bee8:	4463      	add	r3, ip
 800beea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800beee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bef8:	4576      	cmp	r6, lr
 800befa:	f849 3b04 	str.w	r3, [r9], #4
 800befe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf02:	d8e5      	bhi.n	800bed0 <__mdiff+0x88>
 800bf04:	1b33      	subs	r3, r6, r4
 800bf06:	3b15      	subs	r3, #21
 800bf08:	f023 0303 	bic.w	r3, r3, #3
 800bf0c:	3415      	adds	r4, #21
 800bf0e:	3304      	adds	r3, #4
 800bf10:	42a6      	cmp	r6, r4
 800bf12:	bf38      	it	cc
 800bf14:	2304      	movcc	r3, #4
 800bf16:	441d      	add	r5, r3
 800bf18:	445b      	add	r3, fp
 800bf1a:	461e      	mov	r6, r3
 800bf1c:	462c      	mov	r4, r5
 800bf1e:	4544      	cmp	r4, r8
 800bf20:	d30e      	bcc.n	800bf40 <__mdiff+0xf8>
 800bf22:	f108 0103 	add.w	r1, r8, #3
 800bf26:	1b49      	subs	r1, r1, r5
 800bf28:	f021 0103 	bic.w	r1, r1, #3
 800bf2c:	3d03      	subs	r5, #3
 800bf2e:	45a8      	cmp	r8, r5
 800bf30:	bf38      	it	cc
 800bf32:	2100      	movcc	r1, #0
 800bf34:	440b      	add	r3, r1
 800bf36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf3a:	b191      	cbz	r1, 800bf62 <__mdiff+0x11a>
 800bf3c:	6117      	str	r7, [r2, #16]
 800bf3e:	e79d      	b.n	800be7c <__mdiff+0x34>
 800bf40:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf44:	46e6      	mov	lr, ip
 800bf46:	0c08      	lsrs	r0, r1, #16
 800bf48:	fa1c fc81 	uxtah	ip, ip, r1
 800bf4c:	4471      	add	r1, lr
 800bf4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf52:	b289      	uxth	r1, r1
 800bf54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf58:	f846 1b04 	str.w	r1, [r6], #4
 800bf5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf60:	e7dd      	b.n	800bf1e <__mdiff+0xd6>
 800bf62:	3f01      	subs	r7, #1
 800bf64:	e7e7      	b.n	800bf36 <__mdiff+0xee>
 800bf66:	bf00      	nop
 800bf68:	0800de21 	.word	0x0800de21
 800bf6c:	0800de92 	.word	0x0800de92

0800bf70 <__ulp>:
 800bf70:	b082      	sub	sp, #8
 800bf72:	ed8d 0b00 	vstr	d0, [sp]
 800bf76:	9a01      	ldr	r2, [sp, #4]
 800bf78:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb8 <__ulp+0x48>)
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dc08      	bgt.n	800bf96 <__ulp+0x26>
 800bf84:	425b      	negs	r3, r3
 800bf86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf8e:	da04      	bge.n	800bf9a <__ulp+0x2a>
 800bf90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf94:	4113      	asrs	r3, r2
 800bf96:	2200      	movs	r2, #0
 800bf98:	e008      	b.n	800bfac <__ulp+0x3c>
 800bf9a:	f1a2 0314 	sub.w	r3, r2, #20
 800bf9e:	2b1e      	cmp	r3, #30
 800bfa0:	bfda      	itte	le
 800bfa2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bfa6:	40da      	lsrle	r2, r3
 800bfa8:	2201      	movgt	r2, #1
 800bfaa:	2300      	movs	r3, #0
 800bfac:	4619      	mov	r1, r3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	ec41 0b10 	vmov	d0, r0, r1
 800bfb4:	b002      	add	sp, #8
 800bfb6:	4770      	bx	lr
 800bfb8:	7ff00000 	.word	0x7ff00000

0800bfbc <__b2d>:
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	6906      	ldr	r6, [r0, #16]
 800bfc2:	f100 0814 	add.w	r8, r0, #20
 800bfc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfca:	1f37      	subs	r7, r6, #4
 800bfcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	f7ff fd4b 	bl	800ba6c <__hi0bits>
 800bfd6:	f1c0 0320 	rsb	r3, r0, #32
 800bfda:	280a      	cmp	r0, #10
 800bfdc:	600b      	str	r3, [r1, #0]
 800bfde:	491b      	ldr	r1, [pc, #108]	@ (800c04c <__b2d+0x90>)
 800bfe0:	dc15      	bgt.n	800c00e <__b2d+0x52>
 800bfe2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfe6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfea:	45b8      	cmp	r8, r7
 800bfec:	ea43 0501 	orr.w	r5, r3, r1
 800bff0:	bf34      	ite	cc
 800bff2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bff6:	2300      	movcs	r3, #0
 800bff8:	3015      	adds	r0, #21
 800bffa:	fa02 f000 	lsl.w	r0, r2, r0
 800bffe:	fa23 f30c 	lsr.w	r3, r3, ip
 800c002:	4303      	orrs	r3, r0
 800c004:	461c      	mov	r4, r3
 800c006:	ec45 4b10 	vmov	d0, r4, r5
 800c00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c00e:	45b8      	cmp	r8, r7
 800c010:	bf3a      	itte	cc
 800c012:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c016:	f1a6 0708 	subcc.w	r7, r6, #8
 800c01a:	2300      	movcs	r3, #0
 800c01c:	380b      	subs	r0, #11
 800c01e:	d012      	beq.n	800c046 <__b2d+0x8a>
 800c020:	f1c0 0120 	rsb	r1, r0, #32
 800c024:	fa23 f401 	lsr.w	r4, r3, r1
 800c028:	4082      	lsls	r2, r0
 800c02a:	4322      	orrs	r2, r4
 800c02c:	4547      	cmp	r7, r8
 800c02e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c032:	bf8c      	ite	hi
 800c034:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c038:	2200      	movls	r2, #0
 800c03a:	4083      	lsls	r3, r0
 800c03c:	40ca      	lsrs	r2, r1
 800c03e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c042:	4313      	orrs	r3, r2
 800c044:	e7de      	b.n	800c004 <__b2d+0x48>
 800c046:	ea42 0501 	orr.w	r5, r2, r1
 800c04a:	e7db      	b.n	800c004 <__b2d+0x48>
 800c04c:	3ff00000 	.word	0x3ff00000

0800c050 <__d2b>:
 800c050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c054:	460f      	mov	r7, r1
 800c056:	2101      	movs	r1, #1
 800c058:	ec59 8b10 	vmov	r8, r9, d0
 800c05c:	4616      	mov	r6, r2
 800c05e:	f7ff fc13 	bl	800b888 <_Balloc>
 800c062:	4604      	mov	r4, r0
 800c064:	b930      	cbnz	r0, 800c074 <__d2b+0x24>
 800c066:	4602      	mov	r2, r0
 800c068:	4b23      	ldr	r3, [pc, #140]	@ (800c0f8 <__d2b+0xa8>)
 800c06a:	4824      	ldr	r0, [pc, #144]	@ (800c0fc <__d2b+0xac>)
 800c06c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c070:	f000 faf6 	bl	800c660 <__assert_func>
 800c074:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c07c:	b10d      	cbz	r5, 800c082 <__d2b+0x32>
 800c07e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c082:	9301      	str	r3, [sp, #4]
 800c084:	f1b8 0300 	subs.w	r3, r8, #0
 800c088:	d023      	beq.n	800c0d2 <__d2b+0x82>
 800c08a:	4668      	mov	r0, sp
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	f7ff fd0c 	bl	800baaa <__lo0bits>
 800c092:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c096:	b1d0      	cbz	r0, 800c0ce <__d2b+0x7e>
 800c098:	f1c0 0320 	rsb	r3, r0, #32
 800c09c:	fa02 f303 	lsl.w	r3, r2, r3
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	40c2      	lsrs	r2, r0
 800c0a4:	6163      	str	r3, [r4, #20]
 800c0a6:	9201      	str	r2, [sp, #4]
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	61a3      	str	r3, [r4, #24]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2201      	moveq	r2, #1
 800c0b2:	2202      	movne	r2, #2
 800c0b4:	6122      	str	r2, [r4, #16]
 800c0b6:	b1a5      	cbz	r5, 800c0e2 <__d2b+0x92>
 800c0b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0bc:	4405      	add	r5, r0
 800c0be:	603d      	str	r5, [r7, #0]
 800c0c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0c4:	6030      	str	r0, [r6, #0]
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	b003      	add	sp, #12
 800c0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	6161      	str	r1, [r4, #20]
 800c0d0:	e7ea      	b.n	800c0a8 <__d2b+0x58>
 800c0d2:	a801      	add	r0, sp, #4
 800c0d4:	f7ff fce9 	bl	800baaa <__lo0bits>
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	6163      	str	r3, [r4, #20]
 800c0dc:	3020      	adds	r0, #32
 800c0de:	2201      	movs	r2, #1
 800c0e0:	e7e8      	b.n	800c0b4 <__d2b+0x64>
 800c0e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0ea:	6038      	str	r0, [r7, #0]
 800c0ec:	6918      	ldr	r0, [r3, #16]
 800c0ee:	f7ff fcbd 	bl	800ba6c <__hi0bits>
 800c0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0f6:	e7e5      	b.n	800c0c4 <__d2b+0x74>
 800c0f8:	0800de21 	.word	0x0800de21
 800c0fc:	0800de92 	.word	0x0800de92

0800c100 <__ratio>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	b085      	sub	sp, #20
 800c106:	e9cd 1000 	strd	r1, r0, [sp]
 800c10a:	a902      	add	r1, sp, #8
 800c10c:	f7ff ff56 	bl	800bfbc <__b2d>
 800c110:	9800      	ldr	r0, [sp, #0]
 800c112:	a903      	add	r1, sp, #12
 800c114:	ec55 4b10 	vmov	r4, r5, d0
 800c118:	f7ff ff50 	bl	800bfbc <__b2d>
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	6919      	ldr	r1, [r3, #16]
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	1ac9      	subs	r1, r1, r3
 800c126:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	ec5b ab10 	vmov	sl, fp, d0
 800c130:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c134:	2b00      	cmp	r3, #0
 800c136:	bfce      	itee	gt
 800c138:	462a      	movgt	r2, r5
 800c13a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c13e:	465a      	movle	r2, fp
 800c140:	462f      	mov	r7, r5
 800c142:	46d9      	mov	r9, fp
 800c144:	bfcc      	ite	gt
 800c146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c14a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c14e:	464b      	mov	r3, r9
 800c150:	4652      	mov	r2, sl
 800c152:	4620      	mov	r0, r4
 800c154:	4639      	mov	r1, r7
 800c156:	f7f4 fb99 	bl	800088c <__aeabi_ddiv>
 800c15a:	ec41 0b10 	vmov	d0, r0, r1
 800c15e:	b005      	add	sp, #20
 800c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c164 <__copybits>:
 800c164:	3901      	subs	r1, #1
 800c166:	b570      	push	{r4, r5, r6, lr}
 800c168:	1149      	asrs	r1, r1, #5
 800c16a:	6914      	ldr	r4, [r2, #16]
 800c16c:	3101      	adds	r1, #1
 800c16e:	f102 0314 	add.w	r3, r2, #20
 800c172:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c176:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c17a:	1f05      	subs	r5, r0, #4
 800c17c:	42a3      	cmp	r3, r4
 800c17e:	d30c      	bcc.n	800c19a <__copybits+0x36>
 800c180:	1aa3      	subs	r3, r4, r2
 800c182:	3b11      	subs	r3, #17
 800c184:	f023 0303 	bic.w	r3, r3, #3
 800c188:	3211      	adds	r2, #17
 800c18a:	42a2      	cmp	r2, r4
 800c18c:	bf88      	it	hi
 800c18e:	2300      	movhi	r3, #0
 800c190:	4418      	add	r0, r3
 800c192:	2300      	movs	r3, #0
 800c194:	4288      	cmp	r0, r1
 800c196:	d305      	bcc.n	800c1a4 <__copybits+0x40>
 800c198:	bd70      	pop	{r4, r5, r6, pc}
 800c19a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c19e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c1a2:	e7eb      	b.n	800c17c <__copybits+0x18>
 800c1a4:	f840 3b04 	str.w	r3, [r0], #4
 800c1a8:	e7f4      	b.n	800c194 <__copybits+0x30>

0800c1aa <__any_on>:
 800c1aa:	f100 0214 	add.w	r2, r0, #20
 800c1ae:	6900      	ldr	r0, [r0, #16]
 800c1b0:	114b      	asrs	r3, r1, #5
 800c1b2:	4298      	cmp	r0, r3
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	db11      	blt.n	800c1dc <__any_on+0x32>
 800c1b8:	dd0a      	ble.n	800c1d0 <__any_on+0x26>
 800c1ba:	f011 011f 	ands.w	r1, r1, #31
 800c1be:	d007      	beq.n	800c1d0 <__any_on+0x26>
 800c1c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1c4:	fa24 f001 	lsr.w	r0, r4, r1
 800c1c8:	fa00 f101 	lsl.w	r1, r0, r1
 800c1cc:	428c      	cmp	r4, r1
 800c1ce:	d10b      	bne.n	800c1e8 <__any_on+0x3e>
 800c1d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d803      	bhi.n	800c1e0 <__any_on+0x36>
 800c1d8:	2000      	movs	r0, #0
 800c1da:	bd10      	pop	{r4, pc}
 800c1dc:	4603      	mov	r3, r0
 800c1de:	e7f7      	b.n	800c1d0 <__any_on+0x26>
 800c1e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	d0f5      	beq.n	800c1d4 <__any_on+0x2a>
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	e7f6      	b.n	800c1da <__any_on+0x30>

0800c1ec <__ascii_wctomb>:
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	b141      	cbz	r1, 800c204 <__ascii_wctomb+0x18>
 800c1f2:	2aff      	cmp	r2, #255	@ 0xff
 800c1f4:	d904      	bls.n	800c200 <__ascii_wctomb+0x14>
 800c1f6:	228a      	movs	r2, #138	@ 0x8a
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fe:	4770      	bx	lr
 800c200:	700a      	strb	r2, [r1, #0]
 800c202:	2001      	movs	r0, #1
 800c204:	4770      	bx	lr

0800c206 <__ssputs_r>:
 800c206:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20a:	688e      	ldr	r6, [r1, #8]
 800c20c:	461f      	mov	r7, r3
 800c20e:	42be      	cmp	r6, r7
 800c210:	680b      	ldr	r3, [r1, #0]
 800c212:	4682      	mov	sl, r0
 800c214:	460c      	mov	r4, r1
 800c216:	4690      	mov	r8, r2
 800c218:	d82d      	bhi.n	800c276 <__ssputs_r+0x70>
 800c21a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c21e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c222:	d026      	beq.n	800c272 <__ssputs_r+0x6c>
 800c224:	6965      	ldr	r5, [r4, #20]
 800c226:	6909      	ldr	r1, [r1, #16]
 800c228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c22c:	eba3 0901 	sub.w	r9, r3, r1
 800c230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c234:	1c7b      	adds	r3, r7, #1
 800c236:	444b      	add	r3, r9
 800c238:	106d      	asrs	r5, r5, #1
 800c23a:	429d      	cmp	r5, r3
 800c23c:	bf38      	it	cc
 800c23e:	461d      	movcc	r5, r3
 800c240:	0553      	lsls	r3, r2, #21
 800c242:	d527      	bpl.n	800c294 <__ssputs_r+0x8e>
 800c244:	4629      	mov	r1, r5
 800c246:	f7ff fa81 	bl	800b74c <_malloc_r>
 800c24a:	4606      	mov	r6, r0
 800c24c:	b360      	cbz	r0, 800c2a8 <__ssputs_r+0xa2>
 800c24e:	6921      	ldr	r1, [r4, #16]
 800c250:	464a      	mov	r2, r9
 800c252:	f7fe f86a 	bl	800a32a <memcpy>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c260:	81a3      	strh	r3, [r4, #12]
 800c262:	6126      	str	r6, [r4, #16]
 800c264:	6165      	str	r5, [r4, #20]
 800c266:	444e      	add	r6, r9
 800c268:	eba5 0509 	sub.w	r5, r5, r9
 800c26c:	6026      	str	r6, [r4, #0]
 800c26e:	60a5      	str	r5, [r4, #8]
 800c270:	463e      	mov	r6, r7
 800c272:	42be      	cmp	r6, r7
 800c274:	d900      	bls.n	800c278 <__ssputs_r+0x72>
 800c276:	463e      	mov	r6, r7
 800c278:	6820      	ldr	r0, [r4, #0]
 800c27a:	4632      	mov	r2, r6
 800c27c:	4641      	mov	r1, r8
 800c27e:	f000 f9c5 	bl	800c60c <memmove>
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	1b9b      	subs	r3, r3, r6
 800c286:	60a3      	str	r3, [r4, #8]
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	4433      	add	r3, r6
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	2000      	movs	r0, #0
 800c290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c294:	462a      	mov	r2, r5
 800c296:	f000 fa15 	bl	800c6c4 <_realloc_r>
 800c29a:	4606      	mov	r6, r0
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d1e0      	bne.n	800c262 <__ssputs_r+0x5c>
 800c2a0:	6921      	ldr	r1, [r4, #16]
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7fe fea4 	bl	800aff0 <_free_r>
 800c2a8:	230c      	movs	r3, #12
 800c2aa:	f8ca 3000 	str.w	r3, [sl]
 800c2ae:	89a3      	ldrh	r3, [r4, #12]
 800c2b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ba:	e7e9      	b.n	800c290 <__ssputs_r+0x8a>

0800c2bc <_svfiprintf_r>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	4698      	mov	r8, r3
 800c2c2:	898b      	ldrh	r3, [r1, #12]
 800c2c4:	061b      	lsls	r3, r3, #24
 800c2c6:	b09d      	sub	sp, #116	@ 0x74
 800c2c8:	4607      	mov	r7, r0
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	d510      	bpl.n	800c2f2 <_svfiprintf_r+0x36>
 800c2d0:	690b      	ldr	r3, [r1, #16]
 800c2d2:	b973      	cbnz	r3, 800c2f2 <_svfiprintf_r+0x36>
 800c2d4:	2140      	movs	r1, #64	@ 0x40
 800c2d6:	f7ff fa39 	bl	800b74c <_malloc_r>
 800c2da:	6028      	str	r0, [r5, #0]
 800c2dc:	6128      	str	r0, [r5, #16]
 800c2de:	b930      	cbnz	r0, 800c2ee <_svfiprintf_r+0x32>
 800c2e0:	230c      	movs	r3, #12
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	b01d      	add	sp, #116	@ 0x74
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	2340      	movs	r3, #64	@ 0x40
 800c2f0:	616b      	str	r3, [r5, #20]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f6:	2320      	movs	r3, #32
 800c2f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c300:	2330      	movs	r3, #48	@ 0x30
 800c302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4a0 <_svfiprintf_r+0x1e4>
 800c306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c30a:	f04f 0901 	mov.w	r9, #1
 800c30e:	4623      	mov	r3, r4
 800c310:	469a      	mov	sl, r3
 800c312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c316:	b10a      	cbz	r2, 800c31c <_svfiprintf_r+0x60>
 800c318:	2a25      	cmp	r2, #37	@ 0x25
 800c31a:	d1f9      	bne.n	800c310 <_svfiprintf_r+0x54>
 800c31c:	ebba 0b04 	subs.w	fp, sl, r4
 800c320:	d00b      	beq.n	800c33a <_svfiprintf_r+0x7e>
 800c322:	465b      	mov	r3, fp
 800c324:	4622      	mov	r2, r4
 800c326:	4629      	mov	r1, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ff6c 	bl	800c206 <__ssputs_r>
 800c32e:	3001      	adds	r0, #1
 800c330:	f000 80a7 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c336:	445a      	add	r2, fp
 800c338:	9209      	str	r2, [sp, #36]	@ 0x24
 800c33a:	f89a 3000 	ldrb.w	r3, [sl]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 809f 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c344:	2300      	movs	r3, #0
 800c346:	f04f 32ff 	mov.w	r2, #4294967295
 800c34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34e:	f10a 0a01 	add.w	sl, sl, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	9307      	str	r3, [sp, #28]
 800c356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c35a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c35c:	4654      	mov	r4, sl
 800c35e:	2205      	movs	r2, #5
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	484e      	ldr	r0, [pc, #312]	@ (800c4a0 <_svfiprintf_r+0x1e4>)
 800c366:	f7f3 ff53 	bl	8000210 <memchr>
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	b9d8      	cbnz	r0, 800c3a6 <_svfiprintf_r+0xea>
 800c36e:	06d0      	lsls	r0, r2, #27
 800c370:	bf44      	itt	mi
 800c372:	2320      	movmi	r3, #32
 800c374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c378:	0711      	lsls	r1, r2, #28
 800c37a:	bf44      	itt	mi
 800c37c:	232b      	movmi	r3, #43	@ 0x2b
 800c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c382:	f89a 3000 	ldrb.w	r3, [sl]
 800c386:	2b2a      	cmp	r3, #42	@ 0x2a
 800c388:	d015      	beq.n	800c3b6 <_svfiprintf_r+0xfa>
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	4654      	mov	r4, sl
 800c38e:	2000      	movs	r0, #0
 800c390:	f04f 0c0a 	mov.w	ip, #10
 800c394:	4621      	mov	r1, r4
 800c396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c39a:	3b30      	subs	r3, #48	@ 0x30
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d94b      	bls.n	800c438 <_svfiprintf_r+0x17c>
 800c3a0:	b1b0      	cbz	r0, 800c3d0 <_svfiprintf_r+0x114>
 800c3a2:	9207      	str	r2, [sp, #28]
 800c3a4:	e014      	b.n	800c3d0 <_svfiprintf_r+0x114>
 800c3a6:	eba0 0308 	sub.w	r3, r0, r8
 800c3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	9304      	str	r3, [sp, #16]
 800c3b2:	46a2      	mov	sl, r4
 800c3b4:	e7d2      	b.n	800c35c <_svfiprintf_r+0xa0>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d19      	adds	r1, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9103      	str	r1, [sp, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbb      	ittet	lt
 800c3c2:	425b      	neglt	r3, r3
 800c3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c8:	9307      	strge	r3, [sp, #28]
 800c3ca:	9307      	strlt	r3, [sp, #28]
 800c3cc:	bfb8      	it	lt
 800c3ce:	9204      	strlt	r2, [sp, #16]
 800c3d0:	7823      	ldrb	r3, [r4, #0]
 800c3d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3d4:	d10a      	bne.n	800c3ec <_svfiprintf_r+0x130>
 800c3d6:	7863      	ldrb	r3, [r4, #1]
 800c3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3da:	d132      	bne.n	800c442 <_svfiprintf_r+0x186>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	9203      	str	r2, [sp, #12]
 800c3e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3e8:	3402      	adds	r4, #2
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4b0 <_svfiprintf_r+0x1f4>
 800c3f0:	7821      	ldrb	r1, [r4, #0]
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	4650      	mov	r0, sl
 800c3f6:	f7f3 ff0b 	bl	8000210 <memchr>
 800c3fa:	b138      	cbz	r0, 800c40c <_svfiprintf_r+0x150>
 800c3fc:	9b04      	ldr	r3, [sp, #16]
 800c3fe:	eba0 000a 	sub.w	r0, r0, sl
 800c402:	2240      	movs	r2, #64	@ 0x40
 800c404:	4082      	lsls	r2, r0
 800c406:	4313      	orrs	r3, r2
 800c408:	3401      	adds	r4, #1
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	4824      	ldr	r0, [pc, #144]	@ (800c4a4 <_svfiprintf_r+0x1e8>)
 800c412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c416:	2206      	movs	r2, #6
 800c418:	f7f3 fefa 	bl	8000210 <memchr>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d036      	beq.n	800c48e <_svfiprintf_r+0x1d2>
 800c420:	4b21      	ldr	r3, [pc, #132]	@ (800c4a8 <_svfiprintf_r+0x1ec>)
 800c422:	bb1b      	cbnz	r3, 800c46c <_svfiprintf_r+0x1b0>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	3307      	adds	r3, #7
 800c428:	f023 0307 	bic.w	r3, r3, #7
 800c42c:	3308      	adds	r3, #8
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c432:	4433      	add	r3, r6
 800c434:	9309      	str	r3, [sp, #36]	@ 0x24
 800c436:	e76a      	b.n	800c30e <_svfiprintf_r+0x52>
 800c438:	fb0c 3202 	mla	r2, ip, r2, r3
 800c43c:	460c      	mov	r4, r1
 800c43e:	2001      	movs	r0, #1
 800c440:	e7a8      	b.n	800c394 <_svfiprintf_r+0xd8>
 800c442:	2300      	movs	r3, #0
 800c444:	3401      	adds	r4, #1
 800c446:	9305      	str	r3, [sp, #20]
 800c448:	4619      	mov	r1, r3
 800c44a:	f04f 0c0a 	mov.w	ip, #10
 800c44e:	4620      	mov	r0, r4
 800c450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c454:	3a30      	subs	r2, #48	@ 0x30
 800c456:	2a09      	cmp	r2, #9
 800c458:	d903      	bls.n	800c462 <_svfiprintf_r+0x1a6>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0c6      	beq.n	800c3ec <_svfiprintf_r+0x130>
 800c45e:	9105      	str	r1, [sp, #20]
 800c460:	e7c4      	b.n	800c3ec <_svfiprintf_r+0x130>
 800c462:	fb0c 2101 	mla	r1, ip, r1, r2
 800c466:	4604      	mov	r4, r0
 800c468:	2301      	movs	r3, #1
 800c46a:	e7f0      	b.n	800c44e <_svfiprintf_r+0x192>
 800c46c:	ab03      	add	r3, sp, #12
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	462a      	mov	r2, r5
 800c472:	4b0e      	ldr	r3, [pc, #56]	@ (800c4ac <_svfiprintf_r+0x1f0>)
 800c474:	a904      	add	r1, sp, #16
 800c476:	4638      	mov	r0, r7
 800c478:	f7fd f9aa 	bl	80097d0 <_printf_float>
 800c47c:	1c42      	adds	r2, r0, #1
 800c47e:	4606      	mov	r6, r0
 800c480:	d1d6      	bne.n	800c430 <_svfiprintf_r+0x174>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	065b      	lsls	r3, r3, #25
 800c486:	f53f af2d 	bmi.w	800c2e4 <_svfiprintf_r+0x28>
 800c48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c48c:	e72c      	b.n	800c2e8 <_svfiprintf_r+0x2c>
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	462a      	mov	r2, r5
 800c494:	4b05      	ldr	r3, [pc, #20]	@ (800c4ac <_svfiprintf_r+0x1f0>)
 800c496:	a904      	add	r1, sp, #16
 800c498:	4638      	mov	r0, r7
 800c49a:	f7fd fc31 	bl	8009d00 <_printf_i>
 800c49e:	e7ed      	b.n	800c47c <_svfiprintf_r+0x1c0>
 800c4a0:	0800dfe8 	.word	0x0800dfe8
 800c4a4:	0800dff2 	.word	0x0800dff2
 800c4a8:	080097d1 	.word	0x080097d1
 800c4ac:	0800c207 	.word	0x0800c207
 800c4b0:	0800dfee 	.word	0x0800dfee

0800c4b4 <__sflush_r>:
 800c4b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4bc:	0716      	lsls	r6, r2, #28
 800c4be:	4605      	mov	r5, r0
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	d454      	bmi.n	800c56e <__sflush_r+0xba>
 800c4c4:	684b      	ldr	r3, [r1, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dc02      	bgt.n	800c4d0 <__sflush_r+0x1c>
 800c4ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	dd48      	ble.n	800c562 <__sflush_r+0xae>
 800c4d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4d2:	2e00      	cmp	r6, #0
 800c4d4:	d045      	beq.n	800c562 <__sflush_r+0xae>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4dc:	682f      	ldr	r7, [r5, #0]
 800c4de:	6a21      	ldr	r1, [r4, #32]
 800c4e0:	602b      	str	r3, [r5, #0]
 800c4e2:	d030      	beq.n	800c546 <__sflush_r+0x92>
 800c4e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	0759      	lsls	r1, r3, #29
 800c4ea:	d505      	bpl.n	800c4f8 <__sflush_r+0x44>
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	1ad2      	subs	r2, r2, r3
 800c4f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4f2:	b10b      	cbz	r3, 800c4f8 <__sflush_r+0x44>
 800c4f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4f6:	1ad2      	subs	r2, r2, r3
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4fc:	6a21      	ldr	r1, [r4, #32]
 800c4fe:	4628      	mov	r0, r5
 800c500:	47b0      	blx	r6
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	d106      	bne.n	800c516 <__sflush_r+0x62>
 800c508:	6829      	ldr	r1, [r5, #0]
 800c50a:	291d      	cmp	r1, #29
 800c50c:	d82b      	bhi.n	800c566 <__sflush_r+0xb2>
 800c50e:	4a2a      	ldr	r2, [pc, #168]	@ (800c5b8 <__sflush_r+0x104>)
 800c510:	410a      	asrs	r2, r1
 800c512:	07d6      	lsls	r6, r2, #31
 800c514:	d427      	bmi.n	800c566 <__sflush_r+0xb2>
 800c516:	2200      	movs	r2, #0
 800c518:	6062      	str	r2, [r4, #4]
 800c51a:	04d9      	lsls	r1, r3, #19
 800c51c:	6922      	ldr	r2, [r4, #16]
 800c51e:	6022      	str	r2, [r4, #0]
 800c520:	d504      	bpl.n	800c52c <__sflush_r+0x78>
 800c522:	1c42      	adds	r2, r0, #1
 800c524:	d101      	bne.n	800c52a <__sflush_r+0x76>
 800c526:	682b      	ldr	r3, [r5, #0]
 800c528:	b903      	cbnz	r3, 800c52c <__sflush_r+0x78>
 800c52a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c52c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c52e:	602f      	str	r7, [r5, #0]
 800c530:	b1b9      	cbz	r1, 800c562 <__sflush_r+0xae>
 800c532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c536:	4299      	cmp	r1, r3
 800c538:	d002      	beq.n	800c540 <__sflush_r+0x8c>
 800c53a:	4628      	mov	r0, r5
 800c53c:	f7fe fd58 	bl	800aff0 <_free_r>
 800c540:	2300      	movs	r3, #0
 800c542:	6363      	str	r3, [r4, #52]	@ 0x34
 800c544:	e00d      	b.n	800c562 <__sflush_r+0xae>
 800c546:	2301      	movs	r3, #1
 800c548:	4628      	mov	r0, r5
 800c54a:	47b0      	blx	r6
 800c54c:	4602      	mov	r2, r0
 800c54e:	1c50      	adds	r0, r2, #1
 800c550:	d1c9      	bne.n	800c4e6 <__sflush_r+0x32>
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0c6      	beq.n	800c4e6 <__sflush_r+0x32>
 800c558:	2b1d      	cmp	r3, #29
 800c55a:	d001      	beq.n	800c560 <__sflush_r+0xac>
 800c55c:	2b16      	cmp	r3, #22
 800c55e:	d11e      	bne.n	800c59e <__sflush_r+0xea>
 800c560:	602f      	str	r7, [r5, #0]
 800c562:	2000      	movs	r0, #0
 800c564:	e022      	b.n	800c5ac <__sflush_r+0xf8>
 800c566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c56a:	b21b      	sxth	r3, r3
 800c56c:	e01b      	b.n	800c5a6 <__sflush_r+0xf2>
 800c56e:	690f      	ldr	r7, [r1, #16]
 800c570:	2f00      	cmp	r7, #0
 800c572:	d0f6      	beq.n	800c562 <__sflush_r+0xae>
 800c574:	0793      	lsls	r3, r2, #30
 800c576:	680e      	ldr	r6, [r1, #0]
 800c578:	bf08      	it	eq
 800c57a:	694b      	ldreq	r3, [r1, #20]
 800c57c:	600f      	str	r7, [r1, #0]
 800c57e:	bf18      	it	ne
 800c580:	2300      	movne	r3, #0
 800c582:	eba6 0807 	sub.w	r8, r6, r7
 800c586:	608b      	str	r3, [r1, #8]
 800c588:	f1b8 0f00 	cmp.w	r8, #0
 800c58c:	dde9      	ble.n	800c562 <__sflush_r+0xae>
 800c58e:	6a21      	ldr	r1, [r4, #32]
 800c590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c592:	4643      	mov	r3, r8
 800c594:	463a      	mov	r2, r7
 800c596:	4628      	mov	r0, r5
 800c598:	47b0      	blx	r6
 800c59a:	2800      	cmp	r0, #0
 800c59c:	dc08      	bgt.n	800c5b0 <__sflush_r+0xfc>
 800c59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a6:	81a3      	strh	r3, [r4, #12]
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b0:	4407      	add	r7, r0
 800c5b2:	eba8 0800 	sub.w	r8, r8, r0
 800c5b6:	e7e7      	b.n	800c588 <__sflush_r+0xd4>
 800c5b8:	dfbffffe 	.word	0xdfbffffe

0800c5bc <_fflush_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	690b      	ldr	r3, [r1, #16]
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	b913      	cbnz	r3, 800c5cc <_fflush_r+0x10>
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	b118      	cbz	r0, 800c5d6 <_fflush_r+0x1a>
 800c5ce:	6a03      	ldr	r3, [r0, #32]
 800c5d0:	b90b      	cbnz	r3, 800c5d6 <_fflush_r+0x1a>
 800c5d2:	f7fd fd41 	bl	800a058 <__sinit>
 800c5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d0f3      	beq.n	800c5c6 <_fflush_r+0xa>
 800c5de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5e0:	07d0      	lsls	r0, r2, #31
 800c5e2:	d404      	bmi.n	800c5ee <_fflush_r+0x32>
 800c5e4:	0599      	lsls	r1, r3, #22
 800c5e6:	d402      	bmi.n	800c5ee <_fflush_r+0x32>
 800c5e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5ea:	f7fd fe94 	bl	800a316 <__retarget_lock_acquire_recursive>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	f7ff ff5f 	bl	800c4b4 <__sflush_r>
 800c5f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5f8:	07da      	lsls	r2, r3, #31
 800c5fa:	4605      	mov	r5, r0
 800c5fc:	d4e4      	bmi.n	800c5c8 <_fflush_r+0xc>
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	059b      	lsls	r3, r3, #22
 800c602:	d4e1      	bmi.n	800c5c8 <_fflush_r+0xc>
 800c604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c606:	f7fd fe87 	bl	800a318 <__retarget_lock_release_recursive>
 800c60a:	e7dd      	b.n	800c5c8 <_fflush_r+0xc>

0800c60c <memmove>:
 800c60c:	4288      	cmp	r0, r1
 800c60e:	b510      	push	{r4, lr}
 800c610:	eb01 0402 	add.w	r4, r1, r2
 800c614:	d902      	bls.n	800c61c <memmove+0x10>
 800c616:	4284      	cmp	r4, r0
 800c618:	4623      	mov	r3, r4
 800c61a:	d807      	bhi.n	800c62c <memmove+0x20>
 800c61c:	1e43      	subs	r3, r0, #1
 800c61e:	42a1      	cmp	r1, r4
 800c620:	d008      	beq.n	800c634 <memmove+0x28>
 800c622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62a:	e7f8      	b.n	800c61e <memmove+0x12>
 800c62c:	4402      	add	r2, r0
 800c62e:	4601      	mov	r1, r0
 800c630:	428a      	cmp	r2, r1
 800c632:	d100      	bne.n	800c636 <memmove+0x2a>
 800c634:	bd10      	pop	{r4, pc}
 800c636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c63e:	e7f7      	b.n	800c630 <memmove+0x24>

0800c640 <_sbrk_r>:
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4d06      	ldr	r5, [pc, #24]	@ (800c65c <_sbrk_r+0x1c>)
 800c644:	2300      	movs	r3, #0
 800c646:	4604      	mov	r4, r0
 800c648:	4608      	mov	r0, r1
 800c64a:	602b      	str	r3, [r5, #0]
 800c64c:	f7f7 f9ae 	bl	80039ac <_sbrk>
 800c650:	1c43      	adds	r3, r0, #1
 800c652:	d102      	bne.n	800c65a <_sbrk_r+0x1a>
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	b103      	cbz	r3, 800c65a <_sbrk_r+0x1a>
 800c658:	6023      	str	r3, [r4, #0]
 800c65a:	bd38      	pop	{r3, r4, r5, pc}
 800c65c:	20000bf0 	.word	0x20000bf0

0800c660 <__assert_func>:
 800c660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c662:	4614      	mov	r4, r2
 800c664:	461a      	mov	r2, r3
 800c666:	4b09      	ldr	r3, [pc, #36]	@ (800c68c <__assert_func+0x2c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4605      	mov	r5, r0
 800c66c:	68d8      	ldr	r0, [r3, #12]
 800c66e:	b954      	cbnz	r4, 800c686 <__assert_func+0x26>
 800c670:	4b07      	ldr	r3, [pc, #28]	@ (800c690 <__assert_func+0x30>)
 800c672:	461c      	mov	r4, r3
 800c674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c678:	9100      	str	r1, [sp, #0]
 800c67a:	462b      	mov	r3, r5
 800c67c:	4905      	ldr	r1, [pc, #20]	@ (800c694 <__assert_func+0x34>)
 800c67e:	f000 f84f 	bl	800c720 <fiprintf>
 800c682:	f000 f85f 	bl	800c744 <abort>
 800c686:	4b04      	ldr	r3, [pc, #16]	@ (800c698 <__assert_func+0x38>)
 800c688:	e7f4      	b.n	800c674 <__assert_func+0x14>
 800c68a:	bf00      	nop
 800c68c:	20000250 	.word	0x20000250
 800c690:	0800e034 	.word	0x0800e034
 800c694:	0800e006 	.word	0x0800e006
 800c698:	0800dff9 	.word	0x0800dff9

0800c69c <_calloc_r>:
 800c69c:	b570      	push	{r4, r5, r6, lr}
 800c69e:	fba1 5402 	umull	r5, r4, r1, r2
 800c6a2:	b93c      	cbnz	r4, 800c6b4 <_calloc_r+0x18>
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	f7ff f851 	bl	800b74c <_malloc_r>
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <_calloc_r+0x1e>
 800c6ae:	2600      	movs	r6, #0
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	bd70      	pop	{r4, r5, r6, pc}
 800c6b4:	220c      	movs	r2, #12
 800c6b6:	6002      	str	r2, [r0, #0]
 800c6b8:	e7f9      	b.n	800c6ae <_calloc_r+0x12>
 800c6ba:	462a      	mov	r2, r5
 800c6bc:	4621      	mov	r1, r4
 800c6be:	f7fd fd78 	bl	800a1b2 <memset>
 800c6c2:	e7f5      	b.n	800c6b0 <_calloc_r+0x14>

0800c6c4 <_realloc_r>:
 800c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c8:	4680      	mov	r8, r0
 800c6ca:	4615      	mov	r5, r2
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	b921      	cbnz	r1, 800c6da <_realloc_r+0x16>
 800c6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	f7ff b839 	b.w	800b74c <_malloc_r>
 800c6da:	b92a      	cbnz	r2, 800c6e8 <_realloc_r+0x24>
 800c6dc:	f7fe fc88 	bl	800aff0 <_free_r>
 800c6e0:	2400      	movs	r4, #0
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e8:	f000 f833 	bl	800c752 <_malloc_usable_size_r>
 800c6ec:	4285      	cmp	r5, r0
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	d802      	bhi.n	800c6f8 <_realloc_r+0x34>
 800c6f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c6f6:	d8f4      	bhi.n	800c6e2 <_realloc_r+0x1e>
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4640      	mov	r0, r8
 800c6fc:	f7ff f826 	bl	800b74c <_malloc_r>
 800c700:	4607      	mov	r7, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d0ec      	beq.n	800c6e0 <_realloc_r+0x1c>
 800c706:	42b5      	cmp	r5, r6
 800c708:	462a      	mov	r2, r5
 800c70a:	4621      	mov	r1, r4
 800c70c:	bf28      	it	cs
 800c70e:	4632      	movcs	r2, r6
 800c710:	f7fd fe0b 	bl	800a32a <memcpy>
 800c714:	4621      	mov	r1, r4
 800c716:	4640      	mov	r0, r8
 800c718:	f7fe fc6a 	bl	800aff0 <_free_r>
 800c71c:	463c      	mov	r4, r7
 800c71e:	e7e0      	b.n	800c6e2 <_realloc_r+0x1e>

0800c720 <fiprintf>:
 800c720:	b40e      	push	{r1, r2, r3}
 800c722:	b503      	push	{r0, r1, lr}
 800c724:	4601      	mov	r1, r0
 800c726:	ab03      	add	r3, sp, #12
 800c728:	4805      	ldr	r0, [pc, #20]	@ (800c740 <fiprintf+0x20>)
 800c72a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72e:	6800      	ldr	r0, [r0, #0]
 800c730:	9301      	str	r3, [sp, #4]
 800c732:	f000 f83f 	bl	800c7b4 <_vfiprintf_r>
 800c736:	b002      	add	sp, #8
 800c738:	f85d eb04 	ldr.w	lr, [sp], #4
 800c73c:	b003      	add	sp, #12
 800c73e:	4770      	bx	lr
 800c740:	20000250 	.word	0x20000250

0800c744 <abort>:
 800c744:	b508      	push	{r3, lr}
 800c746:	2006      	movs	r0, #6
 800c748:	f000 fa08 	bl	800cb5c <raise>
 800c74c:	2001      	movs	r0, #1
 800c74e:	f7f7 f8b5 	bl	80038bc <_exit>

0800c752 <_malloc_usable_size_r>:
 800c752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c756:	1f18      	subs	r0, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfbc      	itt	lt
 800c75c:	580b      	ldrlt	r3, [r1, r0]
 800c75e:	18c0      	addlt	r0, r0, r3
 800c760:	4770      	bx	lr

0800c762 <__sfputc_r>:
 800c762:	6893      	ldr	r3, [r2, #8]
 800c764:	3b01      	subs	r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	b410      	push	{r4}
 800c76a:	6093      	str	r3, [r2, #8]
 800c76c:	da08      	bge.n	800c780 <__sfputc_r+0x1e>
 800c76e:	6994      	ldr	r4, [r2, #24]
 800c770:	42a3      	cmp	r3, r4
 800c772:	db01      	blt.n	800c778 <__sfputc_r+0x16>
 800c774:	290a      	cmp	r1, #10
 800c776:	d103      	bne.n	800c780 <__sfputc_r+0x1e>
 800c778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c77c:	f000 b932 	b.w	800c9e4 <__swbuf_r>
 800c780:	6813      	ldr	r3, [r2, #0]
 800c782:	1c58      	adds	r0, r3, #1
 800c784:	6010      	str	r0, [r2, #0]
 800c786:	7019      	strb	r1, [r3, #0]
 800c788:	4608      	mov	r0, r1
 800c78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <__sfputs_r>:
 800c790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c792:	4606      	mov	r6, r0
 800c794:	460f      	mov	r7, r1
 800c796:	4614      	mov	r4, r2
 800c798:	18d5      	adds	r5, r2, r3
 800c79a:	42ac      	cmp	r4, r5
 800c79c:	d101      	bne.n	800c7a2 <__sfputs_r+0x12>
 800c79e:	2000      	movs	r0, #0
 800c7a0:	e007      	b.n	800c7b2 <__sfputs_r+0x22>
 800c7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a6:	463a      	mov	r2, r7
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	f7ff ffda 	bl	800c762 <__sfputc_r>
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	d1f3      	bne.n	800c79a <__sfputs_r+0xa>
 800c7b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7b4 <_vfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	b09d      	sub	sp, #116	@ 0x74
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4698      	mov	r8, r3
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	b118      	cbz	r0, 800c7cc <_vfiprintf_r+0x18>
 800c7c4:	6a03      	ldr	r3, [r0, #32]
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_vfiprintf_r+0x18>
 800c7c8:	f7fd fc46 	bl	800a058 <__sinit>
 800c7cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7ce:	07d9      	lsls	r1, r3, #31
 800c7d0:	d405      	bmi.n	800c7de <_vfiprintf_r+0x2a>
 800c7d2:	89ab      	ldrh	r3, [r5, #12]
 800c7d4:	059a      	lsls	r2, r3, #22
 800c7d6:	d402      	bmi.n	800c7de <_vfiprintf_r+0x2a>
 800c7d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7da:	f7fd fd9c 	bl	800a316 <__retarget_lock_acquire_recursive>
 800c7de:	89ab      	ldrh	r3, [r5, #12]
 800c7e0:	071b      	lsls	r3, r3, #28
 800c7e2:	d501      	bpl.n	800c7e8 <_vfiprintf_r+0x34>
 800c7e4:	692b      	ldr	r3, [r5, #16]
 800c7e6:	b99b      	cbnz	r3, 800c810 <_vfiprintf_r+0x5c>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f000 f938 	bl	800ca60 <__swsetup_r>
 800c7f0:	b170      	cbz	r0, 800c810 <_vfiprintf_r+0x5c>
 800c7f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f4:	07dc      	lsls	r4, r3, #31
 800c7f6:	d504      	bpl.n	800c802 <_vfiprintf_r+0x4e>
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	b01d      	add	sp, #116	@ 0x74
 800c7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c802:	89ab      	ldrh	r3, [r5, #12]
 800c804:	0598      	lsls	r0, r3, #22
 800c806:	d4f7      	bmi.n	800c7f8 <_vfiprintf_r+0x44>
 800c808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c80a:	f7fd fd85 	bl	800a318 <__retarget_lock_release_recursive>
 800c80e:	e7f3      	b.n	800c7f8 <_vfiprintf_r+0x44>
 800c810:	2300      	movs	r3, #0
 800c812:	9309      	str	r3, [sp, #36]	@ 0x24
 800c814:	2320      	movs	r3, #32
 800c816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c81e:	2330      	movs	r3, #48	@ 0x30
 800c820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c9d0 <_vfiprintf_r+0x21c>
 800c824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c828:	f04f 0901 	mov.w	r9, #1
 800c82c:	4623      	mov	r3, r4
 800c82e:	469a      	mov	sl, r3
 800c830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c834:	b10a      	cbz	r2, 800c83a <_vfiprintf_r+0x86>
 800c836:	2a25      	cmp	r2, #37	@ 0x25
 800c838:	d1f9      	bne.n	800c82e <_vfiprintf_r+0x7a>
 800c83a:	ebba 0b04 	subs.w	fp, sl, r4
 800c83e:	d00b      	beq.n	800c858 <_vfiprintf_r+0xa4>
 800c840:	465b      	mov	r3, fp
 800c842:	4622      	mov	r2, r4
 800c844:	4629      	mov	r1, r5
 800c846:	4630      	mov	r0, r6
 800c848:	f7ff ffa2 	bl	800c790 <__sfputs_r>
 800c84c:	3001      	adds	r0, #1
 800c84e:	f000 80a7 	beq.w	800c9a0 <_vfiprintf_r+0x1ec>
 800c852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c854:	445a      	add	r2, fp
 800c856:	9209      	str	r2, [sp, #36]	@ 0x24
 800c858:	f89a 3000 	ldrb.w	r3, [sl]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 809f 	beq.w	800c9a0 <_vfiprintf_r+0x1ec>
 800c862:	2300      	movs	r3, #0
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c86c:	f10a 0a01 	add.w	sl, sl, #1
 800c870:	9304      	str	r3, [sp, #16]
 800c872:	9307      	str	r3, [sp, #28]
 800c874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c878:	931a      	str	r3, [sp, #104]	@ 0x68
 800c87a:	4654      	mov	r4, sl
 800c87c:	2205      	movs	r2, #5
 800c87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c882:	4853      	ldr	r0, [pc, #332]	@ (800c9d0 <_vfiprintf_r+0x21c>)
 800c884:	f7f3 fcc4 	bl	8000210 <memchr>
 800c888:	9a04      	ldr	r2, [sp, #16]
 800c88a:	b9d8      	cbnz	r0, 800c8c4 <_vfiprintf_r+0x110>
 800c88c:	06d1      	lsls	r1, r2, #27
 800c88e:	bf44      	itt	mi
 800c890:	2320      	movmi	r3, #32
 800c892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c896:	0713      	lsls	r3, r2, #28
 800c898:	bf44      	itt	mi
 800c89a:	232b      	movmi	r3, #43	@ 0x2b
 800c89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8a6:	d015      	beq.n	800c8d4 <_vfiprintf_r+0x120>
 800c8a8:	9a07      	ldr	r2, [sp, #28]
 800c8aa:	4654      	mov	r4, sl
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	f04f 0c0a 	mov.w	ip, #10
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8b8:	3b30      	subs	r3, #48	@ 0x30
 800c8ba:	2b09      	cmp	r3, #9
 800c8bc:	d94b      	bls.n	800c956 <_vfiprintf_r+0x1a2>
 800c8be:	b1b0      	cbz	r0, 800c8ee <_vfiprintf_r+0x13a>
 800c8c0:	9207      	str	r2, [sp, #28]
 800c8c2:	e014      	b.n	800c8ee <_vfiprintf_r+0x13a>
 800c8c4:	eba0 0308 	sub.w	r3, r0, r8
 800c8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	9304      	str	r3, [sp, #16]
 800c8d0:	46a2      	mov	sl, r4
 800c8d2:	e7d2      	b.n	800c87a <_vfiprintf_r+0xc6>
 800c8d4:	9b03      	ldr	r3, [sp, #12]
 800c8d6:	1d19      	adds	r1, r3, #4
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	9103      	str	r1, [sp, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	bfbb      	ittet	lt
 800c8e0:	425b      	neglt	r3, r3
 800c8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c8e6:	9307      	strge	r3, [sp, #28]
 800c8e8:	9307      	strlt	r3, [sp, #28]
 800c8ea:	bfb8      	it	lt
 800c8ec:	9204      	strlt	r2, [sp, #16]
 800c8ee:	7823      	ldrb	r3, [r4, #0]
 800c8f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8f2:	d10a      	bne.n	800c90a <_vfiprintf_r+0x156>
 800c8f4:	7863      	ldrb	r3, [r4, #1]
 800c8f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f8:	d132      	bne.n	800c960 <_vfiprintf_r+0x1ac>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	1d1a      	adds	r2, r3, #4
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	9203      	str	r2, [sp, #12]
 800c902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c906:	3402      	adds	r4, #2
 800c908:	9305      	str	r3, [sp, #20]
 800c90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c9e0 <_vfiprintf_r+0x22c>
 800c90e:	7821      	ldrb	r1, [r4, #0]
 800c910:	2203      	movs	r2, #3
 800c912:	4650      	mov	r0, sl
 800c914:	f7f3 fc7c 	bl	8000210 <memchr>
 800c918:	b138      	cbz	r0, 800c92a <_vfiprintf_r+0x176>
 800c91a:	9b04      	ldr	r3, [sp, #16]
 800c91c:	eba0 000a 	sub.w	r0, r0, sl
 800c920:	2240      	movs	r2, #64	@ 0x40
 800c922:	4082      	lsls	r2, r0
 800c924:	4313      	orrs	r3, r2
 800c926:	3401      	adds	r4, #1
 800c928:	9304      	str	r3, [sp, #16]
 800c92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c92e:	4829      	ldr	r0, [pc, #164]	@ (800c9d4 <_vfiprintf_r+0x220>)
 800c930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c934:	2206      	movs	r2, #6
 800c936:	f7f3 fc6b 	bl	8000210 <memchr>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d03f      	beq.n	800c9be <_vfiprintf_r+0x20a>
 800c93e:	4b26      	ldr	r3, [pc, #152]	@ (800c9d8 <_vfiprintf_r+0x224>)
 800c940:	bb1b      	cbnz	r3, 800c98a <_vfiprintf_r+0x1d6>
 800c942:	9b03      	ldr	r3, [sp, #12]
 800c944:	3307      	adds	r3, #7
 800c946:	f023 0307 	bic.w	r3, r3, #7
 800c94a:	3308      	adds	r3, #8
 800c94c:	9303      	str	r3, [sp, #12]
 800c94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c950:	443b      	add	r3, r7
 800c952:	9309      	str	r3, [sp, #36]	@ 0x24
 800c954:	e76a      	b.n	800c82c <_vfiprintf_r+0x78>
 800c956:	fb0c 3202 	mla	r2, ip, r2, r3
 800c95a:	460c      	mov	r4, r1
 800c95c:	2001      	movs	r0, #1
 800c95e:	e7a8      	b.n	800c8b2 <_vfiprintf_r+0xfe>
 800c960:	2300      	movs	r3, #0
 800c962:	3401      	adds	r4, #1
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	4619      	mov	r1, r3
 800c968:	f04f 0c0a 	mov.w	ip, #10
 800c96c:	4620      	mov	r0, r4
 800c96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c972:	3a30      	subs	r2, #48	@ 0x30
 800c974:	2a09      	cmp	r2, #9
 800c976:	d903      	bls.n	800c980 <_vfiprintf_r+0x1cc>
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d0c6      	beq.n	800c90a <_vfiprintf_r+0x156>
 800c97c:	9105      	str	r1, [sp, #20]
 800c97e:	e7c4      	b.n	800c90a <_vfiprintf_r+0x156>
 800c980:	fb0c 2101 	mla	r1, ip, r1, r2
 800c984:	4604      	mov	r4, r0
 800c986:	2301      	movs	r3, #1
 800c988:	e7f0      	b.n	800c96c <_vfiprintf_r+0x1b8>
 800c98a:	ab03      	add	r3, sp, #12
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	462a      	mov	r2, r5
 800c990:	4b12      	ldr	r3, [pc, #72]	@ (800c9dc <_vfiprintf_r+0x228>)
 800c992:	a904      	add	r1, sp, #16
 800c994:	4630      	mov	r0, r6
 800c996:	f7fc ff1b 	bl	80097d0 <_printf_float>
 800c99a:	4607      	mov	r7, r0
 800c99c:	1c78      	adds	r0, r7, #1
 800c99e:	d1d6      	bne.n	800c94e <_vfiprintf_r+0x19a>
 800c9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9a2:	07d9      	lsls	r1, r3, #31
 800c9a4:	d405      	bmi.n	800c9b2 <_vfiprintf_r+0x1fe>
 800c9a6:	89ab      	ldrh	r3, [r5, #12]
 800c9a8:	059a      	lsls	r2, r3, #22
 800c9aa:	d402      	bmi.n	800c9b2 <_vfiprintf_r+0x1fe>
 800c9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9ae:	f7fd fcb3 	bl	800a318 <__retarget_lock_release_recursive>
 800c9b2:	89ab      	ldrh	r3, [r5, #12]
 800c9b4:	065b      	lsls	r3, r3, #25
 800c9b6:	f53f af1f 	bmi.w	800c7f8 <_vfiprintf_r+0x44>
 800c9ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9bc:	e71e      	b.n	800c7fc <_vfiprintf_r+0x48>
 800c9be:	ab03      	add	r3, sp, #12
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	462a      	mov	r2, r5
 800c9c4:	4b05      	ldr	r3, [pc, #20]	@ (800c9dc <_vfiprintf_r+0x228>)
 800c9c6:	a904      	add	r1, sp, #16
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	f7fd f999 	bl	8009d00 <_printf_i>
 800c9ce:	e7e4      	b.n	800c99a <_vfiprintf_r+0x1e6>
 800c9d0:	0800dfe8 	.word	0x0800dfe8
 800c9d4:	0800dff2 	.word	0x0800dff2
 800c9d8:	080097d1 	.word	0x080097d1
 800c9dc:	0800c791 	.word	0x0800c791
 800c9e0:	0800dfee 	.word	0x0800dfee

0800c9e4 <__swbuf_r>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	460e      	mov	r6, r1
 800c9e8:	4614      	mov	r4, r2
 800c9ea:	4605      	mov	r5, r0
 800c9ec:	b118      	cbz	r0, 800c9f6 <__swbuf_r+0x12>
 800c9ee:	6a03      	ldr	r3, [r0, #32]
 800c9f0:	b90b      	cbnz	r3, 800c9f6 <__swbuf_r+0x12>
 800c9f2:	f7fd fb31 	bl	800a058 <__sinit>
 800c9f6:	69a3      	ldr	r3, [r4, #24]
 800c9f8:	60a3      	str	r3, [r4, #8]
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	071a      	lsls	r2, r3, #28
 800c9fe:	d501      	bpl.n	800ca04 <__swbuf_r+0x20>
 800ca00:	6923      	ldr	r3, [r4, #16]
 800ca02:	b943      	cbnz	r3, 800ca16 <__swbuf_r+0x32>
 800ca04:	4621      	mov	r1, r4
 800ca06:	4628      	mov	r0, r5
 800ca08:	f000 f82a 	bl	800ca60 <__swsetup_r>
 800ca0c:	b118      	cbz	r0, 800ca16 <__swbuf_r+0x32>
 800ca0e:	f04f 37ff 	mov.w	r7, #4294967295
 800ca12:	4638      	mov	r0, r7
 800ca14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	1a98      	subs	r0, r3, r2
 800ca1c:	6963      	ldr	r3, [r4, #20]
 800ca1e:	b2f6      	uxtb	r6, r6
 800ca20:	4283      	cmp	r3, r0
 800ca22:	4637      	mov	r7, r6
 800ca24:	dc05      	bgt.n	800ca32 <__swbuf_r+0x4e>
 800ca26:	4621      	mov	r1, r4
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f7ff fdc7 	bl	800c5bc <_fflush_r>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d1ed      	bne.n	800ca0e <__swbuf_r+0x2a>
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	3b01      	subs	r3, #1
 800ca36:	60a3      	str	r3, [r4, #8]
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	6022      	str	r2, [r4, #0]
 800ca3e:	701e      	strb	r6, [r3, #0]
 800ca40:	6962      	ldr	r2, [r4, #20]
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d004      	beq.n	800ca52 <__swbuf_r+0x6e>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	07db      	lsls	r3, r3, #31
 800ca4c:	d5e1      	bpl.n	800ca12 <__swbuf_r+0x2e>
 800ca4e:	2e0a      	cmp	r6, #10
 800ca50:	d1df      	bne.n	800ca12 <__swbuf_r+0x2e>
 800ca52:	4621      	mov	r1, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	f7ff fdb1 	bl	800c5bc <_fflush_r>
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d0d9      	beq.n	800ca12 <__swbuf_r+0x2e>
 800ca5e:	e7d6      	b.n	800ca0e <__swbuf_r+0x2a>

0800ca60 <__swsetup_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4b29      	ldr	r3, [pc, #164]	@ (800cb08 <__swsetup_r+0xa8>)
 800ca64:	4605      	mov	r5, r0
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	460c      	mov	r4, r1
 800ca6a:	b118      	cbz	r0, 800ca74 <__swsetup_r+0x14>
 800ca6c:	6a03      	ldr	r3, [r0, #32]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <__swsetup_r+0x14>
 800ca70:	f7fd faf2 	bl	800a058 <__sinit>
 800ca74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca78:	0719      	lsls	r1, r3, #28
 800ca7a:	d422      	bmi.n	800cac2 <__swsetup_r+0x62>
 800ca7c:	06da      	lsls	r2, r3, #27
 800ca7e:	d407      	bmi.n	800ca90 <__swsetup_r+0x30>
 800ca80:	2209      	movs	r2, #9
 800ca82:	602a      	str	r2, [r5, #0]
 800ca84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8e:	e033      	b.n	800caf8 <__swsetup_r+0x98>
 800ca90:	0758      	lsls	r0, r3, #29
 800ca92:	d512      	bpl.n	800caba <__swsetup_r+0x5a>
 800ca94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca96:	b141      	cbz	r1, 800caaa <__swsetup_r+0x4a>
 800ca98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca9c:	4299      	cmp	r1, r3
 800ca9e:	d002      	beq.n	800caa6 <__swsetup_r+0x46>
 800caa0:	4628      	mov	r0, r5
 800caa2:	f7fe faa5 	bl	800aff0 <_free_r>
 800caa6:	2300      	movs	r3, #0
 800caa8:	6363      	str	r3, [r4, #52]	@ 0x34
 800caaa:	89a3      	ldrh	r3, [r4, #12]
 800caac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cab0:	81a3      	strh	r3, [r4, #12]
 800cab2:	2300      	movs	r3, #0
 800cab4:	6063      	str	r3, [r4, #4]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f043 0308 	orr.w	r3, r3, #8
 800cac0:	81a3      	strh	r3, [r4, #12]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	b94b      	cbnz	r3, 800cada <__swsetup_r+0x7a>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cacc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cad0:	d003      	beq.n	800cada <__swsetup_r+0x7a>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 f883 	bl	800cbe0 <__smakebuf_r>
 800cada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cade:	f013 0201 	ands.w	r2, r3, #1
 800cae2:	d00a      	beq.n	800cafa <__swsetup_r+0x9a>
 800cae4:	2200      	movs	r2, #0
 800cae6:	60a2      	str	r2, [r4, #8]
 800cae8:	6962      	ldr	r2, [r4, #20]
 800caea:	4252      	negs	r2, r2
 800caec:	61a2      	str	r2, [r4, #24]
 800caee:	6922      	ldr	r2, [r4, #16]
 800caf0:	b942      	cbnz	r2, 800cb04 <__swsetup_r+0xa4>
 800caf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caf6:	d1c5      	bne.n	800ca84 <__swsetup_r+0x24>
 800caf8:	bd38      	pop	{r3, r4, r5, pc}
 800cafa:	0799      	lsls	r1, r3, #30
 800cafc:	bf58      	it	pl
 800cafe:	6962      	ldrpl	r2, [r4, #20]
 800cb00:	60a2      	str	r2, [r4, #8]
 800cb02:	e7f4      	b.n	800caee <__swsetup_r+0x8e>
 800cb04:	2000      	movs	r0, #0
 800cb06:	e7f7      	b.n	800caf8 <__swsetup_r+0x98>
 800cb08:	20000250 	.word	0x20000250

0800cb0c <_raise_r>:
 800cb0c:	291f      	cmp	r1, #31
 800cb0e:	b538      	push	{r3, r4, r5, lr}
 800cb10:	4605      	mov	r5, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	d904      	bls.n	800cb20 <_raise_r+0x14>
 800cb16:	2316      	movs	r3, #22
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb1e:	bd38      	pop	{r3, r4, r5, pc}
 800cb20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb22:	b112      	cbz	r2, 800cb2a <_raise_r+0x1e>
 800cb24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb28:	b94b      	cbnz	r3, 800cb3e <_raise_r+0x32>
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	f000 f830 	bl	800cb90 <_getpid_r>
 800cb30:	4622      	mov	r2, r4
 800cb32:	4601      	mov	r1, r0
 800cb34:	4628      	mov	r0, r5
 800cb36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb3a:	f000 b817 	b.w	800cb6c <_kill_r>
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d00a      	beq.n	800cb58 <_raise_r+0x4c>
 800cb42:	1c59      	adds	r1, r3, #1
 800cb44:	d103      	bne.n	800cb4e <_raise_r+0x42>
 800cb46:	2316      	movs	r3, #22
 800cb48:	6003      	str	r3, [r0, #0]
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	e7e7      	b.n	800cb1e <_raise_r+0x12>
 800cb4e:	2100      	movs	r1, #0
 800cb50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb54:	4620      	mov	r0, r4
 800cb56:	4798      	blx	r3
 800cb58:	2000      	movs	r0, #0
 800cb5a:	e7e0      	b.n	800cb1e <_raise_r+0x12>

0800cb5c <raise>:
 800cb5c:	4b02      	ldr	r3, [pc, #8]	@ (800cb68 <raise+0xc>)
 800cb5e:	4601      	mov	r1, r0
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	f7ff bfd3 	b.w	800cb0c <_raise_r>
 800cb66:	bf00      	nop
 800cb68:	20000250 	.word	0x20000250

0800cb6c <_kill_r>:
 800cb6c:	b538      	push	{r3, r4, r5, lr}
 800cb6e:	4d07      	ldr	r5, [pc, #28]	@ (800cb8c <_kill_r+0x20>)
 800cb70:	2300      	movs	r3, #0
 800cb72:	4604      	mov	r4, r0
 800cb74:	4608      	mov	r0, r1
 800cb76:	4611      	mov	r1, r2
 800cb78:	602b      	str	r3, [r5, #0]
 800cb7a:	f7f6 fe8f 	bl	800389c <_kill>
 800cb7e:	1c43      	adds	r3, r0, #1
 800cb80:	d102      	bne.n	800cb88 <_kill_r+0x1c>
 800cb82:	682b      	ldr	r3, [r5, #0]
 800cb84:	b103      	cbz	r3, 800cb88 <_kill_r+0x1c>
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	bd38      	pop	{r3, r4, r5, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20000bf0 	.word	0x20000bf0

0800cb90 <_getpid_r>:
 800cb90:	f7f6 be7c 	b.w	800388c <_getpid>

0800cb94 <__swhatbuf_r>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	460c      	mov	r4, r1
 800cb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	b096      	sub	sp, #88	@ 0x58
 800cba0:	4615      	mov	r5, r2
 800cba2:	461e      	mov	r6, r3
 800cba4:	da0d      	bge.n	800cbc2 <__swhatbuf_r+0x2e>
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbac:	f04f 0100 	mov.w	r1, #0
 800cbb0:	bf14      	ite	ne
 800cbb2:	2340      	movne	r3, #64	@ 0x40
 800cbb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbb8:	2000      	movs	r0, #0
 800cbba:	6031      	str	r1, [r6, #0]
 800cbbc:	602b      	str	r3, [r5, #0]
 800cbbe:	b016      	add	sp, #88	@ 0x58
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
 800cbc2:	466a      	mov	r2, sp
 800cbc4:	f000 f848 	bl	800cc58 <_fstat_r>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	dbec      	blt.n	800cba6 <__swhatbuf_r+0x12>
 800cbcc:	9901      	ldr	r1, [sp, #4]
 800cbce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbd6:	4259      	negs	r1, r3
 800cbd8:	4159      	adcs	r1, r3
 800cbda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbde:	e7eb      	b.n	800cbb8 <__swhatbuf_r+0x24>

0800cbe0 <__smakebuf_r>:
 800cbe0:	898b      	ldrh	r3, [r1, #12]
 800cbe2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbe4:	079d      	lsls	r5, r3, #30
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	d507      	bpl.n	800cbfc <__smakebuf_r+0x1c>
 800cbec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbf0:	6023      	str	r3, [r4, #0]
 800cbf2:	6123      	str	r3, [r4, #16]
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	6163      	str	r3, [r4, #20]
 800cbf8:	b003      	add	sp, #12
 800cbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbfc:	ab01      	add	r3, sp, #4
 800cbfe:	466a      	mov	r2, sp
 800cc00:	f7ff ffc8 	bl	800cb94 <__swhatbuf_r>
 800cc04:	9f00      	ldr	r7, [sp, #0]
 800cc06:	4605      	mov	r5, r0
 800cc08:	4639      	mov	r1, r7
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7fe fd9e 	bl	800b74c <_malloc_r>
 800cc10:	b948      	cbnz	r0, 800cc26 <__smakebuf_r+0x46>
 800cc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc16:	059a      	lsls	r2, r3, #22
 800cc18:	d4ee      	bmi.n	800cbf8 <__smakebuf_r+0x18>
 800cc1a:	f023 0303 	bic.w	r3, r3, #3
 800cc1e:	f043 0302 	orr.w	r3, r3, #2
 800cc22:	81a3      	strh	r3, [r4, #12]
 800cc24:	e7e2      	b.n	800cbec <__smakebuf_r+0xc>
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	6020      	str	r0, [r4, #0]
 800cc2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	9b01      	ldr	r3, [sp, #4]
 800cc32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc36:	b15b      	cbz	r3, 800cc50 <__smakebuf_r+0x70>
 800cc38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f000 f81d 	bl	800cc7c <_isatty_r>
 800cc42:	b128      	cbz	r0, 800cc50 <__smakebuf_r+0x70>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f023 0303 	bic.w	r3, r3, #3
 800cc4a:	f043 0301 	orr.w	r3, r3, #1
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	431d      	orrs	r5, r3
 800cc54:	81a5      	strh	r5, [r4, #12]
 800cc56:	e7cf      	b.n	800cbf8 <__smakebuf_r+0x18>

0800cc58 <_fstat_r>:
 800cc58:	b538      	push	{r3, r4, r5, lr}
 800cc5a:	4d07      	ldr	r5, [pc, #28]	@ (800cc78 <_fstat_r+0x20>)
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	4604      	mov	r4, r0
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	602b      	str	r3, [r5, #0]
 800cc66:	f7f6 fe79 	bl	800395c <_fstat>
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	d102      	bne.n	800cc74 <_fstat_r+0x1c>
 800cc6e:	682b      	ldr	r3, [r5, #0]
 800cc70:	b103      	cbz	r3, 800cc74 <_fstat_r+0x1c>
 800cc72:	6023      	str	r3, [r4, #0]
 800cc74:	bd38      	pop	{r3, r4, r5, pc}
 800cc76:	bf00      	nop
 800cc78:	20000bf0 	.word	0x20000bf0

0800cc7c <_isatty_r>:
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	4d06      	ldr	r5, [pc, #24]	@ (800cc98 <_isatty_r+0x1c>)
 800cc80:	2300      	movs	r3, #0
 800cc82:	4604      	mov	r4, r0
 800cc84:	4608      	mov	r0, r1
 800cc86:	602b      	str	r3, [r5, #0]
 800cc88:	f7f6 fe78 	bl	800397c <_isatty>
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d102      	bne.n	800cc96 <_isatty_r+0x1a>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	b103      	cbz	r3, 800cc96 <_isatty_r+0x1a>
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	bd38      	pop	{r3, r4, r5, pc}
 800cc98:	20000bf0 	.word	0x20000bf0

0800cc9c <atan2>:
 800cc9c:	f000 b8a8 	b.w	800cdf0 <__ieee754_atan2>

0800cca0 <powf>:
 800cca0:	b508      	push	{r3, lr}
 800cca2:	ed2d 8b04 	vpush	{d8-d9}
 800cca6:	eeb0 8a60 	vmov.f32	s16, s1
 800ccaa:	eeb0 9a40 	vmov.f32	s18, s0
 800ccae:	f000 fb07 	bl	800d2c0 <__ieee754_powf>
 800ccb2:	eeb4 8a48 	vcmp.f32	s16, s16
 800ccb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccba:	eef0 8a40 	vmov.f32	s17, s0
 800ccbe:	d63e      	bvs.n	800cd3e <powf+0x9e>
 800ccc0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ccc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc8:	d112      	bne.n	800ccf0 <powf+0x50>
 800ccca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	d039      	beq.n	800cd48 <powf+0xa8>
 800ccd4:	eeb0 0a48 	vmov.f32	s0, s16
 800ccd8:	f000 f839 	bl	800cd4e <finitef>
 800ccdc:	b378      	cbz	r0, 800cd3e <powf+0x9e>
 800ccde:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce6:	d52a      	bpl.n	800cd3e <powf+0x9e>
 800cce8:	f7fd faea 	bl	800a2c0 <__errno>
 800ccec:	2322      	movs	r3, #34	@ 0x22
 800ccee:	e014      	b.n	800cd1a <powf+0x7a>
 800ccf0:	f000 f82d 	bl	800cd4e <finitef>
 800ccf4:	b998      	cbnz	r0, 800cd1e <powf+0x7e>
 800ccf6:	eeb0 0a49 	vmov.f32	s0, s18
 800ccfa:	f000 f828 	bl	800cd4e <finitef>
 800ccfe:	b170      	cbz	r0, 800cd1e <powf+0x7e>
 800cd00:	eeb0 0a48 	vmov.f32	s0, s16
 800cd04:	f000 f823 	bl	800cd4e <finitef>
 800cd08:	b148      	cbz	r0, 800cd1e <powf+0x7e>
 800cd0a:	eef4 8a68 	vcmp.f32	s17, s17
 800cd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd12:	d7e9      	bvc.n	800cce8 <powf+0x48>
 800cd14:	f7fd fad4 	bl	800a2c0 <__errno>
 800cd18:	2321      	movs	r3, #33	@ 0x21
 800cd1a:	6003      	str	r3, [r0, #0]
 800cd1c:	e00f      	b.n	800cd3e <powf+0x9e>
 800cd1e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800cd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd26:	d10a      	bne.n	800cd3e <powf+0x9e>
 800cd28:	eeb0 0a49 	vmov.f32	s0, s18
 800cd2c:	f000 f80f 	bl	800cd4e <finitef>
 800cd30:	b128      	cbz	r0, 800cd3e <powf+0x9e>
 800cd32:	eeb0 0a48 	vmov.f32	s0, s16
 800cd36:	f000 f80a 	bl	800cd4e <finitef>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d1d4      	bne.n	800cce8 <powf+0x48>
 800cd3e:	eeb0 0a68 	vmov.f32	s0, s17
 800cd42:	ecbd 8b04 	vpop	{d8-d9}
 800cd46:	bd08      	pop	{r3, pc}
 800cd48:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800cd4c:	e7f7      	b.n	800cd3e <powf+0x9e>

0800cd4e <finitef>:
 800cd4e:	ee10 3a10 	vmov	r3, s0
 800cd52:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800cd56:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800cd5a:	bfac      	ite	ge
 800cd5c:	2000      	movge	r0, #0
 800cd5e:	2001      	movlt	r0, #1
 800cd60:	4770      	bx	lr
	...

0800cd64 <round>:
 800cd64:	ec51 0b10 	vmov	r0, r1, d0
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800cd6e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800cd72:	2a13      	cmp	r2, #19
 800cd74:	460b      	mov	r3, r1
 800cd76:	4605      	mov	r5, r0
 800cd78:	dc1b      	bgt.n	800cdb2 <round+0x4e>
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	da0b      	bge.n	800cd96 <round+0x32>
 800cd7e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800cd82:	3201      	adds	r2, #1
 800cd84:	bf04      	itt	eq
 800cd86:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800cd8a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4619      	mov	r1, r3
 800cd92:	4610      	mov	r0, r2
 800cd94:	e015      	b.n	800cdc2 <round+0x5e>
 800cd96:	4c15      	ldr	r4, [pc, #84]	@ (800cdec <round+0x88>)
 800cd98:	4114      	asrs	r4, r2
 800cd9a:	ea04 0601 	and.w	r6, r4, r1
 800cd9e:	4306      	orrs	r6, r0
 800cda0:	d00f      	beq.n	800cdc2 <round+0x5e>
 800cda2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800cda6:	fa41 f202 	asr.w	r2, r1, r2
 800cdaa:	4413      	add	r3, r2
 800cdac:	ea23 0304 	bic.w	r3, r3, r4
 800cdb0:	e7ed      	b.n	800cd8e <round+0x2a>
 800cdb2:	2a33      	cmp	r2, #51	@ 0x33
 800cdb4:	dd08      	ble.n	800cdc8 <round+0x64>
 800cdb6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800cdba:	d102      	bne.n	800cdc2 <round+0x5e>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	f7f3 fa85 	bl	80002cc <__adddf3>
 800cdc2:	ec41 0b10 	vmov	d0, r0, r1
 800cdc6:	bd70      	pop	{r4, r5, r6, pc}
 800cdc8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800cdcc:	f04f 34ff 	mov.w	r4, #4294967295
 800cdd0:	40f4      	lsrs	r4, r6
 800cdd2:	4204      	tst	r4, r0
 800cdd4:	d0f5      	beq.n	800cdc2 <round+0x5e>
 800cdd6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800cdda:	2201      	movs	r2, #1
 800cddc:	408a      	lsls	r2, r1
 800cdde:	1952      	adds	r2, r2, r5
 800cde0:	bf28      	it	cs
 800cde2:	3301      	addcs	r3, #1
 800cde4:	ea22 0204 	bic.w	r2, r2, r4
 800cde8:	e7d2      	b.n	800cd90 <round+0x2c>
 800cdea:	bf00      	nop
 800cdec:	000fffff 	.word	0x000fffff

0800cdf0 <__ieee754_atan2>:
 800cdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	ec57 6b11 	vmov	r6, r7, d1
 800cdf8:	4273      	negs	r3, r6
 800cdfa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800cf78 <__ieee754_atan2+0x188>
 800cdfe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ce02:	4333      	orrs	r3, r6
 800ce04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ce08:	4543      	cmp	r3, r8
 800ce0a:	ec51 0b10 	vmov	r0, r1, d0
 800ce0e:	4635      	mov	r5, r6
 800ce10:	d809      	bhi.n	800ce26 <__ieee754_atan2+0x36>
 800ce12:	4244      	negs	r4, r0
 800ce14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce18:	4304      	orrs	r4, r0
 800ce1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ce1e:	4544      	cmp	r4, r8
 800ce20:	468e      	mov	lr, r1
 800ce22:	4681      	mov	r9, r0
 800ce24:	d907      	bls.n	800ce36 <__ieee754_atan2+0x46>
 800ce26:	4632      	mov	r2, r6
 800ce28:	463b      	mov	r3, r7
 800ce2a:	f7f3 fa4f 	bl	80002cc <__adddf3>
 800ce2e:	ec41 0b10 	vmov	d0, r0, r1
 800ce32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ce3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ce3e:	4334      	orrs	r4, r6
 800ce40:	d103      	bne.n	800ce4a <__ieee754_atan2+0x5a>
 800ce42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce46:	f000 b89b 	b.w	800cf80 <atan>
 800ce4a:	17bc      	asrs	r4, r7, #30
 800ce4c:	f004 0402 	and.w	r4, r4, #2
 800ce50:	ea53 0909 	orrs.w	r9, r3, r9
 800ce54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ce58:	d107      	bne.n	800ce6a <__ieee754_atan2+0x7a>
 800ce5a:	2c02      	cmp	r4, #2
 800ce5c:	d05f      	beq.n	800cf1e <__ieee754_atan2+0x12e>
 800ce5e:	2c03      	cmp	r4, #3
 800ce60:	d1e5      	bne.n	800ce2e <__ieee754_atan2+0x3e>
 800ce62:	a141      	add	r1, pc, #260	@ (adr r1, 800cf68 <__ieee754_atan2+0x178>)
 800ce64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce68:	e7e1      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800ce6a:	4315      	orrs	r5, r2
 800ce6c:	d106      	bne.n	800ce7c <__ieee754_atan2+0x8c>
 800ce6e:	f1be 0f00 	cmp.w	lr, #0
 800ce72:	da5f      	bge.n	800cf34 <__ieee754_atan2+0x144>
 800ce74:	a13e      	add	r1, pc, #248	@ (adr r1, 800cf70 <__ieee754_atan2+0x180>)
 800ce76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce7a:	e7d8      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800ce7c:	4542      	cmp	r2, r8
 800ce7e:	d10f      	bne.n	800cea0 <__ieee754_atan2+0xb0>
 800ce80:	4293      	cmp	r3, r2
 800ce82:	f104 34ff 	add.w	r4, r4, #4294967295
 800ce86:	d107      	bne.n	800ce98 <__ieee754_atan2+0xa8>
 800ce88:	2c02      	cmp	r4, #2
 800ce8a:	d84c      	bhi.n	800cf26 <__ieee754_atan2+0x136>
 800ce8c:	4b34      	ldr	r3, [pc, #208]	@ (800cf60 <__ieee754_atan2+0x170>)
 800ce8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce96:	e7ca      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800ce98:	2c02      	cmp	r4, #2
 800ce9a:	d848      	bhi.n	800cf2e <__ieee754_atan2+0x13e>
 800ce9c:	4b31      	ldr	r3, [pc, #196]	@ (800cf64 <__ieee754_atan2+0x174>)
 800ce9e:	e7f6      	b.n	800ce8e <__ieee754_atan2+0x9e>
 800cea0:	4543      	cmp	r3, r8
 800cea2:	d0e4      	beq.n	800ce6e <__ieee754_atan2+0x7e>
 800cea4:	1a9b      	subs	r3, r3, r2
 800cea6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ceaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ceae:	da1e      	bge.n	800ceee <__ieee754_atan2+0xfe>
 800ceb0:	2f00      	cmp	r7, #0
 800ceb2:	da01      	bge.n	800ceb8 <__ieee754_atan2+0xc8>
 800ceb4:	323c      	adds	r2, #60	@ 0x3c
 800ceb6:	db1e      	blt.n	800cef6 <__ieee754_atan2+0x106>
 800ceb8:	4632      	mov	r2, r6
 800ceba:	463b      	mov	r3, r7
 800cebc:	f7f3 fce6 	bl	800088c <__aeabi_ddiv>
 800cec0:	ec41 0b10 	vmov	d0, r0, r1
 800cec4:	f000 f9f4 	bl	800d2b0 <fabs>
 800cec8:	f000 f85a 	bl	800cf80 <atan>
 800cecc:	ec51 0b10 	vmov	r0, r1, d0
 800ced0:	2c01      	cmp	r4, #1
 800ced2:	d013      	beq.n	800cefc <__ieee754_atan2+0x10c>
 800ced4:	2c02      	cmp	r4, #2
 800ced6:	d015      	beq.n	800cf04 <__ieee754_atan2+0x114>
 800ced8:	2c00      	cmp	r4, #0
 800ceda:	d0a8      	beq.n	800ce2e <__ieee754_atan2+0x3e>
 800cedc:	a318      	add	r3, pc, #96	@ (adr r3, 800cf40 <__ieee754_atan2+0x150>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f7f3 f9f1 	bl	80002c8 <__aeabi_dsub>
 800cee6:	a318      	add	r3, pc, #96	@ (adr r3, 800cf48 <__ieee754_atan2+0x158>)
 800cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceec:	e014      	b.n	800cf18 <__ieee754_atan2+0x128>
 800ceee:	a118      	add	r1, pc, #96	@ (adr r1, 800cf50 <__ieee754_atan2+0x160>)
 800cef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef4:	e7ec      	b.n	800ced0 <__ieee754_atan2+0xe0>
 800cef6:	2000      	movs	r0, #0
 800cef8:	2100      	movs	r1, #0
 800cefa:	e7e9      	b.n	800ced0 <__ieee754_atan2+0xe0>
 800cefc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf00:	4619      	mov	r1, r3
 800cf02:	e794      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf04:	a30e      	add	r3, pc, #56	@ (adr r3, 800cf40 <__ieee754_atan2+0x150>)
 800cf06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0a:	f7f3 f9dd 	bl	80002c8 <__aeabi_dsub>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	a10d      	add	r1, pc, #52	@ (adr r1, 800cf48 <__ieee754_atan2+0x158>)
 800cf14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf18:	f7f3 f9d6 	bl	80002c8 <__aeabi_dsub>
 800cf1c:	e787      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf1e:	a10a      	add	r1, pc, #40	@ (adr r1, 800cf48 <__ieee754_atan2+0x158>)
 800cf20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf24:	e783      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf26:	a10c      	add	r1, pc, #48	@ (adr r1, 800cf58 <__ieee754_atan2+0x168>)
 800cf28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf2c:	e77f      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	e77c      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf34:	a106      	add	r1, pc, #24	@ (adr r1, 800cf50 <__ieee754_atan2+0x160>)
 800cf36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf3a:	e778      	b.n	800ce2e <__ieee754_atan2+0x3e>
 800cf3c:	f3af 8000 	nop.w
 800cf40:	33145c07 	.word	0x33145c07
 800cf44:	3ca1a626 	.word	0x3ca1a626
 800cf48:	54442d18 	.word	0x54442d18
 800cf4c:	400921fb 	.word	0x400921fb
 800cf50:	54442d18 	.word	0x54442d18
 800cf54:	3ff921fb 	.word	0x3ff921fb
 800cf58:	54442d18 	.word	0x54442d18
 800cf5c:	3fe921fb 	.word	0x3fe921fb
 800cf60:	0800e050 	.word	0x0800e050
 800cf64:	0800e038 	.word	0x0800e038
 800cf68:	54442d18 	.word	0x54442d18
 800cf6c:	c00921fb 	.word	0xc00921fb
 800cf70:	54442d18 	.word	0x54442d18
 800cf74:	bff921fb 	.word	0xbff921fb
 800cf78:	7ff00000 	.word	0x7ff00000
 800cf7c:	00000000 	.word	0x00000000

0800cf80 <atan>:
 800cf80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	ec55 4b10 	vmov	r4, r5, d0
 800cf88:	4bbf      	ldr	r3, [pc, #764]	@ (800d288 <atan+0x308>)
 800cf8a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800cf8e:	429e      	cmp	r6, r3
 800cf90:	46ab      	mov	fp, r5
 800cf92:	d918      	bls.n	800cfc6 <atan+0x46>
 800cf94:	4bbd      	ldr	r3, [pc, #756]	@ (800d28c <atan+0x30c>)
 800cf96:	429e      	cmp	r6, r3
 800cf98:	d801      	bhi.n	800cf9e <atan+0x1e>
 800cf9a:	d109      	bne.n	800cfb0 <atan+0x30>
 800cf9c:	b144      	cbz	r4, 800cfb0 <atan+0x30>
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	462b      	mov	r3, r5
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 f991 	bl	80002cc <__adddf3>
 800cfaa:	4604      	mov	r4, r0
 800cfac:	460d      	mov	r5, r1
 800cfae:	e006      	b.n	800cfbe <atan+0x3e>
 800cfb0:	f1bb 0f00 	cmp.w	fp, #0
 800cfb4:	f340 812b 	ble.w	800d20e <atan+0x28e>
 800cfb8:	a597      	add	r5, pc, #604	@ (adr r5, 800d218 <atan+0x298>)
 800cfba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cfbe:	ec45 4b10 	vmov	d0, r4, r5
 800cfc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	4bb2      	ldr	r3, [pc, #712]	@ (800d290 <atan+0x310>)
 800cfc8:	429e      	cmp	r6, r3
 800cfca:	d813      	bhi.n	800cff4 <atan+0x74>
 800cfcc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800cfd0:	429e      	cmp	r6, r3
 800cfd2:	d80c      	bhi.n	800cfee <atan+0x6e>
 800cfd4:	a392      	add	r3, pc, #584	@ (adr r3, 800d220 <atan+0x2a0>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4629      	mov	r1, r5
 800cfde:	f7f3 f975 	bl	80002cc <__adddf3>
 800cfe2:	4bac      	ldr	r3, [pc, #688]	@ (800d294 <atan+0x314>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f7f3 fdb7 	bl	8000b58 <__aeabi_dcmpgt>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d1e7      	bne.n	800cfbe <atan+0x3e>
 800cfee:	f04f 3aff 	mov.w	sl, #4294967295
 800cff2:	e029      	b.n	800d048 <atan+0xc8>
 800cff4:	f000 f95c 	bl	800d2b0 <fabs>
 800cff8:	4ba7      	ldr	r3, [pc, #668]	@ (800d298 <atan+0x318>)
 800cffa:	429e      	cmp	r6, r3
 800cffc:	ec55 4b10 	vmov	r4, r5, d0
 800d000:	f200 80bc 	bhi.w	800d17c <atan+0x1fc>
 800d004:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d008:	429e      	cmp	r6, r3
 800d00a:	f200 809e 	bhi.w	800d14a <atan+0x1ca>
 800d00e:	4622      	mov	r2, r4
 800d010:	462b      	mov	r3, r5
 800d012:	4620      	mov	r0, r4
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 f959 	bl	80002cc <__adddf3>
 800d01a:	4b9e      	ldr	r3, [pc, #632]	@ (800d294 <atan+0x314>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	f7f3 f953 	bl	80002c8 <__aeabi_dsub>
 800d022:	2200      	movs	r2, #0
 800d024:	4606      	mov	r6, r0
 800d026:	460f      	mov	r7, r1
 800d028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d02c:	4620      	mov	r0, r4
 800d02e:	4629      	mov	r1, r5
 800d030:	f7f3 f94c 	bl	80002cc <__adddf3>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4630      	mov	r0, r6
 800d03a:	4639      	mov	r1, r7
 800d03c:	f7f3 fc26 	bl	800088c <__aeabi_ddiv>
 800d040:	f04f 0a00 	mov.w	sl, #0
 800d044:	4604      	mov	r4, r0
 800d046:	460d      	mov	r5, r1
 800d048:	4622      	mov	r2, r4
 800d04a:	462b      	mov	r3, r5
 800d04c:	4620      	mov	r0, r4
 800d04e:	4629      	mov	r1, r5
 800d050:	f7f3 faf2 	bl	8000638 <__aeabi_dmul>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4680      	mov	r8, r0
 800d05a:	4689      	mov	r9, r1
 800d05c:	f7f3 faec 	bl	8000638 <__aeabi_dmul>
 800d060:	a371      	add	r3, pc, #452	@ (adr r3, 800d228 <atan+0x2a8>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	4606      	mov	r6, r0
 800d068:	460f      	mov	r7, r1
 800d06a:	f7f3 fae5 	bl	8000638 <__aeabi_dmul>
 800d06e:	a370      	add	r3, pc, #448	@ (adr r3, 800d230 <atan+0x2b0>)
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	f7f3 f92a 	bl	80002cc <__adddf3>
 800d078:	4632      	mov	r2, r6
 800d07a:	463b      	mov	r3, r7
 800d07c:	f7f3 fadc 	bl	8000638 <__aeabi_dmul>
 800d080:	a36d      	add	r3, pc, #436	@ (adr r3, 800d238 <atan+0x2b8>)
 800d082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d086:	f7f3 f921 	bl	80002cc <__adddf3>
 800d08a:	4632      	mov	r2, r6
 800d08c:	463b      	mov	r3, r7
 800d08e:	f7f3 fad3 	bl	8000638 <__aeabi_dmul>
 800d092:	a36b      	add	r3, pc, #428	@ (adr r3, 800d240 <atan+0x2c0>)
 800d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d098:	f7f3 f918 	bl	80002cc <__adddf3>
 800d09c:	4632      	mov	r2, r6
 800d09e:	463b      	mov	r3, r7
 800d0a0:	f7f3 faca 	bl	8000638 <__aeabi_dmul>
 800d0a4:	a368      	add	r3, pc, #416	@ (adr r3, 800d248 <atan+0x2c8>)
 800d0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0aa:	f7f3 f90f 	bl	80002cc <__adddf3>
 800d0ae:	4632      	mov	r2, r6
 800d0b0:	463b      	mov	r3, r7
 800d0b2:	f7f3 fac1 	bl	8000638 <__aeabi_dmul>
 800d0b6:	a366      	add	r3, pc, #408	@ (adr r3, 800d250 <atan+0x2d0>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	f7f3 f906 	bl	80002cc <__adddf3>
 800d0c0:	4642      	mov	r2, r8
 800d0c2:	464b      	mov	r3, r9
 800d0c4:	f7f3 fab8 	bl	8000638 <__aeabi_dmul>
 800d0c8:	a363      	add	r3, pc, #396	@ (adr r3, 800d258 <atan+0x2d8>)
 800d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	4689      	mov	r9, r1
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	4639      	mov	r1, r7
 800d0d6:	f7f3 faaf 	bl	8000638 <__aeabi_dmul>
 800d0da:	a361      	add	r3, pc, #388	@ (adr r3, 800d260 <atan+0x2e0>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	f7f3 f8f2 	bl	80002c8 <__aeabi_dsub>
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	f7f3 faa6 	bl	8000638 <__aeabi_dmul>
 800d0ec:	a35e      	add	r3, pc, #376	@ (adr r3, 800d268 <atan+0x2e8>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	f7f3 f8e9 	bl	80002c8 <__aeabi_dsub>
 800d0f6:	4632      	mov	r2, r6
 800d0f8:	463b      	mov	r3, r7
 800d0fa:	f7f3 fa9d 	bl	8000638 <__aeabi_dmul>
 800d0fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800d270 <atan+0x2f0>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f8e0 	bl	80002c8 <__aeabi_dsub>
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	f7f3 fa94 	bl	8000638 <__aeabi_dmul>
 800d110:	a359      	add	r3, pc, #356	@ (adr r3, 800d278 <atan+0x2f8>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f8d7 	bl	80002c8 <__aeabi_dsub>
 800d11a:	4632      	mov	r2, r6
 800d11c:	463b      	mov	r3, r7
 800d11e:	f7f3 fa8b 	bl	8000638 <__aeabi_dmul>
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	4640      	mov	r0, r8
 800d128:	4649      	mov	r1, r9
 800d12a:	f7f3 f8cf 	bl	80002cc <__adddf3>
 800d12e:	4622      	mov	r2, r4
 800d130:	462b      	mov	r3, r5
 800d132:	f7f3 fa81 	bl	8000638 <__aeabi_dmul>
 800d136:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	d148      	bne.n	800d1d2 <atan+0x252>
 800d140:	4620      	mov	r0, r4
 800d142:	4629      	mov	r1, r5
 800d144:	f7f3 f8c0 	bl	80002c8 <__aeabi_dsub>
 800d148:	e72f      	b.n	800cfaa <atan+0x2a>
 800d14a:	4b52      	ldr	r3, [pc, #328]	@ (800d294 <atan+0x314>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	4620      	mov	r0, r4
 800d150:	4629      	mov	r1, r5
 800d152:	f7f3 f8b9 	bl	80002c8 <__aeabi_dsub>
 800d156:	4b4f      	ldr	r3, [pc, #316]	@ (800d294 <atan+0x314>)
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	2200      	movs	r2, #0
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 f8b3 	bl	80002cc <__adddf3>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	4630      	mov	r0, r6
 800d16c:	4639      	mov	r1, r7
 800d16e:	f7f3 fb8d 	bl	800088c <__aeabi_ddiv>
 800d172:	f04f 0a01 	mov.w	sl, #1
 800d176:	4604      	mov	r4, r0
 800d178:	460d      	mov	r5, r1
 800d17a:	e765      	b.n	800d048 <atan+0xc8>
 800d17c:	4b47      	ldr	r3, [pc, #284]	@ (800d29c <atan+0x31c>)
 800d17e:	429e      	cmp	r6, r3
 800d180:	d21c      	bcs.n	800d1bc <atan+0x23c>
 800d182:	4b47      	ldr	r3, [pc, #284]	@ (800d2a0 <atan+0x320>)
 800d184:	2200      	movs	r2, #0
 800d186:	4620      	mov	r0, r4
 800d188:	4629      	mov	r1, r5
 800d18a:	f7f3 f89d 	bl	80002c8 <__aeabi_dsub>
 800d18e:	4b44      	ldr	r3, [pc, #272]	@ (800d2a0 <atan+0x320>)
 800d190:	4606      	mov	r6, r0
 800d192:	460f      	mov	r7, r1
 800d194:	2200      	movs	r2, #0
 800d196:	4620      	mov	r0, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	f7f3 fa4d 	bl	8000638 <__aeabi_dmul>
 800d19e:	4b3d      	ldr	r3, [pc, #244]	@ (800d294 <atan+0x314>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 f893 	bl	80002cc <__adddf3>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	f7f3 fb6d 	bl	800088c <__aeabi_ddiv>
 800d1b2:	f04f 0a02 	mov.w	sl, #2
 800d1b6:	4604      	mov	r4, r0
 800d1b8:	460d      	mov	r5, r1
 800d1ba:	e745      	b.n	800d048 <atan+0xc8>
 800d1bc:	4622      	mov	r2, r4
 800d1be:	462b      	mov	r3, r5
 800d1c0:	4938      	ldr	r1, [pc, #224]	@ (800d2a4 <atan+0x324>)
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f7f3 fb62 	bl	800088c <__aeabi_ddiv>
 800d1c8:	f04f 0a03 	mov.w	sl, #3
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	e73a      	b.n	800d048 <atan+0xc8>
 800d1d2:	4b35      	ldr	r3, [pc, #212]	@ (800d2a8 <atan+0x328>)
 800d1d4:	4e35      	ldr	r6, [pc, #212]	@ (800d2ac <atan+0x32c>)
 800d1d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	f7f3 f873 	bl	80002c8 <__aeabi_dsub>
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	f7f3 f86f 	bl	80002c8 <__aeabi_dsub>
 800d1ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d1f6:	f7f3 f867 	bl	80002c8 <__aeabi_dsub>
 800d1fa:	f1bb 0f00 	cmp.w	fp, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	460d      	mov	r5, r1
 800d202:	f6bf aedc 	bge.w	800cfbe <atan+0x3e>
 800d206:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d20a:	461d      	mov	r5, r3
 800d20c:	e6d7      	b.n	800cfbe <atan+0x3e>
 800d20e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d280 <atan+0x300>)
 800d210:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d214:	e6d3      	b.n	800cfbe <atan+0x3e>
 800d216:	bf00      	nop
 800d218:	54442d18 	.word	0x54442d18
 800d21c:	3ff921fb 	.word	0x3ff921fb
 800d220:	8800759c 	.word	0x8800759c
 800d224:	7e37e43c 	.word	0x7e37e43c
 800d228:	e322da11 	.word	0xe322da11
 800d22c:	3f90ad3a 	.word	0x3f90ad3a
 800d230:	24760deb 	.word	0x24760deb
 800d234:	3fa97b4b 	.word	0x3fa97b4b
 800d238:	a0d03d51 	.word	0xa0d03d51
 800d23c:	3fb10d66 	.word	0x3fb10d66
 800d240:	c54c206e 	.word	0xc54c206e
 800d244:	3fb745cd 	.word	0x3fb745cd
 800d248:	920083ff 	.word	0x920083ff
 800d24c:	3fc24924 	.word	0x3fc24924
 800d250:	5555550d 	.word	0x5555550d
 800d254:	3fd55555 	.word	0x3fd55555
 800d258:	2c6a6c2f 	.word	0x2c6a6c2f
 800d25c:	bfa2b444 	.word	0xbfa2b444
 800d260:	52defd9a 	.word	0x52defd9a
 800d264:	3fadde2d 	.word	0x3fadde2d
 800d268:	af749a6d 	.word	0xaf749a6d
 800d26c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d270:	fe231671 	.word	0xfe231671
 800d274:	3fbc71c6 	.word	0x3fbc71c6
 800d278:	9998ebc4 	.word	0x9998ebc4
 800d27c:	3fc99999 	.word	0x3fc99999
 800d280:	54442d18 	.word	0x54442d18
 800d284:	bff921fb 	.word	0xbff921fb
 800d288:	440fffff 	.word	0x440fffff
 800d28c:	7ff00000 	.word	0x7ff00000
 800d290:	3fdbffff 	.word	0x3fdbffff
 800d294:	3ff00000 	.word	0x3ff00000
 800d298:	3ff2ffff 	.word	0x3ff2ffff
 800d29c:	40038000 	.word	0x40038000
 800d2a0:	3ff80000 	.word	0x3ff80000
 800d2a4:	bff00000 	.word	0xbff00000
 800d2a8:	0800e068 	.word	0x0800e068
 800d2ac:	0800e088 	.word	0x0800e088

0800d2b0 <fabs>:
 800d2b0:	ec51 0b10 	vmov	r0, r1, d0
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d2ba:	ec43 2b10 	vmov	d0, r2, r3
 800d2be:	4770      	bx	lr

0800d2c0 <__ieee754_powf>:
 800d2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	ee10 4a90 	vmov	r4, s1
 800d2c8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800d2cc:	ed2d 8b02 	vpush	{d8}
 800d2d0:	ee10 6a10 	vmov	r6, s0
 800d2d4:	eeb0 8a40 	vmov.f32	s16, s0
 800d2d8:	eef0 8a60 	vmov.f32	s17, s1
 800d2dc:	d10c      	bne.n	800d2f8 <__ieee754_powf+0x38>
 800d2de:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800d2e2:	0076      	lsls	r6, r6, #1
 800d2e4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800d2e8:	f240 829c 	bls.w	800d824 <__ieee754_powf+0x564>
 800d2ec:	ee38 0a28 	vadd.f32	s0, s16, s17
 800d2f0:	ecbd 8b02 	vpop	{d8}
 800d2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800d2fc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800d300:	d802      	bhi.n	800d308 <__ieee754_powf+0x48>
 800d302:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d306:	d908      	bls.n	800d31a <__ieee754_powf+0x5a>
 800d308:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800d30c:	d1ee      	bne.n	800d2ec <__ieee754_powf+0x2c>
 800d30e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d312:	0064      	lsls	r4, r4, #1
 800d314:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d318:	e7e6      	b.n	800d2e8 <__ieee754_powf+0x28>
 800d31a:	2e00      	cmp	r6, #0
 800d31c:	da1e      	bge.n	800d35c <__ieee754_powf+0x9c>
 800d31e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800d322:	d22b      	bcs.n	800d37c <__ieee754_powf+0xbc>
 800d324:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d328:	d332      	bcc.n	800d390 <__ieee754_powf+0xd0>
 800d32a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800d32e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d332:	fa49 f503 	asr.w	r5, r9, r3
 800d336:	fa05 f303 	lsl.w	r3, r5, r3
 800d33a:	454b      	cmp	r3, r9
 800d33c:	d126      	bne.n	800d38c <__ieee754_powf+0xcc>
 800d33e:	f005 0501 	and.w	r5, r5, #1
 800d342:	f1c5 0502 	rsb	r5, r5, #2
 800d346:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800d34a:	d122      	bne.n	800d392 <__ieee754_powf+0xd2>
 800d34c:	2c00      	cmp	r4, #0
 800d34e:	f280 826f 	bge.w	800d830 <__ieee754_powf+0x570>
 800d352:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d356:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800d35a:	e7c9      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d35c:	2500      	movs	r5, #0
 800d35e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d362:	d1f0      	bne.n	800d346 <__ieee754_powf+0x86>
 800d364:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800d368:	f000 825c 	beq.w	800d824 <__ieee754_powf+0x564>
 800d36c:	d908      	bls.n	800d380 <__ieee754_powf+0xc0>
 800d36e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800d6d0 <__ieee754_powf+0x410>
 800d372:	2c00      	cmp	r4, #0
 800d374:	bfa8      	it	ge
 800d376:	eeb0 0a68 	vmovge.f32	s0, s17
 800d37a:	e7b9      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d37c:	2502      	movs	r5, #2
 800d37e:	e7ee      	b.n	800d35e <__ieee754_powf+0x9e>
 800d380:	2c00      	cmp	r4, #0
 800d382:	f280 8252 	bge.w	800d82a <__ieee754_powf+0x56a>
 800d386:	eeb1 0a68 	vneg.f32	s0, s17
 800d38a:	e7b1      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d38c:	2500      	movs	r5, #0
 800d38e:	e7da      	b.n	800d346 <__ieee754_powf+0x86>
 800d390:	2500      	movs	r5, #0
 800d392:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800d396:	d102      	bne.n	800d39e <__ieee754_powf+0xde>
 800d398:	ee28 0a08 	vmul.f32	s0, s16, s16
 800d39c:	e7a8      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d39e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800d3a2:	d109      	bne.n	800d3b8 <__ieee754_powf+0xf8>
 800d3a4:	2e00      	cmp	r6, #0
 800d3a6:	db07      	blt.n	800d3b8 <__ieee754_powf+0xf8>
 800d3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ac:	ecbd 8b02 	vpop	{d8}
 800d3b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	f000 bae8 	b.w	800d988 <__ieee754_sqrtf>
 800d3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800d3bc:	f000 fa50 	bl	800d860 <fabsf>
 800d3c0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d3c4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d3c8:	4647      	mov	r7, r8
 800d3ca:	d002      	beq.n	800d3d2 <__ieee754_powf+0x112>
 800d3cc:	f1b8 0f00 	cmp.w	r8, #0
 800d3d0:	d117      	bne.n	800d402 <__ieee754_powf+0x142>
 800d3d2:	2c00      	cmp	r4, #0
 800d3d4:	bfbc      	itt	lt
 800d3d6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800d3da:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d3de:	2e00      	cmp	r6, #0
 800d3e0:	da86      	bge.n	800d2f0 <__ieee754_powf+0x30>
 800d3e2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d3e6:	ea58 0805 	orrs.w	r8, r8, r5
 800d3ea:	d104      	bne.n	800d3f6 <__ieee754_powf+0x136>
 800d3ec:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d3f0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d3f4:	e77c      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d3f6:	2d01      	cmp	r5, #1
 800d3f8:	f47f af7a 	bne.w	800d2f0 <__ieee754_powf+0x30>
 800d3fc:	eeb1 0a40 	vneg.f32	s0, s0
 800d400:	e776      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d402:	0ff0      	lsrs	r0, r6, #31
 800d404:	3801      	subs	r0, #1
 800d406:	ea55 0300 	orrs.w	r3, r5, r0
 800d40a:	d104      	bne.n	800d416 <__ieee754_powf+0x156>
 800d40c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800d410:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800d414:	e76c      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d416:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800d41a:	d973      	bls.n	800d504 <__ieee754_powf+0x244>
 800d41c:	4bad      	ldr	r3, [pc, #692]	@ (800d6d4 <__ieee754_powf+0x414>)
 800d41e:	4598      	cmp	r8, r3
 800d420:	d808      	bhi.n	800d434 <__ieee754_powf+0x174>
 800d422:	2c00      	cmp	r4, #0
 800d424:	da0b      	bge.n	800d43e <__ieee754_powf+0x17e>
 800d426:	2000      	movs	r0, #0
 800d428:	ecbd 8b02 	vpop	{d8}
 800d42c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	f000 baa4 	b.w	800d97c <__math_oflowf>
 800d434:	4ba8      	ldr	r3, [pc, #672]	@ (800d6d8 <__ieee754_powf+0x418>)
 800d436:	4598      	cmp	r8, r3
 800d438:	d908      	bls.n	800d44c <__ieee754_powf+0x18c>
 800d43a:	2c00      	cmp	r4, #0
 800d43c:	dcf3      	bgt.n	800d426 <__ieee754_powf+0x166>
 800d43e:	2000      	movs	r0, #0
 800d440:	ecbd 8b02 	vpop	{d8}
 800d444:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d448:	f000 ba92 	b.w	800d970 <__math_uflowf>
 800d44c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d450:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d454:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800d6dc <__ieee754_powf+0x41c>
 800d458:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800d45c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800d460:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d464:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800d468:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d46c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d470:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800d6e0 <__ieee754_powf+0x420>
 800d474:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800d478:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800d6e4 <__ieee754_powf+0x424>
 800d47c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d480:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800d6e8 <__ieee754_powf+0x428>
 800d484:	eef0 6a67 	vmov.f32	s13, s15
 800d488:	eee0 6a07 	vfma.f32	s13, s0, s14
 800d48c:	ee16 3a90 	vmov	r3, s13
 800d490:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d494:	f023 030f 	bic.w	r3, r3, #15
 800d498:	ee06 3a90 	vmov	s13, r3
 800d49c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800d4a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d4a4:	3d01      	subs	r5, #1
 800d4a6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800d4aa:	4305      	orrs	r5, r0
 800d4ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4b0:	f024 040f 	bic.w	r4, r4, #15
 800d4b4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800d4b8:	bf18      	it	ne
 800d4ba:	eeb0 8a47 	vmovne.f32	s16, s14
 800d4be:	ee07 4a10 	vmov	s14, r4
 800d4c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d4c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d4d2:	ee07 4a10 	vmov	s14, r4
 800d4d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d4de:	ee17 1a10 	vmov	r1, s14
 800d4e2:	2900      	cmp	r1, #0
 800d4e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d4e8:	f340 80dd 	ble.w	800d6a6 <__ieee754_powf+0x3e6>
 800d4ec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800d4f0:	f240 80ca 	bls.w	800d688 <__ieee754_powf+0x3c8>
 800d4f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fc:	bf4c      	ite	mi
 800d4fe:	2001      	movmi	r0, #1
 800d500:	2000      	movpl	r0, #0
 800d502:	e791      	b.n	800d428 <__ieee754_powf+0x168>
 800d504:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800d508:	bf01      	itttt	eq
 800d50a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800d6ec <__ieee754_powf+0x42c>
 800d50e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800d512:	f06f 0317 	mvneq.w	r3, #23
 800d516:	ee17 7a90 	vmoveq	r7, s15
 800d51a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800d51e:	bf18      	it	ne
 800d520:	2300      	movne	r3, #0
 800d522:	3a7f      	subs	r2, #127	@ 0x7f
 800d524:	441a      	add	r2, r3
 800d526:	4b72      	ldr	r3, [pc, #456]	@ (800d6f0 <__ieee754_powf+0x430>)
 800d528:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800d52c:	429f      	cmp	r7, r3
 800d52e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800d532:	dd06      	ble.n	800d542 <__ieee754_powf+0x282>
 800d534:	4b6f      	ldr	r3, [pc, #444]	@ (800d6f4 <__ieee754_powf+0x434>)
 800d536:	429f      	cmp	r7, r3
 800d538:	f340 80a4 	ble.w	800d684 <__ieee754_powf+0x3c4>
 800d53c:	3201      	adds	r2, #1
 800d53e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800d542:	2600      	movs	r6, #0
 800d544:	4b6c      	ldr	r3, [pc, #432]	@ (800d6f8 <__ieee754_powf+0x438>)
 800d546:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800d54a:	ee07 1a10 	vmov	s14, r1
 800d54e:	edd3 5a00 	vldr	s11, [r3]
 800d552:	4b6a      	ldr	r3, [pc, #424]	@ (800d6fc <__ieee754_powf+0x43c>)
 800d554:	ee75 7a87 	vadd.f32	s15, s11, s14
 800d558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d55c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800d560:	1049      	asrs	r1, r1, #1
 800d562:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800d566:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800d56a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800d56e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800d572:	ee07 1a90 	vmov	s15, r1
 800d576:	ee26 5a24 	vmul.f32	s10, s12, s9
 800d57a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800d57e:	ee15 7a10 	vmov	r7, s10
 800d582:	401f      	ands	r7, r3
 800d584:	ee06 7a90 	vmov	s13, r7
 800d588:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800d58c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800d590:	ee65 7a05 	vmul.f32	s15, s10, s10
 800d594:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d598:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d700 <__ieee754_powf+0x440>
 800d59c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d704 <__ieee754_powf+0x444>
 800d5a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800d5a4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d708 <__ieee754_powf+0x448>
 800d5a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d5ac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800d6dc <__ieee754_powf+0x41c>
 800d5b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d5b4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800d70c <__ieee754_powf+0x44c>
 800d5b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d5bc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800d710 <__ieee754_powf+0x450>
 800d5c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800d5c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d5c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800d5cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800d5d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d5d4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800d5d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800d5dc:	eef0 5a67 	vmov.f32	s11, s15
 800d5e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800d5e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d5e8:	ee15 1a90 	vmov	r1, s11
 800d5ec:	4019      	ands	r1, r3
 800d5ee:	ee05 1a90 	vmov	s11, r1
 800d5f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800d5f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800d5fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800d602:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d606:	eeb0 6a67 	vmov.f32	s12, s15
 800d60a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d60e:	ee16 1a10 	vmov	r1, s12
 800d612:	4019      	ands	r1, r3
 800d614:	ee06 1a10 	vmov	s12, r1
 800d618:	eeb0 7a46 	vmov.f32	s14, s12
 800d61c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800d620:	493c      	ldr	r1, [pc, #240]	@ (800d714 <__ieee754_powf+0x454>)
 800d622:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800d626:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d62a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d718 <__ieee754_powf+0x458>
 800d62e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800d71c <__ieee754_powf+0x45c>
 800d632:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d636:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d720 <__ieee754_powf+0x460>
 800d63a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d63e:	ed91 7a00 	vldr	s14, [r1]
 800d642:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d646:	ee07 2a10 	vmov	s14, r2
 800d64a:	eef0 6a67 	vmov.f32	s13, s15
 800d64e:	4a35      	ldr	r2, [pc, #212]	@ (800d724 <__ieee754_powf+0x464>)
 800d650:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d654:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800d658:	ed92 5a00 	vldr	s10, [r2]
 800d65c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d660:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d664:	ee76 6a87 	vadd.f32	s13, s13, s14
 800d668:	ee16 2a90 	vmov	r2, s13
 800d66c:	4013      	ands	r3, r2
 800d66e:	ee06 3a90 	vmov	s13, r3
 800d672:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d676:	ee37 7a45 	vsub.f32	s14, s14, s10
 800d67a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d67e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d682:	e70f      	b.n	800d4a4 <__ieee754_powf+0x1e4>
 800d684:	2601      	movs	r6, #1
 800d686:	e75d      	b.n	800d544 <__ieee754_powf+0x284>
 800d688:	d152      	bne.n	800d730 <__ieee754_powf+0x470>
 800d68a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d728 <__ieee754_powf+0x468>
 800d68e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d692:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d696:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d69e:	f73f af29 	bgt.w	800d4f4 <__ieee754_powf+0x234>
 800d6a2:	2386      	movs	r3, #134	@ 0x86
 800d6a4:	e048      	b.n	800d738 <__ieee754_powf+0x478>
 800d6a6:	4a21      	ldr	r2, [pc, #132]	@ (800d72c <__ieee754_powf+0x46c>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d907      	bls.n	800d6bc <__ieee754_powf+0x3fc>
 800d6ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b4:	bf4c      	ite	mi
 800d6b6:	2001      	movmi	r0, #1
 800d6b8:	2000      	movpl	r0, #0
 800d6ba:	e6c1      	b.n	800d440 <__ieee754_powf+0x180>
 800d6bc:	d138      	bne.n	800d730 <__ieee754_powf+0x470>
 800d6be:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d6c2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ca:	dbea      	blt.n	800d6a2 <__ieee754_powf+0x3e2>
 800d6cc:	e7ee      	b.n	800d6ac <__ieee754_powf+0x3ec>
 800d6ce:	bf00      	nop
 800d6d0:	00000000 	.word	0x00000000
 800d6d4:	3f7ffff3 	.word	0x3f7ffff3
 800d6d8:	3f800007 	.word	0x3f800007
 800d6dc:	3eaaaaab 	.word	0x3eaaaaab
 800d6e0:	3fb8aa3b 	.word	0x3fb8aa3b
 800d6e4:	36eca570 	.word	0x36eca570
 800d6e8:	3fb8aa00 	.word	0x3fb8aa00
 800d6ec:	4b800000 	.word	0x4b800000
 800d6f0:	001cc471 	.word	0x001cc471
 800d6f4:	005db3d6 	.word	0x005db3d6
 800d6f8:	0800e0b8 	.word	0x0800e0b8
 800d6fc:	fffff000 	.word	0xfffff000
 800d700:	3e6c3255 	.word	0x3e6c3255
 800d704:	3e53f142 	.word	0x3e53f142
 800d708:	3e8ba305 	.word	0x3e8ba305
 800d70c:	3edb6db7 	.word	0x3edb6db7
 800d710:	3f19999a 	.word	0x3f19999a
 800d714:	0800e0a8 	.word	0x0800e0a8
 800d718:	3f76384f 	.word	0x3f76384f
 800d71c:	3f763800 	.word	0x3f763800
 800d720:	369dc3a0 	.word	0x369dc3a0
 800d724:	0800e0b0 	.word	0x0800e0b0
 800d728:	3338aa3c 	.word	0x3338aa3c
 800d72c:	43160000 	.word	0x43160000
 800d730:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d734:	d971      	bls.n	800d81a <__ieee754_powf+0x55a>
 800d736:	15db      	asrs	r3, r3, #23
 800d738:	3b7e      	subs	r3, #126	@ 0x7e
 800d73a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d73e:	4118      	asrs	r0, r3
 800d740:	4408      	add	r0, r1
 800d742:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d746:	4a3c      	ldr	r2, [pc, #240]	@ (800d838 <__ieee754_powf+0x578>)
 800d748:	3b7f      	subs	r3, #127	@ 0x7f
 800d74a:	411a      	asrs	r2, r3
 800d74c:	4002      	ands	r2, r0
 800d74e:	ee07 2a10 	vmov	s14, r2
 800d752:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d756:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d75a:	f1c3 0317 	rsb	r3, r3, #23
 800d75e:	4118      	asrs	r0, r3
 800d760:	2900      	cmp	r1, #0
 800d762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d766:	bfb8      	it	lt
 800d768:	4240      	neglt	r0, r0
 800d76a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d76e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800d83c <__ieee754_powf+0x57c>
 800d772:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800d840 <__ieee754_powf+0x580>
 800d776:	ee17 3a10 	vmov	r3, s14
 800d77a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d77e:	f023 030f 	bic.w	r3, r3, #15
 800d782:	ee07 3a10 	vmov	s14, r3
 800d786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d78a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d78e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d792:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800d844 <__ieee754_powf+0x584>
 800d796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d79a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d79e:	eef0 6a67 	vmov.f32	s13, s15
 800d7a2:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d7a6:	eef0 5a66 	vmov.f32	s11, s13
 800d7aa:	eee7 5a46 	vfms.f32	s11, s14, s12
 800d7ae:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d7b2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d7b6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800d848 <__ieee754_powf+0x588>
 800d7ba:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800d84c <__ieee754_powf+0x58c>
 800d7be:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d7c2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800d850 <__ieee754_powf+0x590>
 800d7c6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d7ca:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d854 <__ieee754_powf+0x594>
 800d7ce:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d7d2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800d858 <__ieee754_powf+0x598>
 800d7d6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d7da:	eeb0 6a66 	vmov.f32	s12, s13
 800d7de:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800d7e2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800d7e6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800d7ea:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d7ee:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800d7f2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800d7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d7fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d802:	ee10 3a10 	vmov	r3, s0
 800d806:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d80a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d80e:	da06      	bge.n	800d81e <__ieee754_powf+0x55e>
 800d810:	f000 f82e 	bl	800d870 <scalbnf>
 800d814:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d818:	e56a      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d81a:	2000      	movs	r0, #0
 800d81c:	e7a5      	b.n	800d76a <__ieee754_powf+0x4aa>
 800d81e:	ee00 3a10 	vmov	s0, r3
 800d822:	e7f7      	b.n	800d814 <__ieee754_powf+0x554>
 800d824:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d828:	e562      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d82a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800d85c <__ieee754_powf+0x59c>
 800d82e:	e55f      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d830:	eeb0 0a48 	vmov.f32	s0, s16
 800d834:	e55c      	b.n	800d2f0 <__ieee754_powf+0x30>
 800d836:	bf00      	nop
 800d838:	ff800000 	.word	0xff800000
 800d83c:	3f317218 	.word	0x3f317218
 800d840:	3f317200 	.word	0x3f317200
 800d844:	35bfbe8c 	.word	0x35bfbe8c
 800d848:	b5ddea0e 	.word	0xb5ddea0e
 800d84c:	3331bb4c 	.word	0x3331bb4c
 800d850:	388ab355 	.word	0x388ab355
 800d854:	bb360b61 	.word	0xbb360b61
 800d858:	3e2aaaab 	.word	0x3e2aaaab
 800d85c:	00000000 	.word	0x00000000

0800d860 <fabsf>:
 800d860:	ee10 3a10 	vmov	r3, s0
 800d864:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d868:	ee00 3a10 	vmov	s0, r3
 800d86c:	4770      	bx	lr
	...

0800d870 <scalbnf>:
 800d870:	ee10 3a10 	vmov	r3, s0
 800d874:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d878:	d02b      	beq.n	800d8d2 <scalbnf+0x62>
 800d87a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d87e:	d302      	bcc.n	800d886 <scalbnf+0x16>
 800d880:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d884:	4770      	bx	lr
 800d886:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d88a:	d123      	bne.n	800d8d4 <scalbnf+0x64>
 800d88c:	4b24      	ldr	r3, [pc, #144]	@ (800d920 <scalbnf+0xb0>)
 800d88e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d924 <scalbnf+0xb4>
 800d892:	4298      	cmp	r0, r3
 800d894:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d898:	db17      	blt.n	800d8ca <scalbnf+0x5a>
 800d89a:	ee10 3a10 	vmov	r3, s0
 800d89e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d8a2:	3a19      	subs	r2, #25
 800d8a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d8a8:	4288      	cmp	r0, r1
 800d8aa:	dd15      	ble.n	800d8d8 <scalbnf+0x68>
 800d8ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d928 <scalbnf+0xb8>
 800d8b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d92c <scalbnf+0xbc>
 800d8b4:	ee10 3a10 	vmov	r3, s0
 800d8b8:	eeb0 7a67 	vmov.f32	s14, s15
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	bfb8      	it	lt
 800d8c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800d8c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d8c8:	4770      	bx	lr
 800d8ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d930 <scalbnf+0xc0>
 800d8ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d8d2:	4770      	bx	lr
 800d8d4:	0dd2      	lsrs	r2, r2, #23
 800d8d6:	e7e5      	b.n	800d8a4 <scalbnf+0x34>
 800d8d8:	4410      	add	r0, r2
 800d8da:	28fe      	cmp	r0, #254	@ 0xfe
 800d8dc:	dce6      	bgt.n	800d8ac <scalbnf+0x3c>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	dd06      	ble.n	800d8f0 <scalbnf+0x80>
 800d8e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d8e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d8ea:	ee00 3a10 	vmov	s0, r3
 800d8ee:	4770      	bx	lr
 800d8f0:	f110 0f16 	cmn.w	r0, #22
 800d8f4:	da09      	bge.n	800d90a <scalbnf+0x9a>
 800d8f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d930 <scalbnf+0xc0>
 800d8fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d934 <scalbnf+0xc4>
 800d8fe:	ee10 3a10 	vmov	r3, s0
 800d902:	eeb0 7a67 	vmov.f32	s14, s15
 800d906:	2b00      	cmp	r3, #0
 800d908:	e7d9      	b.n	800d8be <scalbnf+0x4e>
 800d90a:	3019      	adds	r0, #25
 800d90c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d910:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d914:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d938 <scalbnf+0xc8>
 800d918:	ee07 3a90 	vmov	s15, r3
 800d91c:	e7d7      	b.n	800d8ce <scalbnf+0x5e>
 800d91e:	bf00      	nop
 800d920:	ffff3cb0 	.word	0xffff3cb0
 800d924:	4c000000 	.word	0x4c000000
 800d928:	7149f2ca 	.word	0x7149f2ca
 800d92c:	f149f2ca 	.word	0xf149f2ca
 800d930:	0da24260 	.word	0x0da24260
 800d934:	8da24260 	.word	0x8da24260
 800d938:	33000000 	.word	0x33000000

0800d93c <with_errnof>:
 800d93c:	b510      	push	{r4, lr}
 800d93e:	ed2d 8b02 	vpush	{d8}
 800d942:	eeb0 8a40 	vmov.f32	s16, s0
 800d946:	4604      	mov	r4, r0
 800d948:	f7fc fcba 	bl	800a2c0 <__errno>
 800d94c:	eeb0 0a48 	vmov.f32	s0, s16
 800d950:	ecbd 8b02 	vpop	{d8}
 800d954:	6004      	str	r4, [r0, #0]
 800d956:	bd10      	pop	{r4, pc}

0800d958 <xflowf>:
 800d958:	b130      	cbz	r0, 800d968 <xflowf+0x10>
 800d95a:	eef1 7a40 	vneg.f32	s15, s0
 800d95e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d962:	2022      	movs	r0, #34	@ 0x22
 800d964:	f7ff bfea 	b.w	800d93c <with_errnof>
 800d968:	eef0 7a40 	vmov.f32	s15, s0
 800d96c:	e7f7      	b.n	800d95e <xflowf+0x6>
	...

0800d970 <__math_uflowf>:
 800d970:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d978 <__math_uflowf+0x8>
 800d974:	f7ff bff0 	b.w	800d958 <xflowf>
 800d978:	10000000 	.word	0x10000000

0800d97c <__math_oflowf>:
 800d97c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d984 <__math_oflowf+0x8>
 800d980:	f7ff bfea 	b.w	800d958 <xflowf>
 800d984:	70000000 	.word	0x70000000

0800d988 <__ieee754_sqrtf>:
 800d988:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d98c:	4770      	bx	lr
	...

0800d990 <_init>:
 800d990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d992:	bf00      	nop
 800d994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d996:	bc08      	pop	{r3}
 800d998:	469e      	mov	lr, r3
 800d99a:	4770      	bx	lr

0800d99c <_fini>:
 800d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d99e:	bf00      	nop
 800d9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a2:	bc08      	pop	{r3}
 800d9a4:	469e      	mov	lr, r3
 800d9a6:	4770      	bx	lr
