
PCB_Flight_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a0  0800fbf8  0800fbf8  00010bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010398  08010398  000122b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010398  08010398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103a0  080103a0  000122b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103a0  080103a0  000113a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080103a4  080103a4  000113a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  080103a8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  200002b0  08010658  000122b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca0  08010658  00012ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fff  00000000  00000000  000122e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  000252df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f30  00000000  00000000  000290b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214ea  00000000  00000000  00029fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001702d  00000000  00000000  0004b4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c866c  00000000  00000000  000624f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ab63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b44  00000000  00000000  0012aba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001316ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fbe0 	.word	0x0800fbe0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002b4 	.word	0x200002b4
 800020c:	0800fbe0 	.word	0x0800fbe0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <invSqrt>:

#define SAMPLE_FREQ_DEF  512.0f   // sample frequency in Hz
#define BETA_DEF         0.1f     // 2 * proportional gain

// Inverse square root approximation (fast)
static float invSqrt(float x) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 800102e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001032:	f00d febd 	bl	800edb0 <sqrtf>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800103e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001042:	eef0 7a66 	vmov.f32	s15, s13
}
 8001046:	eeb0 0a67 	vmov.f32	s0, s15
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Madgwick_init>:

void Madgwick_init(MadgwickAHRS *ahrs, float sampleFrequency) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	ed87 0a00 	vstr	s0, [r7]
    ahrs->beta = BETA_DEF;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <Madgwick_init+0x58>)
 8001060:	601a      	str	r2, [r3, #0]
    ahrs->q0 = 1.0f;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001068:	605a      	str	r2, [r3, #4]
    ahrs->q1 = 0.0f;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
    ahrs->q2 = 0.0f;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    ahrs->q3 = 0.0f;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
    ahrs->invSampleFreq = 1.0f / sampleFrequency;
 8001082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001086:	ed97 7a00 	vldr	s14, [r7]
 800108a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a05 	vstr	s15, [r3, #20]
    ahrs->anglesComputed = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	3dcccccd 	.word	0x3dcccccd

080010ac <Madgwick_update>:

void Madgwick_update(MadgwickAHRS *ahrs, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0b2      	sub	sp, #200	@ 0xc8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80010b4:	ed87 0a08 	vstr	s0, [r7, #32]
 80010b8:	edc7 0a07 	vstr	s1, [r7, #28]
 80010bc:	ed87 1a06 	vstr	s2, [r7, #24]
 80010c0:	edc7 1a05 	vstr	s3, [r7, #20]
 80010c4:	ed87 2a04 	vstr	s4, [r7, #16]
 80010c8:	edc7 2a03 	vstr	s5, [r7, #12]
 80010cc:	ed87 3a02 	vstr	s6, [r7, #8]
 80010d0:	edc7 3a01 	vstr	s7, [r7, #4]
 80010d4:	ed87 4a00 	vstr	s8, [r7]
//    ahrs->q2 *= recipNorm;
//    ahrs->q3 *= recipNorm;
//    ahrs->anglesComputed = 0;


	float q0 = ahrs->q0, q1 = ahrs->q1, q2 = ahrs->q2, q3 = ahrs->q3;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80010f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx;
	float _2q0 = 2.0f * q0;
 80010f8:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80010fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001100:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	float _2q1 = 2.0f * q1;
 8001104:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001108:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800110c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	float _2q2 = 2.0f * q2;
 8001110:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001114:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001118:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	float _2q3 = 2.0f * q3;
 800111c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001120:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001124:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	float _2q0q2 = 2.0f * q0 * q2;
 8001128:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	float _2q2q3 = 2.0f * q2 * q3;
 800113c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001140:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001144:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114c:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	float q0q0 = q0 * q0;
 8001150:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001158:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	float q0q1 = q0 * q1;
 800115c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001160:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	float q0q2 = q0 * q2;
 800116c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001170:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001178:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	float q0q3 = q0 * q3;
 800117c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001180:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001188:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	float q1q1 = q1 * q1;
 800118c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001190:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001194:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	float q1q2 = q1 * q2;
 8001198:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 800119c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	float q1q3 = q1 * q3;
 80011a8:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 80011ac:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	float q2q2 = q2 * q2;
 80011b8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c0:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	float q2q3 = q2 * q3;
 80011c4:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 80011c8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	float q3q3 = q3 * q3;
 80011d4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011dc:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

	// Use IMU algorithm if magnetometer measurement invalid
	if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80011e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ec:	d11e      	bne.n	800122c <Madgwick_update+0x180>
 80011ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	d117      	bne.n	800122c <Madgwick_update+0x180>
 80011fc:	edd7 7a00 	vldr	s15, [r7]
 8001200:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d110      	bne.n	800122c <Madgwick_update+0x180>
		Madgwick_updateIMU(ahrs, gx, gy, gz, ax, ay, az);
 800120a:	edd7 2a03 	vldr	s5, [r7, #12]
 800120e:	ed97 2a04 	vldr	s4, [r7, #16]
 8001212:	edd7 1a05 	vldr	s3, [r7, #20]
 8001216:	ed97 1a06 	vldr	s2, [r7, #24]
 800121a:	edd7 0a07 	vldr	s1, [r7, #28]
 800121e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001224:	f000 fdce 	bl	8001dc4 <Madgwick_updateIMU>
		return;
 8001228:	f000 bdc8 	b.w	8001dbc <Madgwick_update+0xd10>
	}

	// Convert gyroscope degrees/sec to radians/sec
	gx *= 0.0174533f;
 800122c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001230:	ed9f 7afd 	vldr	s14, [pc, #1012]	@ 8001628 <Madgwick_update+0x57c>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= 0.0174533f;
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ed9f 7af9 	vldr	s14, [pc, #996]	@ 8001628 <Madgwick_update+0x57c>
 8001244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001248:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= 0.0174533f;
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ed9f 7af5 	vldr	s14, [pc, #980]	@ 8001628 <Madgwick_update+0x57c>
 8001254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001258:	edc7 7a06 	vstr	s15, [r7, #24]

	// Normalize accelerometer
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800125c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001260:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001264:	edd7 7a04 	vldr	s15, [r7, #16]
 8001268:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800126c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001270:	edd7 7a03 	vldr	s15, [r7, #12]
 8001274:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f7ff fed0 	bl	8001024 <invSqrt>
 8001284:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	ax *= recipNorm;
 8001288:	ed97 7a05 	vldr	s14, [r7, #20]
 800128c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 8001298:	ed97 7a04 	vldr	s14, [r7, #16]
 800129c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a4:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 80012a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ac:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalize magnetometer
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80012b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012bc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	f7ff fea2 	bl	8001024 <invSqrt>
 80012e0:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	mx *= recipNorm;
 80012e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012e8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f0:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 80012f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 8001304:	ed97 7a00 	vldr	s14, [r7]
 8001308:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800130c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001310:	edc7 7a00 	vstr	s15, [r7]

	// Reference direction of Earth's magnetic field
	_2q0mx = 2.0f * q0 * mx;
 8001314:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001318:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800131c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	_2q0my = 2.0f * q0 * my;
 8001328:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 800132c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001330:	ed97 7a01 	vldr	s14, [r7, #4]
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	_2q0mz = 2.0f * q0 * mz;
 800133c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001340:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001344:	ed97 7a00 	vldr	s14, [r7]
 8001348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	_2q1mx = 2.0f * q1 * mx;
 8001350:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001354:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001358:	ed97 7a02 	vldr	s14, [r7, #8]
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001364:	ed97 7a02 	vldr	s14, [r7, #8]
 8001368:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800136c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001370:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001374:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001384:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001390:	edd7 6a02 	vldr	s13, [r7, #8]
 8001394:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ac:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b8:	edd7 6a2c 	vldr	s13, [r7, #176]	@ 0xb0
 80013bc:	edd7 7a00 	vldr	s15, [r7]
 80013c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013c4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d0:	edd7 6a02 	vldr	s13, [r7, #8]
 80013d4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80013d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e0:	edd7 6a02 	vldr	s13, [r7, #8]
 80013e4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80013f4:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80013f8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	edd7 6a01 	vldr	s13, [r7, #4]
 8001404:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001410:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001414:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001424:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001430:	edd7 6a01 	vldr	s13, [r7, #4]
 8001434:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001440:	edd7 6a01 	vldr	s13, [r7, #4]
 8001444:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8001454:	edd7 7a00 	vldr	s15, [r7]
 8001458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800145c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001468:	edd7 6a01 	vldr	s13, [r7, #4]
 800146c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
	float _2bx = sqrt(hx * hx + hy * hy);
 800147c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001480:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001484:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001488:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800148c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001490:	ee17 0a90 	vmov	r0, s15
 8001494:	f7ff f878 	bl	8000588 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	ec43 2b10 	vmov	d0, r2, r3
 80014a0:	f00d fc02 	bl	800eca8 <sqrt>
 80014a4:	ec53 2b10 	vmov	r2, r3, d0
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fbbc 	bl	8000c28 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	65bb      	str	r3, [r7, #88]	@ 0x58
	float _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80014b4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80014b8:	eeb1 7a67 	vneg.f32	s14, s15
 80014bc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80014c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80014c8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014d4:	edd7 6a00 	vldr	s13, [r7]
 80014d8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80014dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e4:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80014e8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80014ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f4:	edd7 6a00 	vldr	s13, [r7]
 80014f8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001504:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8001508:	edd7 7a01 	vldr	s15, [r7, #4]
 800150c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001510:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151c:	edd7 6a00 	vldr	s13, [r7]
 8001520:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152c:	edd7 6a00 	vldr	s13, [r7]
 8001530:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	float _4bx = 2.0f * _2bx;
 8001540:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001544:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001548:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	float _4bz = 2.0f * _2bz;
 800154c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001550:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001554:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	// Gradient descent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001558:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800155c:	eeb1 7a67 	vneg.f32	s14, s15
 8001560:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001564:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001568:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800156c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001580:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001584:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001588:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800158c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001590:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001594:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80015a4:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80015a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ac:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80015b0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80015b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015b8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80015bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015c0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015c8:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 80015cc:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80015d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015d4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80015d8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ec:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 80015f0:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80015f4:	eef1 6a67 	vneg.f32	s13, s15
 80015f8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80015fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001600:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001604:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001608:	ee66 7a27 	vmul.f32	s15, s12, s15
 800160c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001610:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001614:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001618:	ee36 6a67 	vsub.f32	s12, s12, s15
 800161c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001620:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001624:	e002      	b.n	800162c <Madgwick_update+0x580>
 8001626:	bf00      	nop
 8001628:	3c8efa39 	.word	0x3c8efa39
 800162c:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001630:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001634:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001638:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800163c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001640:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001644:	edd7 7a01 	vldr	s15, [r7, #4]
 8001648:	ee76 7a67 	vsub.f32	s15, s12, s15
 800164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001650:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001654:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001658:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800165c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001660:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8001664:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001668:	ee36 6a27 	vadd.f32	s12, s12, s15
 800166c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001670:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001674:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001678:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800167c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001680:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001684:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001688:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800168c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001690:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001694:	edd7 7a00 	vldr	s15, [r7]
 8001698:	ee76 7a67 	vsub.f32	s15, s12, s15
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80016a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80016a8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80016ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016b0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80016b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80016c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c8:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80016cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016d0:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80016d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016e0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80016f0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016f8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80016fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001700:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001704:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001708:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001714:	edd7 7a03 	vldr	s15, [r7, #12]
 8001718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001724:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001728:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800172c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001730:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001734:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001738:	ee36 6a67 	vsub.f32	s12, s12, s15
 800173c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001740:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001744:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001748:	ee26 6a27 	vmul.f32	s12, s12, s15
 800174c:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 8001750:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001754:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001758:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800175c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001760:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001764:	edd7 7a02 	vldr	s15, [r7, #8]
 8001768:	ee76 7a67 	vsub.f32	s15, s12, s15
 800176c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001774:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001778:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800177c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001780:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001784:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800178c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001790:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001794:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001798:	ee36 6a67 	vsub.f32	s12, s12, s15
 800179c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017a4:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 80017a8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80017ac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80017b0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80017b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c8:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017cc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80017d0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80017d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d8:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 80017dc:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80017e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e8:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 80017ec:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80017f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017f4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80017f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017fc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001800:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001804:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001808:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800180c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001810:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001814:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001818:	ee36 6a27 	vadd.f32	s12, s12, s15
 800181c:	edd7 7a00 	vldr	s15, [r7]
 8001820:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 8001830:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001834:	eeb1 7a67 	vneg.f32	s14, s15
 8001838:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800183c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001840:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001844:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001848:	edd7 7a05 	vldr	s15, [r7, #20]
 800184c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001854:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001858:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800185c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001860:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001864:	edd7 7a04 	vldr	s15, [r7, #16]
 8001868:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800186c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001878:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800187c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001880:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001884:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001888:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800188c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001890:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001894:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800189c:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee37 7a67 	vsub.f32	s14, s14, s15
		 + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 80018b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80018b4:	eef1 6a67 	vneg.f32	s13, s15
 80018b8:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80018bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c0:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 80018c4:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 80018c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80018d4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018d8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018dc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80018e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80018e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ec:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 80018f0:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80018f4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001900:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001904:	edd7 7a02 	vldr	s15, [r7, #8]
 8001908:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001914:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001918:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 800191c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001920:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001924:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001928:	ee66 7a27 	vmul.f32	s15, s12, s15
 800192c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001930:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001934:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001938:	ee36 6a67 	vsub.f32	s12, s12, s15
 800193c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001940:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001944:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001948:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800194c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001950:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001954:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001958:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001960:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001964:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001968:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800196c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001970:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001978:	ed97 6a13 	vldr	s12, [r7, #76]	@ 0x4c
 800197c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001980:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001984:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001988:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 800198c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001990:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001994:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001998:	ee26 6a27 	vmul.f32	s12, s12, s15
 800199c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 80019a0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80019ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019b0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80019b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019bc:	edd7 7a00 	vldr	s15, [r7]
 80019c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1.0f - 2.0f * q1q1 - 2.0f * q2q2 - az)
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 80019d0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80019d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e8:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80019ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f0:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80019f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80019fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a08:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a10:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx)
 8001a14:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a18:	eef1 6a67 	vneg.f32	s13, s15
 8001a1c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001a28:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001a2c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a34:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001a38:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001a3c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a40:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001a44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a48:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001a4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a50:	edd7 5a21 	vldr	s11, [r7, #132]	@ 0x84
 8001a54:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001a58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a5c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my)
 8001a78:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001a7c:	eef1 6a67 	vneg.f32	s13, s15
 8001a80:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a88:	ed97 6a15 	vldr	s12, [r7, #84]	@ 0x54
 8001a8c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a98:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001a9c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aac:	edd7 5a26 	vldr	s11, [r7, #152]	@ 0x98
 8001ab0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
		 + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ad4:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001ad8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae0:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8001ae4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001ae8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001af0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af4:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001af8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001afc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b00:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001b04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b08:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay)
 8001b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b24:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalize step magnitude
 8001b28:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001b2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b3c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b48:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b54:	eeb0 0a67 	vmov.f32	s0, s15
 8001b58:	f7ff fa64 	bl	8001024 <invSqrt>
 8001b5c:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	s0 *= recipNorm;
 8001b60:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001b64:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	s1 *= recipNorm;
 8001b70:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001b74:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	s2 *= recipNorm;
 8001b80:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b84:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	s3 *= recipNorm;
 8001b90:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b94:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	// Apply feedback step
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz) - ahrs->beta * s0;
 8001ba0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001ba4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ba8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bb0:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001bb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc0:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	edd3 6a00 	vldr	s13, [r3]
 8001bde:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy) - ahrs->beta * s1;
 8001bee:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001bf2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001bfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0a:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c34:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx) - ahrs->beta * s2;
 8001c38:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c44:	edd7 6a30 	vldr	s13, [r7, #192]	@ 0xc0
 8001c48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c54:	edd7 6a2e 	vldr	s13, [r7, #184]	@ 0xb8
 8001c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	edd3 6a00 	vldr	s13, [r3]
 8001c72:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx) - ahrs->beta * s3;
 8001c82:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001c86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	edd7 6a30 	vldr	s13, [r7, #192]	@ 0xc0
 8001c92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9e:	edd7 6a2f 	vldr	s13, [r7, #188]	@ 0xbc
 8001ca2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	edd3 6a00 	vldr	s13, [r3]
 8001cbc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	// Integrate quaternion rate and normalize
	q0 += qDot1 * ahrs->invSampleFreq;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cd2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	q1 += qDot2 * ahrs->invSampleFreq;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	q2 += qDot3 * ahrs->invSampleFreq;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
	q3 += qDot4 * ahrs->invSampleFreq;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d28:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d30:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001d34:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001d38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d3c:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8001d40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d48:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001d4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001d58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	eeb0 0a67 	vmov.f32	s0, s15
 8001d64:	f7ff f95e 	bl	8001024 <invSqrt>
 8001d68:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
	ahrs->q0 = q0 * recipNorm;
 8001d6c:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001d70:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	edc3 7a01 	vstr	s15, [r3, #4]
	ahrs->q1 = q1 * recipNorm;
 8001d7e:	ed97 7a30 	vldr	s14, [r7, #192]	@ 0xc0
 8001d82:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	edc3 7a02 	vstr	s15, [r3, #8]
	ahrs->q2 = q2 * recipNorm;
 8001d90:	ed97 7a2f 	vldr	s14, [r7, #188]	@ 0xbc
 8001d94:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	edc3 7a03 	vstr	s15, [r3, #12]
	ahrs->q3 = q3 * recipNorm;
 8001da2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8001da6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	edc3 7a04 	vstr	s15, [r3, #16]

	ahrs->anglesComputed = 0;
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001dbc:	37c8      	adds	r7, #200	@ 0xc8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop

08001dc4 <Madgwick_updateIMU>:

void Madgwick_updateIMU(MadgwickAHRS *ahrs, float gx, float gy, float gz, float ax, float ay, float az) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b098      	sub	sp, #96	@ 0x60
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	61f8      	str	r0, [r7, #28]
 8001dcc:	ed87 0a06 	vstr	s0, [r7, #24]
 8001dd0:	edc7 0a05 	vstr	s1, [r7, #20]
 8001dd4:	ed87 1a04 	vstr	s2, [r7, #16]
 8001dd8:	edc7 1a03 	vstr	s3, [r7, #12]
 8001ddc:	ed87 2a02 	vstr	s4, [r7, #8]
 8001de0:	edc7 2a01 	vstr	s5, [r7, #4]
    float qDot1, qDot2, qDot3, qDot4;
    float _2q0, _2q1, _2q2, _2q3;
    float q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

    // Normalize accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001de8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	f7ff f90c 	bl	8001024 <invSqrt>
 8001e0c:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    ax *= recipNorm;
 8001e10:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e14:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNorm;
 8001e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e24:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNorm;
 8001e30:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e34:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	edc7 7a01 	vstr	s15, [r7, #4]

    // Rate of change of quaternion from gyroscope
    qDot1 = 0.5f * (-ahrs->q1 * gx - ahrs->q2 * gy - ahrs->q3 * gz);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e46:	eeb1 7a67 	vneg.f32	s14, s15
 8001e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	edd3 6a04 	vldr	s13, [r3, #16]
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    qDot2 = 0.5f * (ahrs->q0 * gx + ahrs->q2 * gz - ahrs->q3 * gy);
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e88:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    qDot3 = 0.5f * (ahrs->q0 * gy - ahrs->q1 * gz + ahrs->q3 * gx);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ed4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	edd3 6a04 	vldr	s13, [r3, #16]
 8001ee6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    qDot4 = 0.5f * (ahrs->q0 * gz + ahrs->q1 * gy - ahrs->q2 * gx);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f04:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f24:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f30:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Normalize the accelerometer measurements
    _2q0 = 2.0f * ahrs->q0;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f46:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    _2q1 = 2.0f * ahrs->q1;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f54:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    _2q2 = 2.0f * ahrs->q2;
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f62:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    _2q3 = 2.0f * ahrs->q3;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f70:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Use accelerometer to compute error
    float axTemp = ax - (2 * ahrs->q1 * ahrs->q3 - 2 * ahrs->q0 * ahrs->q2);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float ayTemp = ay - (2 * ahrs->q0 * ahrs->q1 + 2 * ahrs->q2 * ahrs->q3);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fc6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float azTemp = az - (1 - 2 * ahrs->q1 * ahrs->q1 - 2 * ahrs->q2 * ahrs->q2);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	edd3 7a03 	vldr	s15, [r3, #12]
 8002006:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	ed97 7a01 	vldr	s14, [r7, #4]
 800201c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002020:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Calculate feedback and apply correction
    s0 = _2q0 * axTemp + _2q1 * ayTemp + _2q2 * azTemp;
 8002024:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002028:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002034:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002040:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002044:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    s1 = _2q0 * ayTemp - _2q1 * axTemp - _2q3 * azTemp;
 8002054:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002058:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800205c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002060:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002064:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002070:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002074:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002080:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    s2 = _2q0 * azTemp - _2q2 * axTemp - _2q3 * ayTemp;
 8002084:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002088:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800208c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002090:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002094:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80020a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    s3 = _2q1 * azTemp - _2q2 * ayTemp - _2q3 * axTemp;
 80020b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80020b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80020c4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80020d4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80020d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	edc7 7a08 	vstr	s15, [r7, #32]

    // Apply feedback
    qDot1 -= ahrs->beta * s0;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80020f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fa:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    qDot2 -= ahrs->beta * s1;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	ed93 7a00 	vldr	s14, [r3]
 8002104:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    qDot3 -= ahrs->beta * s2;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800212a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    qDot4 -= ahrs->beta * s3;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	ed93 7a00 	vldr	s14, [r3]
 8002138:	edd7 7a08 	vldr	s15, [r7, #32]
 800213c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002140:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    // Integrate rate of change of quaternion
    ahrs->q0 += qDot1 * ahrs->invSampleFreq;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	edd3 6a05 	vldr	s13, [r3, #20]
 8002158:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	edc3 7a01 	vstr	s15, [r3, #4]
    ahrs->q1 += qDot2 * ahrs->invSampleFreq;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	edd3 6a05 	vldr	s13, [r3, #20]
 8002176:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800217a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->q2 += qDot3 * ahrs->invSampleFreq;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	ed93 7a03 	vldr	s14, [r3, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	edd3 6a05 	vldr	s13, [r3, #20]
 8002194:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->q3 += qDot4 * ahrs->invSampleFreq;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	edd3 6a05 	vldr	s13, [r3, #20]
 80021b2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	edc3 7a04 	vstr	s15, [r3, #16]

    // Normalize quaternion
    recipNorm = invSqrt(ahrs->q0 * ahrs->q0 + ahrs->q1 * ahrs->q1 + ahrs->q2 * ahrs->q2 + ahrs->q3 * ahrs->q3);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80021d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	edd3 7a04 	vldr	s15, [r3, #16]
 8002208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	eeb0 0a67 	vmov.f32	s0, s15
 8002214:	f7fe ff06 	bl	8001024 <invSqrt>
 8002218:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
    ahrs->q0 *= recipNorm;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002222:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	edc3 7a01 	vstr	s15, [r3, #4]
    ahrs->q1 *= recipNorm;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	ed93 7a02 	vldr	s14, [r3, #8]
 8002236:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	edc3 7a02 	vstr	s15, [r3, #8]
    ahrs->q2 *= recipNorm;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	ed93 7a03 	vldr	s14, [r3, #12]
 800224a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800224e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	edc3 7a03 	vstr	s15, [r3, #12]
    ahrs->q3 *= recipNorm;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	ed93 7a04 	vldr	s14, [r3, #16]
 800225e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	edc3 7a04 	vstr	s15, [r3, #16]

    ahrs->anglesComputed = 0;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8002274:	bf00      	nop
 8002276:	3760      	adds	r7, #96	@ 0x60
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	0000      	movs	r0, r0
	...

08002280 <Madgwick_getYaw>:
        // Compute angles
    }
    return ahrs->pitch * 57.29578f;
}

float Madgwick_getYaw(MadgwickAHRS *ahrs) {
 8002280:	b5b0      	push	{r4, r5, r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    if (!ahrs->anglesComputed) {
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d15a      	bne.n	8002348 <Madgwick_getYaw+0xc8>
        // Compute angles from quaternion
        ahrs->yaw = atan2(2.0f * (ahrs->q0 * ahrs->q3 + ahrs->q1 * ahrs->q2), 1.0f - 2.0f * (ahrs->q2 * ahrs->q2 + ahrs->q3 * ahrs->q3)) * 57.29578f + 180.0f;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	ed93 7a01 	vldr	s14, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	edd3 7a04 	vldr	s15, [r3, #16]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ba:	ee17 0a90 	vmov	r0, s15
 80022be:	f7fe f963 	bl	8000588 <__aeabi_f2d>
 80022c2:	4604      	mov	r4, r0
 80022c4:	460d      	mov	r5, r1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80022d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 6a04 	vldr	s13, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edd3 7a04 	vldr	s15, [r3, #16]
 80022e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f6:	ee17 0a90 	vmov	r0, s15
 80022fa:	f7fe f945 	bl	8000588 <__aeabi_f2d>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	ec43 2b11 	vmov	d1, r2, r3
 8002306:	ec45 4b10 	vmov	d0, r4, r5
 800230a:	f00c fccb 	bl	800eca4 <atan2>
 800230e:	ec51 0b10 	vmov	r0, r1, d0
 8002312:	a314      	add	r3, pc, #80	@ (adr r3, 8002364 <Madgwick_getYaw+0xe4>)
 8002314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002318:	f7fe f98e 	bl	8000638 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <Madgwick_getYaw+0xe0>)
 800232a:	f7fd ffcf 	bl	80002cc <__adddf3>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4610      	mov	r0, r2
 8002334:	4619      	mov	r1, r3
 8002336:	f7fe fc77 	bl	8000c28 <__aeabi_d2f>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	621a      	str	r2, [r3, #32]
        ahrs->anglesComputed = 1;  // Mark angles as computed
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    return ahrs->yaw;  // Convert from radians to degrees and adjust
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	ee07 3a90 	vmov	s15, r3
}
 8002350:	eeb0 0a67 	vmov.f32	s0, s15
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	40668000 	.word	0x40668000
 8002364:	20000000 	.word	0x20000000
 8002368:	404ca5dc 	.word	0x404ca5dc

0800236c <USART1_IRQHandler>:
HAL_StatusTypeDef result2;
HAL_I2C_StateTypeDef state_result;
HAL_I2C_StateTypeDef state_result2;

//Set up Interrupt handler to invoke data transmit from xbee to the board.
void USART1_IRQHandler(void) {
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart1);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <USART1_IRQHandler+0x10>)
 8002372:	f007 fba3 	bl	8009abc <HAL_UART_IRQHandler>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200005bc 	.word	0x200005bc

08002380 <calculate_auto_gyro_speed>:

// Auto Gyro Rotation Sensor ------------------------------------------------------------

// Speed calculation function
void calculate_auto_gyro_speed(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    auto_gyro_rotation_rate = (pulse_count * 360) / PULSES_PER_ROTATION;
 8002384:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <calculate_auto_gyro_speed+0x38>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <calculate_auto_gyro_speed+0x3c>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a0:	4b07      	ldr	r3, [pc, #28]	@ (80023c0 <calculate_auto_gyro_speed+0x40>)
 80023a2:	edc3 7a00 	vstr	s15, [r3]
    pulse_count = 0;
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <calculate_auto_gyro_speed+0x38>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000864 	.word	0x20000864
 80023bc:	88888889 	.word	0x88888889
 80023c0:	20000640 	.word	0x20000640

080023c4 <Set_Servo_Angle>:

// Servo Motor Functions -------------------------------------------------------------------------------
void Set_Servo_Angle(uint8_t angle) {
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
    // Limit the angle between 0° and 180°
    if (angle > 180) {
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	2bb4      	cmp	r3, #180	@ 0xb4
 80023d2:	d901      	bls.n	80023d8 <Set_Servo_Angle+0x14>
        angle = 180;
 80023d4:	23b4      	movs	r3, #180	@ 0xb4
 80023d6:	71fb      	strb	r3, [r7, #7]
    }

    // Map the angle to the pulse width
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
                           ((SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH) * angle) / 180;
 80023d8:	79fa      	ldrb	r2, [r7, #7]
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
    uint32_t pulse_width = SERVO_MIN_PULSE_WIDTH +
 80023e2:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80023e6:	617b      	str	r3, [r7, #20]

    // Calculate the duty cycle for the given pulse width
    uint32_t tim_period = htim2.Init.Period + 1;   // Get the timer period
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <Set_Servo_Angle+0x54>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
    uint32_t pulse = (tim_period * pulse_width) / (1000000 / SERVO_FREQUENCY);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	4a08      	ldr	r2, [pc, #32]	@ (800241c <Set_Servo_Angle+0x58>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	0b9b      	lsrs	r3, r3, #14
 8002400:	60fb      	str	r3, [r7, #12]

    // Set the pulse width to TIM2 Channel 3
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pulse);
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <Set_Servo_Angle+0x54>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000574 	.word	0x20000574
 800241c:	d1b71759 	.word	0xd1b71759

08002420 <Servo_Open>:

void Servo_Open(){
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
//	Set_Servo_Angle(SERVO_ANGLE_OPEN);
	unsigned char num_partitions = 20;
 8002426:	2314      	movs	r3, #20
 8002428:	70fb      	strb	r3, [r7, #3]
	for (int i = 1; i <= num_partitions; ++i){
 800242a:	2301      	movs	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	e013      	b.n	8002458 <Servo_Open+0x38>
		Set_Servo_Angle(SERVO_ANGLE_CLOSED + i * (SERVO_ANGLE_OPEN - SERVO_ANGLE_CLOSED) / num_partitions);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f06f 022a 	mvn.w	r2, #42	@ 0x2a
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3b80      	subs	r3, #128	@ 0x80
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffbc 	bl	80023c4 <Set_Servo_Angle>
		HAL_Delay(25);
 800244c:	2019      	movs	r0, #25
 800244e:	f003 fb57 	bl	8005b00 <HAL_Delay>
	for (int i = 1; i <= num_partitions; ++i){
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3301      	adds	r3, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dde7      	ble.n	8002430 <Servo_Open+0x10>
	}
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <Servo_Close>:

void Servo_Close(){
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
//	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
	unsigned char num_partitions = 20;
 8002470:	2314      	movs	r3, #20
 8002472:	70fb      	strb	r3, [r7, #3]
	for (int i = 1; i <= num_partitions; ++i){
 8002474:	2301      	movs	r3, #1
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	e012      	b.n	80024a0 <Servo_Close+0x36>
		Set_Servo_Angle(SERVO_ANGLE_OPEN + i * (SERVO_ANGLE_CLOSED - SERVO_ANGLE_OPEN) / num_partitions);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	222b      	movs	r2, #43	@ 0x2b
 800247e:	fb03 f202 	mul.w	r2, r3, r2
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	fb92 f3f3 	sdiv	r3, r2, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3355      	adds	r3, #85	@ 0x55
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff98 	bl	80023c4 <Set_Servo_Angle>
		HAL_Delay(25);
 8002494:	2019      	movs	r0, #25
 8002496:	f003 fb33 	bl	8005b00 <HAL_Delay>
	for (int i = 1; i <= num_partitions; ++i){
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3301      	adds	r3, #1
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dde8      	ble.n	800247a <Servo_Close+0x10>
	}
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <Servo_Init>:

void Servo_Init() {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);  // Start PWM signal on TIM2 Channel 3
 80024b8:	2108      	movs	r1, #8
 80024ba:	4802      	ldr	r0, [pc, #8]	@ (80024c4 <Servo_Init+0x10>)
 80024bc:	f006 fbdc 	bl	8008c78 <HAL_TIM_PWM_Start>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000574 	.word	0x20000574

080024c8 <time_seconds>:

// Flash Data Functions ---------------------------------------------------------------------------------
uint32_t time_seconds(uint8_t hr, uint8_t min, uint8_t sec){
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	717b      	strb	r3, [r7, #5]
	return 3600 * hr + 60 * min + sec;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80024e0:	fb02 f103 	mul.w	r1, r2, r3
 80024e4:	79ba      	ldrb	r2, [r7, #6]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	18ca      	adds	r2, r1, r3
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	4413      	add	r3, r2
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <get_time_dif>:

int32_t get_time_dif(){
 8002500:	b598      	push	{r3, r4, r7, lr}
 8002502:	af00      	add	r7, sp, #0
	return time_seconds(mission_time_hr, mission_time_min, mission_time_sec) - time_seconds(gps_time_hr, gps_time_min, gps_time_sec);
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <get_time_dif+0x40>)
 8002506:	f993 3000 	ldrsb.w	r3, [r3]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <get_time_dif+0x44>)
 800250e:	f992 2000 	ldrsb.w	r2, [r2]
 8002512:	b2d1      	uxtb	r1, r2
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <get_time_dif+0x48>)
 8002516:	f992 2000 	ldrsb.w	r2, [r2]
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ffd3 	bl	80024c8 <time_seconds>
 8002522:	4604      	mov	r4, r0
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <get_time_dif+0x4c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <get_time_dif+0x50>)
 800252a:	7811      	ldrb	r1, [r2, #0]
 800252c:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <get_time_dif+0x54>)
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ffc9 	bl	80024c8 <time_seconds>
 8002536:	4603      	mov	r3, r0
 8002538:	1ae3      	subs	r3, r4, r3
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd98      	pop	{r3, r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	20000604 	.word	0x20000604
 8002544:	20000605 	.word	0x20000605
 8002548:	20000606 	.word	0x20000606
 800254c:	20000644 	.word	0x20000644
 8002550:	20000645 	.word	0x20000645
 8002554:	20000646 	.word	0x20000646

08002558 <get_mission_time>:

void get_mission_time(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
	int32_t mission_time = (time_seconds(gps_time_hr, gps_time_min, gps_time_sec) + time_dif) % 86400;
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <get_mission_time+0xcc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	4a31      	ldr	r2, [pc, #196]	@ (8002628 <get_mission_time+0xd0>)
 8002564:	7811      	ldrb	r1, [r2, #0]
 8002566:	4a31      	ldr	r2, [pc, #196]	@ (800262c <get_mission_time+0xd4>)
 8002568:	7812      	ldrb	r2, [r2, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ffac 	bl	80024c8 <time_seconds>
 8002570:	4602      	mov	r2, r0
 8002572:	4b2f      	ldr	r3, [pc, #188]	@ (8002630 <get_mission_time+0xd8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	441a      	add	r2, r3
 8002578:	4b2e      	ldr	r3, [pc, #184]	@ (8002634 <get_mission_time+0xdc>)
 800257a:	fba3 1302 	umull	r1, r3, r3, r2
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	492d      	ldr	r1, [pc, #180]	@ (8002638 <get_mission_time+0xe0>)
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	607b      	str	r3, [r7, #4]
	if (mission_time < 0) mission_time += 86400;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	da05      	bge.n	800259c <get_mission_time+0x44>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002596:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800259a:	607b      	str	r3, [r7, #4]
	mission_time_sec = mission_time % 60;
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4b27      	ldr	r3, [pc, #156]	@ (800263c <get_mission_time+0xe4>)
 80025a0:	fb83 1302 	smull	r1, r3, r3, r2
 80025a4:	4413      	add	r3, r2
 80025a6:	1159      	asrs	r1, r3, #5
 80025a8:	17d3      	asrs	r3, r2, #31
 80025aa:	1ac9      	subs	r1, r1, r3
 80025ac:	460b      	mov	r3, r1
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a5b      	subs	r3, r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	1ad1      	subs	r1, r2, r3
 80025b6:	b24a      	sxtb	r2, r1
 80025b8:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <get_mission_time+0xe8>)
 80025ba:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_sec;
 80025bc:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <get_mission_time+0xe8>)
 80025be:	f993 3000 	ldrsb.w	r3, [r3]
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	607b      	str	r3, [r7, #4]
	mission_time_min = (mission_time % 3600) / 60;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <get_mission_time+0xec>)
 80025ce:	fb83 1302 	smull	r1, r3, r3, r2
 80025d2:	4413      	add	r3, r2
 80025d4:	12d9      	asrs	r1, r3, #11
 80025d6:	17d3      	asrs	r3, r2, #31
 80025d8:	1acb      	subs	r3, r1, r3
 80025da:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <get_mission_time+0xe4>)
 80025e6:	fb82 1203 	smull	r1, r2, r2, r3
 80025ea:	441a      	add	r2, r3
 80025ec:	1152      	asrs	r2, r2, #5
 80025ee:	17db      	asrs	r3, r3, #31
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	b25a      	sxtb	r2, r3
 80025f4:	4b14      	ldr	r3, [pc, #80]	@ (8002648 <get_mission_time+0xf0>)
 80025f6:	701a      	strb	r2, [r3, #0]
	mission_time -= mission_time_min;
 80025f8:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <get_mission_time+0xf0>)
 80025fa:	f993 3000 	ldrsb.w	r3, [r3]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	607b      	str	r3, [r7, #4]
	mission_time_hr = mission_time / 3600;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <get_mission_time+0xec>)
 800260a:	fb82 1203 	smull	r1, r2, r2, r3
 800260e:	441a      	add	r2, r3
 8002610:	12d2      	asrs	r2, r2, #11
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <get_mission_time+0xf4>)
 800261a:	701a      	strb	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000644 	.word	0x20000644
 8002628:	20000645 	.word	0x20000645
 800262c:	20000646 	.word	0x20000646
 8002630:	2000085c 	.word	0x2000085c
 8002634:	c22e4507 	.word	0xc22e4507
 8002638:	00015180 	.word	0x00015180
 800263c:	88888889 	.word	0x88888889
 8002640:	20000606 	.word	0x20000606
 8002644:	91a2b3c5 	.word	0x91a2b3c5
 8002648:	20000605 	.word	0x20000605
 800264c:	20000604 	.word	0x20000604

08002650 <store_flash_data>:

void store_flash_data(){
 8002650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002654:	b092      	sub	sp, #72	@ 0x48
 8002656:	af00      	add	r7, sp, #0
	// Store altitude offset, magnetic offsets, mission time
	HAL_FLASH_Unlock();
 8002658:	f003 fc6e 	bl	8005f38 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(SECTOR, FLASH_VOLTAGE_RANGE_2);
 800265c:	2101      	movs	r1, #1
 800265e:	200b      	movs	r0, #11
 8002660:	f003 fddc 	bl	800621c <FLASH_Erase_Sector>
	HAL_Delay(100);
 8002664:	2064      	movs	r0, #100	@ 0x64
 8002666:	f003 fa4b 	bl	8005b00 <HAL_Delay>

	uint32_t altitude_offset_bits, mag_x_offset_bits, mag_y_offset_bits, mag_z_offset_bits, apogee_altitude_bits;
	uint32_t payload_released_bits = payload_released ? 1 : 0;
 800266a:	4b54      	ldr	r3, [pc, #336]	@ (80027bc <store_flash_data+0x16c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40

	// Copy the float data into the 32-bit unsigned integer variables
	if (!isnan(altitude_offset)){
 800267a:	4b51      	ldr	r3, [pc, #324]	@ (80027c0 <store_flash_data+0x170>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eef4 7a67 	vcmp.f32	s15, s15
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	d602      	bvs.n	8002690 <store_flash_data+0x40>
		memcpy(&altitude_offset_bits, &altitude_offset, sizeof(altitude_offset));
 800268a:	4b4d      	ldr	r3, [pc, #308]	@ (80027c0 <store_flash_data+0x170>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	if (!isnan(mag_x_offset)){
 8002690:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <store_flash_data+0x174>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	eef4 7a67 	vcmp.f32	s15, s15
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d602      	bvs.n	80026a6 <store_flash_data+0x56>
		memcpy(&mag_x_offset_bits, &mag_x_offset, sizeof(mag_x_offset));
 80026a0:	4b48      	ldr	r3, [pc, #288]	@ (80027c4 <store_flash_data+0x174>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	if (!isnan(mag_y_offset)){
 80026a6:	4b48      	ldr	r3, [pc, #288]	@ (80027c8 <store_flash_data+0x178>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	eef4 7a67 	vcmp.f32	s15, s15
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	d602      	bvs.n	80026bc <store_flash_data+0x6c>
		memcpy(&mag_y_offset_bits, &mag_y_offset, sizeof(mag_y_offset));
 80026b6:	4b44      	ldr	r3, [pc, #272]	@ (80027c8 <store_flash_data+0x178>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	if (!isnan(mag_z_offset)){
 80026bc:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <store_flash_data+0x17c>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	eef4 7a67 	vcmp.f32	s15, s15
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	d602      	bvs.n	80026d2 <store_flash_data+0x82>
		memcpy(&mag_z_offset_bits, &mag_z_offset, sizeof(mag_z_offset));
 80026cc:	4b3f      	ldr	r3, [pc, #252]	@ (80027cc <store_flash_data+0x17c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	memcpy(&apogee_altitude_bits, &apogee_altitude, sizeof(apogee_altitude));
 80026d2:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <store_flash_data+0x180>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ALTITUDE_OFFSET_ADDRESS, altitude_offset_bits);
 80026d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026da:	2200      	movs	r2, #0
 80026dc:	461c      	mov	r4, r3
 80026de:	4615      	mov	r5, r2
 80026e0:	4622      	mov	r2, r4
 80026e2:	462b      	mov	r3, r5
 80026e4:	493b      	ldr	r1, [pc, #236]	@ (80027d4 <store_flash_data+0x184>)
 80026e6:	2002      	movs	r0, #2
 80026e8:	f003 fbd2 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_X_OFFSET_ADDRESS, mag_x_offset_bits);
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	2200      	movs	r2, #0
 80026f0:	4698      	mov	r8, r3
 80026f2:	4691      	mov	r9, r2
 80026f4:	4642      	mov	r2, r8
 80026f6:	464b      	mov	r3, r9
 80026f8:	4937      	ldr	r1, [pc, #220]	@ (80027d8 <store_flash_data+0x188>)
 80026fa:	2002      	movs	r0, #2
 80026fc:	f003 fbc8 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Y_OFFSET_ADDRESS, mag_y_offset_bits);
 8002700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002702:	2200      	movs	r2, #0
 8002704:	469a      	mov	sl, r3
 8002706:	4693      	mov	fp, r2
 8002708:	4652      	mov	r2, sl
 800270a:	465b      	mov	r3, fp
 800270c:	4933      	ldr	r1, [pc, #204]	@ (80027dc <store_flash_data+0x18c>)
 800270e:	2002      	movs	r0, #2
 8002710:	f003 fbbe 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_MAG_Z_OFFSET_ADDRESS, mag_z_offset_bits);
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	2200      	movs	r2, #0
 8002718:	623b      	str	r3, [r7, #32]
 800271a:	627a      	str	r2, [r7, #36]	@ 0x24
 800271c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002720:	492f      	ldr	r1, [pc, #188]	@ (80027e0 <store_flash_data+0x190>)
 8002722:	2002      	movs	r0, #2
 8002724:	f003 fbb4 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_TIME_DIF_ADDRESS, get_time_dif());
 8002728:	f7ff feea 	bl	8002500 <get_time_dif>
 800272c:	4603      	mov	r3, r0
 800272e:	17da      	asrs	r2, r3, #31
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	61fa      	str	r2, [r7, #28]
 8002734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002738:	492a      	ldr	r1, [pc, #168]	@ (80027e4 <store_flash_data+0x194>)
 800273a:	2002      	movs	r0, #2
 800273c:	f003 fba8 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_APOGEE_ALT_ADDRESS, apogee_altitude_bits);
 8002740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002742:	2200      	movs	r2, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	617a      	str	r2, [r7, #20]
 8002748:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800274c:	4926      	ldr	r1, [pc, #152]	@ (80027e8 <store_flash_data+0x198>)
 800274e:	2002      	movs	r0, #2
 8002750:	f003 fb9e 	bl	8005e90 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_PAYLOAD_RELEASED_ADDRESS, payload_released_bits);
 8002754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002756:	2200      	movs	r2, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	60fa      	str	r2, [r7, #12]
 800275c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002760:	4922      	ldr	r1, [pc, #136]	@ (80027ec <store_flash_data+0x19c>)
 8002762:	2002      	movs	r0, #2
 8002764:	f003 fb94 	bl	8005e90 <HAL_FLASH_Program>

	for (uint16_t i = 0; i < 14; i++) {
 8002768:	2300      	movs	r3, #0
 800276a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800276e:	e016      	b.n	800279e <store_flash_data+0x14e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, FLASH_STATE_ADDRESS + i, state[i]);
 8002770:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <store_flash_data+0x1a0>)
 8002776:	4413      	add	r3, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <store_flash_data+0x1a4>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2200      	movs	r2, #0
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278e:	2000      	movs	r0, #0
 8002790:	f003 fb7e 	bl	8005e90 <HAL_FLASH_Program>
	for (uint16_t i = 0; i < 14; i++) {
 8002794:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002798:	3301      	adds	r3, #1
 800279a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800279e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80027a2:	2b0d      	cmp	r3, #13
 80027a4:	d9e4      	bls.n	8002770 <store_flash_data+0x120>
	}
	HAL_Delay(100);
 80027a6:	2064      	movs	r0, #100	@ 0x64
 80027a8:	f003 f9aa 	bl	8005b00 <HAL_Delay>

	HAL_FLASH_Lock();
 80027ac:	f003 fbe6 	bl	8005f7c <HAL_FLASH_Lock>
}
 80027b0:	bf00      	nop
 80027b2:	3748      	adds	r7, #72	@ 0x48
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ba:	bf00      	nop
 80027bc:	20000b1c 	.word	0x20000b1c
 80027c0:	20000a0c 	.word	0x20000a0c
 80027c4:	200009f0 	.word	0x200009f0
 80027c8:	200009f4 	.word	0x200009f4
 80027cc:	200009f8 	.word	0x200009f8
 80027d0:	20000b18 	.word	0x20000b18
 80027d4:	080e0000 	.word	0x080e0000
 80027d8:	080e0004 	.word	0x080e0004
 80027dc:	080e0008 	.word	0x080e0008
 80027e0:	080e000c 	.word	0x080e000c
 80027e4:	080e0010 	.word	0x080e0010
 80027e8:	080e0014 	.word	0x080e0014
 80027ec:	080e0018 	.word	0x080e0018
 80027f0:	080e001c 	.word	0x080e001c
 80027f4:	20000004 	.word	0x20000004

080027f8 <load_flash_data>:

void load_flash_data(){
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80027fe:	f003 fb9b 	bl	8005f38 <HAL_FLASH_Unlock>

//	altitude_offset = * (float*) FLASH_ALTITUDE_OFFSET_ADDRESS;
//	mag_x_offset = *(float*)FLASH_MAG_X_OFFSET_ADDRESS;
//	mag_y_offset = * (float*) FLASH_MAG_Y_OFFSET_ADDRESS;
//	mag_z_offset = * (float*) FLASH_MAG_Z_OFFSET_ADDRESS;
	memcpy(&altitude_offset, (float*)FLASH_ALTITUDE_OFFSET_ADDRESS, sizeof(float));
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <load_flash_data+0x6c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	@ (8002868 <load_flash_data+0x70>)
 8002808:	6013      	str	r3, [r2, #0]
	memcpy(&mag_x_offset, (float*)FLASH_MAG_X_OFFSET_ADDRESS, sizeof(float));
 800280a:	4b18      	ldr	r3, [pc, #96]	@ (800286c <load_flash_data+0x74>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a18      	ldr	r2, [pc, #96]	@ (8002870 <load_flash_data+0x78>)
 8002810:	6013      	str	r3, [r2, #0]
	memcpy(&mag_y_offset, (float*)FLASH_MAG_Y_OFFSET_ADDRESS, sizeof(float));
 8002812:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <load_flash_data+0x7c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <load_flash_data+0x80>)
 8002818:	6013      	str	r3, [r2, #0]
	memcpy(&mag_z_offset, (float*)FLASH_MAG_Z_OFFSET_ADDRESS, sizeof(float));
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <load_flash_data+0x84>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a18      	ldr	r2, [pc, #96]	@ (8002880 <load_flash_data+0x88>)
 8002820:	6013      	str	r3, [r2, #0]
	memcpy(&time_dif, (int32_t*)FLASH_TIME_DIF_ADDRESS, sizeof(int32_t));
 8002822:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <load_flash_data+0x8c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a18      	ldr	r2, [pc, #96]	@ (8002888 <load_flash_data+0x90>)
 8002828:	6013      	str	r3, [r2, #0]
	memcpy(&apogee_altitude, (float*)FLASH_APOGEE_ALT_ADDRESS, sizeof(float));
 800282a:	4b18      	ldr	r3, [pc, #96]	@ (800288c <load_flash_data+0x94>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a18      	ldr	r2, [pc, #96]	@ (8002890 <load_flash_data+0x98>)
 8002830:	6013      	str	r3, [r2, #0]

	uint32_t readWord;
	memcpy(&readWord, (uint32_t*)FLASH_PAYLOAD_RELEASED_ADDRESS, sizeof(uint32_t));
 8002832:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <load_flash_data+0x9c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	607b      	str	r3, [r7, #4]
	payload_released = (readWord != 0);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <load_flash_data+0xa0>)
 8002848:	701a      	strb	r2, [r3, #0]

	memcpy(state, (uint8_t*)FLASH_STATE_ADDRESS, 14);
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <load_flash_data+0xa4>)
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <load_flash_data+0xa8>)
 800284e:	4614      	mov	r4, r2
 8002850:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002852:	c407      	stmia	r4!, {r0, r1, r2}
 8002854:	8023      	strh	r3, [r4, #0]

	HAL_FLASH_Lock();
 8002856:	f003 fb91 	bl	8005f7c <HAL_FLASH_Lock>
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	080e0000 	.word	0x080e0000
 8002868:	20000a0c 	.word	0x20000a0c
 800286c:	080e0004 	.word	0x080e0004
 8002870:	200009f0 	.word	0x200009f0
 8002874:	080e0008 	.word	0x080e0008
 8002878:	200009f4 	.word	0x200009f4
 800287c:	080e000c 	.word	0x080e000c
 8002880:	200009f8 	.word	0x200009f8
 8002884:	080e0010 	.word	0x080e0010
 8002888:	2000085c 	.word	0x2000085c
 800288c:	080e0014 	.word	0x080e0014
 8002890:	20000b18 	.word	0x20000b18
 8002894:	080e0018 	.word	0x080e0018
 8002898:	20000b1c 	.word	0x20000b1c
 800289c:	20000004 	.word	0x20000004
 80028a0:	080e001c 	.word	0x080e001c

080028a4 <set_gps>:

// Sensor Read Functions -----------------------------------------------------------------------------
uint8_t set_gps(char* buf, uint8_t order){
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	char tmp[2];

	if(strlen(buf)==0)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <set_gps+0x18>
		return 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e0c8      	b.n	8002a4e <set_gps+0x1aa>

	switch(order) {
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	f200 80bd 	bhi.w	8002a3e <set_gps+0x19a>
 80028c4:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <set_gps+0x28>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028f5 	.word	0x080028f5
 80028d0:	0800292d 	.word	0x0800292d
 80028d4:	08002981 	.word	0x08002981
 80028d8:	080029a9 	.word	0x080029a9
 80028dc:	080029cb 	.word	0x080029cb
 80028e0:	080029f3 	.word	0x080029f3
 80028e4:	08002a3f 	.word	0x08002a3f
 80028e8:	08002a15 	.word	0x08002a15
 80028ec:	08002a3f 	.word	0x08002a3f
 80028f0:	08002a25 	.word	0x08002a25
	case 0: //STATUS
		if (strlen(buf)<5 || buf[0] != 'G' || buf[2] != 'G' || buf[3] != 'G' || buf[4] != 'A'){
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7fd fcdb 	bl	80002b0 <strlen>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d913      	bls.n	8002928 <set_gps+0x84>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b47      	cmp	r3, #71	@ 0x47
 8002906:	d10f      	bne.n	8002928 <set_gps+0x84>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b47      	cmp	r3, #71	@ 0x47
 8002910:	d10a      	bne.n	8002928 <set_gps+0x84>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3303      	adds	r3, #3
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b47      	cmp	r3, #71	@ 0x47
 800291a:	d105      	bne.n	8002928 <set_gps+0x84>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b41      	cmp	r3, #65	@ 0x41
 8002924:	f000 808d 	beq.w	8002a42 <set_gps+0x19e>
			return 1;
 8002928:	2301      	movs	r3, #1
 800292a:	e090      	b.n	8002a4e <set_gps+0x1aa>
		}
		break;
	case 1: //TIME
		memcpy(tmp, &buf[0], 2);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	81bb      	strh	r3, [r7, #12]
		gps_time_hr = atoi(tmp);
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	4618      	mov	r0, r3
 800293a:	f008 f816 	bl	800a96a <atoi>
 800293e:	4603      	mov	r3, r0
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b45      	ldr	r3, [pc, #276]	@ (8002a58 <set_gps+0x1b4>)
 8002944:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[2], 2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	81bb      	strh	r3, [r7, #12]
		gps_time_min = atoi(tmp);
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	4618      	mov	r0, r3
 8002956:	f008 f808 	bl	800a96a <atoi>
 800295a:	4603      	mov	r3, r0
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <set_gps+0x1b8>)
 8002960:	701a      	strb	r2, [r3, #0]
		memcpy(tmp, &buf[4], 2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	b29b      	uxth	r3, r3
 800296a:	81bb      	strh	r3, [r7, #12]
		gps_time_sec = atoi(tmp);
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	4618      	mov	r0, r3
 8002972:	f007 fffa 	bl	800a96a <atoi>
 8002976:	4603      	mov	r3, r0
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b39      	ldr	r3, [pc, #228]	@ (8002a60 <set_gps+0x1bc>)
 800297c:	701a      	strb	r2, [r3, #0]

		break;
 800297e:	e065      	b.n	8002a4c <set_gps+0x1a8>
	case 2: //LATITUDE
		gps_latitude = atof(buf) / 100;
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f007 ffef 	bl	800a964 <atof>
 8002986:	ec51 0b10 	vmov	r0, r1, d0
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b35      	ldr	r3, [pc, #212]	@ (8002a64 <set_gps+0x1c0>)
 8002990:	f7fd ff7c 	bl	800088c <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f944 	bl	8000c28 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a31      	ldr	r2, [pc, #196]	@ (8002a68 <set_gps+0x1c4>)
 80029a4:	6013      	str	r3, [r2, #0]
		break;
 80029a6:	e051      	b.n	8002a4c <set_gps+0x1a8>
	case 3: //LATITUDE_DIR
		gps_lat_dir = *buf;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <set_gps+0x1c8>)
 80029ae:	701a      	strb	r2, [r3, #0]
		if (gps_lat_dir == 'S') {
 80029b0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <set_gps+0x1c8>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b53      	cmp	r3, #83	@ 0x53
 80029b6:	d146      	bne.n	8002a46 <set_gps+0x1a2>
			gps_latitude*= -1;
 80029b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a68 <set_gps+0x1c4>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	eef1 7a67 	vneg.f32	s15, s15
 80029c2:	4b29      	ldr	r3, [pc, #164]	@ (8002a68 <set_gps+0x1c4>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 80029c8:	e03d      	b.n	8002a46 <set_gps+0x1a2>
	case 4: //LONGITUDE
		gps_longitude = atof(buf) / 100;
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f007 ffca 	bl	800a964 <atof>
 80029d0:	ec51 0b10 	vmov	r0, r1, d0
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <set_gps+0x1c0>)
 80029da:	f7fd ff57 	bl	800088c <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f91f 	bl	8000c28 <__aeabi_d2f>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a20      	ldr	r2, [pc, #128]	@ (8002a70 <set_gps+0x1cc>)
 80029ee:	6013      	str	r3, [r2, #0]
		break;
 80029f0:	e02c      	b.n	8002a4c <set_gps+0x1a8>
	case 5: //LONGITUDE DIR
		gps_long_dir = *buf;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <set_gps+0x1d0>)
 80029f8:	701a      	strb	r2, [r3, #0]
		if (gps_long_dir == 'W') {
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <set_gps+0x1d0>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b57      	cmp	r3, #87	@ 0x57
 8002a00:	d123      	bne.n	8002a4a <set_gps+0x1a6>
			gps_longitude*= -1;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <set_gps+0x1cc>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	eef1 7a67 	vneg.f32	s15, s15
 8002a0c:	4b18      	ldr	r3, [pc, #96]	@ (8002a70 <set_gps+0x1cc>)
 8002a0e:	edc3 7a00 	vstr	s15, [r3]
		}
		break;
 8002a12:	e01a      	b.n	8002a4a <set_gps+0x1a6>
	case 7: //SATS
		gps_sats = atoi(buf);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f007 ffa8 	bl	800a96a <atoi>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b16      	ldr	r3, [pc, #88]	@ (8002a78 <set_gps+0x1d4>)
 8002a20:	701a      	strb	r2, [r3, #0]
		break;
 8002a22:	e013      	b.n	8002a4c <set_gps+0x1a8>
	case 9: //ALTITUDE
		gps_altitude = atof(buf);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f007 ff9d 	bl	800a964 <atof>
 8002a2a:	ec53 2b10 	vmov	r2, r3, d0
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fe f8f9 	bl	8000c28 <__aeabi_d2f>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4a10      	ldr	r2, [pc, #64]	@ (8002a7c <set_gps+0x1d8>)
 8002a3a:	6013      	str	r3, [r2, #0]
		break;
 8002a3c:	e006      	b.n	8002a4c <set_gps+0x1a8>
	default:
		break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <set_gps+0x1a8>
		break;
 8002a4a:	bf00      	nop
	}

	return 0;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000644 	.word	0x20000644
 8002a5c:	20000645 	.word	0x20000645
 8002a60:	20000646 	.word	0x20000646
 8002a64:	40590000 	.word	0x40590000
 8002a68:	2000064c 	.word	0x2000064c
 8002a6c:	20000857 	.word	0x20000857
 8002a70:	20000650 	.word	0x20000650
 8002a74:	20000858 	.word	0x20000858
 8002a78:	20000654 	.word	0x20000654
 8002a7c:	20000648 	.word	0x20000648

08002a80 <parse_nmea>:

bool parse_nmea(char *buf){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t last = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73bb      	strb	r3, [r7, #14]
	uint8_t order = 0;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	737b      	strb	r3, [r7, #13]

	for(i=0; i<255;i++){
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e032      	b.n	8002afc <parse_nmea+0x7c>
		if ( buf[i] == 44 ){
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b2c      	cmp	r3, #44	@ 0x2c
 8002aa0:	d123      	bne.n	8002aea <parse_nmea+0x6a>
			if (last != i){
 8002aa2:	7bba      	ldrb	r2, [r7, #14]
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d018      	beq.n	8002adc <parse_nmea+0x5c>
				memset(parse_buf, '\000', sizeof parse_buf);
 8002aaa:	22ff      	movs	r2, #255	@ 0xff
 8002aac:	2100      	movs	r1, #0
 8002aae:	4818      	ldr	r0, [pc, #96]	@ (8002b10 <parse_nmea+0x90>)
 8002ab0:	f009 fb83 	bl	800c1ba <memset>
				memcpy(parse_buf, &buf[last], i-last);
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4813      	ldr	r0, [pc, #76]	@ (8002b10 <parse_nmea+0x90>)
 8002ac4:	f009 fc35 	bl	800c332 <memcpy>
				if(set_gps(parse_buf, order)){
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	4619      	mov	r1, r3
 8002acc:	4810      	ldr	r0, [pc, #64]	@ (8002b10 <parse_nmea+0x90>)
 8002ace:	f7ff fee9 	bl	80028a4 <set_gps>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <parse_nmea+0x5c>
					return false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e015      	b.n	8002b08 <parse_nmea+0x88>
				}
			}
			last = i + 1;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	73bb      	strb	r3, [r7, #14]
			order = order + 1;
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	737b      	strb	r3, [r7, #13]
 8002ae8:	e005      	b.n	8002af6 <parse_nmea+0x76>
		} else if (buf[i] == 42) {
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af4:	d006      	beq.n	8002b04 <parse_nmea+0x84>
	for(i=0; i<255;i++){
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	3301      	adds	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2bff      	cmp	r3, #255	@ 0xff
 8002b00:	d1c9      	bne.n	8002a96 <parse_nmea+0x16>
 8002b02:	e000      	b.n	8002b06 <parse_nmea+0x86>
			break;
 8002b04:	bf00      	nop
		}
	}

	return true;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000758 	.word	0x20000758
 8002b14:	00000000 	.word	0x00000000

08002b18 <calculate_altitude>:

float calculate_altitude(float pressure) {
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 44330.77 * (1 - powf(pressure / 101.326, 0.1902632)) + altitude_offset;
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fd fd30 	bl	8000588 <__aeabi_f2d>
 8002b28:	a323      	add	r3, pc, #140	@ (adr r3, 8002bb8 <calculate_altitude+0xa0>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fead 	bl	800088c <__aeabi_ddiv>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fe f875 	bl	8000c28 <__aeabi_d2f>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8002bb0 <calculate_altitude+0x98>
 8002b44:	ee00 3a10 	vmov	s0, r3
 8002b48:	f00c f8da 	bl	800ed00 <powf>
 8002b4c:	eef0 7a40 	vmov.f32	s15, s0
 8002b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b58:	ee17 0a90 	vmov	r0, s15
 8002b5c:	f7fd fd14 	bl	8000588 <__aeabi_f2d>
 8002b60:	a311      	add	r3, pc, #68	@ (adr r3, 8002ba8 <calculate_altitude+0x90>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd67 	bl	8000638 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4614      	mov	r4, r2
 8002b70:	461d      	mov	r5, r3
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <calculate_altitude+0x9c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd06 	bl	8000588 <__aeabi_f2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4620      	mov	r0, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7fd fba2 	bl	80002cc <__adddf3>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fe f84a 	bl	8000c28 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	ee07 3a90 	vmov	s15, r3
}
 8002b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	a3d70a3d 	.word	0xa3d70a3d
 8002bac:	40e5a558 	.word	0x40e5a558
 8002bb0:	3e42d45b 	.word	0x3e42d45b
 8002bb4:	20000a0c 	.word	0x20000a0c
 8002bb8:	2f1a9fbe 	.word	0x2f1a9fbe
 8002bbc:	405954dd 	.word	0x405954dd

08002bc0 <read_MMC5603>:

void read_MMC5603(void) {
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af02      	add	r7, sp, #8
    uint8_t mmc5603_buf[9];
    uint8_t first_reg = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	71fb      	strb	r3, [r7, #7]
	int32_t raw_x, raw_y, raw_z;

	// Perform the I2C write (send the register address) then read 9 bytes of data
	result = HAL_I2C_Master_Transmit(&hi2c1, MMC5603_ADDRESS, &first_reg, 1, HAL_MAX_DELAY);
 8002bca:	1dfa      	adds	r2, r7, #7
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2160      	movs	r1, #96	@ 0x60
 8002bd6:	4884      	ldr	r0, [pc, #528]	@ (8002de8 <read_MMC5603+0x228>)
 8002bd8:	f003 fe66 	bl	80068a8 <HAL_I2C_Master_Transmit>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b82      	ldr	r3, [pc, #520]	@ (8002dec <read_MMC5603+0x22c>)
 8002be2:	701a      	strb	r2, [r3, #0]
	if (result != HAL_OK) {
 8002be4:	4b81      	ldr	r3, [pc, #516]	@ (8002dec <read_MMC5603+0x22c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 80ed 	bne.w	8002dc8 <read_MMC5603+0x208>
	}

//	HAL_Delay(10);

	// Read 9 bytes of data from the sensor
	if (HAL_I2C_Master_Receive(&hi2c1, MMC5603_ADDRESS, mmc5603_buf, 9, HAL_MAX_DELAY) != HAL_OK) {
 8002bee:	f107 0208 	add.w	r2, r7, #8
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2309      	movs	r3, #9
 8002bfa:	2160      	movs	r1, #96	@ 0x60
 8002bfc:	487a      	ldr	r0, [pc, #488]	@ (8002de8 <read_MMC5603+0x228>)
 8002bfe:	f003 ff51 	bl	8006aa4 <HAL_I2C_Master_Receive>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 80e1 	bne.w	8002dcc <read_MMC5603+0x20c>
		// Handle reception error
		return;
	}

	// Extract X, Y, Z values from the buffer
	raw_x = ((uint32_t)mmc5603_buf[0] << 12) | ((uint32_t)mmc5603_buf[1] << 4) | ((uint32_t)mmc5603_buf[6] >> 4);
 8002c0a:	7a3b      	ldrb	r3, [r7, #8]
 8002c0c:	031a      	lsls	r2, r3, #12
 8002c0e:	7a7b      	ldrb	r3, [r7, #9]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4313      	orrs	r3, r2
 8002c14:	7bba      	ldrb	r2, [r7, #14]
 8002c16:	0912      	lsrs	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61fb      	str	r3, [r7, #28]
	raw_y = ((uint32_t)mmc5603_buf[2] << 12) | ((uint32_t)mmc5603_buf[3] << 4) | ((uint32_t)mmc5603_buf[7] >> 4);
 8002c1e:	7abb      	ldrb	r3, [r7, #10]
 8002c20:	031a      	lsls	r2, r3, #12
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	4313      	orrs	r3, r2
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	0912      	lsrs	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
	raw_z = ((uint32_t)mmc5603_buf[4] << 12) | ((uint32_t)mmc5603_buf[5] << 4) | ((uint32_t)mmc5603_buf[8] >> 4);
 8002c32:	7b3b      	ldrb	r3, [r7, #12]
 8002c34:	031a      	lsls	r2, r3, #12
 8002c36:	7b7b      	ldrb	r3, [r7, #13]
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	7c3a      	ldrb	r2, [r7, #16]
 8002c3e:	0912      	lsrs	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

	// Fix center offsets

	raw_x -= (1 << 19);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c4c:	61fb      	str	r3, [r7, #28]
	raw_y -= (1 << 19);
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c54:	61bb      	str	r3, [r7, #24]
	raw_z -= (1 << 19);
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f5a3 2300 	sub.w	r3, r3, #524288	@ 0x80000
 8002c5c:	617b      	str	r3, [r7, #20]

	// Scale to Gauss
	mag_x = (float)raw_x * 0.0000625 - mag_x_offset;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c68:	ee17 0a90 	vmov	r0, s15
 8002c6c:	f7fd fc8c 	bl	8000588 <__aeabi_f2d>
 8002c70:	a359      	add	r3, pc, #356	@ (adr r3, 8002dd8 <read_MMC5603+0x218>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd fcdf 	bl	8000638 <__aeabi_dmul>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461d      	mov	r5, r3
 8002c82:	4b5b      	ldr	r3, [pc, #364]	@ (8002df0 <read_MMC5603+0x230>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc7e 	bl	8000588 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4620      	mov	r0, r4
 8002c92:	4629      	mov	r1, r5
 8002c94:	f7fd fb18 	bl	80002c8 <__aeabi_dsub>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd ffc2 	bl	8000c28 <__aeabi_d2f>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4a53      	ldr	r2, [pc, #332]	@ (8002df4 <read_MMC5603+0x234>)
 8002ca8:	6013      	str	r3, [r2, #0]
	mag_y = (float)raw_y * 0.0000625 - mag_y_offset;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cb4:	ee17 0a90 	vmov	r0, s15
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	a346      	add	r3, pc, #280	@ (adr r3, 8002dd8 <read_MMC5603+0x218>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fcb9 	bl	8000638 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4614      	mov	r4, r2
 8002ccc:	461d      	mov	r5, r3
 8002cce:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <read_MMC5603+0x238>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc58 	bl	8000588 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f7fd faf2 	bl	80002c8 <__aeabi_dsub>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7fd ff9c 	bl	8000c28 <__aeabi_d2f>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a42      	ldr	r2, [pc, #264]	@ (8002dfc <read_MMC5603+0x23c>)
 8002cf4:	6013      	str	r3, [r2, #0]
	mag_z = (float)raw_z * 0.0000625 - mag_z_offset;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	ee07 3a90 	vmov	s15, r3
 8002cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d00:	ee17 0a90 	vmov	r0, s15
 8002d04:	f7fd fc40 	bl	8000588 <__aeabi_f2d>
 8002d08:	a333      	add	r3, pc, #204	@ (adr r3, 8002dd8 <read_MMC5603+0x218>)
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f7fd fc93 	bl	8000638 <__aeabi_dmul>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4614      	mov	r4, r2
 8002d18:	461d      	mov	r5, r3
 8002d1a:	4b39      	ldr	r3, [pc, #228]	@ (8002e00 <read_MMC5603+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc32 	bl	8000588 <__aeabi_f2d>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4620      	mov	r0, r4
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	f7fd facc 	bl	80002c8 <__aeabi_dsub>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f7fd ff76 	bl	8000c28 <__aeabi_d2f>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a31      	ldr	r2, [pc, #196]	@ (8002e04 <read_MMC5603+0x244>)
 8002d40:	6013      	str	r3, [r2, #0]

	direction = atan2(mag_y, mag_x) * 180 / PI;
 8002d42:	4b2e      	ldr	r3, [pc, #184]	@ (8002dfc <read_MMC5603+0x23c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc1e 	bl	8000588 <__aeabi_f2d>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	460d      	mov	r5, r1
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <read_MMC5603+0x234>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc17 	bl	8000588 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	ec43 2b11 	vmov	d1, r2, r3
 8002d62:	ec45 4b10 	vmov	d0, r4, r5
 8002d66:	f00b ff9d 	bl	800eca4 <atan2>
 8002d6a:	ec51 0b10 	vmov	r0, r1, d0
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <read_MMC5603+0x248>)
 8002d74:	f7fd fc60 	bl	8000638 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	a317      	add	r3, pc, #92	@ (adr r3, 8002de0 <read_MMC5603+0x220>)
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f7fd fd81 	bl	800088c <__aeabi_ddiv>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	491f      	ldr	r1, [pc, #124]	@ (8002e0c <read_MMC5603+0x24c>)
 8002d90:	e9c1 2300 	strd	r2, r3, [r1]
	if (direction < 0){
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <read_MMC5603+0x24c>)
 8002d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f7fd febb 	bl	8000b1c <__aeabi_dcmplt>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <read_MMC5603+0x20e>
		direction += 360;
 8002dac:	4b17      	ldr	r3, [pc, #92]	@ (8002e0c <read_MMC5603+0x24c>)
 8002dae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	4b16      	ldr	r3, [pc, #88]	@ (8002e10 <read_MMC5603+0x250>)
 8002db8:	f7fd fa88 	bl	80002cc <__adddf3>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4912      	ldr	r1, [pc, #72]	@ (8002e0c <read_MMC5603+0x24c>)
 8002dc2:	e9c1 2300 	strd	r2, r3, [r1]
 8002dc6:	e002      	b.n	8002dce <read_MMC5603+0x20e>
		return;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <read_MMC5603+0x20e>
		return;
 8002dcc:	bf00      	nop
	}
}
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ddc:	3f10624d 	.word	0x3f10624d
 8002de0:	fc8b007a 	.word	0xfc8b007a
 8002de4:	400921fa 	.word	0x400921fa
 8002de8:	200004cc 	.word	0x200004cc
 8002dec:	20000b24 	.word	0x20000b24
 8002df0:	200009f0 	.word	0x200009f0
 8002df4:	20000634 	.word	0x20000634
 8002df8:	200009f4 	.word	0x200009f4
 8002dfc:	20000638 	.word	0x20000638
 8002e00:	200009f8 	.word	0x200009f8
 8002e04:	2000063c 	.word	0x2000063c
 8002e08:	40668000 	.word	0x40668000
 8002e0c:	20000868 	.word	0x20000868
 8002e10:	40768000 	.word	0x40768000

08002e14 <read_MPL3115A2>:

void read_MPL3115A2(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	2309      	movs	r3, #9
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	21c0      	movs	r1, #192	@ 0xc0
 8002e2e:	482b      	ldr	r0, [pc, #172]	@ (8002edc <read_MPL3115A2+0xc8>)
 8002e30:	f004 f964 	bl	80070fc <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8002e34:	793b      	ldrb	r3, [r7, #4]
 8002e36:	041a      	lsls	r2, r3, #16
 8002e38:	797b      	ldrb	r3, [r7, #5]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	79ba      	ldrb	r2, [r7, #6]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f7fd fb7a 	bl	8000544 <__aeabi_ui2d>
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <read_MPL3115A2+0xcc>)
 8002e56:	f7fd fd19 	bl	800088c <__aeabi_ddiv>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <read_MPL3115A2+0xd0>)
 8002e68:	f7fd fd10 	bl	800088c <__aeabi_ddiv>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fed8 	bl	8000c28 <__aeabi_d2f>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <read_MPL3115A2+0xd4>)
 8002e7c:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	7a3b      	ldrb	r3, [r7, #8]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8002e8c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e90:	111b      	asrs	r3, r3, #4
 8002e92:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8002e94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb63 	bl	8000564 <__aeabi_i2d>
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <read_MPL3115A2+0xd8>)
 8002ea4:	f7fd fcf2 	bl	800088c <__aeabi_ddiv>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd feba 	bl	8000c28 <__aeabi_d2f>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef0 <read_MPL3115A2+0xdc>)
 8002eb8:	6013      	str	r3, [r2, #0]

    altitude = calculate_altitude(pressure);
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <read_MPL3115A2+0xd4>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec4:	f7ff fe28 	bl	8002b18 <calculate_altitude>
 8002ec8:	eef0 7a40 	vmov.f32	s15, s0
 8002ecc:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <read_MPL3115A2+0xe0>)
 8002ece:	edc3 7a00 	vstr	s15, [r3]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200004cc 	.word	0x200004cc
 8002ee0:	40100000 	.word	0x40100000
 8002ee4:	408f4000 	.word	0x408f4000
 8002ee8:	20000614 	.word	0x20000614
 8002eec:	40300000 	.word	0x40300000
 8002ef0:	20000610 	.word	0x20000610
 8002ef4:	2000060c 	.word	0x2000060c

08002ef8 <calibrate_altitude>:

void calibrate_altitude(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af04      	add	r7, sp, #16
    uint8_t mpl_data[5]; // Buffer to hold pressure and temperature data

    // Read 5 bytes from OUT_P_MSB (3 for pressure, 2 for temperature)
    HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_OUT_P_MSB, I2C_MEMADD_SIZE_8BIT, mpl_data, 9, HAL_MAX_DELAY);
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	2309      	movs	r3, #9
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	2201      	movs	r2, #1
 8002f10:	21c0      	movs	r1, #192	@ 0xc0
 8002f12:	4831      	ldr	r0, [pc, #196]	@ (8002fd8 <calibrate_altitude+0xe0>)
 8002f14:	f004 f8f2 	bl	80070fc <HAL_I2C_Mem_Read>

    // Combine pressure bytes into a 20-bit integer
    uint32_t p_raw = ((uint32_t)mpl_data[0] << 16) | ((uint32_t)mpl_data[1] << 8) | (mpl_data[2]);
 8002f18:	793b      	ldrb	r3, [r7, #4]
 8002f1a:	041a      	lsls	r2, r3, #16
 8002f1c:	797b      	ldrb	r3, [r7, #5]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	4313      	orrs	r3, r2
 8002f22:	79ba      	ldrb	r2, [r7, #6]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    p_raw >>= 4; // Pressure is stored in the upper 20 bits
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]

    // Convert raw pressure to Pascals
    pressure = p_raw / 4.0 / 1000; // Pressure in KiloPascals
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fd fb08 	bl	8000544 <__aeabi_ui2d>
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <calibrate_altitude+0xe4>)
 8002f3a:	f7fd fca7 	bl	800088c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <calibrate_altitude+0xe8>)
 8002f4c:	f7fd fc9e 	bl	800088c <__aeabi_ddiv>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe66 	bl	8000c28 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a21      	ldr	r2, [pc, #132]	@ (8002fe4 <calibrate_altitude+0xec>)
 8002f60:	6013      	str	r3, [r2, #0]

    // Combine temperature bytes into a 12-bit integer
    int16_t t_raw = ((int16_t)mpl_data[3] << 8) | (mpl_data[4]);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	b21a      	sxth	r2, r3
 8002f68:	7a3b      	ldrb	r3, [r7, #8]
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	817b      	strh	r3, [r7, #10]
    t_raw >>= 4; // Temperature is stored in the upper 12 bits
 8002f70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f74:	111b      	asrs	r3, r3, #4
 8002f76:	817b      	strh	r3, [r7, #10]

    // Convert raw temperature to degrees Celsius
    temperature = t_raw / 16.0; // Temperature in Celsius
 8002f78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd faf1 	bl	8000564 <__aeabi_i2d>
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <calibrate_altitude+0xf0>)
 8002f88:	f7fd fc80 	bl	800088c <__aeabi_ddiv>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f7fd fe48 	bl	8000c28 <__aeabi_d2f>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <calibrate_altitude+0xf4>)
 8002f9c:	6013      	str	r3, [r2, #0]

    altitude_offset = 0;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <calibrate_altitude+0xf8>)
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    altitude = calculate_altitude(pressure);
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe4 <calibrate_altitude+0xec>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	f7ff fdb2 	bl	8002b18 <calculate_altitude>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff4 <calibrate_altitude+0xfc>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
    altitude_offset = -altitude;
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <calibrate_altitude+0xfc>)
 8002fc0:	edd3 7a00 	vldr	s15, [r3]
 8002fc4:	eef1 7a67 	vneg.f32	s15, s15
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <calibrate_altitude+0xf8>)
 8002fca:	edc3 7a00 	vstr	s15, [r3]
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200004cc 	.word	0x200004cc
 8002fdc:	40100000 	.word	0x40100000
 8002fe0:	408f4000 	.word	0x408f4000
 8002fe4:	20000614 	.word	0x20000614
 8002fe8:	40300000 	.word	0x40300000
 8002fec:	20000610 	.word	0x20000610
 8002ff0:	20000a0c 	.word	0x20000a0c
 8002ff4:	2000060c 	.word	0x2000060c

08002ff8 <read_MPU6050>:

void read_MPU6050(void) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
	uint8_t imu_addr = 0x3B;
 8002ffe:	233b      	movs	r3, #59	@ 0x3b
 8003000:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_addr = 0x43;
 8003002:	2343      	movs	r3, #67	@ 0x43
 8003004:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef mpu_ret;
	uint8_t mpu_buf[6];
	int16_t raw_accel_x;
	int16_t raw_accel_y;
	int16_t raw_accel_z;
	int16_t raw_gyro_x = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	82fb      	strh	r3, [r7, #22]
	int16_t raw_gyro_y = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	82bb      	strh	r3, [r7, #20]
	int16_t raw_gyro_z = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	827b      	strh	r3, [r7, #18]

	mpu_ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDRESS, 3, 5);
 8003012:	2305      	movs	r3, #5
 8003014:	2203      	movs	r2, #3
 8003016:	21d0      	movs	r1, #208	@ 0xd0
 8003018:	4871      	ldr	r0, [pc, #452]	@ (80031e0 <read_MPU6050+0x1e8>)
 800301a:	f004 faa1 	bl	8007560 <HAL_I2C_IsDeviceReady>
 800301e:	4603      	mov	r3, r0
 8003020:	747b      	strb	r3, [r7, #17]
    if (mpu_ret == HAL_OK){
 8003022:	7c7b      	ldrb	r3, [r7, #17]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 80d2 	bne.w	80031ce <read_MPU6050+0x1d6>
		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &imu_addr, 1, 100);
 800302a:	f107 0209 	add.w	r2, r7, #9
 800302e:	2364      	movs	r3, #100	@ 0x64
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	21d0      	movs	r1, #208	@ 0xd0
 8003036:	486a      	ldr	r0, [pc, #424]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003038:	f003 fc36 	bl	80068a8 <HAL_I2C_Master_Transmit>
 800303c:	4603      	mov	r3, r0
 800303e:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8003040:	7c7b      	ldrb	r3, [r7, #17]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15a      	bne.n	80030fc <read_MPU6050+0x104>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8003046:	463a      	mov	r2, r7
 8003048:	2364      	movs	r3, #100	@ 0x64
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2306      	movs	r3, #6
 800304e:	21d0      	movs	r1, #208	@ 0xd0
 8003050:	4863      	ldr	r0, [pc, #396]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003052:	f003 fd27 	bl	8006aa4 <HAL_I2C_Master_Receive>
 8003056:	4603      	mov	r3, r0
 8003058:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800305a:	7c7b      	ldrb	r3, [r7, #17]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d14d      	bne.n	80030fc <read_MPU6050+0x104>
				// shift first byte left, add second byte
				raw_accel_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf[1]);
 8003060:	783b      	ldrb	r3, [r7, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b21a      	sxth	r2, r3
 8003066:	787b      	ldrb	r3, [r7, #1]
 8003068:	b21b      	sxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	81fb      	strh	r3, [r7, #14]
				raw_accel_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf[3]);
 800306e:	78bb      	ldrb	r3, [r7, #2]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b21a      	sxth	r2, r3
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	b21b      	sxth	r3, r3
 8003078:	4313      	orrs	r3, r2
 800307a:	81bb      	strh	r3, [r7, #12]
				raw_accel_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf[5]);
 800307c:	793b      	ldrb	r3, [r7, #4]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	b21a      	sxth	r2, r3
 8003082:	797b      	ldrb	r3, [r7, #5]
 8003084:	b21b      	sxth	r3, r3
 8003086:	4313      	orrs	r3, r2
 8003088:	817b      	strh	r3, [r7, #10]

				// get float values in g
				accel_x = raw_accel_x/16384.0;
 800308a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa68 	bl	8000564 <__aeabi_i2d>
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	4b52      	ldr	r3, [pc, #328]	@ (80031e4 <read_MPU6050+0x1ec>)
 800309a:	f7fd fbf7 	bl	800088c <__aeabi_ddiv>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fdbf 	bl	8000c28 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a4e      	ldr	r2, [pc, #312]	@ (80031e8 <read_MPU6050+0x1f0>)
 80030ae:	6013      	str	r3, [r2, #0]
				accel_y = raw_accel_y/16384.0;
 80030b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fd fa55 	bl	8000564 <__aeabi_i2d>
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	4b49      	ldr	r3, [pc, #292]	@ (80031e4 <read_MPU6050+0x1ec>)
 80030c0:	f7fd fbe4 	bl	800088c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fdac 	bl	8000c28 <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <read_MPU6050+0x1f4>)
 80030d4:	6013      	str	r3, [r2, #0]
				accel_z = raw_accel_z/16384.0;
 80030d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fa42 	bl	8000564 <__aeabi_i2d>
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <read_MPU6050+0x1ec>)
 80030e6:	f7fd fbd1 	bl	800088c <__aeabi_ddiv>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fd99 	bl	8000c28 <__aeabi_d2f>
 80030f6:	4603      	mov	r3, r0
 80030f8:	4a3d      	ldr	r2, [pc, #244]	@ (80031f0 <read_MPU6050+0x1f8>)
 80030fa:	6013      	str	r3, [r2, #0]
			}
		}

		mpu_ret = HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDRESS, &gyro_addr, 1, 100);
 80030fc:	f107 0208 	add.w	r2, r7, #8
 8003100:	2364      	movs	r3, #100	@ 0x64
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2301      	movs	r3, #1
 8003106:	21d0      	movs	r1, #208	@ 0xd0
 8003108:	4835      	ldr	r0, [pc, #212]	@ (80031e0 <read_MPU6050+0x1e8>)
 800310a:	f003 fbcd 	bl	80068a8 <HAL_I2C_Master_Transmit>
 800310e:	4603      	mov	r3, r0
 8003110:	747b      	strb	r3, [r7, #17]
		if ( mpu_ret == HAL_OK ) {
 8003112:	7c7b      	ldrb	r3, [r7, #17]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d15a      	bne.n	80031ce <read_MPU6050+0x1d6>
			mpu_ret = HAL_I2C_Master_Receive(&hi2c1, MPU6050_ADDRESS, mpu_buf, 6, 100);
 8003118:	463a      	mov	r2, r7
 800311a:	2364      	movs	r3, #100	@ 0x64
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2306      	movs	r3, #6
 8003120:	21d0      	movs	r1, #208	@ 0xd0
 8003122:	482f      	ldr	r0, [pc, #188]	@ (80031e0 <read_MPU6050+0x1e8>)
 8003124:	f003 fcbe 	bl	8006aa4 <HAL_I2C_Master_Receive>
 8003128:	4603      	mov	r3, r0
 800312a:	747b      	strb	r3, [r7, #17]
			if ( mpu_ret == HAL_OK ) {
 800312c:	7c7b      	ldrb	r3, [r7, #17]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14d      	bne.n	80031ce <read_MPU6050+0x1d6>
				// shift first byte left, add second byte
				raw_gyro_x = (int16_t)(mpu_buf[0] << 8 | mpu_buf [1]);
 8003132:	783b      	ldrb	r3, [r7, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	b21a      	sxth	r2, r3
 8003138:	787b      	ldrb	r3, [r7, #1]
 800313a:	b21b      	sxth	r3, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	82fb      	strh	r3, [r7, #22]
				raw_gyro_y = (int16_t)(mpu_buf[2] << 8 | mpu_buf [3]);
 8003140:	78bb      	ldrb	r3, [r7, #2]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21a      	sxth	r2, r3
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	b21b      	sxth	r3, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	82bb      	strh	r3, [r7, #20]
				raw_gyro_z = (int16_t)(mpu_buf[4] << 8 | mpu_buf [5]);
 800314e:	793b      	ldrb	r3, [r7, #4]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	b21a      	sxth	r2, r3
 8003154:	797b      	ldrb	r3, [r7, #5]
 8003156:	b21b      	sxth	r3, r3
 8003158:	4313      	orrs	r3, r2
 800315a:	827b      	strh	r3, [r7, #18]

				// convert to deg/sec
				gyro_x = raw_gyro_x/131.0;
 800315c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd f9ff 	bl	8000564 <__aeabi_i2d>
 8003166:	a31c      	add	r3, pc, #112	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fb8e 	bl	800088c <__aeabi_ddiv>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fd56 	bl	8000c28 <__aeabi_d2f>
 800317c:	4603      	mov	r3, r0
 800317e:	4a1d      	ldr	r2, [pc, #116]	@ (80031f4 <read_MPU6050+0x1fc>)
 8003180:	6013      	str	r3, [r2, #0]
				gyro_y = raw_gyro_y/131.0;
 8003182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9ec 	bl	8000564 <__aeabi_i2d>
 800318c:	a312      	add	r3, pc, #72	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fb7b 	bl	800088c <__aeabi_ddiv>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fd43 	bl	8000c28 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <read_MPU6050+0x200>)
 80031a6:	6013      	str	r3, [r2, #0]
				gyro_z = raw_gyro_z/131.0;
 80031a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9d9 	bl	8000564 <__aeabi_i2d>
 80031b2:	a309      	add	r3, pc, #36	@ (adr r3, 80031d8 <read_MPU6050+0x1e0>)
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f7fd fb68 	bl	800088c <__aeabi_ddiv>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	f7fd fd30 	bl	8000c28 <__aeabi_d2f>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a0c      	ldr	r2, [pc, #48]	@ (80031fc <read_MPU6050+0x204>)
 80031cc:	6013      	str	r3, [r2, #0]
			}
		}
    }
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00000000 	.word	0x00000000
 80031dc:	40606000 	.word	0x40606000
 80031e0:	200004cc 	.word	0x200004cc
 80031e4:	40d00000 	.word	0x40d00000
 80031e8:	20000628 	.word	0x20000628
 80031ec:	2000062c 	.word	0x2000062c
 80031f0:	20000630 	.word	0x20000630
 80031f4:	2000061c 	.word	0x2000061c
 80031f8:	20000620 	.word	0x20000620
 80031fc:	20000624 	.word	0x20000624

08003200 <read_PA1010D>:

bool read_PA1010D()
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af02      	add	r7, sp, #8
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return false;
 8003206:	2305      	movs	r3, #5
 8003208:	2203      	movs	r2, #3
 800320a:	2120      	movs	r1, #32
 800320c:	481d      	ldr	r0, [pc, #116]	@ (8003284 <read_PA1010D+0x84>)
 800320e:	f004 f9a7 	bl	8007560 <HAL_I2C_IsDeviceReady>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <read_PA1010D+0x1c>
 8003218:	2300      	movs	r3, #0
 800321a:	e02f      	b.n	800327c <read_PA1010D+0x7c>

	uint8_t pa_buf_index = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	71fb      	strb	r3, [r7, #7]
	uint8_t pa_bytebuf = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	717b      	strb	r3, [r7, #5]
    bool ret = false;
 8003224:	2300      	movs	r3, #0
 8003226:	71bb      	strb	r3, [r7, #6]

	/* PA1010D (GPS) */
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, HAL_MAX_DELAY) == HAL_OK){
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	2203      	movs	r2, #3
 800322e:	2120      	movs	r1, #32
 8003230:	4814      	ldr	r0, [pc, #80]	@ (8003284 <read_PA1010D+0x84>)
 8003232:	f004 f995 	bl	8007560 <HAL_I2C_IsDeviceReady>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11e      	bne.n	800327a <read_PA1010D+0x7a>
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 800323c:	2300      	movs	r3, #0
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	e015      	b.n	800326e <read_PA1010D+0x6e>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa_bytebuf, 1, HAL_MAX_DELAY);
 8003242:	1d7a      	adds	r2, r7, #5
 8003244:	f04f 33ff 	mov.w	r3, #4294967295
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2301      	movs	r3, #1
 800324c:	2120      	movs	r1, #32
 800324e:	480d      	ldr	r0, [pc, #52]	@ (8003284 <read_PA1010D+0x84>)
 8003250:	f003 fc28 	bl	8006aa4 <HAL_I2C_Master_Receive>
			if (pa_bytebuf == '$'){
 8003254:	797b      	ldrb	r3, [r7, #5]
 8003256:	2b24      	cmp	r3, #36	@ 0x24
 8003258:	d102      	bne.n	8003260 <read_PA1010D+0x60>
				ret = true;
 800325a:	2301      	movs	r3, #1
 800325c:	71bb      	strb	r3, [r7, #6]
				break; // Idea: take away break statement and see what the whole sentence looks like
 800325e:	e009      	b.n	8003274 <read_PA1010D+0x74>
			}
			pa_buf[pa_buf_index] = pa_bytebuf;
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	7979      	ldrb	r1, [r7, #5]
 8003264:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <read_PA1010D+0x88>)
 8003266:	54d1      	strb	r1, [r2, r3]
		for(pa_buf_index=0; pa_buf_index<255; pa_buf_index++){
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	3301      	adds	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2bff      	cmp	r3, #255	@ 0xff
 8003272:	d1e6      	bne.n	8003242 <read_PA1010D+0x42>
		}
		parse_nmea(pa_buf);
 8003274:	4804      	ldr	r0, [pc, #16]	@ (8003288 <read_PA1010D+0x88>)
 8003276:	f7ff fc03 	bl	8002a80 <parse_nmea>
	}
	return ret;
 800327a:	79bb      	ldrb	r3, [r7, #6]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	200004cc 	.word	0x200004cc
 8003288:	20000658 	.word	0x20000658

0800328c <flush_PA1010D>:

void flush_PA1010D(){
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	while(read_PA1010D());
 8003290:	bf00      	nop
 8003292:	f7ff ffb5 	bl	8003200 <read_PA1010D>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1fa      	bne.n	8003292 <flush_PA1010D+0x6>
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	0000      	movs	r0, r0
 80032a4:	0000      	movs	r0, r0
	...

080032a8 <read_INA219>:

void read_INA219(void) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
//
//	}


	// NEW CODE ----------------------------------------------------------------------------
	uint8_t reg = 0x02;  // Bus voltage register
 80032ae:	2302      	movs	r3, #2
 80032b0:	71fb      	strb	r3, [r7, #7]
	uint8_t ina_buf[2];

	ina_ret = HAL_I2C_IsDeviceReady(&hi2c1, INA219_ADDRESS, 3, 5);
 80032b2:	2305      	movs	r3, #5
 80032b4:	2203      	movs	r2, #3
 80032b6:	2180      	movs	r1, #128	@ 0x80
 80032b8:	4829      	ldr	r0, [pc, #164]	@ (8003360 <read_INA219+0xb8>)
 80032ba:	f004 f951 	bl	8007560 <HAL_I2C_IsDeviceReady>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <read_INA219+0xbc>)
 80032c4:	701a      	strb	r2, [r3, #0]
	if (ina_ret == HAL_OK) {
 80032c6:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <read_INA219+0xbc>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d13e      	bne.n	800334c <read_INA219+0xa4>
		// Write the register address
		ina_ret = HAL_I2C_Master_Transmit(&hi2c1, INA219_ADDRESS, &reg, 1, 100);
 80032ce:	1dfa      	adds	r2, r7, #7
 80032d0:	2364      	movs	r3, #100	@ 0x64
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2301      	movs	r3, #1
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	4821      	ldr	r0, [pc, #132]	@ (8003360 <read_INA219+0xb8>)
 80032da:	f003 fae5 	bl	80068a8 <HAL_I2C_Master_Transmit>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <read_INA219+0xbc>)
 80032e4:	701a      	strb	r2, [r3, #0]
		if (ina_ret == HAL_OK) {
 80032e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003364 <read_INA219+0xbc>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d12e      	bne.n	800334c <read_INA219+0xa4>
			// Read 2 bytes from that register
			ina_ret = HAL_I2C_Master_Receive(&hi2c1, INA219_ADDRESS, ina_buf, 2, 10);
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	230a      	movs	r3, #10
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2302      	movs	r3, #2
 80032f6:	2180      	movs	r1, #128	@ 0x80
 80032f8:	4819      	ldr	r0, [pc, #100]	@ (8003360 <read_INA219+0xb8>)
 80032fa:	f003 fbd3 	bl	8006aa4 <HAL_I2C_Master_Receive>
 80032fe:	4603      	mov	r3, r0
 8003300:	461a      	mov	r2, r3
 8003302:	4b18      	ldr	r3, [pc, #96]	@ (8003364 <read_INA219+0xbc>)
 8003304:	701a      	strb	r2, [r3, #0]
			if (ina_ret == HAL_OK) {
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <read_INA219+0xbc>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11e      	bne.n	800334c <read_INA219+0xa4>
				uint16_t raw_bus_voltage = (ina_buf[0] << 8) | ina_buf[1];
 800330e:	793b      	ldrb	r3, [r7, #4]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b21a      	sxth	r2, r3
 8003314:	797b      	ldrb	r3, [r7, #5]
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	81fb      	strh	r3, [r7, #14]
				raw_bus_voltage >>= 3;  // per datasheet, remove unused bits
 800331e:	89fb      	ldrh	r3, [r7, #14]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	81fb      	strh	r3, [r7, #14]

				float bus_voltage = raw_bus_voltage * 0.004;  // each bit = 4mV
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f91c 	bl	8000564 <__aeabi_i2d>
 800332c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003358 <read_INA219+0xb0>)
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f7fd f981 	bl	8000638 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc73 	bl	8000c28 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	60bb      	str	r3, [r7, #8]
				voltage = bus_voltage;
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <read_INA219+0xc0>)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6013      	str	r3, [r2, #0]
				// For debug:
				// printf("Bus voltage: %.3f V\n", voltage);
			}
		}
	}
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	f3af 8000 	nop.w
 8003358:	d2f1a9fc 	.word	0xd2f1a9fc
 800335c:	3f70624d 	.word	0x3f70624d
 8003360:	200004cc 	.word	0x200004cc
 8003364:	20000860 	.word	0x20000860
 8003368:	20000618 	.word	0x20000618

0800336c <calibrate_mmc>:

void calibrate_mmc(){
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	read_MMC5603();
 8003370:	f7ff fc26 	bl	8002bc0 <read_MMC5603>
	if (mag_x < mag_x_min){
 8003374:	4b2e      	ldr	r3, [pc, #184]	@ (8003430 <calibrate_mmc+0xc4>)
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <calibrate_mmc+0xc8>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d503      	bpl.n	8003392 <calibrate_mmc+0x26>
		mag_x_min = mag_x;
 800338a:	4b29      	ldr	r3, [pc, #164]	@ (8003430 <calibrate_mmc+0xc4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <calibrate_mmc+0xc8>)
 8003390:	6013      	str	r3, [r2, #0]
	}
	if (mag_x > mag_x_max){
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <calibrate_mmc+0xc4>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <calibrate_mmc+0xcc>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	dd03      	ble.n	80033b0 <calibrate_mmc+0x44>
		mag_x_max = mag_x;
 80033a8:	4b21      	ldr	r3, [pc, #132]	@ (8003430 <calibrate_mmc+0xc4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <calibrate_mmc+0xcc>)
 80033ae:	6013      	str	r3, [r2, #0]
	}
	if (mag_y < mag_y_min){
 80033b0:	4b22      	ldr	r3, [pc, #136]	@ (800343c <calibrate_mmc+0xd0>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <calibrate_mmc+0xd4>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d503      	bpl.n	80033ce <calibrate_mmc+0x62>
		mag_y_min = mag_y;
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <calibrate_mmc+0xd0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <calibrate_mmc+0xd4>)
 80033cc:	6013      	str	r3, [r2, #0]
	}
	if (mag_y > mag_y_max){
 80033ce:	4b1b      	ldr	r3, [pc, #108]	@ (800343c <calibrate_mmc+0xd0>)
 80033d0:	ed93 7a00 	vldr	s14, [r3]
 80033d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <calibrate_mmc+0xd8>)
 80033d6:	edd3 7a00 	vldr	s15, [r3]
 80033da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e2:	dd03      	ble.n	80033ec <calibrate_mmc+0x80>
		mag_y_max = mag_y;
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <calibrate_mmc+0xd0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a16      	ldr	r2, [pc, #88]	@ (8003444 <calibrate_mmc+0xd8>)
 80033ea:	6013      	str	r3, [r2, #0]
	}
	if (mag_z < mag_z_min){
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <calibrate_mmc+0xdc>)
 80033ee:	ed93 7a00 	vldr	s14, [r3]
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <calibrate_mmc+0xe0>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003400:	d503      	bpl.n	800340a <calibrate_mmc+0x9e>
		mag_z_min = mag_z;
 8003402:	4b11      	ldr	r3, [pc, #68]	@ (8003448 <calibrate_mmc+0xdc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a11      	ldr	r2, [pc, #68]	@ (800344c <calibrate_mmc+0xe0>)
 8003408:	6013      	str	r3, [r2, #0]
	}
	if (mag_z > mag_z_max){
 800340a:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <calibrate_mmc+0xdc>)
 800340c:	ed93 7a00 	vldr	s14, [r3]
 8003410:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <calibrate_mmc+0xe4>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341e:	dc00      	bgt.n	8003422 <calibrate_mmc+0xb6>
		mag_z_max = mag_z;
	}
}
 8003420:	e003      	b.n	800342a <calibrate_mmc+0xbe>
		mag_z_max = mag_z;
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <calibrate_mmc+0xdc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a0a      	ldr	r2, [pc, #40]	@ (8003450 <calibrate_mmc+0xe4>)
 8003428:	6013      	str	r3, [r2, #0]
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000634 	.word	0x20000634
 8003434:	200009fc 	.word	0x200009fc
 8003438:	20000a08 	.word	0x20000a08
 800343c:	20000638 	.word	0x20000638
 8003440:	20000a00 	.word	0x20000a00
 8003444:	200000a0 	.word	0x200000a0
 8003448:	2000063c 	.word	0x2000063c
 800344c:	20000a04 	.word	0x20000a04
 8003450:	200000a4 	.word	0x200000a4

08003454 <init_MMC5603>:

// Sensor Init Functions -------------------------------------------------------------------
void init_MMC5603(void) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af04      	add	r7, sp, #16
	uint8_t odr_value = 100;  // Example: Set ODR to 1000 Hz by writing 255
 800345a:	2364      	movs	r3, #100	@ 0x64
 800345c:	71fb      	strb	r3, [r7, #7]
	uint8_t control_reg0 = 0b10000000;  // Set Cmm_freq_en and Take_meas_M
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	71bb      	strb	r3, [r7, #6]
	uint8_t control_reg1 = 0b10000000;  // BW0=0, BW1=0 (6.6 ms)
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	717b      	strb	r3, [r7, #5]
	uint8_t control_reg2 = 0b00010000;  // Set Cmm_en to enable continuous mode
 8003466:	2310      	movs	r3, #16
 8003468:	713b      	strb	r3, [r7, #4]

	// Configure Control Register 1
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1C, I2C_MEMADD_SIZE_8BIT, &control_reg1, 1, HAL_MAX_DELAY);
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	9302      	str	r3, [sp, #8]
 8003470:	2301      	movs	r3, #1
 8003472:	9301      	str	r3, [sp, #4]
 8003474:	1d7b      	adds	r3, r7, #5
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2301      	movs	r3, #1
 800347a:	221c      	movs	r2, #28
 800347c:	2160      	movs	r1, #96	@ 0x60
 800347e:	482f      	ldr	r0, [pc, #188]	@ (800353c <init_MMC5603+0xe8>)
 8003480:	f003 fd42 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 8003484:	2014      	movs	r0, #20
 8003486:	f002 fb3b 	bl	8005b00 <HAL_Delay>
	uint8_t set_bit = 0b00001000;
 800348a:	2308      	movs	r3, #8
 800348c:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &set_bit, 1, HAL_MAX_DELAY);
 800348e:	f04f 33ff 	mov.w	r3, #4294967295
 8003492:	9302      	str	r3, [sp, #8]
 8003494:	2301      	movs	r3, #1
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	1cfb      	adds	r3, r7, #3
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2301      	movs	r3, #1
 800349e:	221b      	movs	r2, #27
 80034a0:	2160      	movs	r1, #96	@ 0x60
 80034a2:	4826      	ldr	r0, [pc, #152]	@ (800353c <init_MMC5603+0xe8>)
 80034a4:	f003 fd30 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80034a8:	2001      	movs	r0, #1
 80034aa:	f002 fb29 	bl	8005b00 <HAL_Delay>
	uint8_t reset_bit = 0b00010000;
 80034ae:	2310      	movs	r3, #16
 80034b0:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &reset_bit, 1, HAL_MAX_DELAY);
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2301      	movs	r3, #1
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	1cbb      	adds	r3, r7, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2301      	movs	r3, #1
 80034c2:	221b      	movs	r2, #27
 80034c4:	2160      	movs	r1, #96	@ 0x60
 80034c6:	481d      	ldr	r0, [pc, #116]	@ (800353c <init_MMC5603+0xe8>)
 80034c8:	f003 fd1e 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 80034cc:	2001      	movs	r0, #1
 80034ce:	f002 fb17 	bl	8005b00 <HAL_Delay>

	// Set Output Data Rate
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1A, I2C_MEMADD_SIZE_8BIT, &odr_value, 1, HAL_MAX_DELAY);
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	2301      	movs	r3, #1
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	2301      	movs	r3, #1
 80034e2:	221a      	movs	r2, #26
 80034e4:	2160      	movs	r1, #96	@ 0x60
 80034e6:	4815      	ldr	r0, [pc, #84]	@ (800353c <init_MMC5603+0xe8>)
 80034e8:	f003 fd0e 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80034ec:	200a      	movs	r0, #10
 80034ee:	f002 fb07 	bl	8005b00 <HAL_Delay>

	// Configure Control Register 0
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1B, I2C_MEMADD_SIZE_8BIT, &control_reg0, 1, HAL_MAX_DELAY);
 80034f2:	f04f 33ff 	mov.w	r3, #4294967295
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	2301      	movs	r3, #1
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	1dbb      	adds	r3, r7, #6
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	221b      	movs	r2, #27
 8003504:	2160      	movs	r1, #96	@ 0x60
 8003506:	480d      	ldr	r0, [pc, #52]	@ (800353c <init_MMC5603+0xe8>)
 8003508:	f003 fcfe 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800350c:	200a      	movs	r0, #10
 800350e:	f002 faf7 	bl	8005b00 <HAL_Delay>

	// Configure Control Register 2
	HAL_I2C_Mem_Write(&hi2c1, MMC5603_ADDRESS, 0x1D, I2C_MEMADD_SIZE_8BIT, &control_reg2, 1, HAL_MAX_DELAY);
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	9302      	str	r3, [sp, #8]
 8003518:	2301      	movs	r3, #1
 800351a:	9301      	str	r3, [sp, #4]
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2301      	movs	r3, #1
 8003522:	221d      	movs	r2, #29
 8003524:	2160      	movs	r1, #96	@ 0x60
 8003526:	4805      	ldr	r0, [pc, #20]	@ (800353c <init_MMC5603+0xe8>)
 8003528:	f003 fcee 	bl	8006f08 <HAL_I2C_Mem_Write>

	// Optionally: Add a delay to allow the sensor to stabilize
	HAL_Delay(10);
 800352c:	200a      	movs	r0, #10
 800352e:	f002 fae7 	bl	8005b00 <HAL_Delay>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200004cc 	.word	0x200004cc

08003540 <init_MPL3115A2>:

void init_MPL3115A2(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af04      	add	r7, sp, #16
	// Check the WHO_AM_I register to verify sensor is connected
	uint8_t who_am_i = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, HAL_MAX_DELAY);
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	9302      	str	r3, [sp, #8]
 8003550:	2301      	movs	r3, #1
 8003552:	9301      	str	r3, [sp, #4]
 8003554:	1dfb      	adds	r3, r7, #7
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2301      	movs	r3, #1
 800355a:	220c      	movs	r2, #12
 800355c:	21c0      	movs	r1, #192	@ 0xc0
 800355e:	480c      	ldr	r0, [pc, #48]	@ (8003590 <init_MPL3115A2+0x50>)
 8003560:	f003 fdcc 	bl	80070fc <HAL_I2C_Mem_Read>
	if (who_am_i == 0xC4)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	2bc4      	cmp	r3, #196	@ 0xc4
 8003568:	d10e      	bne.n	8003588 <init_MPL3115A2+0x48>
	{
		// WHO_AM_I is correct, now configure the sensor
//		uint8_t data = 0xB9; // Altimeter mode
		uint8_t data = 0x39; // Barometer mode
 800356a:	2339      	movs	r3, #57	@ 0x39
 800356c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_ADDRESS, MPL3115A2_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
 8003572:	9302      	str	r3, [sp, #8]
 8003574:	2301      	movs	r3, #1
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	1dbb      	adds	r3, r7, #6
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	2301      	movs	r3, #1
 800357e:	2226      	movs	r2, #38	@ 0x26
 8003580:	21c0      	movs	r1, #192	@ 0xc0
 8003582:	4803      	ldr	r0, [pc, #12]	@ (8003590 <init_MPL3115A2+0x50>)
 8003584:	f003 fcc0 	bl	8006f08 <HAL_I2C_Mem_Write>
	}
	else
	{
		// Handle error
	}
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200004cc 	.word	0x200004cc

08003594 <init_MPU6050>:

void init_MPU6050(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af04      	add	r7, sp, #16
	uint8_t mpu_config = 0x00;
 800359a:	2300      	movs	r3, #0
 800359c:	71fb      	strb	r3, [r7, #7]
	uint8_t mpu_set_sample_rate = 0x07;
 800359e:	2307      	movs	r3, #7
 80035a0:	71bb      	strb	r3, [r7, #6]
	uint8_t mpu_set_fs_range = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	717b      	strb	r3, [r7, #5]
	uint8_t clockSource = 0x01;
 80035a6:	2301      	movs	r3, #1
 80035a8:	713b      	strb	r3, [r7, #4]

	// wake up sensor
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1,&mpu_config, 1, 1000);
 80035aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ae:	9302      	str	r3, [sp, #8]
 80035b0:	2301      	movs	r3, #1
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2301      	movs	r3, #1
 80035ba:	226b      	movs	r2, #107	@ 0x6b
 80035bc:	21d0      	movs	r1, #208	@ 0xd0
 80035be:	481d      	ldr	r0, [pc, #116]	@ (8003634 <init_MPU6050+0xa0>)
 80035c0:	f003 fca2 	bl	8006f08 <HAL_I2C_Mem_Write>

	// set sample rate to 1kHz, config ranges
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x19, 1, &mpu_set_sample_rate, 1, 1000);
 80035c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035c8:	9302      	str	r3, [sp, #8]
 80035ca:	2301      	movs	r3, #1
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	1dbb      	adds	r3, r7, #6
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2301      	movs	r3, #1
 80035d4:	2219      	movs	r2, #25
 80035d6:	21d0      	movs	r1, #208	@ 0xd0
 80035d8:	4816      	ldr	r0, [pc, #88]	@ (8003634 <init_MPU6050+0xa0>)
 80035da:	f003 fc95 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1B, 1, &mpu_set_fs_range, 1, 1000);
 80035de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035e2:	9302      	str	r3, [sp, #8]
 80035e4:	2301      	movs	r3, #1
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	1d7b      	adds	r3, r7, #5
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2301      	movs	r3, #1
 80035ee:	221b      	movs	r2, #27
 80035f0:	21d0      	movs	r1, #208	@ 0xd0
 80035f2:	4810      	ldr	r0, [pc, #64]	@ (8003634 <init_MPU6050+0xa0>)
 80035f4:	f003 fc88 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x1c, 1, &mpu_set_fs_range, 1, 1000);
 80035f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	2301      	movs	r3, #1
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	1d7b      	adds	r3, r7, #5
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2301      	movs	r3, #1
 8003608:	221c      	movs	r2, #28
 800360a:	21d0      	movs	r1, #208	@ 0xd0
 800360c:	4809      	ldr	r0, [pc, #36]	@ (8003634 <init_MPU6050+0xa0>)
 800360e:	f003 fc7b 	bl	8006f08 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, I2C_MEMADD_SIZE_8BIT, &clockSource, 1, 1000);
 8003612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003616:	9302      	str	r3, [sp, #8]
 8003618:	2301      	movs	r3, #1
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2301      	movs	r3, #1
 8003622:	226b      	movs	r2, #107	@ 0x6b
 8003624:	21d0      	movs	r1, #208	@ 0xd0
 8003626:	4803      	ldr	r0, [pc, #12]	@ (8003634 <init_MPU6050+0xa0>)
 8003628:	f003 fc6e 	bl	8006f08 <HAL_I2C_Mem_Write>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200004cc 	.word	0x200004cc

08003638 <init_PA1010D>:

void init_PA1010D(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return;
 800363e:	2305      	movs	r3, #5
 8003640:	2203      	movs	r2, #3
 8003642:	2120      	movs	r1, #32
 8003644:	482a      	ldr	r0, [pc, #168]	@ (80036f0 <init_PA1010D+0xb8>)
 8003646:	f003 ff8b 	bl	8007560 <HAL_I2C_IsDeviceReady>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d14a      	bne.n	80036e6 <init_PA1010D+0xae>
	uint8_t pa1010d_bytebuf;

	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_MODE, strlen( (char *)PA1010D_MODE), 1000);
 8003650:	4828      	ldr	r0, [pc, #160]	@ (80036f4 <init_PA1010D+0xbc>)
 8003652:	f7fc fe2d 	bl	80002b0 <strlen>
 8003656:	4603      	mov	r3, r0
 8003658:	b29b      	uxth	r3, r3
 800365a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800365e:	9200      	str	r2, [sp, #0]
 8003660:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <init_PA1010D+0xbc>)
 8003662:	2120      	movs	r1, #32
 8003664:	4822      	ldr	r0, [pc, #136]	@ (80036f0 <init_PA1010D+0xb8>)
 8003666:	f003 f91f 	bl	80068a8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_RATE, strlen( (char *)PA1010D_RATE), 1000);
 800366a:	4823      	ldr	r0, [pc, #140]	@ (80036f8 <init_PA1010D+0xc0>)
 800366c:	f7fc fe20 	bl	80002b0 <strlen>
 8003670:	4603      	mov	r3, r0
 8003672:	b29b      	uxth	r3, r3
 8003674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <init_PA1010D+0xc0>)
 800367c:	2120      	movs	r1, #32
 800367e:	481c      	ldr	r0, [pc, #112]	@ (80036f0 <init_PA1010D+0xb8>)
 8003680:	f003 f912 	bl	80068a8 <HAL_I2C_Master_Transmit>
//	pa_init_ret[2] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_SAT, strlen( (char *)PA1010D_SAT), 1000);
//	pa_init_ret[3] = HAL_I2C_Master_Transmit(&hi2c1, PA1010D_ADDRESS, PA1010D_CFG, strlen( (char *)PA1010D_CFG), 1000);

//	HAL_Delay(10000);
	//Wait for stabilization
	for(int j=0; j<10; j++){
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e029      	b.n	80036de <init_PA1010D+0xa6>
		for(int i=0; i<255; i++){
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	e014      	b.n	80036ba <init_PA1010D+0x82>
			HAL_I2C_Master_Receive(&hi2c1, PA1010D_ADDRESS, &pa1010d_bytebuf, 1, HAL_MAX_DELAY);
 8003690:	1dfa      	adds	r2, r7, #7
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	2120      	movs	r1, #32
 800369c:	4814      	ldr	r0, [pc, #80]	@ (80036f0 <init_PA1010D+0xb8>)
 800369e:	f003 fa01 	bl	8006aa4 <HAL_I2C_Master_Receive>
			if (pa1010d_bytebuf == '$'){
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b24      	cmp	r3, #36	@ 0x24
 80036a6:	d00c      	beq.n	80036c2 <init_PA1010D+0x8a>
				break;
			}
			pa_buf[i] = pa1010d_bytebuf;
 80036a8:	79f9      	ldrb	r1, [r7, #7]
 80036aa:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <init_PA1010D+0xc4>)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4413      	add	r3, r2
 80036b0:	460a      	mov	r2, r1
 80036b2:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<255; i++){
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80036be:	dde7      	ble.n	8003690 <init_PA1010D+0x58>
 80036c0:	e000      	b.n	80036c4 <init_PA1010D+0x8c>
				break;
 80036c2:	bf00      	nop
		}
		if (j>5){
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b05      	cmp	r3, #5
 80036c8:	dd02      	ble.n	80036d0 <init_PA1010D+0x98>
			parse_nmea(pa_buf);
 80036ca:	480c      	ldr	r0, [pc, #48]	@ (80036fc <init_PA1010D+0xc4>)
 80036cc:	f7ff f9d8 	bl	8002a80 <parse_nmea>
		}
		HAL_Delay(500);
 80036d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036d4:	f002 fa14 	bl	8005b00 <HAL_Delay>
	for(int j=0; j<10; j++){
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	ddd2      	ble.n	800368a <init_PA1010D+0x52>
 80036e4:	e000      	b.n	80036e8 <init_PA1010D+0xb0>
	if (HAL_I2C_IsDeviceReady(&hi2c1, PA1010D_ADDRESS, 3, 5) != HAL_OK) return;
 80036e6:	bf00      	nop
	}
}
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200004cc 	.word	0x200004cc
 80036f4:	20000068 	.word	0x20000068
 80036f8:	20000054 	.word	0x20000054
 80036fc:	20000658 	.word	0x20000658

08003700 <init_INA219>:

void init_INA219(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af04      	add	r7, sp, #16
//	uint8_t ina_config[2] = {0b00000001, 0b00011101};
//	result2 = HAL_I2C_Mem_Write(&hi2c1, (uint16_t) INA219_ADDRESS, 0x05, 1, ina_config, 2, 1000);

	// NEW CODE --------------------------------------------------------------------------
	// This is writing to the CALIBRATION register (0x05), not the CONFIG register (0x00)!
	uint8_t ina_calib[2] = {0x20, 0x00};  // Example calibration value
 8003706:	2320      	movs	r3, #32
 8003708:	80bb      	strh	r3, [r7, #4]
	result2 = HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x05, 1, ina_calib, 2, 1000);
 800370a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800370e:	9302      	str	r3, [sp, #8]
 8003710:	2302      	movs	r3, #2
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	2205      	movs	r2, #5
 800371c:	2180      	movs	r1, #128	@ 0x80
 800371e:	4811      	ldr	r0, [pc, #68]	@ (8003764 <init_INA219+0x64>)
 8003720:	f003 fbf2 	bl	8006f08 <HAL_I2C_Mem_Write>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <init_INA219+0x68>)
 800372a:	701a      	strb	r2, [r3, #0]

	// Now write to the CONFIG register (0x00)
	uint8_t ina_config[2] = {0x01, 0x9F};  // Example: 32V, 2A, 12-bit ADCs
 800372c:	f649 7301 	movw	r3, #40705	@ 0x9f01
 8003730:	803b      	strh	r3, [r7, #0]
	result2 |= HAL_I2C_Mem_Write(&hi2c1, INA219_ADDRESS, 0x00, 1, ina_config, 2, 1000);
 8003732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	2302      	movs	r3, #2
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	463b      	mov	r3, r7
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	2200      	movs	r2, #0
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	4807      	ldr	r0, [pc, #28]	@ (8003764 <init_INA219+0x64>)
 8003748:	f003 fbde 	bl	8006f08 <HAL_I2C_Mem_Write>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <init_INA219+0x68>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4313      	orrs	r3, r2
 8003756:	b2da      	uxtb	r2, r3
 8003758:	4b03      	ldr	r3, [pc, #12]	@ (8003768 <init_INA219+0x68>)
 800375a:	701a      	strb	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200004cc 	.word	0x200004cc
 8003768:	20000b25 	.word	0x20000b25

0800376c <read_sensors>:

void read_sensors(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
	read_MPU6050(); // Accel/ tilt
 8003770:	f7ff fc42 	bl	8002ff8 <read_MPU6050>
	read_MPL3115A2(); // Temperature/ Pressure
 8003774:	f7ff fb4e 	bl	8002e14 <read_MPL3115A2>
	if (!north_cam_on) read_MMC5603(); // Magnetic Field
 8003778:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <read_sensors+0x28>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <read_sensors+0x18>
 8003780:	f7ff fa1e 	bl	8002bc0 <read_MMC5603>
	read_PA1010D();
 8003784:	f7ff fd3c 	bl	8003200 <read_PA1010D>
//	for (int i = 0; i < 10; ++i){
//		read_PA1010D(); // GPS
//	}
	calculate_auto_gyro_speed();
 8003788:	f7fe fdfa 	bl	8002380 <calculate_auto_gyro_speed>
	read_INA219(); // Voltage
 800378c:	f7ff fd8c 	bl	80032a8 <read_INA219>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000878 	.word	0x20000878

08003798 <reset_MPU6050>:

void reset_MPU6050(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af04      	add	r7, sp, #16
    uint8_t reset_command = 0x80;  // Set the reset bit in PWR_MGMT_1
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDRESS, 0x6B, 1, &reset_command, 1, HAL_MAX_DELAY);
 80037a2:	f04f 33ff 	mov.w	r3, #4294967295
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	2301      	movs	r3, #1
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	1dfb      	adds	r3, r7, #7
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	226b      	movs	r2, #107	@ 0x6b
 80037b4:	21d0      	movs	r1, #208	@ 0xd0
 80037b6:	4805      	ldr	r0, [pc, #20]	@ (80037cc <reset_MPU6050+0x34>)
 80037b8:	f003 fba6 	bl	8006f08 <HAL_I2C_Mem_Write>
    HAL_Delay(100); // Wait for reset to complete
 80037bc:	2064      	movs	r0, #100	@ 0x64
 80037be:	f002 f99f 	bl	8005b00 <HAL_Delay>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200004cc 	.word	0x200004cc

080037d0 <init_sensors>:

void init_sensors(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80037d4:	480c      	ldr	r0, [pc, #48]	@ (8003808 <init_sensors+0x38>)
 80037d6:	f003 fff1 	bl	80077bc <HAL_I2C_GetState>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d001      	beq.n	80037e4 <init_sensors+0x14>
		reset_MPU6050();
 80037e0:	f7ff ffda 	bl	8003798 <reset_MPU6050>
	}

	init_MPU6050(); // Must be first
 80037e4:	f7ff fed6 	bl	8003594 <init_MPU6050>
	init_MPL3115A2();
 80037e8:	f7ff feaa 	bl	8003540 <init_MPL3115A2>
	init_MMC5603();
 80037ec:	f7ff fe32 	bl	8003454 <init_MMC5603>
	init_PA1010D();
 80037f0:	f7ff ff22 	bl	8003638 <init_PA1010D>
	init_INA219();
 80037f4:	f7ff ff84 	bl	8003700 <init_INA219>

	read_PA1010D();
 80037f8:	f7ff fd02 	bl	8003200 <read_PA1010D>
	get_mission_time();
 80037fc:	f7fe feac 	bl	8002558 <get_mission_time>

	flush_PA1010D();
 8003800:	f7ff fd44 	bl	800328c <flush_PA1010D>
}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200004cc 	.word	0x200004cc

0800380c <init_commands>:

void init_commands(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
	snprintf(sim_command, sizeof(sim_command), "CMD,%s,SIM,", TEAM_ID);
 8003810:	4b30      	ldr	r3, [pc, #192]	@ (80038d4 <init_commands+0xc8>)
 8003812:	4a31      	ldr	r2, [pc, #196]	@ (80038d8 <init_commands+0xcc>)
 8003814:	210e      	movs	r1, #14
 8003816:	4831      	ldr	r0, [pc, #196]	@ (80038dc <init_commands+0xd0>)
 8003818:	f008 fc58 	bl	800c0cc <sniprintf>
	snprintf(simp_command, sizeof(simp_command), "CMD,%s,SIMP,", TEAM_ID);
 800381c:	4b2d      	ldr	r3, [pc, #180]	@ (80038d4 <init_commands+0xc8>)
 800381e:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <init_commands+0xd4>)
 8003820:	210f      	movs	r1, #15
 8003822:	4830      	ldr	r0, [pc, #192]	@ (80038e4 <init_commands+0xd8>)
 8003824:	f008 fc52 	bl	800c0cc <sniprintf>
	snprintf(set_time_command, sizeof(set_time_command), "CMD,%s,ST,", TEAM_ID);
 8003828:	4b2a      	ldr	r3, [pc, #168]	@ (80038d4 <init_commands+0xc8>)
 800382a:	4a2f      	ldr	r2, [pc, #188]	@ (80038e8 <init_commands+0xdc>)
 800382c:	210d      	movs	r1, #13
 800382e:	482f      	ldr	r0, [pc, #188]	@ (80038ec <init_commands+0xe0>)
 8003830:	f008 fc4c 	bl	800c0cc <sniprintf>
	snprintf(cal_alt_command, sizeof(cal_alt_command), "CMD,%s,CAL", TEAM_ID);
 8003834:	4b27      	ldr	r3, [pc, #156]	@ (80038d4 <init_commands+0xc8>)
 8003836:	4a2e      	ldr	r2, [pc, #184]	@ (80038f0 <init_commands+0xe4>)
 8003838:	210e      	movs	r1, #14
 800383a:	482e      	ldr	r0, [pc, #184]	@ (80038f4 <init_commands+0xe8>)
 800383c:	f008 fc46 	bl	800c0cc <sniprintf>
	snprintf(bcn_on_command, sizeof(bcn_on_command), "CMD,%s,BCN,ON", TEAM_ID);
 8003840:	4b24      	ldr	r3, [pc, #144]	@ (80038d4 <init_commands+0xc8>)
 8003842:	4a2d      	ldr	r2, [pc, #180]	@ (80038f8 <init_commands+0xec>)
 8003844:	2110      	movs	r1, #16
 8003846:	482d      	ldr	r0, [pc, #180]	@ (80038fc <init_commands+0xf0>)
 8003848:	f008 fc40 	bl	800c0cc <sniprintf>
	snprintf(bcn_off_command, sizeof(bcn_off_command), "CMD,%s,BCN,OFF", TEAM_ID);
 800384c:	4b21      	ldr	r3, [pc, #132]	@ (80038d4 <init_commands+0xc8>)
 800384e:	4a2c      	ldr	r2, [pc, #176]	@ (8003900 <init_commands+0xf4>)
 8003850:	2111      	movs	r1, #17
 8003852:	482c      	ldr	r0, [pc, #176]	@ (8003904 <init_commands+0xf8>)
 8003854:	f008 fc3a 	bl	800c0cc <sniprintf>
	snprintf(tel_on_command, sizeof(tel_on_command), "CMD,%s,CX,ON", TEAM_ID);\
 8003858:	4b1e      	ldr	r3, [pc, #120]	@ (80038d4 <init_commands+0xc8>)
 800385a:	4a2b      	ldr	r2, [pc, #172]	@ (8003908 <init_commands+0xfc>)
 800385c:	210f      	movs	r1, #15
 800385e:	482b      	ldr	r0, [pc, #172]	@ (800390c <init_commands+0x100>)
 8003860:	f008 fc34 	bl	800c0cc <sniprintf>
	snprintf(tel_off_command, sizeof(tel_off_command), "CMD,%s,CX,OFF", TEAM_ID);
 8003864:	4b1b      	ldr	r3, [pc, #108]	@ (80038d4 <init_commands+0xc8>)
 8003866:	4a2a      	ldr	r2, [pc, #168]	@ (8003910 <init_commands+0x104>)
 8003868:	2110      	movs	r1, #16
 800386a:	482a      	ldr	r0, [pc, #168]	@ (8003914 <init_commands+0x108>)
 800386c:	f008 fc2e 	bl	800c0cc <sniprintf>
	snprintf(cal_comp_on_command, sizeof(cal_comp_on_command), "CMD,%s,CC,ON", TEAM_ID);
 8003870:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <init_commands+0xc8>)
 8003872:	4a29      	ldr	r2, [pc, #164]	@ (8003918 <init_commands+0x10c>)
 8003874:	210f      	movs	r1, #15
 8003876:	4829      	ldr	r0, [pc, #164]	@ (800391c <init_commands+0x110>)
 8003878:	f008 fc28 	bl	800c0cc <sniprintf>
	snprintf(cal_comp_off_command, sizeof(cal_comp_off_command), "CMD,%s,CC,OFF", TEAM_ID);
 800387c:	4b15      	ldr	r3, [pc, #84]	@ (80038d4 <init_commands+0xc8>)
 800387e:	4a28      	ldr	r2, [pc, #160]	@ (8003920 <init_commands+0x114>)
 8003880:	2110      	movs	r1, #16
 8003882:	4828      	ldr	r0, [pc, #160]	@ (8003924 <init_commands+0x118>)
 8003884:	f008 fc22 	bl	800c0cc <sniprintf>
	snprintf(set_camera_north_command, sizeof(set_camera_north_command), "CMD,%s,SCN", TEAM_ID);
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <init_commands+0xc8>)
 800388a:	4a27      	ldr	r2, [pc, #156]	@ (8003928 <init_commands+0x11c>)
 800388c:	210e      	movs	r1, #14
 800388e:	4827      	ldr	r0, [pc, #156]	@ (800392c <init_commands+0x120>)
 8003890:	f008 fc1c 	bl	800c0cc <sniprintf>
	snprintf(activate_north_cam_command, sizeof(activate_north_cam_command), "CMD,%s,MEC,CAM,ON", TEAM_ID);
 8003894:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <init_commands+0xc8>)
 8003896:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <init_commands+0x124>)
 8003898:	2115      	movs	r1, #21
 800389a:	4826      	ldr	r0, [pc, #152]	@ (8003934 <init_commands+0x128>)
 800389c:	f008 fc16 	bl	800c0cc <sniprintf>
	snprintf(deactivate_north_cam_command, sizeof(deactivate_north_cam_command), "CMD,%s,MEC,CAM,OFF", TEAM_ID);
 80038a0:	4b0c      	ldr	r3, [pc, #48]	@ (80038d4 <init_commands+0xc8>)
 80038a2:	4a25      	ldr	r2, [pc, #148]	@ (8003938 <init_commands+0x12c>)
 80038a4:	2116      	movs	r1, #22
 80038a6:	4825      	ldr	r0, [pc, #148]	@ (800393c <init_commands+0x130>)
 80038a8:	f008 fc10 	bl	800c0cc <sniprintf>
	snprintf(release_payload_command, sizeof(release_payload_command), "CMD,%s,MEC,PAYLOAD,ON", TEAM_ID);
 80038ac:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <init_commands+0xc8>)
 80038ae:	4a24      	ldr	r2, [pc, #144]	@ (8003940 <init_commands+0x134>)
 80038b0:	2119      	movs	r1, #25
 80038b2:	4824      	ldr	r0, [pc, #144]	@ (8003944 <init_commands+0x138>)
 80038b4:	f008 fc0a 	bl	800c0cc <sniprintf>
	snprintf(reset_release_payload_command, sizeof(reset_release_payload_command), "CMD,%s,MEC,PAYLOAD,OFF", TEAM_ID);
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <init_commands+0xc8>)
 80038ba:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <init_commands+0x13c>)
 80038bc:	211a      	movs	r1, #26
 80038be:	4823      	ldr	r0, [pc, #140]	@ (800394c <init_commands+0x140>)
 80038c0:	f008 fc04 	bl	800c0cc <sniprintf>
	snprintf(reset_state_command, sizeof(reset_state_command), "CMD,%s,RST", TEAM_ID);
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <init_commands+0xc8>)
 80038c6:	4a22      	ldr	r2, [pc, #136]	@ (8003950 <init_commands+0x144>)
 80038c8:	210e      	movs	r1, #14
 80038ca:	4822      	ldr	r0, [pc, #136]	@ (8003954 <init_commands+0x148>)
 80038cc:	f008 fbfe 	bl	800c0cc <sniprintf>
}
 80038d0:	bf00      	nop
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	0800fbf8 	.word	0x0800fbf8
 80038d8:	0800fc00 	.word	0x0800fc00
 80038dc:	200008a8 	.word	0x200008a8
 80038e0:	0800fc0c 	.word	0x0800fc0c
 80038e4:	200008b8 	.word	0x200008b8
 80038e8:	0800fc1c 	.word	0x0800fc1c
 80038ec:	200008c8 	.word	0x200008c8
 80038f0:	0800fc28 	.word	0x0800fc28
 80038f4:	200008d8 	.word	0x200008d8
 80038f8:	0800fc34 	.word	0x0800fc34
 80038fc:	20000928 	.word	0x20000928
 8003900:	0800fc44 	.word	0x0800fc44
 8003904:	20000938 	.word	0x20000938
 8003908:	0800fc54 	.word	0x0800fc54
 800390c:	2000094c 	.word	0x2000094c
 8003910:	0800fc64 	.word	0x0800fc64
 8003914:	2000095c 	.word	0x2000095c
 8003918:	0800fc74 	.word	0x0800fc74
 800391c:	2000096c 	.word	0x2000096c
 8003920:	0800fc84 	.word	0x0800fc84
 8003924:	2000097c 	.word	0x2000097c
 8003928:	0800fc94 	.word	0x0800fc94
 800392c:	200008e8 	.word	0x200008e8
 8003930:	0800fca0 	.word	0x0800fca0
 8003934:	200008f8 	.word	0x200008f8
 8003938:	0800fcb4 	.word	0x0800fcb4
 800393c:	20000910 	.word	0x20000910
 8003940:	0800fcc8 	.word	0x0800fcc8
 8003944:	2000098c 	.word	0x2000098c
 8003948:	0800fce0 	.word	0x0800fce0
 800394c:	200009a8 	.word	0x200009a8
 8003950:	0800fcf8 	.word	0x0800fcf8
 8003954:	200009c4 	.word	0x200009c4

08003958 <Stepper_SetStep>:

// Stepper Motor Functions ---------------------------------------------------------------------------
void Stepper_SetStep(uint8_t i) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, steps[i][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <Stepper_SetStep+0x8c>)
 8003966:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	2140      	movs	r1, #64	@ 0x40
 8003978:	481b      	ldr	r0, [pc, #108]	@ (80039e8 <Stepper_SetStep+0x90>)
 800397a:	f002 fe13 	bl	80065a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, steps[i][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	4a18      	ldr	r2, [pc, #96]	@ (80039e4 <Stepper_SetStep+0x8c>)
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	785b      	ldrb	r3, [r3, #1]
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	4814      	ldr	r0, [pc, #80]	@ (80039e8 <Stepper_SetStep+0x90>)
 8003998:	f002 fe04 	bl	80065a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, steps[i][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4a11      	ldr	r2, [pc, #68]	@ (80039e4 <Stepper_SetStep+0x8c>)
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	789b      	ldrb	r3, [r3, #2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039b6:	480c      	ldr	r0, [pc, #48]	@ (80039e8 <Stepper_SetStep+0x90>)
 80039b8:	f002 fdf4 	bl	80065a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, steps[i][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4a09      	ldr	r2, [pc, #36]	@ (80039e4 <Stepper_SetStep+0x8c>)
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80039d6:	4804      	ldr	r0, [pc, #16]	@ (80039e8 <Stepper_SetStep+0x90>)
 80039d8:	f002 fde4 	bl	80065a4 <HAL_GPIO_WritePin>
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200000ac 	.word	0x200000ac
 80039e8:	40020800 	.word	0x40020800

080039ec <Stepper_Rotate>:

// Rotate the motor a specified number of steps
void Stepper_Rotate(int stepsCount, int delayMs) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
    int direction = (stepsCount > 0) ? 1 : -1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dd01      	ble.n	8003a00 <Stepper_Rotate+0x14>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e001      	b.n	8003a04 <Stepper_Rotate+0x18>
 8003a00:	f04f 33ff 	mov.w	r3, #4294967295
 8003a04:	60bb      	str	r3, [r7, #8]
    stepsCount = abs(stepsCount);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bfb8      	it	lt
 8003a0c:	425b      	neglt	r3, r3
 8003a0e:	607b      	str	r3, [r7, #4]

    for (int i = 0; i < stepsCount; i++) {
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e021      	b.n	8003a5a <Stepper_Rotate+0x6e>
        Stepper_SetStep(stepIndex);
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff9b 	bl	8003958 <Stepper_SetStep>
        HAL_Delay(delayMs);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 f86b 	bl	8005b00 <HAL_Delay>

        stepIndex += direction;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a34:	6013      	str	r3, [r2, #0]
        if (stepIndex >= 8) stepIndex = 0;
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	dd03      	ble.n	8003a46 <Stepper_Rotate+0x5a>
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e006      	b.n	8003a54 <Stepper_Rotate+0x68>
        else if (stepIndex < 0) stepIndex = 7;
 8003a46:	4b09      	ldr	r3, [pc, #36]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da02      	bge.n	8003a54 <Stepper_Rotate+0x68>
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <Stepper_Rotate+0x80>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < stepsCount; i++) {
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3301      	adds	r3, #1
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	dbd9      	blt.n	8003a16 <Stepper_Rotate+0x2a>
    }
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000009c 	.word	0x2000009c

08003a70 <DWT_Init>:

void DWT_Init(void) {
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable TRC
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <DWT_Init+0x2c>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a08      	ldr	r2, [pc, #32]	@ (8003a9c <DWT_Init+0x2c>)
 8003a7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a7e:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;                                // Reset counter
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <DWT_Init+0x30>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;            // Enable counter
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <DWT_Init+0x30>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <DWT_Init+0x30>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6013      	str	r3, [r2, #0]
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000edf0 	.word	0xe000edf0
 8003aa0:	e0001000 	.word	0xe0001000

08003aa4 <Stepper_Correction>:

// Rotate the motor to correct its direction to all way to the North
void Stepper_Correction(){
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b08e      	sub	sp, #56	@ 0x38
 8003aa8:	af00      	add	r7, sp, #0
//
//	Stepper_Rotate(num_steps, 0);


	// Read sensor data (gyroscope, accelerometer, magnetometer)
	read_MPU6050();
 8003aaa:	f7ff faa5 	bl	8002ff8 <read_MPU6050>
	read_MMC5603();
 8003aae:	f7ff f887 	bl	8002bc0 <read_MMC5603>
	float gx = gyro_x;
 8003ab2:	4b8a      	ldr	r3, [pc, #552]	@ (8003cdc <Stepper_Correction+0x238>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	633b      	str	r3, [r7, #48]	@ 0x30
	float gy = gyro_y;
 8003ab8:	4b89      	ldr	r3, [pc, #548]	@ (8003ce0 <Stepper_Correction+0x23c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float gz = gyro_z;
 8003abe:	4b89      	ldr	r3, [pc, #548]	@ (8003ce4 <Stepper_Correction+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
	float ax = accel_x;
 8003ac4:	4b88      	ldr	r3, [pc, #544]	@ (8003ce8 <Stepper_Correction+0x244>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
	float ay = accel_y;
 8003aca:	4b88      	ldr	r3, [pc, #544]	@ (8003cec <Stepper_Correction+0x248>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	623b      	str	r3, [r7, #32]
	float az = accel_z;
 8003ad0:	4b87      	ldr	r3, [pc, #540]	@ (8003cf0 <Stepper_Correction+0x24c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61fb      	str	r3, [r7, #28]
	float mx = mag_x;
 8003ad6:	4b87      	ldr	r3, [pc, #540]	@ (8003cf4 <Stepper_Correction+0x250>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]
	float my = mag_y;
 8003adc:	4b86      	ldr	r3, [pc, #536]	@ (8003cf8 <Stepper_Correction+0x254>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
	float mz = mag_z;
 8003ae2:	4b86      	ldr	r3, [pc, #536]	@ (8003cfc <Stepper_Correction+0x258>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]

	uint32_t now = DWT->CYCCNT;
 8003ae8:	4b85      	ldr	r3, [pc, #532]	@ (8003d00 <Stepper_Correction+0x25c>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
	float dt = (now - lastStepperUpdate) / (float)SystemCoreClock;
 8003aee:	4b85      	ldr	r3, [pc, #532]	@ (8003d04 <Stepper_Correction+0x260>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	4b82      	ldr	r3, [pc, #520]	@ (8003d08 <Stepper_Correction+0x264>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b0e:	edc7 7a02 	vstr	s15, [r7, #8]
	lastStepperUpdate = now;
 8003b12:	4a7c      	ldr	r2, [pc, #496]	@ (8003d04 <Stepper_Correction+0x260>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6013      	str	r3, [r2, #0]

	if (dt > 0) {
 8003b18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd02      	ble.n	8003b2c <Stepper_Correction+0x88>
	    ahrs.invSampleFreq = dt;
 8003b26:	4a79      	ldr	r2, [pc, #484]	@ (8003d0c <Stepper_Correction+0x268>)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6153      	str	r3, [r2, #20]
	}
	Madgwick_update(&ahrs, gx, -gy, -gz, ax, -ay, -az, mx, my, mz);
 8003b2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003b30:	eeb1 7a67 	vneg.f32	s14, s15
 8003b34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b38:	eef1 6a67 	vneg.f32	s13, s15
 8003b3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b40:	eeb1 6a67 	vneg.f32	s12, s15
 8003b44:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b48:	eef1 7a67 	vneg.f32	s15, s15
 8003b4c:	ed97 4a04 	vldr	s8, [r7, #16]
 8003b50:	edd7 3a05 	vldr	s7, [r7, #20]
 8003b54:	ed97 3a06 	vldr	s6, [r7, #24]
 8003b58:	eef0 2a67 	vmov.f32	s5, s15
 8003b5c:	eeb0 2a46 	vmov.f32	s4, s12
 8003b60:	edd7 1a09 	vldr	s3, [r7, #36]	@ 0x24
 8003b64:	eeb0 1a66 	vmov.f32	s2, s13
 8003b68:	eef0 0a47 	vmov.f32	s1, s14
 8003b6c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8003b70:	4866      	ldr	r0, [pc, #408]	@ (8003d0c <Stepper_Correction+0x268>)
 8003b72:	f7fd fa9b 	bl	80010ac <Madgwick_update>

	// Get the current yaw from the Madgwick filter (assumed to represent the direction of the system)
	float current_yaw = Madgwick_getYaw(&ahrs);
 8003b76:	4865      	ldr	r0, [pc, #404]	@ (8003d0c <Stepper_Correction+0x268>)
 8003b78:	f7fe fb82 	bl	8002280 <Madgwick_getYaw>
 8003b7c:	ed87 0a01 	vstr	s0, [r7, #4]

	float dir_change = stepper_direction - current_yaw;
 8003b80:	4b63      	ldr	r3, [pc, #396]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003b82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fc fcfe 	bl	8000588 <__aeabi_f2d>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4620      	mov	r0, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	f7fc fb98 	bl	80002c8 <__aeabi_dsub>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fd f842 	bl	8000c28 <__aeabi_d2f>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	637b      	str	r3, [r7, #52]	@ 0x34
	if (dir_change > 180) dir_change -= 360;
 8003ba8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003bac:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8003d14 <Stepper_Correction+0x270>
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	dd08      	ble.n	8003bcc <Stepper_Correction+0x128>
 8003bba:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003bbe:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8003d18 <Stepper_Correction+0x274>
 8003bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003bc6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8003bca:	e010      	b.n	8003bee <Stepper_Correction+0x14a>
	else if (dir_change < -180) dir_change += 360;
 8003bcc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003bd0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003d1c <Stepper_Correction+0x278>
 8003bd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	d507      	bpl.n	8003bee <Stepper_Correction+0x14a>
 8003bde:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003be2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003d18 <Stepper_Correction+0x274>
 8003be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	int num_steps = round(dir_change * STEPS_PER_REV / 360);
 8003bee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003bf2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8003d20 <Stepper_Correction+0x27c>
 8003bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfa:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8003d18 <Stepper_Correction+0x274>
 8003bfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c02:	ee16 0a90 	vmov	r0, s13
 8003c06:	f7fc fcbf 	bl	8000588 <__aeabi_f2d>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	ec43 2b10 	vmov	d0, r2, r3
 8003c12:	f00b f9d3 	bl	800efbc <round>
 8003c16:	ec53 2b10 	vmov	r2, r3, d0
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ffbb 	bl	8000b98 <__aeabi_d2iz>
 8003c22:	4603      	mov	r3, r0
 8003c24:	603b      	str	r3, [r7, #0]

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
 8003c26:	4b3a      	ldr	r3, [pc, #232]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c2c:	6838      	ldr	r0, [r7, #0]
 8003c2e:	f7fc fc99 	bl	8000564 <__aeabi_i2d>
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <Stepper_Correction+0x280>)
 8003c38:	f7fc fcfe 	bl	8000638 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <Stepper_Correction+0x284>)
 8003c4a:	f7fc fe1f 	bl	800088c <__aeabi_ddiv>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4620      	mov	r0, r4
 8003c54:	4629      	mov	r1, r5
 8003c56:	f7fc fb37 	bl	80002c8 <__aeabi_dsub>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	492c      	ldr	r1, [pc, #176]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c60:	e9c1 2300 	strd	r2, r3, [r1]
	if (stepper_direction > 360) stepper_direction -= 360;
 8003c64:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <Stepper_Correction+0x280>)
 8003c70:	f7fc ff72 	bl	8000b58 <__aeabi_dcmpgt>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <Stepper_Correction+0x1f2>
 8003c7a:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	4b27      	ldr	r3, [pc, #156]	@ (8003d24 <Stepper_Correction+0x280>)
 8003c86:	f7fc fb1f 	bl	80002c8 <__aeabi_dsub>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4920      	ldr	r1, [pc, #128]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c90:	e9c1 2300 	strd	r2, r3, [r1]
 8003c94:	e018      	b.n	8003cc8 <Stepper_Correction+0x224>
	else if (stepper_direction < 0) stepper_direction += 360;
 8003c96:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f7fc ff3a 	bl	8000b1c <__aeabi_dcmplt>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00c      	beq.n	8003cc8 <Stepper_Correction+0x224>
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <Stepper_Correction+0x280>)
 8003cba:	f7fc fb07 	bl	80002cc <__adddf3>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4913      	ldr	r1, [pc, #76]	@ (8003d10 <Stepper_Correction+0x26c>)
 8003cc4:	e9c1 2300 	strd	r2, r3, [r1]

	Stepper_Rotate(-num_steps, 0);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	425b      	negs	r3, r3
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fe8c 	bl	80039ec <Stepper_Rotate>
}
 8003cd4:	bf00      	nop
 8003cd6:	3738      	adds	r7, #56	@ 0x38
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bdb0      	pop	{r4, r5, r7, pc}
 8003cdc:	2000061c 	.word	0x2000061c
 8003ce0:	20000620 	.word	0x20000620
 8003ce4:	20000624 	.word	0x20000624
 8003ce8:	20000628 	.word	0x20000628
 8003cec:	2000062c 	.word	0x2000062c
 8003cf0:	20000630 	.word	0x20000630
 8003cf4:	20000634 	.word	0x20000634
 8003cf8:	20000638 	.word	0x20000638
 8003cfc:	2000063c 	.word	0x2000063c
 8003d00:	e0001000 	.word	0xe0001000
 8003d04:	200008a4 	.word	0x200008a4
 8003d08:	200000cc 	.word	0x200000cc
 8003d0c:	2000087c 	.word	0x2000087c
 8003d10:	20000870 	.word	0x20000870
 8003d14:	43340000 	.word	0x43340000
 8003d18:	43b40000 	.word	0x43b40000
 8003d1c:	c3340000 	.word	0xc3340000
 8003d20:	45800000 	.word	0x45800000
 8003d24:	40768000 	.word	0x40768000
 8003d28:	40b00000 	.word	0x40b00000

08003d2c <set_stepper_north>:

void set_stepper_north(){
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
	stepper_direction = direction;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <set_stepper_north+0x1c>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	4905      	ldr	r1, [pc, #20]	@ (8003d4c <set_stepper_north+0x20>)
 8003d38:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000868 	.word	0x20000868
 8003d4c:	20000870 	.word	0x20000870

08003d50 <turn_stepper_north>:

void turn_stepper_north(){
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
	read_MMC5603();
 8003d56:	f7fe ff33 	bl	8002bc0 <read_MMC5603>
	float dir_change = stepper_direction - direction;
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003d5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d60:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed0 <turn_stepper_north+0x180>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc faaf 	bl	80002c8 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fc ff59 	bl	8000c28 <__aeabi_d2f>
 8003d76:	4603      	mov	r3, r0
 8003d78:	607b      	str	r3, [r7, #4]
	if (dir_change > 180) dir_change -= 360;
 8003d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d7e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003ed4 <turn_stepper_north+0x184>
 8003d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8a:	dd08      	ble.n	8003d9e <turn_stepper_north+0x4e>
 8003d8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d90:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003ed8 <turn_stepper_north+0x188>
 8003d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d98:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d9c:	e010      	b.n	8003dc0 <turn_stepper_north+0x70>
	else if (dir_change < -180) dir_change += 360;
 8003d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003da2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8003edc <turn_stepper_north+0x18c>
 8003da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	d507      	bpl.n	8003dc0 <turn_stepper_north+0x70>
 8003db0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003db4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003ed8 <turn_stepper_north+0x188>
 8003db8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dbc:	edc7 7a01 	vstr	s15, [r7, #4]

	int num_steps = round(dir_change * STEPS_PER_REV / 360);
 8003dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003ee0 <turn_stepper_north+0x190>
 8003dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dcc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8003ed8 <turn_stepper_north+0x188>
 8003dd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dd4:	ee16 0a90 	vmov	r0, s13
 8003dd8:	f7fc fbd6 	bl	8000588 <__aeabi_f2d>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	ec43 2b10 	vmov	d0, r2, r3
 8003de4:	f00b f8ea 	bl	800efbc <round>
 8003de8:	ec53 2b10 	vmov	r2, r3, d0
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc fed2 	bl	8000b98 <__aeabi_d2iz>
 8003df4:	4603      	mov	r3, r0
 8003df6:	603b      	str	r3, [r7, #0]

	stepper_direction -= (double)num_steps * 360 / STEPS_PER_REV;
 8003df8:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003dfa:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003dfe:	6838      	ldr	r0, [r7, #0]
 8003e00:	f7fc fbb0 	bl	8000564 <__aeabi_i2d>
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	4b36      	ldr	r3, [pc, #216]	@ (8003ee4 <turn_stepper_north+0x194>)
 8003e0a:	f7fc fc15 	bl	8000638 <__aeabi_dmul>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ee8 <turn_stepper_north+0x198>)
 8003e1c:	f7fc fd36 	bl	800088c <__aeabi_ddiv>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4620      	mov	r0, r4
 8003e26:	4629      	mov	r1, r5
 8003e28:	f7fc fa4e 	bl	80002c8 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4926      	ldr	r1, [pc, #152]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e32:	e9c1 2300 	strd	r2, r3, [r1]
	if (stepper_direction > 360) stepper_direction -= 360;
 8003e36:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <turn_stepper_north+0x194>)
 8003e42:	f7fc fe89 	bl	8000b58 <__aeabi_dcmpgt>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00d      	beq.n	8003e68 <turn_stepper_north+0x118>
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <turn_stepper_north+0x194>)
 8003e58:	f7fc fa36 	bl	80002c8 <__aeabi_dsub>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	491a      	ldr	r1, [pc, #104]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e62:	e9c1 2300 	strd	r2, r3, [r1]
 8003e66:	e018      	b.n	8003e9a <turn_stepper_north+0x14a>
	else if (stepper_direction < 0) stepper_direction += 360;
 8003e68:	4b18      	ldr	r3, [pc, #96]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	f7fc fe51 	bl	8000b1c <__aeabi_dcmplt>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00c      	beq.n	8003e9a <turn_stepper_north+0x14a>
 8003e80:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ee4 <turn_stepper_north+0x194>)
 8003e8c:	f7fc fa1e 	bl	80002cc <__adddf3>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	490d      	ldr	r1, [pc, #52]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003e96:	e9c1 2300 	strd	r2, r3, [r1]

	Stepper_Rotate(num_steps, 0);
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	6838      	ldr	r0, [r7, #0]
 8003e9e:	f7ff fda5 	bl	80039ec <Stepper_Rotate>

	// Prepare for madgwick filter to take over stepper
	stepper_direction = Madgwick_getYaw(&ahrs);
 8003ea2:	4812      	ldr	r0, [pc, #72]	@ (8003eec <turn_stepper_north+0x19c>)
 8003ea4:	f7fe f9ec 	bl	8002280 <Madgwick_getYaw>
 8003ea8:	ee10 3a10 	vmov	r3, s0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb6b 	bl	8000588 <__aeabi_f2d>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4905      	ldr	r1, [pc, #20]	@ (8003ecc <turn_stepper_north+0x17c>)
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
	lastStepperUpdate = DWT->CYCCNT;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <turn_stepper_north+0x1a0>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8003ef4 <turn_stepper_north+0x1a4>)
 8003ec2:	6013      	str	r3, [r2, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ecc:	20000870 	.word	0x20000870
 8003ed0:	20000868 	.word	0x20000868
 8003ed4:	43340000 	.word	0x43340000
 8003ed8:	43b40000 	.word	0x43b40000
 8003edc:	c3340000 	.word	0xc3340000
 8003ee0:	45800000 	.word	0x45800000
 8003ee4:	40768000 	.word	0x40768000
 8003ee8:	40b00000 	.word	0x40b00000
 8003eec:	2000087c 	.word	0x2000087c
 8003ef0:	e0001000 	.word	0xe0001000
 8003ef4:	200008a4 	.word	0x200008a4

08003ef8 <calculate_checksum>:

// Xbee and Command Functions ----------------------------------------------------------------
uint8_t calculate_checksum(const char *data) {
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8003f04:	e006      	b.n	8003f14 <calculate_checksum+0x1c>
		checksum += *data++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	4413      	add	r3, r2
 8003f12:	73fb      	strb	r3, [r7, #15]
	while (*data) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f4      	bne.n	8003f06 <calculate_checksum+0xe>
	}
	return checksum % 256;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <send_packet>:

void send_packet(){
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	f2ad 5d3c 	subw	sp, sp, #1340	@ 0x53c
 8003f34:	af30      	add	r7, sp, #192	@ 0xc0

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	packet_count += 1;
 8003f36:	4b9a      	ldr	r3, [pc, #616]	@ (80041a0 <send_packet+0x274>)
 8003f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b21a      	sxth	r2, r3
 8003f44:	4b96      	ldr	r3, [pc, #600]	@ (80041a0 <send_packet+0x274>)
 8003f46:	801a      	strh	r2, [r3, #0]

	snprintf(data, sizeof(data),
 8003f48:	4b96      	ldr	r3, [pc, #600]	@ (80041a4 <send_packet+0x278>)
 8003f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f52:	4b95      	ldr	r3, [pc, #596]	@ (80041a8 <send_packet+0x27c>)
 8003f54:	f993 3000 	ldrsb.w	r3, [r3]
 8003f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f5c:	4b93      	ldr	r3, [pc, #588]	@ (80041ac <send_packet+0x280>)
 8003f5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f66:	4b8e      	ldr	r3, [pc, #568]	@ (80041a0 <send_packet+0x274>)
 8003f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f70:	4b8f      	ldr	r3, [pc, #572]	@ (80041b0 <send_packet+0x284>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f76:	4b8f      	ldr	r3, [pc, #572]	@ (80041b4 <send_packet+0x288>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fc fb04 	bl	8000588 <__aeabi_f2d>
 8003f80:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 8003f84:	4b8c      	ldr	r3, [pc, #560]	@ (80041b8 <send_packet+0x28c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc fafd 	bl	8000588 <__aeabi_f2d>
 8003f8e:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8003f92:	4b8a      	ldr	r3, [pc, #552]	@ (80041bc <send_packet+0x290>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc faf6 	bl	8000588 <__aeabi_f2d>
 8003f9c:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8003fa0:	4b87      	ldr	r3, [pc, #540]	@ (80041c0 <send_packet+0x294>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc faef 	bl	8000588 <__aeabi_f2d>
 8003faa:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8003fae:	4b85      	ldr	r3, [pc, #532]	@ (80041c4 <send_packet+0x298>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fc fae8 	bl	8000588 <__aeabi_f2d>
 8003fb8:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8003fbc:	4b82      	ldr	r3, [pc, #520]	@ (80041c8 <send_packet+0x29c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fae1 	bl	8000588 <__aeabi_f2d>
 8003fc6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8003fca:	4b80      	ldr	r3, [pc, #512]	@ (80041cc <send_packet+0x2a0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fada 	bl	8000588 <__aeabi_f2d>
 8003fd4:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8003fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80041d0 <send_packet+0x2a4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fad3 	bl	8000588 <__aeabi_f2d>
 8003fe2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8003fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80041d4 <send_packet+0x2a8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc facc 	bl	8000588 <__aeabi_f2d>
 8003ff0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8003ff4:	4b78      	ldr	r3, [pc, #480]	@ (80041d8 <send_packet+0x2ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fac5 	bl	8000588 <__aeabi_f2d>
 8003ffe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8004002:	4b76      	ldr	r3, [pc, #472]	@ (80041dc <send_packet+0x2b0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7fc fabe 	bl	8000588 <__aeabi_f2d>
 800400c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004010:	4b73      	ldr	r3, [pc, #460]	@ (80041e0 <send_packet+0x2b4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fab7 	bl	8000588 <__aeabi_f2d>
 800401a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800401e:	4b71      	ldr	r3, [pc, #452]	@ (80041e4 <send_packet+0x2b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fab0 	bl	8000588 <__aeabi_f2d>
 8004028:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800402c:	4b6e      	ldr	r3, [pc, #440]	@ (80041e8 <send_packet+0x2bc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc faa9 	bl	8000588 <__aeabi_f2d>
 8004036:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800403a:	4b6c      	ldr	r3, [pc, #432]	@ (80041ec <send_packet+0x2c0>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004040:	4b6b      	ldr	r3, [pc, #428]	@ (80041f0 <send_packet+0x2c4>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	4b6b      	ldr	r3, [pc, #428]	@ (80041f4 <send_packet+0x2c8>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4b6a      	ldr	r3, [pc, #424]	@ (80041f8 <send_packet+0x2cc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fa99 	bl	8000588 <__aeabi_f2d>
 8004056:	4682      	mov	sl, r0
 8004058:	468b      	mov	fp, r1
 800405a:	4b68      	ldr	r3, [pc, #416]	@ (80041fc <send_packet+0x2d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fa92 	bl	8000588 <__aeabi_f2d>
 8004064:	4680      	mov	r8, r0
 8004066:	4689      	mov	r9, r1
 8004068:	4b65      	ldr	r3, [pc, #404]	@ (8004200 <send_packet+0x2d4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa8b 	bl	8000588 <__aeabi_f2d>
 8004072:	4604      	mov	r4, r0
 8004074:	460d      	mov	r5, r1
 8004076:	4b63      	ldr	r3, [pc, #396]	@ (8004204 <send_packet+0x2d8>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461e      	mov	r6, r3
 800407c:	4b62      	ldr	r3, [pc, #392]	@ (8004208 <send_packet+0x2dc>)
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	f7fc fd87 	bl	8000b98 <__aeabi_d2iz>
 800408a:	4603      	mov	r3, r0
 800408c:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8004090:	932e      	str	r3, [sp, #184]	@ 0xb8
 8004092:	4b5e      	ldr	r3, [pc, #376]	@ (800420c <send_packet+0x2e0>)
 8004094:	932d      	str	r3, [sp, #180]	@ 0xb4
 8004096:	962c      	str	r6, [sp, #176]	@ 0xb0
 8004098:	e9cd 452a 	strd	r4, r5, [sp, #168]	@ 0xa8
 800409c:	e9cd 8928 	strd	r8, r9, [sp, #160]	@ 0xa0
 80040a0:	e9cd ab26 	strd	sl, fp, [sp, #152]	@ 0x98
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	9224      	str	r2, [sp, #144]	@ 0x90
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	9223      	str	r2, [sp, #140]	@ 0x8c
 80040ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80040ae:	9222      	str	r2, [sp, #136]	@ 0x88
 80040b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80040b4:	ed8d 7b20 	vstr	d7, [sp, #128]	@ 0x80
 80040b8:	ed97 7b04 	vldr	d7, [r7, #16]
 80040bc:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
 80040c0:	ed97 7b06 	vldr	d7, [r7, #24]
 80040c4:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
 80040c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80040cc:	ed8d 7b1a 	vstr	d7, [sp, #104]	@ 0x68
 80040d0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80040d4:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
 80040d8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80040dc:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
 80040e0:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80040e4:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 80040e8:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 80040ec:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 80040f0:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80040f4:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
 80040f8:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80040fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004100:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8004104:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004108:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800410c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004110:	ed97 7b1a 	vldr	d7, [r7, #104]	@ 0x68
 8004114:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004118:	ed97 7b1c 	vldr	d7, [r7, #112]	@ 0x70
 800411c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <send_packet+0x2e4>)
 8004122:	9305      	str	r3, [sp, #20]
 8004124:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004126:	9204      	str	r2, [sp, #16]
 8004128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800412c:	9203      	str	r2, [sp, #12]
 800412e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004138:	9201      	str	r2, [sp, #4]
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <send_packet+0x2e8>)
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <send_packet+0x2ec>)
 8004144:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004148:	f007 ffc0 	bl	800c0cc <sniprintf>
		 mode, state, altitude, temperature, pressure, voltage,
		 gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z, mag_x, mag_y, mag_z,
		 auto_gyro_rotation_rate, gps_time_hr, gps_time_min, gps_time_sec,
		 gps_altitude, gps_latitude, gps_longitude, gps_sats, cmd_echo, (int)direction);

	uint8_t checksum = calculate_checksum(data);
 800414c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff fed1 	bl	8003ef8 <calculate_checksum>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 800415c:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8004160:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8004164:	f507 701d 	add.w	r0, r7, #628	@ 0x274
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	4a2b      	ldr	r2, [pc, #172]	@ (800421c <send_packet+0x2f0>)
 800416e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004172:	f007 ffab 	bl	800c0cc <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 8004176:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc f898 	bl	80002b0 <strlen>
 8004180:	4603      	mov	r3, r0
 8004182:	b29a      	uxth	r2, r3
 8004184:	f507 711d 	add.w	r1, r7, #628	@ 0x274
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	4824      	ldr	r0, [pc, #144]	@ (8004220 <send_packet+0x2f4>)
 800418e:	f005 fbad 	bl	80098ec <HAL_UART_Transmit>
}
 8004192:	bf00      	nop
 8004194:	f207 477c 	addw	r7, r7, #1148	@ 0x47c
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	20000608 	.word	0x20000608
 80041a4:	20000604 	.word	0x20000604
 80041a8:	20000605 	.word	0x20000605
 80041ac:	20000606 	.word	0x20000606
 80041b0:	20000000 	.word	0x20000000
 80041b4:	2000060c 	.word	0x2000060c
 80041b8:	20000610 	.word	0x20000610
 80041bc:	20000614 	.word	0x20000614
 80041c0:	20000618 	.word	0x20000618
 80041c4:	2000061c 	.word	0x2000061c
 80041c8:	20000620 	.word	0x20000620
 80041cc:	20000624 	.word	0x20000624
 80041d0:	20000628 	.word	0x20000628
 80041d4:	2000062c 	.word	0x2000062c
 80041d8:	20000630 	.word	0x20000630
 80041dc:	20000634 	.word	0x20000634
 80041e0:	20000638 	.word	0x20000638
 80041e4:	2000063c 	.word	0x2000063c
 80041e8:	20000640 	.word	0x20000640
 80041ec:	20000644 	.word	0x20000644
 80041f0:	20000645 	.word	0x20000645
 80041f4:	20000646 	.word	0x20000646
 80041f8:	20000648 	.word	0x20000648
 80041fc:	2000064c 	.word	0x2000064c
 8004200:	20000650 	.word	0x20000650
 8004204:	20000654 	.word	0x20000654
 8004208:	20000868 	.word	0x20000868
 800420c:	20000014 	.word	0x20000014
 8004210:	20000004 	.word	0x20000004
 8004214:	0800fbf8 	.word	0x0800fbf8
 8004218:	0800fd04 	.word	0x0800fd04
 800421c:	0800fd8c 	.word	0x0800fd8c
 8004220:	200005bc 	.word	0x200005bc

08004224 <send_mmc_plot_packet>:

void send_mmc_plot_packet(){
 8004224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004228:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 800422c:	af12      	add	r7, sp, #72	@ 0x48

	char packet[512];  // Buffer for packet
	char data[480];    // Buffer for data without checksum

	snprintf(data, sizeof(data),
 800422e:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <send_mmc_plot_packet+0x14c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc f9a8 	bl	8000588 <__aeabi_f2d>
 8004238:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800423c:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <send_mmc_plot_packet+0x150>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f9a1 	bl	8000588 <__aeabi_f2d>
 8004246:	e9c7 0106 	strd	r0, r1, [r7, #24]
		"%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%d",
		 mag_x, mag_y, (mag_x_min + mag_x_max) / 2, (mag_y_min + mag_y_max) / 2, mag_x_min, mag_x_max, mag_y_min, mag_y_max, (int)direction);
 800424a:	4b4b      	ldr	r3, [pc, #300]	@ (8004378 <send_mmc_plot_packet+0x154>)
 800424c:	ed93 7a00 	vldr	s14, [r3]
 8004250:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <send_mmc_plot_packet+0x158>)
 8004252:	edd3 7a00 	vldr	s15, [r3]
 8004256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800425e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(data, sizeof(data),
 8004262:	ee16 0a90 	vmov	r0, s13
 8004266:	f7fc f98f 	bl	8000588 <__aeabi_f2d>
 800426a:	e9c7 0104 	strd	r0, r1, [r7, #16]
		 mag_x, mag_y, (mag_x_min + mag_x_max) / 2, (mag_y_min + mag_y_max) / 2, mag_x_min, mag_x_max, mag_y_min, mag_y_max, (int)direction);
 800426e:	4b44      	ldr	r3, [pc, #272]	@ (8004380 <send_mmc_plot_packet+0x15c>)
 8004270:	ed93 7a00 	vldr	s14, [r3]
 8004274:	4b43      	ldr	r3, [pc, #268]	@ (8004384 <send_mmc_plot_packet+0x160>)
 8004276:	edd3 7a00 	vldr	s15, [r3]
 800427a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004282:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(data, sizeof(data),
 8004286:	ee16 0a90 	vmov	r0, s13
 800428a:	f7fc f97d 	bl	8000588 <__aeabi_f2d>
 800428e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004292:	4b39      	ldr	r3, [pc, #228]	@ (8004378 <send_mmc_plot_packet+0x154>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc f976 	bl	8000588 <__aeabi_f2d>
 800429c:	e9c7 0100 	strd	r0, r1, [r7]
 80042a0:	4b36      	ldr	r3, [pc, #216]	@ (800437c <send_mmc_plot_packet+0x158>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fc f96f 	bl	8000588 <__aeabi_f2d>
 80042aa:	4682      	mov	sl, r0
 80042ac:	468b      	mov	fp, r1
 80042ae:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <send_mmc_plot_packet+0x15c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f968 	bl	8000588 <__aeabi_f2d>
 80042b8:	4680      	mov	r8, r0
 80042ba:	4689      	mov	r9, r1
 80042bc:	4b31      	ldr	r3, [pc, #196]	@ (8004384 <send_mmc_plot_packet+0x160>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f961 	bl	8000588 <__aeabi_f2d>
 80042c6:	4604      	mov	r4, r0
 80042c8:	460d      	mov	r5, r1
 80042ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004388 <send_mmc_plot_packet+0x164>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7fc fc60 	bl	8000b98 <__aeabi_d2iz>
 80042d8:	4603      	mov	r3, r0
 80042da:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80042de:	9310      	str	r3, [sp, #64]	@ 0x40
 80042e0:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
 80042e4:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 80042e8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 80042ec:	ed97 7b00 	vldr	d7, [r7]
 80042f0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80042f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80042f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8004300:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004304:	ed97 7b06 	vldr	d7, [r7, #24]
 8004308:	ed8d 7b02 	vstr	d7, [sp, #8]
 800430c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004310:	ed8d 7b00 	vstr	d7, [sp]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <send_mmc_plot_packet+0x168>)
 8004316:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800431a:	f007 fed7 	bl	800c0cc <sniprintf>

	uint8_t checksum = calculate_checksum(data);
 800431e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fde8 	bl	8003ef8 <calculate_checksum>
 8004328:	4603      	mov	r3, r0
 800432a:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
	snprintf(packet, sizeof(packet), "~%s,%u\n", data, checksum);
 800432e:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8004332:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004336:	f507 7003 	add.w	r0, r7, #524	@ 0x20c
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <send_mmc_plot_packet+0x16c>)
 8004340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004344:	f007 fec2 	bl	800c0cc <sniprintf>

	// Send the packet using HAL_UART_Transmit
	HAL_UART_Transmit(&huart1, (uint8_t*)packet, strlen(packet), HAL_MAX_DELAY);
 8004348:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800434c:	4618      	mov	r0, r3
 800434e:	f7fb ffaf 	bl	80002b0 <strlen>
 8004352:	4603      	mov	r3, r0
 8004354:	b29a      	uxth	r2, r3
 8004356:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
 800435e:	480d      	ldr	r0, [pc, #52]	@ (8004394 <send_mmc_plot_packet+0x170>)
 8004360:	f005 fac4 	bl	80098ec <HAL_UART_Transmit>
}
 8004364:	bf00      	nop
 8004366:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 800436a:	46bd      	mov	sp, r7
 800436c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004370:	20000634 	.word	0x20000634
 8004374:	20000638 	.word	0x20000638
 8004378:	200009fc 	.word	0x200009fc
 800437c:	20000a08 	.word	0x20000a08
 8004380:	20000a00 	.word	0x20000a00
 8004384:	200000a0 	.word	0x200000a0
 8004388:	20000868 	.word	0x20000868
 800438c:	0800fd94 	.word	0x0800fd94
 8004390:	0800fd8c 	.word	0x0800fd8c
 8004394:	200005bc 	.word	0x200005bc

08004398 <reset_delta_buffer>:

void reset_delta_buffer(){
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
	for(int i = 0; i < DELTA_BUFFER_SIZE; ++i){
 800439e:	2300      	movs	r3, #0
 80043a0:	607b      	str	r3, [r7, #4]
 80043a2:	e009      	b.n	80043b8 <reset_delta_buffer+0x20>
		delta_buffer[i] = 0;
 80043a4:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <reset_delta_buffer+0x34>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < DELTA_BUFFER_SIZE; ++i){
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	ddf2      	ble.n	80043a4 <reset_delta_buffer+0xc>
	}
}
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200009d8 	.word	0x200009d8

080043d0 <handle_state>:

void handle_state(){
 80043d0:	b5b0      	push	{r4, r5, r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
	// States: ‘LAUNCH_PAD’,‘ASCENT’, ‘APOGEE’, ‘DESCENT’, ‘PROBE_RELEASE’, ‘LANDED’
	float noise_threshold = 0.75;
 80043d6:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 80043da:	60fb      	str	r3, [r7, #12]
	float landing_threshold = 0.2;
 80043dc:	4b91      	ldr	r3, [pc, #580]	@ (8004624 <handle_state+0x254>)
 80043de:	60bb      	str	r3, [r7, #8]

	float delta = altitude - prev_alt;
 80043e0:	4b91      	ldr	r3, [pc, #580]	@ (8004628 <handle_state+0x258>)
 80043e2:	ed93 7a00 	vldr	s14, [r3]
 80043e6:	4b91      	ldr	r3, [pc, #580]	@ (800462c <handle_state+0x25c>)
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f0:	edc7 7a01 	vstr	s15, [r7, #4]

	// Update delta buffer
	delta_buffer[delta_index] = delta;
 80043f4:	4b8e      	ldr	r3, [pc, #568]	@ (8004630 <handle_state+0x260>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a8e      	ldr	r2, [pc, #568]	@ (8004634 <handle_state+0x264>)
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
	delta_index = (delta_index + 1) % DELTA_BUFFER_SIZE;  // Circular buffer index
 8004402:	4b8b      	ldr	r3, [pc, #556]	@ (8004630 <handle_state+0x260>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	4b8b      	ldr	r3, [pc, #556]	@ (8004638 <handle_state+0x268>)
 800440a:	fb83 2301 	smull	r2, r3, r3, r1
 800440e:	105a      	asrs	r2, r3, #1
 8004410:	17cb      	asrs	r3, r1, #31
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	1aca      	subs	r2, r1, r3
 800441c:	4b84      	ldr	r3, [pc, #528]	@ (8004630 <handle_state+0x260>)
 800441e:	601a      	str	r2, [r3, #0]

	// Compute rolling average of deltas
	float avg_delta = 0;
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < DELTA_BUFFER_SIZE; i++) {
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	e00e      	b.n	800444a <handle_state+0x7a>
		avg_delta += delta_buffer[i];
 800442c:	4a81      	ldr	r2, [pc, #516]	@ (8004634 <handle_state+0x264>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	edd3 7a00 	vldr	s15, [r3]
 8004438:	ed97 7a05 	vldr	s14, [r7, #20]
 800443c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004440:	edc7 7a05 	vstr	s15, [r7, #20]
	for (int i = 0; i < DELTA_BUFFER_SIZE; i++) {
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	3301      	adds	r3, #1
 8004448:	613b      	str	r3, [r7, #16]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b04      	cmp	r3, #4
 800444e:	dded      	ble.n	800442c <handle_state+0x5c>
	}
	avg_delta /= DELTA_BUFFER_SIZE;  // Take the average
 8004450:	ed97 7a05 	vldr	s14, [r7, #20]
 8004454:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800445c:	edc7 7a05 	vstr	s15, [r7, #20]

	if (strncmp(state, "LAUNCH_PAD", strlen("LAUNCH_PAD")) == 0){
 8004460:	220a      	movs	r2, #10
 8004462:	4976      	ldr	r1, [pc, #472]	@ (800463c <handle_state+0x26c>)
 8004464:	4876      	ldr	r0, [pc, #472]	@ (8004640 <handle_state+0x270>)
 8004466:	f007 febf 	bl	800c1e8 <strncmp>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d116      	bne.n	800449e <handle_state+0xce>
		if (avg_delta > noise_threshold){
 8004470:	ed97 7a05 	vldr	s14, [r7, #20]
 8004474:	edd7 7a03 	vldr	s15, [r7, #12]
 8004478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	f340 80c8 	ble.w	8004614 <handle_state+0x244>
			memset(state, 0, sizeof(state));
 8004484:	220e      	movs	r2, #14
 8004486:	2100      	movs	r1, #0
 8004488:	486d      	ldr	r0, [pc, #436]	@ (8004640 <handle_state+0x270>)
 800448a:	f007 fe96 	bl	800c1ba <memset>
			strncpy(state, "ASCENDING", strlen("ASCENDING"));
 800448e:	4b6c      	ldr	r3, [pc, #432]	@ (8004640 <handle_state+0x270>)
 8004490:	4a6c      	ldr	r2, [pc, #432]	@ (8004644 <handle_state+0x274>)
 8004492:	ca07      	ldmia	r2, {r0, r1, r2}
 8004494:	c303      	stmia	r3!, {r0, r1}
 8004496:	701a      	strb	r2, [r3, #0]
			store_flash_data();
 8004498:	f7fe f8da 	bl	8002650 <store_flash_data>
 800449c:	e0ba      	b.n	8004614 <handle_state+0x244>
		}
	}
	else if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
 800449e:	2209      	movs	r2, #9
 80044a0:	4968      	ldr	r1, [pc, #416]	@ (8004644 <handle_state+0x274>)
 80044a2:	4867      	ldr	r0, [pc, #412]	@ (8004640 <handle_state+0x270>)
 80044a4:	f007 fea0 	bl	800c1e8 <strncmp>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11a      	bne.n	80044e4 <handle_state+0x114>
		if (avg_delta < -noise_threshold){
 80044ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80044b2:	eef1 7a67 	vneg.f32	s15, s15
 80044b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80044ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	f140 80a7 	bpl.w	8004614 <handle_state+0x244>
			memset(state, 0, sizeof(state));
 80044c6:	220e      	movs	r2, #14
 80044c8:	2100      	movs	r1, #0
 80044ca:	485d      	ldr	r0, [pc, #372]	@ (8004640 <handle_state+0x270>)
 80044cc:	f007 fe75 	bl	800c1ba <memset>
			strncpy(state, "APOGEE", strlen("APOGEE"));
 80044d0:	4b5b      	ldr	r3, [pc, #364]	@ (8004640 <handle_state+0x270>)
 80044d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004648 <handle_state+0x278>)
 80044d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044d8:	6018      	str	r0, [r3, #0]
 80044da:	3304      	adds	r3, #4
 80044dc:	8019      	strh	r1, [r3, #0]
			store_flash_data();
 80044de:	f7fe f8b7 	bl	8002650 <store_flash_data>
 80044e2:	e097      	b.n	8004614 <handle_state+0x244>
		}
	}
	else if (strncmp(state, "APOGEE", strlen("APOGEE")) == 0){
 80044e4:	2206      	movs	r2, #6
 80044e6:	4958      	ldr	r1, [pc, #352]	@ (8004648 <handle_state+0x278>)
 80044e8:	4855      	ldr	r0, [pc, #340]	@ (8004640 <handle_state+0x270>)
 80044ea:	f007 fe7d 	bl	800c1e8 <strncmp>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d110      	bne.n	8004516 <handle_state+0x146>
		memset(state, 0, sizeof(state));
 80044f4:	220e      	movs	r2, #14
 80044f6:	2100      	movs	r1, #0
 80044f8:	4851      	ldr	r0, [pc, #324]	@ (8004640 <handle_state+0x270>)
 80044fa:	f007 fe5e 	bl	800c1ba <memset>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
 80044fe:	4b50      	ldr	r3, [pc, #320]	@ (8004640 <handle_state+0x270>)
 8004500:	4a52      	ldr	r2, [pc, #328]	@ (800464c <handle_state+0x27c>)
 8004502:	ca07      	ldmia	r2, {r0, r1, r2}
 8004504:	c303      	stmia	r3!, {r0, r1}
 8004506:	801a      	strh	r2, [r3, #0]
		apogee_altitude = altitude;
 8004508:	4b47      	ldr	r3, [pc, #284]	@ (8004628 <handle_state+0x258>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a50      	ldr	r2, [pc, #320]	@ (8004650 <handle_state+0x280>)
 800450e:	6013      	str	r3, [r2, #0]
		store_flash_data();
 8004510:	f7fe f89e 	bl	8002650 <store_flash_data>
 8004514:	e07e      	b.n	8004614 <handle_state+0x244>
	}
	else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
 8004516:	220a      	movs	r2, #10
 8004518:	494c      	ldr	r1, [pc, #304]	@ (800464c <handle_state+0x27c>)
 800451a:	4849      	ldr	r0, [pc, #292]	@ (8004640 <handle_state+0x270>)
 800451c:	f007 fe64 	bl	800c1e8 <strncmp>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d155      	bne.n	80045d2 <handle_state+0x202>
		if (altitude <= apogee_altitude * 0.75 && !payload_released){
 8004526:	4b40      	ldr	r3, [pc, #256]	@ (8004628 <handle_state+0x258>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fc f82c 	bl	8000588 <__aeabi_f2d>
 8004530:	4604      	mov	r4, r0
 8004532:	460d      	mov	r5, r1
 8004534:	4b46      	ldr	r3, [pc, #280]	@ (8004650 <handle_state+0x280>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fc f825 	bl	8000588 <__aeabi_f2d>
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	4b44      	ldr	r3, [pc, #272]	@ (8004654 <handle_state+0x284>)
 8004544:	f7fc f878 	bl	8000638 <__aeabi_dmul>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fc faee 	bl	8000b30 <__aeabi_dcmple>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d018      	beq.n	800458c <handle_state+0x1bc>
 800455a:	4b3f      	ldr	r3, [pc, #252]	@ (8004658 <handle_state+0x288>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d114      	bne.n	800458c <handle_state+0x1bc>
			memset(state, 0, sizeof(state));
 8004562:	220e      	movs	r2, #14
 8004564:	2100      	movs	r1, #0
 8004566:	4836      	ldr	r0, [pc, #216]	@ (8004640 <handle_state+0x270>)
 8004568:	f007 fe27 	bl	800c1ba <memset>
			strncpy(state, "PROBE_RELEASE", strlen("PROBE_RELEASE"));
 800456c:	4a34      	ldr	r2, [pc, #208]	@ (8004640 <handle_state+0x270>)
 800456e:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <handle_state+0x28c>)
 8004570:	4614      	mov	r4, r2
 8004572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004574:	c407      	stmia	r4!, {r0, r1, r2}
 8004576:	7023      	strb	r3, [r4, #0]
			// Deploy Auto Gyro
			Servo_Open();
 8004578:	f7fd ff52 	bl	8002420 <Servo_Open>
			payload_released = true;
 800457c:	4b36      	ldr	r3, [pc, #216]	@ (8004658 <handle_state+0x288>)
 800457e:	2201      	movs	r2, #1
 8004580:	701a      	strb	r2, [r3, #0]
			north_cam_on = true;
 8004582:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <handle_state+0x290>)
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]

			turn_stepper_north();
 8004588:	f7ff fbe2 	bl	8003d50 <turn_stepper_north>
		}
		if (abs(avg_delta) < landing_threshold){
 800458c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004594:	ee17 3a90 	vmov	r3, s15
 8004598:	2b00      	cmp	r3, #0
 800459a:	bfb8      	it	lt
 800459c:	425b      	neglt	r3, r3
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80045aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b2:	dd2f      	ble.n	8004614 <handle_state+0x244>
			memset(state, 0, sizeof(state));
 80045b4:	220e      	movs	r2, #14
 80045b6:	2100      	movs	r1, #0
 80045b8:	4821      	ldr	r0, [pc, #132]	@ (8004640 <handle_state+0x270>)
 80045ba:	f007 fdfe 	bl	800c1ba <memset>
			strncpy(state, "LANDED", strlen("LANDED"));
 80045be:	4b20      	ldr	r3, [pc, #128]	@ (8004640 <handle_state+0x270>)
 80045c0:	4a28      	ldr	r2, [pc, #160]	@ (8004664 <handle_state+0x294>)
 80045c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045c6:	6018      	str	r0, [r3, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	8019      	strh	r1, [r3, #0]
			store_flash_data();
 80045cc:	f7fe f840 	bl	8002650 <store_flash_data>
 80045d0:	e020      	b.n	8004614 <handle_state+0x244>
		}
	}
	else if (strncmp(state, "PROBE_RELEASE", strlen("PROBE_RELEASE")) == 0){
 80045d2:	220d      	movs	r2, #13
 80045d4:	4921      	ldr	r1, [pc, #132]	@ (800465c <handle_state+0x28c>)
 80045d6:	481a      	ldr	r0, [pc, #104]	@ (8004640 <handle_state+0x270>)
 80045d8:	f007 fe06 	bl	800c1e8 <strncmp>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <handle_state+0x228>
		memset(state, 0, sizeof(state));
 80045e2:	220e      	movs	r2, #14
 80045e4:	2100      	movs	r1, #0
 80045e6:	4816      	ldr	r0, [pc, #88]	@ (8004640 <handle_state+0x270>)
 80045e8:	f007 fde7 	bl	800c1ba <memset>
		strncpy(state, "DESCENDING", strlen("DESCENDING"));
 80045ec:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <handle_state+0x270>)
 80045ee:	4a17      	ldr	r2, [pc, #92]	@ (800464c <handle_state+0x27c>)
 80045f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045f2:	c303      	stmia	r3!, {r0, r1}
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e00d      	b.n	8004614 <handle_state+0x244>
	}
	else if (strncmp(state, "LANDED", strlen("LANDED")) == 0){
 80045f8:	2206      	movs	r2, #6
 80045fa:	491a      	ldr	r1, [pc, #104]	@ (8004664 <handle_state+0x294>)
 80045fc:	4810      	ldr	r0, [pc, #64]	@ (8004640 <handle_state+0x270>)
 80045fe:	f007 fdf3 	bl	800c1e8 <strncmp>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <handle_state+0x244>
		// stop telemetry transmission
		telemetry_status = 0;
 8004608:	4b17      	ldr	r3, [pc, #92]	@ (8004668 <handle_state+0x298>)
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
		// Turn off north cam
		north_cam_on = false;
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <handle_state+0x290>)
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
	}

	prev_alt = altitude;
 8004614:	4b04      	ldr	r3, [pc, #16]	@ (8004628 <handle_state+0x258>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a04      	ldr	r2, [pc, #16]	@ (800462c <handle_state+0x25c>)
 800461a:	6013      	str	r3, [r2, #0]
}
 800461c:	bf00      	nop
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bdb0      	pop	{r4, r5, r7, pc}
 8004624:	3e4ccccd 	.word	0x3e4ccccd
 8004628:	2000060c 	.word	0x2000060c
 800462c:	200009d4 	.word	0x200009d4
 8004630:	200009ec 	.word	0x200009ec
 8004634:	200009d8 	.word	0x200009d8
 8004638:	66666667 	.word	0x66666667
 800463c:	0800fdc0 	.word	0x0800fdc0
 8004640:	20000004 	.word	0x20000004
 8004644:	0800fdcc 	.word	0x0800fdcc
 8004648:	0800fdd8 	.word	0x0800fdd8
 800464c:	0800fde0 	.word	0x0800fde0
 8004650:	20000b18 	.word	0x20000b18
 8004654:	3fe80000 	.word	0x3fe80000
 8004658:	20000b1c 	.word	0x20000b1c
 800465c:	0800fdec 	.word	0x0800fdec
 8004660:	20000878 	.word	0x20000878
 8004664:	0800fdfc 	.word	0x0800fdfc
 8004668:	200000a8 	.word	0x200000a8

0800466c <read_transmit_telemetry>:

void read_transmit_telemetry (){
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
	if (mode == 'F') {
 8004670:	4b04      	ldr	r3, [pc, #16]	@ (8004684 <read_transmit_telemetry+0x18>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b46      	cmp	r3, #70	@ 0x46
 8004676:	d101      	bne.n	800467c <read_transmit_telemetry+0x10>
		read_sensors();
 8004678:	f7ff f878 	bl	800376c <read_sensors>
	}

	send_packet();
 800467c:	f7ff fc56 	bl	8003f2c <send_packet>
}
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}
 8004684:	20000000 	.word	0x20000000

08004688 <set_cmd_echo>:

void set_cmd_echo(const char *cmd)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	memset(cmd_echo, '\0', sizeof(cmd_echo));
 8004690:	2240      	movs	r2, #64	@ 0x40
 8004692:	2100      	movs	r1, #0
 8004694:	4807      	ldr	r0, [pc, #28]	@ (80046b4 <set_cmd_echo+0x2c>)
 8004696:	f007 fd90 	bl	800c1ba <memset>
	strncpy(cmd_echo, cmd, strlen(cmd));
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fb fe08 	bl	80002b0 <strlen>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <set_cmd_echo+0x2c>)
 80046a8:	f007 fdb0 	bl	800c20c <strncpy>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000014 	.word	0x20000014

080046b8 <handle_command>:

void handle_command(const char *cmd) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	@ 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]

	// SIM command
	if (strncmp(cmd, sim_command, strlen(sim_command)) == 0) {
 80046c0:	48b4      	ldr	r0, [pc, #720]	@ (8004994 <handle_command+0x2dc>)
 80046c2:	f7fb fdf5 	bl	80002b0 <strlen>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	49b2      	ldr	r1, [pc, #712]	@ (8004994 <handle_command+0x2dc>)
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f007 fd8b 	bl	800c1e8 <strncmp>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d12a      	bne.n	800472e <handle_command+0x76>

		// disable
		if (cmd[13] == 'D'){
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	330d      	adds	r3, #13
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b44      	cmp	r3, #68	@ 0x44
 80046e0:	d108      	bne.n	80046f4 <handle_command+0x3c>
			set_cmd_echo("SIMDISABLE");
 80046e2:	48ad      	ldr	r0, [pc, #692]	@ (8004998 <handle_command+0x2e0>)
 80046e4:	f7ff ffd0 	bl	8004688 <set_cmd_echo>
			mode = 'F';
 80046e8:	4bac      	ldr	r3, [pc, #688]	@ (800499c <handle_command+0x2e4>)
 80046ea:	2246      	movs	r2, #70	@ 0x46
 80046ec:	701a      	strb	r2, [r3, #0]
			sim_enabled = false;
 80046ee:	4bac      	ldr	r3, [pc, #688]	@ (80049a0 <handle_command+0x2e8>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
		}

		// enable
		if (cmd[13] == 'E'){
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	330d      	adds	r3, #13
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b45      	cmp	r3, #69	@ 0x45
 80046fc:	d105      	bne.n	800470a <handle_command+0x52>
			set_cmd_echo("SIMENABLE");
 80046fe:	48a9      	ldr	r0, [pc, #676]	@ (80049a4 <handle_command+0x2ec>)
 8004700:	f7ff ffc2 	bl	8004688 <set_cmd_echo>
			sim_enabled = true;
 8004704:	4ba6      	ldr	r3, [pc, #664]	@ (80049a0 <handle_command+0x2e8>)
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
		}

		// activate
		if (cmd[13] == 'A' && sim_enabled == true){
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	330d      	adds	r3, #13
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b41      	cmp	r3, #65	@ 0x41
 8004712:	f040 8297 	bne.w	8004c44 <handle_command+0x58c>
 8004716:	4ba2      	ldr	r3, [pc, #648]	@ (80049a0 <handle_command+0x2e8>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b01      	cmp	r3, #1
 800471c:	f040 8292 	bne.w	8004c44 <handle_command+0x58c>
			mode = 'S';
 8004720:	4b9e      	ldr	r3, [pc, #632]	@ (800499c <handle_command+0x2e4>)
 8004722:	2253      	movs	r2, #83	@ 0x53
 8004724:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("SIMACTIVATE");
 8004726:	48a0      	ldr	r0, [pc, #640]	@ (80049a8 <handle_command+0x2f0>)
 8004728:	f7ff ffae 	bl	8004688 <set_cmd_echo>
		// Update variable
		set_cmd_echo("RST");
		reset_state();
		sim_enabled = false;
	}
}
 800472c:	e28a      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, simp_command, strlen(simp_command)) == 0) {
 800472e:	489f      	ldr	r0, [pc, #636]	@ (80049ac <handle_command+0x2f4>)
 8004730:	f7fb fdbe 	bl	80002b0 <strlen>
 8004734:	4603      	mov	r3, r0
 8004736:	461a      	mov	r2, r3
 8004738:	499c      	ldr	r1, [pc, #624]	@ (80049ac <handle_command+0x2f4>)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f007 fd54 	bl	800c1e8 <strncmp>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d157      	bne.n	80047f6 <handle_command+0x13e>
		if (mode == 'S') {
 8004746:	4b95      	ldr	r3, [pc, #596]	@ (800499c <handle_command+0x2e4>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b53      	cmp	r3, #83	@ 0x53
 800474c:	d14f      	bne.n	80047ee <handle_command+0x136>
			strncpy(pressure_str, &cmd[14], 6);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f103 010e 	add.w	r1, r3, #14
 8004754:	f107 0318 	add.w	r3, r7, #24
 8004758:	2206      	movs	r2, #6
 800475a:	4618      	mov	r0, r3
 800475c:	f007 fd56 	bl	800c20c <strncpy>
			pressure_str[6] = '\0';
 8004760:	2300      	movs	r3, #0
 8004762:	77bb      	strb	r3, [r7, #30]
			read_sensors();
 8004764:	f7ff f802 	bl	800376c <read_sensors>
			pressure = atof(pressure_str)/1000;
 8004768:	f107 0318 	add.w	r3, r7, #24
 800476c:	4618      	mov	r0, r3
 800476e:	f006 f8f9 	bl	800a964 <atof>
 8004772:	ec51 0b10 	vmov	r0, r1, d0
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <handle_command+0x2f8>)
 800477c:	f7fc f886 	bl	800088c <__aeabi_ddiv>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4610      	mov	r0, r2
 8004786:	4619      	mov	r1, r3
 8004788:	f7fc fa4e 	bl	8000c28 <__aeabi_d2f>
 800478c:	4603      	mov	r3, r0
 800478e:	4a89      	ldr	r2, [pc, #548]	@ (80049b4 <handle_command+0x2fc>)
 8004790:	6013      	str	r3, [r2, #0]
			altitude = calculate_altitude(pressure);
 8004792:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <handle_command+0x2fc>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	f7fe f9bc 	bl	8002b18 <calculate_altitude>
 80047a0:	eef0 7a40 	vmov.f32	s15, s0
 80047a4:	4b84      	ldr	r3, [pc, #528]	@ (80049b8 <handle_command+0x300>)
 80047a6:	edc3 7a00 	vstr	s15, [r3]
			char temp[12] = "SIMP";
 80047aa:	4a84      	ldr	r2, [pc, #528]	@ (80049bc <handle_command+0x304>)
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047b4:	6018      	str	r0, [r3, #0]
 80047b6:	3304      	adds	r3, #4
 80047b8:	7019      	strb	r1, [r3, #0]
 80047ba:	f107 0311 	add.w	r3, r7, #17
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f8c3 2003 	str.w	r2, [r3, #3]
			strcat(temp, pressure_str);
 80047c6:	f107 0218 	add.w	r2, r7, #24
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f007 fcfa 	bl	800c1ca <strcat>
			set_cmd_echo(temp);
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff ff54 	bl	8004688 <set_cmd_echo>
			memset(pressure_str, '\0', sizeof(pressure_str));
 80047e0:	f107 0318 	add.w	r3, r7, #24
 80047e4:	2207      	movs	r2, #7
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f007 fce6 	bl	800c1ba <memset>
		sim_enabled = false;
 80047ee:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <handle_command+0x2e8>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]
}
 80047f4:	e226      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, set_time_command, strlen(set_time_command)) == 0) {
 80047f6:	4872      	ldr	r0, [pc, #456]	@ (80049c0 <handle_command+0x308>)
 80047f8:	f7fb fd5a 	bl	80002b0 <strlen>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461a      	mov	r2, r3
 8004800:	496f      	ldr	r1, [pc, #444]	@ (80049c0 <handle_command+0x308>)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f007 fcf0 	bl	800c1e8 <strncmp>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d17a      	bne.n	8004904 <handle_command+0x24c>
		if (cmd[12]=='G') {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	330c      	adds	r3, #12
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b47      	cmp	r3, #71	@ 0x47
 8004816:	d112      	bne.n	800483e <handle_command+0x186>
			mission_time_hr = (int16_t)gps_time_hr;
 8004818:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <handle_command+0x30c>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b25a      	sxtb	r2, r3
 800481e:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <handle_command+0x310>)
 8004820:	701a      	strb	r2, [r3, #0]
			mission_time_min = (int16_t)gps_time_min;
 8004822:	4b6a      	ldr	r3, [pc, #424]	@ (80049cc <handle_command+0x314>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b25a      	sxtb	r2, r3
 8004828:	4b69      	ldr	r3, [pc, #420]	@ (80049d0 <handle_command+0x318>)
 800482a:	701a      	strb	r2, [r3, #0]
			mission_time_sec = (int16_t)gps_time_sec;
 800482c:	4b69      	ldr	r3, [pc, #420]	@ (80049d4 <handle_command+0x31c>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b25a      	sxtb	r2, r3
 8004832:	4b69      	ldr	r3, [pc, #420]	@ (80049d8 <handle_command+0x320>)
 8004834:	701a      	strb	r2, [r3, #0]
			set_cmd_echo("STGPS");
 8004836:	4869      	ldr	r0, [pc, #420]	@ (80049dc <handle_command+0x324>)
 8004838:	f7ff ff26 	bl	8004688 <set_cmd_echo>
 800483c:	e05f      	b.n	80048fe <handle_command+0x246>
			memset(temp, 0, sizeof(temp));
 800483e:	f107 0308 	add.w	r3, r7, #8
 8004842:	2203      	movs	r2, #3
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f007 fcb7 	bl	800c1ba <memset>
			temp[0] = cmd[12];
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	330c      	adds	r3, #12
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[13];
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	330d      	adds	r3, #13
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	727b      	strb	r3, [r7, #9]
			mission_time_hr = atoi(temp);
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4618      	mov	r0, r3
 8004862:	f006 f882 	bl	800a96a <atoi>
 8004866:	4603      	mov	r3, r0
 8004868:	b25a      	sxtb	r2, r3
 800486a:	4b57      	ldr	r3, [pc, #348]	@ (80049c8 <handle_command+0x310>)
 800486c:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 800486e:	f107 0308 	add.w	r3, r7, #8
 8004872:	2203      	movs	r2, #3
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f007 fc9f 	bl	800c1ba <memset>
			temp[0] = cmd[15];
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	330f      	adds	r3, #15
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[16];
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3310      	adds	r3, #16
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	727b      	strb	r3, [r7, #9]
			mission_time_min = atoi(temp);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4618      	mov	r0, r3
 8004892:	f006 f86a 	bl	800a96a <atoi>
 8004896:	4603      	mov	r3, r0
 8004898:	b25a      	sxtb	r2, r3
 800489a:	4b4d      	ldr	r3, [pc, #308]	@ (80049d0 <handle_command+0x318>)
 800489c:	701a      	strb	r2, [r3, #0]
			memset(temp, 0, sizeof(temp));
 800489e:	f107 0308 	add.w	r3, r7, #8
 80048a2:	2203      	movs	r2, #3
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f007 fc87 	bl	800c1ba <memset>
			temp[0] = cmd[18];
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3312      	adds	r3, #18
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	723b      	strb	r3, [r7, #8]
			temp[1] = cmd[19];
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3313      	adds	r3, #19
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	727b      	strb	r3, [r7, #9]
			mission_time_sec = atoi(temp);
 80048bc:	f107 0308 	add.w	r3, r7, #8
 80048c0:	4618      	mov	r0, r3
 80048c2:	f006 f852 	bl	800a96a <atoi>
 80048c6:	4603      	mov	r3, r0
 80048c8:	b25a      	sxtb	r2, r3
 80048ca:	4b43      	ldr	r3, [pc, #268]	@ (80049d8 <handle_command+0x320>)
 80048cc:	701a      	strb	r2, [r3, #0]
			memset(cmd_echo, '\0', sizeof(cmd_echo));
 80048ce:	2240      	movs	r2, #64	@ 0x40
 80048d0:	2100      	movs	r1, #0
 80048d2:	4843      	ldr	r0, [pc, #268]	@ (80049e0 <handle_command+0x328>)
 80048d4:	f007 fc71 	bl	800c1ba <memset>
			snprintf(cmd_echo, 11, "ST%02d:%02d:%02d", mission_time_hr, mission_time_min, mission_time_sec);
 80048d8:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <handle_command+0x310>)
 80048da:	f993 3000 	ldrsb.w	r3, [r3]
 80048de:	4619      	mov	r1, r3
 80048e0:	4b3b      	ldr	r3, [pc, #236]	@ (80049d0 <handle_command+0x318>)
 80048e2:	f993 3000 	ldrsb.w	r3, [r3]
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b3b      	ldr	r3, [pc, #236]	@ (80049d8 <handle_command+0x320>)
 80048ea:	f993 3000 	ldrsb.w	r3, [r3]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	9200      	str	r2, [sp, #0]
 80048f2:	460b      	mov	r3, r1
 80048f4:	4a3b      	ldr	r2, [pc, #236]	@ (80049e4 <handle_command+0x32c>)
 80048f6:	210b      	movs	r1, #11
 80048f8:	4839      	ldr	r0, [pc, #228]	@ (80049e0 <handle_command+0x328>)
 80048fa:	f007 fbe7 	bl	800c0cc <sniprintf>
		store_flash_data();
 80048fe:	f7fd fea7 	bl	8002650 <store_flash_data>
}
 8004902:	e19f      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, cal_alt_command, strlen(cal_alt_command)) == 0) {
 8004904:	4838      	ldr	r0, [pc, #224]	@ (80049e8 <handle_command+0x330>)
 8004906:	f7fb fcd3 	bl	80002b0 <strlen>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	4936      	ldr	r1, [pc, #216]	@ (80049e8 <handle_command+0x330>)
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f007 fc69 	bl	800c1e8 <strncmp>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d122      	bne.n	8004962 <handle_command+0x2aa>
		calibrate_altitude();
 800491c:	f7fe faec 	bl	8002ef8 <calibrate_altitude>
		store_flash_data();
 8004920:	f7fd fe96 	bl	8002650 <store_flash_data>
		set_cmd_echo("CAL");
 8004924:	4831      	ldr	r0, [pc, #196]	@ (80049ec <handle_command+0x334>)
 8004926:	f7ff feaf 	bl	8004688 <set_cmd_echo>
		if (strncmp(state, "PRE-LAUNCH", strlen("PRE-LAUNCH")) == 0) {
 800492a:	220a      	movs	r2, #10
 800492c:	4930      	ldr	r1, [pc, #192]	@ (80049f0 <handle_command+0x338>)
 800492e:	4831      	ldr	r0, [pc, #196]	@ (80049f4 <handle_command+0x33c>)
 8004930:	f007 fc5a 	bl	800c1e8 <strncmp>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <handle_command+0x296>
			memset(state, 0, sizeof(state));
 800493a:	220e      	movs	r2, #14
 800493c:	2100      	movs	r1, #0
 800493e:	482d      	ldr	r0, [pc, #180]	@ (80049f4 <handle_command+0x33c>)
 8004940:	f007 fc3b 	bl	800c1ba <memset>
			strncpy(state, "LAUNCH-READY", strlen("LAUNCH-READY"));
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <handle_command+0x33c>)
 8004946:	4a2c      	ldr	r2, [pc, #176]	@ (80049f8 <handle_command+0x340>)
 8004948:	ca07      	ldmia	r2, {r0, r1, r2}
 800494a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		prev_alt = 0;
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <handle_command+0x344>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
		reset_delta_buffer();
 8004956:	f7ff fd1f 	bl	8004398 <reset_delta_buffer>
		sim_enabled = false;
 800495a:	4b11      	ldr	r3, [pc, #68]	@ (80049a0 <handle_command+0x2e8>)
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
}
 8004960:	e170      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, tel_on_command, strlen(tel_on_command)) == 0) {
 8004962:	4827      	ldr	r0, [pc, #156]	@ (8004a00 <handle_command+0x348>)
 8004964:	f7fb fca4 	bl	80002b0 <strlen>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	4924      	ldr	r1, [pc, #144]	@ (8004a00 <handle_command+0x348>)
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f007 fc3a 	bl	800c1e8 <strncmp>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d148      	bne.n	8004a0c <handle_command+0x354>
		telemetry_status = 1;
 800497a:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <handle_command+0x34c>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXON");
 8004980:	4821      	ldr	r0, [pc, #132]	@ (8004a08 <handle_command+0x350>)
 8004982:	f7ff fe81 	bl	8004688 <set_cmd_echo>
		sim_enabled = false;
 8004986:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <handle_command+0x2e8>)
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
		flush_PA1010D();
 800498c:	f7fe fc7e 	bl	800328c <flush_PA1010D>
}
 8004990:	e158      	b.n	8004c44 <handle_command+0x58c>
 8004992:	bf00      	nop
 8004994:	200008a8 	.word	0x200008a8
 8004998:	0800fe04 	.word	0x0800fe04
 800499c:	20000000 	.word	0x20000000
 80049a0:	20000a10 	.word	0x20000a10
 80049a4:	0800fe10 	.word	0x0800fe10
 80049a8:	0800fe1c 	.word	0x0800fe1c
 80049ac:	200008b8 	.word	0x200008b8
 80049b0:	408f4000 	.word	0x408f4000
 80049b4:	20000614 	.word	0x20000614
 80049b8:	2000060c 	.word	0x2000060c
 80049bc:	0800fec4 	.word	0x0800fec4
 80049c0:	200008c8 	.word	0x200008c8
 80049c4:	20000644 	.word	0x20000644
 80049c8:	20000604 	.word	0x20000604
 80049cc:	20000645 	.word	0x20000645
 80049d0:	20000605 	.word	0x20000605
 80049d4:	20000646 	.word	0x20000646
 80049d8:	20000606 	.word	0x20000606
 80049dc:	0800fe28 	.word	0x0800fe28
 80049e0:	20000014 	.word	0x20000014
 80049e4:	0800fe30 	.word	0x0800fe30
 80049e8:	200008d8 	.word	0x200008d8
 80049ec:	0800fe44 	.word	0x0800fe44
 80049f0:	0800fe48 	.word	0x0800fe48
 80049f4:	20000004 	.word	0x20000004
 80049f8:	0800fe54 	.word	0x0800fe54
 80049fc:	200009d4 	.word	0x200009d4
 8004a00:	2000094c 	.word	0x2000094c
 8004a04:	200000a8 	.word	0x200000a8
 8004a08:	0800fe64 	.word	0x0800fe64
	else if (strncmp(cmd, tel_off_command, strlen(tel_off_command)) == 0) {
 8004a0c:	488f      	ldr	r0, [pc, #572]	@ (8004c4c <handle_command+0x594>)
 8004a0e:	f7fb fc4f 	bl	80002b0 <strlen>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	498d      	ldr	r1, [pc, #564]	@ (8004c4c <handle_command+0x594>)
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f007 fbe5 	bl	800c1e8 <strncmp>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d109      	bne.n	8004a38 <handle_command+0x380>
		telemetry_status = 0;
 8004a24:	4b8a      	ldr	r3, [pc, #552]	@ (8004c50 <handle_command+0x598>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
		set_cmd_echo("CXOFF");
 8004a2a:	488a      	ldr	r0, [pc, #552]	@ (8004c54 <handle_command+0x59c>)
 8004a2c:	f7ff fe2c 	bl	8004688 <set_cmd_echo>
		sim_enabled = false;
 8004a30:	4b89      	ldr	r3, [pc, #548]	@ (8004c58 <handle_command+0x5a0>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
}
 8004a36:	e105      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, cal_comp_on_command, strlen(cal_comp_on_command)) == 0) {
 8004a38:	4888      	ldr	r0, [pc, #544]	@ (8004c5c <handle_command+0x5a4>)
 8004a3a:	f7fb fc39 	bl	80002b0 <strlen>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	4986      	ldr	r1, [pc, #536]	@ (8004c5c <handle_command+0x5a4>)
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f007 fbcf 	bl	800c1e8 <strncmp>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d12f      	bne.n	8004ab0 <handle_command+0x3f8>
		mag_x_offset = 0;
 8004a50:	4b83      	ldr	r3, [pc, #524]	@ (8004c60 <handle_command+0x5a8>)
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
		mag_y_offset = 0;
 8004a58:	4b82      	ldr	r3, [pc, #520]	@ (8004c64 <handle_command+0x5ac>)
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
		mag_z_offset = 0;
 8004a60:	4b81      	ldr	r3, [pc, #516]	@ (8004c68 <handle_command+0x5b0>)
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
		read_MMC5603();
 8004a68:	f7fe f8aa 	bl	8002bc0 <read_MMC5603>
		mag_x_min = mag_x;
 8004a6c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c6c <handle_command+0x5b4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a7f      	ldr	r2, [pc, #508]	@ (8004c70 <handle_command+0x5b8>)
 8004a72:	6013      	str	r3, [r2, #0]
		mag_x_max = mag_x;
 8004a74:	4b7d      	ldr	r3, [pc, #500]	@ (8004c6c <handle_command+0x5b4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a7e      	ldr	r2, [pc, #504]	@ (8004c74 <handle_command+0x5bc>)
 8004a7a:	6013      	str	r3, [r2, #0]
		mag_y_min = mag_y;
 8004a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c78 <handle_command+0x5c0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7e      	ldr	r2, [pc, #504]	@ (8004c7c <handle_command+0x5c4>)
 8004a82:	6013      	str	r3, [r2, #0]
		mag_y_max = mag_y;
 8004a84:	4b7c      	ldr	r3, [pc, #496]	@ (8004c78 <handle_command+0x5c0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7d      	ldr	r2, [pc, #500]	@ (8004c80 <handle_command+0x5c8>)
 8004a8a:	6013      	str	r3, [r2, #0]
		mag_z_min = mag_z;
 8004a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c84 <handle_command+0x5cc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a7d      	ldr	r2, [pc, #500]	@ (8004c88 <handle_command+0x5d0>)
 8004a92:	6013      	str	r3, [r2, #0]
		mag_z_max = mag_z;
 8004a94:	4b7b      	ldr	r3, [pc, #492]	@ (8004c84 <handle_command+0x5cc>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7c      	ldr	r2, [pc, #496]	@ (8004c8c <handle_command+0x5d4>)
 8004a9a:	6013      	str	r3, [r2, #0]
		calibrating_compass = 1;
 8004a9c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c90 <handle_command+0x5d8>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
		set_cmd_echo("CCON");
 8004aa2:	487c      	ldr	r0, [pc, #496]	@ (8004c94 <handle_command+0x5dc>)
 8004aa4:	f7ff fdf0 	bl	8004688 <set_cmd_echo>
		sim_enabled = false;
 8004aa8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c58 <handle_command+0x5a0>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
}
 8004aae:	e0c9      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, cal_comp_off_command, strlen(cal_comp_off_command)) == 0) {
 8004ab0:	4879      	ldr	r0, [pc, #484]	@ (8004c98 <handle_command+0x5e0>)
 8004ab2:	f7fb fbfd 	bl	80002b0 <strlen>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4977      	ldr	r1, [pc, #476]	@ (8004c98 <handle_command+0x5e0>)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f007 fb93 	bl	800c1e8 <strncmp>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d138      	bne.n	8004b3a <handle_command+0x482>
		calibrating_compass = 0;
 8004ac8:	4b71      	ldr	r3, [pc, #452]	@ (8004c90 <handle_command+0x5d8>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
		mag_x_offset = (mag_x_min + mag_x_max) / 2;
 8004ace:	4b68      	ldr	r3, [pc, #416]	@ (8004c70 <handle_command+0x5b8>)
 8004ad0:	ed93 7a00 	vldr	s14, [r3]
 8004ad4:	4b67      	ldr	r3, [pc, #412]	@ (8004c74 <handle_command+0x5bc>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ade:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8004c60 <handle_command+0x5a8>)
 8004ae8:	edc3 7a00 	vstr	s15, [r3]
		mag_y_offset = (mag_y_min + mag_y_max) / 2;
 8004aec:	4b63      	ldr	r3, [pc, #396]	@ (8004c7c <handle_command+0x5c4>)
 8004aee:	ed93 7a00 	vldr	s14, [r3]
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <handle_command+0x5c8>)
 8004af4:	edd3 7a00 	vldr	s15, [r3]
 8004af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004afc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b04:	4b57      	ldr	r3, [pc, #348]	@ (8004c64 <handle_command+0x5ac>)
 8004b06:	edc3 7a00 	vstr	s15, [r3]
		mag_z_offset = (mag_z_min + mag_z_max) / 2;
 8004b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c88 <handle_command+0x5d0>)
 8004b0c:	ed93 7a00 	vldr	s14, [r3]
 8004b10:	4b5e      	ldr	r3, [pc, #376]	@ (8004c8c <handle_command+0x5d4>)
 8004b12:	edd3 7a00 	vldr	s15, [r3]
 8004b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b1a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b22:	4b51      	ldr	r3, [pc, #324]	@ (8004c68 <handle_command+0x5b0>)
 8004b24:	edc3 7a00 	vstr	s15, [r3]
		store_flash_data();
 8004b28:	f7fd fd92 	bl	8002650 <store_flash_data>
		set_cmd_echo("CCOFF");
 8004b2c:	485b      	ldr	r0, [pc, #364]	@ (8004c9c <handle_command+0x5e4>)
 8004b2e:	f7ff fdab 	bl	8004688 <set_cmd_echo>
		sim_enabled = false;
 8004b32:	4b49      	ldr	r3, [pc, #292]	@ (8004c58 <handle_command+0x5a0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
}
 8004b38:	e084      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, set_camera_north_command, strlen(set_camera_north_command)) == 0) {
 8004b3a:	4859      	ldr	r0, [pc, #356]	@ (8004ca0 <handle_command+0x5e8>)
 8004b3c:	f7fb fbb8 	bl	80002b0 <strlen>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	4956      	ldr	r1, [pc, #344]	@ (8004ca0 <handle_command+0x5e8>)
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f007 fb4e 	bl	800c1e8 <strncmp>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d108      	bne.n	8004b64 <handle_command+0x4ac>
		set_cmd_echo("SCN");
 8004b52:	4854      	ldr	r0, [pc, #336]	@ (8004ca4 <handle_command+0x5ec>)
 8004b54:	f7ff fd98 	bl	8004688 <set_cmd_echo>
		set_stepper_north();
 8004b58:	f7ff f8e8 	bl	8003d2c <set_stepper_north>
		sim_enabled = false;
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004c58 <handle_command+0x5a0>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
}
 8004b62:	e06f      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, activate_north_cam_command, strlen(activate_north_cam_command)) == 0) {
 8004b64:	4850      	ldr	r0, [pc, #320]	@ (8004ca8 <handle_command+0x5f0>)
 8004b66:	f7fb fba3 	bl	80002b0 <strlen>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	494e      	ldr	r1, [pc, #312]	@ (8004ca8 <handle_command+0x5f0>)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f007 fb39 	bl	800c1e8 <strncmp>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <handle_command+0x4d8>
		set_cmd_echo("MECCAMON");
 8004b7c:	484b      	ldr	r0, [pc, #300]	@ (8004cac <handle_command+0x5f4>)
 8004b7e:	f7ff fd83 	bl	8004688 <set_cmd_echo>
		north_cam_on = true;
 8004b82:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb0 <handle_command+0x5f8>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004b88:	4b33      	ldr	r3, [pc, #204]	@ (8004c58 <handle_command+0x5a0>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
}
 8004b8e:	e059      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, deactivate_north_cam_command, strlen(deactivate_north_cam_command)) == 0) {
 8004b90:	4848      	ldr	r0, [pc, #288]	@ (8004cb4 <handle_command+0x5fc>)
 8004b92:	f7fb fb8d 	bl	80002b0 <strlen>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4946      	ldr	r1, [pc, #280]	@ (8004cb4 <handle_command+0x5fc>)
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f007 fb23 	bl	800c1e8 <strncmp>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <handle_command+0x504>
		set_cmd_echo("MECCAMOFF");
 8004ba8:	4843      	ldr	r0, [pc, #268]	@ (8004cb8 <handle_command+0x600>)
 8004baa:	f7ff fd6d 	bl	8004688 <set_cmd_echo>
		north_cam_on = false;
 8004bae:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <handle_command+0x5f8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004bb4:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <handle_command+0x5a0>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
}
 8004bba:	e043      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, release_payload_command, strlen(release_payload_command)) == 0) {
 8004bbc:	483f      	ldr	r0, [pc, #252]	@ (8004cbc <handle_command+0x604>)
 8004bbe:	f7fb fb77 	bl	80002b0 <strlen>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	493d      	ldr	r1, [pc, #244]	@ (8004cbc <handle_command+0x604>)
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f007 fb0d 	bl	800c1e8 <strncmp>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10b      	bne.n	8004bec <handle_command+0x534>
		set_cmd_echo("MECPAYLOADON");
 8004bd4:	483a      	ldr	r0, [pc, #232]	@ (8004cc0 <handle_command+0x608>)
 8004bd6:	f7ff fd57 	bl	8004688 <set_cmd_echo>
		Servo_Open();
 8004bda:	f7fd fc21 	bl	8002420 <Servo_Open>
		payload_released = true;
 8004bde:	4b39      	ldr	r3, [pc, #228]	@ (8004cc4 <handle_command+0x60c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004be4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c58 <handle_command+0x5a0>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
}
 8004bea:	e02b      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, reset_release_payload_command, strlen(reset_release_payload_command)) == 0) {
 8004bec:	4836      	ldr	r0, [pc, #216]	@ (8004cc8 <handle_command+0x610>)
 8004bee:	f7fb fb5f 	bl	80002b0 <strlen>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4934      	ldr	r1, [pc, #208]	@ (8004cc8 <handle_command+0x610>)
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f007 faf5 	bl	800c1e8 <strncmp>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <handle_command+0x564>
		set_cmd_echo("MECPAYLOADOFF");
 8004c04:	4831      	ldr	r0, [pc, #196]	@ (8004ccc <handle_command+0x614>)
 8004c06:	f7ff fd3f 	bl	8004688 <set_cmd_echo>
		Servo_Close();
 8004c0a:	f7fd fc2e 	bl	800246a <Servo_Close>
		payload_released = false;
 8004c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc4 <handle_command+0x60c>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
		sim_enabled = false;
 8004c14:	4b10      	ldr	r3, [pc, #64]	@ (8004c58 <handle_command+0x5a0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
}
 8004c1a:	e013      	b.n	8004c44 <handle_command+0x58c>
	else if (strncmp(cmd, reset_state_command, strlen(reset_state_command)) == 0) {
 8004c1c:	482c      	ldr	r0, [pc, #176]	@ (8004cd0 <handle_command+0x618>)
 8004c1e:	f7fb fb47 	bl	80002b0 <strlen>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461a      	mov	r2, r3
 8004c26:	492a      	ldr	r1, [pc, #168]	@ (8004cd0 <handle_command+0x618>)
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f007 fadd 	bl	800c1e8 <strncmp>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <handle_command+0x58c>
		set_cmd_echo("RST");
 8004c34:	4827      	ldr	r0, [pc, #156]	@ (8004cd4 <handle_command+0x61c>)
 8004c36:	f7ff fd27 	bl	8004688 <set_cmd_echo>
		reset_state();
 8004c3a:	f000 f84d 	bl	8004cd8 <reset_state>
		sim_enabled = false;
 8004c3e:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <handle_command+0x5a0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	701a      	strb	r2, [r3, #0]
}
 8004c44:	bf00      	nop
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	2000095c 	.word	0x2000095c
 8004c50:	200000a8 	.word	0x200000a8
 8004c54:	0800fe6c 	.word	0x0800fe6c
 8004c58:	20000a10 	.word	0x20000a10
 8004c5c:	2000096c 	.word	0x2000096c
 8004c60:	200009f0 	.word	0x200009f0
 8004c64:	200009f4 	.word	0x200009f4
 8004c68:	200009f8 	.word	0x200009f8
 8004c6c:	20000634 	.word	0x20000634
 8004c70:	200009fc 	.word	0x200009fc
 8004c74:	20000a08 	.word	0x20000a08
 8004c78:	20000638 	.word	0x20000638
 8004c7c:	20000a00 	.word	0x20000a00
 8004c80:	200000a0 	.word	0x200000a0
 8004c84:	2000063c 	.word	0x2000063c
 8004c88:	20000a04 	.word	0x20000a04
 8004c8c:	200000a4 	.word	0x200000a4
 8004c90:	20000b14 	.word	0x20000b14
 8004c94:	0800fe74 	.word	0x0800fe74
 8004c98:	2000097c 	.word	0x2000097c
 8004c9c:	0800fe7c 	.word	0x0800fe7c
 8004ca0:	200008e8 	.word	0x200008e8
 8004ca4:	0800fe84 	.word	0x0800fe84
 8004ca8:	200008f8 	.word	0x200008f8
 8004cac:	0800fe88 	.word	0x0800fe88
 8004cb0:	20000878 	.word	0x20000878
 8004cb4:	20000910 	.word	0x20000910
 8004cb8:	0800fe94 	.word	0x0800fe94
 8004cbc:	2000098c 	.word	0x2000098c
 8004cc0:	0800fea0 	.word	0x0800fea0
 8004cc4:	20000b1c 	.word	0x20000b1c
 8004cc8:	200009a8 	.word	0x200009a8
 8004ccc:	0800feb0 	.word	0x0800feb0
 8004cd0:	200009c4 	.word	0x200009c4
 8004cd4:	0800fec0 	.word	0x0800fec0

08004cd8 <reset_state>:

void reset_state(){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	Set_Servo_Angle(SERVO_ANGLE_CLOSED);
 8004cdc:	2080      	movs	r0, #128	@ 0x80
 8004cde:	f7fd fb71 	bl	80023c4 <Set_Servo_Angle>
	payload_released = false;
 8004ce2:	4b11      	ldr	r3, [pc, #68]	@ (8004d28 <reset_state+0x50>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
	north_cam_on = true;
 8004ce8:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <reset_state+0x54>)
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
	prev_alt = altitude;
 8004cee:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <reset_state+0x58>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <reset_state+0x5c>)
 8004cf4:	6013      	str	r3, [r2, #0]
	reset_delta_buffer();
 8004cf6:	f7ff fb4f 	bl	8004398 <reset_delta_buffer>
	telemetry_status = 1;
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <reset_state+0x60>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
	memset(state, 0, sizeof(state));
 8004d00:	220e      	movs	r2, #14
 8004d02:	2100      	movs	r1, #0
 8004d04:	480d      	ldr	r0, [pc, #52]	@ (8004d3c <reset_state+0x64>)
 8004d06:	f007 fa58 	bl	800c1ba <memset>
	strncpy(state, "LAUNCH_PAD", strlen("LAUNCH_PAD"));
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <reset_state+0x64>)
 8004d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d40 <reset_state+0x68>)
 8004d0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d10:	c303      	stmia	r3!, {r0, r1}
 8004d12:	801a      	strh	r2, [r3, #0]
	apogee_altitude = DEFAULT_APOGEE_ALT;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <reset_state+0x6c>)
 8004d16:	4a0c      	ldr	r2, [pc, #48]	@ (8004d48 <reset_state+0x70>)
 8004d18:	601a      	str	r2, [r3, #0]
	store_flash_data();
 8004d1a:	f7fd fc99 	bl	8002650 <store_flash_data>
	msCounter = 0;
 8004d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <reset_state+0x74>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000b1c 	.word	0x20000b1c
 8004d2c:	20000878 	.word	0x20000878
 8004d30:	2000060c 	.word	0x2000060c
 8004d34:	200009d4 	.word	0x200009d4
 8004d38:	200000a8 	.word	0x200000a8
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	0800fdc0 	.word	0x0800fdc0
 8004d44:	20000b18 	.word	0x20000b18
 8004d48:	447a0000 	.word	0x447a0000
 8004d4c:	20000b20 	.word	0x20000b20

08004d50 <initial_state_reset>:

void initial_state_reset(){
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	read_MPL3115A2();
 8004d54:	f7fe f85e 	bl	8002e14 <read_MPL3115A2>
	prev_alt = altitude;
 8004d58:	4b22      	ldr	r3, [pc, #136]	@ (8004de4 <initial_state_reset+0x94>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <initial_state_reset+0x98>)
 8004d5e:	6013      	str	r3, [r2, #0]
	reset_delta_buffer();
 8004d60:	f7ff fb1a 	bl	8004398 <reset_delta_buffer>

	// Set North Direction Offset
	read_MMC5603();
 8004d64:	f7fd ff2c 	bl	8002bc0 <read_MMC5603>
	set_stepper_north();
 8004d68:	f7fe ffe0 	bl	8003d2c <set_stepper_north>

	if (altitude > MIN_STATE_MAINTAINED_ALT){
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004de4 <initial_state_reset+0x94>)
 8004d6e:	edd3 7a00 	vldr	s15, [r3]
 8004d72:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	dd2c      	ble.n	8004dda <initial_state_reset+0x8a>
		// Assume there was a power reset during flight. Use configurations from flash
		if (payload_released)
 8004d80:	4b1a      	ldr	r3, [pc, #104]	@ (8004dec <initial_state_reset+0x9c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <initial_state_reset+0x3e>
			Servo_Open();
 8004d88:	f7fd fb4a 	bl	8002420 <Servo_Open>
 8004d8c:	e001      	b.n	8004d92 <initial_state_reset+0x42>
		else
			Servo_Close();
 8004d8e:	f7fd fb6c 	bl	800246a <Servo_Close>

		// Lost Power during flight. Reseting to previous state
		if (strncmp(state, "ASCENDING", strlen("ASCENDING")) == 0){
 8004d92:	2209      	movs	r2, #9
 8004d94:	4916      	ldr	r1, [pc, #88]	@ (8004df0 <initial_state_reset+0xa0>)
 8004d96:	4817      	ldr	r0, [pc, #92]	@ (8004df4 <initial_state_reset+0xa4>)
 8004d98:	f007 fa26 	bl	800c1e8 <strncmp>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <initial_state_reset+0x5e>
			Servo_Close();
 8004da2:	f7fd fb62 	bl	800246a <Servo_Close>
			north_cam_on = false;
 8004da6:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <initial_state_reset+0xa8>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e009      	b.n	8004dc2 <initial_state_reset+0x72>
		}
		else if (strncmp(state, "DESCENDING", strlen("DESCENDING")) == 0){
 8004dae:	220a      	movs	r2, #10
 8004db0:	4912      	ldr	r1, [pc, #72]	@ (8004dfc <initial_state_reset+0xac>)
 8004db2:	4810      	ldr	r0, [pc, #64]	@ (8004df4 <initial_state_reset+0xa4>)
 8004db4:	f007 fa18 	bl	800c1e8 <strncmp>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <initial_state_reset+0x72>
			Servo_Open();
 8004dbe:	f7fd fb2f 	bl	8002420 <Servo_Open>
		}

		prev_alt = altitude;
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <initial_state_reset+0x94>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a08      	ldr	r2, [pc, #32]	@ (8004de8 <initial_state_reset+0x98>)
 8004dc8:	6013      	str	r3, [r2, #0]
		reset_delta_buffer();
 8004dca:	f7ff fae5 	bl	8004398 <reset_delta_buffer>
		telemetry_status = 1;
 8004dce:	4b0c      	ldr	r3, [pc, #48]	@ (8004e00 <initial_state_reset+0xb0>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
		store_flash_data();
 8004dd4:	f7fd fc3c 	bl	8002650 <store_flash_data>
	}
	else{
		reset_state();
	}
}
 8004dd8:	e001      	b.n	8004dde <initial_state_reset+0x8e>
		reset_state();
 8004dda:	f7ff ff7d 	bl	8004cd8 <reset_state>
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2000060c 	.word	0x2000060c
 8004de8:	200009d4 	.word	0x200009d4
 8004dec:	20000b1c 	.word	0x20000b1c
 8004df0:	0800fdcc 	.word	0x0800fdcc
 8004df4:	20000004 	.word	0x20000004
 8004df8:	20000878 	.word	0x20000878
 8004dfc:	0800fde0 	.word	0x0800fde0
 8004e00:	200000a8 	.word	0x200000a8

08004e04 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	807b      	strh	r3, [r7, #2]
	memcpy(rx_packet, rx_data, RX_BFR_SIZE);
 8004e10:	4a24      	ldr	r2, [pc, #144]	@ (8004ea4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004e12:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	23ff      	movs	r3, #255	@ 0xff
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f007 fa89 	bl	800c332 <memcpy>

	memset(rx_data, 0, sizeof(rx_data));
 8004e20:	22ff      	movs	r2, #255	@ 0xff
 8004e22:	2100      	movs	r1, #0
 8004e24:	4820      	ldr	r0, [pc, #128]	@ (8004ea8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8004e26:	f007 f9c8 	bl	800c1ba <memset>

	if (rx_packet[0] == '~') {
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e30:	d12b      	bne.n	8004e8a <HAL_UARTEx_RxEventCallback+0x86>
		// Calculate where the comma and checksum should be
		char *comma_pos = &rx_packet[Size - 3];  // Comma is 3 characters from the end (2 for checksum, 1 for comma)
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	3b03      	subs	r3, #3
 8004e36:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]

		// Ensure the expected comma is at the right position
		if (*comma_pos == ',') {
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b2c      	cmp	r3, #44	@ 0x2c
 8004e42:	d122      	bne.n	8004e8a <HAL_UARTEx_RxEventCallback+0x86>
			// Null-terminate the data part (exclude comma and checksum)
			*comma_pos = '\0';
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]

			// Extract and convert the received checksum (2 characters after the comma)
			uint8_t received_checksum = (uint8_t)strtol(&rx_packet[Size - 2], NULL, 16);  // Convert checksum to integer
 8004e4a:	887b      	ldrh	r3, [r7, #2]
 8004e4c:	3b02      	subs	r3, #2
 8004e4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <HAL_UARTEx_RxEventCallback+0xa0>)
 8004e50:	4413      	add	r3, r2
 8004e52:	2210      	movs	r2, #16
 8004e54:	2100      	movs	r1, #0
 8004e56:	4618      	mov	r0, r3
 8004e58:	f006 fc14 	bl	800b684 <strtol>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	72fb      	strb	r3, [r7, #11]
			// Calculate checksum of the data part (after '~' and before comma)
			uint8_t calculated_checksum = calculate_checksum(&rx_packet[1]);
 8004e60:	4812      	ldr	r0, [pc, #72]	@ (8004eac <HAL_UARTEx_RxEventCallback+0xa8>)
 8004e62:	f7ff f849 	bl	8003ef8 <calculate_checksum>
 8004e66:	4603      	mov	r3, r0
 8004e68:	72bb      	strb	r3, [r7, #10]
			// Compare calculated checksum with the received one
			if (calculated_checksum == received_checksum && command_ready == false) {
 8004e6a:	7aba      	ldrb	r2, [r7, #10]
 8004e6c:	7afb      	ldrb	r3, [r7, #11]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d10b      	bne.n	8004e8a <HAL_UARTEx_RxEventCallback+0x86>
 8004e72:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <HAL_UARTEx_RxEventCallback+0xac>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UARTEx_RxEventCallback+0x86>
				// Checksum is valid, process the command
				strcpy(command_buffer, &rx_packet[1]);
 8004e7c:	490b      	ldr	r1, [pc, #44]	@ (8004eac <HAL_UARTEx_RxEventCallback+0xa8>)
 8004e7e:	480d      	ldr	r0, [pc, #52]	@ (8004eb4 <HAL_UARTEx_RxEventCallback+0xb0>)
 8004e80:	f007 fa4f 	bl	800c322 <strcpy>
				command_ready = true;
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_UARTEx_RxEventCallback+0xac>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	// Call function for next packet
	uart_received = HAL_UARTEx_ReceiveToIdle_IT(huart, rx_data, RX_BFR_SIZE);
 8004e8a:	22ff      	movs	r2, #255	@ 0xff
 8004e8c:	4906      	ldr	r1, [pc, #24]	@ (8004ea8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f004 fdb7 	bl	8009a02 <HAL_UARTEx_ReceiveToIdle_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <HAL_UARTEx_RxEventCallback+0xb4>)
 8004e9a:	701a      	strb	r2, [r3, #0]

}
 8004e9c:	bf00      	nop
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	200002cc 	.word	0x200002cc
 8004ea8:	20000a14 	.word	0x20000a14
 8004eac:	200002cd 	.word	0x200002cd
 8004eb0:	200003cb 	.word	0x200003cb
 8004eb4:	200003cc 	.word	0x200003cc
 8004eb8:	20000b13 	.word	0x20000b13

08004ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ec0:	f000 fdac 	bl	8005a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ec4:	f000 f900 	bl	80050c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ec8:	f000 fa58 	bl	800537c <MX_GPIO_Init>
  MX_I2C3_Init();
 8004ecc:	f000 f988 	bl	80051e0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004ed0:	f000 f9b4 	bl	800523c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004ed4:	f000 fa28 	bl	8005328 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004ed8:	f000 f954 	bl	8005184 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8004edc:	2201      	movs	r2, #1
 8004ede:	2110      	movs	r1, #16
 8004ee0:	4864      	ldr	r0, [pc, #400]	@ (8005074 <main+0x1b8>)
 8004ee2:	f001 fb5f 	bl	80065a4 <HAL_GPIO_WritePin>

  load_flash_data();
 8004ee6:	f7fd fc87 	bl	80027f8 <load_flash_data>

  HAL_Delay(100);
 8004eea:	2064      	movs	r0, #100	@ 0x64
 8004eec:	f000 fe08 	bl	8005b00 <HAL_Delay>
  init_sensors();
 8004ef0:	f7fe fc6e 	bl	80037d0 <init_sensors>
  HAL_Delay(100);
 8004ef4:	2064      	movs	r0, #100	@ 0x64
 8004ef6:	f000 fe03 	bl	8005b00 <HAL_Delay>

  init_commands();
 8004efa:	f7fe fc87 	bl	800380c <init_commands>
  Servo_Init();
 8004efe:	f7fd fad9 	bl	80024b4 <Servo_Init>

  // Initialize Xbee receiving
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f02:	2025      	movs	r0, #37	@ 0x25
 8004f04:	f000 ff17 	bl	8005d36 <HAL_NVIC_EnableIRQ>
  uart_received = HAL_UARTEx_ReceiveToIdle_IT(&huart1, rx_data, RX_BFR_SIZE);
 8004f08:	22ff      	movs	r2, #255	@ 0xff
 8004f0a:	495b      	ldr	r1, [pc, #364]	@ (8005078 <main+0x1bc>)
 8004f0c:	485b      	ldr	r0, [pc, #364]	@ (800507c <main+0x1c0>)
 8004f0e:	f004 fd78 	bl	8009a02 <HAL_UARTEx_ReceiveToIdle_IT>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b5a      	ldr	r3, [pc, #360]	@ (8005080 <main+0x1c4>)
 8004f18:	701a      	strb	r2, [r3, #0]

  DWT_Init();
 8004f1a:	f7fe fda9 	bl	8003a70 <DWT_Init>
  Madgwick_init(&ahrs, 200);
 8004f1e:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8005084 <main+0x1c8>
 8004f22:	4859      	ldr	r0, [pc, #356]	@ (8005088 <main+0x1cc>)
 8004f24:	f7fc f894 	bl	8001050 <Madgwick_init>

  initial_state_reset();
 8004f28:	f7ff ff12 	bl	8004d50 <initial_state_reset>

  north_cam_on = 1;
 8004f2c:	4b57      	ldr	r3, [pc, #348]	@ (800508c <main+0x1d0>)
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]

  if (isnan(mag_x_offset)){
 8004f32:	4b57      	ldr	r3, [pc, #348]	@ (8005090 <main+0x1d4>)
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	eef4 7a67 	vcmp.f32	s15, s15
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d709      	bvc.n	8004f56 <main+0x9a>
	  mag_x_offset = -0.1;
 8004f42:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <main+0x1d4>)
 8004f44:	4a53      	ldr	r2, [pc, #332]	@ (8005094 <main+0x1d8>)
 8004f46:	601a      	str	r2, [r3, #0]
	  mag_y_offset = -0.1;
 8004f48:	4b53      	ldr	r3, [pc, #332]	@ (8005098 <main+0x1dc>)
 8004f4a:	4a52      	ldr	r2, [pc, #328]	@ (8005094 <main+0x1d8>)
 8004f4c:	601a      	str	r2, [r3, #0]
	  mag_z_offset = 0;
 8004f4e:	4b53      	ldr	r3, [pc, #332]	@ (800509c <main+0x1e0>)
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
  }
  if (isnan(altitude_offset)){
 8004f56:	4b52      	ldr	r3, [pc, #328]	@ (80050a0 <main+0x1e4>)
 8004f58:	edd3 7a00 	vldr	s15, [r3]
 8004f5c:	eef4 7a67 	vcmp.f32	s15, s15
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	d701      	bvc.n	8004f6a <main+0xae>
	  calibrate_altitude();
 8004f66:	f7fd ffc7 	bl	8002ef8 <calibrate_altitude>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (command_ready){
 8004f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80050a4 <main+0x1e8>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <main+0xc4>
		  handle_command(command_buffer);
 8004f74:	484c      	ldr	r0, [pc, #304]	@ (80050a8 <main+0x1ec>)
 8004f76:	f7ff fb9f 	bl	80046b8 <handle_command>
		  command_ready = false;
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80050a4 <main+0x1e8>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
	  }

	  // Correction of Camera Angle
	  if (north_cam_on){
 8004f80:	4b42      	ldr	r3, [pc, #264]	@ (800508c <main+0x1d0>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <main+0xd0>
		  Stepper_Correction();
 8004f88:	f7fe fd8c 	bl	8003aa4 <Stepper_Correction>
	  }

	  if (calibrating_compass){
 8004f8c:	4b47      	ldr	r3, [pc, #284]	@ (80050ac <main+0x1f0>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <main+0xf2>
		  calibrate_mmc();
 8004f94:	f7fe f9ea 	bl	800336c <calibrate_mmc>
		  if (msCounter >= 250){
 8004f98:	4b45      	ldr	r3, [pc, #276]	@ (80050b0 <main+0x1f4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2bf9      	cmp	r3, #249	@ 0xf9
 8004f9e:	d906      	bls.n	8004fae <main+0xf2>
			  send_mmc_plot_packet();
 8004fa0:	f7ff f940 	bl	8004224 <send_mmc_plot_packet>
			  msCounter -= 250;
 8004fa4:	4b42      	ldr	r3, [pc, #264]	@ (80050b0 <main+0x1f4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3bfa      	subs	r3, #250	@ 0xfa
 8004faa:	4a41      	ldr	r2, [pc, #260]	@ (80050b0 <main+0x1f4>)
 8004fac:	6013      	str	r3, [r2, #0]
		  }
	  }

	  // Happens 1 time per second
	  if (msCounter >= 1000){
 8004fae:	4b40      	ldr	r3, [pc, #256]	@ (80050b0 <main+0x1f4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004fb6:	d3d8      	bcc.n	8004f6a <main+0xae>
		  msCounter -= 1000;
 8004fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <main+0x1f4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8004fc0:	4a3b      	ldr	r2, [pc, #236]	@ (80050b0 <main+0x1f4>)
 8004fc2:	6013      	str	r3, [r2, #0]

		  if (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8004fc4:	483b      	ldr	r0, [pc, #236]	@ (80050b4 <main+0x1f8>)
 8004fc6:	f002 fbf9 	bl	80077bc <HAL_I2C_GetState>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d001      	beq.n	8004fd4 <main+0x118>
			  init_sensors();
 8004fd0:	f7fe fbfe 	bl	80037d0 <init_sensors>
		  }

		  // Handle Mission Time
		  mission_time_sec++;
 8004fd4:	4b38      	ldr	r3, [pc, #224]	@ (80050b8 <main+0x1fc>)
 8004fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	b25a      	sxtb	r2, r3
 8004fe2:	4b35      	ldr	r3, [pc, #212]	@ (80050b8 <main+0x1fc>)
 8004fe4:	701a      	strb	r2, [r3, #0]
		  if ( mission_time_sec >= 60 ){
 8004fe6:	4b34      	ldr	r3, [pc, #208]	@ (80050b8 <main+0x1fc>)
 8004fe8:	f993 3000 	ldrsb.w	r3, [r3]
 8004fec:	2b3b      	cmp	r3, #59	@ 0x3b
 8004fee:	dd11      	ble.n	8005014 <main+0x158>
			  mission_time_sec -= 60;
 8004ff0:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <main+0x1fc>)
 8004ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3b3c      	subs	r3, #60	@ 0x3c
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	b25a      	sxtb	r2, r3
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <main+0x1fc>)
 8005000:	701a      	strb	r2, [r3, #0]
			  mission_time_min += 1;
 8005002:	4b2e      	ldr	r3, [pc, #184]	@ (80050bc <main+0x200>)
 8005004:	f993 3000 	ldrsb.w	r3, [r3]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	3301      	adds	r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	b25a      	sxtb	r2, r3
 8005010:	4b2a      	ldr	r3, [pc, #168]	@ (80050bc <main+0x200>)
 8005012:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_min >= 60 ){
 8005014:	4b29      	ldr	r3, [pc, #164]	@ (80050bc <main+0x200>)
 8005016:	f993 3000 	ldrsb.w	r3, [r3]
 800501a:	2b3b      	cmp	r3, #59	@ 0x3b
 800501c:	dd11      	ble.n	8005042 <main+0x186>
			  mission_time_min -= 60;
 800501e:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <main+0x200>)
 8005020:	f993 3000 	ldrsb.w	r3, [r3]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	3b3c      	subs	r3, #60	@ 0x3c
 8005028:	b2db      	uxtb	r3, r3
 800502a:	b25a      	sxtb	r2, r3
 800502c:	4b23      	ldr	r3, [pc, #140]	@ (80050bc <main+0x200>)
 800502e:	701a      	strb	r2, [r3, #0]
			  mission_time_hr += 1;
 8005030:	4b23      	ldr	r3, [pc, #140]	@ (80050c0 <main+0x204>)
 8005032:	f993 3000 	ldrsb.w	r3, [r3]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	3301      	adds	r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	b25a      	sxtb	r2, r3
 800503e:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <main+0x204>)
 8005040:	701a      	strb	r2, [r3, #0]
		  }
		  if ( mission_time_hr >= 24 ){
 8005042:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <main+0x204>)
 8005044:	f993 3000 	ldrsb.w	r3, [r3]
 8005048:	2b17      	cmp	r3, #23
 800504a:	dd08      	ble.n	800505e <main+0x1a2>
			  mission_time_hr -= 24;
 800504c:	4b1c      	ldr	r3, [pc, #112]	@ (80050c0 <main+0x204>)
 800504e:	f993 3000 	ldrsb.w	r3, [r3]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3b18      	subs	r3, #24
 8005056:	b2db      	uxtb	r3, r3
 8005058:	b25a      	sxtb	r2, r3
 800505a:	4b19      	ldr	r3, [pc, #100]	@ (80050c0 <main+0x204>)
 800505c:	701a      	strb	r2, [r3, #0]
		  }

		  handle_state();
 800505e:	f7ff f9b7 	bl	80043d0 <handle_state>

		  // Control Telemetry
		  if (telemetry_status == 1){
 8005062:	4b18      	ldr	r3, [pc, #96]	@ (80050c4 <main+0x208>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	f47f af7f 	bne.w	8004f6a <main+0xae>
			  read_transmit_telemetry();
 800506c:	f7ff fafe 	bl	800466c <read_transmit_telemetry>
	  if (command_ready){
 8005070:	e77b      	b.n	8004f6a <main+0xae>
 8005072:	bf00      	nop
 8005074:	40020400 	.word	0x40020400
 8005078:	20000a14 	.word	0x20000a14
 800507c:	200005bc 	.word	0x200005bc
 8005080:	20000b13 	.word	0x20000b13
 8005084:	43480000 	.word	0x43480000
 8005088:	2000087c 	.word	0x2000087c
 800508c:	20000878 	.word	0x20000878
 8005090:	200009f0 	.word	0x200009f0
 8005094:	bdcccccd 	.word	0xbdcccccd
 8005098:	200009f4 	.word	0x200009f4
 800509c:	200009f8 	.word	0x200009f8
 80050a0:	20000a0c 	.word	0x20000a0c
 80050a4:	200003cb 	.word	0x200003cb
 80050a8:	200003cc 	.word	0x200003cc
 80050ac:	20000b14 	.word	0x20000b14
 80050b0:	20000b20 	.word	0x20000b20
 80050b4:	200004cc 	.word	0x200004cc
 80050b8:	20000606 	.word	0x20000606
 80050bc:	20000605 	.word	0x20000605
 80050c0:	20000604 	.word	0x20000604
 80050c4:	200000a8 	.word	0x200000a8

080050c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b094      	sub	sp, #80	@ 0x50
 80050cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050ce:	f107 031c 	add.w	r3, r7, #28
 80050d2:	2234      	movs	r2, #52	@ 0x34
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f007 f86f 	bl	800c1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050dc:	f107 0308 	add.w	r3, r7, #8
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	4b22      	ldr	r3, [pc, #136]	@ (800517c <SystemClock_Config+0xb4>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	4a21      	ldr	r2, [pc, #132]	@ (800517c <SystemClock_Config+0xb4>)
 80050f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80050fc:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <SystemClock_Config+0xb4>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005108:	2300      	movs	r3, #0
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4b1c      	ldr	r3, [pc, #112]	@ (8005180 <SystemClock_Config+0xb8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <SystemClock_Config+0xb8>)
 8005112:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <SystemClock_Config+0xb8>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005124:	2302      	movs	r3, #2
 8005126:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005128:	2301      	movs	r3, #1
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800512c:	2310      	movs	r3, #16
 800512e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005130:	2300      	movs	r3, #0
 8005132:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005134:	f107 031c 	add.w	r3, r7, #28
 8005138:	4618      	mov	r0, r3
 800513a:	f003 fa71 	bl	8008620 <HAL_RCC_OscConfig>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8005144:	f000 f9a4 	bl	8005490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005148:	230f      	movs	r3, #15
 800514a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005158:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f003 f83b 	bl	80081e0 <HAL_RCC_ClockConfig>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8005170:	f000 f98e 	bl	8005490 <Error_Handler>
  }
}
 8005174:	bf00      	nop
 8005176:	3750      	adds	r7, #80	@ 0x50
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40023800 	.word	0x40023800
 8005180:	40007000 	.word	0x40007000

08005184 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005188:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <MX_I2C1_Init+0x50>)
 800518a:	4a13      	ldr	r2, [pc, #76]	@ (80051d8 <MX_I2C1_Init+0x54>)
 800518c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800518e:	4b11      	ldr	r3, [pc, #68]	@ (80051d4 <MX_I2C1_Init+0x50>)
 8005190:	4a12      	ldr	r2, [pc, #72]	@ (80051dc <MX_I2C1_Init+0x58>)
 8005192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005194:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <MX_I2C1_Init+0x50>)
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800519a:	4b0e      	ldr	r3, [pc, #56]	@ (80051d4 <MX_I2C1_Init+0x50>)
 800519c:	2200      	movs	r2, #0
 800519e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80051ae:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051b4:	4b07      	ldr	r3, [pc, #28]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ba:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051bc:	2200      	movs	r2, #0
 80051be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051c0:	4804      	ldr	r0, [pc, #16]	@ (80051d4 <MX_I2C1_Init+0x50>)
 80051c2:	f001 fa2d 	bl	8006620 <HAL_I2C_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80051cc:	f000 f960 	bl	8005490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	200004cc 	.word	0x200004cc
 80051d8:	40005400 	.word	0x40005400
 80051dc:	000186a0 	.word	0x000186a0

080051e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80051e4:	4b12      	ldr	r3, [pc, #72]	@ (8005230 <MX_I2C3_Init+0x50>)
 80051e6:	4a13      	ldr	r2, [pc, #76]	@ (8005234 <MX_I2C3_Init+0x54>)
 80051e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80051ea:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <MX_I2C3_Init+0x50>)
 80051ec:	4a12      	ldr	r2, [pc, #72]	@ (8005238 <MX_I2C3_Init+0x58>)
 80051ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <MX_I2C3_Init+0x50>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80051f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005230 <MX_I2C3_Init+0x50>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <MX_I2C3_Init+0x50>)
 80051fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005202:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005204:	4b0a      	ldr	r3, [pc, #40]	@ (8005230 <MX_I2C3_Init+0x50>)
 8005206:	2200      	movs	r2, #0
 8005208:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800520a:	4b09      	ldr	r3, [pc, #36]	@ (8005230 <MX_I2C3_Init+0x50>)
 800520c:	2200      	movs	r2, #0
 800520e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <MX_I2C3_Init+0x50>)
 8005212:	2200      	movs	r2, #0
 8005214:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005216:	4b06      	ldr	r3, [pc, #24]	@ (8005230 <MX_I2C3_Init+0x50>)
 8005218:	2200      	movs	r2, #0
 800521a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800521c:	4804      	ldr	r0, [pc, #16]	@ (8005230 <MX_I2C3_Init+0x50>)
 800521e:	f001 f9ff 	bl	8006620 <HAL_I2C_Init>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005228:	f000 f932 	bl	8005490 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20000520 	.word	0x20000520
 8005234:	40005c00 	.word	0x40005c00
 8005238:	000186a0 	.word	0x000186a0

0800523c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08e      	sub	sp, #56	@ 0x38
 8005240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]
 800524c:	609a      	str	r2, [r3, #8]
 800524e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005250:	f107 0320 	add.w	r3, r7, #32
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	615a      	str	r2, [r3, #20]
 800526a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800526c:	4b2d      	ldr	r3, [pc, #180]	@ (8005324 <MX_TIM2_Init+0xe8>)
 800526e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8005274:	4b2b      	ldr	r3, [pc, #172]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005276:	220f      	movs	r2, #15
 8005278:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527a:	4b2a      	ldr	r3, [pc, #168]	@ (8005324 <MX_TIM2_Init+0xe8>)
 800527c:	2200      	movs	r2, #0
 800527e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8005280:	4b28      	ldr	r3, [pc, #160]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005282:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005288:	4b26      	ldr	r3, [pc, #152]	@ (8005324 <MX_TIM2_Init+0xe8>)
 800528a:	2200      	movs	r2, #0
 800528c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800528e:	4b25      	ldr	r3, [pc, #148]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005294:	4823      	ldr	r0, [pc, #140]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005296:	f003 fc47 	bl	8008b28 <HAL_TIM_Base_Init>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80052a0:	f000 f8f6 	bl	8005490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052ae:	4619      	mov	r1, r3
 80052b0:	481c      	ldr	r0, [pc, #112]	@ (8005324 <MX_TIM2_Init+0xe8>)
 80052b2:	f003 fe6b 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80052bc:	f000 f8e8 	bl	8005490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80052c0:	4818      	ldr	r0, [pc, #96]	@ (8005324 <MX_TIM2_Init+0xe8>)
 80052c2:	f003 fc80 	bl	8008bc6 <HAL_TIM_PWM_Init>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80052cc:	f000 f8e0 	bl	8005490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052d0:	2300      	movs	r3, #0
 80052d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80052d8:	f107 0320 	add.w	r3, r7, #32
 80052dc:	4619      	mov	r1, r3
 80052de:	4811      	ldr	r0, [pc, #68]	@ (8005324 <MX_TIM2_Init+0xe8>)
 80052e0:	f004 fa38 	bl	8009754 <HAL_TIMEx_MasterConfigSynchronization>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80052ea:	f000 f8d1 	bl	8005490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052ee:	2360      	movs	r3, #96	@ 0x60
 80052f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052fe:	1d3b      	adds	r3, r7, #4
 8005300:	2208      	movs	r2, #8
 8005302:	4619      	mov	r1, r3
 8005304:	4807      	ldr	r0, [pc, #28]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005306:	f003 fd7f 	bl	8008e08 <HAL_TIM_PWM_ConfigChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8005310:	f000 f8be 	bl	8005490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005314:	4803      	ldr	r0, [pc, #12]	@ (8005324 <MX_TIM2_Init+0xe8>)
 8005316:	f000 f9a7 	bl	8005668 <HAL_TIM_MspPostInit>

}
 800531a:	bf00      	nop
 800531c:	3738      	adds	r7, #56	@ 0x38
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000574 	.word	0x20000574

08005328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800532c:	4b11      	ldr	r3, [pc, #68]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 800532e:	4a12      	ldr	r2, [pc, #72]	@ (8005378 <MX_USART1_UART_Init+0x50>)
 8005330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 8005334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800533a:	4b0e      	ldr	r3, [pc, #56]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 8005348:	2200      	movs	r2, #0
 800534a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800534c:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 800534e:	220c      	movs	r2, #12
 8005350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 8005354:	2200      	movs	r2, #0
 8005356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005358:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 800535a:	2200      	movs	r2, #0
 800535c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800535e:	4805      	ldr	r0, [pc, #20]	@ (8005374 <MX_USART1_UART_Init+0x4c>)
 8005360:	f004 fa74 	bl	800984c <HAL_UART_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800536a:	f000 f891 	bl	8005490 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	200005bc 	.word	0x200005bc
 8005378:	40011000 	.word	0x40011000

0800537c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	@ 0x28
 8005380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	609a      	str	r2, [r3, #8]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	4b3b      	ldr	r3, [pc, #236]	@ (8005484 <MX_GPIO_Init+0x108>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	4a3a      	ldr	r2, [pc, #232]	@ (8005484 <MX_GPIO_Init+0x108>)
 800539c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b34      	ldr	r3, [pc, #208]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	4a33      	ldr	r2, [pc, #204]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80053da:	4b2a      	ldr	r3, [pc, #168]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	607b      	str	r3, [r7, #4]
 80053ea:	4b26      	ldr	r3, [pc, #152]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	4a25      	ldr	r2, [pc, #148]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80053f6:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <MX_GPIO_Init+0x108>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	607b      	str	r3, [r7, #4]
 8005400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin, GPIO_PIN_RESET);
 8005402:	2200      	movs	r2, #0
 8005404:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8005408:	481f      	ldr	r0, [pc, #124]	@ (8005488 <MX_GPIO_Init+0x10c>)
 800540a:	f001 f8cb 	bl	80065a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800540e:	2200      	movs	r2, #0
 8005410:	2110      	movs	r1, #16
 8005412:	481e      	ldr	r0, [pc, #120]	@ (800548c <MX_GPIO_Init+0x110>)
 8005414:	f001 f8c6 	bl	80065a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Step1_Pin Step2_Pin Step3_Pin Step4_Pin */
  GPIO_InitStruct.Pin = Step1_Pin|Step2_Pin|Step3_Pin|Step4_Pin;
 8005418:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800541c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800541e:	2301      	movs	r3, #1
 8005420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005426:	2300      	movs	r3, #0
 8005428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800542a:	f107 0314 	add.w	r3, r7, #20
 800542e:	4619      	mov	r1, r3
 8005430:	4815      	ldr	r0, [pc, #84]	@ (8005488 <MX_GPIO_Init+0x10c>)
 8005432:	f000 ff3b 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005436:	2310      	movs	r3, #16
 8005438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800543a:	2301      	movs	r3, #1
 800543c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4619      	mov	r1, r3
 800544c:	480f      	ldr	r0, [pc, #60]	@ (800548c <MX_GPIO_Init+0x110>)
 800544e:	f000 ff2d 	bl	80062ac <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Sensor_Pin */
  GPIO_InitStruct.Pin = IR_Sensor_Pin;
 8005452:	2320      	movs	r3, #32
 8005454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005456:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800545a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Sensor_GPIO_Port, &GPIO_InitStruct);
 8005460:	f107 0314 	add.w	r3, r7, #20
 8005464:	4619      	mov	r1, r3
 8005466:	4809      	ldr	r0, [pc, #36]	@ (800548c <MX_GPIO_Init+0x110>)
 8005468:	f000 ff20 	bl	80062ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800546c:	2200      	movs	r2, #0
 800546e:	2100      	movs	r1, #0
 8005470:	2017      	movs	r0, #23
 8005472:	f000 fc44 	bl	8005cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005476:	2017      	movs	r0, #23
 8005478:	f000 fc5d 	bl	8005d36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800547c:	bf00      	nop
 800547e:	3728      	adds	r7, #40	@ 0x28
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40023800 	.word	0x40023800
 8005488:	40020800 	.word	0x40020800
 800548c:	40020400 	.word	0x40020400

08005490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005494:	b672      	cpsid	i
}
 8005496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <Error_Handler+0x8>

0800549c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	4a0f      	ldr	r2, [pc, #60]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80054b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80054b2:	4b0d      	ldr	r3, [pc, #52]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	2300      	movs	r3, #0
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_MspInit+0x4c>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40023800 	.word	0x40023800

080054ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	@ 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a42      	ldr	r2, [pc, #264]	@ (8005614 <HAL_I2C_MspInit+0x128>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d12c      	bne.n	8005568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	4b41      	ldr	r3, [pc, #260]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	4a40      	ldr	r2, [pc, #256]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6313      	str	r3, [r2, #48]	@ 0x30
 800551e:	4b3e      	ldr	r3, [pc, #248]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800552a:	23c0      	movs	r3, #192	@ 0xc0
 800552c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800552e:	2312      	movs	r3, #18
 8005530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005536:	2303      	movs	r3, #3
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800553a:	2304      	movs	r3, #4
 800553c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553e:	f107 031c 	add.w	r3, r7, #28
 8005542:	4619      	mov	r1, r3
 8005544:	4835      	ldr	r0, [pc, #212]	@ (800561c <HAL_I2C_MspInit+0x130>)
 8005546:	f000 feb1 	bl	80062ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	4b32      	ldr	r3, [pc, #200]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	4a31      	ldr	r2, [pc, #196]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005554:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005558:	6413      	str	r3, [r2, #64]	@ 0x40
 800555a:	4b2f      	ldr	r3, [pc, #188]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005566:	e050      	b.n	800560a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <HAL_I2C_MspInit+0x134>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d14b      	bne.n	800560a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	4b28      	ldr	r3, [pc, #160]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557a:	4a27      	ldr	r2, [pc, #156]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6313      	str	r3, [r2, #48]	@ 0x30
 8005582:	4b25      	ldr	r3, [pc, #148]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	4a20      	ldr	r2, [pc, #128]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	6313      	str	r3, [r2, #48]	@ 0x30
 800559e:	4b1e      	ldr	r3, [pc, #120]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055b0:	2312      	movs	r3, #18
 80055b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055b4:	2301      	movs	r3, #1
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055b8:	2303      	movs	r3, #3
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80055bc:	2304      	movs	r3, #4
 80055be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c0:	f107 031c 	add.w	r3, r7, #28
 80055c4:	4619      	mov	r1, r3
 80055c6:	4817      	ldr	r0, [pc, #92]	@ (8005624 <HAL_I2C_MspInit+0x138>)
 80055c8:	f000 fe70 	bl	80062ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055d2:	2312      	movs	r3, #18
 80055d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d6:	2301      	movs	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055da:	2303      	movs	r3, #3
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80055de:	2309      	movs	r3, #9
 80055e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e2:	f107 031c 	add.w	r3, r7, #28
 80055e6:	4619      	mov	r1, r3
 80055e8:	480c      	ldr	r0, [pc, #48]	@ (800561c <HAL_I2C_MspInit+0x130>)
 80055ea:	f000 fe5f 	bl	80062ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	4a08      	ldr	r2, [pc, #32]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 80055f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80055fe:	4b06      	ldr	r3, [pc, #24]	@ (8005618 <HAL_I2C_MspInit+0x12c>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
}
 800560a:	bf00      	nop
 800560c:	3730      	adds	r7, #48	@ 0x30
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40005400 	.word	0x40005400
 8005618:	40023800 	.word	0x40023800
 800561c:	40020400 	.word	0x40020400
 8005620:	40005c00 	.word	0x40005c00
 8005624:	40020000 	.word	0x40020000

08005628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005638:	d10d      	bne.n	8005656 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_TIM_Base_MspInit+0x3c>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	4a08      	ldr	r2, [pc, #32]	@ (8005664 <HAL_TIM_Base_MspInit+0x3c>)
 8005644:	f043 0301 	orr.w	r3, r3, #1
 8005648:	6413      	str	r3, [r2, #64]	@ 0x40
 800564a:	4b06      	ldr	r3, [pc, #24]	@ (8005664 <HAL_TIM_Base_MspInit+0x3c>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800

08005668 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005670:	f107 030c 	add.w	r3, r7, #12
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005688:	d11d      	bne.n	80056c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	4b10      	ldr	r3, [pc, #64]	@ (80056d0 <HAL_TIM_MspPostInit+0x68>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005692:	4a0f      	ldr	r2, [pc, #60]	@ (80056d0 <HAL_TIM_MspPostInit+0x68>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	6313      	str	r3, [r2, #48]	@ 0x30
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <HAL_TIM_MspPostInit+0x68>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 80056a6:	2304      	movs	r3, #4
 80056a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056aa:	2302      	movs	r3, #2
 80056ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056b6:	2301      	movs	r3, #1
 80056b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4619      	mov	r1, r3
 80056c0:	4804      	ldr	r0, [pc, #16]	@ (80056d4 <HAL_TIM_MspPostInit+0x6c>)
 80056c2:	f000 fdf3 	bl	80062ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80056c6:	bf00      	nop
 80056c8:	3720      	adds	r7, #32
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40020000 	.word	0x40020000

080056d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	@ 0x28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e0:	f107 0314 	add.w	r3, r7, #20
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a19      	ldr	r2, [pc, #100]	@ (800575c <HAL_UART_MspInit+0x84>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d12c      	bne.n	8005754 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <HAL_UART_MspInit+0x88>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	4a17      	ldr	r2, [pc, #92]	@ (8005760 <HAL_UART_MspInit+0x88>)
 8005704:	f043 0310 	orr.w	r3, r3, #16
 8005708:	6453      	str	r3, [r2, #68]	@ 0x44
 800570a:	4b15      	ldr	r3, [pc, #84]	@ (8005760 <HAL_UART_MspInit+0x88>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b11      	ldr	r3, [pc, #68]	@ (8005760 <HAL_UART_MspInit+0x88>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <HAL_UART_MspInit+0x88>)
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	6313      	str	r3, [r2, #48]	@ 0x30
 8005726:	4b0e      	ldr	r3, [pc, #56]	@ (8005760 <HAL_UART_MspInit+0x88>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005732:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005738:	2302      	movs	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005740:	2303      	movs	r3, #3
 8005742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005744:	2307      	movs	r3, #7
 8005746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005748:	f107 0314 	add.w	r3, r7, #20
 800574c:	4619      	mov	r1, r3
 800574e:	4805      	ldr	r0, [pc, #20]	@ (8005764 <HAL_UART_MspInit+0x8c>)
 8005750:	f000 fdac 	bl	80062ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005754:	bf00      	nop
 8005756:	3728      	adds	r7, #40	@ 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40011000 	.word	0x40011000
 8005760:	40023800 	.word	0x40023800
 8005764:	40020000 	.word	0x40020000

08005768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005768:	b480      	push	{r7}
 800576a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800576c:	bf00      	nop
 800576e:	e7fd      	b.n	800576c <NMI_Handler+0x4>

08005770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005774:	bf00      	nop
 8005776:	e7fd      	b.n	8005774 <HardFault_Handler+0x4>

08005778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800577c:	bf00      	nop
 800577e:	e7fd      	b.n	800577c <MemManage_Handler+0x4>

08005780 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <BusFault_Handler+0x4>

08005788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800578c:	bf00      	nop
 800578e:	e7fd      	b.n	800578c <UsageFault_Handler+0x4>

08005790 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005794:	bf00      	nop
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800579e:	b480      	push	{r7}
 80057a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057a2:	bf00      	nop
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057c0:	f000 f97e 	bl	8005ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  msCounter++;
 80057c4:	4b03      	ldr	r3, [pc, #12]	@ (80057d4 <SysTick_Handler+0x18>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3301      	adds	r3, #1
 80057ca:	4a02      	ldr	r2, [pc, #8]	@ (80057d4 <SysTick_Handler+0x18>)
 80057cc:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000b20 	.word	0x20000b20

080057d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	uint32_t current_time = HAL_GetTick(); // Get current system time in milliseconds
 80057de:	f000 f983 	bl	8005ae8 <HAL_GetTick>
 80057e2:	6078      	str	r0, [r7, #4]

	// Check if the interrupt is within the debounce period
	if (current_time - last_interrupt_time > 5)  // 10 ms debounce time
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <EXTI9_5_IRQHandler+0x38>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d907      	bls.n	8005800 <EXTI9_5_IRQHandler+0x28>
	{
		pulse_count++;   // Increment pulse count only if outside debounce period
 80057f0:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <EXTI9_5_IRQHandler+0x3c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a07      	ldr	r2, [pc, #28]	@ (8005814 <EXTI9_5_IRQHandler+0x3c>)
 80057f8:	6013      	str	r3, [r2, #0]
		last_interrupt_time = current_time; // Update last interrupt time
 80057fa:	4a05      	ldr	r2, [pc, #20]	@ (8005810 <EXTI9_5_IRQHandler+0x38>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IR_Sensor_Pin);
 8005800:	2020      	movs	r0, #32
 8005802:	f000 fee9 	bl	80065d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000b28 	.word	0x20000b28
 8005814:	20000864 	.word	0x20000864

08005818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
  return 1;
 800581c:	2301      	movs	r3, #1
}
 800581e:	4618      	mov	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_kill>:

int _kill(int pid, int sig)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005832:	f006 fd49 	bl	800c2c8 <__errno>
 8005836:	4603      	mov	r3, r0
 8005838:	2216      	movs	r2, #22
 800583a:	601a      	str	r2, [r3, #0]
  return -1;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <_exit>:

void _exit (int status)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005850:	f04f 31ff 	mov.w	r1, #4294967295
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ffe7 	bl	8005828 <_kill>
  while (1) {}    /* Make sure we hang here */
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <_exit+0x12>

0800585e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e00a      	b.n	8005886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005870:	f3af 8000 	nop.w
 8005874:	4601      	mov	r1, r0
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	60ba      	str	r2, [r7, #8]
 800587c:	b2ca      	uxtb	r2, r1
 800587e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	3301      	adds	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	dbf0      	blt.n	8005870 <_read+0x12>
  }

  return len;
 800588e:	687b      	ldr	r3, [r7, #4]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e009      	b.n	80058be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	60ba      	str	r2, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	3301      	adds	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	dbf1      	blt.n	80058aa <_write+0x12>
  }
  return len;
 80058c6:	687b      	ldr	r3, [r7, #4]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <_close>:

int _close(int file)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058f8:	605a      	str	r2, [r3, #4]
  return 0;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_isatty>:

int _isatty(int file)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005910:	2301      	movs	r3, #1
}
 8005912:	4618      	mov	r0, r3
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005940:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <_sbrk+0x5c>)
 8005942:	4b15      	ldr	r3, [pc, #84]	@ (8005998 <_sbrk+0x60>)
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800594c:	4b13      	ldr	r3, [pc, #76]	@ (800599c <_sbrk+0x64>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <_sbrk+0x64>)
 8005956:	4a12      	ldr	r2, [pc, #72]	@ (80059a0 <_sbrk+0x68>)
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800595a:	4b10      	ldr	r3, [pc, #64]	@ (800599c <_sbrk+0x64>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d207      	bcs.n	8005978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005968:	f006 fcae 	bl	800c2c8 <__errno>
 800596c:	4603      	mov	r3, r0
 800596e:	220c      	movs	r2, #12
 8005970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e009      	b.n	800598c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005978:	4b08      	ldr	r3, [pc, #32]	@ (800599c <_sbrk+0x64>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800597e:	4b07      	ldr	r3, [pc, #28]	@ (800599c <_sbrk+0x64>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	4a05      	ldr	r2, [pc, #20]	@ (800599c <_sbrk+0x64>)
 8005988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800598a:	68fb      	ldr	r3, [r7, #12]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20040000 	.word	0x20040000
 8005998:	00000400 	.word	0x00000400
 800599c:	20000b2c 	.word	0x20000b2c
 80059a0:	20000ca0 	.word	0x20000ca0

080059a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <SystemInit+0x20>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ae:	4a05      	ldr	r2, [pc, #20]	@ (80059c4 <SystemInit+0x20>)
 80059b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80059c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80059cc:	f7ff ffea 	bl	80059a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059d0:	480c      	ldr	r0, [pc, #48]	@ (8005a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059d2:	490d      	ldr	r1, [pc, #52]	@ (8005a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059d4:	4a0d      	ldr	r2, [pc, #52]	@ (8005a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059d8:	e002      	b.n	80059e0 <LoopCopyDataInit>

080059da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059de:	3304      	adds	r3, #4

080059e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059e4:	d3f9      	bcc.n	80059da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059ec:	e001      	b.n	80059f2 <LoopFillZerobss>

080059ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059f0:	3204      	adds	r2, #4

080059f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059f4:	d3fb      	bcc.n	80059ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059f6:	f006 fc6d 	bl	800c2d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059fa:	f7ff fa5f 	bl	8004ebc <main>
  bx  lr    
 80059fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005a00:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8005a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a08:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8005a0c:	080103a8 	.word	0x080103a8
  ldr r2, =_sbss
 8005a10:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8005a14:	20000ca0 	.word	0x20000ca0

08005a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a18:	e7fe      	b.n	8005a18 <ADC_IRQHandler>
	...

08005a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a20:	4b0e      	ldr	r3, [pc, #56]	@ (8005a5c <HAL_Init+0x40>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0d      	ldr	r2, [pc, #52]	@ (8005a5c <HAL_Init+0x40>)
 8005a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <HAL_Init+0x40>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	@ (8005a5c <HAL_Init+0x40>)
 8005a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a38:	4b08      	ldr	r3, [pc, #32]	@ (8005a5c <HAL_Init+0x40>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	@ (8005a5c <HAL_Init+0x40>)
 8005a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a44:	2003      	movs	r0, #3
 8005a46:	f000 f94f 	bl	8005ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a4a:	200f      	movs	r0, #15
 8005a4c:	f000 f808 	bl	8005a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a50:	f7ff fd24 	bl	800549c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00

08005a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <HAL_InitTick+0x54>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b12      	ldr	r3, [pc, #72]	@ (8005ab8 <HAL_InitTick+0x58>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f967 	bl	8005d52 <HAL_SYSTICK_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e00e      	b.n	8005aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b0f      	cmp	r3, #15
 8005a92:	d80a      	bhi.n	8005aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a94:	2200      	movs	r2, #0
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	f000 f92f 	bl	8005cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005aa0:	4a06      	ldr	r2, [pc, #24]	@ (8005abc <HAL_InitTick+0x5c>)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	200000cc 	.word	0x200000cc
 8005ab8:	200000d4 	.word	0x200000d4
 8005abc:	200000d0 	.word	0x200000d0

08005ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	@ (8005ae0 <HAL_IncTick+0x20>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <HAL_IncTick+0x24>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4413      	add	r3, r2
 8005ad0:	4a04      	ldr	r2, [pc, #16]	@ (8005ae4 <HAL_IncTick+0x24>)
 8005ad2:	6013      	str	r3, [r2, #0]
}
 8005ad4:	bf00      	nop
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	200000d4 	.word	0x200000d4
 8005ae4:	20000b30 	.word	0x20000b30

08005ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return uwTick;
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <HAL_GetTick+0x14>)
 8005aee:	681b      	ldr	r3, [r3, #0]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	20000b30 	.word	0x20000b30

08005b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7ff ffee 	bl	8005ae8 <HAL_GetTick>
 8005b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b18:	d005      	beq.n	8005b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_Delay+0x44>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b26:	bf00      	nop
 8005b28:	f7ff ffde 	bl	8005ae8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d8f7      	bhi.n	8005b28 <HAL_Delay+0x28>
  {
  }
}
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200000d4 	.word	0x200000d4

08005b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b58:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b64:	4013      	ands	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b7a:	4a04      	ldr	r2, [pc, #16]	@ (8005b8c <__NVIC_SetPriorityGrouping+0x44>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	60d3      	str	r3, [r2, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000ed00 	.word	0xe000ed00

08005b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	f003 0307 	and.w	r3, r3, #7
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	e000ed00 	.word	0xe000ed00

08005bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	db0b      	blt.n	8005bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f003 021f 	and.w	r2, r3, #31
 8005bc4:	4907      	ldr	r1, [pc, #28]	@ (8005be4 <__NVIC_EnableIRQ+0x38>)
 8005bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2001      	movs	r0, #1
 8005bce:	fa00 f202 	lsl.w	r2, r0, r2
 8005bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	e000e100 	.word	0xe000e100

08005be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	db0a      	blt.n	8005c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	490c      	ldr	r1, [pc, #48]	@ (8005c34 <__NVIC_SetPriority+0x4c>)
 8005c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c06:	0112      	lsls	r2, r2, #4
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c10:	e00a      	b.n	8005c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4908      	ldr	r1, [pc, #32]	@ (8005c38 <__NVIC_SetPriority+0x50>)
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	3b04      	subs	r3, #4
 8005c20:	0112      	lsls	r2, r2, #4
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	761a      	strb	r2, [r3, #24]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	e000e100 	.word	0xe000e100
 8005c38:	e000ed00 	.word	0xe000ed00

08005c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	@ 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f1c3 0307 	rsb	r3, r3, #7
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	bf28      	it	cs
 8005c5a:	2304      	movcs	r3, #4
 8005c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d902      	bls.n	8005c6c <NVIC_EncodePriority+0x30>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	3b03      	subs	r3, #3
 8005c6a:	e000      	b.n	8005c6e <NVIC_EncodePriority+0x32>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c70:	f04f 32ff 	mov.w	r2, #4294967295
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43da      	mvns	r2, r3
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	401a      	ands	r2, r3
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c84:	f04f 31ff 	mov.w	r1, #4294967295
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8e:	43d9      	mvns	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c94:	4313      	orrs	r3, r2
         );
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3724      	adds	r7, #36	@ 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cb4:	d301      	bcc.n	8005cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e00f      	b.n	8005cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cc2:	210f      	movs	r1, #15
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	f7ff ff8e 	bl	8005be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ccc:	4b05      	ldr	r3, [pc, #20]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cd2:	4b04      	ldr	r3, [pc, #16]	@ (8005ce4 <SysTick_Config+0x40>)
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000e010 	.word	0xe000e010

08005ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff29 	bl	8005b48 <__NVIC_SetPriorityGrouping>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
 8005d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d10:	f7ff ff3e 	bl	8005b90 <__NVIC_GetPriorityGrouping>
 8005d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	f7ff ff8e 	bl	8005c3c <NVIC_EncodePriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff ff5d 	bl	8005be8 <__NVIC_SetPriority>
}
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b082      	sub	sp, #8
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff ff31 	bl	8005bac <__NVIC_EnableIRQ>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ffa2 	bl	8005ca4 <SysTick_Config>
 8005d60:	4603      	mov	r3, r0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d78:	f7ff feb6 	bl	8005ae8 <HAL_GetTick>
 8005d7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d008      	beq.n	8005d9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2280      	movs	r2, #128	@ 0x80
 8005d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e052      	b.n	8005e42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0216 	bic.w	r2, r2, #22
 8005daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005dba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <HAL_DMA_Abort+0x62>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0208 	bic.w	r2, r2, #8
 8005dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dec:	e013      	b.n	8005e16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dee:	f7ff fe7b 	bl	8005ae8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d90c      	bls.n	8005e16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2203      	movs	r2, #3
 8005e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e015      	b.n	8005e42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e4      	bne.n	8005dee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e28:	223f      	movs	r2, #63	@ 0x3f
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d004      	beq.n	8005e68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2280      	movs	r2, #128	@ 0x80
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e00c      	b.n	8005e82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ea2:	4b23      	ldr	r3, [pc, #140]	@ (8005f30 <HAL_FLASH_Program+0xa0>)
 8005ea4:	7e1b      	ldrb	r3, [r3, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_FLASH_Program+0x1e>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e03b      	b.n	8005f26 <HAL_FLASH_Program+0x96>
 8005eae:	4b20      	ldr	r3, [pc, #128]	@ (8005f30 <HAL_FLASH_Program+0xa0>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005eb4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005eb8:	f000 f870 	bl	8005f9c <FLASH_WaitForLastOperation>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d12b      	bne.n	8005f1e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d105      	bne.n	8005ed8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ecc:	783b      	ldrb	r3, [r7, #0]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68b8      	ldr	r0, [r7, #8]
 8005ed2:	f000 f91b 	bl	800610c <FLASH_Program_Byte>
 8005ed6:	e016      	b.n	8005f06 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005ede:	883b      	ldrh	r3, [r7, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	68b8      	ldr	r0, [r7, #8]
 8005ee4:	f000 f8ee 	bl	80060c4 <FLASH_Program_HalfWord>
 8005ee8:	e00d      	b.n	8005f06 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d105      	bne.n	8005efc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f000 f8c3 	bl	8006080 <FLASH_Program_Word>
 8005efa:	e004      	b.n	8005f06 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f00:	68b8      	ldr	r0, [r7, #8]
 8005f02:	f000 f88b 	bl	800601c <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f0a:	f000 f847 	bl	8005f9c <FLASH_WaitForLastOperation>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005f12:	4b08      	ldr	r3, [pc, #32]	@ (8005f34 <HAL_FLASH_Program+0xa4>)
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	4a07      	ldr	r2, [pc, #28]	@ (8005f34 <HAL_FLASH_Program+0xa4>)
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f1e:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <HAL_FLASH_Program+0xa0>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	761a      	strb	r2, [r3, #24]

  return status;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000b34 	.word	0x20000b34
 8005f34:	40023c00 	.word	0x40023c00

08005f38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f42:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_FLASH_Unlock+0x38>)
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da0b      	bge.n	8005f62 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f4a:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <HAL_FLASH_Unlock+0x38>)
 8005f4c:	4a09      	ldr	r2, [pc, #36]	@ (8005f74 <HAL_FLASH_Unlock+0x3c>)
 8005f4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f50:	4b07      	ldr	r3, [pc, #28]	@ (8005f70 <HAL_FLASH_Unlock+0x38>)
 8005f52:	4a09      	ldr	r2, [pc, #36]	@ (8005f78 <HAL_FLASH_Unlock+0x40>)
 8005f54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f56:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <HAL_FLASH_Unlock+0x38>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	da01      	bge.n	8005f62 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f62:	79fb      	ldrb	r3, [r7, #7]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40023c00 	.word	0x40023c00
 8005f74:	45670123 	.word	0x45670123
 8005f78:	cdef89ab 	.word	0xcdef89ab

08005f7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <HAL_FLASH_Lock+0x1c>)
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	4a04      	ldr	r2, [pc, #16]	@ (8005f98 <HAL_FLASH_Lock+0x1c>)
 8005f86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f8a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40023c00 	.word	0x40023c00

08005f9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8006014 <FLASH_WaitForLastOperation+0x78>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005fae:	f7ff fd9b 	bl	8005ae8 <HAL_GetTick>
 8005fb2:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005fb4:	e010      	b.n	8005fd8 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	d00c      	beq.n	8005fd8 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <FLASH_WaitForLastOperation+0x38>
 8005fc4:	f7ff fd90 	bl	8005ae8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d201      	bcs.n	8005fd8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e019      	b.n	800600c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <FLASH_WaitForLastOperation+0x7c>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e8      	bne.n	8005fb6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <FLASH_WaitForLastOperation+0x7c>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ff0:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <FLASH_WaitForLastOperation+0x7c>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005ff6:	4b08      	ldr	r3, [pc, #32]	@ (8006018 <FLASH_WaitForLastOperation+0x7c>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006002:	f000 f8a5 	bl	8006150 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800600a:	2300      	movs	r3, #0

}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000b34 	.word	0x20000b34
 8006018:	40023c00 	.word	0x40023c00

0800601c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006028:	4b14      	ldr	r3, [pc, #80]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	4a13      	ldr	r2, [pc, #76]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 800602e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006034:	4b11      	ldr	r3, [pc, #68]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	4a10      	ldr	r2, [pc, #64]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 800603a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800603e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006040:	4b0e      	ldr	r3, [pc, #56]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	4a0d      	ldr	r2, [pc, #52]	@ (800607c <FLASH_Program_DoubleWord+0x60>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006052:	f3bf 8f6f 	isb	sy
}
 8006056:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8006058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	000a      	movs	r2, r1
 8006066:	2300      	movs	r3, #0
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	3104      	adds	r1, #4
 800606c:	4613      	mov	r3, r2
 800606e:	600b      	str	r3, [r1, #0]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40023c00 	.word	0x40023c00

08006080 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <FLASH_Program_Word+0x40>)
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <FLASH_Program_Word+0x40>)
 8006090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006094:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <FLASH_Program_Word+0x40>)
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	4a09      	ldr	r2, [pc, #36]	@ (80060c0 <FLASH_Program_Word+0x40>)
 800609c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <FLASH_Program_Word+0x40>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4a06      	ldr	r2, [pc, #24]	@ (80060c0 <FLASH_Program_Word+0x40>)
 80060a8:	f043 0301 	orr.w	r3, r3, #1
 80060ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40023c00 	.word	0x40023c00

080060c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a0c      	ldr	r2, [pc, #48]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060e8:	4b07      	ldr	r3, [pc, #28]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	4a06      	ldr	r2, [pc, #24]	@ (8006108 <FLASH_Program_HalfWord+0x44>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	801a      	strh	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40023c00 	.word	0x40023c00

0800610c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006118:	4b0c      	ldr	r3, [pc, #48]	@ (800614c <FLASH_Program_Byte+0x40>)
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	4a0b      	ldr	r2, [pc, #44]	@ (800614c <FLASH_Program_Byte+0x40>)
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006124:	4b09      	ldr	r3, [pc, #36]	@ (800614c <FLASH_Program_Byte+0x40>)
 8006126:	4a09      	ldr	r2, [pc, #36]	@ (800614c <FLASH_Program_Byte+0x40>)
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800612c:	4b07      	ldr	r3, [pc, #28]	@ (800614c <FLASH_Program_Byte+0x40>)
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	4a06      	ldr	r2, [pc, #24]	@ (800614c <FLASH_Program_Byte+0x40>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	701a      	strb	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40023c00 	.word	0x40023c00

08006150 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006154:	4b2f      	ldr	r3, [pc, #188]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006160:	4b2d      	ldr	r3, [pc, #180]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f043 0310 	orr.w	r3, r3, #16
 8006168:	4a2b      	ldr	r2, [pc, #172]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 800616a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800616c:	4b29      	ldr	r3, [pc, #164]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 800616e:	2210      	movs	r2, #16
 8006170:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006172:	4b28      	ldr	r3, [pc, #160]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d008      	beq.n	8006190 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800617e:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f043 0308 	orr.w	r3, r3, #8
 8006186:	4a24      	ldr	r2, [pc, #144]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 8006188:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800618a:	4b22      	ldr	r3, [pc, #136]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 800618c:	2220      	movs	r2, #32
 800618e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006190:	4b20      	ldr	r3, [pc, #128]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d008      	beq.n	80061ae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800619c:	4b1e      	ldr	r3, [pc, #120]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f043 0304 	orr.w	r3, r3, #4
 80061a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061a6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80061a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061aa:	2240      	movs	r2, #64	@ 0x40
 80061ac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80061ae:	4b19      	ldr	r3, [pc, #100]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80061ba:	4b17      	ldr	r3, [pc, #92]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f043 0302 	orr.w	r3, r3, #2
 80061c2:	4a15      	ldr	r2, [pc, #84]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061c4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061c8:	2280      	movs	r2, #128	@ 0x80
 80061ca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80061cc:	4b11      	ldr	r3, [pc, #68]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d009      	beq.n	80061ec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80061d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061e2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061ea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80061f8:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f043 0320 	orr.w	r3, r3, #32
 8006200:	4a05      	ldr	r2, [pc, #20]	@ (8006218 <FLASH_SetErrorCode+0xc8>)
 8006202:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006204:	4b03      	ldr	r3, [pc, #12]	@ (8006214 <FLASH_SetErrorCode+0xc4>)
 8006206:	2202      	movs	r2, #2
 8006208:	60da      	str	r2, [r3, #12]
  }
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40023c00 	.word	0x40023c00
 8006218:	20000b34 	.word	0x20000b34

0800621c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d102      	bne.n	8006238 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	e010      	b.n	800625a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d103      	bne.n	8006246 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800623e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e009      	b.n	800625a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d103      	bne.n	8006254 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800624c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e002      	b.n	800625a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006254:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006258:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800625a:	4b13      	ldr	r3, [pc, #76]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	4a12      	ldr	r2, [pc, #72]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006264:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	490f      	ldr	r1, [pc, #60]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	4a0c      	ldr	r2, [pc, #48]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006278:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800627c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4313      	orrs	r3, r2
 8006288:	4a07      	ldr	r2, [pc, #28]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006290:	4b05      	ldr	r3, [pc, #20]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4a04      	ldr	r2, [pc, #16]	@ (80062a8 <FLASH_Erase_Sector+0x8c>)
 8006296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629a:	6113      	str	r3, [r2, #16]
}
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40023c00 	.word	0x40023c00

080062ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	@ 0x24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	e153      	b.n	8006570 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062c8:	2201      	movs	r2, #1
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4013      	ands	r3, r2
 80062da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	f040 8142 	bne.w	800656a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d005      	beq.n	80062fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d130      	bne.n	8006360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	005b      	lsls	r3, r3, #1
 8006308:	2203      	movs	r2, #3
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4013      	ands	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006334:	2201      	movs	r2, #1
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 0201 	and.w	r2, r3, #1
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b03      	cmp	r3, #3
 800636a:	d017      	beq.n	800639c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	2203      	movs	r2, #3
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4313      	orrs	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d123      	bne.n	80063f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	08da      	lsrs	r2, r3, #3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3208      	adds	r2, #8
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	220f      	movs	r2, #15
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	08da      	lsrs	r2, r3, #3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3208      	adds	r2, #8
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	2203      	movs	r2, #3
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	43db      	mvns	r3, r3
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4013      	ands	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f003 0203 	and.w	r2, r3, #3
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	4313      	orrs	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 809c 	beq.w	800656a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	4b54      	ldr	r3, [pc, #336]	@ (8006588 <HAL_GPIO_Init+0x2dc>)
 8006438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643a:	4a53      	ldr	r2, [pc, #332]	@ (8006588 <HAL_GPIO_Init+0x2dc>)
 800643c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006440:	6453      	str	r3, [r2, #68]	@ 0x44
 8006442:	4b51      	ldr	r3, [pc, #324]	@ (8006588 <HAL_GPIO_Init+0x2dc>)
 8006444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800644e:	4a4f      	ldr	r2, [pc, #316]	@ (800658c <HAL_GPIO_Init+0x2e0>)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	3302      	adds	r3, #2
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	220f      	movs	r2, #15
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4013      	ands	r3, r2
 8006470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a46      	ldr	r2, [pc, #280]	@ (8006590 <HAL_GPIO_Init+0x2e4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_GPIO_Init+0x1f6>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a45      	ldr	r2, [pc, #276]	@ (8006594 <HAL_GPIO_Init+0x2e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00d      	beq.n	800649e <HAL_GPIO_Init+0x1f2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a44      	ldr	r2, [pc, #272]	@ (8006598 <HAL_GPIO_Init+0x2ec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d007      	beq.n	800649a <HAL_GPIO_Init+0x1ee>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a43      	ldr	r2, [pc, #268]	@ (800659c <HAL_GPIO_Init+0x2f0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_GPIO_Init+0x1ea>
 8006492:	2303      	movs	r3, #3
 8006494:	e006      	b.n	80064a4 <HAL_GPIO_Init+0x1f8>
 8006496:	2307      	movs	r3, #7
 8006498:	e004      	b.n	80064a4 <HAL_GPIO_Init+0x1f8>
 800649a:	2302      	movs	r3, #2
 800649c:	e002      	b.n	80064a4 <HAL_GPIO_Init+0x1f8>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <HAL_GPIO_Init+0x1f8>
 80064a2:	2300      	movs	r3, #0
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	f002 0203 	and.w	r2, r2, #3
 80064aa:	0092      	lsls	r2, r2, #2
 80064ac:	4093      	lsls	r3, r2
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064b4:	4935      	ldr	r1, [pc, #212]	@ (800658c <HAL_GPIO_Init+0x2e0>)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	3302      	adds	r3, #2
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064c2:	4b37      	ldr	r3, [pc, #220]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064e6:	4a2e      	ldr	r2, [pc, #184]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064ec:	4b2c      	ldr	r3, [pc, #176]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006510:	4a23      	ldr	r2, [pc, #140]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006516:	4b22      	ldr	r3, [pc, #136]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	43db      	mvns	r3, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800653a:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006540:	4b17      	ldr	r3, [pc, #92]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006564:	4a0e      	ldr	r2, [pc, #56]	@ (80065a0 <HAL_GPIO_Init+0x2f4>)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	3301      	adds	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	f67f aea8 	bls.w	80062c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	3724      	adds	r7, #36	@ 0x24
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800
 800658c:	40013800 	.word	0x40013800
 8006590:	40020000 	.word	0x40020000
 8006594:	40020400 	.word	0x40020400
 8006598:	40020800 	.word	0x40020800
 800659c:	40020c00 	.word	0x40020c00
 80065a0:	40013c00 	.word	0x40013c00

080065a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	807b      	strh	r3, [r7, #2]
 80065b0:	4613      	mov	r3, r2
 80065b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065b4:	787b      	ldrb	r3, [r7, #1]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ba:	887a      	ldrh	r2, [r7, #2]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065c0:	e003      	b.n	80065ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065c2:	887b      	ldrh	r3, [r7, #2]
 80065c4:	041a      	lsls	r2, r3, #16
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	619a      	str	r2, [r3, #24]
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065e4:	695a      	ldr	r2, [r3, #20]
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d006      	beq.n	80065fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065ee:	4a05      	ldr	r2, [pc, #20]	@ (8006604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065f0:	88fb      	ldrh	r3, [r7, #6]
 80065f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 f806 	bl	8006608 <HAL_GPIO_EXTI_Callback>
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40013c00 	.word	0x40013c00

08006608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e12b      	b.n	800688a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7fe ff50 	bl	80054ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2224      	movs	r2, #36	@ 0x24
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006672:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006682:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006684:	f001 ffa4 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 8006688:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4a81      	ldr	r2, [pc, #516]	@ (8006894 <HAL_I2C_Init+0x274>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d807      	bhi.n	80066a4 <HAL_I2C_Init+0x84>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4a80      	ldr	r2, [pc, #512]	@ (8006898 <HAL_I2C_Init+0x278>)
 8006698:	4293      	cmp	r3, r2
 800669a:	bf94      	ite	ls
 800669c:	2301      	movls	r3, #1
 800669e:	2300      	movhi	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	e006      	b.n	80066b2 <HAL_I2C_Init+0x92>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a7d      	ldr	r2, [pc, #500]	@ (800689c <HAL_I2C_Init+0x27c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	bf94      	ite	ls
 80066ac:	2301      	movls	r3, #1
 80066ae:	2300      	movhi	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e0e7      	b.n	800688a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4a78      	ldr	r2, [pc, #480]	@ (80068a0 <HAL_I2C_Init+0x280>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	0c9b      	lsrs	r3, r3, #18
 80066c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	4a6a      	ldr	r2, [pc, #424]	@ (8006894 <HAL_I2C_Init+0x274>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d802      	bhi.n	80066f4 <HAL_I2C_Init+0xd4>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3301      	adds	r3, #1
 80066f2:	e009      	b.n	8006708 <HAL_I2C_Init+0xe8>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	4a69      	ldr	r2, [pc, #420]	@ (80068a4 <HAL_I2C_Init+0x284>)
 8006700:	fba2 2303 	umull	r2, r3, r2, r3
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	3301      	adds	r3, #1
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	430b      	orrs	r3, r1
 800670e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800671a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	495c      	ldr	r1, [pc, #368]	@ (8006894 <HAL_I2C_Init+0x274>)
 8006724:	428b      	cmp	r3, r1
 8006726:	d819      	bhi.n	800675c <HAL_I2C_Init+0x13c>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	1e59      	subs	r1, r3, #1
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	fbb1 f3f3 	udiv	r3, r1, r3
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800673c:	400b      	ands	r3, r1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_I2C_Init+0x138>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1e59      	subs	r1, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006750:	3301      	adds	r3, #1
 8006752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006756:	e051      	b.n	80067fc <HAL_I2C_Init+0x1dc>
 8006758:	2304      	movs	r3, #4
 800675a:	e04f      	b.n	80067fc <HAL_I2C_Init+0x1dc>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d111      	bne.n	8006788 <HAL_I2C_Init+0x168>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1e58      	subs	r0, r3, #1
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6859      	ldr	r1, [r3, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	440b      	add	r3, r1
 8006772:	fbb0 f3f3 	udiv	r3, r0, r3
 8006776:	3301      	adds	r3, #1
 8006778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800677c:	2b00      	cmp	r3, #0
 800677e:	bf0c      	ite	eq
 8006780:	2301      	moveq	r3, #1
 8006782:	2300      	movne	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	e012      	b.n	80067ae <HAL_I2C_Init+0x18e>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	1e58      	subs	r0, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	0099      	lsls	r1, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	fbb0 f3f3 	udiv	r3, r0, r3
 800679e:	3301      	adds	r3, #1
 80067a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_I2C_Init+0x196>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e022      	b.n	80067fc <HAL_I2C_Init+0x1dc>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10e      	bne.n	80067dc <HAL_I2C_Init+0x1bc>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1e58      	subs	r0, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6859      	ldr	r1, [r3, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	440b      	add	r3, r1
 80067cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d0:	3301      	adds	r3, #1
 80067d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	e00f      	b.n	80067fc <HAL_I2C_Init+0x1dc>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	1e58      	subs	r0, r3, #1
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6859      	ldr	r1, [r3, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	0099      	lsls	r1, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80067f2:	3301      	adds	r3, #1
 80067f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	6809      	ldr	r1, [r1, #0]
 8006800:	4313      	orrs	r3, r2
 8006802:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800682a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6911      	ldr	r1, [r2, #16]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68d2      	ldr	r2, [r2, #12]
 8006836:	4311      	orrs	r1, r2
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	430b      	orrs	r3, r1
 800683e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695a      	ldr	r2, [r3, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	000186a0 	.word	0x000186a0
 8006898:	001e847f 	.word	0x001e847f
 800689c:	003d08ff 	.word	0x003d08ff
 80068a0:	431bde83 	.word	0x431bde83
 80068a4:	10624dd3 	.word	0x10624dd3

080068a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	817b      	strh	r3, [r7, #10]
 80068b8:	4613      	mov	r3, r2
 80068ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068bc:	f7ff f914 	bl	8005ae8 <HAL_GetTick>
 80068c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	f040 80e0 	bne.w	8006a90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	2319      	movs	r3, #25
 80068d6:	2201      	movs	r2, #1
 80068d8:	4970      	ldr	r1, [pc, #448]	@ (8006a9c <HAL_I2C_Master_Transmit+0x1f4>)
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 fa4a 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0d3      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_I2C_Master_Transmit+0x50>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e0cc      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d007      	beq.n	800691e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0201 	orr.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800692c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2221      	movs	r2, #33	@ 0x21
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2210      	movs	r2, #16
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	893a      	ldrh	r2, [r7, #8]
 800694e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a50      	ldr	r2, [pc, #320]	@ (8006aa0 <HAL_I2C_Master_Transmit+0x1f8>)
 800695e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006960:	8979      	ldrh	r1, [r7, #10]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 ff36 	bl	80077d8 <I2C_MasterRequestWrite>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e08d      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800698c:	e066      	b.n	8006a5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	6a39      	ldr	r1, [r7, #32]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f001 fb08 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00d      	beq.n	80069ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d107      	bne.n	80069b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e06b      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b01      	subs	r3, #1
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d11b      	bne.n	8006a30 <HAL_I2C_Master_Transmit+0x188>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d017      	beq.n	8006a30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	6a39      	ldr	r1, [r7, #32]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f001 faff 	bl	8008038 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00d      	beq.n	8006a5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d107      	bne.n	8006a58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e01a      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d194      	bne.n	800698e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	e000      	b.n	8006a92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a90:	2302      	movs	r3, #2
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	00100002 	.word	0x00100002
 8006aa0:	ffff0000 	.word	0xffff0000

08006aa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08c      	sub	sp, #48	@ 0x30
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	817b      	strh	r3, [r7, #10]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ab8:	f7ff f816 	bl	8005ae8 <HAL_GetTick>
 8006abc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	f040 8217 	bne.w	8006efa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2319      	movs	r3, #25
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	497c      	ldr	r1, [pc, #496]	@ (8006cc8 <HAL_I2C_Master_Receive+0x224>)
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f001 f94c 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e20a      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_I2C_Master_Receive+0x50>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e203      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d007      	beq.n	8006b1a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0201 	orr.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2222      	movs	r2, #34	@ 0x22
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2210      	movs	r2, #16
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	893a      	ldrh	r2, [r7, #8]
 8006b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a5c      	ldr	r2, [pc, #368]	@ (8006ccc <HAL_I2C_Master_Receive+0x228>)
 8006b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b5c:	8979      	ldrh	r1, [r7, #10]
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 feba 	bl	80078dc <I2C_MasterRequestRead>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e1c4      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d113      	bne.n	8006ba2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	e198      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d11b      	bne.n	8006be2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	61fb      	str	r3, [r7, #28]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	e178      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11b      	bne.n	8006c22 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	61bb      	str	r3, [r7, #24]
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	e158      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c48:	e144      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	f200 80f1 	bhi.w	8006e36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d123      	bne.n	8006ca4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f001 fa31 	bl	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e145      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ca2:	e117      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d14e      	bne.n	8006d4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4906      	ldr	r1, [pc, #24]	@ (8006cd0 <HAL_I2C_Master_Receive+0x22c>)
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f85c 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e11a      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
 8006cc6:	bf00      	nop
 8006cc8:	00100002 	.word	0x00100002
 8006ccc:	ffff0000 	.word	0xffff0000
 8006cd0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ce2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf6:	1c5a      	adds	r2, r3, #1
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691a      	ldr	r2, [r3, #16]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d48:	e0c4      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	2200      	movs	r2, #0
 8006d52:	496c      	ldr	r1, [pc, #432]	@ (8006f04 <HAL_I2C_Master_Receive+0x460>)
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f001 f80d 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0cb      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	2200      	movs	r2, #0
 8006dae:	4955      	ldr	r1, [pc, #340]	@ (8006f04 <HAL_I2C_Master_Receive+0x460>)
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ffdf 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e09d      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	b2d2      	uxtb	r2, r2
 8006ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e34:	e04e      	b.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f001 f944 	bl	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e058      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d124      	bne.n	8006ed4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d107      	bne.n	8006ea2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f47f aeb6 	bne.w	8006c4a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e000      	b.n	8006efc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006efa:	2302      	movs	r3, #2
  }
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3728      	adds	r7, #40	@ 0x28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	00010004 	.word	0x00010004

08006f08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	4608      	mov	r0, r1
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	817b      	strh	r3, [r7, #10]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	813b      	strh	r3, [r7, #8]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f22:	f7fe fde1 	bl	8005ae8 <HAL_GetTick>
 8006f26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b20      	cmp	r3, #32
 8006f32:	f040 80d9 	bne.w	80070e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2319      	movs	r3, #25
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	496d      	ldr	r1, [pc, #436]	@ (80070f4 <HAL_I2C_Mem_Write+0x1ec>)
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 ff17 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e0cc      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_I2C_Mem_Write+0x56>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e0c5      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d007      	beq.n	8006f84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f042 0201 	orr.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2221      	movs	r2, #33	@ 0x21
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2240      	movs	r2, #64	@ 0x40
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a3a      	ldr	r2, [r7, #32]
 8006fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4a4d      	ldr	r2, [pc, #308]	@ (80070f8 <HAL_I2C_Mem_Write+0x1f0>)
 8006fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006fc6:	88f8      	ldrh	r0, [r7, #6]
 8006fc8:	893a      	ldrh	r2, [r7, #8]
 8006fca:	8979      	ldrh	r1, [r7, #10]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fd4e 	bl	8007a78 <I2C_RequestMemoryWrite>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d052      	beq.n	8007088 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e081      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 ffdc 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d107      	bne.n	800700e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800700c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06b      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	781a      	ldrb	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b04      	cmp	r3, #4
 800704e:	d11b      	bne.n	8007088 <HAL_I2C_Mem_Write+0x180>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1aa      	bne.n	8006fe6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 ffcf 	bl	8008038 <I2C_WaitOnBTFFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d107      	bne.n	80070b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e016      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80070e8:	2302      	movs	r3, #2
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	00100002 	.word	0x00100002
 80070f8:	ffff0000 	.word	0xffff0000

080070fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	@ 0x30
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	461a      	mov	r2, r3
 800710a:	4603      	mov	r3, r0
 800710c:	817b      	strh	r3, [r7, #10]
 800710e:	460b      	mov	r3, r1
 8007110:	813b      	strh	r3, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007116:	f7fe fce7 	bl	8005ae8 <HAL_GetTick>
 800711a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b20      	cmp	r3, #32
 8007126:	f040 8214 	bne.w	8007552 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	2319      	movs	r3, #25
 8007130:	2201      	movs	r2, #1
 8007132:	497b      	ldr	r1, [pc, #492]	@ (8007320 <HAL_I2C_Mem_Read+0x224>)
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fe1d 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
 8007142:	e207      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_I2C_Mem_Read+0x56>
 800714e:	2302      	movs	r3, #2
 8007150:	e200      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d007      	beq.n	8007178 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007186:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2222      	movs	r2, #34	@ 0x22
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2240      	movs	r2, #64	@ 0x40
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80071a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007324 <HAL_I2C_Mem_Read+0x228>)
 80071b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071ba:	88f8      	ldrh	r0, [r7, #6]
 80071bc:	893a      	ldrh	r2, [r7, #8]
 80071be:	8979      	ldrh	r1, [r7, #10]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	4603      	mov	r3, r0
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 fcea 	bl	8007ba4 <I2C_RequestMemoryRead>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e1bc      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d113      	bne.n	800720a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071e2:	2300      	movs	r3, #0
 80071e4:	623b      	str	r3, [r7, #32]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	623b      	str	r3, [r7, #32]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	623b      	str	r3, [r7, #32]
 80071f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e190      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720e:	2b01      	cmp	r3, #1
 8007210:	d11b      	bne.n	800724a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007222:	2300      	movs	r3, #0
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	e170      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724e:	2b02      	cmp	r3, #2
 8007250:	d11b      	bne.n	800728a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007260:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007270:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	e150      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	617b      	str	r3, [r7, #20]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072a0:	e144      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	f200 80f1 	bhi.w	800748e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d123      	bne.n	80072fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 ff05 	bl	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e145      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80072fa:	e117      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007300:	2b02      	cmp	r3, #2
 8007302:	d14e      	bne.n	80073a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	2200      	movs	r2, #0
 800730c:	4906      	ldr	r1, [pc, #24]	@ (8007328 <HAL_I2C_Mem_Read+0x22c>)
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fd30 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e11a      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
 800731e:	bf00      	nop
 8007320:	00100002 	.word	0x00100002
 8007324:	ffff0000 	.word	0xffff0000
 8007328:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800733a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007364:	b29b      	uxth	r3, r3
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691a      	ldr	r2, [r3, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007380:	1c5a      	adds	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80073a0:	e0c4      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	2200      	movs	r2, #0
 80073aa:	496c      	ldr	r1, [pc, #432]	@ (800755c <HAL_I2C_Mem_Read+0x460>)
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fce1 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0cb      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	b2d2      	uxtb	r2, r2
 80073d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007404:	2200      	movs	r2, #0
 8007406:	4955      	ldr	r1, [pc, #340]	@ (800755c <HAL_I2C_Mem_Read+0x460>)
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fcb3 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e09d      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007426:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800748c:	e04e      	b.n	800752c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800748e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007490:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 fe18 	bl	80080c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e058      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d124      	bne.n	800752c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d107      	bne.n	80074fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	b2d2      	uxtb	r2, r2
 8007506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f aeb6 	bne.w	80072a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2220      	movs	r2, #32
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	e000      	b.n	8007554 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007552:	2302      	movs	r3, #2
  }
}
 8007554:	4618      	mov	r0, r3
 8007556:	3728      	adds	r7, #40	@ 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	00010004 	.word	0x00010004

08007560 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	460b      	mov	r3, r1
 800756e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007570:	f7fe faba 	bl	8005ae8 <HAL_GetTick>
 8007574:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b20      	cmp	r3, #32
 8007584:	f040 8111 	bne.w	80077aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2319      	movs	r3, #25
 800758e:	2201      	movs	r2, #1
 8007590:	4988      	ldr	r1, [pc, #544]	@ (80077b4 <HAL_I2C_IsDeviceReady+0x254>)
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 fbee 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800759e:	2302      	movs	r3, #2
 80075a0:	e104      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_I2C_IsDeviceReady+0x50>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e0fd      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d007      	beq.n	80075d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0201 	orr.w	r2, r2, #1
 80075d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2224      	movs	r2, #36	@ 0x24
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4a70      	ldr	r2, [pc, #448]	@ (80077b8 <HAL_I2C_IsDeviceReady+0x258>)
 80075f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007608:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2200      	movs	r2, #0
 8007612:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fbac 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00d      	beq.n	800763e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007630:	d103      	bne.n	800763a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007638:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e0b6      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	461a      	mov	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800764c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800764e:	f7fe fa4b 	bl	8005ae8 <HAL_GetTick>
 8007652:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b02      	cmp	r3, #2
 8007660:	bf0c      	ite	eq
 8007662:	2301      	moveq	r3, #1
 8007664:	2300      	movne	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007678:	bf0c      	ite	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	2300      	movne	r3, #0
 800767e:	b2db      	uxtb	r3, r3
 8007680:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007682:	e025      	b.n	80076d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007684:	f7fe fa30 	bl	8005ae8 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d302      	bcc.n	800769a <HAL_I2C_IsDeviceReady+0x13a>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22a0      	movs	r2, #160	@ 0xa0
 800769e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	bf0c      	ite	eq
 80076b0:	2301      	moveq	r3, #1
 80076b2:	2300      	movne	r3, #0
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c6:	bf0c      	ite	eq
 80076c8:	2301      	moveq	r3, #1
 80076ca:	2300      	movne	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80076da:	d005      	beq.n	80076e8 <HAL_I2C_IsDeviceReady+0x188>
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <HAL_I2C_IsDeviceReady+0x188>
 80076e2:	7dbb      	ldrb	r3, [r7, #22]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0cd      	beq.n	8007684 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d129      	bne.n	8007752 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800770c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800770e:	2300      	movs	r3, #0
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	2319      	movs	r3, #25
 800772a:	2201      	movs	r2, #1
 800772c:	4921      	ldr	r1, [pc, #132]	@ (80077b4 <HAL_I2C_IsDeviceReady+0x254>)
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 fb20 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e036      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	e02c      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007760:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800776a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2319      	movs	r3, #25
 8007772:	2201      	movs	r2, #1
 8007774:	490f      	ldr	r1, [pc, #60]	@ (80077b4 <HAL_I2C_IsDeviceReady+0x254>)
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fafc 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e012      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	3301      	adds	r3, #1
 800778a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	429a      	cmp	r2, r3
 8007792:	f4ff af32 	bcc.w	80075fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	00100002 	.word	0x00100002
 80077b8:	ffff0000 	.word	0xffff0000

080077bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ca:	b2db      	uxtb	r3, r3
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b088      	sub	sp, #32
 80077dc:	af02      	add	r7, sp, #8
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	460b      	mov	r3, r1
 80077e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b08      	cmp	r3, #8
 80077f2:	d006      	beq.n	8007802 <I2C_MasterRequestWrite+0x2a>
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d003      	beq.n	8007802 <I2C_MasterRequestWrite+0x2a>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007800:	d108      	bne.n	8007814 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e00b      	b.n	800782c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007818:	2b12      	cmp	r3, #18
 800781a:	d107      	bne.n	800782c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800782a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fa9b 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007852:	d103      	bne.n	800785c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800785a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e035      	b.n	80078cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007868:	d108      	bne.n	800787c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800786a:	897b      	ldrh	r3, [r7, #10]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007878:	611a      	str	r2, [r3, #16]
 800787a:	e01b      	b.n	80078b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800787c:	897b      	ldrh	r3, [r7, #10]
 800787e:	11db      	asrs	r3, r3, #7
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f063 030f 	orn	r3, r3, #15
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	490e      	ldr	r1, [pc, #56]	@ (80078d4 <I2C_MasterRequestWrite+0xfc>)
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fae4 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e010      	b.n	80078cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4907      	ldr	r1, [pc, #28]	@ (80078d8 <I2C_MasterRequestWrite+0x100>)
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fad4 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	00010008 	.word	0x00010008
 80078d8:	00010002 	.word	0x00010002

080078dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b088      	sub	sp, #32
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	460b      	mov	r3, r1
 80078ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007900:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d006      	beq.n	8007916 <I2C_MasterRequestRead+0x3a>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d003      	beq.n	8007916 <I2C_MasterRequestRead+0x3a>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007914:	d108      	bne.n	8007928 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e00b      	b.n	8007940 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792c:	2b11      	cmp	r3, #17
 800792e:	d107      	bne.n	8007940 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800793e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fa11 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00d      	beq.n	8007974 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007966:	d103      	bne.n	8007970 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800796e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e079      	b.n	8007a68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800797c:	d108      	bne.n	8007990 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800797e:	897b      	ldrh	r3, [r7, #10]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	611a      	str	r2, [r3, #16]
 800798e:	e05f      	b.n	8007a50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007990:	897b      	ldrh	r3, [r7, #10]
 8007992:	11db      	asrs	r3, r3, #7
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f063 030f 	orn	r3, r3, #15
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	4930      	ldr	r1, [pc, #192]	@ (8007a70 <I2C_MasterRequestRead+0x194>)
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 fa5a 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e054      	b.n	8007a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4929      	ldr	r1, [pc, #164]	@ (8007a74 <I2C_MasterRequestRead+0x198>)
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 fa4a 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e044      	b.n	8007a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f9af 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a2a:	d103      	bne.n	8007a34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a32:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e017      	b.n	8007a68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007a38:	897b      	ldrh	r3, [r7, #10]
 8007a3a:	11db      	asrs	r3, r3, #7
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0306 	and.w	r3, r3, #6
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f063 030e 	orn	r3, r3, #14
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4907      	ldr	r1, [pc, #28]	@ (8007a74 <I2C_MasterRequestRead+0x198>)
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f000 fa06 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	00010008 	.word	0x00010008
 8007a74:	00010002 	.word	0x00010002

08007a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	817b      	strh	r3, [r7, #10]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	813b      	strh	r3, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f960 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00d      	beq.n	8007ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ac8:	d103      	bne.n	8007ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e05f      	b.n	8007b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ad6:	897b      	ldrh	r3, [r7, #10]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	461a      	mov	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	6a3a      	ldr	r2, [r7, #32]
 8007aea:	492d      	ldr	r1, [pc, #180]	@ (8007ba0 <I2C_RequestMemoryWrite+0x128>)
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f9bb 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e04c      	b.n	8007b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afc:	2300      	movs	r3, #0
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b14:	6a39      	ldr	r1, [r7, #32]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 fa46 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00d      	beq.n	8007b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d107      	bne.n	8007b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e02b      	b.n	8007b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d105      	bne.n	8007b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b44:	893b      	ldrh	r3, [r7, #8]
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	611a      	str	r2, [r3, #16]
 8007b4e:	e021      	b.n	8007b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b50:	893b      	ldrh	r3, [r7, #8]
 8007b52:	0a1b      	lsrs	r3, r3, #8
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b60:	6a39      	ldr	r1, [r7, #32]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fa20 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d107      	bne.n	8007b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e005      	b.n	8007b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b8a:	893b      	ldrh	r3, [r7, #8]
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	00010002 	.word	0x00010002

08007ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b088      	sub	sp, #32
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	4608      	mov	r0, r1
 8007bae:	4611      	mov	r1, r2
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	817b      	strh	r3, [r7, #10]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	813b      	strh	r3, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f8c2 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00d      	beq.n	8007c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c04:	d103      	bne.n	8007c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e0aa      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	4952      	ldr	r1, [pc, #328]	@ (8007d70 <I2C_RequestMemoryRead+0x1cc>)
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f91d 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e097      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c50:	6a39      	ldr	r1, [r7, #32]
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 f9a8 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c62:	2b04      	cmp	r3, #4
 8007c64:	d107      	bne.n	8007c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e076      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d105      	bne.n	8007c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	611a      	str	r2, [r3, #16]
 8007c8a:	e021      	b.n	8007cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c8c:	893b      	ldrh	r3, [r7, #8]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c9c:	6a39      	ldr	r1, [r7, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f982 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d107      	bne.n	8007cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e050      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cc6:	893b      	ldrh	r3, [r7, #8]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cd2:	6a39      	ldr	r1, [r7, #32]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 f967 	bl	8007fa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d107      	bne.n	8007cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e035      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f82b 	bl	8007d74 <I2C_WaitOnFlagUntilTimeout>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d32:	d103      	bne.n	8007d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e013      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d40:	897b      	ldrh	r3, [r7, #10]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f043 0301 	orr.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	6a3a      	ldr	r2, [r7, #32]
 8007d54:	4906      	ldr	r1, [pc, #24]	@ (8007d70 <I2C_RequestMemoryRead+0x1cc>)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f886 	bl	8007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	00010002 	.word	0x00010002

08007d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d84:	e048      	b.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d044      	beq.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8e:	f7fd feab 	bl	8005ae8 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d302      	bcc.n	8007da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d139      	bne.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	0c1b      	lsrs	r3, r3, #16
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10d      	bne.n	8007dca <I2C_WaitOnFlagUntilTimeout+0x56>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	43da      	mvns	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4013      	ands	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf0c      	ite	eq
 8007dc0:	2301      	moveq	r3, #1
 8007dc2:	2300      	movne	r3, #0
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	e00c      	b.n	8007de4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	43da      	mvns	r2, r3
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	461a      	mov	r2, r3
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d116      	bne.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e04:	f043 0220 	orr.w	r2, r3, #32
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e023      	b.n	8007e60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d10d      	bne.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	43da      	mvns	r2, r3
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bf0c      	ite	eq
 8007e34:	2301      	moveq	r3, #1
 8007e36:	2300      	movne	r3, #0
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	e00c      	b.n	8007e58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	43da      	mvns	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	4013      	ands	r3, r2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d093      	beq.n	8007d86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e76:	e071      	b.n	8007f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e86:	d123      	bne.n	8007ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ea0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebc:	f043 0204 	orr.w	r2, r3, #4
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e067      	b.n	8007fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d041      	beq.n	8007f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed8:	f7fd fe06 	bl	8005ae8 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d302      	bcc.n	8007eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d136      	bne.n	8007f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d10c      	bne.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	43da      	mvns	r2, r3
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	4013      	ands	r3, r2
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bf14      	ite	ne
 8007f0a:	2301      	movne	r3, #1
 8007f0c:	2300      	moveq	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	e00b      	b.n	8007f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	43da      	mvns	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	bf14      	ite	ne
 8007f24:	2301      	movne	r3, #1
 8007f26:	2300      	moveq	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	f043 0220 	orr.w	r2, r3, #32
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e021      	b.n	8007fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	0c1b      	lsrs	r3, r3, #16
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d10c      	bne.n	8007f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	43da      	mvns	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	e00b      	b.n	8007f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	43da      	mvns	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bf14      	ite	ne
 8007f92:	2301      	movne	r3, #1
 8007f94:	2300      	moveq	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f47f af6d 	bne.w	8007e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fb4:	e034      	b.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 f8e3 	bl	8008182 <I2C_IsAcknowledgeFailed>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e034      	b.n	8008030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d028      	beq.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fce:	f7fd fd8b 	bl	8005ae8 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d302      	bcc.n	8007fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11d      	bne.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d016      	beq.n	8008020 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800c:	f043 0220 	orr.w	r2, r3, #32
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e007      	b.n	8008030 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802a:	2b80      	cmp	r3, #128	@ 0x80
 800802c:	d1c3      	bne.n	8007fb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008044:	e034      	b.n	80080b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 f89b 	bl	8008182 <I2C_IsAcknowledgeFailed>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e034      	b.n	80080c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d028      	beq.n	80080b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800805e:	f7fd fd43 	bl	8005ae8 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	429a      	cmp	r2, r3
 800806c:	d302      	bcc.n	8008074 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11d      	bne.n	80080b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f003 0304 	and.w	r3, r3, #4
 800807e:	2b04      	cmp	r3, #4
 8008080:	d016      	beq.n	80080b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	f043 0220 	orr.w	r2, r3, #32
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e007      	b.n	80080c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d1c3      	bne.n	8008046 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080d4:	e049      	b.n	800816a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d119      	bne.n	8008118 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0210 	mvn.w	r2, #16
 80080ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e030      	b.n	800817a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008118:	f7fd fce6 	bl	8005ae8 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	429a      	cmp	r2, r3
 8008126:	d302      	bcc.n	800812e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d11d      	bne.n	800816a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b40      	cmp	r3, #64	@ 0x40
 800813a:	d016      	beq.n	800816a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008156:	f043 0220 	orr.w	r2, r3, #32
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e007      	b.n	800817a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008174:	2b40      	cmp	r3, #64	@ 0x40
 8008176:	d1ae      	bne.n	80080d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008198:	d11b      	bne.n	80081d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081be:	f043 0204 	orr.w	r2, r3, #4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e0cc      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081f4:	4b68      	ldr	r3, [pc, #416]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d90c      	bls.n	800821c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008202:	4b65      	ldr	r3, [pc, #404]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800820a:	4b63      	ldr	r3, [pc, #396]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	683a      	ldr	r2, [r7, #0]
 8008214:	429a      	cmp	r2, r3
 8008216:	d001      	beq.n	800821c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0b8      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d005      	beq.n	8008240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008234:	4b59      	ldr	r3, [pc, #356]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	4a58      	ldr	r2, [pc, #352]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800823a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800823e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800824c:	4b53      	ldr	r3, [pc, #332]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	4a52      	ldr	r2, [pc, #328]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008258:	4b50      	ldr	r3, [pc, #320]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	494d      	ldr	r1, [pc, #308]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008266:	4313      	orrs	r3, r2
 8008268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d044      	beq.n	8008300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d107      	bne.n	800828e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827e:	4b47      	ldr	r3, [pc, #284]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d119      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e07f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d003      	beq.n	800829e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800829a:	2b03      	cmp	r3, #3
 800829c:	d107      	bne.n	80082ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800829e:	4b3f      	ldr	r3, [pc, #252]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e06f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ae:	4b3b      	ldr	r3, [pc, #236]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e067      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082be:	4b37      	ldr	r3, [pc, #220]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f023 0203 	bic.w	r2, r3, #3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	4934      	ldr	r1, [pc, #208]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082d0:	f7fd fc0a 	bl	8005ae8 <HAL_GetTick>
 80082d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082d8:	f7fd fc06 	bl	8005ae8 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e04f      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ee:	4b2b      	ldr	r3, [pc, #172]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	f003 020c 	and.w	r2, r3, #12
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d1eb      	bne.n	80082d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008300:	4b25      	ldr	r3, [pc, #148]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d20c      	bcs.n	8008328 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830e:	4b22      	ldr	r3, [pc, #136]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008316:	4b20      	ldr	r3, [pc, #128]	@ (8008398 <HAL_RCC_ClockConfig+0x1b8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d001      	beq.n	8008328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e032      	b.n	800838e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008334:	4b19      	ldr	r3, [pc, #100]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	4916      	ldr	r1, [pc, #88]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	4313      	orrs	r3, r2
 8008344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 0308 	and.w	r3, r3, #8
 800834e:	2b00      	cmp	r3, #0
 8008350:	d009      	beq.n	8008366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008352:	4b12      	ldr	r3, [pc, #72]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	490e      	ldr	r1, [pc, #56]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 8008362:	4313      	orrs	r3, r2
 8008364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008366:	f000 f821 	bl	80083ac <HAL_RCC_GetSysClockFreq>
 800836a:	4602      	mov	r2, r0
 800836c:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <HAL_RCC_ClockConfig+0x1bc>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	490a      	ldr	r1, [pc, #40]	@ (80083a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008378:	5ccb      	ldrb	r3, [r1, r3]
 800837a:	fa22 f303 	lsr.w	r3, r2, r3
 800837e:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008382:	4b09      	ldr	r3, [pc, #36]	@ (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd fb6a 	bl	8005a60 <HAL_InitTick>

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	40023c00 	.word	0x40023c00
 800839c:	40023800 	.word	0x40023800
 80083a0:	0800fed0 	.word	0x0800fed0
 80083a4:	200000cc 	.word	0x200000cc
 80083a8:	200000d0 	.word	0x200000d0

080083ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b0:	b094      	sub	sp, #80	@ 0x50
 80083b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083c4:	4b79      	ldr	r3, [pc, #484]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 030c 	and.w	r3, r3, #12
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d00d      	beq.n	80083ec <HAL_RCC_GetSysClockFreq+0x40>
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	f200 80e1 	bhi.w	8008598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <HAL_RCC_GetSysClockFreq+0x34>
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d003      	beq.n	80083e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80083de:	e0db      	b.n	8008598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083e0:	4b73      	ldr	r3, [pc, #460]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80083e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083e4:	e0db      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083e6:	4b73      	ldr	r3, [pc, #460]	@ (80085b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80083e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083ea:	e0d8      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083ec:	4b6f      	ldr	r3, [pc, #444]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083f6:	4b6d      	ldr	r3, [pc, #436]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d063      	beq.n	80084ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008402:	4b6a      	ldr	r3, [pc, #424]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	099b      	lsrs	r3, r3, #6
 8008408:	2200      	movs	r2, #0
 800840a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800840c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008414:	633b      	str	r3, [r7, #48]	@ 0x30
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
 800841a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800841e:	4622      	mov	r2, r4
 8008420:	462b      	mov	r3, r5
 8008422:	f04f 0000 	mov.w	r0, #0
 8008426:	f04f 0100 	mov.w	r1, #0
 800842a:	0159      	lsls	r1, r3, #5
 800842c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008430:	0150      	lsls	r0, r2, #5
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4621      	mov	r1, r4
 8008438:	1a51      	subs	r1, r2, r1
 800843a:	6139      	str	r1, [r7, #16]
 800843c:	4629      	mov	r1, r5
 800843e:	eb63 0301 	sbc.w	r3, r3, r1
 8008442:	617b      	str	r3, [r7, #20]
 8008444:	f04f 0200 	mov.w	r2, #0
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008450:	4659      	mov	r1, fp
 8008452:	018b      	lsls	r3, r1, #6
 8008454:	4651      	mov	r1, sl
 8008456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800845a:	4651      	mov	r1, sl
 800845c:	018a      	lsls	r2, r1, #6
 800845e:	4651      	mov	r1, sl
 8008460:	ebb2 0801 	subs.w	r8, r2, r1
 8008464:	4659      	mov	r1, fp
 8008466:	eb63 0901 	sbc.w	r9, r3, r1
 800846a:	f04f 0200 	mov.w	r2, #0
 800846e:	f04f 0300 	mov.w	r3, #0
 8008472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800847a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800847e:	4690      	mov	r8, r2
 8008480:	4699      	mov	r9, r3
 8008482:	4623      	mov	r3, r4
 8008484:	eb18 0303 	adds.w	r3, r8, r3
 8008488:	60bb      	str	r3, [r7, #8]
 800848a:	462b      	mov	r3, r5
 800848c:	eb49 0303 	adc.w	r3, r9, r3
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	f04f 0200 	mov.w	r2, #0
 8008496:	f04f 0300 	mov.w	r3, #0
 800849a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800849e:	4629      	mov	r1, r5
 80084a0:	024b      	lsls	r3, r1, #9
 80084a2:	4621      	mov	r1, r4
 80084a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80084a8:	4621      	mov	r1, r4
 80084aa:	024a      	lsls	r2, r1, #9
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084b2:	2200      	movs	r2, #0
 80084b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084bc:	f7f8 fc04 	bl	8000cc8 <__aeabi_uldivmod>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4613      	mov	r3, r2
 80084c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c8:	e058      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084ca:	4b38      	ldr	r3, [pc, #224]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	099b      	lsrs	r3, r3, #6
 80084d0:	2200      	movs	r2, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	4611      	mov	r1, r2
 80084d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80084da:	623b      	str	r3, [r7, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
 80084e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	f04f 0000 	mov.w	r0, #0
 80084ec:	f04f 0100 	mov.w	r1, #0
 80084f0:	0159      	lsls	r1, r3, #5
 80084f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80084f6:	0150      	lsls	r0, r2, #5
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4641      	mov	r1, r8
 80084fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8008502:	4649      	mov	r1, r9
 8008504:	eb63 0b01 	sbc.w	fp, r3, r1
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800851c:	ebb2 040a 	subs.w	r4, r2, sl
 8008520:	eb63 050b 	sbc.w	r5, r3, fp
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	00eb      	lsls	r3, r5, #3
 800852e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008532:	00e2      	lsls	r2, r4, #3
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	4643      	mov	r3, r8
 800853a:	18e3      	adds	r3, r4, r3
 800853c:	603b      	str	r3, [r7, #0]
 800853e:	464b      	mov	r3, r9
 8008540:	eb45 0303 	adc.w	r3, r5, r3
 8008544:	607b      	str	r3, [r7, #4]
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008552:	4629      	mov	r1, r5
 8008554:	028b      	lsls	r3, r1, #10
 8008556:	4621      	mov	r1, r4
 8008558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800855c:	4621      	mov	r1, r4
 800855e:	028a      	lsls	r2, r1, #10
 8008560:	4610      	mov	r0, r2
 8008562:	4619      	mov	r1, r3
 8008564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008566:	2200      	movs	r2, #0
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	61fa      	str	r2, [r7, #28]
 800856c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008570:	f7f8 fbaa 	bl	8000cc8 <__aeabi_uldivmod>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4613      	mov	r3, r2
 800857a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800857c:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <HAL_RCC_GetSysClockFreq+0x200>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	0c1b      	lsrs	r3, r3, #16
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	3301      	adds	r3, #1
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800858c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800858e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008596:	e002      	b.n	800859e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800859a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800859c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800859e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3750      	adds	r7, #80	@ 0x50
 80085a4:	46bd      	mov	sp, r7
 80085a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085aa:	bf00      	nop
 80085ac:	40023800 	.word	0x40023800
 80085b0:	00f42400 	.word	0x00f42400
 80085b4:	007a1200 	.word	0x007a1200

080085b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <HAL_RCC_GetHCLKFreq+0x14>)
 80085be:	681b      	ldr	r3, [r3, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	200000cc 	.word	0x200000cc

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085d4:	f7ff fff0 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	0a9b      	lsrs	r3, r3, #10
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4903      	ldr	r1, [pc, #12]	@ (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085e6:	5ccb      	ldrb	r3, [r1, r3]
 80085e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	40023800 	.word	0x40023800
 80085f4:	0800fee0 	.word	0x0800fee0

080085f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80085fc:	f7ff ffdc 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 8008600:	4602      	mov	r2, r0
 8008602:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	0b5b      	lsrs	r3, r3, #13
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	4903      	ldr	r1, [pc, #12]	@ (800861c <HAL_RCC_GetPCLK2Freq+0x24>)
 800860e:	5ccb      	ldrb	r3, [r1, r3]
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008614:	4618      	mov	r0, r3
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40023800 	.word	0x40023800
 800861c:	0800fee0 	.word	0x0800fee0

08008620 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e273      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d075      	beq.n	800872a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800863e:	4b88      	ldr	r3, [pc, #544]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 030c 	and.w	r3, r3, #12
 8008646:	2b04      	cmp	r3, #4
 8008648:	d00c      	beq.n	8008664 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800864a:	4b85      	ldr	r3, [pc, #532]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 030c 	and.w	r3, r3, #12
        || \
 8008652:	2b08      	cmp	r3, #8
 8008654:	d112      	bne.n	800867c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008656:	4b82      	ldr	r3, [pc, #520]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800865e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008662:	d10b      	bne.n	800867c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008664:	4b7e      	ldr	r3, [pc, #504]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05b      	beq.n	8008728 <HAL_RCC_OscConfig+0x108>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d157      	bne.n	8008728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e24e      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008684:	d106      	bne.n	8008694 <HAL_RCC_OscConfig+0x74>
 8008686:	4b76      	ldr	r3, [pc, #472]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a75      	ldr	r2, [pc, #468]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 800868c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	e01d      	b.n	80086d0 <HAL_RCC_OscConfig+0xb0>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800869c:	d10c      	bne.n	80086b8 <HAL_RCC_OscConfig+0x98>
 800869e:	4b70      	ldr	r3, [pc, #448]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a6f      	ldr	r2, [pc, #444]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	4b6d      	ldr	r3, [pc, #436]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a6c      	ldr	r2, [pc, #432]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	e00b      	b.n	80086d0 <HAL_RCC_OscConfig+0xb0>
 80086b8:	4b69      	ldr	r3, [pc, #420]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a68      	ldr	r2, [pc, #416]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	4b66      	ldr	r3, [pc, #408]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a65      	ldr	r2, [pc, #404]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d013      	beq.n	8008700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d8:	f7fd fa06 	bl	8005ae8 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086e0:	f7fd fa02 	bl	8005ae8 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b64      	cmp	r3, #100	@ 0x64
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e213      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086f2:	4b5b      	ldr	r3, [pc, #364]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d0f0      	beq.n	80086e0 <HAL_RCC_OscConfig+0xc0>
 80086fe:	e014      	b.n	800872a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008700:	f7fd f9f2 	bl	8005ae8 <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008708:	f7fd f9ee 	bl	8005ae8 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b64      	cmp	r3, #100	@ 0x64
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e1ff      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800871a:	4b51      	ldr	r3, [pc, #324]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f0      	bne.n	8008708 <HAL_RCC_OscConfig+0xe8>
 8008726:	e000      	b.n	800872a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d063      	beq.n	80087fe <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008736:	4b4a      	ldr	r3, [pc, #296]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008742:	4b47      	ldr	r3, [pc, #284]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 030c 	and.w	r3, r3, #12
        || \
 800874a:	2b08      	cmp	r3, #8
 800874c:	d11c      	bne.n	8008788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800874e:	4b44      	ldr	r3, [pc, #272]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d116      	bne.n	8008788 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800875a:	4b41      	ldr	r3, [pc, #260]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d005      	beq.n	8008772 <HAL_RCC_OscConfig+0x152>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d001      	beq.n	8008772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e1d3      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008772:	4b3b      	ldr	r3, [pc, #236]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	00db      	lsls	r3, r3, #3
 8008780:	4937      	ldr	r1, [pc, #220]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008782:	4313      	orrs	r3, r2
 8008784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008786:	e03a      	b.n	80087fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d020      	beq.n	80087d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008790:	4b34      	ldr	r3, [pc, #208]	@ (8008864 <HAL_RCC_OscConfig+0x244>)
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008796:	f7fd f9a7 	bl	8005ae8 <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800879e:	f7fd f9a3 	bl	8005ae8 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e1b4      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f0      	beq.n	800879e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087bc:	4b28      	ldr	r3, [pc, #160]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	4925      	ldr	r1, [pc, #148]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	600b      	str	r3, [r1, #0]
 80087d0:	e015      	b.n	80087fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087d2:	4b24      	ldr	r3, [pc, #144]	@ (8008864 <HAL_RCC_OscConfig+0x244>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fd f986 	bl	8005ae8 <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087e0:	f7fd f982 	bl	8005ae8 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e193      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f0      	bne.n	80087e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d036      	beq.n	8008878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008812:	4b15      	ldr	r3, [pc, #84]	@ (8008868 <HAL_RCC_OscConfig+0x248>)
 8008814:	2201      	movs	r2, #1
 8008816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008818:	f7fd f966 	bl	8005ae8 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008820:	f7fd f962 	bl	8005ae8 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e173      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008832:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <HAL_RCC_OscConfig+0x240>)
 8008834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0f0      	beq.n	8008820 <HAL_RCC_OscConfig+0x200>
 800883e:	e01b      	b.n	8008878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008840:	4b09      	ldr	r3, [pc, #36]	@ (8008868 <HAL_RCC_OscConfig+0x248>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008846:	f7fd f94f 	bl	8005ae8 <HAL_GetTick>
 800884a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800884c:	e00e      	b.n	800886c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800884e:	f7fd f94b 	bl	8005ae8 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d907      	bls.n	800886c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e15c      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
 8008860:	40023800 	.word	0x40023800
 8008864:	42470000 	.word	0x42470000
 8008868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800886c:	4b8a      	ldr	r3, [pc, #552]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800886e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008870:	f003 0302 	and.w	r3, r3, #2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1ea      	bne.n	800884e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8097 	beq.w	80089b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800888a:	4b83      	ldr	r3, [pc, #524]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10f      	bne.n	80088b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
 800889a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	4a7e      	ldr	r2, [pc, #504]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80088a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80088a6:	4b7c      	ldr	r3, [pc, #496]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088ae:	60bb      	str	r3, [r7, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b6:	4b79      	ldr	r3, [pc, #484]	@ (8008a9c <HAL_RCC_OscConfig+0x47c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d118      	bne.n	80088f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c2:	4b76      	ldr	r3, [pc, #472]	@ (8008a9c <HAL_RCC_OscConfig+0x47c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a75      	ldr	r2, [pc, #468]	@ (8008a9c <HAL_RCC_OscConfig+0x47c>)
 80088c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ce:	f7fd f90b 	bl	8005ae8 <HAL_GetTick>
 80088d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d4:	e008      	b.n	80088e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d6:	f7fd f907 	bl	8005ae8 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d901      	bls.n	80088e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e118      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e8:	4b6c      	ldr	r3, [pc, #432]	@ (8008a9c <HAL_RCC_OscConfig+0x47c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0f0      	beq.n	80088d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d106      	bne.n	800890a <HAL_RCC_OscConfig+0x2ea>
 80088fc:	4b66      	ldr	r3, [pc, #408]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80088fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008900:	4a65      	ldr	r2, [pc, #404]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008902:	f043 0301 	orr.w	r3, r3, #1
 8008906:	6713      	str	r3, [r2, #112]	@ 0x70
 8008908:	e01c      	b.n	8008944 <HAL_RCC_OscConfig+0x324>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	2b05      	cmp	r3, #5
 8008910:	d10c      	bne.n	800892c <HAL_RCC_OscConfig+0x30c>
 8008912:	4b61      	ldr	r3, [pc, #388]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008916:	4a60      	ldr	r2, [pc, #384]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008918:	f043 0304 	orr.w	r3, r3, #4
 800891c:	6713      	str	r3, [r2, #112]	@ 0x70
 800891e:	4b5e      	ldr	r3, [pc, #376]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008922:	4a5d      	ldr	r2, [pc, #372]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	6713      	str	r3, [r2, #112]	@ 0x70
 800892a:	e00b      	b.n	8008944 <HAL_RCC_OscConfig+0x324>
 800892c:	4b5a      	ldr	r3, [pc, #360]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008930:	4a59      	ldr	r2, [pc, #356]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	@ 0x70
 8008938:	4b57      	ldr	r3, [pc, #348]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800893c:	4a56      	ldr	r2, [pc, #344]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800893e:	f023 0304 	bic.w	r3, r3, #4
 8008942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d015      	beq.n	8008978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800894c:	f7fd f8cc 	bl	8005ae8 <HAL_GetTick>
 8008950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008952:	e00a      	b.n	800896a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008954:	f7fd f8c8 	bl	8005ae8 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008962:	4293      	cmp	r3, r2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e0d7      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800896a:	4b4b      	ldr	r3, [pc, #300]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896e:	f003 0302 	and.w	r3, r3, #2
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0ee      	beq.n	8008954 <HAL_RCC_OscConfig+0x334>
 8008976:	e014      	b.n	80089a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008978:	f7fd f8b6 	bl	8005ae8 <HAL_GetTick>
 800897c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897e:	e00a      	b.n	8008996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008980:	f7fd f8b2 	bl	8005ae8 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800898e:	4293      	cmp	r3, r2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e0c1      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008996:	4b40      	ldr	r3, [pc, #256]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1ee      	bne.n	8008980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d105      	bne.n	80089b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80089aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ac:	4a3a      	ldr	r2, [pc, #232]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80089ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80ad 	beq.w	8008b18 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089be:	4b36      	ldr	r3, [pc, #216]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	d060      	beq.n	8008a8c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d145      	bne.n	8008a5e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089d2:	4b33      	ldr	r3, [pc, #204]	@ (8008aa0 <HAL_RCC_OscConfig+0x480>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fd f886 	bl	8005ae8 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e0:	f7fd f882 	bl	8005ae8 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e093      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089f2:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69da      	ldr	r2, [r3, #28]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0c:	019b      	lsls	r3, r3, #6
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	3b01      	subs	r3, #1
 8008a18:	041b      	lsls	r3, r3, #16
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a20:	061b      	lsls	r3, r3, #24
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a28:	071b      	lsls	r3, r3, #28
 8008a2a:	491b      	ldr	r1, [pc, #108]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a30:	4b1b      	ldr	r3, [pc, #108]	@ (8008aa0 <HAL_RCC_OscConfig+0x480>)
 8008a32:	2201      	movs	r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a36:	f7fd f857 	bl	8005ae8 <HAL_GetTick>
 8008a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a3c:	e008      	b.n	8008a50 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a3e:	f7fd f853 	bl	8005ae8 <HAL_GetTick>
 8008a42:	4602      	mov	r2, r0
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e064      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a50:	4b11      	ldr	r3, [pc, #68]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0f0      	beq.n	8008a3e <HAL_RCC_OscConfig+0x41e>
 8008a5c:	e05c      	b.n	8008b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a5e:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <HAL_RCC_OscConfig+0x480>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a64:	f7fd f840 	bl	8005ae8 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a6c:	f7fd f83c 	bl	8005ae8 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e04d      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a7e:	4b06      	ldr	r3, [pc, #24]	@ (8008a98 <HAL_RCC_OscConfig+0x478>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x44c>
 8008a8a:	e045      	b.n	8008b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d107      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e040      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b24 <HAL_RCC_OscConfig+0x504>)
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d030      	beq.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d129      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d122      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ada:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d119      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	3b01      	subs	r3, #1
 8008aee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d10f      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d107      	bne.n	8008b14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d001      	beq.n	8008b18 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e000      	b.n	8008b1a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	40023800 	.word	0x40023800

08008b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e041      	b.n	8008bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7fc fd6a 	bl	8005628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f000 fad8 	bl	800911c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e041      	b.n	8008c5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d106      	bne.n	8008bf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f839 	bl	8008c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2202      	movs	r2, #2
 8008bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3304      	adds	r3, #4
 8008c02:	4619      	mov	r1, r3
 8008c04:	4610      	mov	r0, r2
 8008c06:	f000 fa89 	bl	800911c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2201      	movs	r2, #1
 8008c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d109      	bne.n	8008c9c <HAL_TIM_PWM_Start+0x24>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	bf14      	ite	ne
 8008c94:	2301      	movne	r3, #1
 8008c96:	2300      	moveq	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e022      	b.n	8008ce2 <HAL_TIM_PWM_Start+0x6a>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d109      	bne.n	8008cb6 <HAL_TIM_PWM_Start+0x3e>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	bf14      	ite	ne
 8008cae:	2301      	movne	r3, #1
 8008cb0:	2300      	moveq	r3, #0
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	e015      	b.n	8008ce2 <HAL_TIM_PWM_Start+0x6a>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d109      	bne.n	8008cd0 <HAL_TIM_PWM_Start+0x58>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	e008      	b.n	8008ce2 <HAL_TIM_PWM_Start+0x6a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	bf14      	ite	ne
 8008cdc:	2301      	movne	r3, #1
 8008cde:	2300      	moveq	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e07c      	b.n	8008de4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <HAL_TIM_PWM_Start+0x82>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cf8:	e013      	b.n	8008d22 <HAL_TIM_PWM_Start+0xaa>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d104      	bne.n	8008d0a <HAL_TIM_PWM_Start+0x92>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2202      	movs	r2, #2
 8008d04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d08:	e00b      	b.n	8008d22 <HAL_TIM_PWM_Start+0xaa>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d104      	bne.n	8008d1a <HAL_TIM_PWM_Start+0xa2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d18:	e003      	b.n	8008d22 <HAL_TIM_PWM_Start+0xaa>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2201      	movs	r2, #1
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fcec 	bl	8009708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2d      	ldr	r2, [pc, #180]	@ (8008dec <HAL_TIM_PWM_Start+0x174>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_TIM_PWM_Start+0xcc>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008df0 <HAL_TIM_PWM_Start+0x178>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d101      	bne.n	8008d48 <HAL_TIM_PWM_Start+0xd0>
 8008d44:	2301      	movs	r3, #1
 8008d46:	e000      	b.n	8008d4a <HAL_TIM_PWM_Start+0xd2>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a22      	ldr	r2, [pc, #136]	@ (8008dec <HAL_TIM_PWM_Start+0x174>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d022      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d70:	d01d      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1f      	ldr	r2, [pc, #124]	@ (8008df4 <HAL_TIM_PWM_Start+0x17c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d018      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1d      	ldr	r2, [pc, #116]	@ (8008df8 <HAL_TIM_PWM_Start+0x180>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dfc <HAL_TIM_PWM_Start+0x184>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d00e      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a16      	ldr	r2, [pc, #88]	@ (8008df0 <HAL_TIM_PWM_Start+0x178>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d009      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a18      	ldr	r2, [pc, #96]	@ (8008e00 <HAL_TIM_PWM_Start+0x188>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d004      	beq.n	8008dae <HAL_TIM_PWM_Start+0x136>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a16      	ldr	r2, [pc, #88]	@ (8008e04 <HAL_TIM_PWM_Start+0x18c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d111      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b06      	cmp	r3, #6
 8008dbe:	d010      	beq.n	8008de2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0201 	orr.w	r2, r2, #1
 8008dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd0:	e007      	b.n	8008de2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f042 0201 	orr.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40000800 	.word	0x40000800
 8008dfc:	40000c00 	.word	0x40000c00
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40001800 	.word	0x40001800

08008e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e0ae      	b.n	8008f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b0c      	cmp	r3, #12
 8008e32:	f200 809f 	bhi.w	8008f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008f75 	.word	0x08008f75
 8008e44:	08008f75 	.word	0x08008f75
 8008e48:	08008f75 	.word	0x08008f75
 8008e4c:	08008eb1 	.word	0x08008eb1
 8008e50:	08008f75 	.word	0x08008f75
 8008e54:	08008f75 	.word	0x08008f75
 8008e58:	08008f75 	.word	0x08008f75
 8008e5c:	08008ef3 	.word	0x08008ef3
 8008e60:	08008f75 	.word	0x08008f75
 8008e64:	08008f75 	.word	0x08008f75
 8008e68:	08008f75 	.word	0x08008f75
 8008e6c:	08008f33 	.word	0x08008f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 f9fc 	bl	8009274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0204 	bic.w	r2, r2, #4
 8008e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6999      	ldr	r1, [r3, #24]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	619a      	str	r2, [r3, #24]
      break;
 8008eae:	e064      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa4c 	bl	8009354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	619a      	str	r2, [r3, #24]
      break;
 8008ef0:	e043      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 faa1 	bl	8009440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0204 	bic.w	r2, r2, #4
 8008f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69d9      	ldr	r1, [r3, #28]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	61da      	str	r2, [r3, #28]
      break;
 8008f30:	e023      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 faf5 	bl	8009528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	021a      	lsls	r2, r3, #8
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	61da      	str	r2, [r3, #28]
      break;
 8008f72:	e002      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	75fb      	strb	r3, [r7, #23]
      break;
 8008f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e0b4      	b.n	8009112 <HAL_TIM_ConfigClockSource+0x186>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe0:	d03e      	beq.n	8009060 <HAL_TIM_ConfigClockSource+0xd4>
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe6:	f200 8087 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	f000 8086 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x172>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	d87f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff8:	2b70      	cmp	r3, #112	@ 0x70
 8008ffa:	d01a      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0xa6>
 8008ffc:	2b70      	cmp	r3, #112	@ 0x70
 8008ffe:	d87b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	2b60      	cmp	r3, #96	@ 0x60
 8009002:	d050      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x11a>
 8009004:	2b60      	cmp	r3, #96	@ 0x60
 8009006:	d877      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009008:	2b50      	cmp	r3, #80	@ 0x50
 800900a:	d03c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0xfa>
 800900c:	2b50      	cmp	r3, #80	@ 0x50
 800900e:	d873      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009010:	2b40      	cmp	r3, #64	@ 0x40
 8009012:	d058      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x13a>
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	d86f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b30      	cmp	r3, #48	@ 0x30
 800901a:	d064      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 800901c:	2b30      	cmp	r3, #48	@ 0x30
 800901e:	d86b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b20      	cmp	r3, #32
 8009022:	d060      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d867      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05c      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d05a      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009030:	e062      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009042:	f000 fb41 	bl	80096c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	609a      	str	r2, [r3, #8]
      break;
 800905e:	e04f      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009070:	f000 fb2a 	bl	80096c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009082:	609a      	str	r2, [r3, #8]
      break;
 8009084:	e03c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009092:	461a      	mov	r2, r3
 8009094:	f000 fa9e 	bl	80095d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2150      	movs	r1, #80	@ 0x50
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 faf7 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80090a4:	e02c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090b2:	461a      	mov	r2, r3
 80090b4:	f000 fabd 	bl	8009632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2160      	movs	r1, #96	@ 0x60
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fae7 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80090c4:	e01c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d2:	461a      	mov	r2, r3
 80090d4:	f000 fa7e 	bl	80095d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2140      	movs	r1, #64	@ 0x40
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fad7 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80090e4:	e00c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 face 	bl	8009692 <TIM_ITRx_SetConfig>
      break;
 80090f6:	e003      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
      break;
 80090fc:	e000      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a46      	ldr	r2, [pc, #280]	@ (8009248 <TIM_Base_SetConfig+0x12c>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800913a:	d00f      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a43      	ldr	r2, [pc, #268]	@ (800924c <TIM_Base_SetConfig+0x130>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00b      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a42      	ldr	r2, [pc, #264]	@ (8009250 <TIM_Base_SetConfig+0x134>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a41      	ldr	r2, [pc, #260]	@ (8009254 <TIM_Base_SetConfig+0x138>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a40      	ldr	r2, [pc, #256]	@ (8009258 <TIM_Base_SetConfig+0x13c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d108      	bne.n	800916e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a35      	ldr	r2, [pc, #212]	@ (8009248 <TIM_Base_SetConfig+0x12c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d02b      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800917c:	d027      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a32      	ldr	r2, [pc, #200]	@ (800924c <TIM_Base_SetConfig+0x130>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d023      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a31      	ldr	r2, [pc, #196]	@ (8009250 <TIM_Base_SetConfig+0x134>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d01f      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a30      	ldr	r2, [pc, #192]	@ (8009254 <TIM_Base_SetConfig+0x138>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d01b      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a2f      	ldr	r2, [pc, #188]	@ (8009258 <TIM_Base_SetConfig+0x13c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d017      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a2e      	ldr	r2, [pc, #184]	@ (800925c <TIM_Base_SetConfig+0x140>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a2d      	ldr	r2, [pc, #180]	@ (8009260 <TIM_Base_SetConfig+0x144>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00f      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009264 <TIM_Base_SetConfig+0x148>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d00b      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a2b      	ldr	r2, [pc, #172]	@ (8009268 <TIM_Base_SetConfig+0x14c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d007      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a2a      	ldr	r2, [pc, #168]	@ (800926c <TIM_Base_SetConfig+0x150>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d003      	beq.n	80091ce <TIM_Base_SetConfig+0xb2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a29      	ldr	r2, [pc, #164]	@ (8009270 <TIM_Base_SetConfig+0x154>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d108      	bne.n	80091e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a10      	ldr	r2, [pc, #64]	@ (8009248 <TIM_Base_SetConfig+0x12c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d003      	beq.n	8009214 <TIM_Base_SetConfig+0xf8>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a12      	ldr	r2, [pc, #72]	@ (8009258 <TIM_Base_SetConfig+0x13c>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d103      	bne.n	800921c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b01      	cmp	r3, #1
 800922c:	d105      	bne.n	800923a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f023 0201 	bic.w	r2, r3, #1
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	611a      	str	r2, [r3, #16]
  }
}
 800923a:	bf00      	nop
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	40010000 	.word	0x40010000
 800924c:	40000400 	.word	0x40000400
 8009250:	40000800 	.word	0x40000800
 8009254:	40000c00 	.word	0x40000c00
 8009258:	40010400 	.word	0x40010400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800
 8009268:	40001800 	.word	0x40001800
 800926c:	40001c00 	.word	0x40001c00
 8009270:	40002000 	.word	0x40002000

08009274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	f023 0201 	bic.w	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0303 	bic.w	r3, r3, #3
 80092aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f023 0302 	bic.w	r3, r3, #2
 80092bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a20      	ldr	r2, [pc, #128]	@ (800934c <TIM_OC1_SetConfig+0xd8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d003      	beq.n	80092d8 <TIM_OC1_SetConfig+0x64>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009350 <TIM_OC1_SetConfig+0xdc>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d10c      	bne.n	80092f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f023 0308 	bic.w	r3, r3, #8
 80092de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	697a      	ldr	r2, [r7, #20]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f023 0304 	bic.w	r3, r3, #4
 80092f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a15      	ldr	r2, [pc, #84]	@ (800934c <TIM_OC1_SetConfig+0xd8>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d003      	beq.n	8009302 <TIM_OC1_SetConfig+0x8e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a14      	ldr	r2, [pc, #80]	@ (8009350 <TIM_OC1_SetConfig+0xdc>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d111      	bne.n	8009326 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	4313      	orrs	r3, r2
 800931a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	693a      	ldr	r2, [r7, #16]
 800932a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	621a      	str	r2, [r3, #32]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40010000 	.word	0x40010000
 8009350:	40010400 	.word	0x40010400

08009354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a1b      	ldr	r3, [r3, #32]
 8009368:	f023 0210 	bic.w	r2, r3, #16
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800938a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 0320 	bic.w	r3, r3, #32
 800939e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	011b      	lsls	r3, r3, #4
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a22      	ldr	r2, [pc, #136]	@ (8009438 <TIM_OC2_SetConfig+0xe4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d003      	beq.n	80093bc <TIM_OC2_SetConfig+0x68>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a21      	ldr	r2, [pc, #132]	@ (800943c <TIM_OC2_SetConfig+0xe8>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d10d      	bne.n	80093d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a17      	ldr	r2, [pc, #92]	@ (8009438 <TIM_OC2_SetConfig+0xe4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d003      	beq.n	80093e8 <TIM_OC2_SetConfig+0x94>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a16      	ldr	r2, [pc, #88]	@ (800943c <TIM_OC2_SetConfig+0xe8>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d113      	bne.n	8009410 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	697a      	ldr	r2, [r7, #20]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40010400 	.word	0x40010400

08009440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	021b      	lsls	r3, r3, #8
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a21      	ldr	r2, [pc, #132]	@ (8009520 <TIM_OC3_SetConfig+0xe0>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d003      	beq.n	80094a6 <TIM_OC3_SetConfig+0x66>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a20      	ldr	r2, [pc, #128]	@ (8009524 <TIM_OC3_SetConfig+0xe4>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d10d      	bne.n	80094c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	021b      	lsls	r3, r3, #8
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a16      	ldr	r2, [pc, #88]	@ (8009520 <TIM_OC3_SetConfig+0xe0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d003      	beq.n	80094d2 <TIM_OC3_SetConfig+0x92>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <TIM_OC3_SetConfig+0xe4>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d113      	bne.n	80094fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	4313      	orrs	r3, r2
 80094f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	621a      	str	r2, [r3, #32]
}
 8009514:	bf00      	nop
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	40010000 	.word	0x40010000
 8009524:	40010400 	.word	0x40010400

08009528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800955e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	4313      	orrs	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	031b      	lsls	r3, r3, #12
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a12      	ldr	r2, [pc, #72]	@ (80095cc <TIM_OC4_SetConfig+0xa4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d003      	beq.n	8009590 <TIM_OC4_SetConfig+0x68>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a11      	ldr	r2, [pc, #68]	@ (80095d0 <TIM_OC4_SetConfig+0xa8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d109      	bne.n	80095a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	019b      	lsls	r3, r3, #6
 800959e:	697a      	ldr	r2, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	621a      	str	r2, [r3, #32]
}
 80095be:	bf00      	nop
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40010400 	.word	0x40010400

080095d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f023 0201 	bic.w	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f023 030a 	bic.w	r3, r3, #10
 8009610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	621a      	str	r2, [r3, #32]
}
 8009626:	bf00      	nop
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009632:	b480      	push	{r7}
 8009634:	b087      	sub	sp, #28
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	f023 0210 	bic.w	r2, r3, #16
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800965c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	031b      	lsls	r3, r3, #12
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	4313      	orrs	r3, r2
 8009666:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800966e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	621a      	str	r2, [r3, #32]
}
 8009686:	bf00      	nop
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f043 0307 	orr.w	r3, r3, #7
 80096b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	609a      	str	r2, [r3, #8]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	021a      	lsls	r2, r3, #8
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	2201      	movs	r2, #1
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a1a      	ldr	r2, [r3, #32]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	43db      	mvns	r3, r3
 800972a:	401a      	ands	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6a1a      	ldr	r2, [r3, #32]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f003 031f 	and.w	r3, r3, #31
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	fa01 f303 	lsl.w	r3, r1, r3
 8009740:	431a      	orrs	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009764:	2b01      	cmp	r3, #1
 8009766:	d101      	bne.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009768:	2302      	movs	r3, #2
 800976a:	e05a      	b.n	8009822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2202      	movs	r2, #2
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a21      	ldr	r2, [pc, #132]	@ (8009830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d022      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b8:	d01d      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a1d      	ldr	r2, [pc, #116]	@ (8009834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d018      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a1b      	ldr	r2, [pc, #108]	@ (8009838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d013      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a1a      	ldr	r2, [pc, #104]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00e      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a18      	ldr	r2, [pc, #96]	@ (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d009      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a17      	ldr	r2, [pc, #92]	@ (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d004      	beq.n	80097f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a15      	ldr	r2, [pc, #84]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d10c      	bne.n	8009810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	4313      	orrs	r3, r2
 8009806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	40010000 	.word	0x40010000
 8009834:	40000400 	.word	0x40000400
 8009838:	40000800 	.word	0x40000800
 800983c:	40000c00 	.word	0x40000c00
 8009840:	40010400 	.word	0x40010400
 8009844:	40014000 	.word	0x40014000
 8009848:	40001800 	.word	0x40001800

0800984c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e042      	b.n	80098e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7fb ff30 	bl	80056d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2224      	movs	r2, #36	@ 0x24
 800987c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800988e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fdf3 	bl	800a47c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b20      	cmp	r3, #32
 800990a:	d175      	bne.n	80099f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <HAL_UART_Transmit+0x2c>
 8009912:	88fb      	ldrh	r3, [r7, #6]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e06e      	b.n	80099fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2221      	movs	r2, #33	@ 0x21
 8009926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800992a:	f7fc f8dd 	bl	8005ae8 <HAL_GetTick>
 800992e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	88fa      	ldrh	r2, [r7, #6]
 8009934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	88fa      	ldrh	r2, [r7, #6]
 800993a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009944:	d108      	bne.n	8009958 <HAL_UART_Transmit+0x6c>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	61bb      	str	r3, [r7, #24]
 8009956:	e003      	b.n	8009960 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009960:	e02e      	b.n	80099c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2200      	movs	r2, #0
 800996a:	2180      	movs	r1, #128	@ 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fb55 	bl	800a01c <UART_WaitOnFlagUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2220      	movs	r2, #32
 800997c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e03a      	b.n	80099fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10b      	bne.n	80099a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	3302      	adds	r3, #2
 800999e:	61bb      	str	r3, [r7, #24]
 80099a0:	e007      	b.n	80099b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	781a      	ldrb	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	3301      	adds	r3, #1
 80099b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1cb      	bne.n	8009962 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2200      	movs	r2, #0
 80099d2:	2140      	movs	r1, #64	@ 0x40
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fb21 	bl	800a01c <UART_WaitOnFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e006      	b.n	80099fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	e000      	b.n	80099fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80099f8:	2302      	movs	r3, #2
  }
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b08c      	sub	sp, #48	@ 0x30
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d14a      	bne.n	8009ab2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e043      	b.n	8009ab4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2200      	movs	r2, #0
 8009a36:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8009a38:	88fb      	ldrh	r3, [r7, #6]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fb45 	bl	800a0ce <UART_Start_Receive_IT>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d12c      	bne.n	8009aac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d125      	bne.n	8009aa6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	330c      	adds	r3, #12
 8009a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f043 0310 	orr.w	r3, r3, #16
 8009a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8009a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6a39      	ldr	r1, [r7, #32]
 8009a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e5      	bne.n	8009a70 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8009aa4:	e002      	b.n	8009aac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ab0:	e000      	b.n	8009ab4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8009ab2:	2302      	movs	r3, #2
  }
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3730      	adds	r7, #48	@ 0x30
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b0ba      	sub	sp, #232	@ 0xe8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	f003 030f 	and.w	r3, r3, #15
 8009af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10f      	bne.n	8009b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b06:	f003 0320 	and.w	r3, r3, #32
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d009      	beq.n	8009b22 <HAL_UART_IRQHandler+0x66>
 8009b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fbf0 	bl	800a300 <UART_Receive_IT>
      return;
 8009b20:	e25b      	b.n	8009fda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80de 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x22c>
 8009b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80d1 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <HAL_UART_IRQHandler+0xae>
 8009b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d005      	beq.n	8009b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b62:	f043 0201 	orr.w	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b6e:	f003 0304 	and.w	r3, r3, #4
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <HAL_UART_IRQHandler+0xd2>
 8009b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d005      	beq.n	8009b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b86:	f043 0202 	orr.w	r2, r3, #2
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <HAL_UART_IRQHandler+0xf6>
 8009b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009baa:	f043 0204 	orr.w	r2, r3, #4
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb6:	f003 0308 	and.w	r3, r3, #8
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <HAL_UART_IRQHandler+0x126>
 8009bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bc2:	f003 0320 	and.w	r3, r3, #32
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bda:	f043 0208 	orr.w	r2, r3, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 81f2 	beq.w	8009fd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d008      	beq.n	8009c0a <HAL_UART_IRQHandler+0x14e>
 8009bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bfc:	f003 0320 	and.w	r3, r3, #32
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fb7b 	bl	800a300 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c14:	2b40      	cmp	r3, #64	@ 0x40
 8009c16:	bf0c      	ite	eq
 8009c18:	2301      	moveq	r3, #1
 8009c1a:	2300      	movne	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c26:	f003 0308 	and.w	r3, r3, #8
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d103      	bne.n	8009c36 <HAL_UART_IRQHandler+0x17a>
 8009c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d04f      	beq.n	8009cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fa83 	bl	800a142 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c46:	2b40      	cmp	r3, #64	@ 0x40
 8009c48:	d141      	bne.n	8009cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3314      	adds	r3, #20
 8009c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3314      	adds	r3, #20
 8009c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009c76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1d9      	bne.n	8009c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d013      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8009e9c <HAL_UART_IRQHandler+0x3e0>)
 8009ca4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fc f8cd 	bl	8005e4a <HAL_DMA_Abort_IT>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d016      	beq.n	8009ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc4:	e00e      	b.n	8009ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f99e 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ccc:	e00a      	b.n	8009ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f99a 	bl	800a008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd4:	e006      	b.n	8009ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f996 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009ce2:	e175      	b.n	8009fd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce4:	bf00      	nop
    return;
 8009ce6:	e173      	b.n	8009fd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	f040 814f 	bne.w	8009f90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf6:	f003 0310 	and.w	r3, r3, #16
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8148 	beq.w	8009f90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d04:	f003 0310 	and.w	r3, r3, #16
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 8141 	beq.w	8009f90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60bb      	str	r3, [r7, #8]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60bb      	str	r3, [r7, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	60bb      	str	r3, [r7, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2e:	2b40      	cmp	r3, #64	@ 0x40
 8009d30:	f040 80b6 	bne.w	8009ea0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 8145 	beq.w	8009fd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d52:	429a      	cmp	r2, r3
 8009d54:	f080 813e 	bcs.w	8009fd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009d5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6a:	f000 8088 	beq.w	8009e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	330c      	adds	r3, #12
 8009d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	330c      	adds	r3, #12
 8009d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1d9      	bne.n	8009d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3314      	adds	r3, #20
 8009dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dcc:	f023 0301 	bic.w	r3, r3, #1
 8009dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3314      	adds	r3, #20
 8009dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009dde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e1      	bne.n	8009dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3314      	adds	r3, #20
 8009dfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e00:	e853 3f00 	ldrex	r3, [r3]
 8009e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3314      	adds	r3, #20
 8009e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1e3      	bne.n	8009df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e46:	e853 3f00 	ldrex	r3, [r3]
 8009e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e4e:	f023 0310 	bic.w	r3, r3, #16
 8009e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009e60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e3      	bne.n	8009e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fb ff76 	bl	8005d6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2202      	movs	r2, #2
 8009e82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fa ffb5 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e9a:	e09b      	b.n	8009fd4 <HAL_UART_IRQHandler+0x518>
 8009e9c:	0800a209 	.word	0x0800a209
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 808e 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8089 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	330c      	adds	r3, #12
 8009ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8009eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1e3      	bne.n	8009ec6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3314      	adds	r3, #20
 8009f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f0e:	6a3b      	ldr	r3, [r7, #32]
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3314      	adds	r3, #20
 8009f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2a:	e841 2300 	strex	r3, r2, [r1]
 8009f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1e3      	bne.n	8009efe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2220      	movs	r2, #32
 8009f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0310 	bic.w	r3, r3, #16
 8009f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	330c      	adds	r3, #12
 8009f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009f68:	61fa      	str	r2, [r7, #28]
 8009f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6c:	69b9      	ldr	r1, [r7, #24]
 8009f6e:	69fa      	ldr	r2, [r7, #28]
 8009f70:	e841 2300 	strex	r3, r2, [r1]
 8009f74:	617b      	str	r3, [r7, #20]
   return(result);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1e3      	bne.n	8009f44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7fa ff3b 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f8e:	e023      	b.n	8009fd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d009      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x4f4>
 8009f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d003      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f941 	bl	800a230 <UART_Transmit_IT>
    return;
 8009fae:	e014      	b.n	8009fda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00e      	beq.n	8009fda <HAL_UART_IRQHandler+0x51e>
 8009fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f981 	bl	800a2d0 <UART_EndTransmit_IT>
    return;
 8009fce:	e004      	b.n	8009fda <HAL_UART_IRQHandler+0x51e>
    return;
 8009fd0:	bf00      	nop
 8009fd2:	e002      	b.n	8009fda <HAL_UART_IRQHandler+0x51e>
      return;
 8009fd4:	bf00      	nop
 8009fd6:	e000      	b.n	8009fda <HAL_UART_IRQHandler+0x51e>
      return;
 8009fd8:	bf00      	nop
  }
}
 8009fda:	37e8      	adds	r7, #232	@ 0xe8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	4613      	mov	r3, r2
 800a02a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a02c:	e03b      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a034:	d037      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a036:	f7fb fd57 	bl	8005ae8 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	6a3a      	ldr	r2, [r7, #32]
 800a042:	429a      	cmp	r2, r3
 800a044:	d302      	bcc.n	800a04c <UART_WaitOnFlagUntilTimeout+0x30>
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e03a      	b.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f003 0304 	and.w	r3, r3, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d023      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b80      	cmp	r3, #128	@ 0x80
 800a062:	d020      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b40      	cmp	r3, #64	@ 0x40
 800a068:	d01d      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b08      	cmp	r3, #8
 800a076:	d116      	bne.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	617b      	str	r3, [r7, #20]
 800a08c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 f857 	bl	800a142 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2208      	movs	r2, #8
 800a098:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e00f      	b.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2301      	moveq	r3, #1
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d0b4      	beq.n	800a02e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2222      	movs	r2, #34	@ 0x22
 800a0f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a112:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695a      	ldr	r2, [r3, #20]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0220 	orr.w	r2, r2, #32
 800a132:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a142:	b480      	push	{r7}
 800a144:	b095      	sub	sp, #84	@ 0x54
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	330c      	adds	r3, #12
 800a168:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a16a:	643a      	str	r2, [r7, #64]	@ 0x40
 800a16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a170:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e5      	bne.n	800a14a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3314      	adds	r3, #20
 800a184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	f023 0301 	bic.w	r3, r3, #1
 800a194:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3314      	adds	r3, #20
 800a19c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a19e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d119      	bne.n	800a1ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	330c      	adds	r3, #12
 800a1c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f023 0310 	bic.w	r3, r3, #16
 800a1d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1da:	61ba      	str	r2, [r7, #24]
 800a1dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6979      	ldr	r1, [r7, #20]
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a1fc:	bf00      	nop
 800a1fe:	3754      	adds	r7, #84	@ 0x54
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fef0 	bl	800a008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a228:	bf00      	nop
 800a22a:	3710      	adds	r7, #16
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b21      	cmp	r3, #33	@ 0x21
 800a242:	d13e      	bne.n	800a2c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a24c:	d114      	bne.n	800a278 <UART_Transmit_IT+0x48>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d110      	bne.n	800a278 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a26a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	1c9a      	adds	r2, r3, #2
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	621a      	str	r2, [r3, #32]
 800a276:	e008      	b.n	800a28a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	1c59      	adds	r1, r3, #1
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6211      	str	r1, [r2, #32]
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a28e:	b29b      	uxth	r3, r3
 800a290:	3b01      	subs	r3, #1
 800a292:	b29b      	uxth	r3, r3
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4619      	mov	r1, r3
 800a298:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10f      	bne.n	800a2be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	68da      	ldr	r2, [r3, #12]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a2ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	e000      	b.n	800a2c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a2c2:	2302      	movs	r3, #2
  }
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a2e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff fe75 	bl	8009fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a2f6:	2300      	movs	r3, #0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b08c      	sub	sp, #48	@ 0x30
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b22      	cmp	r3, #34	@ 0x22
 800a312:	f040 80ae 	bne.w	800a472 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a31e:	d117      	bne.n	800a350 <UART_Receive_IT+0x50>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d113      	bne.n	800a350 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a328:	2300      	movs	r3, #0
 800a32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33e:	b29a      	uxth	r2, r3
 800a340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a342:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a348:	1c9a      	adds	r2, r3, #2
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a34e:	e026      	b.n	800a39e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a362:	d007      	beq.n	800a374 <UART_Receive_IT+0x74>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10a      	bne.n	800a382 <UART_Receive_IT+0x82>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e008      	b.n	800a394 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a38e:	b2da      	uxtb	r2, r3
 800a390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a392:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a398:	1c5a      	adds	r2, r3, #1
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d15d      	bne.n	800a46e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0220 	bic.w	r2, r2, #32
 800a3c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a3d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	695a      	ldr	r2, [r3, #20]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0201 	bic.w	r2, r2, #1
 800a3e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d135      	bne.n	800a464 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	330c      	adds	r3, #12
 800a404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	e853 3f00 	ldrex	r3, [r3]
 800a40c:	613b      	str	r3, [r7, #16]
   return(result);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f023 0310 	bic.w	r3, r3, #16
 800a414:	627b      	str	r3, [r7, #36]	@ 0x24
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	330c      	adds	r3, #12
 800a41c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41e:	623a      	str	r2, [r7, #32]
 800a420:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a422:	69f9      	ldr	r1, [r7, #28]
 800a424:	6a3a      	ldr	r2, [r7, #32]
 800a426:	e841 2300 	strex	r3, r2, [r1]
 800a42a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1e5      	bne.n	800a3fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	2b10      	cmp	r3, #16
 800a43e:	d10a      	bne.n	800a456 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a440:	2300      	movs	r3, #0
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fa fcd1 	bl	8004e04 <HAL_UARTEx_RxEventCallback>
 800a462:	e002      	b.n	800a46a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7ff fdc5 	bl	8009ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	e002      	b.n	800a474 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	e000      	b.n	800a474 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a472:	2302      	movs	r3, #2
  }
}
 800a474:	4618      	mov	r0, r3
 800a476:	3730      	adds	r7, #48	@ 0x30
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a480:	b0c0      	sub	sp, #256	@ 0x100
 800a482:	af00      	add	r7, sp, #0
 800a484:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a498:	68d9      	ldr	r1, [r3, #12]
 800a49a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	ea40 0301 	orr.w	r3, r0, r1
 800a4a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a4a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a4d4:	f021 010c 	bic.w	r1, r1, #12
 800a4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a4e2:	430b      	orrs	r3, r1
 800a4e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4f6:	6999      	ldr	r1, [r3, #24]
 800a4f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	ea40 0301 	orr.w	r3, r0, r1
 800a502:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b8f      	ldr	r3, [pc, #572]	@ (800a748 <UART_SetConfig+0x2cc>)
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d005      	beq.n	800a51c <UART_SetConfig+0xa0>
 800a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4b8d      	ldr	r3, [pc, #564]	@ (800a74c <UART_SetConfig+0x2d0>)
 800a518:	429a      	cmp	r2, r3
 800a51a:	d104      	bne.n	800a526 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a51c:	f7fe f86c 	bl	80085f8 <HAL_RCC_GetPCLK2Freq>
 800a520:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a524:	e003      	b.n	800a52e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a526:	f7fe f853 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800a52a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a538:	f040 810c 	bne.w	800a754 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a53c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a540:	2200      	movs	r2, #0
 800a542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a546:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a54a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a54e:	4622      	mov	r2, r4
 800a550:	462b      	mov	r3, r5
 800a552:	1891      	adds	r1, r2, r2
 800a554:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a556:	415b      	adcs	r3, r3
 800a558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a55a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a55e:	4621      	mov	r1, r4
 800a560:	eb12 0801 	adds.w	r8, r2, r1
 800a564:	4629      	mov	r1, r5
 800a566:	eb43 0901 	adc.w	r9, r3, r1
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	f04f 0300 	mov.w	r3, #0
 800a572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a57a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a57e:	4690      	mov	r8, r2
 800a580:	4699      	mov	r9, r3
 800a582:	4623      	mov	r3, r4
 800a584:	eb18 0303 	adds.w	r3, r8, r3
 800a588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a58c:	462b      	mov	r3, r5
 800a58e:	eb49 0303 	adc.w	r3, r9, r3
 800a592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a5a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a5a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	18db      	adds	r3, r3, r3
 800a5ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	eb42 0303 	adc.w	r3, r2, r3
 800a5b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a5bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a5c0:	f7f6 fb82 	bl	8000cc8 <__aeabi_uldivmod>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	4b61      	ldr	r3, [pc, #388]	@ (800a750 <UART_SetConfig+0x2d4>)
 800a5ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a5ce:	095b      	lsrs	r3, r3, #5
 800a5d0:	011c      	lsls	r4, r3, #4
 800a5d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a5e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	464b      	mov	r3, r9
 800a5e8:	1891      	adds	r1, r2, r2
 800a5ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a5ec:	415b      	adcs	r3, r3
 800a5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a5f4:	4641      	mov	r1, r8
 800a5f6:	eb12 0a01 	adds.w	sl, r2, r1
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	eb43 0b01 	adc.w	fp, r3, r1
 800a600:	f04f 0200 	mov.w	r2, #0
 800a604:	f04f 0300 	mov.w	r3, #0
 800a608:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a60c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a610:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a614:	4692      	mov	sl, r2
 800a616:	469b      	mov	fp, r3
 800a618:	4643      	mov	r3, r8
 800a61a:	eb1a 0303 	adds.w	r3, sl, r3
 800a61e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a622:	464b      	mov	r3, r9
 800a624:	eb4b 0303 	adc.w	r3, fp, r3
 800a628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a62c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a638:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a63c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a640:	460b      	mov	r3, r1
 800a642:	18db      	adds	r3, r3, r3
 800a644:	643b      	str	r3, [r7, #64]	@ 0x40
 800a646:	4613      	mov	r3, r2
 800a648:	eb42 0303 	adc.w	r3, r2, r3
 800a64c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a652:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a656:	f7f6 fb37 	bl	8000cc8 <__aeabi_uldivmod>
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	4b3b      	ldr	r3, [pc, #236]	@ (800a750 <UART_SetConfig+0x2d4>)
 800a662:	fba3 2301 	umull	r2, r3, r3, r1
 800a666:	095b      	lsrs	r3, r3, #5
 800a668:	2264      	movs	r2, #100	@ 0x64
 800a66a:	fb02 f303 	mul.w	r3, r2, r3
 800a66e:	1acb      	subs	r3, r1, r3
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a676:	4b36      	ldr	r3, [pc, #216]	@ (800a750 <UART_SetConfig+0x2d4>)
 800a678:	fba3 2302 	umull	r2, r3, r3, r2
 800a67c:	095b      	lsrs	r3, r3, #5
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a684:	441c      	add	r4, r3
 800a686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a690:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a694:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	1891      	adds	r1, r2, r2
 800a69e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a6a0:	415b      	adcs	r3, r3
 800a6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	1851      	adds	r1, r2, r1
 800a6ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	414b      	adcs	r3, r1
 800a6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6b4:	f04f 0200 	mov.w	r2, #0
 800a6b8:	f04f 0300 	mov.w	r3, #0
 800a6bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a6c0:	4659      	mov	r1, fp
 800a6c2:	00cb      	lsls	r3, r1, #3
 800a6c4:	4651      	mov	r1, sl
 800a6c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6ca:	4651      	mov	r1, sl
 800a6cc:	00ca      	lsls	r2, r1, #3
 800a6ce:	4610      	mov	r0, r2
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	4642      	mov	r2, r8
 800a6d6:	189b      	adds	r3, r3, r2
 800a6d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6dc:	464b      	mov	r3, r9
 800a6de:	460a      	mov	r2, r1
 800a6e0:	eb42 0303 	adc.w	r3, r2, r3
 800a6e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a6f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	18db      	adds	r3, r3, r3
 800a700:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a702:	4613      	mov	r3, r2
 800a704:	eb42 0303 	adc.w	r3, r2, r3
 800a708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a70a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a70e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a712:	f7f6 fad9 	bl	8000cc8 <__aeabi_uldivmod>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4b0d      	ldr	r3, [pc, #52]	@ (800a750 <UART_SetConfig+0x2d4>)
 800a71c:	fba3 1302 	umull	r1, r3, r3, r2
 800a720:	095b      	lsrs	r3, r3, #5
 800a722:	2164      	movs	r1, #100	@ 0x64
 800a724:	fb01 f303 	mul.w	r3, r1, r3
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	3332      	adds	r3, #50	@ 0x32
 800a72e:	4a08      	ldr	r2, [pc, #32]	@ (800a750 <UART_SetConfig+0x2d4>)
 800a730:	fba2 2303 	umull	r2, r3, r2, r3
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	f003 0207 	and.w	r2, r3, #7
 800a73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4422      	add	r2, r4
 800a742:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a744:	e106      	b.n	800a954 <UART_SetConfig+0x4d8>
 800a746:	bf00      	nop
 800a748:	40011000 	.word	0x40011000
 800a74c:	40011400 	.word	0x40011400
 800a750:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a758:	2200      	movs	r2, #0
 800a75a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a75e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a762:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a766:	4642      	mov	r2, r8
 800a768:	464b      	mov	r3, r9
 800a76a:	1891      	adds	r1, r2, r2
 800a76c:	6239      	str	r1, [r7, #32]
 800a76e:	415b      	adcs	r3, r3
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
 800a772:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a776:	4641      	mov	r1, r8
 800a778:	1854      	adds	r4, r2, r1
 800a77a:	4649      	mov	r1, r9
 800a77c:	eb43 0501 	adc.w	r5, r3, r1
 800a780:	f04f 0200 	mov.w	r2, #0
 800a784:	f04f 0300 	mov.w	r3, #0
 800a788:	00eb      	lsls	r3, r5, #3
 800a78a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a78e:	00e2      	lsls	r2, r4, #3
 800a790:	4614      	mov	r4, r2
 800a792:	461d      	mov	r5, r3
 800a794:	4643      	mov	r3, r8
 800a796:	18e3      	adds	r3, r4, r3
 800a798:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a79c:	464b      	mov	r3, r9
 800a79e:	eb45 0303 	adc.w	r3, r5, r3
 800a7a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a7b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	f04f 0300 	mov.w	r3, #0
 800a7be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	008b      	lsls	r3, r1, #2
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	008a      	lsls	r2, r1, #2
 800a7d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a7d4:	f7f6 fa78 	bl	8000cc8 <__aeabi_uldivmod>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4b60      	ldr	r3, [pc, #384]	@ (800a960 <UART_SetConfig+0x4e4>)
 800a7de:	fba3 2302 	umull	r2, r3, r3, r2
 800a7e2:	095b      	lsrs	r3, r3, #5
 800a7e4:	011c      	lsls	r4, r3, #4
 800a7e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a7f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a7f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	1891      	adds	r1, r2, r2
 800a7fe:	61b9      	str	r1, [r7, #24]
 800a800:	415b      	adcs	r3, r3
 800a802:	61fb      	str	r3, [r7, #28]
 800a804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a808:	4641      	mov	r1, r8
 800a80a:	1851      	adds	r1, r2, r1
 800a80c:	6139      	str	r1, [r7, #16]
 800a80e:	4649      	mov	r1, r9
 800a810:	414b      	adcs	r3, r1
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a820:	4659      	mov	r1, fp
 800a822:	00cb      	lsls	r3, r1, #3
 800a824:	4651      	mov	r1, sl
 800a826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a82a:	4651      	mov	r1, sl
 800a82c:	00ca      	lsls	r2, r1, #3
 800a82e:	4610      	mov	r0, r2
 800a830:	4619      	mov	r1, r3
 800a832:	4603      	mov	r3, r0
 800a834:	4642      	mov	r2, r8
 800a836:	189b      	adds	r3, r3, r2
 800a838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a83c:	464b      	mov	r3, r9
 800a83e:	460a      	mov	r2, r1
 800a840:	eb42 0303 	adc.w	r3, r2, r3
 800a844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a852:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a854:	f04f 0200 	mov.w	r2, #0
 800a858:	f04f 0300 	mov.w	r3, #0
 800a85c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a860:	4649      	mov	r1, r9
 800a862:	008b      	lsls	r3, r1, #2
 800a864:	4641      	mov	r1, r8
 800a866:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a86a:	4641      	mov	r1, r8
 800a86c:	008a      	lsls	r2, r1, #2
 800a86e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a872:	f7f6 fa29 	bl	8000cc8 <__aeabi_uldivmod>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4611      	mov	r1, r2
 800a87c:	4b38      	ldr	r3, [pc, #224]	@ (800a960 <UART_SetConfig+0x4e4>)
 800a87e:	fba3 2301 	umull	r2, r3, r3, r1
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	2264      	movs	r2, #100	@ 0x64
 800a886:	fb02 f303 	mul.w	r3, r2, r3
 800a88a:	1acb      	subs	r3, r1, r3
 800a88c:	011b      	lsls	r3, r3, #4
 800a88e:	3332      	adds	r3, #50	@ 0x32
 800a890:	4a33      	ldr	r2, [pc, #204]	@ (800a960 <UART_SetConfig+0x4e4>)
 800a892:	fba2 2303 	umull	r2, r3, r2, r3
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a89c:	441c      	add	r4, r3
 800a89e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a8a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a8a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a8ac:	4642      	mov	r2, r8
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	1891      	adds	r1, r2, r2
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	415b      	adcs	r3, r3
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8bc:	4641      	mov	r1, r8
 800a8be:	1851      	adds	r1, r2, r1
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	414b      	adcs	r3, r1
 800a8c6:	607b      	str	r3, [r7, #4]
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	f04f 0300 	mov.w	r3, #0
 800a8d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	00cb      	lsls	r3, r1, #3
 800a8d8:	4651      	mov	r1, sl
 800a8da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8de:	4651      	mov	r1, sl
 800a8e0:	00ca      	lsls	r2, r1, #3
 800a8e2:	4610      	mov	r0, r2
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	189b      	adds	r3, r3, r2
 800a8ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	460a      	mov	r2, r1
 800a8f2:	eb42 0303 	adc.w	r3, r2, r3
 800a8f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	663b      	str	r3, [r7, #96]	@ 0x60
 800a902:	667a      	str	r2, [r7, #100]	@ 0x64
 800a904:	f04f 0200 	mov.w	r2, #0
 800a908:	f04f 0300 	mov.w	r3, #0
 800a90c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a910:	4649      	mov	r1, r9
 800a912:	008b      	lsls	r3, r1, #2
 800a914:	4641      	mov	r1, r8
 800a916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a91a:	4641      	mov	r1, r8
 800a91c:	008a      	lsls	r2, r1, #2
 800a91e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a922:	f7f6 f9d1 	bl	8000cc8 <__aeabi_uldivmod>
 800a926:	4602      	mov	r2, r0
 800a928:	460b      	mov	r3, r1
 800a92a:	4b0d      	ldr	r3, [pc, #52]	@ (800a960 <UART_SetConfig+0x4e4>)
 800a92c:	fba3 1302 	umull	r1, r3, r3, r2
 800a930:	095b      	lsrs	r3, r3, #5
 800a932:	2164      	movs	r1, #100	@ 0x64
 800a934:	fb01 f303 	mul.w	r3, r1, r3
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	011b      	lsls	r3, r3, #4
 800a93c:	3332      	adds	r3, #50	@ 0x32
 800a93e:	4a08      	ldr	r2, [pc, #32]	@ (800a960 <UART_SetConfig+0x4e4>)
 800a940:	fba2 2303 	umull	r2, r3, r2, r3
 800a944:	095b      	lsrs	r3, r3, #5
 800a946:	f003 020f 	and.w	r2, r3, #15
 800a94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4422      	add	r2, r4
 800a952:	609a      	str	r2, [r3, #8]
}
 800a954:	bf00      	nop
 800a956:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a95a:	46bd      	mov	sp, r7
 800a95c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a960:	51eb851f 	.word	0x51eb851f

0800a964 <atof>:
 800a964:	2100      	movs	r1, #0
 800a966:	f000 be07 	b.w	800b578 <strtod>

0800a96a <atoi>:
 800a96a:	220a      	movs	r2, #10
 800a96c:	2100      	movs	r1, #0
 800a96e:	f000 be89 	b.w	800b684 <strtol>

0800a972 <sulp>:
 800a972:	b570      	push	{r4, r5, r6, lr}
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	ec45 4b10 	vmov	d0, r4, r5
 800a97c:	4616      	mov	r6, r2
 800a97e:	f003 fafb 	bl	800df78 <__ulp>
 800a982:	ec51 0b10 	vmov	r0, r1, d0
 800a986:	b17e      	cbz	r6, 800a9a8 <sulp+0x36>
 800a988:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a98c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a990:	2b00      	cmp	r3, #0
 800a992:	dd09      	ble.n	800a9a8 <sulp+0x36>
 800a994:	051b      	lsls	r3, r3, #20
 800a996:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a99a:	2400      	movs	r4, #0
 800a99c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	462b      	mov	r3, r5
 800a9a4:	f7f5 fe48 	bl	8000638 <__aeabi_dmul>
 800a9a8:	ec41 0b10 	vmov	d0, r0, r1
 800a9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a9b0 <_strtod_l>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	b09f      	sub	sp, #124	@ 0x7c
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9be:	9005      	str	r0, [sp, #20]
 800a9c0:	f04f 0a00 	mov.w	sl, #0
 800a9c4:	f04f 0b00 	mov.w	fp, #0
 800a9c8:	460a      	mov	r2, r1
 800a9ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9cc:	7811      	ldrb	r1, [r2, #0]
 800a9ce:	292b      	cmp	r1, #43	@ 0x2b
 800a9d0:	d04a      	beq.n	800aa68 <_strtod_l+0xb8>
 800a9d2:	d838      	bhi.n	800aa46 <_strtod_l+0x96>
 800a9d4:	290d      	cmp	r1, #13
 800a9d6:	d832      	bhi.n	800aa3e <_strtod_l+0x8e>
 800a9d8:	2908      	cmp	r1, #8
 800a9da:	d832      	bhi.n	800aa42 <_strtod_l+0x92>
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d03b      	beq.n	800aa58 <_strtod_l+0xa8>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a9e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9e6:	782a      	ldrb	r2, [r5, #0]
 800a9e8:	2a30      	cmp	r2, #48	@ 0x30
 800a9ea:	f040 80b3 	bne.w	800ab54 <_strtod_l+0x1a4>
 800a9ee:	786a      	ldrb	r2, [r5, #1]
 800a9f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9f4:	2a58      	cmp	r2, #88	@ 0x58
 800a9f6:	d16e      	bne.n	800aad6 <_strtod_l+0x126>
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4a8e      	ldr	r2, [pc, #568]	@ (800ac3c <_strtod_l+0x28c>)
 800aa04:	9805      	ldr	r0, [sp, #20]
 800aa06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa08:	a919      	add	r1, sp, #100	@ 0x64
 800aa0a:	f002 fba7 	bl	800d15c <__gethex>
 800aa0e:	f010 060f 	ands.w	r6, r0, #15
 800aa12:	4604      	mov	r4, r0
 800aa14:	d005      	beq.n	800aa22 <_strtod_l+0x72>
 800aa16:	2e06      	cmp	r6, #6
 800aa18:	d128      	bne.n	800aa6c <_strtod_l+0xbc>
 800aa1a:	3501      	adds	r5, #1
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 858e 	bne.w	800b546 <_strtod_l+0xb96>
 800aa2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa2c:	b1cb      	cbz	r3, 800aa62 <_strtod_l+0xb2>
 800aa2e:	4652      	mov	r2, sl
 800aa30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa34:	ec43 2b10 	vmov	d0, r2, r3
 800aa38:	b01f      	add	sp, #124	@ 0x7c
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	2920      	cmp	r1, #32
 800aa40:	d1ce      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa42:	3201      	adds	r2, #1
 800aa44:	e7c1      	b.n	800a9ca <_strtod_l+0x1a>
 800aa46:	292d      	cmp	r1, #45	@ 0x2d
 800aa48:	d1ca      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa4e:	1c51      	adds	r1, r2, #1
 800aa50:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa52:	7852      	ldrb	r2, [r2, #1]
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	d1c5      	bne.n	800a9e4 <_strtod_l+0x34>
 800aa58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f040 8570 	bne.w	800b542 <_strtod_l+0xb92>
 800aa62:	4652      	mov	r2, sl
 800aa64:	465b      	mov	r3, fp
 800aa66:	e7e5      	b.n	800aa34 <_strtod_l+0x84>
 800aa68:	2100      	movs	r1, #0
 800aa6a:	e7ef      	b.n	800aa4c <_strtod_l+0x9c>
 800aa6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa6e:	b13a      	cbz	r2, 800aa80 <_strtod_l+0xd0>
 800aa70:	2135      	movs	r1, #53	@ 0x35
 800aa72:	a81c      	add	r0, sp, #112	@ 0x70
 800aa74:	f003 fb7a 	bl	800e16c <__copybits>
 800aa78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa7a:	9805      	ldr	r0, [sp, #20]
 800aa7c:	f002 ff48 	bl	800d910 <_Bfree>
 800aa80:	3e01      	subs	r6, #1
 800aa82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa84:	2e04      	cmp	r6, #4
 800aa86:	d806      	bhi.n	800aa96 <_strtod_l+0xe6>
 800aa88:	e8df f006 	tbb	[pc, r6]
 800aa8c:	201d0314 	.word	0x201d0314
 800aa90:	14          	.byte	0x14
 800aa91:	00          	.byte	0x00
 800aa92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa96:	05e1      	lsls	r1, r4, #23
 800aa98:	bf48      	it	mi
 800aa9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaa2:	0d1b      	lsrs	r3, r3, #20
 800aaa4:	051b      	lsls	r3, r3, #20
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1bb      	bne.n	800aa22 <_strtod_l+0x72>
 800aaaa:	f001 fc0d 	bl	800c2c8 <__errno>
 800aaae:	2322      	movs	r3, #34	@ 0x22
 800aab0:	6003      	str	r3, [r0, #0]
 800aab2:	e7b6      	b.n	800aa22 <_strtod_l+0x72>
 800aab4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aab8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aabc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aac0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aac4:	e7e7      	b.n	800aa96 <_strtod_l+0xe6>
 800aac6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ac44 <_strtod_l+0x294>
 800aaca:	e7e4      	b.n	800aa96 <_strtod_l+0xe6>
 800aacc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aad0:	f04f 3aff 	mov.w	sl, #4294967295
 800aad4:	e7df      	b.n	800aa96 <_strtod_l+0xe6>
 800aad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	9219      	str	r2, [sp, #100]	@ 0x64
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b30      	cmp	r3, #48	@ 0x30
 800aae0:	d0f9      	beq.n	800aad6 <_strtod_l+0x126>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d09d      	beq.n	800aa22 <_strtod_l+0x72>
 800aae6:	2301      	movs	r3, #1
 800aae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaec:	930c      	str	r3, [sp, #48]	@ 0x30
 800aaee:	2300      	movs	r3, #0
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaf4:	461f      	mov	r7, r3
 800aaf6:	220a      	movs	r2, #10
 800aaf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aafa:	7805      	ldrb	r5, [r0, #0]
 800aafc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ab00:	b2d9      	uxtb	r1, r3
 800ab02:	2909      	cmp	r1, #9
 800ab04:	d928      	bls.n	800ab58 <_strtod_l+0x1a8>
 800ab06:	494e      	ldr	r1, [pc, #312]	@ (800ac40 <_strtod_l+0x290>)
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f001 fb6d 	bl	800c1e8 <strncmp>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d032      	beq.n	800ab78 <_strtod_l+0x1c8>
 800ab12:	2000      	movs	r0, #0
 800ab14:	462a      	mov	r2, r5
 800ab16:	4681      	mov	r9, r0
 800ab18:	463d      	mov	r5, r7
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2a65      	cmp	r2, #101	@ 0x65
 800ab1e:	d001      	beq.n	800ab24 <_strtod_l+0x174>
 800ab20:	2a45      	cmp	r2, #69	@ 0x45
 800ab22:	d114      	bne.n	800ab4e <_strtod_l+0x19e>
 800ab24:	b91d      	cbnz	r5, 800ab2e <_strtod_l+0x17e>
 800ab26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab28:	4302      	orrs	r2, r0
 800ab2a:	d095      	beq.n	800aa58 <_strtod_l+0xa8>
 800ab2c:	2500      	movs	r5, #0
 800ab2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab30:	1c62      	adds	r2, r4, #1
 800ab32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab34:	7862      	ldrb	r2, [r4, #1]
 800ab36:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab38:	d077      	beq.n	800ac2a <_strtod_l+0x27a>
 800ab3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab3c:	d07b      	beq.n	800ac36 <_strtod_l+0x286>
 800ab3e:	f04f 0c00 	mov.w	ip, #0
 800ab42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab46:	2909      	cmp	r1, #9
 800ab48:	f240 8082 	bls.w	800ac50 <_strtod_l+0x2a0>
 800ab4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	e0a2      	b.n	800ac9a <_strtod_l+0x2ea>
 800ab54:	2300      	movs	r3, #0
 800ab56:	e7c7      	b.n	800aae8 <_strtod_l+0x138>
 800ab58:	2f08      	cmp	r7, #8
 800ab5a:	bfd5      	itete	le
 800ab5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ab5e:	9908      	ldrgt	r1, [sp, #32]
 800ab60:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ab68:	f100 0001 	add.w	r0, r0, #1
 800ab6c:	bfd4      	ite	le
 800ab6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ab70:	9308      	strgt	r3, [sp, #32]
 800ab72:	3701      	adds	r7, #1
 800ab74:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab76:	e7bf      	b.n	800aaf8 <_strtod_l+0x148>
 800ab78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab7e:	785a      	ldrb	r2, [r3, #1]
 800ab80:	b37f      	cbz	r7, 800abe2 <_strtod_l+0x232>
 800ab82:	4681      	mov	r9, r0
 800ab84:	463d      	mov	r5, r7
 800ab86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab8a:	2b09      	cmp	r3, #9
 800ab8c:	d912      	bls.n	800abb4 <_strtod_l+0x204>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e7c4      	b.n	800ab1c <_strtod_l+0x16c>
 800ab92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab98:	785a      	ldrb	r2, [r3, #1]
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	2a30      	cmp	r2, #48	@ 0x30
 800ab9e:	d0f8      	beq.n	800ab92 <_strtod_l+0x1e2>
 800aba0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aba4:	2b08      	cmp	r3, #8
 800aba6:	f200 84d3 	bhi.w	800b550 <_strtod_l+0xba0>
 800abaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abac:	930c      	str	r3, [sp, #48]	@ 0x30
 800abae:	4681      	mov	r9, r0
 800abb0:	2000      	movs	r0, #0
 800abb2:	4605      	mov	r5, r0
 800abb4:	3a30      	subs	r2, #48	@ 0x30
 800abb6:	f100 0301 	add.w	r3, r0, #1
 800abba:	d02a      	beq.n	800ac12 <_strtod_l+0x262>
 800abbc:	4499      	add	r9, r3
 800abbe:	eb00 0c05 	add.w	ip, r0, r5
 800abc2:	462b      	mov	r3, r5
 800abc4:	210a      	movs	r1, #10
 800abc6:	4563      	cmp	r3, ip
 800abc8:	d10d      	bne.n	800abe6 <_strtod_l+0x236>
 800abca:	1c69      	adds	r1, r5, #1
 800abcc:	4401      	add	r1, r0
 800abce:	4428      	add	r0, r5
 800abd0:	2808      	cmp	r0, #8
 800abd2:	dc16      	bgt.n	800ac02 <_strtod_l+0x252>
 800abd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800abd6:	230a      	movs	r3, #10
 800abd8:	fb03 2300 	mla	r3, r3, r0, r2
 800abdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800abde:	2300      	movs	r3, #0
 800abe0:	e018      	b.n	800ac14 <_strtod_l+0x264>
 800abe2:	4638      	mov	r0, r7
 800abe4:	e7da      	b.n	800ab9c <_strtod_l+0x1ec>
 800abe6:	2b08      	cmp	r3, #8
 800abe8:	f103 0301 	add.w	r3, r3, #1
 800abec:	dc03      	bgt.n	800abf6 <_strtod_l+0x246>
 800abee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800abf0:	434e      	muls	r6, r1
 800abf2:	960a      	str	r6, [sp, #40]	@ 0x28
 800abf4:	e7e7      	b.n	800abc6 <_strtod_l+0x216>
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	bfde      	ittt	le
 800abfa:	9e08      	ldrle	r6, [sp, #32]
 800abfc:	434e      	mulle	r6, r1
 800abfe:	9608      	strle	r6, [sp, #32]
 800ac00:	e7e1      	b.n	800abc6 <_strtod_l+0x216>
 800ac02:	280f      	cmp	r0, #15
 800ac04:	dceb      	bgt.n	800abde <_strtod_l+0x22e>
 800ac06:	9808      	ldr	r0, [sp, #32]
 800ac08:	230a      	movs	r3, #10
 800ac0a:	fb03 2300 	mla	r3, r3, r0, r2
 800ac0e:	9308      	str	r3, [sp, #32]
 800ac10:	e7e5      	b.n	800abde <_strtod_l+0x22e>
 800ac12:	4629      	mov	r1, r5
 800ac14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac16:	1c50      	adds	r0, r2, #1
 800ac18:	9019      	str	r0, [sp, #100]	@ 0x64
 800ac1a:	7852      	ldrb	r2, [r2, #1]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	460d      	mov	r5, r1
 800ac20:	e7b1      	b.n	800ab86 <_strtod_l+0x1d6>
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	2301      	movs	r3, #1
 800ac28:	e77d      	b.n	800ab26 <_strtod_l+0x176>
 800ac2a:	f04f 0c00 	mov.w	ip, #0
 800ac2e:	1ca2      	adds	r2, r4, #2
 800ac30:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac32:	78a2      	ldrb	r2, [r4, #2]
 800ac34:	e785      	b.n	800ab42 <_strtod_l+0x192>
 800ac36:	f04f 0c01 	mov.w	ip, #1
 800ac3a:	e7f8      	b.n	800ac2e <_strtod_l+0x27e>
 800ac3c:	0800ff00 	.word	0x0800ff00
 800ac40:	0800fee8 	.word	0x0800fee8
 800ac44:	7ff00000 	.word	0x7ff00000
 800ac48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac4a:	1c51      	adds	r1, r2, #1
 800ac4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac4e:	7852      	ldrb	r2, [r2, #1]
 800ac50:	2a30      	cmp	r2, #48	@ 0x30
 800ac52:	d0f9      	beq.n	800ac48 <_strtod_l+0x298>
 800ac54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac58:	2908      	cmp	r1, #8
 800ac5a:	f63f af78 	bhi.w	800ab4e <_strtod_l+0x19e>
 800ac5e:	3a30      	subs	r2, #48	@ 0x30
 800ac60:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac66:	f04f 080a 	mov.w	r8, #10
 800ac6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac6c:	1c56      	adds	r6, r2, #1
 800ac6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac70:	7852      	ldrb	r2, [r2, #1]
 800ac72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac76:	f1be 0f09 	cmp.w	lr, #9
 800ac7a:	d939      	bls.n	800acf0 <_strtod_l+0x340>
 800ac7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac7e:	1a76      	subs	r6, r6, r1
 800ac80:	2e08      	cmp	r6, #8
 800ac82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac86:	dc03      	bgt.n	800ac90 <_strtod_l+0x2e0>
 800ac88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ac8a:	4588      	cmp	r8, r1
 800ac8c:	bfa8      	it	ge
 800ac8e:	4688      	movge	r8, r1
 800ac90:	f1bc 0f00 	cmp.w	ip, #0
 800ac94:	d001      	beq.n	800ac9a <_strtod_l+0x2ea>
 800ac96:	f1c8 0800 	rsb	r8, r8, #0
 800ac9a:	2d00      	cmp	r5, #0
 800ac9c:	d14e      	bne.n	800ad3c <_strtod_l+0x38c>
 800ac9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aca0:	4308      	orrs	r0, r1
 800aca2:	f47f aebe 	bne.w	800aa22 <_strtod_l+0x72>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f47f aed6 	bne.w	800aa58 <_strtod_l+0xa8>
 800acac:	2a69      	cmp	r2, #105	@ 0x69
 800acae:	d028      	beq.n	800ad02 <_strtod_l+0x352>
 800acb0:	dc25      	bgt.n	800acfe <_strtod_l+0x34e>
 800acb2:	2a49      	cmp	r2, #73	@ 0x49
 800acb4:	d025      	beq.n	800ad02 <_strtod_l+0x352>
 800acb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800acb8:	f47f aece 	bne.w	800aa58 <_strtod_l+0xa8>
 800acbc:	499b      	ldr	r1, [pc, #620]	@ (800af2c <_strtod_l+0x57c>)
 800acbe:	a819      	add	r0, sp, #100	@ 0x64
 800acc0:	f002 fc6e 	bl	800d5a0 <__match>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f aec7 	beq.w	800aa58 <_strtod_l+0xa8>
 800acca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b28      	cmp	r3, #40	@ 0x28
 800acd0:	d12e      	bne.n	800ad30 <_strtod_l+0x380>
 800acd2:	4997      	ldr	r1, [pc, #604]	@ (800af30 <_strtod_l+0x580>)
 800acd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800acd6:	a819      	add	r0, sp, #100	@ 0x64
 800acd8:	f002 fc76 	bl	800d5c8 <__hexnan>
 800acdc:	2805      	cmp	r0, #5
 800acde:	d127      	bne.n	800ad30 <_strtod_l+0x380>
 800ace0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ace2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ace6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acee:	e698      	b.n	800aa22 <_strtod_l+0x72>
 800acf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800acf2:	fb08 2101 	mla	r1, r8, r1, r2
 800acf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800acfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800acfc:	e7b5      	b.n	800ac6a <_strtod_l+0x2ba>
 800acfe:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad00:	e7da      	b.n	800acb8 <_strtod_l+0x308>
 800ad02:	498c      	ldr	r1, [pc, #560]	@ (800af34 <_strtod_l+0x584>)
 800ad04:	a819      	add	r0, sp, #100	@ 0x64
 800ad06:	f002 fc4b 	bl	800d5a0 <__match>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f43f aea4 	beq.w	800aa58 <_strtod_l+0xa8>
 800ad10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad12:	4989      	ldr	r1, [pc, #548]	@ (800af38 <_strtod_l+0x588>)
 800ad14:	3b01      	subs	r3, #1
 800ad16:	a819      	add	r0, sp, #100	@ 0x64
 800ad18:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad1a:	f002 fc41 	bl	800d5a0 <__match>
 800ad1e:	b910      	cbnz	r0, 800ad26 <_strtod_l+0x376>
 800ad20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad22:	3301      	adds	r3, #1
 800ad24:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800af48 <_strtod_l+0x598>
 800ad2a:	f04f 0a00 	mov.w	sl, #0
 800ad2e:	e678      	b.n	800aa22 <_strtod_l+0x72>
 800ad30:	4882      	ldr	r0, [pc, #520]	@ (800af3c <_strtod_l+0x58c>)
 800ad32:	f001 fb0d 	bl	800c350 <nan>
 800ad36:	ec5b ab10 	vmov	sl, fp, d0
 800ad3a:	e672      	b.n	800aa22 <_strtod_l+0x72>
 800ad3c:	eba8 0309 	sub.w	r3, r8, r9
 800ad40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ad42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad44:	2f00      	cmp	r7, #0
 800ad46:	bf08      	it	eq
 800ad48:	462f      	moveq	r7, r5
 800ad4a:	2d10      	cmp	r5, #16
 800ad4c:	462c      	mov	r4, r5
 800ad4e:	bfa8      	it	ge
 800ad50:	2410      	movge	r4, #16
 800ad52:	f7f5 fbf7 	bl	8000544 <__aeabi_ui2d>
 800ad56:	2d09      	cmp	r5, #9
 800ad58:	4682      	mov	sl, r0
 800ad5a:	468b      	mov	fp, r1
 800ad5c:	dc13      	bgt.n	800ad86 <_strtod_l+0x3d6>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f43f ae5e 	beq.w	800aa22 <_strtod_l+0x72>
 800ad66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad68:	dd78      	ble.n	800ae5c <_strtod_l+0x4ac>
 800ad6a:	2b16      	cmp	r3, #22
 800ad6c:	dc5f      	bgt.n	800ae2e <_strtod_l+0x47e>
 800ad6e:	4974      	ldr	r1, [pc, #464]	@ (800af40 <_strtod_l+0x590>)
 800ad70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad78:	4652      	mov	r2, sl
 800ad7a:	465b      	mov	r3, fp
 800ad7c:	f7f5 fc5c 	bl	8000638 <__aeabi_dmul>
 800ad80:	4682      	mov	sl, r0
 800ad82:	468b      	mov	fp, r1
 800ad84:	e64d      	b.n	800aa22 <_strtod_l+0x72>
 800ad86:	4b6e      	ldr	r3, [pc, #440]	@ (800af40 <_strtod_l+0x590>)
 800ad88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad90:	f7f5 fc52 	bl	8000638 <__aeabi_dmul>
 800ad94:	4682      	mov	sl, r0
 800ad96:	9808      	ldr	r0, [sp, #32]
 800ad98:	468b      	mov	fp, r1
 800ad9a:	f7f5 fbd3 	bl	8000544 <__aeabi_ui2d>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fa91 	bl	80002cc <__adddf3>
 800adaa:	2d0f      	cmp	r5, #15
 800adac:	4682      	mov	sl, r0
 800adae:	468b      	mov	fp, r1
 800adb0:	ddd5      	ble.n	800ad5e <_strtod_l+0x3ae>
 800adb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb4:	1b2c      	subs	r4, r5, r4
 800adb6:	441c      	add	r4, r3
 800adb8:	2c00      	cmp	r4, #0
 800adba:	f340 8096 	ble.w	800aeea <_strtod_l+0x53a>
 800adbe:	f014 030f 	ands.w	r3, r4, #15
 800adc2:	d00a      	beq.n	800adda <_strtod_l+0x42a>
 800adc4:	495e      	ldr	r1, [pc, #376]	@ (800af40 <_strtod_l+0x590>)
 800adc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800adca:	4652      	mov	r2, sl
 800adcc:	465b      	mov	r3, fp
 800adce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add2:	f7f5 fc31 	bl	8000638 <__aeabi_dmul>
 800add6:	4682      	mov	sl, r0
 800add8:	468b      	mov	fp, r1
 800adda:	f034 040f 	bics.w	r4, r4, #15
 800adde:	d073      	beq.n	800aec8 <_strtod_l+0x518>
 800ade0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ade4:	dd48      	ble.n	800ae78 <_strtod_l+0x4c8>
 800ade6:	2400      	movs	r4, #0
 800ade8:	46a0      	mov	r8, r4
 800adea:	940a      	str	r4, [sp, #40]	@ 0x28
 800adec:	46a1      	mov	r9, r4
 800adee:	9a05      	ldr	r2, [sp, #20]
 800adf0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800af48 <_strtod_l+0x598>
 800adf4:	2322      	movs	r3, #34	@ 0x22
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	f04f 0a00 	mov.w	sl, #0
 800adfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f43f ae0f 	beq.w	800aa22 <_strtod_l+0x72>
 800ae04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f002 fd82 	bl	800d910 <_Bfree>
 800ae0c:	9805      	ldr	r0, [sp, #20]
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f002 fd7e 	bl	800d910 <_Bfree>
 800ae14:	9805      	ldr	r0, [sp, #20]
 800ae16:	4641      	mov	r1, r8
 800ae18:	f002 fd7a 	bl	800d910 <_Bfree>
 800ae1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae1e:	9805      	ldr	r0, [sp, #20]
 800ae20:	f002 fd76 	bl	800d910 <_Bfree>
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	4621      	mov	r1, r4
 800ae28:	f002 fd72 	bl	800d910 <_Bfree>
 800ae2c:	e5f9      	b.n	800aa22 <_strtod_l+0x72>
 800ae2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae34:	4293      	cmp	r3, r2
 800ae36:	dbbc      	blt.n	800adb2 <_strtod_l+0x402>
 800ae38:	4c41      	ldr	r4, [pc, #260]	@ (800af40 <_strtod_l+0x590>)
 800ae3a:	f1c5 050f 	rsb	r5, r5, #15
 800ae3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae42:	4652      	mov	r2, sl
 800ae44:	465b      	mov	r3, fp
 800ae46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4a:	f7f5 fbf5 	bl	8000638 <__aeabi_dmul>
 800ae4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae50:	1b5d      	subs	r5, r3, r5
 800ae52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae5a:	e78f      	b.n	800ad7c <_strtod_l+0x3cc>
 800ae5c:	3316      	adds	r3, #22
 800ae5e:	dba8      	blt.n	800adb2 <_strtod_l+0x402>
 800ae60:	4b37      	ldr	r3, [pc, #220]	@ (800af40 <_strtod_l+0x590>)
 800ae62:	eba9 0808 	sub.w	r8, r9, r8
 800ae66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae6e:	4650      	mov	r0, sl
 800ae70:	4659      	mov	r1, fp
 800ae72:	f7f5 fd0b 	bl	800088c <__aeabi_ddiv>
 800ae76:	e783      	b.n	800ad80 <_strtod_l+0x3d0>
 800ae78:	4b32      	ldr	r3, [pc, #200]	@ (800af44 <_strtod_l+0x594>)
 800ae7a:	9308      	str	r3, [sp, #32]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	1124      	asrs	r4, r4, #4
 800ae80:	4650      	mov	r0, sl
 800ae82:	4659      	mov	r1, fp
 800ae84:	461e      	mov	r6, r3
 800ae86:	2c01      	cmp	r4, #1
 800ae88:	dc21      	bgt.n	800aece <_strtod_l+0x51e>
 800ae8a:	b10b      	cbz	r3, 800ae90 <_strtod_l+0x4e0>
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	468b      	mov	fp, r1
 800ae90:	492c      	ldr	r1, [pc, #176]	@ (800af44 <_strtod_l+0x594>)
 800ae92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea2:	f7f5 fbc9 	bl	8000638 <__aeabi_dmul>
 800aea6:	4b28      	ldr	r3, [pc, #160]	@ (800af48 <_strtod_l+0x598>)
 800aea8:	460a      	mov	r2, r1
 800aeaa:	400b      	ands	r3, r1
 800aeac:	4927      	ldr	r1, [pc, #156]	@ (800af4c <_strtod_l+0x59c>)
 800aeae:	428b      	cmp	r3, r1
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	d898      	bhi.n	800ade6 <_strtod_l+0x436>
 800aeb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aeb8:	428b      	cmp	r3, r1
 800aeba:	bf86      	itte	hi
 800aebc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800af50 <_strtod_l+0x5a0>
 800aec0:	f04f 3aff 	movhi.w	sl, #4294967295
 800aec4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aec8:	2300      	movs	r3, #0
 800aeca:	9308      	str	r3, [sp, #32]
 800aecc:	e07a      	b.n	800afc4 <_strtod_l+0x614>
 800aece:	07e2      	lsls	r2, r4, #31
 800aed0:	d505      	bpl.n	800aede <_strtod_l+0x52e>
 800aed2:	9b08      	ldr	r3, [sp, #32]
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 fbae 	bl	8000638 <__aeabi_dmul>
 800aedc:	2301      	movs	r3, #1
 800aede:	9a08      	ldr	r2, [sp, #32]
 800aee0:	3208      	adds	r2, #8
 800aee2:	3601      	adds	r6, #1
 800aee4:	1064      	asrs	r4, r4, #1
 800aee6:	9208      	str	r2, [sp, #32]
 800aee8:	e7cd      	b.n	800ae86 <_strtod_l+0x4d6>
 800aeea:	d0ed      	beq.n	800aec8 <_strtod_l+0x518>
 800aeec:	4264      	negs	r4, r4
 800aeee:	f014 020f 	ands.w	r2, r4, #15
 800aef2:	d00a      	beq.n	800af0a <_strtod_l+0x55a>
 800aef4:	4b12      	ldr	r3, [pc, #72]	@ (800af40 <_strtod_l+0x590>)
 800aef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aefa:	4650      	mov	r0, sl
 800aefc:	4659      	mov	r1, fp
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f7f5 fcc3 	bl	800088c <__aeabi_ddiv>
 800af06:	4682      	mov	sl, r0
 800af08:	468b      	mov	fp, r1
 800af0a:	1124      	asrs	r4, r4, #4
 800af0c:	d0dc      	beq.n	800aec8 <_strtod_l+0x518>
 800af0e:	2c1f      	cmp	r4, #31
 800af10:	dd20      	ble.n	800af54 <_strtod_l+0x5a4>
 800af12:	2400      	movs	r4, #0
 800af14:	46a0      	mov	r8, r4
 800af16:	940a      	str	r4, [sp, #40]	@ 0x28
 800af18:	46a1      	mov	r9, r4
 800af1a:	9a05      	ldr	r2, [sp, #20]
 800af1c:	2322      	movs	r3, #34	@ 0x22
 800af1e:	f04f 0a00 	mov.w	sl, #0
 800af22:	f04f 0b00 	mov.w	fp, #0
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	e768      	b.n	800adfc <_strtod_l+0x44c>
 800af2a:	bf00      	nop
 800af2c:	0801004e 	.word	0x0801004e
 800af30:	0800feec 	.word	0x0800feec
 800af34:	08010046 	.word	0x08010046
 800af38:	08010080 	.word	0x08010080
 800af3c:	0801030c 	.word	0x0801030c
 800af40:	080101f8 	.word	0x080101f8
 800af44:	080101d0 	.word	0x080101d0
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	7ca00000 	.word	0x7ca00000
 800af50:	7fefffff 	.word	0x7fefffff
 800af54:	f014 0310 	ands.w	r3, r4, #16
 800af58:	bf18      	it	ne
 800af5a:	236a      	movne	r3, #106	@ 0x6a
 800af5c:	4ea9      	ldr	r6, [pc, #676]	@ (800b204 <_strtod_l+0x854>)
 800af5e:	9308      	str	r3, [sp, #32]
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	2300      	movs	r3, #0
 800af66:	07e2      	lsls	r2, r4, #31
 800af68:	d504      	bpl.n	800af74 <_strtod_l+0x5c4>
 800af6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af6e:	f7f5 fb63 	bl	8000638 <__aeabi_dmul>
 800af72:	2301      	movs	r3, #1
 800af74:	1064      	asrs	r4, r4, #1
 800af76:	f106 0608 	add.w	r6, r6, #8
 800af7a:	d1f4      	bne.n	800af66 <_strtod_l+0x5b6>
 800af7c:	b10b      	cbz	r3, 800af82 <_strtod_l+0x5d2>
 800af7e:	4682      	mov	sl, r0
 800af80:	468b      	mov	fp, r1
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	b1b3      	cbz	r3, 800afb4 <_strtod_l+0x604>
 800af86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af8e:	2b00      	cmp	r3, #0
 800af90:	4659      	mov	r1, fp
 800af92:	dd0f      	ble.n	800afb4 <_strtod_l+0x604>
 800af94:	2b1f      	cmp	r3, #31
 800af96:	dd55      	ble.n	800b044 <_strtod_l+0x694>
 800af98:	2b34      	cmp	r3, #52	@ 0x34
 800af9a:	bfde      	ittt	le
 800af9c:	f04f 33ff 	movle.w	r3, #4294967295
 800afa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800afa4:	4093      	lslle	r3, r2
 800afa6:	f04f 0a00 	mov.w	sl, #0
 800afaa:	bfcc      	ite	gt
 800afac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800afb0:	ea03 0b01 	andle.w	fp, r3, r1
 800afb4:	2200      	movs	r2, #0
 800afb6:	2300      	movs	r3, #0
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1a6      	bne.n	800af12 <_strtod_l+0x562>
 800afc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afca:	9805      	ldr	r0, [sp, #20]
 800afcc:	462b      	mov	r3, r5
 800afce:	463a      	mov	r2, r7
 800afd0:	f002 fd06 	bl	800d9e0 <__s2b>
 800afd4:	900a      	str	r0, [sp, #40]	@ 0x28
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f af05 	beq.w	800ade6 <_strtod_l+0x436>
 800afdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afde:	2a00      	cmp	r2, #0
 800afe0:	eba9 0308 	sub.w	r3, r9, r8
 800afe4:	bfa8      	it	ge
 800afe6:	2300      	movge	r3, #0
 800afe8:	9312      	str	r3, [sp, #72]	@ 0x48
 800afea:	2400      	movs	r4, #0
 800afec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aff0:	9316      	str	r3, [sp, #88]	@ 0x58
 800aff2:	46a0      	mov	r8, r4
 800aff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aff6:	9805      	ldr	r0, [sp, #20]
 800aff8:	6859      	ldr	r1, [r3, #4]
 800affa:	f002 fc49 	bl	800d890 <_Balloc>
 800affe:	4681      	mov	r9, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	f43f aef4 	beq.w	800adee <_strtod_l+0x43e>
 800b006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	3202      	adds	r2, #2
 800b00c:	f103 010c 	add.w	r1, r3, #12
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	300c      	adds	r0, #12
 800b014:	f001 f98d 	bl	800c332 <memcpy>
 800b018:	ec4b ab10 	vmov	d0, sl, fp
 800b01c:	9805      	ldr	r0, [sp, #20]
 800b01e:	aa1c      	add	r2, sp, #112	@ 0x70
 800b020:	a91b      	add	r1, sp, #108	@ 0x6c
 800b022:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b026:	f003 f817 	bl	800e058 <__d2b>
 800b02a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b02c:	2800      	cmp	r0, #0
 800b02e:	f43f aede 	beq.w	800adee <_strtod_l+0x43e>
 800b032:	9805      	ldr	r0, [sp, #20]
 800b034:	2101      	movs	r1, #1
 800b036:	f002 fd69 	bl	800db0c <__i2b>
 800b03a:	4680      	mov	r8, r0
 800b03c:	b948      	cbnz	r0, 800b052 <_strtod_l+0x6a2>
 800b03e:	f04f 0800 	mov.w	r8, #0
 800b042:	e6d4      	b.n	800adee <_strtod_l+0x43e>
 800b044:	f04f 32ff 	mov.w	r2, #4294967295
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	ea03 0a0a 	and.w	sl, r3, sl
 800b050:	e7b0      	b.n	800afb4 <_strtod_l+0x604>
 800b052:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b054:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b056:	2d00      	cmp	r5, #0
 800b058:	bfab      	itete	ge
 800b05a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b05c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b05e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b060:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b062:	bfac      	ite	ge
 800b064:	18ef      	addge	r7, r5, r3
 800b066:	1b5e      	sublt	r6, r3, r5
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	1aed      	subs	r5, r5, r3
 800b06c:	4415      	add	r5, r2
 800b06e:	4b66      	ldr	r3, [pc, #408]	@ (800b208 <_strtod_l+0x858>)
 800b070:	3d01      	subs	r5, #1
 800b072:	429d      	cmp	r5, r3
 800b074:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b078:	da50      	bge.n	800b11c <_strtod_l+0x76c>
 800b07a:	1b5b      	subs	r3, r3, r5
 800b07c:	2b1f      	cmp	r3, #31
 800b07e:	eba2 0203 	sub.w	r2, r2, r3
 800b082:	f04f 0101 	mov.w	r1, #1
 800b086:	dc3d      	bgt.n	800b104 <_strtod_l+0x754>
 800b088:	fa01 f303 	lsl.w	r3, r1, r3
 800b08c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b08e:	2300      	movs	r3, #0
 800b090:	9310      	str	r3, [sp, #64]	@ 0x40
 800b092:	18bd      	adds	r5, r7, r2
 800b094:	9b08      	ldr	r3, [sp, #32]
 800b096:	42af      	cmp	r7, r5
 800b098:	4416      	add	r6, r2
 800b09a:	441e      	add	r6, r3
 800b09c:	463b      	mov	r3, r7
 800b09e:	bfa8      	it	ge
 800b0a0:	462b      	movge	r3, r5
 800b0a2:	42b3      	cmp	r3, r6
 800b0a4:	bfa8      	it	ge
 800b0a6:	4633      	movge	r3, r6
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	bfc2      	ittt	gt
 800b0ac:	1aed      	subgt	r5, r5, r3
 800b0ae:	1af6      	subgt	r6, r6, r3
 800b0b0:	1aff      	subgt	r7, r7, r3
 800b0b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd16      	ble.n	800b0e6 <_strtod_l+0x736>
 800b0b8:	4641      	mov	r1, r8
 800b0ba:	9805      	ldr	r0, [sp, #20]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	f002 fde5 	bl	800dc8c <__pow5mult>
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d0ba      	beq.n	800b03e <_strtod_l+0x68e>
 800b0c8:	4601      	mov	r1, r0
 800b0ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0cc:	9805      	ldr	r0, [sp, #20]
 800b0ce:	f002 fd33 	bl	800db38 <__multiply>
 800b0d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f43f ae8a 	beq.w	800adee <_strtod_l+0x43e>
 800b0da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	f002 fc17 	bl	800d910 <_Bfree>
 800b0e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0e6:	2d00      	cmp	r5, #0
 800b0e8:	dc1d      	bgt.n	800b126 <_strtod_l+0x776>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd23      	ble.n	800b138 <_strtod_l+0x788>
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0f4:	9805      	ldr	r0, [sp, #20]
 800b0f6:	f002 fdc9 	bl	800dc8c <__pow5mult>
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	b9e0      	cbnz	r0, 800b138 <_strtod_l+0x788>
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	e674      	b.n	800adee <_strtod_l+0x43e>
 800b104:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b108:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b10c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b110:	35e2      	adds	r5, #226	@ 0xe2
 800b112:	fa01 f305 	lsl.w	r3, r1, r5
 800b116:	9310      	str	r3, [sp, #64]	@ 0x40
 800b118:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b11a:	e7ba      	b.n	800b092 <_strtod_l+0x6e2>
 800b11c:	2300      	movs	r3, #0
 800b11e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b120:	2301      	movs	r3, #1
 800b122:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b124:	e7b5      	b.n	800b092 <_strtod_l+0x6e2>
 800b126:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b128:	9805      	ldr	r0, [sp, #20]
 800b12a:	462a      	mov	r2, r5
 800b12c:	f002 fe08 	bl	800dd40 <__lshift>
 800b130:	901a      	str	r0, [sp, #104]	@ 0x68
 800b132:	2800      	cmp	r0, #0
 800b134:	d1d9      	bne.n	800b0ea <_strtod_l+0x73a>
 800b136:	e65a      	b.n	800adee <_strtod_l+0x43e>
 800b138:	2e00      	cmp	r6, #0
 800b13a:	dd07      	ble.n	800b14c <_strtod_l+0x79c>
 800b13c:	4649      	mov	r1, r9
 800b13e:	9805      	ldr	r0, [sp, #20]
 800b140:	4632      	mov	r2, r6
 800b142:	f002 fdfd 	bl	800dd40 <__lshift>
 800b146:	4681      	mov	r9, r0
 800b148:	2800      	cmp	r0, #0
 800b14a:	d0d8      	beq.n	800b0fe <_strtod_l+0x74e>
 800b14c:	2f00      	cmp	r7, #0
 800b14e:	dd08      	ble.n	800b162 <_strtod_l+0x7b2>
 800b150:	4641      	mov	r1, r8
 800b152:	9805      	ldr	r0, [sp, #20]
 800b154:	463a      	mov	r2, r7
 800b156:	f002 fdf3 	bl	800dd40 <__lshift>
 800b15a:	4680      	mov	r8, r0
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f43f ae46 	beq.w	800adee <_strtod_l+0x43e>
 800b162:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b164:	9805      	ldr	r0, [sp, #20]
 800b166:	464a      	mov	r2, r9
 800b168:	f002 fe72 	bl	800de50 <__mdiff>
 800b16c:	4604      	mov	r4, r0
 800b16e:	2800      	cmp	r0, #0
 800b170:	f43f ae3d 	beq.w	800adee <_strtod_l+0x43e>
 800b174:	68c3      	ldr	r3, [r0, #12]
 800b176:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b178:	2300      	movs	r3, #0
 800b17a:	60c3      	str	r3, [r0, #12]
 800b17c:	4641      	mov	r1, r8
 800b17e:	f002 fe4b 	bl	800de18 <__mcmp>
 800b182:	2800      	cmp	r0, #0
 800b184:	da46      	bge.n	800b214 <_strtod_l+0x864>
 800b186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b188:	ea53 030a 	orrs.w	r3, r3, sl
 800b18c:	d16c      	bne.n	800b268 <_strtod_l+0x8b8>
 800b18e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b192:	2b00      	cmp	r3, #0
 800b194:	d168      	bne.n	800b268 <_strtod_l+0x8b8>
 800b196:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b19a:	0d1b      	lsrs	r3, r3, #20
 800b19c:	051b      	lsls	r3, r3, #20
 800b19e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1a2:	d961      	bls.n	800b268 <_strtod_l+0x8b8>
 800b1a4:	6963      	ldr	r3, [r4, #20]
 800b1a6:	b913      	cbnz	r3, 800b1ae <_strtod_l+0x7fe>
 800b1a8:	6923      	ldr	r3, [r4, #16]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	dd5c      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	9805      	ldr	r0, [sp, #20]
 800b1b4:	f002 fdc4 	bl	800dd40 <__lshift>
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	f002 fe2c 	bl	800de18 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	dd51      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1c8:	9a08      	ldr	r2, [sp, #32]
 800b1ca:	0d1b      	lsrs	r3, r3, #20
 800b1cc:	051b      	lsls	r3, r3, #20
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d06b      	beq.n	800b2aa <_strtod_l+0x8fa>
 800b1d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1d6:	d868      	bhi.n	800b2aa <_strtod_l+0x8fa>
 800b1d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1dc:	f67f ae9d 	bls.w	800af1a <_strtod_l+0x56a>
 800b1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b20c <_strtod_l+0x85c>)
 800b1e2:	4650      	mov	r0, sl
 800b1e4:	4659      	mov	r1, fp
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f7f5 fa26 	bl	8000638 <__aeabi_dmul>
 800b1ec:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <_strtod_l+0x860>)
 800b1ee:	400b      	ands	r3, r1
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	468b      	mov	fp, r1
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f47f ae05 	bne.w	800ae04 <_strtod_l+0x454>
 800b1fa:	9a05      	ldr	r2, [sp, #20]
 800b1fc:	2322      	movs	r3, #34	@ 0x22
 800b1fe:	6013      	str	r3, [r2, #0]
 800b200:	e600      	b.n	800ae04 <_strtod_l+0x454>
 800b202:	bf00      	nop
 800b204:	0800ff18 	.word	0x0800ff18
 800b208:	fffffc02 	.word	0xfffffc02
 800b20c:	39500000 	.word	0x39500000
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b218:	d165      	bne.n	800b2e6 <_strtod_l+0x936>
 800b21a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b220:	b35a      	cbz	r2, 800b27a <_strtod_l+0x8ca>
 800b222:	4a9f      	ldr	r2, [pc, #636]	@ (800b4a0 <_strtod_l+0xaf0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d12b      	bne.n	800b280 <_strtod_l+0x8d0>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	4651      	mov	r1, sl
 800b22c:	b303      	cbz	r3, 800b270 <_strtod_l+0x8c0>
 800b22e:	4b9d      	ldr	r3, [pc, #628]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b230:	465a      	mov	r2, fp
 800b232:	4013      	ands	r3, r2
 800b234:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	d81b      	bhi.n	800b276 <_strtod_l+0x8c6>
 800b23e:	0d1b      	lsrs	r3, r3, #20
 800b240:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b244:	fa02 f303 	lsl.w	r3, r2, r3
 800b248:	4299      	cmp	r1, r3
 800b24a:	d119      	bne.n	800b280 <_strtod_l+0x8d0>
 800b24c:	4b96      	ldr	r3, [pc, #600]	@ (800b4a8 <_strtod_l+0xaf8>)
 800b24e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b250:	429a      	cmp	r2, r3
 800b252:	d102      	bne.n	800b25a <_strtod_l+0x8aa>
 800b254:	3101      	adds	r1, #1
 800b256:	f43f adca 	beq.w	800adee <_strtod_l+0x43e>
 800b25a:	4b92      	ldr	r3, [pc, #584]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b25c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b25e:	401a      	ands	r2, r3
 800b260:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b264:	f04f 0a00 	mov.w	sl, #0
 800b268:	9b08      	ldr	r3, [sp, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1b8      	bne.n	800b1e0 <_strtod_l+0x830>
 800b26e:	e5c9      	b.n	800ae04 <_strtod_l+0x454>
 800b270:	f04f 33ff 	mov.w	r3, #4294967295
 800b274:	e7e8      	b.n	800b248 <_strtod_l+0x898>
 800b276:	4613      	mov	r3, r2
 800b278:	e7e6      	b.n	800b248 <_strtod_l+0x898>
 800b27a:	ea53 030a 	orrs.w	r3, r3, sl
 800b27e:	d0a1      	beq.n	800b1c4 <_strtod_l+0x814>
 800b280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b282:	b1db      	cbz	r3, 800b2bc <_strtod_l+0x90c>
 800b284:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b286:	4213      	tst	r3, r2
 800b288:	d0ee      	beq.n	800b268 <_strtod_l+0x8b8>
 800b28a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28c:	9a08      	ldr	r2, [sp, #32]
 800b28e:	4650      	mov	r0, sl
 800b290:	4659      	mov	r1, fp
 800b292:	b1bb      	cbz	r3, 800b2c4 <_strtod_l+0x914>
 800b294:	f7ff fb6d 	bl	800a972 <sulp>
 800b298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b29c:	ec53 2b10 	vmov	r2, r3, d0
 800b2a0:	f7f5 f814 	bl	80002cc <__adddf3>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	e7de      	b.n	800b268 <_strtod_l+0x8b8>
 800b2aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2b6:	f04f 3aff 	mov.w	sl, #4294967295
 800b2ba:	e7d5      	b.n	800b268 <_strtod_l+0x8b8>
 800b2bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2be:	ea13 0f0a 	tst.w	r3, sl
 800b2c2:	e7e1      	b.n	800b288 <_strtod_l+0x8d8>
 800b2c4:	f7ff fb55 	bl	800a972 <sulp>
 800b2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2cc:	ec53 2b10 	vmov	r2, r3, d0
 800b2d0:	f7f4 fffa 	bl	80002c8 <__aeabi_dsub>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	f7f5 fc14 	bl	8000b08 <__aeabi_dcmpeq>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d0c1      	beq.n	800b268 <_strtod_l+0x8b8>
 800b2e4:	e619      	b.n	800af1a <_strtod_l+0x56a>
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f002 ff0d 	bl	800e108 <__ratio>
 800b2ee:	ec57 6b10 	vmov	r6, r7, d0
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	f7f5 fc18 	bl	8000b30 <__aeabi_dcmple>
 800b300:	2800      	cmp	r0, #0
 800b302:	d06f      	beq.n	800b3e4 <_strtod_l+0xa34>
 800b304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d17a      	bne.n	800b400 <_strtod_l+0xa50>
 800b30a:	f1ba 0f00 	cmp.w	sl, #0
 800b30e:	d158      	bne.n	800b3c2 <_strtod_l+0xa12>
 800b310:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b316:	2b00      	cmp	r3, #0
 800b318:	d15a      	bne.n	800b3d0 <_strtod_l+0xa20>
 800b31a:	4b64      	ldr	r3, [pc, #400]	@ (800b4ac <_strtod_l+0xafc>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4630      	mov	r0, r6
 800b320:	4639      	mov	r1, r7
 800b322:	f7f5 fbfb 	bl	8000b1c <__aeabi_dcmplt>
 800b326:	2800      	cmp	r0, #0
 800b328:	d159      	bne.n	800b3de <_strtod_l+0xa2e>
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	4b60      	ldr	r3, [pc, #384]	@ (800b4b0 <_strtod_l+0xb00>)
 800b330:	2200      	movs	r2, #0
 800b332:	f7f5 f981 	bl	8000638 <__aeabi_dmul>
 800b336:	4606      	mov	r6, r0
 800b338:	460f      	mov	r7, r1
 800b33a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b33e:	9606      	str	r6, [sp, #24]
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b346:	4d57      	ldr	r5, [pc, #348]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b348:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b34c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b34e:	401d      	ands	r5, r3
 800b350:	4b58      	ldr	r3, [pc, #352]	@ (800b4b4 <_strtod_l+0xb04>)
 800b352:	429d      	cmp	r5, r3
 800b354:	f040 80b2 	bne.w	800b4bc <_strtod_l+0xb0c>
 800b358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b35a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b35e:	ec4b ab10 	vmov	d0, sl, fp
 800b362:	f002 fe09 	bl	800df78 <__ulp>
 800b366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b36a:	ec51 0b10 	vmov	r0, r1, d0
 800b36e:	f7f5 f963 	bl	8000638 <__aeabi_dmul>
 800b372:	4652      	mov	r2, sl
 800b374:	465b      	mov	r3, fp
 800b376:	f7f4 ffa9 	bl	80002cc <__adddf3>
 800b37a:	460b      	mov	r3, r1
 800b37c:	4949      	ldr	r1, [pc, #292]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b37e:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b8 <_strtod_l+0xb08>)
 800b380:	4019      	ands	r1, r3
 800b382:	4291      	cmp	r1, r2
 800b384:	4682      	mov	sl, r0
 800b386:	d942      	bls.n	800b40e <_strtod_l+0xa5e>
 800b388:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b38a:	4b47      	ldr	r3, [pc, #284]	@ (800b4a8 <_strtod_l+0xaf8>)
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d103      	bne.n	800b398 <_strtod_l+0x9e8>
 800b390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b392:	3301      	adds	r3, #1
 800b394:	f43f ad2b 	beq.w	800adee <_strtod_l+0x43e>
 800b398:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b4a8 <_strtod_l+0xaf8>
 800b39c:	f04f 3aff 	mov.w	sl, #4294967295
 800b3a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3a2:	9805      	ldr	r0, [sp, #20]
 800b3a4:	f002 fab4 	bl	800d910 <_Bfree>
 800b3a8:	9805      	ldr	r0, [sp, #20]
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	f002 fab0 	bl	800d910 <_Bfree>
 800b3b0:	9805      	ldr	r0, [sp, #20]
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	f002 faac 	bl	800d910 <_Bfree>
 800b3b8:	9805      	ldr	r0, [sp, #20]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	f002 faa8 	bl	800d910 <_Bfree>
 800b3c0:	e618      	b.n	800aff4 <_strtod_l+0x644>
 800b3c2:	f1ba 0f01 	cmp.w	sl, #1
 800b3c6:	d103      	bne.n	800b3d0 <_strtod_l+0xa20>
 800b3c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f43f ada5 	beq.w	800af1a <_strtod_l+0x56a>
 800b3d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b480 <_strtod_l+0xad0>
 800b3d4:	4f35      	ldr	r7, [pc, #212]	@ (800b4ac <_strtod_l+0xafc>)
 800b3d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3da:	2600      	movs	r6, #0
 800b3dc:	e7b1      	b.n	800b342 <_strtod_l+0x992>
 800b3de:	4f34      	ldr	r7, [pc, #208]	@ (800b4b0 <_strtod_l+0xb00>)
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	e7aa      	b.n	800b33a <_strtod_l+0x98a>
 800b3e4:	4b32      	ldr	r3, [pc, #200]	@ (800b4b0 <_strtod_l+0xb00>)
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f7f5 f924 	bl	8000638 <__aeabi_dmul>
 800b3f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460f      	mov	r7, r1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d09f      	beq.n	800b33a <_strtod_l+0x98a>
 800b3fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3fe:	e7a0      	b.n	800b342 <_strtod_l+0x992>
 800b400:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b488 <_strtod_l+0xad8>
 800b404:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b408:	ec57 6b17 	vmov	r6, r7, d7
 800b40c:	e799      	b.n	800b342 <_strtod_l+0x992>
 800b40e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b412:	9b08      	ldr	r3, [sp, #32]
 800b414:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1c1      	bne.n	800b3a0 <_strtod_l+0x9f0>
 800b41c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b420:	0d1b      	lsrs	r3, r3, #20
 800b422:	051b      	lsls	r3, r3, #20
 800b424:	429d      	cmp	r5, r3
 800b426:	d1bb      	bne.n	800b3a0 <_strtod_l+0x9f0>
 800b428:	4630      	mov	r0, r6
 800b42a:	4639      	mov	r1, r7
 800b42c:	f7f5 fc64 	bl	8000cf8 <__aeabi_d2lz>
 800b430:	f7f5 f8d4 	bl	80005dc <__aeabi_l2d>
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f4 ff44 	bl	80002c8 <__aeabi_dsub>
 800b440:	460b      	mov	r3, r1
 800b442:	4602      	mov	r2, r0
 800b444:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b448:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44e:	ea46 060a 	orr.w	r6, r6, sl
 800b452:	431e      	orrs	r6, r3
 800b454:	d06f      	beq.n	800b536 <_strtod_l+0xb86>
 800b456:	a30e      	add	r3, pc, #56	@ (adr r3, 800b490 <_strtod_l+0xae0>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 fb5e 	bl	8000b1c <__aeabi_dcmplt>
 800b460:	2800      	cmp	r0, #0
 800b462:	f47f accf 	bne.w	800ae04 <_strtod_l+0x454>
 800b466:	a30c      	add	r3, pc, #48	@ (adr r3, 800b498 <_strtod_l+0xae8>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b470:	f7f5 fb72 	bl	8000b58 <__aeabi_dcmpgt>
 800b474:	2800      	cmp	r0, #0
 800b476:	d093      	beq.n	800b3a0 <_strtod_l+0x9f0>
 800b478:	e4c4      	b.n	800ae04 <_strtod_l+0x454>
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	00000000 	.word	0x00000000
 800b484:	bff00000 	.word	0xbff00000
 800b488:	00000000 	.word	0x00000000
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	94a03595 	.word	0x94a03595
 800b494:	3fdfffff 	.word	0x3fdfffff
 800b498:	35afe535 	.word	0x35afe535
 800b49c:	3fe00000 	.word	0x3fe00000
 800b4a0:	000fffff 	.word	0x000fffff
 800b4a4:	7ff00000 	.word	0x7ff00000
 800b4a8:	7fefffff 	.word	0x7fefffff
 800b4ac:	3ff00000 	.word	0x3ff00000
 800b4b0:	3fe00000 	.word	0x3fe00000
 800b4b4:	7fe00000 	.word	0x7fe00000
 800b4b8:	7c9fffff 	.word	0x7c9fffff
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	b323      	cbz	r3, 800b50a <_strtod_l+0xb5a>
 800b4c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4c4:	d821      	bhi.n	800b50a <_strtod_l+0xb5a>
 800b4c6:	a328      	add	r3, pc, #160	@ (adr r3, 800b568 <_strtod_l+0xbb8>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 fb2e 	bl	8000b30 <__aeabi_dcmple>
 800b4d4:	b1a0      	cbz	r0, 800b500 <_strtod_l+0xb50>
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7f5 fb85 	bl	8000be8 <__aeabi_d2uiz>
 800b4de:	2801      	cmp	r0, #1
 800b4e0:	bf38      	it	cc
 800b4e2:	2001      	movcc	r0, #1
 800b4e4:	f7f5 f82e 	bl	8000544 <__aeabi_ui2d>
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	b9fb      	cbnz	r3, 800b530 <_strtod_l+0xb80>
 800b4f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b500:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b502:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b506:	1b5b      	subs	r3, r3, r5
 800b508:	9311      	str	r3, [sp, #68]	@ 0x44
 800b50a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b50e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b512:	f002 fd31 	bl	800df78 <__ulp>
 800b516:	4650      	mov	r0, sl
 800b518:	ec53 2b10 	vmov	r2, r3, d0
 800b51c:	4659      	mov	r1, fp
 800b51e:	f7f5 f88b 	bl	8000638 <__aeabi_dmul>
 800b522:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b526:	f7f4 fed1 	bl	80002cc <__adddf3>
 800b52a:	4682      	mov	sl, r0
 800b52c:	468b      	mov	fp, r1
 800b52e:	e770      	b.n	800b412 <_strtod_l+0xa62>
 800b530:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b534:	e7e0      	b.n	800b4f8 <_strtod_l+0xb48>
 800b536:	a30e      	add	r3, pc, #56	@ (adr r3, 800b570 <_strtod_l+0xbc0>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f5 faee 	bl	8000b1c <__aeabi_dcmplt>
 800b540:	e798      	b.n	800b474 <_strtod_l+0xac4>
 800b542:	2300      	movs	r3, #0
 800b544:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b546:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	f7ff ba6d 	b.w	800aa2a <_strtod_l+0x7a>
 800b550:	2a65      	cmp	r2, #101	@ 0x65
 800b552:	f43f ab66 	beq.w	800ac22 <_strtod_l+0x272>
 800b556:	2a45      	cmp	r2, #69	@ 0x45
 800b558:	f43f ab63 	beq.w	800ac22 <_strtod_l+0x272>
 800b55c:	2301      	movs	r3, #1
 800b55e:	f7ff bb9e 	b.w	800ac9e <_strtod_l+0x2ee>
 800b562:	bf00      	nop
 800b564:	f3af 8000 	nop.w
 800b568:	ffc00000 	.word	0xffc00000
 800b56c:	41dfffff 	.word	0x41dfffff
 800b570:	94a03595 	.word	0x94a03595
 800b574:	3fcfffff 	.word	0x3fcfffff

0800b578 <strtod>:
 800b578:	460a      	mov	r2, r1
 800b57a:	4601      	mov	r1, r0
 800b57c:	4802      	ldr	r0, [pc, #8]	@ (800b588 <strtod+0x10>)
 800b57e:	4b03      	ldr	r3, [pc, #12]	@ (800b58c <strtod+0x14>)
 800b580:	6800      	ldr	r0, [r0, #0]
 800b582:	f7ff ba15 	b.w	800a9b0 <_strtod_l>
 800b586:	bf00      	nop
 800b588:	20000250 	.word	0x20000250
 800b58c:	200000e4 	.word	0x200000e4

0800b590 <_strtol_l.constprop.0>:
 800b590:	2b24      	cmp	r3, #36	@ 0x24
 800b592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b596:	4686      	mov	lr, r0
 800b598:	4690      	mov	r8, r2
 800b59a:	d801      	bhi.n	800b5a0 <_strtol_l.constprop.0+0x10>
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d106      	bne.n	800b5ae <_strtol_l.constprop.0+0x1e>
 800b5a0:	f000 fe92 	bl	800c2c8 <__errno>
 800b5a4:	2316      	movs	r3, #22
 800b5a6:	6003      	str	r3, [r0, #0]
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ae:	4834      	ldr	r0, [pc, #208]	@ (800b680 <_strtol_l.constprop.0+0xf0>)
 800b5b0:	460d      	mov	r5, r1
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5b8:	5d06      	ldrb	r6, [r0, r4]
 800b5ba:	f016 0608 	ands.w	r6, r6, #8
 800b5be:	d1f8      	bne.n	800b5b2 <_strtol_l.constprop.0+0x22>
 800b5c0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5c2:	d12d      	bne.n	800b620 <_strtol_l.constprop.0+0x90>
 800b5c4:	782c      	ldrb	r4, [r5, #0]
 800b5c6:	2601      	movs	r6, #1
 800b5c8:	1c95      	adds	r5, r2, #2
 800b5ca:	f033 0210 	bics.w	r2, r3, #16
 800b5ce:	d109      	bne.n	800b5e4 <_strtol_l.constprop.0+0x54>
 800b5d0:	2c30      	cmp	r4, #48	@ 0x30
 800b5d2:	d12a      	bne.n	800b62a <_strtol_l.constprop.0+0x9a>
 800b5d4:	782a      	ldrb	r2, [r5, #0]
 800b5d6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5da:	2a58      	cmp	r2, #88	@ 0x58
 800b5dc:	d125      	bne.n	800b62a <_strtol_l.constprop.0+0x9a>
 800b5de:	786c      	ldrb	r4, [r5, #1]
 800b5e0:	2310      	movs	r3, #16
 800b5e2:	3502      	adds	r5, #2
 800b5e4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5e8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	fbbc f9f3 	udiv	r9, ip, r3
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b5f8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b5fc:	2f09      	cmp	r7, #9
 800b5fe:	d81b      	bhi.n	800b638 <_strtol_l.constprop.0+0xa8>
 800b600:	463c      	mov	r4, r7
 800b602:	42a3      	cmp	r3, r4
 800b604:	dd27      	ble.n	800b656 <_strtol_l.constprop.0+0xc6>
 800b606:	1c57      	adds	r7, r2, #1
 800b608:	d007      	beq.n	800b61a <_strtol_l.constprop.0+0x8a>
 800b60a:	4581      	cmp	r9, r0
 800b60c:	d320      	bcc.n	800b650 <_strtol_l.constprop.0+0xc0>
 800b60e:	d101      	bne.n	800b614 <_strtol_l.constprop.0+0x84>
 800b610:	45a2      	cmp	sl, r4
 800b612:	db1d      	blt.n	800b650 <_strtol_l.constprop.0+0xc0>
 800b614:	fb00 4003 	mla	r0, r0, r3, r4
 800b618:	2201      	movs	r2, #1
 800b61a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b61e:	e7eb      	b.n	800b5f8 <_strtol_l.constprop.0+0x68>
 800b620:	2c2b      	cmp	r4, #43	@ 0x2b
 800b622:	bf04      	itt	eq
 800b624:	782c      	ldrbeq	r4, [r5, #0]
 800b626:	1c95      	addeq	r5, r2, #2
 800b628:	e7cf      	b.n	800b5ca <_strtol_l.constprop.0+0x3a>
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1da      	bne.n	800b5e4 <_strtol_l.constprop.0+0x54>
 800b62e:	2c30      	cmp	r4, #48	@ 0x30
 800b630:	bf0c      	ite	eq
 800b632:	2308      	moveq	r3, #8
 800b634:	230a      	movne	r3, #10
 800b636:	e7d5      	b.n	800b5e4 <_strtol_l.constprop.0+0x54>
 800b638:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b63c:	2f19      	cmp	r7, #25
 800b63e:	d801      	bhi.n	800b644 <_strtol_l.constprop.0+0xb4>
 800b640:	3c37      	subs	r4, #55	@ 0x37
 800b642:	e7de      	b.n	800b602 <_strtol_l.constprop.0+0x72>
 800b644:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b648:	2f19      	cmp	r7, #25
 800b64a:	d804      	bhi.n	800b656 <_strtol_l.constprop.0+0xc6>
 800b64c:	3c57      	subs	r4, #87	@ 0x57
 800b64e:	e7d8      	b.n	800b602 <_strtol_l.constprop.0+0x72>
 800b650:	f04f 32ff 	mov.w	r2, #4294967295
 800b654:	e7e1      	b.n	800b61a <_strtol_l.constprop.0+0x8a>
 800b656:	1c53      	adds	r3, r2, #1
 800b658:	d108      	bne.n	800b66c <_strtol_l.constprop.0+0xdc>
 800b65a:	2322      	movs	r3, #34	@ 0x22
 800b65c:	f8ce 3000 	str.w	r3, [lr]
 800b660:	4660      	mov	r0, ip
 800b662:	f1b8 0f00 	cmp.w	r8, #0
 800b666:	d0a0      	beq.n	800b5aa <_strtol_l.constprop.0+0x1a>
 800b668:	1e69      	subs	r1, r5, #1
 800b66a:	e006      	b.n	800b67a <_strtol_l.constprop.0+0xea>
 800b66c:	b106      	cbz	r6, 800b670 <_strtol_l.constprop.0+0xe0>
 800b66e:	4240      	negs	r0, r0
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	d099      	beq.n	800b5aa <_strtol_l.constprop.0+0x1a>
 800b676:	2a00      	cmp	r2, #0
 800b678:	d1f6      	bne.n	800b668 <_strtol_l.constprop.0+0xd8>
 800b67a:	f8c8 1000 	str.w	r1, [r8]
 800b67e:	e794      	b.n	800b5aa <_strtol_l.constprop.0+0x1a>
 800b680:	0800ff41 	.word	0x0800ff41

0800b684 <strtol>:
 800b684:	4613      	mov	r3, r2
 800b686:	460a      	mov	r2, r1
 800b688:	4601      	mov	r1, r0
 800b68a:	4802      	ldr	r0, [pc, #8]	@ (800b694 <strtol+0x10>)
 800b68c:	6800      	ldr	r0, [r0, #0]
 800b68e:	f7ff bf7f 	b.w	800b590 <_strtol_l.constprop.0>
 800b692:	bf00      	nop
 800b694:	20000250 	.word	0x20000250

0800b698 <__cvt>:
 800b698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	ec57 6b10 	vmov	r6, r7, d0
 800b6a0:	2f00      	cmp	r7, #0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	463b      	mov	r3, r7
 800b6a8:	bfbb      	ittet	lt
 800b6aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6ae:	461f      	movlt	r7, r3
 800b6b0:	2300      	movge	r3, #0
 800b6b2:	232d      	movlt	r3, #45	@ 0x2d
 800b6b4:	700b      	strb	r3, [r1, #0]
 800b6b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b6bc:	4691      	mov	r9, r2
 800b6be:	f023 0820 	bic.w	r8, r3, #32
 800b6c2:	bfbc      	itt	lt
 800b6c4:	4632      	movlt	r2, r6
 800b6c6:	4616      	movlt	r6, r2
 800b6c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6cc:	d005      	beq.n	800b6da <__cvt+0x42>
 800b6ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b6d2:	d100      	bne.n	800b6d6 <__cvt+0x3e>
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	2102      	movs	r1, #2
 800b6d8:	e000      	b.n	800b6dc <__cvt+0x44>
 800b6da:	2103      	movs	r1, #3
 800b6dc:	ab03      	add	r3, sp, #12
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	ab02      	add	r3, sp, #8
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	ec47 6b10 	vmov	d0, r6, r7
 800b6e8:	4653      	mov	r3, sl
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	f000 fec0 	bl	800c470 <_dtoa_r>
 800b6f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	d119      	bne.n	800b72c <__cvt+0x94>
 800b6f8:	f019 0f01 	tst.w	r9, #1
 800b6fc:	d00e      	beq.n	800b71c <__cvt+0x84>
 800b6fe:	eb00 0904 	add.w	r9, r0, r4
 800b702:	2200      	movs	r2, #0
 800b704:	2300      	movs	r3, #0
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f5 f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800b70e:	b108      	cbz	r0, 800b714 <__cvt+0x7c>
 800b710:	f8cd 900c 	str.w	r9, [sp, #12]
 800b714:	2230      	movs	r2, #48	@ 0x30
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	454b      	cmp	r3, r9
 800b71a:	d31e      	bcc.n	800b75a <__cvt+0xc2>
 800b71c:	9b03      	ldr	r3, [sp, #12]
 800b71e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b720:	1b5b      	subs	r3, r3, r5
 800b722:	4628      	mov	r0, r5
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	b004      	add	sp, #16
 800b728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b72c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b730:	eb00 0904 	add.w	r9, r0, r4
 800b734:	d1e5      	bne.n	800b702 <__cvt+0x6a>
 800b736:	7803      	ldrb	r3, [r0, #0]
 800b738:	2b30      	cmp	r3, #48	@ 0x30
 800b73a:	d10a      	bne.n	800b752 <__cvt+0xba>
 800b73c:	2200      	movs	r2, #0
 800b73e:	2300      	movs	r3, #0
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	f7f5 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 800b748:	b918      	cbnz	r0, 800b752 <__cvt+0xba>
 800b74a:	f1c4 0401 	rsb	r4, r4, #1
 800b74e:	f8ca 4000 	str.w	r4, [sl]
 800b752:	f8da 3000 	ldr.w	r3, [sl]
 800b756:	4499      	add	r9, r3
 800b758:	e7d3      	b.n	800b702 <__cvt+0x6a>
 800b75a:	1c59      	adds	r1, r3, #1
 800b75c:	9103      	str	r1, [sp, #12]
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	e7d9      	b.n	800b716 <__cvt+0x7e>

0800b762 <__exponent>:
 800b762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b764:	2900      	cmp	r1, #0
 800b766:	bfba      	itte	lt
 800b768:	4249      	neglt	r1, r1
 800b76a:	232d      	movlt	r3, #45	@ 0x2d
 800b76c:	232b      	movge	r3, #43	@ 0x2b
 800b76e:	2909      	cmp	r1, #9
 800b770:	7002      	strb	r2, [r0, #0]
 800b772:	7043      	strb	r3, [r0, #1]
 800b774:	dd29      	ble.n	800b7ca <__exponent+0x68>
 800b776:	f10d 0307 	add.w	r3, sp, #7
 800b77a:	461d      	mov	r5, r3
 800b77c:	270a      	movs	r7, #10
 800b77e:	461a      	mov	r2, r3
 800b780:	fbb1 f6f7 	udiv	r6, r1, r7
 800b784:	fb07 1416 	mls	r4, r7, r6, r1
 800b788:	3430      	adds	r4, #48	@ 0x30
 800b78a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b78e:	460c      	mov	r4, r1
 800b790:	2c63      	cmp	r4, #99	@ 0x63
 800b792:	f103 33ff 	add.w	r3, r3, #4294967295
 800b796:	4631      	mov	r1, r6
 800b798:	dcf1      	bgt.n	800b77e <__exponent+0x1c>
 800b79a:	3130      	adds	r1, #48	@ 0x30
 800b79c:	1e94      	subs	r4, r2, #2
 800b79e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7a2:	1c41      	adds	r1, r0, #1
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	42ab      	cmp	r3, r5
 800b7a8:	d30a      	bcc.n	800b7c0 <__exponent+0x5e>
 800b7aa:	f10d 0309 	add.w	r3, sp, #9
 800b7ae:	1a9b      	subs	r3, r3, r2
 800b7b0:	42ac      	cmp	r4, r5
 800b7b2:	bf88      	it	hi
 800b7b4:	2300      	movhi	r3, #0
 800b7b6:	3302      	adds	r3, #2
 800b7b8:	4403      	add	r3, r0
 800b7ba:	1a18      	subs	r0, r3, r0
 800b7bc:	b003      	add	sp, #12
 800b7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b7c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b7c8:	e7ed      	b.n	800b7a6 <__exponent+0x44>
 800b7ca:	2330      	movs	r3, #48	@ 0x30
 800b7cc:	3130      	adds	r1, #48	@ 0x30
 800b7ce:	7083      	strb	r3, [r0, #2]
 800b7d0:	70c1      	strb	r1, [r0, #3]
 800b7d2:	1d03      	adds	r3, r0, #4
 800b7d4:	e7f1      	b.n	800b7ba <__exponent+0x58>
	...

0800b7d8 <_printf_float>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	b08d      	sub	sp, #52	@ 0x34
 800b7de:	460c      	mov	r4, r1
 800b7e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	461f      	mov	r7, r3
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	f000 fd23 	bl	800c234 <_localeconv_r>
 800b7ee:	6803      	ldr	r3, [r0, #0]
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7f4 fd5c 	bl	80002b0 <strlen>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b800:	9005      	str	r0, [sp, #20]
 800b802:	3307      	adds	r3, #7
 800b804:	f023 0307 	bic.w	r3, r3, #7
 800b808:	f103 0208 	add.w	r2, r3, #8
 800b80c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b810:	f8d4 b000 	ldr.w	fp, [r4]
 800b814:	f8c8 2000 	str.w	r2, [r8]
 800b818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b81c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b820:	9307      	str	r3, [sp, #28]
 800b822:	f8cd 8018 	str.w	r8, [sp, #24]
 800b826:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b82a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82e:	4b9c      	ldr	r3, [pc, #624]	@ (800baa0 <_printf_float+0x2c8>)
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	f7f5 f99a 	bl	8000b6c <__aeabi_dcmpun>
 800b838:	bb70      	cbnz	r0, 800b898 <_printf_float+0xc0>
 800b83a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b83e:	4b98      	ldr	r3, [pc, #608]	@ (800baa0 <_printf_float+0x2c8>)
 800b840:	f04f 32ff 	mov.w	r2, #4294967295
 800b844:	f7f5 f974 	bl	8000b30 <__aeabi_dcmple>
 800b848:	bb30      	cbnz	r0, 800b898 <_printf_float+0xc0>
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f5 f963 	bl	8000b1c <__aeabi_dcmplt>
 800b856:	b110      	cbz	r0, 800b85e <_printf_float+0x86>
 800b858:	232d      	movs	r3, #45	@ 0x2d
 800b85a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b85e:	4a91      	ldr	r2, [pc, #580]	@ (800baa4 <_printf_float+0x2cc>)
 800b860:	4b91      	ldr	r3, [pc, #580]	@ (800baa8 <_printf_float+0x2d0>)
 800b862:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b866:	bf94      	ite	ls
 800b868:	4690      	movls	r8, r2
 800b86a:	4698      	movhi	r8, r3
 800b86c:	2303      	movs	r3, #3
 800b86e:	6123      	str	r3, [r4, #16]
 800b870:	f02b 0304 	bic.w	r3, fp, #4
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	f04f 0900 	mov.w	r9, #0
 800b87a:	9700      	str	r7, [sp, #0]
 800b87c:	4633      	mov	r3, r6
 800b87e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b880:	4621      	mov	r1, r4
 800b882:	4628      	mov	r0, r5
 800b884:	f000 f9d2 	bl	800bc2c <_printf_common>
 800b888:	3001      	adds	r0, #1
 800b88a:	f040 808d 	bne.w	800b9a8 <_printf_float+0x1d0>
 800b88e:	f04f 30ff 	mov.w	r0, #4294967295
 800b892:	b00d      	add	sp, #52	@ 0x34
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	4642      	mov	r2, r8
 800b89a:	464b      	mov	r3, r9
 800b89c:	4640      	mov	r0, r8
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f5 f964 	bl	8000b6c <__aeabi_dcmpun>
 800b8a4:	b140      	cbz	r0, 800b8b8 <_printf_float+0xe0>
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfbc      	itt	lt
 800b8ac:	232d      	movlt	r3, #45	@ 0x2d
 800b8ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8b2:	4a7e      	ldr	r2, [pc, #504]	@ (800baac <_printf_float+0x2d4>)
 800b8b4:	4b7e      	ldr	r3, [pc, #504]	@ (800bab0 <_printf_float+0x2d8>)
 800b8b6:	e7d4      	b.n	800b862 <_printf_float+0x8a>
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b8be:	9206      	str	r2, [sp, #24]
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	d13b      	bne.n	800b93c <_printf_float+0x164>
 800b8c4:	2306      	movs	r3, #6
 800b8c6:	6063      	str	r3, [r4, #4]
 800b8c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	6022      	str	r2, [r4, #0]
 800b8d0:	9303      	str	r3, [sp, #12]
 800b8d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b8d8:	ab09      	add	r3, sp, #36	@ 0x24
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	6861      	ldr	r1, [r4, #4]
 800b8de:	ec49 8b10 	vmov	d0, r8, r9
 800b8e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f7ff fed6 	bl	800b698 <__cvt>
 800b8ec:	9b06      	ldr	r3, [sp, #24]
 800b8ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8f0:	2b47      	cmp	r3, #71	@ 0x47
 800b8f2:	4680      	mov	r8, r0
 800b8f4:	d129      	bne.n	800b94a <_printf_float+0x172>
 800b8f6:	1cc8      	adds	r0, r1, #3
 800b8f8:	db02      	blt.n	800b900 <_printf_float+0x128>
 800b8fa:	6863      	ldr	r3, [r4, #4]
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	dd41      	ble.n	800b984 <_printf_float+0x1ac>
 800b900:	f1aa 0a02 	sub.w	sl, sl, #2
 800b904:	fa5f fa8a 	uxtb.w	sl, sl
 800b908:	3901      	subs	r1, #1
 800b90a:	4652      	mov	r2, sl
 800b90c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b910:	9109      	str	r1, [sp, #36]	@ 0x24
 800b912:	f7ff ff26 	bl	800b762 <__exponent>
 800b916:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b918:	1813      	adds	r3, r2, r0
 800b91a:	2a01      	cmp	r2, #1
 800b91c:	4681      	mov	r9, r0
 800b91e:	6123      	str	r3, [r4, #16]
 800b920:	dc02      	bgt.n	800b928 <_printf_float+0x150>
 800b922:	6822      	ldr	r2, [r4, #0]
 800b924:	07d2      	lsls	r2, r2, #31
 800b926:	d501      	bpl.n	800b92c <_printf_float+0x154>
 800b928:	3301      	adds	r3, #1
 800b92a:	6123      	str	r3, [r4, #16]
 800b92c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b930:	2b00      	cmp	r3, #0
 800b932:	d0a2      	beq.n	800b87a <_printf_float+0xa2>
 800b934:	232d      	movs	r3, #45	@ 0x2d
 800b936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b93a:	e79e      	b.n	800b87a <_printf_float+0xa2>
 800b93c:	9a06      	ldr	r2, [sp, #24]
 800b93e:	2a47      	cmp	r2, #71	@ 0x47
 800b940:	d1c2      	bne.n	800b8c8 <_printf_float+0xf0>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1c0      	bne.n	800b8c8 <_printf_float+0xf0>
 800b946:	2301      	movs	r3, #1
 800b948:	e7bd      	b.n	800b8c6 <_printf_float+0xee>
 800b94a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b94e:	d9db      	bls.n	800b908 <_printf_float+0x130>
 800b950:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b954:	d118      	bne.n	800b988 <_printf_float+0x1b0>
 800b956:	2900      	cmp	r1, #0
 800b958:	6863      	ldr	r3, [r4, #4]
 800b95a:	dd0b      	ble.n	800b974 <_printf_float+0x19c>
 800b95c:	6121      	str	r1, [r4, #16]
 800b95e:	b913      	cbnz	r3, 800b966 <_printf_float+0x18e>
 800b960:	6822      	ldr	r2, [r4, #0]
 800b962:	07d0      	lsls	r0, r2, #31
 800b964:	d502      	bpl.n	800b96c <_printf_float+0x194>
 800b966:	3301      	adds	r3, #1
 800b968:	440b      	add	r3, r1
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b96e:	f04f 0900 	mov.w	r9, #0
 800b972:	e7db      	b.n	800b92c <_printf_float+0x154>
 800b974:	b913      	cbnz	r3, 800b97c <_printf_float+0x1a4>
 800b976:	6822      	ldr	r2, [r4, #0]
 800b978:	07d2      	lsls	r2, r2, #31
 800b97a:	d501      	bpl.n	800b980 <_printf_float+0x1a8>
 800b97c:	3302      	adds	r3, #2
 800b97e:	e7f4      	b.n	800b96a <_printf_float+0x192>
 800b980:	2301      	movs	r3, #1
 800b982:	e7f2      	b.n	800b96a <_printf_float+0x192>
 800b984:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b98a:	4299      	cmp	r1, r3
 800b98c:	db05      	blt.n	800b99a <_printf_float+0x1c2>
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	6121      	str	r1, [r4, #16]
 800b992:	07d8      	lsls	r0, r3, #31
 800b994:	d5ea      	bpl.n	800b96c <_printf_float+0x194>
 800b996:	1c4b      	adds	r3, r1, #1
 800b998:	e7e7      	b.n	800b96a <_printf_float+0x192>
 800b99a:	2900      	cmp	r1, #0
 800b99c:	bfd4      	ite	le
 800b99e:	f1c1 0202 	rsble	r2, r1, #2
 800b9a2:	2201      	movgt	r2, #1
 800b9a4:	4413      	add	r3, r2
 800b9a6:	e7e0      	b.n	800b96a <_printf_float+0x192>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	055a      	lsls	r2, r3, #21
 800b9ac:	d407      	bmi.n	800b9be <_printf_float+0x1e6>
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	4642      	mov	r2, r8
 800b9b2:	4631      	mov	r1, r6
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b8      	blx	r7
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d12b      	bne.n	800ba14 <_printf_float+0x23c>
 800b9bc:	e767      	b.n	800b88e <_printf_float+0xb6>
 800b9be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9c2:	f240 80dd 	bls.w	800bb80 <_printf_float+0x3a8>
 800b9c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	f7f5 f89b 	bl	8000b08 <__aeabi_dcmpeq>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d033      	beq.n	800ba3e <_printf_float+0x266>
 800b9d6:	4a37      	ldr	r2, [pc, #220]	@ (800bab4 <_printf_float+0x2dc>)
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4628      	mov	r0, r5
 800b9de:	47b8      	blx	r7
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	f43f af54 	beq.w	800b88e <_printf_float+0xb6>
 800b9e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b9ea:	4543      	cmp	r3, r8
 800b9ec:	db02      	blt.n	800b9f4 <_printf_float+0x21c>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	07d8      	lsls	r0, r3, #31
 800b9f2:	d50f      	bpl.n	800ba14 <_printf_float+0x23c>
 800b9f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	47b8      	blx	r7
 800b9fe:	3001      	adds	r0, #1
 800ba00:	f43f af45 	beq.w	800b88e <_printf_float+0xb6>
 800ba04:	f04f 0900 	mov.w	r9, #0
 800ba08:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba0c:	f104 0a1a 	add.w	sl, r4, #26
 800ba10:	45c8      	cmp	r8, r9
 800ba12:	dc09      	bgt.n	800ba28 <_printf_float+0x250>
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	079b      	lsls	r3, r3, #30
 800ba18:	f100 8103 	bmi.w	800bc22 <_printf_float+0x44a>
 800ba1c:	68e0      	ldr	r0, [r4, #12]
 800ba1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba20:	4298      	cmp	r0, r3
 800ba22:	bfb8      	it	lt
 800ba24:	4618      	movlt	r0, r3
 800ba26:	e734      	b.n	800b892 <_printf_float+0xba>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	4652      	mov	r2, sl
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b8      	blx	r7
 800ba32:	3001      	adds	r0, #1
 800ba34:	f43f af2b 	beq.w	800b88e <_printf_float+0xb6>
 800ba38:	f109 0901 	add.w	r9, r9, #1
 800ba3c:	e7e8      	b.n	800ba10 <_printf_float+0x238>
 800ba3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	dc39      	bgt.n	800bab8 <_printf_float+0x2e0>
 800ba44:	4a1b      	ldr	r2, [pc, #108]	@ (800bab4 <_printf_float+0x2dc>)
 800ba46:	2301      	movs	r3, #1
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	f43f af1d 	beq.w	800b88e <_printf_float+0xb6>
 800ba54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba58:	ea59 0303 	orrs.w	r3, r9, r3
 800ba5c:	d102      	bne.n	800ba64 <_printf_float+0x28c>
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	07d9      	lsls	r1, r3, #31
 800ba62:	d5d7      	bpl.n	800ba14 <_printf_float+0x23c>
 800ba64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba68:	4631      	mov	r1, r6
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	47b8      	blx	r7
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f43f af0d 	beq.w	800b88e <_printf_float+0xb6>
 800ba74:	f04f 0a00 	mov.w	sl, #0
 800ba78:	f104 0b1a 	add.w	fp, r4, #26
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	425b      	negs	r3, r3
 800ba80:	4553      	cmp	r3, sl
 800ba82:	dc01      	bgt.n	800ba88 <_printf_float+0x2b0>
 800ba84:	464b      	mov	r3, r9
 800ba86:	e793      	b.n	800b9b0 <_printf_float+0x1d8>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	465a      	mov	r2, fp
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b8      	blx	r7
 800ba92:	3001      	adds	r0, #1
 800ba94:	f43f aefb 	beq.w	800b88e <_printf_float+0xb6>
 800ba98:	f10a 0a01 	add.w	sl, sl, #1
 800ba9c:	e7ee      	b.n	800ba7c <_printf_float+0x2a4>
 800ba9e:	bf00      	nop
 800baa0:	7fefffff 	.word	0x7fefffff
 800baa4:	08010041 	.word	0x08010041
 800baa8:	08010045 	.word	0x08010045
 800baac:	08010049 	.word	0x08010049
 800bab0:	0801004d 	.word	0x0801004d
 800bab4:	08010051 	.word	0x08010051
 800bab8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800baba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800babe:	4553      	cmp	r3, sl
 800bac0:	bfa8      	it	ge
 800bac2:	4653      	movge	r3, sl
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	4699      	mov	r9, r3
 800bac8:	dc36      	bgt.n	800bb38 <_printf_float+0x360>
 800baca:	f04f 0b00 	mov.w	fp, #0
 800bace:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bad2:	f104 021a 	add.w	r2, r4, #26
 800bad6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bad8:	9306      	str	r3, [sp, #24]
 800bada:	eba3 0309 	sub.w	r3, r3, r9
 800bade:	455b      	cmp	r3, fp
 800bae0:	dc31      	bgt.n	800bb46 <_printf_float+0x36e>
 800bae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae4:	459a      	cmp	sl, r3
 800bae6:	dc3a      	bgt.n	800bb5e <_printf_float+0x386>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07da      	lsls	r2, r3, #31
 800baec:	d437      	bmi.n	800bb5e <_printf_float+0x386>
 800baee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf0:	ebaa 0903 	sub.w	r9, sl, r3
 800baf4:	9b06      	ldr	r3, [sp, #24]
 800baf6:	ebaa 0303 	sub.w	r3, sl, r3
 800bafa:	4599      	cmp	r9, r3
 800bafc:	bfa8      	it	ge
 800bafe:	4699      	movge	r9, r3
 800bb00:	f1b9 0f00 	cmp.w	r9, #0
 800bb04:	dc33      	bgt.n	800bb6e <_printf_float+0x396>
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb0e:	f104 0b1a 	add.w	fp, r4, #26
 800bb12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb14:	ebaa 0303 	sub.w	r3, sl, r3
 800bb18:	eba3 0309 	sub.w	r3, r3, r9
 800bb1c:	4543      	cmp	r3, r8
 800bb1e:	f77f af79 	ble.w	800ba14 <_printf_float+0x23c>
 800bb22:	2301      	movs	r3, #1
 800bb24:	465a      	mov	r2, fp
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	47b8      	blx	r7
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	f43f aeae 	beq.w	800b88e <_printf_float+0xb6>
 800bb32:	f108 0801 	add.w	r8, r8, #1
 800bb36:	e7ec      	b.n	800bb12 <_printf_float+0x33a>
 800bb38:	4642      	mov	r2, r8
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b8      	blx	r7
 800bb40:	3001      	adds	r0, #1
 800bb42:	d1c2      	bne.n	800baca <_printf_float+0x2f2>
 800bb44:	e6a3      	b.n	800b88e <_printf_float+0xb6>
 800bb46:	2301      	movs	r3, #1
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	9206      	str	r2, [sp, #24]
 800bb4e:	47b8      	blx	r7
 800bb50:	3001      	adds	r0, #1
 800bb52:	f43f ae9c 	beq.w	800b88e <_printf_float+0xb6>
 800bb56:	9a06      	ldr	r2, [sp, #24]
 800bb58:	f10b 0b01 	add.w	fp, fp, #1
 800bb5c:	e7bb      	b.n	800bad6 <_printf_float+0x2fe>
 800bb5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb62:	4631      	mov	r1, r6
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b8      	blx	r7
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d1c0      	bne.n	800baee <_printf_float+0x316>
 800bb6c:	e68f      	b.n	800b88e <_printf_float+0xb6>
 800bb6e:	9a06      	ldr	r2, [sp, #24]
 800bb70:	464b      	mov	r3, r9
 800bb72:	4442      	add	r2, r8
 800bb74:	4631      	mov	r1, r6
 800bb76:	4628      	mov	r0, r5
 800bb78:	47b8      	blx	r7
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d1c3      	bne.n	800bb06 <_printf_float+0x32e>
 800bb7e:	e686      	b.n	800b88e <_printf_float+0xb6>
 800bb80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb84:	f1ba 0f01 	cmp.w	sl, #1
 800bb88:	dc01      	bgt.n	800bb8e <_printf_float+0x3b6>
 800bb8a:	07db      	lsls	r3, r3, #31
 800bb8c:	d536      	bpl.n	800bbfc <_printf_float+0x424>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	4642      	mov	r2, r8
 800bb92:	4631      	mov	r1, r6
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b8      	blx	r7
 800bb98:	3001      	adds	r0, #1
 800bb9a:	f43f ae78 	beq.w	800b88e <_printf_float+0xb6>
 800bb9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba2:	4631      	mov	r1, r6
 800bba4:	4628      	mov	r0, r5
 800bba6:	47b8      	blx	r7
 800bba8:	3001      	adds	r0, #1
 800bbaa:	f43f ae70 	beq.w	800b88e <_printf_float+0xb6>
 800bbae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbba:	f7f4 ffa5 	bl	8000b08 <__aeabi_dcmpeq>
 800bbbe:	b9c0      	cbnz	r0, 800bbf2 <_printf_float+0x41a>
 800bbc0:	4653      	mov	r3, sl
 800bbc2:	f108 0201 	add.w	r2, r8, #1
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b8      	blx	r7
 800bbcc:	3001      	adds	r0, #1
 800bbce:	d10c      	bne.n	800bbea <_printf_float+0x412>
 800bbd0:	e65d      	b.n	800b88e <_printf_float+0xb6>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	465a      	mov	r2, fp
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	4628      	mov	r0, r5
 800bbda:	47b8      	blx	r7
 800bbdc:	3001      	adds	r0, #1
 800bbde:	f43f ae56 	beq.w	800b88e <_printf_float+0xb6>
 800bbe2:	f108 0801 	add.w	r8, r8, #1
 800bbe6:	45d0      	cmp	r8, sl
 800bbe8:	dbf3      	blt.n	800bbd2 <_printf_float+0x3fa>
 800bbea:	464b      	mov	r3, r9
 800bbec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bbf0:	e6df      	b.n	800b9b2 <_printf_float+0x1da>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	f104 0b1a 	add.w	fp, r4, #26
 800bbfa:	e7f4      	b.n	800bbe6 <_printf_float+0x40e>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4642      	mov	r2, r8
 800bc00:	e7e1      	b.n	800bbc6 <_printf_float+0x3ee>
 800bc02:	2301      	movs	r3, #1
 800bc04:	464a      	mov	r2, r9
 800bc06:	4631      	mov	r1, r6
 800bc08:	4628      	mov	r0, r5
 800bc0a:	47b8      	blx	r7
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	f43f ae3e 	beq.w	800b88e <_printf_float+0xb6>
 800bc12:	f108 0801 	add.w	r8, r8, #1
 800bc16:	68e3      	ldr	r3, [r4, #12]
 800bc18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc1a:	1a5b      	subs	r3, r3, r1
 800bc1c:	4543      	cmp	r3, r8
 800bc1e:	dcf0      	bgt.n	800bc02 <_printf_float+0x42a>
 800bc20:	e6fc      	b.n	800ba1c <_printf_float+0x244>
 800bc22:	f04f 0800 	mov.w	r8, #0
 800bc26:	f104 0919 	add.w	r9, r4, #25
 800bc2a:	e7f4      	b.n	800bc16 <_printf_float+0x43e>

0800bc2c <_printf_common>:
 800bc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	4616      	mov	r6, r2
 800bc32:	4698      	mov	r8, r3
 800bc34:	688a      	ldr	r2, [r1, #8]
 800bc36:	690b      	ldr	r3, [r1, #16]
 800bc38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	bfb8      	it	lt
 800bc40:	4613      	movlt	r3, r2
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc48:	4607      	mov	r7, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_printf_common+0x26>
 800bc4e:	3301      	adds	r3, #1
 800bc50:	6033      	str	r3, [r6, #0]
 800bc52:	6823      	ldr	r3, [r4, #0]
 800bc54:	0699      	lsls	r1, r3, #26
 800bc56:	bf42      	ittt	mi
 800bc58:	6833      	ldrmi	r3, [r6, #0]
 800bc5a:	3302      	addmi	r3, #2
 800bc5c:	6033      	strmi	r3, [r6, #0]
 800bc5e:	6825      	ldr	r5, [r4, #0]
 800bc60:	f015 0506 	ands.w	r5, r5, #6
 800bc64:	d106      	bne.n	800bc74 <_printf_common+0x48>
 800bc66:	f104 0a19 	add.w	sl, r4, #25
 800bc6a:	68e3      	ldr	r3, [r4, #12]
 800bc6c:	6832      	ldr	r2, [r6, #0]
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dc26      	bgt.n	800bcc2 <_printf_common+0x96>
 800bc74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc78:	6822      	ldr	r2, [r4, #0]
 800bc7a:	3b00      	subs	r3, #0
 800bc7c:	bf18      	it	ne
 800bc7e:	2301      	movne	r3, #1
 800bc80:	0692      	lsls	r2, r2, #26
 800bc82:	d42b      	bmi.n	800bcdc <_printf_common+0xb0>
 800bc84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc88:	4641      	mov	r1, r8
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	47c8      	blx	r9
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d01e      	beq.n	800bcd0 <_printf_common+0xa4>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	6922      	ldr	r2, [r4, #16]
 800bc96:	f003 0306 	and.w	r3, r3, #6
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	bf02      	ittt	eq
 800bc9e:	68e5      	ldreq	r5, [r4, #12]
 800bca0:	6833      	ldreq	r3, [r6, #0]
 800bca2:	1aed      	subeq	r5, r5, r3
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	bf0c      	ite	eq
 800bca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcac:	2500      	movne	r5, #0
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	bfc4      	itt	gt
 800bcb2:	1a9b      	subgt	r3, r3, r2
 800bcb4:	18ed      	addgt	r5, r5, r3
 800bcb6:	2600      	movs	r6, #0
 800bcb8:	341a      	adds	r4, #26
 800bcba:	42b5      	cmp	r5, r6
 800bcbc:	d11a      	bne.n	800bcf4 <_printf_common+0xc8>
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	e008      	b.n	800bcd4 <_printf_common+0xa8>
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	4641      	mov	r1, r8
 800bcc8:	4638      	mov	r0, r7
 800bcca:	47c8      	blx	r9
 800bccc:	3001      	adds	r0, #1
 800bcce:	d103      	bne.n	800bcd8 <_printf_common+0xac>
 800bcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd8:	3501      	adds	r5, #1
 800bcda:	e7c6      	b.n	800bc6a <_printf_common+0x3e>
 800bcdc:	18e1      	adds	r1, r4, r3
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	2030      	movs	r0, #48	@ 0x30
 800bce2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bce6:	4422      	add	r2, r4
 800bce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bcec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcf0:	3302      	adds	r3, #2
 800bcf2:	e7c7      	b.n	800bc84 <_printf_common+0x58>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4641      	mov	r1, r8
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	47c8      	blx	r9
 800bcfe:	3001      	adds	r0, #1
 800bd00:	d0e6      	beq.n	800bcd0 <_printf_common+0xa4>
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7d9      	b.n	800bcba <_printf_common+0x8e>
	...

0800bd08 <_printf_i>:
 800bd08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	7e0f      	ldrb	r7, [r1, #24]
 800bd0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd10:	2f78      	cmp	r7, #120	@ 0x78
 800bd12:	4691      	mov	r9, r2
 800bd14:	4680      	mov	r8, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	469a      	mov	sl, r3
 800bd1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd1e:	d807      	bhi.n	800bd30 <_printf_i+0x28>
 800bd20:	2f62      	cmp	r7, #98	@ 0x62
 800bd22:	d80a      	bhi.n	800bd3a <_printf_i+0x32>
 800bd24:	2f00      	cmp	r7, #0
 800bd26:	f000 80d2 	beq.w	800bece <_printf_i+0x1c6>
 800bd2a:	2f58      	cmp	r7, #88	@ 0x58
 800bd2c:	f000 80b9 	beq.w	800bea2 <_printf_i+0x19a>
 800bd30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd38:	e03a      	b.n	800bdb0 <_printf_i+0xa8>
 800bd3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd3e:	2b15      	cmp	r3, #21
 800bd40:	d8f6      	bhi.n	800bd30 <_printf_i+0x28>
 800bd42:	a101      	add	r1, pc, #4	@ (adr r1, 800bd48 <_printf_i+0x40>)
 800bd44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd48:	0800bda1 	.word	0x0800bda1
 800bd4c:	0800bdb5 	.word	0x0800bdb5
 800bd50:	0800bd31 	.word	0x0800bd31
 800bd54:	0800bd31 	.word	0x0800bd31
 800bd58:	0800bd31 	.word	0x0800bd31
 800bd5c:	0800bd31 	.word	0x0800bd31
 800bd60:	0800bdb5 	.word	0x0800bdb5
 800bd64:	0800bd31 	.word	0x0800bd31
 800bd68:	0800bd31 	.word	0x0800bd31
 800bd6c:	0800bd31 	.word	0x0800bd31
 800bd70:	0800bd31 	.word	0x0800bd31
 800bd74:	0800beb5 	.word	0x0800beb5
 800bd78:	0800bddf 	.word	0x0800bddf
 800bd7c:	0800be6f 	.word	0x0800be6f
 800bd80:	0800bd31 	.word	0x0800bd31
 800bd84:	0800bd31 	.word	0x0800bd31
 800bd88:	0800bed7 	.word	0x0800bed7
 800bd8c:	0800bd31 	.word	0x0800bd31
 800bd90:	0800bddf 	.word	0x0800bddf
 800bd94:	0800bd31 	.word	0x0800bd31
 800bd98:	0800bd31 	.word	0x0800bd31
 800bd9c:	0800be77 	.word	0x0800be77
 800bda0:	6833      	ldr	r3, [r6, #0]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6032      	str	r2, [r6, #0]
 800bda8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e09d      	b.n	800bef0 <_printf_i+0x1e8>
 800bdb4:	6833      	ldr	r3, [r6, #0]
 800bdb6:	6820      	ldr	r0, [r4, #0]
 800bdb8:	1d19      	adds	r1, r3, #4
 800bdba:	6031      	str	r1, [r6, #0]
 800bdbc:	0606      	lsls	r6, r0, #24
 800bdbe:	d501      	bpl.n	800bdc4 <_printf_i+0xbc>
 800bdc0:	681d      	ldr	r5, [r3, #0]
 800bdc2:	e003      	b.n	800bdcc <_printf_i+0xc4>
 800bdc4:	0645      	lsls	r5, r0, #25
 800bdc6:	d5fb      	bpl.n	800bdc0 <_printf_i+0xb8>
 800bdc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bdcc:	2d00      	cmp	r5, #0
 800bdce:	da03      	bge.n	800bdd8 <_printf_i+0xd0>
 800bdd0:	232d      	movs	r3, #45	@ 0x2d
 800bdd2:	426d      	negs	r5, r5
 800bdd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdd8:	4859      	ldr	r0, [pc, #356]	@ (800bf40 <_printf_i+0x238>)
 800bdda:	230a      	movs	r3, #10
 800bddc:	e011      	b.n	800be02 <_printf_i+0xfa>
 800bdde:	6821      	ldr	r1, [r4, #0]
 800bde0:	6833      	ldr	r3, [r6, #0]
 800bde2:	0608      	lsls	r0, r1, #24
 800bde4:	f853 5b04 	ldr.w	r5, [r3], #4
 800bde8:	d402      	bmi.n	800bdf0 <_printf_i+0xe8>
 800bdea:	0649      	lsls	r1, r1, #25
 800bdec:	bf48      	it	mi
 800bdee:	b2ad      	uxthmi	r5, r5
 800bdf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdf2:	4853      	ldr	r0, [pc, #332]	@ (800bf40 <_printf_i+0x238>)
 800bdf4:	6033      	str	r3, [r6, #0]
 800bdf6:	bf14      	ite	ne
 800bdf8:	230a      	movne	r3, #10
 800bdfa:	2308      	moveq	r3, #8
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be02:	6866      	ldr	r6, [r4, #4]
 800be04:	60a6      	str	r6, [r4, #8]
 800be06:	2e00      	cmp	r6, #0
 800be08:	bfa2      	ittt	ge
 800be0a:	6821      	ldrge	r1, [r4, #0]
 800be0c:	f021 0104 	bicge.w	r1, r1, #4
 800be10:	6021      	strge	r1, [r4, #0]
 800be12:	b90d      	cbnz	r5, 800be18 <_printf_i+0x110>
 800be14:	2e00      	cmp	r6, #0
 800be16:	d04b      	beq.n	800beb0 <_printf_i+0x1a8>
 800be18:	4616      	mov	r6, r2
 800be1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800be1e:	fb03 5711 	mls	r7, r3, r1, r5
 800be22:	5dc7      	ldrb	r7, [r0, r7]
 800be24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be28:	462f      	mov	r7, r5
 800be2a:	42bb      	cmp	r3, r7
 800be2c:	460d      	mov	r5, r1
 800be2e:	d9f4      	bls.n	800be1a <_printf_i+0x112>
 800be30:	2b08      	cmp	r3, #8
 800be32:	d10b      	bne.n	800be4c <_printf_i+0x144>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	07df      	lsls	r7, r3, #31
 800be38:	d508      	bpl.n	800be4c <_printf_i+0x144>
 800be3a:	6923      	ldr	r3, [r4, #16]
 800be3c:	6861      	ldr	r1, [r4, #4]
 800be3e:	4299      	cmp	r1, r3
 800be40:	bfde      	ittt	le
 800be42:	2330      	movle	r3, #48	@ 0x30
 800be44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be4c:	1b92      	subs	r2, r2, r6
 800be4e:	6122      	str	r2, [r4, #16]
 800be50:	f8cd a000 	str.w	sl, [sp]
 800be54:	464b      	mov	r3, r9
 800be56:	aa03      	add	r2, sp, #12
 800be58:	4621      	mov	r1, r4
 800be5a:	4640      	mov	r0, r8
 800be5c:	f7ff fee6 	bl	800bc2c <_printf_common>
 800be60:	3001      	adds	r0, #1
 800be62:	d14a      	bne.n	800befa <_printf_i+0x1f2>
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b004      	add	sp, #16
 800be6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	f043 0320 	orr.w	r3, r3, #32
 800be74:	6023      	str	r3, [r4, #0]
 800be76:	4833      	ldr	r0, [pc, #204]	@ (800bf44 <_printf_i+0x23c>)
 800be78:	2778      	movs	r7, #120	@ 0x78
 800be7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be7e:	6823      	ldr	r3, [r4, #0]
 800be80:	6831      	ldr	r1, [r6, #0]
 800be82:	061f      	lsls	r7, r3, #24
 800be84:	f851 5b04 	ldr.w	r5, [r1], #4
 800be88:	d402      	bmi.n	800be90 <_printf_i+0x188>
 800be8a:	065f      	lsls	r7, r3, #25
 800be8c:	bf48      	it	mi
 800be8e:	b2ad      	uxthmi	r5, r5
 800be90:	6031      	str	r1, [r6, #0]
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	bf44      	itt	mi
 800be96:	f043 0320 	orrmi.w	r3, r3, #32
 800be9a:	6023      	strmi	r3, [r4, #0]
 800be9c:	b11d      	cbz	r5, 800bea6 <_printf_i+0x19e>
 800be9e:	2310      	movs	r3, #16
 800bea0:	e7ac      	b.n	800bdfc <_printf_i+0xf4>
 800bea2:	4827      	ldr	r0, [pc, #156]	@ (800bf40 <_printf_i+0x238>)
 800bea4:	e7e9      	b.n	800be7a <_printf_i+0x172>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	f023 0320 	bic.w	r3, r3, #32
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	e7f6      	b.n	800be9e <_printf_i+0x196>
 800beb0:	4616      	mov	r6, r2
 800beb2:	e7bd      	b.n	800be30 <_printf_i+0x128>
 800beb4:	6833      	ldr	r3, [r6, #0]
 800beb6:	6825      	ldr	r5, [r4, #0]
 800beb8:	6961      	ldr	r1, [r4, #20]
 800beba:	1d18      	adds	r0, r3, #4
 800bebc:	6030      	str	r0, [r6, #0]
 800bebe:	062e      	lsls	r6, r5, #24
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	d501      	bpl.n	800bec8 <_printf_i+0x1c0>
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	e002      	b.n	800bece <_printf_i+0x1c6>
 800bec8:	0668      	lsls	r0, r5, #25
 800beca:	d5fb      	bpl.n	800bec4 <_printf_i+0x1bc>
 800becc:	8019      	strh	r1, [r3, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	4616      	mov	r6, r2
 800bed4:	e7bc      	b.n	800be50 <_printf_i+0x148>
 800bed6:	6833      	ldr	r3, [r6, #0]
 800bed8:	1d1a      	adds	r2, r3, #4
 800beda:	6032      	str	r2, [r6, #0]
 800bedc:	681e      	ldr	r6, [r3, #0]
 800bede:	6862      	ldr	r2, [r4, #4]
 800bee0:	2100      	movs	r1, #0
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7f4 f994 	bl	8000210 <memchr>
 800bee8:	b108      	cbz	r0, 800beee <_printf_i+0x1e6>
 800beea:	1b80      	subs	r0, r0, r6
 800beec:	6060      	str	r0, [r4, #4]
 800beee:	6863      	ldr	r3, [r4, #4]
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	2300      	movs	r3, #0
 800bef4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef8:	e7aa      	b.n	800be50 <_printf_i+0x148>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	4632      	mov	r2, r6
 800befe:	4649      	mov	r1, r9
 800bf00:	4640      	mov	r0, r8
 800bf02:	47d0      	blx	sl
 800bf04:	3001      	adds	r0, #1
 800bf06:	d0ad      	beq.n	800be64 <_printf_i+0x15c>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	079b      	lsls	r3, r3, #30
 800bf0c:	d413      	bmi.n	800bf36 <_printf_i+0x22e>
 800bf0e:	68e0      	ldr	r0, [r4, #12]
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	4298      	cmp	r0, r3
 800bf14:	bfb8      	it	lt
 800bf16:	4618      	movlt	r0, r3
 800bf18:	e7a6      	b.n	800be68 <_printf_i+0x160>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4649      	mov	r1, r9
 800bf20:	4640      	mov	r0, r8
 800bf22:	47d0      	blx	sl
 800bf24:	3001      	adds	r0, #1
 800bf26:	d09d      	beq.n	800be64 <_printf_i+0x15c>
 800bf28:	3501      	adds	r5, #1
 800bf2a:	68e3      	ldr	r3, [r4, #12]
 800bf2c:	9903      	ldr	r1, [sp, #12]
 800bf2e:	1a5b      	subs	r3, r3, r1
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dcf2      	bgt.n	800bf1a <_printf_i+0x212>
 800bf34:	e7eb      	b.n	800bf0e <_printf_i+0x206>
 800bf36:	2500      	movs	r5, #0
 800bf38:	f104 0619 	add.w	r6, r4, #25
 800bf3c:	e7f5      	b.n	800bf2a <_printf_i+0x222>
 800bf3e:	bf00      	nop
 800bf40:	08010053 	.word	0x08010053
 800bf44:	08010064 	.word	0x08010064

0800bf48 <std>:
 800bf48:	2300      	movs	r3, #0
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf56:	6083      	str	r3, [r0, #8]
 800bf58:	8181      	strh	r1, [r0, #12]
 800bf5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf5c:	81c2      	strh	r2, [r0, #14]
 800bf5e:	6183      	str	r3, [r0, #24]
 800bf60:	4619      	mov	r1, r3
 800bf62:	2208      	movs	r2, #8
 800bf64:	305c      	adds	r0, #92	@ 0x5c
 800bf66:	f000 f928 	bl	800c1ba <memset>
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa0 <std+0x58>)
 800bf6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa4 <std+0x5c>)
 800bf70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf72:	4b0d      	ldr	r3, [pc, #52]	@ (800bfa8 <std+0x60>)
 800bf74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf76:	4b0d      	ldr	r3, [pc, #52]	@ (800bfac <std+0x64>)
 800bf78:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb0 <std+0x68>)
 800bf7c:	6224      	str	r4, [r4, #32]
 800bf7e:	429c      	cmp	r4, r3
 800bf80:	d006      	beq.n	800bf90 <std+0x48>
 800bf82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf86:	4294      	cmp	r4, r2
 800bf88:	d002      	beq.n	800bf90 <std+0x48>
 800bf8a:	33d0      	adds	r3, #208	@ 0xd0
 800bf8c:	429c      	cmp	r4, r3
 800bf8e:	d105      	bne.n	800bf9c <std+0x54>
 800bf90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf98:	f000 b9c0 	b.w	800c31c <__retarget_lock_init_recursive>
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	bf00      	nop
 800bfa0:	0800c135 	.word	0x0800c135
 800bfa4:	0800c157 	.word	0x0800c157
 800bfa8:	0800c18f 	.word	0x0800c18f
 800bfac:	0800c1b3 	.word	0x0800c1b3
 800bfb0:	20000b54 	.word	0x20000b54

0800bfb4 <stdio_exit_handler>:
 800bfb4:	4a02      	ldr	r2, [pc, #8]	@ (800bfc0 <stdio_exit_handler+0xc>)
 800bfb6:	4903      	ldr	r1, [pc, #12]	@ (800bfc4 <stdio_exit_handler+0x10>)
 800bfb8:	4803      	ldr	r0, [pc, #12]	@ (800bfc8 <stdio_exit_handler+0x14>)
 800bfba:	f000 b869 	b.w	800c090 <_fwalk_sglue>
 800bfbe:	bf00      	nop
 800bfc0:	200000d8 	.word	0x200000d8
 800bfc4:	0800e5c5 	.word	0x0800e5c5
 800bfc8:	20000254 	.word	0x20000254

0800bfcc <cleanup_stdio>:
 800bfcc:	6841      	ldr	r1, [r0, #4]
 800bfce:	4b0c      	ldr	r3, [pc, #48]	@ (800c000 <cleanup_stdio+0x34>)
 800bfd0:	4299      	cmp	r1, r3
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	d001      	beq.n	800bfdc <cleanup_stdio+0x10>
 800bfd8:	f002 faf4 	bl	800e5c4 <_fflush_r>
 800bfdc:	68a1      	ldr	r1, [r4, #8]
 800bfde:	4b09      	ldr	r3, [pc, #36]	@ (800c004 <cleanup_stdio+0x38>)
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	d002      	beq.n	800bfea <cleanup_stdio+0x1e>
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f002 faed 	bl	800e5c4 <_fflush_r>
 800bfea:	68e1      	ldr	r1, [r4, #12]
 800bfec:	4b06      	ldr	r3, [pc, #24]	@ (800c008 <cleanup_stdio+0x3c>)
 800bfee:	4299      	cmp	r1, r3
 800bff0:	d004      	beq.n	800bffc <cleanup_stdio+0x30>
 800bff2:	4620      	mov	r0, r4
 800bff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bff8:	f002 bae4 	b.w	800e5c4 <_fflush_r>
 800bffc:	bd10      	pop	{r4, pc}
 800bffe:	bf00      	nop
 800c000:	20000b54 	.word	0x20000b54
 800c004:	20000bbc 	.word	0x20000bbc
 800c008:	20000c24 	.word	0x20000c24

0800c00c <global_stdio_init.part.0>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	4b0b      	ldr	r3, [pc, #44]	@ (800c03c <global_stdio_init.part.0+0x30>)
 800c010:	4c0b      	ldr	r4, [pc, #44]	@ (800c040 <global_stdio_init.part.0+0x34>)
 800c012:	4a0c      	ldr	r2, [pc, #48]	@ (800c044 <global_stdio_init.part.0+0x38>)
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	4620      	mov	r0, r4
 800c018:	2200      	movs	r2, #0
 800c01a:	2104      	movs	r1, #4
 800c01c:	f7ff ff94 	bl	800bf48 <std>
 800c020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c024:	2201      	movs	r2, #1
 800c026:	2109      	movs	r1, #9
 800c028:	f7ff ff8e 	bl	800bf48 <std>
 800c02c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c030:	2202      	movs	r2, #2
 800c032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c036:	2112      	movs	r1, #18
 800c038:	f7ff bf86 	b.w	800bf48 <std>
 800c03c:	20000c8c 	.word	0x20000c8c
 800c040:	20000b54 	.word	0x20000b54
 800c044:	0800bfb5 	.word	0x0800bfb5

0800c048 <__sfp_lock_acquire>:
 800c048:	4801      	ldr	r0, [pc, #4]	@ (800c050 <__sfp_lock_acquire+0x8>)
 800c04a:	f000 b968 	b.w	800c31e <__retarget_lock_acquire_recursive>
 800c04e:	bf00      	nop
 800c050:	20000c95 	.word	0x20000c95

0800c054 <__sfp_lock_release>:
 800c054:	4801      	ldr	r0, [pc, #4]	@ (800c05c <__sfp_lock_release+0x8>)
 800c056:	f000 b963 	b.w	800c320 <__retarget_lock_release_recursive>
 800c05a:	bf00      	nop
 800c05c:	20000c95 	.word	0x20000c95

0800c060 <__sinit>:
 800c060:	b510      	push	{r4, lr}
 800c062:	4604      	mov	r4, r0
 800c064:	f7ff fff0 	bl	800c048 <__sfp_lock_acquire>
 800c068:	6a23      	ldr	r3, [r4, #32]
 800c06a:	b11b      	cbz	r3, 800c074 <__sinit+0x14>
 800c06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c070:	f7ff bff0 	b.w	800c054 <__sfp_lock_release>
 800c074:	4b04      	ldr	r3, [pc, #16]	@ (800c088 <__sinit+0x28>)
 800c076:	6223      	str	r3, [r4, #32]
 800c078:	4b04      	ldr	r3, [pc, #16]	@ (800c08c <__sinit+0x2c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1f5      	bne.n	800c06c <__sinit+0xc>
 800c080:	f7ff ffc4 	bl	800c00c <global_stdio_init.part.0>
 800c084:	e7f2      	b.n	800c06c <__sinit+0xc>
 800c086:	bf00      	nop
 800c088:	0800bfcd 	.word	0x0800bfcd
 800c08c:	20000c8c 	.word	0x20000c8c

0800c090 <_fwalk_sglue>:
 800c090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c094:	4607      	mov	r7, r0
 800c096:	4688      	mov	r8, r1
 800c098:	4614      	mov	r4, r2
 800c09a:	2600      	movs	r6, #0
 800c09c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0a0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0a4:	d505      	bpl.n	800c0b2 <_fwalk_sglue+0x22>
 800c0a6:	6824      	ldr	r4, [r4, #0]
 800c0a8:	2c00      	cmp	r4, #0
 800c0aa:	d1f7      	bne.n	800c09c <_fwalk_sglue+0xc>
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	89ab      	ldrh	r3, [r5, #12]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d907      	bls.n	800c0c8 <_fwalk_sglue+0x38>
 800c0b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	d003      	beq.n	800c0c8 <_fwalk_sglue+0x38>
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	47c0      	blx	r8
 800c0c6:	4306      	orrs	r6, r0
 800c0c8:	3568      	adds	r5, #104	@ 0x68
 800c0ca:	e7e9      	b.n	800c0a0 <_fwalk_sglue+0x10>

0800c0cc <sniprintf>:
 800c0cc:	b40c      	push	{r2, r3}
 800c0ce:	b530      	push	{r4, r5, lr}
 800c0d0:	4b17      	ldr	r3, [pc, #92]	@ (800c130 <sniprintf+0x64>)
 800c0d2:	1e0c      	subs	r4, r1, #0
 800c0d4:	681d      	ldr	r5, [r3, #0]
 800c0d6:	b09d      	sub	sp, #116	@ 0x74
 800c0d8:	da08      	bge.n	800c0ec <sniprintf+0x20>
 800c0da:	238b      	movs	r3, #139	@ 0x8b
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e2:	b01d      	add	sp, #116	@ 0x74
 800c0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0e8:	b002      	add	sp, #8
 800c0ea:	4770      	bx	lr
 800c0ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c0f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0f4:	bf14      	ite	ne
 800c0f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c0fa:	4623      	moveq	r3, r4
 800c0fc:	9304      	str	r3, [sp, #16]
 800c0fe:	9307      	str	r3, [sp, #28]
 800c100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c104:	9002      	str	r0, [sp, #8]
 800c106:	9006      	str	r0, [sp, #24]
 800c108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c10c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c10e:	ab21      	add	r3, sp, #132	@ 0x84
 800c110:	a902      	add	r1, sp, #8
 800c112:	4628      	mov	r0, r5
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	f002 f8d5 	bl	800e2c4 <_svfiprintf_r>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	bfbc      	itt	lt
 800c11e:	238b      	movlt	r3, #139	@ 0x8b
 800c120:	602b      	strlt	r3, [r5, #0]
 800c122:	2c00      	cmp	r4, #0
 800c124:	d0dd      	beq.n	800c0e2 <sniprintf+0x16>
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	2200      	movs	r2, #0
 800c12a:	701a      	strb	r2, [r3, #0]
 800c12c:	e7d9      	b.n	800c0e2 <sniprintf+0x16>
 800c12e:	bf00      	nop
 800c130:	20000250 	.word	0x20000250

0800c134 <__sread>:
 800c134:	b510      	push	{r4, lr}
 800c136:	460c      	mov	r4, r1
 800c138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c13c:	f000 f8a0 	bl	800c280 <_read_r>
 800c140:	2800      	cmp	r0, #0
 800c142:	bfab      	itete	ge
 800c144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c146:	89a3      	ldrhlt	r3, [r4, #12]
 800c148:	181b      	addge	r3, r3, r0
 800c14a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c14e:	bfac      	ite	ge
 800c150:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c152:	81a3      	strhlt	r3, [r4, #12]
 800c154:	bd10      	pop	{r4, pc}

0800c156 <__swrite>:
 800c156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15a:	461f      	mov	r7, r3
 800c15c:	898b      	ldrh	r3, [r1, #12]
 800c15e:	05db      	lsls	r3, r3, #23
 800c160:	4605      	mov	r5, r0
 800c162:	460c      	mov	r4, r1
 800c164:	4616      	mov	r6, r2
 800c166:	d505      	bpl.n	800c174 <__swrite+0x1e>
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	2302      	movs	r3, #2
 800c16e:	2200      	movs	r2, #0
 800c170:	f000 f874 	bl	800c25c <_lseek_r>
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c17a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	4632      	mov	r2, r6
 800c182:	463b      	mov	r3, r7
 800c184:	4628      	mov	r0, r5
 800c186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c18a:	f000 b88b 	b.w	800c2a4 <_write_r>

0800c18e <__sseek>:
 800c18e:	b510      	push	{r4, lr}
 800c190:	460c      	mov	r4, r1
 800c192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c196:	f000 f861 	bl	800c25c <_lseek_r>
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	bf15      	itete	ne
 800c1a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1aa:	81a3      	strheq	r3, [r4, #12]
 800c1ac:	bf18      	it	ne
 800c1ae:	81a3      	strhne	r3, [r4, #12]
 800c1b0:	bd10      	pop	{r4, pc}

0800c1b2 <__sclose>:
 800c1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b6:	f000 b841 	b.w	800c23c <_close_r>

0800c1ba <memset>:
 800c1ba:	4402      	add	r2, r0
 800c1bc:	4603      	mov	r3, r0
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <memset+0xa>
 800c1c2:	4770      	bx	lr
 800c1c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c8:	e7f9      	b.n	800c1be <memset+0x4>

0800c1ca <strcat>:
 800c1ca:	b510      	push	{r4, lr}
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	7814      	ldrb	r4, [r2, #0]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	3201      	adds	r2, #1
 800c1d4:	2c00      	cmp	r4, #0
 800c1d6:	d1fa      	bne.n	800c1ce <strcat+0x4>
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1e2:	2a00      	cmp	r2, #0
 800c1e4:	d1f9      	bne.n	800c1da <strcat+0x10>
 800c1e6:	bd10      	pop	{r4, pc}

0800c1e8 <strncmp>:
 800c1e8:	b510      	push	{r4, lr}
 800c1ea:	b16a      	cbz	r2, 800c208 <strncmp+0x20>
 800c1ec:	3901      	subs	r1, #1
 800c1ee:	1884      	adds	r4, r0, r2
 800c1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d103      	bne.n	800c204 <strncmp+0x1c>
 800c1fc:	42a0      	cmp	r0, r4
 800c1fe:	d001      	beq.n	800c204 <strncmp+0x1c>
 800c200:	2a00      	cmp	r2, #0
 800c202:	d1f5      	bne.n	800c1f0 <strncmp+0x8>
 800c204:	1ad0      	subs	r0, r2, r3
 800c206:	bd10      	pop	{r4, pc}
 800c208:	4610      	mov	r0, r2
 800c20a:	e7fc      	b.n	800c206 <strncmp+0x1e>

0800c20c <strncpy>:
 800c20c:	b510      	push	{r4, lr}
 800c20e:	3901      	subs	r1, #1
 800c210:	4603      	mov	r3, r0
 800c212:	b132      	cbz	r2, 800c222 <strncpy+0x16>
 800c214:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c218:	f803 4b01 	strb.w	r4, [r3], #1
 800c21c:	3a01      	subs	r2, #1
 800c21e:	2c00      	cmp	r4, #0
 800c220:	d1f7      	bne.n	800c212 <strncpy+0x6>
 800c222:	441a      	add	r2, r3
 800c224:	2100      	movs	r1, #0
 800c226:	4293      	cmp	r3, r2
 800c228:	d100      	bne.n	800c22c <strncpy+0x20>
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	f803 1b01 	strb.w	r1, [r3], #1
 800c230:	e7f9      	b.n	800c226 <strncpy+0x1a>
	...

0800c234 <_localeconv_r>:
 800c234:	4800      	ldr	r0, [pc, #0]	@ (800c238 <_localeconv_r+0x4>)
 800c236:	4770      	bx	lr
 800c238:	200001d4 	.word	0x200001d4

0800c23c <_close_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d06      	ldr	r5, [pc, #24]	@ (800c258 <_close_r+0x1c>)
 800c240:	2300      	movs	r3, #0
 800c242:	4604      	mov	r4, r0
 800c244:	4608      	mov	r0, r1
 800c246:	602b      	str	r3, [r5, #0]
 800c248:	f7f9 fb42 	bl	80058d0 <_close>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d102      	bne.n	800c256 <_close_r+0x1a>
 800c250:	682b      	ldr	r3, [r5, #0]
 800c252:	b103      	cbz	r3, 800c256 <_close_r+0x1a>
 800c254:	6023      	str	r3, [r4, #0]
 800c256:	bd38      	pop	{r3, r4, r5, pc}
 800c258:	20000c90 	.word	0x20000c90

0800c25c <_lseek_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d07      	ldr	r5, [pc, #28]	@ (800c27c <_lseek_r+0x20>)
 800c260:	4604      	mov	r4, r0
 800c262:	4608      	mov	r0, r1
 800c264:	4611      	mov	r1, r2
 800c266:	2200      	movs	r2, #0
 800c268:	602a      	str	r2, [r5, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f7f9 fb57 	bl	800591e <_lseek>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_lseek_r+0x1e>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_lseek_r+0x1e>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	20000c90 	.word	0x20000c90

0800c280 <_read_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	@ (800c2a0 <_read_r+0x20>)
 800c284:	4604      	mov	r4, r0
 800c286:	4608      	mov	r0, r1
 800c288:	4611      	mov	r1, r2
 800c28a:	2200      	movs	r2, #0
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	461a      	mov	r2, r3
 800c290:	f7f9 fae5 	bl	800585e <_read>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_read_r+0x1e>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_read_r+0x1e>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	20000c90 	.word	0x20000c90

0800c2a4 <_write_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	@ (800c2c4 <_write_r+0x20>)
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	602a      	str	r2, [r5, #0]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f7f9 faf0 	bl	8005898 <_write>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_write_r+0x1e>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_write_r+0x1e>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	20000c90 	.word	0x20000c90

0800c2c8 <__errno>:
 800c2c8:	4b01      	ldr	r3, [pc, #4]	@ (800c2d0 <__errno+0x8>)
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20000250 	.word	0x20000250

0800c2d4 <__libc_init_array>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	4d0d      	ldr	r5, [pc, #52]	@ (800c30c <__libc_init_array+0x38>)
 800c2d8:	4c0d      	ldr	r4, [pc, #52]	@ (800c310 <__libc_init_array+0x3c>)
 800c2da:	1b64      	subs	r4, r4, r5
 800c2dc:	10a4      	asrs	r4, r4, #2
 800c2de:	2600      	movs	r6, #0
 800c2e0:	42a6      	cmp	r6, r4
 800c2e2:	d109      	bne.n	800c2f8 <__libc_init_array+0x24>
 800c2e4:	4d0b      	ldr	r5, [pc, #44]	@ (800c314 <__libc_init_array+0x40>)
 800c2e6:	4c0c      	ldr	r4, [pc, #48]	@ (800c318 <__libc_init_array+0x44>)
 800c2e8:	f003 fc7a 	bl	800fbe0 <_init>
 800c2ec:	1b64      	subs	r4, r4, r5
 800c2ee:	10a4      	asrs	r4, r4, #2
 800c2f0:	2600      	movs	r6, #0
 800c2f2:	42a6      	cmp	r6, r4
 800c2f4:	d105      	bne.n	800c302 <__libc_init_array+0x2e>
 800c2f6:	bd70      	pop	{r4, r5, r6, pc}
 800c2f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2fc:	4798      	blx	r3
 800c2fe:	3601      	adds	r6, #1
 800c300:	e7ee      	b.n	800c2e0 <__libc_init_array+0xc>
 800c302:	f855 3b04 	ldr.w	r3, [r5], #4
 800c306:	4798      	blx	r3
 800c308:	3601      	adds	r6, #1
 800c30a:	e7f2      	b.n	800c2f2 <__libc_init_array+0x1e>
 800c30c:	080103a0 	.word	0x080103a0
 800c310:	080103a0 	.word	0x080103a0
 800c314:	080103a0 	.word	0x080103a0
 800c318:	080103a4 	.word	0x080103a4

0800c31c <__retarget_lock_init_recursive>:
 800c31c:	4770      	bx	lr

0800c31e <__retarget_lock_acquire_recursive>:
 800c31e:	4770      	bx	lr

0800c320 <__retarget_lock_release_recursive>:
 800c320:	4770      	bx	lr

0800c322 <strcpy>:
 800c322:	4603      	mov	r3, r0
 800c324:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c328:	f803 2b01 	strb.w	r2, [r3], #1
 800c32c:	2a00      	cmp	r2, #0
 800c32e:	d1f9      	bne.n	800c324 <strcpy+0x2>
 800c330:	4770      	bx	lr

0800c332 <memcpy>:
 800c332:	440a      	add	r2, r1
 800c334:	4291      	cmp	r1, r2
 800c336:	f100 33ff 	add.w	r3, r0, #4294967295
 800c33a:	d100      	bne.n	800c33e <memcpy+0xc>
 800c33c:	4770      	bx	lr
 800c33e:	b510      	push	{r4, lr}
 800c340:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c344:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c348:	4291      	cmp	r1, r2
 800c34a:	d1f9      	bne.n	800c340 <memcpy+0xe>
 800c34c:	bd10      	pop	{r4, pc}
	...

0800c350 <nan>:
 800c350:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c358 <nan+0x8>
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	00000000 	.word	0x00000000
 800c35c:	7ff80000 	.word	0x7ff80000

0800c360 <quorem>:
 800c360:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	6903      	ldr	r3, [r0, #16]
 800c366:	690c      	ldr	r4, [r1, #16]
 800c368:	42a3      	cmp	r3, r4
 800c36a:	4607      	mov	r7, r0
 800c36c:	db7e      	blt.n	800c46c <quorem+0x10c>
 800c36e:	3c01      	subs	r4, #1
 800c370:	f101 0814 	add.w	r8, r1, #20
 800c374:	00a3      	lsls	r3, r4, #2
 800c376:	f100 0514 	add.w	r5, r0, #20
 800c37a:	9300      	str	r3, [sp, #0]
 800c37c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c380:	9301      	str	r3, [sp, #4]
 800c382:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c386:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c38a:	3301      	adds	r3, #1
 800c38c:	429a      	cmp	r2, r3
 800c38e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c392:	fbb2 f6f3 	udiv	r6, r2, r3
 800c396:	d32e      	bcc.n	800c3f6 <quorem+0x96>
 800c398:	f04f 0a00 	mov.w	sl, #0
 800c39c:	46c4      	mov	ip, r8
 800c39e:	46ae      	mov	lr, r5
 800c3a0:	46d3      	mov	fp, sl
 800c3a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3a6:	b298      	uxth	r0, r3
 800c3a8:	fb06 a000 	mla	r0, r6, r0, sl
 800c3ac:	0c02      	lsrs	r2, r0, #16
 800c3ae:	0c1b      	lsrs	r3, r3, #16
 800c3b0:	fb06 2303 	mla	r3, r6, r3, r2
 800c3b4:	f8de 2000 	ldr.w	r2, [lr]
 800c3b8:	b280      	uxth	r0, r0
 800c3ba:	b292      	uxth	r2, r2
 800c3bc:	1a12      	subs	r2, r2, r0
 800c3be:	445a      	add	r2, fp
 800c3c0:	f8de 0000 	ldr.w	r0, [lr]
 800c3c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c3ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c3d2:	b292      	uxth	r2, r2
 800c3d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c3d8:	45e1      	cmp	r9, ip
 800c3da:	f84e 2b04 	str.w	r2, [lr], #4
 800c3de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c3e2:	d2de      	bcs.n	800c3a2 <quorem+0x42>
 800c3e4:	9b00      	ldr	r3, [sp, #0]
 800c3e6:	58eb      	ldr	r3, [r5, r3]
 800c3e8:	b92b      	cbnz	r3, 800c3f6 <quorem+0x96>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	429d      	cmp	r5, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	d32f      	bcc.n	800c454 <quorem+0xf4>
 800c3f4:	613c      	str	r4, [r7, #16]
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f001 fd0e 	bl	800de18 <__mcmp>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	db25      	blt.n	800c44c <quorem+0xec>
 800c400:	4629      	mov	r1, r5
 800c402:	2000      	movs	r0, #0
 800c404:	f858 2b04 	ldr.w	r2, [r8], #4
 800c408:	f8d1 c000 	ldr.w	ip, [r1]
 800c40c:	fa1f fe82 	uxth.w	lr, r2
 800c410:	fa1f f38c 	uxth.w	r3, ip
 800c414:	eba3 030e 	sub.w	r3, r3, lr
 800c418:	4403      	add	r3, r0
 800c41a:	0c12      	lsrs	r2, r2, #16
 800c41c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c420:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c424:	b29b      	uxth	r3, r3
 800c426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c42a:	45c1      	cmp	r9, r8
 800c42c:	f841 3b04 	str.w	r3, [r1], #4
 800c430:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c434:	d2e6      	bcs.n	800c404 <quorem+0xa4>
 800c436:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c43a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c43e:	b922      	cbnz	r2, 800c44a <quorem+0xea>
 800c440:	3b04      	subs	r3, #4
 800c442:	429d      	cmp	r5, r3
 800c444:	461a      	mov	r2, r3
 800c446:	d30b      	bcc.n	800c460 <quorem+0x100>
 800c448:	613c      	str	r4, [r7, #16]
 800c44a:	3601      	adds	r6, #1
 800c44c:	4630      	mov	r0, r6
 800c44e:	b003      	add	sp, #12
 800c450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c454:	6812      	ldr	r2, [r2, #0]
 800c456:	3b04      	subs	r3, #4
 800c458:	2a00      	cmp	r2, #0
 800c45a:	d1cb      	bne.n	800c3f4 <quorem+0x94>
 800c45c:	3c01      	subs	r4, #1
 800c45e:	e7c6      	b.n	800c3ee <quorem+0x8e>
 800c460:	6812      	ldr	r2, [r2, #0]
 800c462:	3b04      	subs	r3, #4
 800c464:	2a00      	cmp	r2, #0
 800c466:	d1ef      	bne.n	800c448 <quorem+0xe8>
 800c468:	3c01      	subs	r4, #1
 800c46a:	e7ea      	b.n	800c442 <quorem+0xe2>
 800c46c:	2000      	movs	r0, #0
 800c46e:	e7ee      	b.n	800c44e <quorem+0xee>

0800c470 <_dtoa_r>:
 800c470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c474:	69c7      	ldr	r7, [r0, #28]
 800c476:	b099      	sub	sp, #100	@ 0x64
 800c478:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c47c:	ec55 4b10 	vmov	r4, r5, d0
 800c480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c482:	9109      	str	r1, [sp, #36]	@ 0x24
 800c484:	4683      	mov	fp, r0
 800c486:	920e      	str	r2, [sp, #56]	@ 0x38
 800c488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c48a:	b97f      	cbnz	r7, 800c4ac <_dtoa_r+0x3c>
 800c48c:	2010      	movs	r0, #16
 800c48e:	f001 f937 	bl	800d700 <malloc>
 800c492:	4602      	mov	r2, r0
 800c494:	f8cb 001c 	str.w	r0, [fp, #28]
 800c498:	b920      	cbnz	r0, 800c4a4 <_dtoa_r+0x34>
 800c49a:	4ba7      	ldr	r3, [pc, #668]	@ (800c738 <_dtoa_r+0x2c8>)
 800c49c:	21ef      	movs	r1, #239	@ 0xef
 800c49e:	48a7      	ldr	r0, [pc, #668]	@ (800c73c <_dtoa_r+0x2cc>)
 800c4a0:	f002 f8e2 	bl	800e668 <__assert_func>
 800c4a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c4a8:	6007      	str	r7, [r0, #0]
 800c4aa:	60c7      	str	r7, [r0, #12]
 800c4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4b0:	6819      	ldr	r1, [r3, #0]
 800c4b2:	b159      	cbz	r1, 800c4cc <_dtoa_r+0x5c>
 800c4b4:	685a      	ldr	r2, [r3, #4]
 800c4b6:	604a      	str	r2, [r1, #4]
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	4093      	lsls	r3, r2
 800c4bc:	608b      	str	r3, [r1, #8]
 800c4be:	4658      	mov	r0, fp
 800c4c0:	f001 fa26 	bl	800d910 <_Bfree>
 800c4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]
 800c4cc:	1e2b      	subs	r3, r5, #0
 800c4ce:	bfb9      	ittee	lt
 800c4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c4d4:	9303      	strlt	r3, [sp, #12]
 800c4d6:	2300      	movge	r3, #0
 800c4d8:	6033      	strge	r3, [r6, #0]
 800c4da:	9f03      	ldr	r7, [sp, #12]
 800c4dc:	4b98      	ldr	r3, [pc, #608]	@ (800c740 <_dtoa_r+0x2d0>)
 800c4de:	bfbc      	itt	lt
 800c4e0:	2201      	movlt	r2, #1
 800c4e2:	6032      	strlt	r2, [r6, #0]
 800c4e4:	43bb      	bics	r3, r7
 800c4e6:	d112      	bne.n	800c50e <_dtoa_r+0x9e>
 800c4e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c4ee:	6013      	str	r3, [r2, #0]
 800c4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4f4:	4323      	orrs	r3, r4
 800c4f6:	f000 854d 	beq.w	800cf94 <_dtoa_r+0xb24>
 800c4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c754 <_dtoa_r+0x2e4>
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 854f 	beq.w	800cfa4 <_dtoa_r+0xb34>
 800c506:	f10a 0303 	add.w	r3, sl, #3
 800c50a:	f000 bd49 	b.w	800cfa0 <_dtoa_r+0xb30>
 800c50e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c512:	2200      	movs	r2, #0
 800c514:	ec51 0b17 	vmov	r0, r1, d7
 800c518:	2300      	movs	r3, #0
 800c51a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c51e:	f7f4 faf3 	bl	8000b08 <__aeabi_dcmpeq>
 800c522:	4680      	mov	r8, r0
 800c524:	b158      	cbz	r0, 800c53e <_dtoa_r+0xce>
 800c526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c528:	2301      	movs	r3, #1
 800c52a:	6013      	str	r3, [r2, #0]
 800c52c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c52e:	b113      	cbz	r3, 800c536 <_dtoa_r+0xc6>
 800c530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c532:	4b84      	ldr	r3, [pc, #528]	@ (800c744 <_dtoa_r+0x2d4>)
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c758 <_dtoa_r+0x2e8>
 800c53a:	f000 bd33 	b.w	800cfa4 <_dtoa_r+0xb34>
 800c53e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c542:	aa16      	add	r2, sp, #88	@ 0x58
 800c544:	a917      	add	r1, sp, #92	@ 0x5c
 800c546:	4658      	mov	r0, fp
 800c548:	f001 fd86 	bl	800e058 <__d2b>
 800c54c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c550:	4681      	mov	r9, r0
 800c552:	2e00      	cmp	r6, #0
 800c554:	d077      	beq.n	800c646 <_dtoa_r+0x1d6>
 800c556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c56c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c570:	4619      	mov	r1, r3
 800c572:	2200      	movs	r2, #0
 800c574:	4b74      	ldr	r3, [pc, #464]	@ (800c748 <_dtoa_r+0x2d8>)
 800c576:	f7f3 fea7 	bl	80002c8 <__aeabi_dsub>
 800c57a:	a369      	add	r3, pc, #420	@ (adr r3, 800c720 <_dtoa_r+0x2b0>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	f7f4 f85a 	bl	8000638 <__aeabi_dmul>
 800c584:	a368      	add	r3, pc, #416	@ (adr r3, 800c728 <_dtoa_r+0x2b8>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	f7f3 fe9f 	bl	80002cc <__adddf3>
 800c58e:	4604      	mov	r4, r0
 800c590:	4630      	mov	r0, r6
 800c592:	460d      	mov	r5, r1
 800c594:	f7f3 ffe6 	bl	8000564 <__aeabi_i2d>
 800c598:	a365      	add	r3, pc, #404	@ (adr r3, 800c730 <_dtoa_r+0x2c0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f4 f84b 	bl	8000638 <__aeabi_dmul>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	f7f3 fe8f 	bl	80002cc <__adddf3>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	460d      	mov	r5, r1
 800c5b2:	f7f4 faf1 	bl	8000b98 <__aeabi_d2iz>
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f4 faac 	bl	8000b1c <__aeabi_dcmplt>
 800c5c4:	b140      	cbz	r0, 800c5d8 <_dtoa_r+0x168>
 800c5c6:	4638      	mov	r0, r7
 800c5c8:	f7f3 ffcc 	bl	8000564 <__aeabi_i2d>
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	462b      	mov	r3, r5
 800c5d0:	f7f4 fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 800c5d4:	b900      	cbnz	r0, 800c5d8 <_dtoa_r+0x168>
 800c5d6:	3f01      	subs	r7, #1
 800c5d8:	2f16      	cmp	r7, #22
 800c5da:	d851      	bhi.n	800c680 <_dtoa_r+0x210>
 800c5dc:	4b5b      	ldr	r3, [pc, #364]	@ (800c74c <_dtoa_r+0x2dc>)
 800c5de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5ea:	f7f4 fa97 	bl	8000b1c <__aeabi_dcmplt>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d048      	beq.n	800c684 <_dtoa_r+0x214>
 800c5f2:	3f01      	subs	r7, #1
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5fa:	1b9b      	subs	r3, r3, r6
 800c5fc:	1e5a      	subs	r2, r3, #1
 800c5fe:	bf44      	itt	mi
 800c600:	f1c3 0801 	rsbmi	r8, r3, #1
 800c604:	2300      	movmi	r3, #0
 800c606:	9208      	str	r2, [sp, #32]
 800c608:	bf54      	ite	pl
 800c60a:	f04f 0800 	movpl.w	r8, #0
 800c60e:	9308      	strmi	r3, [sp, #32]
 800c610:	2f00      	cmp	r7, #0
 800c612:	db39      	blt.n	800c688 <_dtoa_r+0x218>
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c618:	443b      	add	r3, r7
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	2300      	movs	r3, #0
 800c61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c622:	2b09      	cmp	r3, #9
 800c624:	d864      	bhi.n	800c6f0 <_dtoa_r+0x280>
 800c626:	2b05      	cmp	r3, #5
 800c628:	bfc4      	itt	gt
 800c62a:	3b04      	subgt	r3, #4
 800c62c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c630:	f1a3 0302 	sub.w	r3, r3, #2
 800c634:	bfcc      	ite	gt
 800c636:	2400      	movgt	r4, #0
 800c638:	2401      	movle	r4, #1
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d863      	bhi.n	800c706 <_dtoa_r+0x296>
 800c63e:	e8df f003 	tbb	[pc, r3]
 800c642:	372a      	.short	0x372a
 800c644:	5535      	.short	0x5535
 800c646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c64a:	441e      	add	r6, r3
 800c64c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c650:	2b20      	cmp	r3, #32
 800c652:	bfc1      	itttt	gt
 800c654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c658:	409f      	lslgt	r7, r3
 800c65a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c65e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c662:	bfd6      	itet	le
 800c664:	f1c3 0320 	rsble	r3, r3, #32
 800c668:	ea47 0003 	orrgt.w	r0, r7, r3
 800c66c:	fa04 f003 	lslle.w	r0, r4, r3
 800c670:	f7f3 ff68 	bl	8000544 <__aeabi_ui2d>
 800c674:	2201      	movs	r2, #1
 800c676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c67a:	3e01      	subs	r6, #1
 800c67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c67e:	e777      	b.n	800c570 <_dtoa_r+0x100>
 800c680:	2301      	movs	r3, #1
 800c682:	e7b8      	b.n	800c5f6 <_dtoa_r+0x186>
 800c684:	9012      	str	r0, [sp, #72]	@ 0x48
 800c686:	e7b7      	b.n	800c5f8 <_dtoa_r+0x188>
 800c688:	427b      	negs	r3, r7
 800c68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c68c:	2300      	movs	r3, #0
 800c68e:	eba8 0807 	sub.w	r8, r8, r7
 800c692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c694:	e7c4      	b.n	800c620 <_dtoa_r+0x1b0>
 800c696:	2300      	movs	r3, #0
 800c698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dc35      	bgt.n	800c70c <_dtoa_r+0x29c>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	9307      	str	r3, [sp, #28]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6aa:	e00b      	b.n	800c6c4 <_dtoa_r+0x254>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e7f3      	b.n	800c698 <_dtoa_r+0x228>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6b6:	18fb      	adds	r3, r7, r3
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	9307      	str	r3, [sp, #28]
 800c6c0:	bfb8      	it	lt
 800c6c2:	2301      	movlt	r3, #1
 800c6c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	2204      	movs	r2, #4
 800c6cc:	f102 0514 	add.w	r5, r2, #20
 800c6d0:	429d      	cmp	r5, r3
 800c6d2:	d91f      	bls.n	800c714 <_dtoa_r+0x2a4>
 800c6d4:	6041      	str	r1, [r0, #4]
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	f001 f8da 	bl	800d890 <_Balloc>
 800c6dc:	4682      	mov	sl, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d13c      	bne.n	800c75c <_dtoa_r+0x2ec>
 800c6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c750 <_dtoa_r+0x2e0>)
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c6ea:	e6d8      	b.n	800c49e <_dtoa_r+0x2e>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e7e0      	b.n	800c6b2 <_dtoa_r+0x242>
 800c6f0:	2401      	movs	r4, #1
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	9307      	str	r3, [sp, #28]
 800c700:	2200      	movs	r2, #0
 800c702:	2312      	movs	r3, #18
 800c704:	e7d0      	b.n	800c6a8 <_dtoa_r+0x238>
 800c706:	2301      	movs	r3, #1
 800c708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c70a:	e7f5      	b.n	800c6f8 <_dtoa_r+0x288>
 800c70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	9307      	str	r3, [sp, #28]
 800c712:	e7d7      	b.n	800c6c4 <_dtoa_r+0x254>
 800c714:	3101      	adds	r1, #1
 800c716:	0052      	lsls	r2, r2, #1
 800c718:	e7d8      	b.n	800c6cc <_dtoa_r+0x25c>
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w
 800c720:	636f4361 	.word	0x636f4361
 800c724:	3fd287a7 	.word	0x3fd287a7
 800c728:	8b60c8b3 	.word	0x8b60c8b3
 800c72c:	3fc68a28 	.word	0x3fc68a28
 800c730:	509f79fb 	.word	0x509f79fb
 800c734:	3fd34413 	.word	0x3fd34413
 800c738:	0801008a 	.word	0x0801008a
 800c73c:	080100a1 	.word	0x080100a1
 800c740:	7ff00000 	.word	0x7ff00000
 800c744:	08010052 	.word	0x08010052
 800c748:	3ff80000 	.word	0x3ff80000
 800c74c:	080101f8 	.word	0x080101f8
 800c750:	080100f9 	.word	0x080100f9
 800c754:	08010086 	.word	0x08010086
 800c758:	08010051 	.word	0x08010051
 800c75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c760:	6018      	str	r0, [r3, #0]
 800c762:	9b07      	ldr	r3, [sp, #28]
 800c764:	2b0e      	cmp	r3, #14
 800c766:	f200 80a4 	bhi.w	800c8b2 <_dtoa_r+0x442>
 800c76a:	2c00      	cmp	r4, #0
 800c76c:	f000 80a1 	beq.w	800c8b2 <_dtoa_r+0x442>
 800c770:	2f00      	cmp	r7, #0
 800c772:	dd33      	ble.n	800c7dc <_dtoa_r+0x36c>
 800c774:	4bad      	ldr	r3, [pc, #692]	@ (800ca2c <_dtoa_r+0x5bc>)
 800c776:	f007 020f 	and.w	r2, r7, #15
 800c77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c77e:	ed93 7b00 	vldr	d7, [r3]
 800c782:	05f8      	lsls	r0, r7, #23
 800c784:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c78c:	d516      	bpl.n	800c7bc <_dtoa_r+0x34c>
 800c78e:	4ba8      	ldr	r3, [pc, #672]	@ (800ca30 <_dtoa_r+0x5c0>)
 800c790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c798:	f7f4 f878 	bl	800088c <__aeabi_ddiv>
 800c79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7a0:	f004 040f 	and.w	r4, r4, #15
 800c7a4:	2603      	movs	r6, #3
 800c7a6:	4da2      	ldr	r5, [pc, #648]	@ (800ca30 <_dtoa_r+0x5c0>)
 800c7a8:	b954      	cbnz	r4, 800c7c0 <_dtoa_r+0x350>
 800c7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7b2:	f7f4 f86b 	bl	800088c <__aeabi_ddiv>
 800c7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ba:	e028      	b.n	800c80e <_dtoa_r+0x39e>
 800c7bc:	2602      	movs	r6, #2
 800c7be:	e7f2      	b.n	800c7a6 <_dtoa_r+0x336>
 800c7c0:	07e1      	lsls	r1, r4, #31
 800c7c2:	d508      	bpl.n	800c7d6 <_dtoa_r+0x366>
 800c7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7cc:	f7f3 ff34 	bl	8000638 <__aeabi_dmul>
 800c7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7d4:	3601      	adds	r6, #1
 800c7d6:	1064      	asrs	r4, r4, #1
 800c7d8:	3508      	adds	r5, #8
 800c7da:	e7e5      	b.n	800c7a8 <_dtoa_r+0x338>
 800c7dc:	f000 80d2 	beq.w	800c984 <_dtoa_r+0x514>
 800c7e0:	427c      	negs	r4, r7
 800c7e2:	4b92      	ldr	r3, [pc, #584]	@ (800ca2c <_dtoa_r+0x5bc>)
 800c7e4:	4d92      	ldr	r5, [pc, #584]	@ (800ca30 <_dtoa_r+0x5c0>)
 800c7e6:	f004 020f 	and.w	r2, r4, #15
 800c7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7f6:	f7f3 ff1f 	bl	8000638 <__aeabi_dmul>
 800c7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7fe:	1124      	asrs	r4, r4, #4
 800c800:	2300      	movs	r3, #0
 800c802:	2602      	movs	r6, #2
 800c804:	2c00      	cmp	r4, #0
 800c806:	f040 80b2 	bne.w	800c96e <_dtoa_r+0x4fe>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1d3      	bne.n	800c7b6 <_dtoa_r+0x346>
 800c80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80b7 	beq.w	800c988 <_dtoa_r+0x518>
 800c81a:	4b86      	ldr	r3, [pc, #536]	@ (800ca34 <_dtoa_r+0x5c4>)
 800c81c:	2200      	movs	r2, #0
 800c81e:	4620      	mov	r0, r4
 800c820:	4629      	mov	r1, r5
 800c822:	f7f4 f97b 	bl	8000b1c <__aeabi_dcmplt>
 800c826:	2800      	cmp	r0, #0
 800c828:	f000 80ae 	beq.w	800c988 <_dtoa_r+0x518>
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80aa 	beq.w	800c988 <_dtoa_r+0x518>
 800c834:	9b00      	ldr	r3, [sp, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	dd37      	ble.n	800c8aa <_dtoa_r+0x43a>
 800c83a:	1e7b      	subs	r3, r7, #1
 800c83c:	9304      	str	r3, [sp, #16]
 800c83e:	4620      	mov	r0, r4
 800c840:	4b7d      	ldr	r3, [pc, #500]	@ (800ca38 <_dtoa_r+0x5c8>)
 800c842:	2200      	movs	r2, #0
 800c844:	4629      	mov	r1, r5
 800c846:	f7f3 fef7 	bl	8000638 <__aeabi_dmul>
 800c84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c84e:	9c00      	ldr	r4, [sp, #0]
 800c850:	3601      	adds	r6, #1
 800c852:	4630      	mov	r0, r6
 800c854:	f7f3 fe86 	bl	8000564 <__aeabi_i2d>
 800c858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c85c:	f7f3 feec 	bl	8000638 <__aeabi_dmul>
 800c860:	4b76      	ldr	r3, [pc, #472]	@ (800ca3c <_dtoa_r+0x5cc>)
 800c862:	2200      	movs	r2, #0
 800c864:	f7f3 fd32 	bl	80002cc <__adddf3>
 800c868:	4605      	mov	r5, r0
 800c86a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c86e:	2c00      	cmp	r4, #0
 800c870:	f040 808d 	bne.w	800c98e <_dtoa_r+0x51e>
 800c874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c878:	4b71      	ldr	r3, [pc, #452]	@ (800ca40 <_dtoa_r+0x5d0>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	f7f3 fd24 	bl	80002c8 <__aeabi_dsub>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c888:	462a      	mov	r2, r5
 800c88a:	4633      	mov	r3, r6
 800c88c:	f7f4 f964 	bl	8000b58 <__aeabi_dcmpgt>
 800c890:	2800      	cmp	r0, #0
 800c892:	f040 828b 	bne.w	800cdac <_dtoa_r+0x93c>
 800c896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c89a:	462a      	mov	r2, r5
 800c89c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c8a0:	f7f4 f93c 	bl	8000b1c <__aeabi_dcmplt>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f040 8128 	bne.w	800cafa <_dtoa_r+0x68a>
 800c8aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c8ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f2c0 815a 	blt.w	800cb6e <_dtoa_r+0x6fe>
 800c8ba:	2f0e      	cmp	r7, #14
 800c8bc:	f300 8157 	bgt.w	800cb6e <_dtoa_r+0x6fe>
 800c8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800ca2c <_dtoa_r+0x5bc>)
 800c8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c8c6:	ed93 7b00 	vldr	d7, [r3]
 800c8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	ed8d 7b00 	vstr	d7, [sp]
 800c8d2:	da03      	bge.n	800c8dc <_dtoa_r+0x46c>
 800c8d4:	9b07      	ldr	r3, [sp, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f340 8101 	ble.w	800cade <_dtoa_r+0x66e>
 800c8dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c8e0:	4656      	mov	r6, sl
 800c8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	f7f3 ffcf 	bl	800088c <__aeabi_ddiv>
 800c8ee:	f7f4 f953 	bl	8000b98 <__aeabi_d2iz>
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	f7f3 fe36 	bl	8000564 <__aeabi_i2d>
 800c8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8fc:	f7f3 fe9c 	bl	8000638 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4620      	mov	r0, r4
 800c906:	4629      	mov	r1, r5
 800c908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c90c:	f7f3 fcdc 	bl	80002c8 <__aeabi_dsub>
 800c910:	f806 4b01 	strb.w	r4, [r6], #1
 800c914:	9d07      	ldr	r5, [sp, #28]
 800c916:	eba6 040a 	sub.w	r4, r6, sl
 800c91a:	42a5      	cmp	r5, r4
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	f040 8117 	bne.w	800cb52 <_dtoa_r+0x6e2>
 800c924:	f7f3 fcd2 	bl	80002cc <__adddf3>
 800c928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c92c:	4604      	mov	r4, r0
 800c92e:	460d      	mov	r5, r1
 800c930:	f7f4 f912 	bl	8000b58 <__aeabi_dcmpgt>
 800c934:	2800      	cmp	r0, #0
 800c936:	f040 80f9 	bne.w	800cb2c <_dtoa_r+0x6bc>
 800c93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c93e:	4620      	mov	r0, r4
 800c940:	4629      	mov	r1, r5
 800c942:	f7f4 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 800c946:	b118      	cbz	r0, 800c950 <_dtoa_r+0x4e0>
 800c948:	f018 0f01 	tst.w	r8, #1
 800c94c:	f040 80ee 	bne.w	800cb2c <_dtoa_r+0x6bc>
 800c950:	4649      	mov	r1, r9
 800c952:	4658      	mov	r0, fp
 800c954:	f000 ffdc 	bl	800d910 <_Bfree>
 800c958:	2300      	movs	r3, #0
 800c95a:	7033      	strb	r3, [r6, #0]
 800c95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c95e:	3701      	adds	r7, #1
 800c960:	601f      	str	r7, [r3, #0]
 800c962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 831d 	beq.w	800cfa4 <_dtoa_r+0xb34>
 800c96a:	601e      	str	r6, [r3, #0]
 800c96c:	e31a      	b.n	800cfa4 <_dtoa_r+0xb34>
 800c96e:	07e2      	lsls	r2, r4, #31
 800c970:	d505      	bpl.n	800c97e <_dtoa_r+0x50e>
 800c972:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c976:	f7f3 fe5f 	bl	8000638 <__aeabi_dmul>
 800c97a:	3601      	adds	r6, #1
 800c97c:	2301      	movs	r3, #1
 800c97e:	1064      	asrs	r4, r4, #1
 800c980:	3508      	adds	r5, #8
 800c982:	e73f      	b.n	800c804 <_dtoa_r+0x394>
 800c984:	2602      	movs	r6, #2
 800c986:	e742      	b.n	800c80e <_dtoa_r+0x39e>
 800c988:	9c07      	ldr	r4, [sp, #28]
 800c98a:	9704      	str	r7, [sp, #16]
 800c98c:	e761      	b.n	800c852 <_dtoa_r+0x3e2>
 800c98e:	4b27      	ldr	r3, [pc, #156]	@ (800ca2c <_dtoa_r+0x5bc>)
 800c990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c99a:	4454      	add	r4, sl
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d053      	beq.n	800ca48 <_dtoa_r+0x5d8>
 800c9a0:	4928      	ldr	r1, [pc, #160]	@ (800ca44 <_dtoa_r+0x5d4>)
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	f7f3 ff72 	bl	800088c <__aeabi_ddiv>
 800c9a8:	4633      	mov	r3, r6
 800c9aa:	462a      	mov	r2, r5
 800c9ac:	f7f3 fc8c 	bl	80002c8 <__aeabi_dsub>
 800c9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9b4:	4656      	mov	r6, sl
 800c9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9ba:	f7f4 f8ed 	bl	8000b98 <__aeabi_d2iz>
 800c9be:	4605      	mov	r5, r0
 800c9c0:	f7f3 fdd0 	bl	8000564 <__aeabi_i2d>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9cc:	f7f3 fc7c 	bl	80002c8 <__aeabi_dsub>
 800c9d0:	3530      	adds	r5, #48	@ 0x30
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9da:	f806 5b01 	strb.w	r5, [r6], #1
 800c9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9e2:	f7f4 f89b 	bl	8000b1c <__aeabi_dcmplt>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d171      	bne.n	800cace <_dtoa_r+0x65e>
 800c9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9ee:	4911      	ldr	r1, [pc, #68]	@ (800ca34 <_dtoa_r+0x5c4>)
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	f7f3 fc69 	bl	80002c8 <__aeabi_dsub>
 800c9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9fa:	f7f4 f88f 	bl	8000b1c <__aeabi_dcmplt>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f040 8095 	bne.w	800cb2e <_dtoa_r+0x6be>
 800ca04:	42a6      	cmp	r6, r4
 800ca06:	f43f af50 	beq.w	800c8aa <_dtoa_r+0x43a>
 800ca0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ca38 <_dtoa_r+0x5c8>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	f7f3 fe11 	bl	8000638 <__aeabi_dmul>
 800ca16:	4b08      	ldr	r3, [pc, #32]	@ (800ca38 <_dtoa_r+0x5c8>)
 800ca18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca22:	f7f3 fe09 	bl	8000638 <__aeabi_dmul>
 800ca26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca2a:	e7c4      	b.n	800c9b6 <_dtoa_r+0x546>
 800ca2c:	080101f8 	.word	0x080101f8
 800ca30:	080101d0 	.word	0x080101d0
 800ca34:	3ff00000 	.word	0x3ff00000
 800ca38:	40240000 	.word	0x40240000
 800ca3c:	401c0000 	.word	0x401c0000
 800ca40:	40140000 	.word	0x40140000
 800ca44:	3fe00000 	.word	0x3fe00000
 800ca48:	4631      	mov	r1, r6
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7f3 fdf4 	bl	8000638 <__aeabi_dmul>
 800ca50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca54:	9415      	str	r4, [sp, #84]	@ 0x54
 800ca56:	4656      	mov	r6, sl
 800ca58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca5c:	f7f4 f89c 	bl	8000b98 <__aeabi_d2iz>
 800ca60:	4605      	mov	r5, r0
 800ca62:	f7f3 fd7f 	bl	8000564 <__aeabi_i2d>
 800ca66:	4602      	mov	r2, r0
 800ca68:	460b      	mov	r3, r1
 800ca6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca6e:	f7f3 fc2b 	bl	80002c8 <__aeabi_dsub>
 800ca72:	3530      	adds	r5, #48	@ 0x30
 800ca74:	f806 5b01 	strb.w	r5, [r6], #1
 800ca78:	4602      	mov	r2, r0
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	42a6      	cmp	r6, r4
 800ca7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca82:	f04f 0200 	mov.w	r2, #0
 800ca86:	d124      	bne.n	800cad2 <_dtoa_r+0x662>
 800ca88:	4bac      	ldr	r3, [pc, #688]	@ (800cd3c <_dtoa_r+0x8cc>)
 800ca8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca8e:	f7f3 fc1d 	bl	80002cc <__adddf3>
 800ca92:	4602      	mov	r2, r0
 800ca94:	460b      	mov	r3, r1
 800ca96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca9a:	f7f4 f85d 	bl	8000b58 <__aeabi_dcmpgt>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d145      	bne.n	800cb2e <_dtoa_r+0x6be>
 800caa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800caa6:	49a5      	ldr	r1, [pc, #660]	@ (800cd3c <_dtoa_r+0x8cc>)
 800caa8:	2000      	movs	r0, #0
 800caaa:	f7f3 fc0d 	bl	80002c8 <__aeabi_dsub>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab6:	f7f4 f831 	bl	8000b1c <__aeabi_dcmplt>
 800caba:	2800      	cmp	r0, #0
 800cabc:	f43f aef5 	beq.w	800c8aa <_dtoa_r+0x43a>
 800cac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cac2:	1e73      	subs	r3, r6, #1
 800cac4:	9315      	str	r3, [sp, #84]	@ 0x54
 800cac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800caca:	2b30      	cmp	r3, #48	@ 0x30
 800cacc:	d0f8      	beq.n	800cac0 <_dtoa_r+0x650>
 800cace:	9f04      	ldr	r7, [sp, #16]
 800cad0:	e73e      	b.n	800c950 <_dtoa_r+0x4e0>
 800cad2:	4b9b      	ldr	r3, [pc, #620]	@ (800cd40 <_dtoa_r+0x8d0>)
 800cad4:	f7f3 fdb0 	bl	8000638 <__aeabi_dmul>
 800cad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cadc:	e7bc      	b.n	800ca58 <_dtoa_r+0x5e8>
 800cade:	d10c      	bne.n	800cafa <_dtoa_r+0x68a>
 800cae0:	4b98      	ldr	r3, [pc, #608]	@ (800cd44 <_dtoa_r+0x8d4>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cae8:	f7f3 fda6 	bl	8000638 <__aeabi_dmul>
 800caec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caf0:	f7f4 f828 	bl	8000b44 <__aeabi_dcmpge>
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f000 8157 	beq.w	800cda8 <_dtoa_r+0x938>
 800cafa:	2400      	movs	r4, #0
 800cafc:	4625      	mov	r5, r4
 800cafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb00:	43db      	mvns	r3, r3
 800cb02:	9304      	str	r3, [sp, #16]
 800cb04:	4656      	mov	r6, sl
 800cb06:	2700      	movs	r7, #0
 800cb08:	4621      	mov	r1, r4
 800cb0a:	4658      	mov	r0, fp
 800cb0c:	f000 ff00 	bl	800d910 <_Bfree>
 800cb10:	2d00      	cmp	r5, #0
 800cb12:	d0dc      	beq.n	800cace <_dtoa_r+0x65e>
 800cb14:	b12f      	cbz	r7, 800cb22 <_dtoa_r+0x6b2>
 800cb16:	42af      	cmp	r7, r5
 800cb18:	d003      	beq.n	800cb22 <_dtoa_r+0x6b2>
 800cb1a:	4639      	mov	r1, r7
 800cb1c:	4658      	mov	r0, fp
 800cb1e:	f000 fef7 	bl	800d910 <_Bfree>
 800cb22:	4629      	mov	r1, r5
 800cb24:	4658      	mov	r0, fp
 800cb26:	f000 fef3 	bl	800d910 <_Bfree>
 800cb2a:	e7d0      	b.n	800cace <_dtoa_r+0x65e>
 800cb2c:	9704      	str	r7, [sp, #16]
 800cb2e:	4633      	mov	r3, r6
 800cb30:	461e      	mov	r6, r3
 800cb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb36:	2a39      	cmp	r2, #57	@ 0x39
 800cb38:	d107      	bne.n	800cb4a <_dtoa_r+0x6da>
 800cb3a:	459a      	cmp	sl, r3
 800cb3c:	d1f8      	bne.n	800cb30 <_dtoa_r+0x6c0>
 800cb3e:	9a04      	ldr	r2, [sp, #16]
 800cb40:	3201      	adds	r2, #1
 800cb42:	9204      	str	r2, [sp, #16]
 800cb44:	2230      	movs	r2, #48	@ 0x30
 800cb46:	f88a 2000 	strb.w	r2, [sl]
 800cb4a:	781a      	ldrb	r2, [r3, #0]
 800cb4c:	3201      	adds	r2, #1
 800cb4e:	701a      	strb	r2, [r3, #0]
 800cb50:	e7bd      	b.n	800cace <_dtoa_r+0x65e>
 800cb52:	4b7b      	ldr	r3, [pc, #492]	@ (800cd40 <_dtoa_r+0x8d0>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	f7f3 fd6f 	bl	8000638 <__aeabi_dmul>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	4604      	mov	r4, r0
 800cb60:	460d      	mov	r5, r1
 800cb62:	f7f3 ffd1 	bl	8000b08 <__aeabi_dcmpeq>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	f43f aebb 	beq.w	800c8e2 <_dtoa_r+0x472>
 800cb6c:	e6f0      	b.n	800c950 <_dtoa_r+0x4e0>
 800cb6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb70:	2a00      	cmp	r2, #0
 800cb72:	f000 80db 	beq.w	800cd2c <_dtoa_r+0x8bc>
 800cb76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb78:	2a01      	cmp	r2, #1
 800cb7a:	f300 80bf 	bgt.w	800ccfc <_dtoa_r+0x88c>
 800cb7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cb80:	2a00      	cmp	r2, #0
 800cb82:	f000 80b7 	beq.w	800ccf4 <_dtoa_r+0x884>
 800cb86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb8c:	4646      	mov	r6, r8
 800cb8e:	9a08      	ldr	r2, [sp, #32]
 800cb90:	2101      	movs	r1, #1
 800cb92:	441a      	add	r2, r3
 800cb94:	4658      	mov	r0, fp
 800cb96:	4498      	add	r8, r3
 800cb98:	9208      	str	r2, [sp, #32]
 800cb9a:	f000 ffb7 	bl	800db0c <__i2b>
 800cb9e:	4605      	mov	r5, r0
 800cba0:	b15e      	cbz	r6, 800cbba <_dtoa_r+0x74a>
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dd08      	ble.n	800cbba <_dtoa_r+0x74a>
 800cba8:	42b3      	cmp	r3, r6
 800cbaa:	9a08      	ldr	r2, [sp, #32]
 800cbac:	bfa8      	it	ge
 800cbae:	4633      	movge	r3, r6
 800cbb0:	eba8 0803 	sub.w	r8, r8, r3
 800cbb4:	1af6      	subs	r6, r6, r3
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	9308      	str	r3, [sp, #32]
 800cbba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbbc:	b1f3      	cbz	r3, 800cbfc <_dtoa_r+0x78c>
 800cbbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 80b7 	beq.w	800cd34 <_dtoa_r+0x8c4>
 800cbc6:	b18c      	cbz	r4, 800cbec <_dtoa_r+0x77c>
 800cbc8:	4629      	mov	r1, r5
 800cbca:	4622      	mov	r2, r4
 800cbcc:	4658      	mov	r0, fp
 800cbce:	f001 f85d 	bl	800dc8c <__pow5mult>
 800cbd2:	464a      	mov	r2, r9
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	4658      	mov	r0, fp
 800cbda:	f000 ffad 	bl	800db38 <__multiply>
 800cbde:	4649      	mov	r1, r9
 800cbe0:	9004      	str	r0, [sp, #16]
 800cbe2:	4658      	mov	r0, fp
 800cbe4:	f000 fe94 	bl	800d910 <_Bfree>
 800cbe8:	9b04      	ldr	r3, [sp, #16]
 800cbea:	4699      	mov	r9, r3
 800cbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbee:	1b1a      	subs	r2, r3, r4
 800cbf0:	d004      	beq.n	800cbfc <_dtoa_r+0x78c>
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	4658      	mov	r0, fp
 800cbf6:	f001 f849 	bl	800dc8c <__pow5mult>
 800cbfa:	4681      	mov	r9, r0
 800cbfc:	2101      	movs	r1, #1
 800cbfe:	4658      	mov	r0, fp
 800cc00:	f000 ff84 	bl	800db0c <__i2b>
 800cc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc06:	4604      	mov	r4, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 81cf 	beq.w	800cfac <_dtoa_r+0xb3c>
 800cc0e:	461a      	mov	r2, r3
 800cc10:	4601      	mov	r1, r0
 800cc12:	4658      	mov	r0, fp
 800cc14:	f001 f83a 	bl	800dc8c <__pow5mult>
 800cc18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	4604      	mov	r4, r0
 800cc1e:	f300 8095 	bgt.w	800cd4c <_dtoa_r+0x8dc>
 800cc22:	9b02      	ldr	r3, [sp, #8]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f040 8087 	bne.w	800cd38 <_dtoa_r+0x8c8>
 800cc2a:	9b03      	ldr	r3, [sp, #12]
 800cc2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f040 8089 	bne.w	800cd48 <_dtoa_r+0x8d8>
 800cc36:	9b03      	ldr	r3, [sp, #12]
 800cc38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc3c:	0d1b      	lsrs	r3, r3, #20
 800cc3e:	051b      	lsls	r3, r3, #20
 800cc40:	b12b      	cbz	r3, 800cc4e <_dtoa_r+0x7de>
 800cc42:	9b08      	ldr	r3, [sp, #32]
 800cc44:	3301      	adds	r3, #1
 800cc46:	9308      	str	r3, [sp, #32]
 800cc48:	f108 0801 	add.w	r8, r8, #1
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 81b0 	beq.w	800cfb8 <_dtoa_r+0xb48>
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc5e:	6918      	ldr	r0, [r3, #16]
 800cc60:	f000 ff08 	bl	800da74 <__hi0bits>
 800cc64:	f1c0 0020 	rsb	r0, r0, #32
 800cc68:	9b08      	ldr	r3, [sp, #32]
 800cc6a:	4418      	add	r0, r3
 800cc6c:	f010 001f 	ands.w	r0, r0, #31
 800cc70:	d077      	beq.n	800cd62 <_dtoa_r+0x8f2>
 800cc72:	f1c0 0320 	rsb	r3, r0, #32
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	dd6b      	ble.n	800cd52 <_dtoa_r+0x8e2>
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	f1c0 001c 	rsb	r0, r0, #28
 800cc80:	4403      	add	r3, r0
 800cc82:	4480      	add	r8, r0
 800cc84:	4406      	add	r6, r0
 800cc86:	9308      	str	r3, [sp, #32]
 800cc88:	f1b8 0f00 	cmp.w	r8, #0
 800cc8c:	dd05      	ble.n	800cc9a <_dtoa_r+0x82a>
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4642      	mov	r2, r8
 800cc92:	4658      	mov	r0, fp
 800cc94:	f001 f854 	bl	800dd40 <__lshift>
 800cc98:	4681      	mov	r9, r0
 800cc9a:	9b08      	ldr	r3, [sp, #32]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd05      	ble.n	800ccac <_dtoa_r+0x83c>
 800cca0:	4621      	mov	r1, r4
 800cca2:	461a      	mov	r2, r3
 800cca4:	4658      	mov	r0, fp
 800cca6:	f001 f84b 	bl	800dd40 <__lshift>
 800ccaa:	4604      	mov	r4, r0
 800ccac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d059      	beq.n	800cd66 <_dtoa_r+0x8f6>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4648      	mov	r0, r9
 800ccb6:	f001 f8af 	bl	800de18 <__mcmp>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	da53      	bge.n	800cd66 <_dtoa_r+0x8f6>
 800ccbe:	1e7b      	subs	r3, r7, #1
 800ccc0:	9304      	str	r3, [sp, #16]
 800ccc2:	4649      	mov	r1, r9
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	220a      	movs	r2, #10
 800ccc8:	4658      	mov	r0, fp
 800ccca:	f000 fe43 	bl	800d954 <__multadd>
 800ccce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccd0:	4681      	mov	r9, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 8172 	beq.w	800cfbc <_dtoa_r+0xb4c>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	4629      	mov	r1, r5
 800ccdc:	220a      	movs	r2, #10
 800ccde:	4658      	mov	r0, fp
 800cce0:	f000 fe38 	bl	800d954 <__multadd>
 800cce4:	9b00      	ldr	r3, [sp, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	4605      	mov	r5, r0
 800ccea:	dc67      	bgt.n	800cdbc <_dtoa_r+0x94c>
 800ccec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	dc41      	bgt.n	800cd76 <_dtoa_r+0x906>
 800ccf2:	e063      	b.n	800cdbc <_dtoa_r+0x94c>
 800ccf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ccf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ccfa:	e746      	b.n	800cb8a <_dtoa_r+0x71a>
 800ccfc:	9b07      	ldr	r3, [sp, #28]
 800ccfe:	1e5c      	subs	r4, r3, #1
 800cd00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd02:	42a3      	cmp	r3, r4
 800cd04:	bfbf      	itttt	lt
 800cd06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cd08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cd0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cd0c:	1ae3      	sublt	r3, r4, r3
 800cd0e:	bfb4      	ite	lt
 800cd10:	18d2      	addlt	r2, r2, r3
 800cd12:	1b1c      	subge	r4, r3, r4
 800cd14:	9b07      	ldr	r3, [sp, #28]
 800cd16:	bfbc      	itt	lt
 800cd18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cd1a:	2400      	movlt	r4, #0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bfb5      	itete	lt
 800cd20:	eba8 0603 	sublt.w	r6, r8, r3
 800cd24:	9b07      	ldrge	r3, [sp, #28]
 800cd26:	2300      	movlt	r3, #0
 800cd28:	4646      	movge	r6, r8
 800cd2a:	e730      	b.n	800cb8e <_dtoa_r+0x71e>
 800cd2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cd30:	4646      	mov	r6, r8
 800cd32:	e735      	b.n	800cba0 <_dtoa_r+0x730>
 800cd34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd36:	e75c      	b.n	800cbf2 <_dtoa_r+0x782>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	e788      	b.n	800cc4e <_dtoa_r+0x7de>
 800cd3c:	3fe00000 	.word	0x3fe00000
 800cd40:	40240000 	.word	0x40240000
 800cd44:	40140000 	.word	0x40140000
 800cd48:	9b02      	ldr	r3, [sp, #8]
 800cd4a:	e780      	b.n	800cc4e <_dtoa_r+0x7de>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd50:	e782      	b.n	800cc58 <_dtoa_r+0x7e8>
 800cd52:	d099      	beq.n	800cc88 <_dtoa_r+0x818>
 800cd54:	9a08      	ldr	r2, [sp, #32]
 800cd56:	331c      	adds	r3, #28
 800cd58:	441a      	add	r2, r3
 800cd5a:	4498      	add	r8, r3
 800cd5c:	441e      	add	r6, r3
 800cd5e:	9208      	str	r2, [sp, #32]
 800cd60:	e792      	b.n	800cc88 <_dtoa_r+0x818>
 800cd62:	4603      	mov	r3, r0
 800cd64:	e7f6      	b.n	800cd54 <_dtoa_r+0x8e4>
 800cd66:	9b07      	ldr	r3, [sp, #28]
 800cd68:	9704      	str	r7, [sp, #16]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dc20      	bgt.n	800cdb0 <_dtoa_r+0x940>
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd72:	2b02      	cmp	r3, #2
 800cd74:	dd1e      	ble.n	800cdb4 <_dtoa_r+0x944>
 800cd76:	9b00      	ldr	r3, [sp, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f47f aec0 	bne.w	800cafe <_dtoa_r+0x68e>
 800cd7e:	4621      	mov	r1, r4
 800cd80:	2205      	movs	r2, #5
 800cd82:	4658      	mov	r0, fp
 800cd84:	f000 fde6 	bl	800d954 <__multadd>
 800cd88:	4601      	mov	r1, r0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4648      	mov	r0, r9
 800cd8e:	f001 f843 	bl	800de18 <__mcmp>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	f77f aeb3 	ble.w	800cafe <_dtoa_r+0x68e>
 800cd98:	4656      	mov	r6, sl
 800cd9a:	2331      	movs	r3, #49	@ 0x31
 800cd9c:	f806 3b01 	strb.w	r3, [r6], #1
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	3301      	adds	r3, #1
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	e6ae      	b.n	800cb06 <_dtoa_r+0x696>
 800cda8:	9c07      	ldr	r4, [sp, #28]
 800cdaa:	9704      	str	r7, [sp, #16]
 800cdac:	4625      	mov	r5, r4
 800cdae:	e7f3      	b.n	800cd98 <_dtoa_r+0x928>
 800cdb0:	9b07      	ldr	r3, [sp, #28]
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f000 8104 	beq.w	800cfc4 <_dtoa_r+0xb54>
 800cdbc:	2e00      	cmp	r6, #0
 800cdbe:	dd05      	ble.n	800cdcc <_dtoa_r+0x95c>
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4632      	mov	r2, r6
 800cdc4:	4658      	mov	r0, fp
 800cdc6:	f000 ffbb 	bl	800dd40 <__lshift>
 800cdca:	4605      	mov	r5, r0
 800cdcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d05a      	beq.n	800ce88 <_dtoa_r+0xa18>
 800cdd2:	6869      	ldr	r1, [r5, #4]
 800cdd4:	4658      	mov	r0, fp
 800cdd6:	f000 fd5b 	bl	800d890 <_Balloc>
 800cdda:	4606      	mov	r6, r0
 800cddc:	b928      	cbnz	r0, 800cdea <_dtoa_r+0x97a>
 800cdde:	4b84      	ldr	r3, [pc, #528]	@ (800cff0 <_dtoa_r+0xb80>)
 800cde0:	4602      	mov	r2, r0
 800cde2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cde6:	f7ff bb5a 	b.w	800c49e <_dtoa_r+0x2e>
 800cdea:	692a      	ldr	r2, [r5, #16]
 800cdec:	3202      	adds	r2, #2
 800cdee:	0092      	lsls	r2, r2, #2
 800cdf0:	f105 010c 	add.w	r1, r5, #12
 800cdf4:	300c      	adds	r0, #12
 800cdf6:	f7ff fa9c 	bl	800c332 <memcpy>
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4658      	mov	r0, fp
 800ce00:	f000 ff9e 	bl	800dd40 <__lshift>
 800ce04:	f10a 0301 	add.w	r3, sl, #1
 800ce08:	9307      	str	r3, [sp, #28]
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	4453      	add	r3, sl
 800ce0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce10:	9b02      	ldr	r3, [sp, #8]
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	462f      	mov	r7, r5
 800ce18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	9b07      	ldr	r3, [sp, #28]
 800ce1e:	4621      	mov	r1, r4
 800ce20:	3b01      	subs	r3, #1
 800ce22:	4648      	mov	r0, r9
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	f7ff fa9b 	bl	800c360 <quorem>
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	9002      	str	r0, [sp, #8]
 800ce2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce32:	4648      	mov	r0, r9
 800ce34:	f000 fff0 	bl	800de18 <__mcmp>
 800ce38:	462a      	mov	r2, r5
 800ce3a:	9008      	str	r0, [sp, #32]
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	4658      	mov	r0, fp
 800ce40:	f001 f806 	bl	800de50 <__mdiff>
 800ce44:	68c2      	ldr	r2, [r0, #12]
 800ce46:	4606      	mov	r6, r0
 800ce48:	bb02      	cbnz	r2, 800ce8c <_dtoa_r+0xa1c>
 800ce4a:	4601      	mov	r1, r0
 800ce4c:	4648      	mov	r0, r9
 800ce4e:	f000 ffe3 	bl	800de18 <__mcmp>
 800ce52:	4602      	mov	r2, r0
 800ce54:	4631      	mov	r1, r6
 800ce56:	4658      	mov	r0, fp
 800ce58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce5a:	f000 fd59 	bl	800d910 <_Bfree>
 800ce5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce62:	9e07      	ldr	r6, [sp, #28]
 800ce64:	ea43 0102 	orr.w	r1, r3, r2
 800ce68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce6a:	4319      	orrs	r1, r3
 800ce6c:	d110      	bne.n	800ce90 <_dtoa_r+0xa20>
 800ce6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce72:	d029      	beq.n	800cec8 <_dtoa_r+0xa58>
 800ce74:	9b08      	ldr	r3, [sp, #32]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	dd02      	ble.n	800ce80 <_dtoa_r+0xa10>
 800ce7a:	9b02      	ldr	r3, [sp, #8]
 800ce7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce80:	9b00      	ldr	r3, [sp, #0]
 800ce82:	f883 8000 	strb.w	r8, [r3]
 800ce86:	e63f      	b.n	800cb08 <_dtoa_r+0x698>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	e7bb      	b.n	800ce04 <_dtoa_r+0x994>
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	e7e1      	b.n	800ce54 <_dtoa_r+0x9e4>
 800ce90:	9b08      	ldr	r3, [sp, #32]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	db04      	blt.n	800cea0 <_dtoa_r+0xa30>
 800ce96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce98:	430b      	orrs	r3, r1
 800ce9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	d120      	bne.n	800cee2 <_dtoa_r+0xa72>
 800cea0:	2a00      	cmp	r2, #0
 800cea2:	dded      	ble.n	800ce80 <_dtoa_r+0xa10>
 800cea4:	4649      	mov	r1, r9
 800cea6:	2201      	movs	r2, #1
 800cea8:	4658      	mov	r0, fp
 800ceaa:	f000 ff49 	bl	800dd40 <__lshift>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	4681      	mov	r9, r0
 800ceb2:	f000 ffb1 	bl	800de18 <__mcmp>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	dc03      	bgt.n	800cec2 <_dtoa_r+0xa52>
 800ceba:	d1e1      	bne.n	800ce80 <_dtoa_r+0xa10>
 800cebc:	f018 0f01 	tst.w	r8, #1
 800cec0:	d0de      	beq.n	800ce80 <_dtoa_r+0xa10>
 800cec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cec6:	d1d8      	bne.n	800ce7a <_dtoa_r+0xa0a>
 800cec8:	9a00      	ldr	r2, [sp, #0]
 800ceca:	2339      	movs	r3, #57	@ 0x39
 800cecc:	7013      	strb	r3, [r2, #0]
 800cece:	4633      	mov	r3, r6
 800ced0:	461e      	mov	r6, r3
 800ced2:	3b01      	subs	r3, #1
 800ced4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ced8:	2a39      	cmp	r2, #57	@ 0x39
 800ceda:	d052      	beq.n	800cf82 <_dtoa_r+0xb12>
 800cedc:	3201      	adds	r2, #1
 800cede:	701a      	strb	r2, [r3, #0]
 800cee0:	e612      	b.n	800cb08 <_dtoa_r+0x698>
 800cee2:	2a00      	cmp	r2, #0
 800cee4:	dd07      	ble.n	800cef6 <_dtoa_r+0xa86>
 800cee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ceea:	d0ed      	beq.n	800cec8 <_dtoa_r+0xa58>
 800ceec:	9a00      	ldr	r2, [sp, #0]
 800ceee:	f108 0301 	add.w	r3, r8, #1
 800cef2:	7013      	strb	r3, [r2, #0]
 800cef4:	e608      	b.n	800cb08 <_dtoa_r+0x698>
 800cef6:	9b07      	ldr	r3, [sp, #28]
 800cef8:	9a07      	ldr	r2, [sp, #28]
 800cefa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d028      	beq.n	800cf56 <_dtoa_r+0xae6>
 800cf04:	4649      	mov	r1, r9
 800cf06:	2300      	movs	r3, #0
 800cf08:	220a      	movs	r2, #10
 800cf0a:	4658      	mov	r0, fp
 800cf0c:	f000 fd22 	bl	800d954 <__multadd>
 800cf10:	42af      	cmp	r7, r5
 800cf12:	4681      	mov	r9, r0
 800cf14:	f04f 0300 	mov.w	r3, #0
 800cf18:	f04f 020a 	mov.w	r2, #10
 800cf1c:	4639      	mov	r1, r7
 800cf1e:	4658      	mov	r0, fp
 800cf20:	d107      	bne.n	800cf32 <_dtoa_r+0xac2>
 800cf22:	f000 fd17 	bl	800d954 <__multadd>
 800cf26:	4607      	mov	r7, r0
 800cf28:	4605      	mov	r5, r0
 800cf2a:	9b07      	ldr	r3, [sp, #28]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	e774      	b.n	800ce1c <_dtoa_r+0x9ac>
 800cf32:	f000 fd0f 	bl	800d954 <__multadd>
 800cf36:	4629      	mov	r1, r5
 800cf38:	4607      	mov	r7, r0
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	220a      	movs	r2, #10
 800cf3e:	4658      	mov	r0, fp
 800cf40:	f000 fd08 	bl	800d954 <__multadd>
 800cf44:	4605      	mov	r5, r0
 800cf46:	e7f0      	b.n	800cf2a <_dtoa_r+0xaba>
 800cf48:	9b00      	ldr	r3, [sp, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	bfcc      	ite	gt
 800cf4e:	461e      	movgt	r6, r3
 800cf50:	2601      	movle	r6, #1
 800cf52:	4456      	add	r6, sl
 800cf54:	2700      	movs	r7, #0
 800cf56:	4649      	mov	r1, r9
 800cf58:	2201      	movs	r2, #1
 800cf5a:	4658      	mov	r0, fp
 800cf5c:	f000 fef0 	bl	800dd40 <__lshift>
 800cf60:	4621      	mov	r1, r4
 800cf62:	4681      	mov	r9, r0
 800cf64:	f000 ff58 	bl	800de18 <__mcmp>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	dcb0      	bgt.n	800cece <_dtoa_r+0xa5e>
 800cf6c:	d102      	bne.n	800cf74 <_dtoa_r+0xb04>
 800cf6e:	f018 0f01 	tst.w	r8, #1
 800cf72:	d1ac      	bne.n	800cece <_dtoa_r+0xa5e>
 800cf74:	4633      	mov	r3, r6
 800cf76:	461e      	mov	r6, r3
 800cf78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf7c:	2a30      	cmp	r2, #48	@ 0x30
 800cf7e:	d0fa      	beq.n	800cf76 <_dtoa_r+0xb06>
 800cf80:	e5c2      	b.n	800cb08 <_dtoa_r+0x698>
 800cf82:	459a      	cmp	sl, r3
 800cf84:	d1a4      	bne.n	800ced0 <_dtoa_r+0xa60>
 800cf86:	9b04      	ldr	r3, [sp, #16]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	2331      	movs	r3, #49	@ 0x31
 800cf8e:	f88a 3000 	strb.w	r3, [sl]
 800cf92:	e5b9      	b.n	800cb08 <_dtoa_r+0x698>
 800cf94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cff4 <_dtoa_r+0xb84>
 800cf9a:	b11b      	cbz	r3, 800cfa4 <_dtoa_r+0xb34>
 800cf9c:	f10a 0308 	add.w	r3, sl, #8
 800cfa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	b019      	add	sp, #100	@ 0x64
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	f77f ae37 	ble.w	800cc22 <_dtoa_r+0x7b2>
 800cfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb8:	2001      	movs	r0, #1
 800cfba:	e655      	b.n	800cc68 <_dtoa_r+0x7f8>
 800cfbc:	9b00      	ldr	r3, [sp, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f77f aed6 	ble.w	800cd70 <_dtoa_r+0x900>
 800cfc4:	4656      	mov	r6, sl
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	4648      	mov	r0, r9
 800cfca:	f7ff f9c9 	bl	800c360 <quorem>
 800cfce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cfd2:	f806 8b01 	strb.w	r8, [r6], #1
 800cfd6:	9b00      	ldr	r3, [sp, #0]
 800cfd8:	eba6 020a 	sub.w	r2, r6, sl
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	ddb3      	ble.n	800cf48 <_dtoa_r+0xad8>
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	220a      	movs	r2, #10
 800cfe6:	4658      	mov	r0, fp
 800cfe8:	f000 fcb4 	bl	800d954 <__multadd>
 800cfec:	4681      	mov	r9, r0
 800cfee:	e7ea      	b.n	800cfc6 <_dtoa_r+0xb56>
 800cff0:	080100f9 	.word	0x080100f9
 800cff4:	0801007d 	.word	0x0801007d

0800cff8 <_free_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4605      	mov	r5, r0
 800cffc:	2900      	cmp	r1, #0
 800cffe:	d041      	beq.n	800d084 <_free_r+0x8c>
 800d000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d004:	1f0c      	subs	r4, r1, #4
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfb8      	it	lt
 800d00a:	18e4      	addlt	r4, r4, r3
 800d00c:	f000 fc34 	bl	800d878 <__malloc_lock>
 800d010:	4a1d      	ldr	r2, [pc, #116]	@ (800d088 <_free_r+0x90>)
 800d012:	6813      	ldr	r3, [r2, #0]
 800d014:	b933      	cbnz	r3, 800d024 <_free_r+0x2c>
 800d016:	6063      	str	r3, [r4, #4]
 800d018:	6014      	str	r4, [r2, #0]
 800d01a:	4628      	mov	r0, r5
 800d01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d020:	f000 bc30 	b.w	800d884 <__malloc_unlock>
 800d024:	42a3      	cmp	r3, r4
 800d026:	d908      	bls.n	800d03a <_free_r+0x42>
 800d028:	6820      	ldr	r0, [r4, #0]
 800d02a:	1821      	adds	r1, r4, r0
 800d02c:	428b      	cmp	r3, r1
 800d02e:	bf01      	itttt	eq
 800d030:	6819      	ldreq	r1, [r3, #0]
 800d032:	685b      	ldreq	r3, [r3, #4]
 800d034:	1809      	addeq	r1, r1, r0
 800d036:	6021      	streq	r1, [r4, #0]
 800d038:	e7ed      	b.n	800d016 <_free_r+0x1e>
 800d03a:	461a      	mov	r2, r3
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	b10b      	cbz	r3, 800d044 <_free_r+0x4c>
 800d040:	42a3      	cmp	r3, r4
 800d042:	d9fa      	bls.n	800d03a <_free_r+0x42>
 800d044:	6811      	ldr	r1, [r2, #0]
 800d046:	1850      	adds	r0, r2, r1
 800d048:	42a0      	cmp	r0, r4
 800d04a:	d10b      	bne.n	800d064 <_free_r+0x6c>
 800d04c:	6820      	ldr	r0, [r4, #0]
 800d04e:	4401      	add	r1, r0
 800d050:	1850      	adds	r0, r2, r1
 800d052:	4283      	cmp	r3, r0
 800d054:	6011      	str	r1, [r2, #0]
 800d056:	d1e0      	bne.n	800d01a <_free_r+0x22>
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	6053      	str	r3, [r2, #4]
 800d05e:	4408      	add	r0, r1
 800d060:	6010      	str	r0, [r2, #0]
 800d062:	e7da      	b.n	800d01a <_free_r+0x22>
 800d064:	d902      	bls.n	800d06c <_free_r+0x74>
 800d066:	230c      	movs	r3, #12
 800d068:	602b      	str	r3, [r5, #0]
 800d06a:	e7d6      	b.n	800d01a <_free_r+0x22>
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	1821      	adds	r1, r4, r0
 800d070:	428b      	cmp	r3, r1
 800d072:	bf04      	itt	eq
 800d074:	6819      	ldreq	r1, [r3, #0]
 800d076:	685b      	ldreq	r3, [r3, #4]
 800d078:	6063      	str	r3, [r4, #4]
 800d07a:	bf04      	itt	eq
 800d07c:	1809      	addeq	r1, r1, r0
 800d07e:	6021      	streq	r1, [r4, #0]
 800d080:	6054      	str	r4, [r2, #4]
 800d082:	e7ca      	b.n	800d01a <_free_r+0x22>
 800d084:	bd38      	pop	{r3, r4, r5, pc}
 800d086:	bf00      	nop
 800d088:	20000c9c 	.word	0x20000c9c

0800d08c <rshift>:
 800d08c:	6903      	ldr	r3, [r0, #16]
 800d08e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d096:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d09a:	f100 0414 	add.w	r4, r0, #20
 800d09e:	dd45      	ble.n	800d12c <rshift+0xa0>
 800d0a0:	f011 011f 	ands.w	r1, r1, #31
 800d0a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0ac:	d10c      	bne.n	800d0c8 <rshift+0x3c>
 800d0ae:	f100 0710 	add.w	r7, r0, #16
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	42b1      	cmp	r1, r6
 800d0b6:	d334      	bcc.n	800d122 <rshift+0x96>
 800d0b8:	1a9b      	subs	r3, r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	1eea      	subs	r2, r5, #3
 800d0be:	4296      	cmp	r6, r2
 800d0c0:	bf38      	it	cc
 800d0c2:	2300      	movcc	r3, #0
 800d0c4:	4423      	add	r3, r4
 800d0c6:	e015      	b.n	800d0f4 <rshift+0x68>
 800d0c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0cc:	f1c1 0820 	rsb	r8, r1, #32
 800d0d0:	40cf      	lsrs	r7, r1
 800d0d2:	f105 0e04 	add.w	lr, r5, #4
 800d0d6:	46a1      	mov	r9, r4
 800d0d8:	4576      	cmp	r6, lr
 800d0da:	46f4      	mov	ip, lr
 800d0dc:	d815      	bhi.n	800d10a <rshift+0x7e>
 800d0de:	1a9a      	subs	r2, r3, r2
 800d0e0:	0092      	lsls	r2, r2, #2
 800d0e2:	3a04      	subs	r2, #4
 800d0e4:	3501      	adds	r5, #1
 800d0e6:	42ae      	cmp	r6, r5
 800d0e8:	bf38      	it	cc
 800d0ea:	2200      	movcc	r2, #0
 800d0ec:	18a3      	adds	r3, r4, r2
 800d0ee:	50a7      	str	r7, [r4, r2]
 800d0f0:	b107      	cbz	r7, 800d0f4 <rshift+0x68>
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	1b1a      	subs	r2, r3, r4
 800d0f6:	42a3      	cmp	r3, r4
 800d0f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d0fc:	bf08      	it	eq
 800d0fe:	2300      	moveq	r3, #0
 800d100:	6102      	str	r2, [r0, #16]
 800d102:	bf08      	it	eq
 800d104:	6143      	streq	r3, [r0, #20]
 800d106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d10a:	f8dc c000 	ldr.w	ip, [ip]
 800d10e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d112:	ea4c 0707 	orr.w	r7, ip, r7
 800d116:	f849 7b04 	str.w	r7, [r9], #4
 800d11a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d11e:	40cf      	lsrs	r7, r1
 800d120:	e7da      	b.n	800d0d8 <rshift+0x4c>
 800d122:	f851 cb04 	ldr.w	ip, [r1], #4
 800d126:	f847 cf04 	str.w	ip, [r7, #4]!
 800d12a:	e7c3      	b.n	800d0b4 <rshift+0x28>
 800d12c:	4623      	mov	r3, r4
 800d12e:	e7e1      	b.n	800d0f4 <rshift+0x68>

0800d130 <__hexdig_fun>:
 800d130:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d134:	2b09      	cmp	r3, #9
 800d136:	d802      	bhi.n	800d13e <__hexdig_fun+0xe>
 800d138:	3820      	subs	r0, #32
 800d13a:	b2c0      	uxtb	r0, r0
 800d13c:	4770      	bx	lr
 800d13e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d142:	2b05      	cmp	r3, #5
 800d144:	d801      	bhi.n	800d14a <__hexdig_fun+0x1a>
 800d146:	3847      	subs	r0, #71	@ 0x47
 800d148:	e7f7      	b.n	800d13a <__hexdig_fun+0xa>
 800d14a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d14e:	2b05      	cmp	r3, #5
 800d150:	d801      	bhi.n	800d156 <__hexdig_fun+0x26>
 800d152:	3827      	subs	r0, #39	@ 0x27
 800d154:	e7f1      	b.n	800d13a <__hexdig_fun+0xa>
 800d156:	2000      	movs	r0, #0
 800d158:	4770      	bx	lr
	...

0800d15c <__gethex>:
 800d15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	b085      	sub	sp, #20
 800d162:	468a      	mov	sl, r1
 800d164:	9302      	str	r3, [sp, #8]
 800d166:	680b      	ldr	r3, [r1, #0]
 800d168:	9001      	str	r0, [sp, #4]
 800d16a:	4690      	mov	r8, r2
 800d16c:	1c9c      	adds	r4, r3, #2
 800d16e:	46a1      	mov	r9, r4
 800d170:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d174:	2830      	cmp	r0, #48	@ 0x30
 800d176:	d0fa      	beq.n	800d16e <__gethex+0x12>
 800d178:	eba9 0303 	sub.w	r3, r9, r3
 800d17c:	f1a3 0b02 	sub.w	fp, r3, #2
 800d180:	f7ff ffd6 	bl	800d130 <__hexdig_fun>
 800d184:	4605      	mov	r5, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d168      	bne.n	800d25c <__gethex+0x100>
 800d18a:	49a0      	ldr	r1, [pc, #640]	@ (800d40c <__gethex+0x2b0>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	4648      	mov	r0, r9
 800d190:	f7ff f82a 	bl	800c1e8 <strncmp>
 800d194:	4607      	mov	r7, r0
 800d196:	2800      	cmp	r0, #0
 800d198:	d167      	bne.n	800d26a <__gethex+0x10e>
 800d19a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d19e:	4626      	mov	r6, r4
 800d1a0:	f7ff ffc6 	bl	800d130 <__hexdig_fun>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d062      	beq.n	800d26e <__gethex+0x112>
 800d1a8:	4623      	mov	r3, r4
 800d1aa:	7818      	ldrb	r0, [r3, #0]
 800d1ac:	2830      	cmp	r0, #48	@ 0x30
 800d1ae:	4699      	mov	r9, r3
 800d1b0:	f103 0301 	add.w	r3, r3, #1
 800d1b4:	d0f9      	beq.n	800d1aa <__gethex+0x4e>
 800d1b6:	f7ff ffbb 	bl	800d130 <__hexdig_fun>
 800d1ba:	fab0 f580 	clz	r5, r0
 800d1be:	096d      	lsrs	r5, r5, #5
 800d1c0:	f04f 0b01 	mov.w	fp, #1
 800d1c4:	464a      	mov	r2, r9
 800d1c6:	4616      	mov	r6, r2
 800d1c8:	3201      	adds	r2, #1
 800d1ca:	7830      	ldrb	r0, [r6, #0]
 800d1cc:	f7ff ffb0 	bl	800d130 <__hexdig_fun>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d1f8      	bne.n	800d1c6 <__gethex+0x6a>
 800d1d4:	498d      	ldr	r1, [pc, #564]	@ (800d40c <__gethex+0x2b0>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7ff f805 	bl	800c1e8 <strncmp>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d13f      	bne.n	800d262 <__gethex+0x106>
 800d1e2:	b944      	cbnz	r4, 800d1f6 <__gethex+0x9a>
 800d1e4:	1c74      	adds	r4, r6, #1
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	4616      	mov	r6, r2
 800d1ea:	3201      	adds	r2, #1
 800d1ec:	7830      	ldrb	r0, [r6, #0]
 800d1ee:	f7ff ff9f 	bl	800d130 <__hexdig_fun>
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d1f8      	bne.n	800d1e8 <__gethex+0x8c>
 800d1f6:	1ba4      	subs	r4, r4, r6
 800d1f8:	00a7      	lsls	r7, r4, #2
 800d1fa:	7833      	ldrb	r3, [r6, #0]
 800d1fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d200:	2b50      	cmp	r3, #80	@ 0x50
 800d202:	d13e      	bne.n	800d282 <__gethex+0x126>
 800d204:	7873      	ldrb	r3, [r6, #1]
 800d206:	2b2b      	cmp	r3, #43	@ 0x2b
 800d208:	d033      	beq.n	800d272 <__gethex+0x116>
 800d20a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d20c:	d034      	beq.n	800d278 <__gethex+0x11c>
 800d20e:	1c71      	adds	r1, r6, #1
 800d210:	2400      	movs	r4, #0
 800d212:	7808      	ldrb	r0, [r1, #0]
 800d214:	f7ff ff8c 	bl	800d130 <__hexdig_fun>
 800d218:	1e43      	subs	r3, r0, #1
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	2b18      	cmp	r3, #24
 800d21e:	d830      	bhi.n	800d282 <__gethex+0x126>
 800d220:	f1a0 0210 	sub.w	r2, r0, #16
 800d224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d228:	f7ff ff82 	bl	800d130 <__hexdig_fun>
 800d22c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d230:	fa5f fc8c 	uxtb.w	ip, ip
 800d234:	f1bc 0f18 	cmp.w	ip, #24
 800d238:	f04f 030a 	mov.w	r3, #10
 800d23c:	d91e      	bls.n	800d27c <__gethex+0x120>
 800d23e:	b104      	cbz	r4, 800d242 <__gethex+0xe6>
 800d240:	4252      	negs	r2, r2
 800d242:	4417      	add	r7, r2
 800d244:	f8ca 1000 	str.w	r1, [sl]
 800d248:	b1ed      	cbz	r5, 800d286 <__gethex+0x12a>
 800d24a:	f1bb 0f00 	cmp.w	fp, #0
 800d24e:	bf0c      	ite	eq
 800d250:	2506      	moveq	r5, #6
 800d252:	2500      	movne	r5, #0
 800d254:	4628      	mov	r0, r5
 800d256:	b005      	add	sp, #20
 800d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25c:	2500      	movs	r5, #0
 800d25e:	462c      	mov	r4, r5
 800d260:	e7b0      	b.n	800d1c4 <__gethex+0x68>
 800d262:	2c00      	cmp	r4, #0
 800d264:	d1c7      	bne.n	800d1f6 <__gethex+0x9a>
 800d266:	4627      	mov	r7, r4
 800d268:	e7c7      	b.n	800d1fa <__gethex+0x9e>
 800d26a:	464e      	mov	r6, r9
 800d26c:	462f      	mov	r7, r5
 800d26e:	2501      	movs	r5, #1
 800d270:	e7c3      	b.n	800d1fa <__gethex+0x9e>
 800d272:	2400      	movs	r4, #0
 800d274:	1cb1      	adds	r1, r6, #2
 800d276:	e7cc      	b.n	800d212 <__gethex+0xb6>
 800d278:	2401      	movs	r4, #1
 800d27a:	e7fb      	b.n	800d274 <__gethex+0x118>
 800d27c:	fb03 0002 	mla	r0, r3, r2, r0
 800d280:	e7ce      	b.n	800d220 <__gethex+0xc4>
 800d282:	4631      	mov	r1, r6
 800d284:	e7de      	b.n	800d244 <__gethex+0xe8>
 800d286:	eba6 0309 	sub.w	r3, r6, r9
 800d28a:	3b01      	subs	r3, #1
 800d28c:	4629      	mov	r1, r5
 800d28e:	2b07      	cmp	r3, #7
 800d290:	dc0a      	bgt.n	800d2a8 <__gethex+0x14c>
 800d292:	9801      	ldr	r0, [sp, #4]
 800d294:	f000 fafc 	bl	800d890 <_Balloc>
 800d298:	4604      	mov	r4, r0
 800d29a:	b940      	cbnz	r0, 800d2ae <__gethex+0x152>
 800d29c:	4b5c      	ldr	r3, [pc, #368]	@ (800d410 <__gethex+0x2b4>)
 800d29e:	4602      	mov	r2, r0
 800d2a0:	21e4      	movs	r1, #228	@ 0xe4
 800d2a2:	485c      	ldr	r0, [pc, #368]	@ (800d414 <__gethex+0x2b8>)
 800d2a4:	f001 f9e0 	bl	800e668 <__assert_func>
 800d2a8:	3101      	adds	r1, #1
 800d2aa:	105b      	asrs	r3, r3, #1
 800d2ac:	e7ef      	b.n	800d28e <__gethex+0x132>
 800d2ae:	f100 0a14 	add.w	sl, r0, #20
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4655      	mov	r5, sl
 800d2b6:	469b      	mov	fp, r3
 800d2b8:	45b1      	cmp	r9, r6
 800d2ba:	d337      	bcc.n	800d32c <__gethex+0x1d0>
 800d2bc:	f845 bb04 	str.w	fp, [r5], #4
 800d2c0:	eba5 050a 	sub.w	r5, r5, sl
 800d2c4:	10ad      	asrs	r5, r5, #2
 800d2c6:	6125      	str	r5, [r4, #16]
 800d2c8:	4658      	mov	r0, fp
 800d2ca:	f000 fbd3 	bl	800da74 <__hi0bits>
 800d2ce:	016d      	lsls	r5, r5, #5
 800d2d0:	f8d8 6000 	ldr.w	r6, [r8]
 800d2d4:	1a2d      	subs	r5, r5, r0
 800d2d6:	42b5      	cmp	r5, r6
 800d2d8:	dd54      	ble.n	800d384 <__gethex+0x228>
 800d2da:	1bad      	subs	r5, r5, r6
 800d2dc:	4629      	mov	r1, r5
 800d2de:	4620      	mov	r0, r4
 800d2e0:	f000 ff67 	bl	800e1b2 <__any_on>
 800d2e4:	4681      	mov	r9, r0
 800d2e6:	b178      	cbz	r0, 800d308 <__gethex+0x1ac>
 800d2e8:	1e6b      	subs	r3, r5, #1
 800d2ea:	1159      	asrs	r1, r3, #5
 800d2ec:	f003 021f 	and.w	r2, r3, #31
 800d2f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d2f4:	f04f 0901 	mov.w	r9, #1
 800d2f8:	fa09 f202 	lsl.w	r2, r9, r2
 800d2fc:	420a      	tst	r2, r1
 800d2fe:	d003      	beq.n	800d308 <__gethex+0x1ac>
 800d300:	454b      	cmp	r3, r9
 800d302:	dc36      	bgt.n	800d372 <__gethex+0x216>
 800d304:	f04f 0902 	mov.w	r9, #2
 800d308:	4629      	mov	r1, r5
 800d30a:	4620      	mov	r0, r4
 800d30c:	f7ff febe 	bl	800d08c <rshift>
 800d310:	442f      	add	r7, r5
 800d312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d316:	42bb      	cmp	r3, r7
 800d318:	da42      	bge.n	800d3a0 <__gethex+0x244>
 800d31a:	9801      	ldr	r0, [sp, #4]
 800d31c:	4621      	mov	r1, r4
 800d31e:	f000 faf7 	bl	800d910 <_Bfree>
 800d322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d324:	2300      	movs	r3, #0
 800d326:	6013      	str	r3, [r2, #0]
 800d328:	25a3      	movs	r5, #163	@ 0xa3
 800d32a:	e793      	b.n	800d254 <__gethex+0xf8>
 800d32c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d330:	2a2e      	cmp	r2, #46	@ 0x2e
 800d332:	d012      	beq.n	800d35a <__gethex+0x1fe>
 800d334:	2b20      	cmp	r3, #32
 800d336:	d104      	bne.n	800d342 <__gethex+0x1e6>
 800d338:	f845 bb04 	str.w	fp, [r5], #4
 800d33c:	f04f 0b00 	mov.w	fp, #0
 800d340:	465b      	mov	r3, fp
 800d342:	7830      	ldrb	r0, [r6, #0]
 800d344:	9303      	str	r3, [sp, #12]
 800d346:	f7ff fef3 	bl	800d130 <__hexdig_fun>
 800d34a:	9b03      	ldr	r3, [sp, #12]
 800d34c:	f000 000f 	and.w	r0, r0, #15
 800d350:	4098      	lsls	r0, r3
 800d352:	ea4b 0b00 	orr.w	fp, fp, r0
 800d356:	3304      	adds	r3, #4
 800d358:	e7ae      	b.n	800d2b8 <__gethex+0x15c>
 800d35a:	45b1      	cmp	r9, r6
 800d35c:	d8ea      	bhi.n	800d334 <__gethex+0x1d8>
 800d35e:	492b      	ldr	r1, [pc, #172]	@ (800d40c <__gethex+0x2b0>)
 800d360:	9303      	str	r3, [sp, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	4630      	mov	r0, r6
 800d366:	f7fe ff3f 	bl	800c1e8 <strncmp>
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d1e1      	bne.n	800d334 <__gethex+0x1d8>
 800d370:	e7a2      	b.n	800d2b8 <__gethex+0x15c>
 800d372:	1ea9      	subs	r1, r5, #2
 800d374:	4620      	mov	r0, r4
 800d376:	f000 ff1c 	bl	800e1b2 <__any_on>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d0c2      	beq.n	800d304 <__gethex+0x1a8>
 800d37e:	f04f 0903 	mov.w	r9, #3
 800d382:	e7c1      	b.n	800d308 <__gethex+0x1ac>
 800d384:	da09      	bge.n	800d39a <__gethex+0x23e>
 800d386:	1b75      	subs	r5, r6, r5
 800d388:	4621      	mov	r1, r4
 800d38a:	9801      	ldr	r0, [sp, #4]
 800d38c:	462a      	mov	r2, r5
 800d38e:	f000 fcd7 	bl	800dd40 <__lshift>
 800d392:	1b7f      	subs	r7, r7, r5
 800d394:	4604      	mov	r4, r0
 800d396:	f100 0a14 	add.w	sl, r0, #20
 800d39a:	f04f 0900 	mov.w	r9, #0
 800d39e:	e7b8      	b.n	800d312 <__gethex+0x1b6>
 800d3a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d3a4:	42bd      	cmp	r5, r7
 800d3a6:	dd6f      	ble.n	800d488 <__gethex+0x32c>
 800d3a8:	1bed      	subs	r5, r5, r7
 800d3aa:	42ae      	cmp	r6, r5
 800d3ac:	dc34      	bgt.n	800d418 <__gethex+0x2bc>
 800d3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d022      	beq.n	800d3fc <__gethex+0x2a0>
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d024      	beq.n	800d404 <__gethex+0x2a8>
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d115      	bne.n	800d3ea <__gethex+0x28e>
 800d3be:	42ae      	cmp	r6, r5
 800d3c0:	d113      	bne.n	800d3ea <__gethex+0x28e>
 800d3c2:	2e01      	cmp	r6, #1
 800d3c4:	d10b      	bne.n	800d3de <__gethex+0x282>
 800d3c6:	9a02      	ldr	r2, [sp, #8]
 800d3c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d3cc:	6013      	str	r3, [r2, #0]
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	6123      	str	r3, [r4, #16]
 800d3d2:	f8ca 3000 	str.w	r3, [sl]
 800d3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d8:	2562      	movs	r5, #98	@ 0x62
 800d3da:	601c      	str	r4, [r3, #0]
 800d3dc:	e73a      	b.n	800d254 <__gethex+0xf8>
 800d3de:	1e71      	subs	r1, r6, #1
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f000 fee6 	bl	800e1b2 <__any_on>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d1ed      	bne.n	800d3c6 <__gethex+0x26a>
 800d3ea:	9801      	ldr	r0, [sp, #4]
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	f000 fa8f 	bl	800d910 <_Bfree>
 800d3f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	6013      	str	r3, [r2, #0]
 800d3f8:	2550      	movs	r5, #80	@ 0x50
 800d3fa:	e72b      	b.n	800d254 <__gethex+0xf8>
 800d3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1f3      	bne.n	800d3ea <__gethex+0x28e>
 800d402:	e7e0      	b.n	800d3c6 <__gethex+0x26a>
 800d404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1dd      	bne.n	800d3c6 <__gethex+0x26a>
 800d40a:	e7ee      	b.n	800d3ea <__gethex+0x28e>
 800d40c:	0800fee8 	.word	0x0800fee8
 800d410:	080100f9 	.word	0x080100f9
 800d414:	0801010a 	.word	0x0801010a
 800d418:	1e6f      	subs	r7, r5, #1
 800d41a:	f1b9 0f00 	cmp.w	r9, #0
 800d41e:	d130      	bne.n	800d482 <__gethex+0x326>
 800d420:	b127      	cbz	r7, 800d42c <__gethex+0x2d0>
 800d422:	4639      	mov	r1, r7
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fec4 	bl	800e1b2 <__any_on>
 800d42a:	4681      	mov	r9, r0
 800d42c:	117a      	asrs	r2, r7, #5
 800d42e:	2301      	movs	r3, #1
 800d430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d434:	f007 071f 	and.w	r7, r7, #31
 800d438:	40bb      	lsls	r3, r7
 800d43a:	4213      	tst	r3, r2
 800d43c:	4629      	mov	r1, r5
 800d43e:	4620      	mov	r0, r4
 800d440:	bf18      	it	ne
 800d442:	f049 0902 	orrne.w	r9, r9, #2
 800d446:	f7ff fe21 	bl	800d08c <rshift>
 800d44a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d44e:	1b76      	subs	r6, r6, r5
 800d450:	2502      	movs	r5, #2
 800d452:	f1b9 0f00 	cmp.w	r9, #0
 800d456:	d047      	beq.n	800d4e8 <__gethex+0x38c>
 800d458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d015      	beq.n	800d48c <__gethex+0x330>
 800d460:	2b03      	cmp	r3, #3
 800d462:	d017      	beq.n	800d494 <__gethex+0x338>
 800d464:	2b01      	cmp	r3, #1
 800d466:	d109      	bne.n	800d47c <__gethex+0x320>
 800d468:	f019 0f02 	tst.w	r9, #2
 800d46c:	d006      	beq.n	800d47c <__gethex+0x320>
 800d46e:	f8da 3000 	ldr.w	r3, [sl]
 800d472:	ea49 0903 	orr.w	r9, r9, r3
 800d476:	f019 0f01 	tst.w	r9, #1
 800d47a:	d10e      	bne.n	800d49a <__gethex+0x33e>
 800d47c:	f045 0510 	orr.w	r5, r5, #16
 800d480:	e032      	b.n	800d4e8 <__gethex+0x38c>
 800d482:	f04f 0901 	mov.w	r9, #1
 800d486:	e7d1      	b.n	800d42c <__gethex+0x2d0>
 800d488:	2501      	movs	r5, #1
 800d48a:	e7e2      	b.n	800d452 <__gethex+0x2f6>
 800d48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d48e:	f1c3 0301 	rsb	r3, r3, #1
 800d492:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d496:	2b00      	cmp	r3, #0
 800d498:	d0f0      	beq.n	800d47c <__gethex+0x320>
 800d49a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d49e:	f104 0314 	add.w	r3, r4, #20
 800d4a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d4a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d4aa:	f04f 0c00 	mov.w	ip, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d4b8:	d01b      	beq.n	800d4f2 <__gethex+0x396>
 800d4ba:	3201      	adds	r2, #1
 800d4bc:	6002      	str	r2, [r0, #0]
 800d4be:	2d02      	cmp	r5, #2
 800d4c0:	f104 0314 	add.w	r3, r4, #20
 800d4c4:	d13c      	bne.n	800d540 <__gethex+0x3e4>
 800d4c6:	f8d8 2000 	ldr.w	r2, [r8]
 800d4ca:	3a01      	subs	r2, #1
 800d4cc:	42b2      	cmp	r2, r6
 800d4ce:	d109      	bne.n	800d4e4 <__gethex+0x388>
 800d4d0:	1171      	asrs	r1, r6, #5
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d4d8:	f006 061f 	and.w	r6, r6, #31
 800d4dc:	fa02 f606 	lsl.w	r6, r2, r6
 800d4e0:	421e      	tst	r6, r3
 800d4e2:	d13a      	bne.n	800d55a <__gethex+0x3fe>
 800d4e4:	f045 0520 	orr.w	r5, r5, #32
 800d4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ea:	601c      	str	r4, [r3, #0]
 800d4ec:	9b02      	ldr	r3, [sp, #8]
 800d4ee:	601f      	str	r7, [r3, #0]
 800d4f0:	e6b0      	b.n	800d254 <__gethex+0xf8>
 800d4f2:	4299      	cmp	r1, r3
 800d4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d4f8:	d8d9      	bhi.n	800d4ae <__gethex+0x352>
 800d4fa:	68a3      	ldr	r3, [r4, #8]
 800d4fc:	459b      	cmp	fp, r3
 800d4fe:	db17      	blt.n	800d530 <__gethex+0x3d4>
 800d500:	6861      	ldr	r1, [r4, #4]
 800d502:	9801      	ldr	r0, [sp, #4]
 800d504:	3101      	adds	r1, #1
 800d506:	f000 f9c3 	bl	800d890 <_Balloc>
 800d50a:	4681      	mov	r9, r0
 800d50c:	b918      	cbnz	r0, 800d516 <__gethex+0x3ba>
 800d50e:	4b1a      	ldr	r3, [pc, #104]	@ (800d578 <__gethex+0x41c>)
 800d510:	4602      	mov	r2, r0
 800d512:	2184      	movs	r1, #132	@ 0x84
 800d514:	e6c5      	b.n	800d2a2 <__gethex+0x146>
 800d516:	6922      	ldr	r2, [r4, #16]
 800d518:	3202      	adds	r2, #2
 800d51a:	f104 010c 	add.w	r1, r4, #12
 800d51e:	0092      	lsls	r2, r2, #2
 800d520:	300c      	adds	r0, #12
 800d522:	f7fe ff06 	bl	800c332 <memcpy>
 800d526:	4621      	mov	r1, r4
 800d528:	9801      	ldr	r0, [sp, #4]
 800d52a:	f000 f9f1 	bl	800d910 <_Bfree>
 800d52e:	464c      	mov	r4, r9
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d538:	6122      	str	r2, [r4, #16]
 800d53a:	2201      	movs	r2, #1
 800d53c:	615a      	str	r2, [r3, #20]
 800d53e:	e7be      	b.n	800d4be <__gethex+0x362>
 800d540:	6922      	ldr	r2, [r4, #16]
 800d542:	455a      	cmp	r2, fp
 800d544:	dd0b      	ble.n	800d55e <__gethex+0x402>
 800d546:	2101      	movs	r1, #1
 800d548:	4620      	mov	r0, r4
 800d54a:	f7ff fd9f 	bl	800d08c <rshift>
 800d54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d552:	3701      	adds	r7, #1
 800d554:	42bb      	cmp	r3, r7
 800d556:	f6ff aee0 	blt.w	800d31a <__gethex+0x1be>
 800d55a:	2501      	movs	r5, #1
 800d55c:	e7c2      	b.n	800d4e4 <__gethex+0x388>
 800d55e:	f016 061f 	ands.w	r6, r6, #31
 800d562:	d0fa      	beq.n	800d55a <__gethex+0x3fe>
 800d564:	4453      	add	r3, sl
 800d566:	f1c6 0620 	rsb	r6, r6, #32
 800d56a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d56e:	f000 fa81 	bl	800da74 <__hi0bits>
 800d572:	42b0      	cmp	r0, r6
 800d574:	dbe7      	blt.n	800d546 <__gethex+0x3ea>
 800d576:	e7f0      	b.n	800d55a <__gethex+0x3fe>
 800d578:	080100f9 	.word	0x080100f9

0800d57c <L_shift>:
 800d57c:	f1c2 0208 	rsb	r2, r2, #8
 800d580:	0092      	lsls	r2, r2, #2
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	f1c2 0620 	rsb	r6, r2, #32
 800d588:	6843      	ldr	r3, [r0, #4]
 800d58a:	6804      	ldr	r4, [r0, #0]
 800d58c:	fa03 f506 	lsl.w	r5, r3, r6
 800d590:	432c      	orrs	r4, r5
 800d592:	40d3      	lsrs	r3, r2
 800d594:	6004      	str	r4, [r0, #0]
 800d596:	f840 3f04 	str.w	r3, [r0, #4]!
 800d59a:	4288      	cmp	r0, r1
 800d59c:	d3f4      	bcc.n	800d588 <L_shift+0xc>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}

0800d5a0 <__match>:
 800d5a0:	b530      	push	{r4, r5, lr}
 800d5a2:	6803      	ldr	r3, [r0, #0]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5aa:	b914      	cbnz	r4, 800d5b2 <__match+0x12>
 800d5ac:	6003      	str	r3, [r0, #0]
 800d5ae:	2001      	movs	r0, #1
 800d5b0:	bd30      	pop	{r4, r5, pc}
 800d5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d5ba:	2d19      	cmp	r5, #25
 800d5bc:	bf98      	it	ls
 800d5be:	3220      	addls	r2, #32
 800d5c0:	42a2      	cmp	r2, r4
 800d5c2:	d0f0      	beq.n	800d5a6 <__match+0x6>
 800d5c4:	2000      	movs	r0, #0
 800d5c6:	e7f3      	b.n	800d5b0 <__match+0x10>

0800d5c8 <__hexnan>:
 800d5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	680b      	ldr	r3, [r1, #0]
 800d5ce:	6801      	ldr	r1, [r0, #0]
 800d5d0:	115e      	asrs	r6, r3, #5
 800d5d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d5d6:	f013 031f 	ands.w	r3, r3, #31
 800d5da:	b087      	sub	sp, #28
 800d5dc:	bf18      	it	ne
 800d5de:	3604      	addne	r6, #4
 800d5e0:	2500      	movs	r5, #0
 800d5e2:	1f37      	subs	r7, r6, #4
 800d5e4:	4682      	mov	sl, r0
 800d5e6:	4690      	mov	r8, r2
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800d5ee:	46b9      	mov	r9, r7
 800d5f0:	463c      	mov	r4, r7
 800d5f2:	9502      	str	r5, [sp, #8]
 800d5f4:	46ab      	mov	fp, r5
 800d5f6:	784a      	ldrb	r2, [r1, #1]
 800d5f8:	1c4b      	adds	r3, r1, #1
 800d5fa:	9303      	str	r3, [sp, #12]
 800d5fc:	b342      	cbz	r2, 800d650 <__hexnan+0x88>
 800d5fe:	4610      	mov	r0, r2
 800d600:	9105      	str	r1, [sp, #20]
 800d602:	9204      	str	r2, [sp, #16]
 800d604:	f7ff fd94 	bl	800d130 <__hexdig_fun>
 800d608:	2800      	cmp	r0, #0
 800d60a:	d151      	bne.n	800d6b0 <__hexnan+0xe8>
 800d60c:	9a04      	ldr	r2, [sp, #16]
 800d60e:	9905      	ldr	r1, [sp, #20]
 800d610:	2a20      	cmp	r2, #32
 800d612:	d818      	bhi.n	800d646 <__hexnan+0x7e>
 800d614:	9b02      	ldr	r3, [sp, #8]
 800d616:	459b      	cmp	fp, r3
 800d618:	dd13      	ble.n	800d642 <__hexnan+0x7a>
 800d61a:	454c      	cmp	r4, r9
 800d61c:	d206      	bcs.n	800d62c <__hexnan+0x64>
 800d61e:	2d07      	cmp	r5, #7
 800d620:	dc04      	bgt.n	800d62c <__hexnan+0x64>
 800d622:	462a      	mov	r2, r5
 800d624:	4649      	mov	r1, r9
 800d626:	4620      	mov	r0, r4
 800d628:	f7ff ffa8 	bl	800d57c <L_shift>
 800d62c:	4544      	cmp	r4, r8
 800d62e:	d952      	bls.n	800d6d6 <__hexnan+0x10e>
 800d630:	2300      	movs	r3, #0
 800d632:	f1a4 0904 	sub.w	r9, r4, #4
 800d636:	f844 3c04 	str.w	r3, [r4, #-4]
 800d63a:	f8cd b008 	str.w	fp, [sp, #8]
 800d63e:	464c      	mov	r4, r9
 800d640:	461d      	mov	r5, r3
 800d642:	9903      	ldr	r1, [sp, #12]
 800d644:	e7d7      	b.n	800d5f6 <__hexnan+0x2e>
 800d646:	2a29      	cmp	r2, #41	@ 0x29
 800d648:	d157      	bne.n	800d6fa <__hexnan+0x132>
 800d64a:	3102      	adds	r1, #2
 800d64c:	f8ca 1000 	str.w	r1, [sl]
 800d650:	f1bb 0f00 	cmp.w	fp, #0
 800d654:	d051      	beq.n	800d6fa <__hexnan+0x132>
 800d656:	454c      	cmp	r4, r9
 800d658:	d206      	bcs.n	800d668 <__hexnan+0xa0>
 800d65a:	2d07      	cmp	r5, #7
 800d65c:	dc04      	bgt.n	800d668 <__hexnan+0xa0>
 800d65e:	462a      	mov	r2, r5
 800d660:	4649      	mov	r1, r9
 800d662:	4620      	mov	r0, r4
 800d664:	f7ff ff8a 	bl	800d57c <L_shift>
 800d668:	4544      	cmp	r4, r8
 800d66a:	d936      	bls.n	800d6da <__hexnan+0x112>
 800d66c:	f1a8 0204 	sub.w	r2, r8, #4
 800d670:	4623      	mov	r3, r4
 800d672:	f853 1b04 	ldr.w	r1, [r3], #4
 800d676:	f842 1f04 	str.w	r1, [r2, #4]!
 800d67a:	429f      	cmp	r7, r3
 800d67c:	d2f9      	bcs.n	800d672 <__hexnan+0xaa>
 800d67e:	1b3b      	subs	r3, r7, r4
 800d680:	f023 0303 	bic.w	r3, r3, #3
 800d684:	3304      	adds	r3, #4
 800d686:	3401      	adds	r4, #1
 800d688:	3e03      	subs	r6, #3
 800d68a:	42b4      	cmp	r4, r6
 800d68c:	bf88      	it	hi
 800d68e:	2304      	movhi	r3, #4
 800d690:	4443      	add	r3, r8
 800d692:	2200      	movs	r2, #0
 800d694:	f843 2b04 	str.w	r2, [r3], #4
 800d698:	429f      	cmp	r7, r3
 800d69a:	d2fb      	bcs.n	800d694 <__hexnan+0xcc>
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	b91b      	cbnz	r3, 800d6a8 <__hexnan+0xe0>
 800d6a0:	4547      	cmp	r7, r8
 800d6a2:	d128      	bne.n	800d6f6 <__hexnan+0x12e>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	603b      	str	r3, [r7, #0]
 800d6a8:	2005      	movs	r0, #5
 800d6aa:	b007      	add	sp, #28
 800d6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b0:	3501      	adds	r5, #1
 800d6b2:	2d08      	cmp	r5, #8
 800d6b4:	f10b 0b01 	add.w	fp, fp, #1
 800d6b8:	dd06      	ble.n	800d6c8 <__hexnan+0x100>
 800d6ba:	4544      	cmp	r4, r8
 800d6bc:	d9c1      	bls.n	800d642 <__hexnan+0x7a>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6c4:	2501      	movs	r5, #1
 800d6c6:	3c04      	subs	r4, #4
 800d6c8:	6822      	ldr	r2, [r4, #0]
 800d6ca:	f000 000f 	and.w	r0, r0, #15
 800d6ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d6d2:	6020      	str	r0, [r4, #0]
 800d6d4:	e7b5      	b.n	800d642 <__hexnan+0x7a>
 800d6d6:	2508      	movs	r5, #8
 800d6d8:	e7b3      	b.n	800d642 <__hexnan+0x7a>
 800d6da:	9b01      	ldr	r3, [sp, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d0dd      	beq.n	800d69c <__hexnan+0xd4>
 800d6e0:	f1c3 0320 	rsb	r3, r3, #32
 800d6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e8:	40da      	lsrs	r2, r3
 800d6ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d6ee:	4013      	ands	r3, r2
 800d6f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d6f4:	e7d2      	b.n	800d69c <__hexnan+0xd4>
 800d6f6:	3f04      	subs	r7, #4
 800d6f8:	e7d0      	b.n	800d69c <__hexnan+0xd4>
 800d6fa:	2004      	movs	r0, #4
 800d6fc:	e7d5      	b.n	800d6aa <__hexnan+0xe2>
	...

0800d700 <malloc>:
 800d700:	4b02      	ldr	r3, [pc, #8]	@ (800d70c <malloc+0xc>)
 800d702:	4601      	mov	r1, r0
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	f000 b825 	b.w	800d754 <_malloc_r>
 800d70a:	bf00      	nop
 800d70c:	20000250 	.word	0x20000250

0800d710 <sbrk_aligned>:
 800d710:	b570      	push	{r4, r5, r6, lr}
 800d712:	4e0f      	ldr	r6, [pc, #60]	@ (800d750 <sbrk_aligned+0x40>)
 800d714:	460c      	mov	r4, r1
 800d716:	6831      	ldr	r1, [r6, #0]
 800d718:	4605      	mov	r5, r0
 800d71a:	b911      	cbnz	r1, 800d722 <sbrk_aligned+0x12>
 800d71c:	f000 ff94 	bl	800e648 <_sbrk_r>
 800d720:	6030      	str	r0, [r6, #0]
 800d722:	4621      	mov	r1, r4
 800d724:	4628      	mov	r0, r5
 800d726:	f000 ff8f 	bl	800e648 <_sbrk_r>
 800d72a:	1c43      	adds	r3, r0, #1
 800d72c:	d103      	bne.n	800d736 <sbrk_aligned+0x26>
 800d72e:	f04f 34ff 	mov.w	r4, #4294967295
 800d732:	4620      	mov	r0, r4
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	1cc4      	adds	r4, r0, #3
 800d738:	f024 0403 	bic.w	r4, r4, #3
 800d73c:	42a0      	cmp	r0, r4
 800d73e:	d0f8      	beq.n	800d732 <sbrk_aligned+0x22>
 800d740:	1a21      	subs	r1, r4, r0
 800d742:	4628      	mov	r0, r5
 800d744:	f000 ff80 	bl	800e648 <_sbrk_r>
 800d748:	3001      	adds	r0, #1
 800d74a:	d1f2      	bne.n	800d732 <sbrk_aligned+0x22>
 800d74c:	e7ef      	b.n	800d72e <sbrk_aligned+0x1e>
 800d74e:	bf00      	nop
 800d750:	20000c98 	.word	0x20000c98

0800d754 <_malloc_r>:
 800d754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d758:	1ccd      	adds	r5, r1, #3
 800d75a:	f025 0503 	bic.w	r5, r5, #3
 800d75e:	3508      	adds	r5, #8
 800d760:	2d0c      	cmp	r5, #12
 800d762:	bf38      	it	cc
 800d764:	250c      	movcc	r5, #12
 800d766:	2d00      	cmp	r5, #0
 800d768:	4606      	mov	r6, r0
 800d76a:	db01      	blt.n	800d770 <_malloc_r+0x1c>
 800d76c:	42a9      	cmp	r1, r5
 800d76e:	d904      	bls.n	800d77a <_malloc_r+0x26>
 800d770:	230c      	movs	r3, #12
 800d772:	6033      	str	r3, [r6, #0]
 800d774:	2000      	movs	r0, #0
 800d776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d77a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d850 <_malloc_r+0xfc>
 800d77e:	f000 f87b 	bl	800d878 <__malloc_lock>
 800d782:	f8d8 3000 	ldr.w	r3, [r8]
 800d786:	461c      	mov	r4, r3
 800d788:	bb44      	cbnz	r4, 800d7dc <_malloc_r+0x88>
 800d78a:	4629      	mov	r1, r5
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff ffbf 	bl	800d710 <sbrk_aligned>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	4604      	mov	r4, r0
 800d796:	d158      	bne.n	800d84a <_malloc_r+0xf6>
 800d798:	f8d8 4000 	ldr.w	r4, [r8]
 800d79c:	4627      	mov	r7, r4
 800d79e:	2f00      	cmp	r7, #0
 800d7a0:	d143      	bne.n	800d82a <_malloc_r+0xd6>
 800d7a2:	2c00      	cmp	r4, #0
 800d7a4:	d04b      	beq.n	800d83e <_malloc_r+0xea>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	4639      	mov	r1, r7
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	eb04 0903 	add.w	r9, r4, r3
 800d7b0:	f000 ff4a 	bl	800e648 <_sbrk_r>
 800d7b4:	4581      	cmp	r9, r0
 800d7b6:	d142      	bne.n	800d83e <_malloc_r+0xea>
 800d7b8:	6821      	ldr	r1, [r4, #0]
 800d7ba:	1a6d      	subs	r5, r5, r1
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ffa6 	bl	800d710 <sbrk_aligned>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d03a      	beq.n	800d83e <_malloc_r+0xea>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	442b      	add	r3, r5
 800d7cc:	6023      	str	r3, [r4, #0]
 800d7ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d7d2:	685a      	ldr	r2, [r3, #4]
 800d7d4:	bb62      	cbnz	r2, 800d830 <_malloc_r+0xdc>
 800d7d6:	f8c8 7000 	str.w	r7, [r8]
 800d7da:	e00f      	b.n	800d7fc <_malloc_r+0xa8>
 800d7dc:	6822      	ldr	r2, [r4, #0]
 800d7de:	1b52      	subs	r2, r2, r5
 800d7e0:	d420      	bmi.n	800d824 <_malloc_r+0xd0>
 800d7e2:	2a0b      	cmp	r2, #11
 800d7e4:	d917      	bls.n	800d816 <_malloc_r+0xc2>
 800d7e6:	1961      	adds	r1, r4, r5
 800d7e8:	42a3      	cmp	r3, r4
 800d7ea:	6025      	str	r5, [r4, #0]
 800d7ec:	bf18      	it	ne
 800d7ee:	6059      	strne	r1, [r3, #4]
 800d7f0:	6863      	ldr	r3, [r4, #4]
 800d7f2:	bf08      	it	eq
 800d7f4:	f8c8 1000 	streq.w	r1, [r8]
 800d7f8:	5162      	str	r2, [r4, r5]
 800d7fa:	604b      	str	r3, [r1, #4]
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f000 f841 	bl	800d884 <__malloc_unlock>
 800d802:	f104 000b 	add.w	r0, r4, #11
 800d806:	1d23      	adds	r3, r4, #4
 800d808:	f020 0007 	bic.w	r0, r0, #7
 800d80c:	1ac2      	subs	r2, r0, r3
 800d80e:	bf1c      	itt	ne
 800d810:	1a1b      	subne	r3, r3, r0
 800d812:	50a3      	strne	r3, [r4, r2]
 800d814:	e7af      	b.n	800d776 <_malloc_r+0x22>
 800d816:	6862      	ldr	r2, [r4, #4]
 800d818:	42a3      	cmp	r3, r4
 800d81a:	bf0c      	ite	eq
 800d81c:	f8c8 2000 	streq.w	r2, [r8]
 800d820:	605a      	strne	r2, [r3, #4]
 800d822:	e7eb      	b.n	800d7fc <_malloc_r+0xa8>
 800d824:	4623      	mov	r3, r4
 800d826:	6864      	ldr	r4, [r4, #4]
 800d828:	e7ae      	b.n	800d788 <_malloc_r+0x34>
 800d82a:	463c      	mov	r4, r7
 800d82c:	687f      	ldr	r7, [r7, #4]
 800d82e:	e7b6      	b.n	800d79e <_malloc_r+0x4a>
 800d830:	461a      	mov	r2, r3
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	42a3      	cmp	r3, r4
 800d836:	d1fb      	bne.n	800d830 <_malloc_r+0xdc>
 800d838:	2300      	movs	r3, #0
 800d83a:	6053      	str	r3, [r2, #4]
 800d83c:	e7de      	b.n	800d7fc <_malloc_r+0xa8>
 800d83e:	230c      	movs	r3, #12
 800d840:	6033      	str	r3, [r6, #0]
 800d842:	4630      	mov	r0, r6
 800d844:	f000 f81e 	bl	800d884 <__malloc_unlock>
 800d848:	e794      	b.n	800d774 <_malloc_r+0x20>
 800d84a:	6005      	str	r5, [r0, #0]
 800d84c:	e7d6      	b.n	800d7fc <_malloc_r+0xa8>
 800d84e:	bf00      	nop
 800d850:	20000c9c 	.word	0x20000c9c

0800d854 <__ascii_mbtowc>:
 800d854:	b082      	sub	sp, #8
 800d856:	b901      	cbnz	r1, 800d85a <__ascii_mbtowc+0x6>
 800d858:	a901      	add	r1, sp, #4
 800d85a:	b142      	cbz	r2, 800d86e <__ascii_mbtowc+0x1a>
 800d85c:	b14b      	cbz	r3, 800d872 <__ascii_mbtowc+0x1e>
 800d85e:	7813      	ldrb	r3, [r2, #0]
 800d860:	600b      	str	r3, [r1, #0]
 800d862:	7812      	ldrb	r2, [r2, #0]
 800d864:	1e10      	subs	r0, r2, #0
 800d866:	bf18      	it	ne
 800d868:	2001      	movne	r0, #1
 800d86a:	b002      	add	sp, #8
 800d86c:	4770      	bx	lr
 800d86e:	4610      	mov	r0, r2
 800d870:	e7fb      	b.n	800d86a <__ascii_mbtowc+0x16>
 800d872:	f06f 0001 	mvn.w	r0, #1
 800d876:	e7f8      	b.n	800d86a <__ascii_mbtowc+0x16>

0800d878 <__malloc_lock>:
 800d878:	4801      	ldr	r0, [pc, #4]	@ (800d880 <__malloc_lock+0x8>)
 800d87a:	f7fe bd50 	b.w	800c31e <__retarget_lock_acquire_recursive>
 800d87e:	bf00      	nop
 800d880:	20000c94 	.word	0x20000c94

0800d884 <__malloc_unlock>:
 800d884:	4801      	ldr	r0, [pc, #4]	@ (800d88c <__malloc_unlock+0x8>)
 800d886:	f7fe bd4b 	b.w	800c320 <__retarget_lock_release_recursive>
 800d88a:	bf00      	nop
 800d88c:	20000c94 	.word	0x20000c94

0800d890 <_Balloc>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	69c6      	ldr	r6, [r0, #28]
 800d894:	4604      	mov	r4, r0
 800d896:	460d      	mov	r5, r1
 800d898:	b976      	cbnz	r6, 800d8b8 <_Balloc+0x28>
 800d89a:	2010      	movs	r0, #16
 800d89c:	f7ff ff30 	bl	800d700 <malloc>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	61e0      	str	r0, [r4, #28]
 800d8a4:	b920      	cbnz	r0, 800d8b0 <_Balloc+0x20>
 800d8a6:	4b18      	ldr	r3, [pc, #96]	@ (800d908 <_Balloc+0x78>)
 800d8a8:	4818      	ldr	r0, [pc, #96]	@ (800d90c <_Balloc+0x7c>)
 800d8aa:	216b      	movs	r1, #107	@ 0x6b
 800d8ac:	f000 fedc 	bl	800e668 <__assert_func>
 800d8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8b4:	6006      	str	r6, [r0, #0]
 800d8b6:	60c6      	str	r6, [r0, #12]
 800d8b8:	69e6      	ldr	r6, [r4, #28]
 800d8ba:	68f3      	ldr	r3, [r6, #12]
 800d8bc:	b183      	cbz	r3, 800d8e0 <_Balloc+0x50>
 800d8be:	69e3      	ldr	r3, [r4, #28]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8c6:	b9b8      	cbnz	r0, 800d8f8 <_Balloc+0x68>
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800d8ce:	1d72      	adds	r2, r6, #5
 800d8d0:	0092      	lsls	r2, r2, #2
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 fee6 	bl	800e6a4 <_calloc_r>
 800d8d8:	b160      	cbz	r0, 800d8f4 <_Balloc+0x64>
 800d8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d8de:	e00e      	b.n	800d8fe <_Balloc+0x6e>
 800d8e0:	2221      	movs	r2, #33	@ 0x21
 800d8e2:	2104      	movs	r1, #4
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f000 fedd 	bl	800e6a4 <_calloc_r>
 800d8ea:	69e3      	ldr	r3, [r4, #28]
 800d8ec:	60f0      	str	r0, [r6, #12]
 800d8ee:	68db      	ldr	r3, [r3, #12]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e4      	bne.n	800d8be <_Balloc+0x2e>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	6802      	ldr	r2, [r0, #0]
 800d8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8fe:	2300      	movs	r3, #0
 800d900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d904:	e7f7      	b.n	800d8f6 <_Balloc+0x66>
 800d906:	bf00      	nop
 800d908:	0801008a 	.word	0x0801008a
 800d90c:	0801016a 	.word	0x0801016a

0800d910 <_Bfree>:
 800d910:	b570      	push	{r4, r5, r6, lr}
 800d912:	69c6      	ldr	r6, [r0, #28]
 800d914:	4605      	mov	r5, r0
 800d916:	460c      	mov	r4, r1
 800d918:	b976      	cbnz	r6, 800d938 <_Bfree+0x28>
 800d91a:	2010      	movs	r0, #16
 800d91c:	f7ff fef0 	bl	800d700 <malloc>
 800d920:	4602      	mov	r2, r0
 800d922:	61e8      	str	r0, [r5, #28]
 800d924:	b920      	cbnz	r0, 800d930 <_Bfree+0x20>
 800d926:	4b09      	ldr	r3, [pc, #36]	@ (800d94c <_Bfree+0x3c>)
 800d928:	4809      	ldr	r0, [pc, #36]	@ (800d950 <_Bfree+0x40>)
 800d92a:	218f      	movs	r1, #143	@ 0x8f
 800d92c:	f000 fe9c 	bl	800e668 <__assert_func>
 800d930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d934:	6006      	str	r6, [r0, #0]
 800d936:	60c6      	str	r6, [r0, #12]
 800d938:	b13c      	cbz	r4, 800d94a <_Bfree+0x3a>
 800d93a:	69eb      	ldr	r3, [r5, #28]
 800d93c:	6862      	ldr	r2, [r4, #4]
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d944:	6021      	str	r1, [r4, #0]
 800d946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	0801008a 	.word	0x0801008a
 800d950:	0801016a 	.word	0x0801016a

0800d954 <__multadd>:
 800d954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d958:	690d      	ldr	r5, [r1, #16]
 800d95a:	4607      	mov	r7, r0
 800d95c:	460c      	mov	r4, r1
 800d95e:	461e      	mov	r6, r3
 800d960:	f101 0c14 	add.w	ip, r1, #20
 800d964:	2000      	movs	r0, #0
 800d966:	f8dc 3000 	ldr.w	r3, [ip]
 800d96a:	b299      	uxth	r1, r3
 800d96c:	fb02 6101 	mla	r1, r2, r1, r6
 800d970:	0c1e      	lsrs	r6, r3, #16
 800d972:	0c0b      	lsrs	r3, r1, #16
 800d974:	fb02 3306 	mla	r3, r2, r6, r3
 800d978:	b289      	uxth	r1, r1
 800d97a:	3001      	adds	r0, #1
 800d97c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d980:	4285      	cmp	r5, r0
 800d982:	f84c 1b04 	str.w	r1, [ip], #4
 800d986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d98a:	dcec      	bgt.n	800d966 <__multadd+0x12>
 800d98c:	b30e      	cbz	r6, 800d9d2 <__multadd+0x7e>
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	42ab      	cmp	r3, r5
 800d992:	dc19      	bgt.n	800d9c8 <__multadd+0x74>
 800d994:	6861      	ldr	r1, [r4, #4]
 800d996:	4638      	mov	r0, r7
 800d998:	3101      	adds	r1, #1
 800d99a:	f7ff ff79 	bl	800d890 <_Balloc>
 800d99e:	4680      	mov	r8, r0
 800d9a0:	b928      	cbnz	r0, 800d9ae <__multadd+0x5a>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d8 <__multadd+0x84>)
 800d9a6:	480d      	ldr	r0, [pc, #52]	@ (800d9dc <__multadd+0x88>)
 800d9a8:	21ba      	movs	r1, #186	@ 0xba
 800d9aa:	f000 fe5d 	bl	800e668 <__assert_func>
 800d9ae:	6922      	ldr	r2, [r4, #16]
 800d9b0:	3202      	adds	r2, #2
 800d9b2:	f104 010c 	add.w	r1, r4, #12
 800d9b6:	0092      	lsls	r2, r2, #2
 800d9b8:	300c      	adds	r0, #12
 800d9ba:	f7fe fcba 	bl	800c332 <memcpy>
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4638      	mov	r0, r7
 800d9c2:	f7ff ffa5 	bl	800d910 <_Bfree>
 800d9c6:	4644      	mov	r4, r8
 800d9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d9cc:	3501      	adds	r5, #1
 800d9ce:	615e      	str	r6, [r3, #20]
 800d9d0:	6125      	str	r5, [r4, #16]
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d8:	080100f9 	.word	0x080100f9
 800d9dc:	0801016a 	.word	0x0801016a

0800d9e0 <__s2b>:
 800d9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	4615      	mov	r5, r2
 800d9e8:	461f      	mov	r7, r3
 800d9ea:	2209      	movs	r2, #9
 800d9ec:	3308      	adds	r3, #8
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	db09      	blt.n	800da10 <__s2b+0x30>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff ff47 	bl	800d890 <_Balloc>
 800da02:	b940      	cbnz	r0, 800da16 <__s2b+0x36>
 800da04:	4602      	mov	r2, r0
 800da06:	4b19      	ldr	r3, [pc, #100]	@ (800da6c <__s2b+0x8c>)
 800da08:	4819      	ldr	r0, [pc, #100]	@ (800da70 <__s2b+0x90>)
 800da0a:	21d3      	movs	r1, #211	@ 0xd3
 800da0c:	f000 fe2c 	bl	800e668 <__assert_func>
 800da10:	0052      	lsls	r2, r2, #1
 800da12:	3101      	adds	r1, #1
 800da14:	e7f0      	b.n	800d9f8 <__s2b+0x18>
 800da16:	9b08      	ldr	r3, [sp, #32]
 800da18:	6143      	str	r3, [r0, #20]
 800da1a:	2d09      	cmp	r5, #9
 800da1c:	f04f 0301 	mov.w	r3, #1
 800da20:	6103      	str	r3, [r0, #16]
 800da22:	dd16      	ble.n	800da52 <__s2b+0x72>
 800da24:	f104 0909 	add.w	r9, r4, #9
 800da28:	46c8      	mov	r8, r9
 800da2a:	442c      	add	r4, r5
 800da2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800da30:	4601      	mov	r1, r0
 800da32:	3b30      	subs	r3, #48	@ 0x30
 800da34:	220a      	movs	r2, #10
 800da36:	4630      	mov	r0, r6
 800da38:	f7ff ff8c 	bl	800d954 <__multadd>
 800da3c:	45a0      	cmp	r8, r4
 800da3e:	d1f5      	bne.n	800da2c <__s2b+0x4c>
 800da40:	f1a5 0408 	sub.w	r4, r5, #8
 800da44:	444c      	add	r4, r9
 800da46:	1b2d      	subs	r5, r5, r4
 800da48:	1963      	adds	r3, r4, r5
 800da4a:	42bb      	cmp	r3, r7
 800da4c:	db04      	blt.n	800da58 <__s2b+0x78>
 800da4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da52:	340a      	adds	r4, #10
 800da54:	2509      	movs	r5, #9
 800da56:	e7f6      	b.n	800da46 <__s2b+0x66>
 800da58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800da5c:	4601      	mov	r1, r0
 800da5e:	3b30      	subs	r3, #48	@ 0x30
 800da60:	220a      	movs	r2, #10
 800da62:	4630      	mov	r0, r6
 800da64:	f7ff ff76 	bl	800d954 <__multadd>
 800da68:	e7ee      	b.n	800da48 <__s2b+0x68>
 800da6a:	bf00      	nop
 800da6c:	080100f9 	.word	0x080100f9
 800da70:	0801016a 	.word	0x0801016a

0800da74 <__hi0bits>:
 800da74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800da78:	4603      	mov	r3, r0
 800da7a:	bf36      	itet	cc
 800da7c:	0403      	lslcc	r3, r0, #16
 800da7e:	2000      	movcs	r0, #0
 800da80:	2010      	movcc	r0, #16
 800da82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da86:	bf3c      	itt	cc
 800da88:	021b      	lslcc	r3, r3, #8
 800da8a:	3008      	addcc	r0, #8
 800da8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da90:	bf3c      	itt	cc
 800da92:	011b      	lslcc	r3, r3, #4
 800da94:	3004      	addcc	r0, #4
 800da96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da9a:	bf3c      	itt	cc
 800da9c:	009b      	lslcc	r3, r3, #2
 800da9e:	3002      	addcc	r0, #2
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	db05      	blt.n	800dab0 <__hi0bits+0x3c>
 800daa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800daa8:	f100 0001 	add.w	r0, r0, #1
 800daac:	bf08      	it	eq
 800daae:	2020      	moveq	r0, #32
 800dab0:	4770      	bx	lr

0800dab2 <__lo0bits>:
 800dab2:	6803      	ldr	r3, [r0, #0]
 800dab4:	4602      	mov	r2, r0
 800dab6:	f013 0007 	ands.w	r0, r3, #7
 800daba:	d00b      	beq.n	800dad4 <__lo0bits+0x22>
 800dabc:	07d9      	lsls	r1, r3, #31
 800dabe:	d421      	bmi.n	800db04 <__lo0bits+0x52>
 800dac0:	0798      	lsls	r0, r3, #30
 800dac2:	bf49      	itett	mi
 800dac4:	085b      	lsrmi	r3, r3, #1
 800dac6:	089b      	lsrpl	r3, r3, #2
 800dac8:	2001      	movmi	r0, #1
 800daca:	6013      	strmi	r3, [r2, #0]
 800dacc:	bf5c      	itt	pl
 800dace:	6013      	strpl	r3, [r2, #0]
 800dad0:	2002      	movpl	r0, #2
 800dad2:	4770      	bx	lr
 800dad4:	b299      	uxth	r1, r3
 800dad6:	b909      	cbnz	r1, 800dadc <__lo0bits+0x2a>
 800dad8:	0c1b      	lsrs	r3, r3, #16
 800dada:	2010      	movs	r0, #16
 800dadc:	b2d9      	uxtb	r1, r3
 800dade:	b909      	cbnz	r1, 800dae4 <__lo0bits+0x32>
 800dae0:	3008      	adds	r0, #8
 800dae2:	0a1b      	lsrs	r3, r3, #8
 800dae4:	0719      	lsls	r1, r3, #28
 800dae6:	bf04      	itt	eq
 800dae8:	091b      	lsreq	r3, r3, #4
 800daea:	3004      	addeq	r0, #4
 800daec:	0799      	lsls	r1, r3, #30
 800daee:	bf04      	itt	eq
 800daf0:	089b      	lsreq	r3, r3, #2
 800daf2:	3002      	addeq	r0, #2
 800daf4:	07d9      	lsls	r1, r3, #31
 800daf6:	d403      	bmi.n	800db00 <__lo0bits+0x4e>
 800daf8:	085b      	lsrs	r3, r3, #1
 800dafa:	f100 0001 	add.w	r0, r0, #1
 800dafe:	d003      	beq.n	800db08 <__lo0bits+0x56>
 800db00:	6013      	str	r3, [r2, #0]
 800db02:	4770      	bx	lr
 800db04:	2000      	movs	r0, #0
 800db06:	4770      	bx	lr
 800db08:	2020      	movs	r0, #32
 800db0a:	4770      	bx	lr

0800db0c <__i2b>:
 800db0c:	b510      	push	{r4, lr}
 800db0e:	460c      	mov	r4, r1
 800db10:	2101      	movs	r1, #1
 800db12:	f7ff febd 	bl	800d890 <_Balloc>
 800db16:	4602      	mov	r2, r0
 800db18:	b928      	cbnz	r0, 800db26 <__i2b+0x1a>
 800db1a:	4b05      	ldr	r3, [pc, #20]	@ (800db30 <__i2b+0x24>)
 800db1c:	4805      	ldr	r0, [pc, #20]	@ (800db34 <__i2b+0x28>)
 800db1e:	f240 1145 	movw	r1, #325	@ 0x145
 800db22:	f000 fda1 	bl	800e668 <__assert_func>
 800db26:	2301      	movs	r3, #1
 800db28:	6144      	str	r4, [r0, #20]
 800db2a:	6103      	str	r3, [r0, #16]
 800db2c:	bd10      	pop	{r4, pc}
 800db2e:	bf00      	nop
 800db30:	080100f9 	.word	0x080100f9
 800db34:	0801016a 	.word	0x0801016a

0800db38 <__multiply>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	4614      	mov	r4, r2
 800db3e:	690a      	ldr	r2, [r1, #16]
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	429a      	cmp	r2, r3
 800db44:	bfa8      	it	ge
 800db46:	4623      	movge	r3, r4
 800db48:	460f      	mov	r7, r1
 800db4a:	bfa4      	itt	ge
 800db4c:	460c      	movge	r4, r1
 800db4e:	461f      	movge	r7, r3
 800db50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800db54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	6861      	ldr	r1, [r4, #4]
 800db5c:	eb0a 0609 	add.w	r6, sl, r9
 800db60:	42b3      	cmp	r3, r6
 800db62:	b085      	sub	sp, #20
 800db64:	bfb8      	it	lt
 800db66:	3101      	addlt	r1, #1
 800db68:	f7ff fe92 	bl	800d890 <_Balloc>
 800db6c:	b930      	cbnz	r0, 800db7c <__multiply+0x44>
 800db6e:	4602      	mov	r2, r0
 800db70:	4b44      	ldr	r3, [pc, #272]	@ (800dc84 <__multiply+0x14c>)
 800db72:	4845      	ldr	r0, [pc, #276]	@ (800dc88 <__multiply+0x150>)
 800db74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800db78:	f000 fd76 	bl	800e668 <__assert_func>
 800db7c:	f100 0514 	add.w	r5, r0, #20
 800db80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db84:	462b      	mov	r3, r5
 800db86:	2200      	movs	r2, #0
 800db88:	4543      	cmp	r3, r8
 800db8a:	d321      	bcc.n	800dbd0 <__multiply+0x98>
 800db8c:	f107 0114 	add.w	r1, r7, #20
 800db90:	f104 0214 	add.w	r2, r4, #20
 800db94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800db98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800db9c:	9302      	str	r3, [sp, #8]
 800db9e:	1b13      	subs	r3, r2, r4
 800dba0:	3b15      	subs	r3, #21
 800dba2:	f023 0303 	bic.w	r3, r3, #3
 800dba6:	3304      	adds	r3, #4
 800dba8:	f104 0715 	add.w	r7, r4, #21
 800dbac:	42ba      	cmp	r2, r7
 800dbae:	bf38      	it	cc
 800dbb0:	2304      	movcc	r3, #4
 800dbb2:	9301      	str	r3, [sp, #4]
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	9103      	str	r1, [sp, #12]
 800dbb8:	428b      	cmp	r3, r1
 800dbba:	d80c      	bhi.n	800dbd6 <__multiply+0x9e>
 800dbbc:	2e00      	cmp	r6, #0
 800dbbe:	dd03      	ble.n	800dbc8 <__multiply+0x90>
 800dbc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d05b      	beq.n	800dc80 <__multiply+0x148>
 800dbc8:	6106      	str	r6, [r0, #16]
 800dbca:	b005      	add	sp, #20
 800dbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd0:	f843 2b04 	str.w	r2, [r3], #4
 800dbd4:	e7d8      	b.n	800db88 <__multiply+0x50>
 800dbd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800dbda:	f1ba 0f00 	cmp.w	sl, #0
 800dbde:	d024      	beq.n	800dc2a <__multiply+0xf2>
 800dbe0:	f104 0e14 	add.w	lr, r4, #20
 800dbe4:	46a9      	mov	r9, r5
 800dbe6:	f04f 0c00 	mov.w	ip, #0
 800dbea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbee:	f8d9 3000 	ldr.w	r3, [r9]
 800dbf2:	fa1f fb87 	uxth.w	fp, r7
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800dbfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dc00:	f8d9 7000 	ldr.w	r7, [r9]
 800dc04:	4463      	add	r3, ip
 800dc06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800dc0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc18:	4572      	cmp	r2, lr
 800dc1a:	f849 3b04 	str.w	r3, [r9], #4
 800dc1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc22:	d8e2      	bhi.n	800dbea <__multiply+0xb2>
 800dc24:	9b01      	ldr	r3, [sp, #4]
 800dc26:	f845 c003 	str.w	ip, [r5, r3]
 800dc2a:	9b03      	ldr	r3, [sp, #12]
 800dc2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dc30:	3104      	adds	r1, #4
 800dc32:	f1b9 0f00 	cmp.w	r9, #0
 800dc36:	d021      	beq.n	800dc7c <__multiply+0x144>
 800dc38:	682b      	ldr	r3, [r5, #0]
 800dc3a:	f104 0c14 	add.w	ip, r4, #20
 800dc3e:	46ae      	mov	lr, r5
 800dc40:	f04f 0a00 	mov.w	sl, #0
 800dc44:	f8bc b000 	ldrh.w	fp, [ip]
 800dc48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dc4c:	fb09 770b 	mla	r7, r9, fp, r7
 800dc50:	4457      	add	r7, sl
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc58:	f84e 3b04 	str.w	r3, [lr], #4
 800dc5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc64:	f8be 3000 	ldrh.w	r3, [lr]
 800dc68:	fb09 330a 	mla	r3, r9, sl, r3
 800dc6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dc70:	4562      	cmp	r2, ip
 800dc72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc76:	d8e5      	bhi.n	800dc44 <__multiply+0x10c>
 800dc78:	9f01      	ldr	r7, [sp, #4]
 800dc7a:	51eb      	str	r3, [r5, r7]
 800dc7c:	3504      	adds	r5, #4
 800dc7e:	e799      	b.n	800dbb4 <__multiply+0x7c>
 800dc80:	3e01      	subs	r6, #1
 800dc82:	e79b      	b.n	800dbbc <__multiply+0x84>
 800dc84:	080100f9 	.word	0x080100f9
 800dc88:	0801016a 	.word	0x0801016a

0800dc8c <__pow5mult>:
 800dc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc90:	4615      	mov	r5, r2
 800dc92:	f012 0203 	ands.w	r2, r2, #3
 800dc96:	4607      	mov	r7, r0
 800dc98:	460e      	mov	r6, r1
 800dc9a:	d007      	beq.n	800dcac <__pow5mult+0x20>
 800dc9c:	4c25      	ldr	r4, [pc, #148]	@ (800dd34 <__pow5mult+0xa8>)
 800dc9e:	3a01      	subs	r2, #1
 800dca0:	2300      	movs	r3, #0
 800dca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dca6:	f7ff fe55 	bl	800d954 <__multadd>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	10ad      	asrs	r5, r5, #2
 800dcae:	d03d      	beq.n	800dd2c <__pow5mult+0xa0>
 800dcb0:	69fc      	ldr	r4, [r7, #28]
 800dcb2:	b97c      	cbnz	r4, 800dcd4 <__pow5mult+0x48>
 800dcb4:	2010      	movs	r0, #16
 800dcb6:	f7ff fd23 	bl	800d700 <malloc>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	61f8      	str	r0, [r7, #28]
 800dcbe:	b928      	cbnz	r0, 800dccc <__pow5mult+0x40>
 800dcc0:	4b1d      	ldr	r3, [pc, #116]	@ (800dd38 <__pow5mult+0xac>)
 800dcc2:	481e      	ldr	r0, [pc, #120]	@ (800dd3c <__pow5mult+0xb0>)
 800dcc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dcc8:	f000 fcce 	bl	800e668 <__assert_func>
 800dccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcd0:	6004      	str	r4, [r0, #0]
 800dcd2:	60c4      	str	r4, [r0, #12]
 800dcd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dcdc:	b94c      	cbnz	r4, 800dcf2 <__pow5mult+0x66>
 800dcde:	f240 2171 	movw	r1, #625	@ 0x271
 800dce2:	4638      	mov	r0, r7
 800dce4:	f7ff ff12 	bl	800db0c <__i2b>
 800dce8:	2300      	movs	r3, #0
 800dcea:	f8c8 0008 	str.w	r0, [r8, #8]
 800dcee:	4604      	mov	r4, r0
 800dcf0:	6003      	str	r3, [r0, #0]
 800dcf2:	f04f 0900 	mov.w	r9, #0
 800dcf6:	07eb      	lsls	r3, r5, #31
 800dcf8:	d50a      	bpl.n	800dd10 <__pow5mult+0x84>
 800dcfa:	4631      	mov	r1, r6
 800dcfc:	4622      	mov	r2, r4
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f7ff ff1a 	bl	800db38 <__multiply>
 800dd04:	4631      	mov	r1, r6
 800dd06:	4680      	mov	r8, r0
 800dd08:	4638      	mov	r0, r7
 800dd0a:	f7ff fe01 	bl	800d910 <_Bfree>
 800dd0e:	4646      	mov	r6, r8
 800dd10:	106d      	asrs	r5, r5, #1
 800dd12:	d00b      	beq.n	800dd2c <__pow5mult+0xa0>
 800dd14:	6820      	ldr	r0, [r4, #0]
 800dd16:	b938      	cbnz	r0, 800dd28 <__pow5mult+0x9c>
 800dd18:	4622      	mov	r2, r4
 800dd1a:	4621      	mov	r1, r4
 800dd1c:	4638      	mov	r0, r7
 800dd1e:	f7ff ff0b 	bl	800db38 <__multiply>
 800dd22:	6020      	str	r0, [r4, #0]
 800dd24:	f8c0 9000 	str.w	r9, [r0]
 800dd28:	4604      	mov	r4, r0
 800dd2a:	e7e4      	b.n	800dcf6 <__pow5mult+0x6a>
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd32:	bf00      	nop
 800dd34:	080101c4 	.word	0x080101c4
 800dd38:	0801008a 	.word	0x0801008a
 800dd3c:	0801016a 	.word	0x0801016a

0800dd40 <__lshift>:
 800dd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd44:	460c      	mov	r4, r1
 800dd46:	6849      	ldr	r1, [r1, #4]
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd4e:	68a3      	ldr	r3, [r4, #8]
 800dd50:	4607      	mov	r7, r0
 800dd52:	4691      	mov	r9, r2
 800dd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd58:	f108 0601 	add.w	r6, r8, #1
 800dd5c:	42b3      	cmp	r3, r6
 800dd5e:	db0b      	blt.n	800dd78 <__lshift+0x38>
 800dd60:	4638      	mov	r0, r7
 800dd62:	f7ff fd95 	bl	800d890 <_Balloc>
 800dd66:	4605      	mov	r5, r0
 800dd68:	b948      	cbnz	r0, 800dd7e <__lshift+0x3e>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4b28      	ldr	r3, [pc, #160]	@ (800de10 <__lshift+0xd0>)
 800dd6e:	4829      	ldr	r0, [pc, #164]	@ (800de14 <__lshift+0xd4>)
 800dd70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dd74:	f000 fc78 	bl	800e668 <__assert_func>
 800dd78:	3101      	adds	r1, #1
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	e7ee      	b.n	800dd5c <__lshift+0x1c>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f100 0114 	add.w	r1, r0, #20
 800dd84:	f100 0210 	add.w	r2, r0, #16
 800dd88:	4618      	mov	r0, r3
 800dd8a:	4553      	cmp	r3, sl
 800dd8c:	db33      	blt.n	800ddf6 <__lshift+0xb6>
 800dd8e:	6920      	ldr	r0, [r4, #16]
 800dd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd94:	f104 0314 	add.w	r3, r4, #20
 800dd98:	f019 091f 	ands.w	r9, r9, #31
 800dd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dda0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dda4:	d02b      	beq.n	800ddfe <__lshift+0xbe>
 800dda6:	f1c9 0e20 	rsb	lr, r9, #32
 800ddaa:	468a      	mov	sl, r1
 800ddac:	2200      	movs	r2, #0
 800ddae:	6818      	ldr	r0, [r3, #0]
 800ddb0:	fa00 f009 	lsl.w	r0, r0, r9
 800ddb4:	4310      	orrs	r0, r2
 800ddb6:	f84a 0b04 	str.w	r0, [sl], #4
 800ddba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddbe:	459c      	cmp	ip, r3
 800ddc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ddc4:	d8f3      	bhi.n	800ddae <__lshift+0x6e>
 800ddc6:	ebac 0304 	sub.w	r3, ip, r4
 800ddca:	3b15      	subs	r3, #21
 800ddcc:	f023 0303 	bic.w	r3, r3, #3
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	f104 0015 	add.w	r0, r4, #21
 800ddd6:	4584      	cmp	ip, r0
 800ddd8:	bf38      	it	cc
 800ddda:	2304      	movcc	r3, #4
 800dddc:	50ca      	str	r2, [r1, r3]
 800ddde:	b10a      	cbz	r2, 800dde4 <__lshift+0xa4>
 800dde0:	f108 0602 	add.w	r6, r8, #2
 800dde4:	3e01      	subs	r6, #1
 800dde6:	4638      	mov	r0, r7
 800dde8:	612e      	str	r6, [r5, #16]
 800ddea:	4621      	mov	r1, r4
 800ddec:	f7ff fd90 	bl	800d910 <_Bfree>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	e7c5      	b.n	800dd8a <__lshift+0x4a>
 800ddfe:	3904      	subs	r1, #4
 800de00:	f853 2b04 	ldr.w	r2, [r3], #4
 800de04:	f841 2f04 	str.w	r2, [r1, #4]!
 800de08:	459c      	cmp	ip, r3
 800de0a:	d8f9      	bhi.n	800de00 <__lshift+0xc0>
 800de0c:	e7ea      	b.n	800dde4 <__lshift+0xa4>
 800de0e:	bf00      	nop
 800de10:	080100f9 	.word	0x080100f9
 800de14:	0801016a 	.word	0x0801016a

0800de18 <__mcmp>:
 800de18:	690a      	ldr	r2, [r1, #16]
 800de1a:	4603      	mov	r3, r0
 800de1c:	6900      	ldr	r0, [r0, #16]
 800de1e:	1a80      	subs	r0, r0, r2
 800de20:	b530      	push	{r4, r5, lr}
 800de22:	d10e      	bne.n	800de42 <__mcmp+0x2a>
 800de24:	3314      	adds	r3, #20
 800de26:	3114      	adds	r1, #20
 800de28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800de2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800de30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de38:	4295      	cmp	r5, r2
 800de3a:	d003      	beq.n	800de44 <__mcmp+0x2c>
 800de3c:	d205      	bcs.n	800de4a <__mcmp+0x32>
 800de3e:	f04f 30ff 	mov.w	r0, #4294967295
 800de42:	bd30      	pop	{r4, r5, pc}
 800de44:	42a3      	cmp	r3, r4
 800de46:	d3f3      	bcc.n	800de30 <__mcmp+0x18>
 800de48:	e7fb      	b.n	800de42 <__mcmp+0x2a>
 800de4a:	2001      	movs	r0, #1
 800de4c:	e7f9      	b.n	800de42 <__mcmp+0x2a>
	...

0800de50 <__mdiff>:
 800de50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4689      	mov	r9, r1
 800de56:	4606      	mov	r6, r0
 800de58:	4611      	mov	r1, r2
 800de5a:	4648      	mov	r0, r9
 800de5c:	4614      	mov	r4, r2
 800de5e:	f7ff ffdb 	bl	800de18 <__mcmp>
 800de62:	1e05      	subs	r5, r0, #0
 800de64:	d112      	bne.n	800de8c <__mdiff+0x3c>
 800de66:	4629      	mov	r1, r5
 800de68:	4630      	mov	r0, r6
 800de6a:	f7ff fd11 	bl	800d890 <_Balloc>
 800de6e:	4602      	mov	r2, r0
 800de70:	b928      	cbnz	r0, 800de7e <__mdiff+0x2e>
 800de72:	4b3f      	ldr	r3, [pc, #252]	@ (800df70 <__mdiff+0x120>)
 800de74:	f240 2137 	movw	r1, #567	@ 0x237
 800de78:	483e      	ldr	r0, [pc, #248]	@ (800df74 <__mdiff+0x124>)
 800de7a:	f000 fbf5 	bl	800e668 <__assert_func>
 800de7e:	2301      	movs	r3, #1
 800de80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de84:	4610      	mov	r0, r2
 800de86:	b003      	add	sp, #12
 800de88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de8c:	bfbc      	itt	lt
 800de8e:	464b      	movlt	r3, r9
 800de90:	46a1      	movlt	r9, r4
 800de92:	4630      	mov	r0, r6
 800de94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de98:	bfba      	itte	lt
 800de9a:	461c      	movlt	r4, r3
 800de9c:	2501      	movlt	r5, #1
 800de9e:	2500      	movge	r5, #0
 800dea0:	f7ff fcf6 	bl	800d890 <_Balloc>
 800dea4:	4602      	mov	r2, r0
 800dea6:	b918      	cbnz	r0, 800deb0 <__mdiff+0x60>
 800dea8:	4b31      	ldr	r3, [pc, #196]	@ (800df70 <__mdiff+0x120>)
 800deaa:	f240 2145 	movw	r1, #581	@ 0x245
 800deae:	e7e3      	b.n	800de78 <__mdiff+0x28>
 800deb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800deb4:	6926      	ldr	r6, [r4, #16]
 800deb6:	60c5      	str	r5, [r0, #12]
 800deb8:	f109 0310 	add.w	r3, r9, #16
 800debc:	f109 0514 	add.w	r5, r9, #20
 800dec0:	f104 0e14 	add.w	lr, r4, #20
 800dec4:	f100 0b14 	add.w	fp, r0, #20
 800dec8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800decc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	46d9      	mov	r9, fp
 800ded4:	f04f 0c00 	mov.w	ip, #0
 800ded8:	9b01      	ldr	r3, [sp, #4]
 800deda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dede:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dee2:	9301      	str	r3, [sp, #4]
 800dee4:	fa1f f38a 	uxth.w	r3, sl
 800dee8:	4619      	mov	r1, r3
 800deea:	b283      	uxth	r3, r0
 800deec:	1acb      	subs	r3, r1, r3
 800deee:	0c00      	lsrs	r0, r0, #16
 800def0:	4463      	add	r3, ip
 800def2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800def6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800defa:	b29b      	uxth	r3, r3
 800defc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800df00:	4576      	cmp	r6, lr
 800df02:	f849 3b04 	str.w	r3, [r9], #4
 800df06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df0a:	d8e5      	bhi.n	800ded8 <__mdiff+0x88>
 800df0c:	1b33      	subs	r3, r6, r4
 800df0e:	3b15      	subs	r3, #21
 800df10:	f023 0303 	bic.w	r3, r3, #3
 800df14:	3415      	adds	r4, #21
 800df16:	3304      	adds	r3, #4
 800df18:	42a6      	cmp	r6, r4
 800df1a:	bf38      	it	cc
 800df1c:	2304      	movcc	r3, #4
 800df1e:	441d      	add	r5, r3
 800df20:	445b      	add	r3, fp
 800df22:	461e      	mov	r6, r3
 800df24:	462c      	mov	r4, r5
 800df26:	4544      	cmp	r4, r8
 800df28:	d30e      	bcc.n	800df48 <__mdiff+0xf8>
 800df2a:	f108 0103 	add.w	r1, r8, #3
 800df2e:	1b49      	subs	r1, r1, r5
 800df30:	f021 0103 	bic.w	r1, r1, #3
 800df34:	3d03      	subs	r5, #3
 800df36:	45a8      	cmp	r8, r5
 800df38:	bf38      	it	cc
 800df3a:	2100      	movcc	r1, #0
 800df3c:	440b      	add	r3, r1
 800df3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df42:	b191      	cbz	r1, 800df6a <__mdiff+0x11a>
 800df44:	6117      	str	r7, [r2, #16]
 800df46:	e79d      	b.n	800de84 <__mdiff+0x34>
 800df48:	f854 1b04 	ldr.w	r1, [r4], #4
 800df4c:	46e6      	mov	lr, ip
 800df4e:	0c08      	lsrs	r0, r1, #16
 800df50:	fa1c fc81 	uxtah	ip, ip, r1
 800df54:	4471      	add	r1, lr
 800df56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800df5a:	b289      	uxth	r1, r1
 800df5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800df60:	f846 1b04 	str.w	r1, [r6], #4
 800df64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df68:	e7dd      	b.n	800df26 <__mdiff+0xd6>
 800df6a:	3f01      	subs	r7, #1
 800df6c:	e7e7      	b.n	800df3e <__mdiff+0xee>
 800df6e:	bf00      	nop
 800df70:	080100f9 	.word	0x080100f9
 800df74:	0801016a 	.word	0x0801016a

0800df78 <__ulp>:
 800df78:	b082      	sub	sp, #8
 800df7a:	ed8d 0b00 	vstr	d0, [sp]
 800df7e:	9a01      	ldr	r2, [sp, #4]
 800df80:	4b0f      	ldr	r3, [pc, #60]	@ (800dfc0 <__ulp+0x48>)
 800df82:	4013      	ands	r3, r2
 800df84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	dc08      	bgt.n	800df9e <__ulp+0x26>
 800df8c:	425b      	negs	r3, r3
 800df8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800df92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df96:	da04      	bge.n	800dfa2 <__ulp+0x2a>
 800df98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df9c:	4113      	asrs	r3, r2
 800df9e:	2200      	movs	r2, #0
 800dfa0:	e008      	b.n	800dfb4 <__ulp+0x3c>
 800dfa2:	f1a2 0314 	sub.w	r3, r2, #20
 800dfa6:	2b1e      	cmp	r3, #30
 800dfa8:	bfda      	itte	le
 800dfaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dfae:	40da      	lsrle	r2, r3
 800dfb0:	2201      	movgt	r2, #1
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	ec41 0b10 	vmov	d0, r0, r1
 800dfbc:	b002      	add	sp, #8
 800dfbe:	4770      	bx	lr
 800dfc0:	7ff00000 	.word	0x7ff00000

0800dfc4 <__b2d>:
 800dfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	6906      	ldr	r6, [r0, #16]
 800dfca:	f100 0814 	add.w	r8, r0, #20
 800dfce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dfd2:	1f37      	subs	r7, r6, #4
 800dfd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7ff fd4b 	bl	800da74 <__hi0bits>
 800dfde:	f1c0 0320 	rsb	r3, r0, #32
 800dfe2:	280a      	cmp	r0, #10
 800dfe4:	600b      	str	r3, [r1, #0]
 800dfe6:	491b      	ldr	r1, [pc, #108]	@ (800e054 <__b2d+0x90>)
 800dfe8:	dc15      	bgt.n	800e016 <__b2d+0x52>
 800dfea:	f1c0 0c0b 	rsb	ip, r0, #11
 800dfee:	fa22 f30c 	lsr.w	r3, r2, ip
 800dff2:	45b8      	cmp	r8, r7
 800dff4:	ea43 0501 	orr.w	r5, r3, r1
 800dff8:	bf34      	ite	cc
 800dffa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dffe:	2300      	movcs	r3, #0
 800e000:	3015      	adds	r0, #21
 800e002:	fa02 f000 	lsl.w	r0, r2, r0
 800e006:	fa23 f30c 	lsr.w	r3, r3, ip
 800e00a:	4303      	orrs	r3, r0
 800e00c:	461c      	mov	r4, r3
 800e00e:	ec45 4b10 	vmov	d0, r4, r5
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e016:	45b8      	cmp	r8, r7
 800e018:	bf3a      	itte	cc
 800e01a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e01e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e022:	2300      	movcs	r3, #0
 800e024:	380b      	subs	r0, #11
 800e026:	d012      	beq.n	800e04e <__b2d+0x8a>
 800e028:	f1c0 0120 	rsb	r1, r0, #32
 800e02c:	fa23 f401 	lsr.w	r4, r3, r1
 800e030:	4082      	lsls	r2, r0
 800e032:	4322      	orrs	r2, r4
 800e034:	4547      	cmp	r7, r8
 800e036:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e03a:	bf8c      	ite	hi
 800e03c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e040:	2200      	movls	r2, #0
 800e042:	4083      	lsls	r3, r0
 800e044:	40ca      	lsrs	r2, r1
 800e046:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e04a:	4313      	orrs	r3, r2
 800e04c:	e7de      	b.n	800e00c <__b2d+0x48>
 800e04e:	ea42 0501 	orr.w	r5, r2, r1
 800e052:	e7db      	b.n	800e00c <__b2d+0x48>
 800e054:	3ff00000 	.word	0x3ff00000

0800e058 <__d2b>:
 800e058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e05c:	460f      	mov	r7, r1
 800e05e:	2101      	movs	r1, #1
 800e060:	ec59 8b10 	vmov	r8, r9, d0
 800e064:	4616      	mov	r6, r2
 800e066:	f7ff fc13 	bl	800d890 <_Balloc>
 800e06a:	4604      	mov	r4, r0
 800e06c:	b930      	cbnz	r0, 800e07c <__d2b+0x24>
 800e06e:	4602      	mov	r2, r0
 800e070:	4b23      	ldr	r3, [pc, #140]	@ (800e100 <__d2b+0xa8>)
 800e072:	4824      	ldr	r0, [pc, #144]	@ (800e104 <__d2b+0xac>)
 800e074:	f240 310f 	movw	r1, #783	@ 0x30f
 800e078:	f000 faf6 	bl	800e668 <__assert_func>
 800e07c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e084:	b10d      	cbz	r5, 800e08a <__d2b+0x32>
 800e086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e08a:	9301      	str	r3, [sp, #4]
 800e08c:	f1b8 0300 	subs.w	r3, r8, #0
 800e090:	d023      	beq.n	800e0da <__d2b+0x82>
 800e092:	4668      	mov	r0, sp
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	f7ff fd0c 	bl	800dab2 <__lo0bits>
 800e09a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e09e:	b1d0      	cbz	r0, 800e0d6 <__d2b+0x7e>
 800e0a0:	f1c0 0320 	rsb	r3, r0, #32
 800e0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0a8:	430b      	orrs	r3, r1
 800e0aa:	40c2      	lsrs	r2, r0
 800e0ac:	6163      	str	r3, [r4, #20]
 800e0ae:	9201      	str	r2, [sp, #4]
 800e0b0:	9b01      	ldr	r3, [sp, #4]
 800e0b2:	61a3      	str	r3, [r4, #24]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bf0c      	ite	eq
 800e0b8:	2201      	moveq	r2, #1
 800e0ba:	2202      	movne	r2, #2
 800e0bc:	6122      	str	r2, [r4, #16]
 800e0be:	b1a5      	cbz	r5, 800e0ea <__d2b+0x92>
 800e0c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e0c4:	4405      	add	r5, r0
 800e0c6:	603d      	str	r5, [r7, #0]
 800e0c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e0cc:	6030      	str	r0, [r6, #0]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	b003      	add	sp, #12
 800e0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0d6:	6161      	str	r1, [r4, #20]
 800e0d8:	e7ea      	b.n	800e0b0 <__d2b+0x58>
 800e0da:	a801      	add	r0, sp, #4
 800e0dc:	f7ff fce9 	bl	800dab2 <__lo0bits>
 800e0e0:	9b01      	ldr	r3, [sp, #4]
 800e0e2:	6163      	str	r3, [r4, #20]
 800e0e4:	3020      	adds	r0, #32
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	e7e8      	b.n	800e0bc <__d2b+0x64>
 800e0ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e0f2:	6038      	str	r0, [r7, #0]
 800e0f4:	6918      	ldr	r0, [r3, #16]
 800e0f6:	f7ff fcbd 	bl	800da74 <__hi0bits>
 800e0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0fe:	e7e5      	b.n	800e0cc <__d2b+0x74>
 800e100:	080100f9 	.word	0x080100f9
 800e104:	0801016a 	.word	0x0801016a

0800e108 <__ratio>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	b085      	sub	sp, #20
 800e10e:	e9cd 1000 	strd	r1, r0, [sp]
 800e112:	a902      	add	r1, sp, #8
 800e114:	f7ff ff56 	bl	800dfc4 <__b2d>
 800e118:	9800      	ldr	r0, [sp, #0]
 800e11a:	a903      	add	r1, sp, #12
 800e11c:	ec55 4b10 	vmov	r4, r5, d0
 800e120:	f7ff ff50 	bl	800dfc4 <__b2d>
 800e124:	9b01      	ldr	r3, [sp, #4]
 800e126:	6919      	ldr	r1, [r3, #16]
 800e128:	9b00      	ldr	r3, [sp, #0]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	1ac9      	subs	r1, r1, r3
 800e12e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e132:	1a9b      	subs	r3, r3, r2
 800e134:	ec5b ab10 	vmov	sl, fp, d0
 800e138:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	bfce      	itee	gt
 800e140:	462a      	movgt	r2, r5
 800e142:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e146:	465a      	movle	r2, fp
 800e148:	462f      	mov	r7, r5
 800e14a:	46d9      	mov	r9, fp
 800e14c:	bfcc      	ite	gt
 800e14e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e152:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e156:	464b      	mov	r3, r9
 800e158:	4652      	mov	r2, sl
 800e15a:	4620      	mov	r0, r4
 800e15c:	4639      	mov	r1, r7
 800e15e:	f7f2 fb95 	bl	800088c <__aeabi_ddiv>
 800e162:	ec41 0b10 	vmov	d0, r0, r1
 800e166:	b005      	add	sp, #20
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e16c <__copybits>:
 800e16c:	3901      	subs	r1, #1
 800e16e:	b570      	push	{r4, r5, r6, lr}
 800e170:	1149      	asrs	r1, r1, #5
 800e172:	6914      	ldr	r4, [r2, #16]
 800e174:	3101      	adds	r1, #1
 800e176:	f102 0314 	add.w	r3, r2, #20
 800e17a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e17e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e182:	1f05      	subs	r5, r0, #4
 800e184:	42a3      	cmp	r3, r4
 800e186:	d30c      	bcc.n	800e1a2 <__copybits+0x36>
 800e188:	1aa3      	subs	r3, r4, r2
 800e18a:	3b11      	subs	r3, #17
 800e18c:	f023 0303 	bic.w	r3, r3, #3
 800e190:	3211      	adds	r2, #17
 800e192:	42a2      	cmp	r2, r4
 800e194:	bf88      	it	hi
 800e196:	2300      	movhi	r3, #0
 800e198:	4418      	add	r0, r3
 800e19a:	2300      	movs	r3, #0
 800e19c:	4288      	cmp	r0, r1
 800e19e:	d305      	bcc.n	800e1ac <__copybits+0x40>
 800e1a0:	bd70      	pop	{r4, r5, r6, pc}
 800e1a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800e1a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800e1aa:	e7eb      	b.n	800e184 <__copybits+0x18>
 800e1ac:	f840 3b04 	str.w	r3, [r0], #4
 800e1b0:	e7f4      	b.n	800e19c <__copybits+0x30>

0800e1b2 <__any_on>:
 800e1b2:	f100 0214 	add.w	r2, r0, #20
 800e1b6:	6900      	ldr	r0, [r0, #16]
 800e1b8:	114b      	asrs	r3, r1, #5
 800e1ba:	4298      	cmp	r0, r3
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	db11      	blt.n	800e1e4 <__any_on+0x32>
 800e1c0:	dd0a      	ble.n	800e1d8 <__any_on+0x26>
 800e1c2:	f011 011f 	ands.w	r1, r1, #31
 800e1c6:	d007      	beq.n	800e1d8 <__any_on+0x26>
 800e1c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e1cc:	fa24 f001 	lsr.w	r0, r4, r1
 800e1d0:	fa00 f101 	lsl.w	r1, r0, r1
 800e1d4:	428c      	cmp	r4, r1
 800e1d6:	d10b      	bne.n	800e1f0 <__any_on+0x3e>
 800e1d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d803      	bhi.n	800e1e8 <__any_on+0x36>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	bd10      	pop	{r4, pc}
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	e7f7      	b.n	800e1d8 <__any_on+0x26>
 800e1e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e1ec:	2900      	cmp	r1, #0
 800e1ee:	d0f5      	beq.n	800e1dc <__any_on+0x2a>
 800e1f0:	2001      	movs	r0, #1
 800e1f2:	e7f6      	b.n	800e1e2 <__any_on+0x30>

0800e1f4 <__ascii_wctomb>:
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	4608      	mov	r0, r1
 800e1f8:	b141      	cbz	r1, 800e20c <__ascii_wctomb+0x18>
 800e1fa:	2aff      	cmp	r2, #255	@ 0xff
 800e1fc:	d904      	bls.n	800e208 <__ascii_wctomb+0x14>
 800e1fe:	228a      	movs	r2, #138	@ 0x8a
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	f04f 30ff 	mov.w	r0, #4294967295
 800e206:	4770      	bx	lr
 800e208:	700a      	strb	r2, [r1, #0]
 800e20a:	2001      	movs	r0, #1
 800e20c:	4770      	bx	lr

0800e20e <__ssputs_r>:
 800e20e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e212:	688e      	ldr	r6, [r1, #8]
 800e214:	461f      	mov	r7, r3
 800e216:	42be      	cmp	r6, r7
 800e218:	680b      	ldr	r3, [r1, #0]
 800e21a:	4682      	mov	sl, r0
 800e21c:	460c      	mov	r4, r1
 800e21e:	4690      	mov	r8, r2
 800e220:	d82d      	bhi.n	800e27e <__ssputs_r+0x70>
 800e222:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e226:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e22a:	d026      	beq.n	800e27a <__ssputs_r+0x6c>
 800e22c:	6965      	ldr	r5, [r4, #20]
 800e22e:	6909      	ldr	r1, [r1, #16]
 800e230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e234:	eba3 0901 	sub.w	r9, r3, r1
 800e238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e23c:	1c7b      	adds	r3, r7, #1
 800e23e:	444b      	add	r3, r9
 800e240:	106d      	asrs	r5, r5, #1
 800e242:	429d      	cmp	r5, r3
 800e244:	bf38      	it	cc
 800e246:	461d      	movcc	r5, r3
 800e248:	0553      	lsls	r3, r2, #21
 800e24a:	d527      	bpl.n	800e29c <__ssputs_r+0x8e>
 800e24c:	4629      	mov	r1, r5
 800e24e:	f7ff fa81 	bl	800d754 <_malloc_r>
 800e252:	4606      	mov	r6, r0
 800e254:	b360      	cbz	r0, 800e2b0 <__ssputs_r+0xa2>
 800e256:	6921      	ldr	r1, [r4, #16]
 800e258:	464a      	mov	r2, r9
 800e25a:	f7fe f86a 	bl	800c332 <memcpy>
 800e25e:	89a3      	ldrh	r3, [r4, #12]
 800e260:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	6126      	str	r6, [r4, #16]
 800e26c:	6165      	str	r5, [r4, #20]
 800e26e:	444e      	add	r6, r9
 800e270:	eba5 0509 	sub.w	r5, r5, r9
 800e274:	6026      	str	r6, [r4, #0]
 800e276:	60a5      	str	r5, [r4, #8]
 800e278:	463e      	mov	r6, r7
 800e27a:	42be      	cmp	r6, r7
 800e27c:	d900      	bls.n	800e280 <__ssputs_r+0x72>
 800e27e:	463e      	mov	r6, r7
 800e280:	6820      	ldr	r0, [r4, #0]
 800e282:	4632      	mov	r2, r6
 800e284:	4641      	mov	r1, r8
 800e286:	f000 f9c5 	bl	800e614 <memmove>
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	1b9b      	subs	r3, r3, r6
 800e28e:	60a3      	str	r3, [r4, #8]
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	4433      	add	r3, r6
 800e294:	6023      	str	r3, [r4, #0]
 800e296:	2000      	movs	r0, #0
 800e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29c:	462a      	mov	r2, r5
 800e29e:	f000 fa15 	bl	800e6cc <_realloc_r>
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d1e0      	bne.n	800e26a <__ssputs_r+0x5c>
 800e2a8:	6921      	ldr	r1, [r4, #16]
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	f7fe fea4 	bl	800cff8 <_free_r>
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	f8ca 3000 	str.w	r3, [sl]
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2bc:	81a3      	strh	r3, [r4, #12]
 800e2be:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c2:	e7e9      	b.n	800e298 <__ssputs_r+0x8a>

0800e2c4 <_svfiprintf_r>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	4698      	mov	r8, r3
 800e2ca:	898b      	ldrh	r3, [r1, #12]
 800e2cc:	061b      	lsls	r3, r3, #24
 800e2ce:	b09d      	sub	sp, #116	@ 0x74
 800e2d0:	4607      	mov	r7, r0
 800e2d2:	460d      	mov	r5, r1
 800e2d4:	4614      	mov	r4, r2
 800e2d6:	d510      	bpl.n	800e2fa <_svfiprintf_r+0x36>
 800e2d8:	690b      	ldr	r3, [r1, #16]
 800e2da:	b973      	cbnz	r3, 800e2fa <_svfiprintf_r+0x36>
 800e2dc:	2140      	movs	r1, #64	@ 0x40
 800e2de:	f7ff fa39 	bl	800d754 <_malloc_r>
 800e2e2:	6028      	str	r0, [r5, #0]
 800e2e4:	6128      	str	r0, [r5, #16]
 800e2e6:	b930      	cbnz	r0, 800e2f6 <_svfiprintf_r+0x32>
 800e2e8:	230c      	movs	r3, #12
 800e2ea:	603b      	str	r3, [r7, #0]
 800e2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f0:	b01d      	add	sp, #116	@ 0x74
 800e2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f6:	2340      	movs	r3, #64	@ 0x40
 800e2f8:	616b      	str	r3, [r5, #20]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2fe:	2320      	movs	r3, #32
 800e300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e304:	f8cd 800c 	str.w	r8, [sp, #12]
 800e308:	2330      	movs	r3, #48	@ 0x30
 800e30a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e4a8 <_svfiprintf_r+0x1e4>
 800e30e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e312:	f04f 0901 	mov.w	r9, #1
 800e316:	4623      	mov	r3, r4
 800e318:	469a      	mov	sl, r3
 800e31a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e31e:	b10a      	cbz	r2, 800e324 <_svfiprintf_r+0x60>
 800e320:	2a25      	cmp	r2, #37	@ 0x25
 800e322:	d1f9      	bne.n	800e318 <_svfiprintf_r+0x54>
 800e324:	ebba 0b04 	subs.w	fp, sl, r4
 800e328:	d00b      	beq.n	800e342 <_svfiprintf_r+0x7e>
 800e32a:	465b      	mov	r3, fp
 800e32c:	4622      	mov	r2, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	4638      	mov	r0, r7
 800e332:	f7ff ff6c 	bl	800e20e <__ssputs_r>
 800e336:	3001      	adds	r0, #1
 800e338:	f000 80a7 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e33c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e33e:	445a      	add	r2, fp
 800e340:	9209      	str	r2, [sp, #36]	@ 0x24
 800e342:	f89a 3000 	ldrb.w	r3, [sl]
 800e346:	2b00      	cmp	r3, #0
 800e348:	f000 809f 	beq.w	800e48a <_svfiprintf_r+0x1c6>
 800e34c:	2300      	movs	r3, #0
 800e34e:	f04f 32ff 	mov.w	r2, #4294967295
 800e352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e356:	f10a 0a01 	add.w	sl, sl, #1
 800e35a:	9304      	str	r3, [sp, #16]
 800e35c:	9307      	str	r3, [sp, #28]
 800e35e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e362:	931a      	str	r3, [sp, #104]	@ 0x68
 800e364:	4654      	mov	r4, sl
 800e366:	2205      	movs	r2, #5
 800e368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36c:	484e      	ldr	r0, [pc, #312]	@ (800e4a8 <_svfiprintf_r+0x1e4>)
 800e36e:	f7f1 ff4f 	bl	8000210 <memchr>
 800e372:	9a04      	ldr	r2, [sp, #16]
 800e374:	b9d8      	cbnz	r0, 800e3ae <_svfiprintf_r+0xea>
 800e376:	06d0      	lsls	r0, r2, #27
 800e378:	bf44      	itt	mi
 800e37a:	2320      	movmi	r3, #32
 800e37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e380:	0711      	lsls	r1, r2, #28
 800e382:	bf44      	itt	mi
 800e384:	232b      	movmi	r3, #43	@ 0x2b
 800e386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e38a:	f89a 3000 	ldrb.w	r3, [sl]
 800e38e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e390:	d015      	beq.n	800e3be <_svfiprintf_r+0xfa>
 800e392:	9a07      	ldr	r2, [sp, #28]
 800e394:	4654      	mov	r4, sl
 800e396:	2000      	movs	r0, #0
 800e398:	f04f 0c0a 	mov.w	ip, #10
 800e39c:	4621      	mov	r1, r4
 800e39e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a2:	3b30      	subs	r3, #48	@ 0x30
 800e3a4:	2b09      	cmp	r3, #9
 800e3a6:	d94b      	bls.n	800e440 <_svfiprintf_r+0x17c>
 800e3a8:	b1b0      	cbz	r0, 800e3d8 <_svfiprintf_r+0x114>
 800e3aa:	9207      	str	r2, [sp, #28]
 800e3ac:	e014      	b.n	800e3d8 <_svfiprintf_r+0x114>
 800e3ae:	eba0 0308 	sub.w	r3, r0, r8
 800e3b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	9304      	str	r3, [sp, #16]
 800e3ba:	46a2      	mov	sl, r4
 800e3bc:	e7d2      	b.n	800e364 <_svfiprintf_r+0xa0>
 800e3be:	9b03      	ldr	r3, [sp, #12]
 800e3c0:	1d19      	adds	r1, r3, #4
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	9103      	str	r1, [sp, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	bfbb      	ittet	lt
 800e3ca:	425b      	neglt	r3, r3
 800e3cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d0:	9307      	strge	r3, [sp, #28]
 800e3d2:	9307      	strlt	r3, [sp, #28]
 800e3d4:	bfb8      	it	lt
 800e3d6:	9204      	strlt	r2, [sp, #16]
 800e3d8:	7823      	ldrb	r3, [r4, #0]
 800e3da:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3dc:	d10a      	bne.n	800e3f4 <_svfiprintf_r+0x130>
 800e3de:	7863      	ldrb	r3, [r4, #1]
 800e3e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3e2:	d132      	bne.n	800e44a <_svfiprintf_r+0x186>
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	1d1a      	adds	r2, r3, #4
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	9203      	str	r2, [sp, #12]
 800e3ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e3f0:	3402      	adds	r4, #2
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e4b8 <_svfiprintf_r+0x1f4>
 800e3f8:	7821      	ldrb	r1, [r4, #0]
 800e3fa:	2203      	movs	r2, #3
 800e3fc:	4650      	mov	r0, sl
 800e3fe:	f7f1 ff07 	bl	8000210 <memchr>
 800e402:	b138      	cbz	r0, 800e414 <_svfiprintf_r+0x150>
 800e404:	9b04      	ldr	r3, [sp, #16]
 800e406:	eba0 000a 	sub.w	r0, r0, sl
 800e40a:	2240      	movs	r2, #64	@ 0x40
 800e40c:	4082      	lsls	r2, r0
 800e40e:	4313      	orrs	r3, r2
 800e410:	3401      	adds	r4, #1
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e418:	4824      	ldr	r0, [pc, #144]	@ (800e4ac <_svfiprintf_r+0x1e8>)
 800e41a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e41e:	2206      	movs	r2, #6
 800e420:	f7f1 fef6 	bl	8000210 <memchr>
 800e424:	2800      	cmp	r0, #0
 800e426:	d036      	beq.n	800e496 <_svfiprintf_r+0x1d2>
 800e428:	4b21      	ldr	r3, [pc, #132]	@ (800e4b0 <_svfiprintf_r+0x1ec>)
 800e42a:	bb1b      	cbnz	r3, 800e474 <_svfiprintf_r+0x1b0>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	3307      	adds	r3, #7
 800e430:	f023 0307 	bic.w	r3, r3, #7
 800e434:	3308      	adds	r3, #8
 800e436:	9303      	str	r3, [sp, #12]
 800e438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e43a:	4433      	add	r3, r6
 800e43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e43e:	e76a      	b.n	800e316 <_svfiprintf_r+0x52>
 800e440:	fb0c 3202 	mla	r2, ip, r2, r3
 800e444:	460c      	mov	r4, r1
 800e446:	2001      	movs	r0, #1
 800e448:	e7a8      	b.n	800e39c <_svfiprintf_r+0xd8>
 800e44a:	2300      	movs	r3, #0
 800e44c:	3401      	adds	r4, #1
 800e44e:	9305      	str	r3, [sp, #20]
 800e450:	4619      	mov	r1, r3
 800e452:	f04f 0c0a 	mov.w	ip, #10
 800e456:	4620      	mov	r0, r4
 800e458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45c:	3a30      	subs	r2, #48	@ 0x30
 800e45e:	2a09      	cmp	r2, #9
 800e460:	d903      	bls.n	800e46a <_svfiprintf_r+0x1a6>
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0c6      	beq.n	800e3f4 <_svfiprintf_r+0x130>
 800e466:	9105      	str	r1, [sp, #20]
 800e468:	e7c4      	b.n	800e3f4 <_svfiprintf_r+0x130>
 800e46a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46e:	4604      	mov	r4, r0
 800e470:	2301      	movs	r3, #1
 800e472:	e7f0      	b.n	800e456 <_svfiprintf_r+0x192>
 800e474:	ab03      	add	r3, sp, #12
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	462a      	mov	r2, r5
 800e47a:	4b0e      	ldr	r3, [pc, #56]	@ (800e4b4 <_svfiprintf_r+0x1f0>)
 800e47c:	a904      	add	r1, sp, #16
 800e47e:	4638      	mov	r0, r7
 800e480:	f7fd f9aa 	bl	800b7d8 <_printf_float>
 800e484:	1c42      	adds	r2, r0, #1
 800e486:	4606      	mov	r6, r0
 800e488:	d1d6      	bne.n	800e438 <_svfiprintf_r+0x174>
 800e48a:	89ab      	ldrh	r3, [r5, #12]
 800e48c:	065b      	lsls	r3, r3, #25
 800e48e:	f53f af2d 	bmi.w	800e2ec <_svfiprintf_r+0x28>
 800e492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e494:	e72c      	b.n	800e2f0 <_svfiprintf_r+0x2c>
 800e496:	ab03      	add	r3, sp, #12
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	462a      	mov	r2, r5
 800e49c:	4b05      	ldr	r3, [pc, #20]	@ (800e4b4 <_svfiprintf_r+0x1f0>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7fd fc31 	bl	800bd08 <_printf_i>
 800e4a6:	e7ed      	b.n	800e484 <_svfiprintf_r+0x1c0>
 800e4a8:	080102c0 	.word	0x080102c0
 800e4ac:	080102ca 	.word	0x080102ca
 800e4b0:	0800b7d9 	.word	0x0800b7d9
 800e4b4:	0800e20f 	.word	0x0800e20f
 800e4b8:	080102c6 	.word	0x080102c6

0800e4bc <__sflush_r>:
 800e4bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c4:	0716      	lsls	r6, r2, #28
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	d454      	bmi.n	800e576 <__sflush_r+0xba>
 800e4cc:	684b      	ldr	r3, [r1, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dc02      	bgt.n	800e4d8 <__sflush_r+0x1c>
 800e4d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	dd48      	ble.n	800e56a <__sflush_r+0xae>
 800e4d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d045      	beq.n	800e56a <__sflush_r+0xae>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4e4:	682f      	ldr	r7, [r5, #0]
 800e4e6:	6a21      	ldr	r1, [r4, #32]
 800e4e8:	602b      	str	r3, [r5, #0]
 800e4ea:	d030      	beq.n	800e54e <__sflush_r+0x92>
 800e4ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e4ee:	89a3      	ldrh	r3, [r4, #12]
 800e4f0:	0759      	lsls	r1, r3, #29
 800e4f2:	d505      	bpl.n	800e500 <__sflush_r+0x44>
 800e4f4:	6863      	ldr	r3, [r4, #4]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e4fa:	b10b      	cbz	r3, 800e500 <__sflush_r+0x44>
 800e4fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e4fe:	1ad2      	subs	r2, r2, r3
 800e500:	2300      	movs	r3, #0
 800e502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e504:	6a21      	ldr	r1, [r4, #32]
 800e506:	4628      	mov	r0, r5
 800e508:	47b0      	blx	r6
 800e50a:	1c43      	adds	r3, r0, #1
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	d106      	bne.n	800e51e <__sflush_r+0x62>
 800e510:	6829      	ldr	r1, [r5, #0]
 800e512:	291d      	cmp	r1, #29
 800e514:	d82b      	bhi.n	800e56e <__sflush_r+0xb2>
 800e516:	4a2a      	ldr	r2, [pc, #168]	@ (800e5c0 <__sflush_r+0x104>)
 800e518:	410a      	asrs	r2, r1
 800e51a:	07d6      	lsls	r6, r2, #31
 800e51c:	d427      	bmi.n	800e56e <__sflush_r+0xb2>
 800e51e:	2200      	movs	r2, #0
 800e520:	6062      	str	r2, [r4, #4]
 800e522:	04d9      	lsls	r1, r3, #19
 800e524:	6922      	ldr	r2, [r4, #16]
 800e526:	6022      	str	r2, [r4, #0]
 800e528:	d504      	bpl.n	800e534 <__sflush_r+0x78>
 800e52a:	1c42      	adds	r2, r0, #1
 800e52c:	d101      	bne.n	800e532 <__sflush_r+0x76>
 800e52e:	682b      	ldr	r3, [r5, #0]
 800e530:	b903      	cbnz	r3, 800e534 <__sflush_r+0x78>
 800e532:	6560      	str	r0, [r4, #84]	@ 0x54
 800e534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e536:	602f      	str	r7, [r5, #0]
 800e538:	b1b9      	cbz	r1, 800e56a <__sflush_r+0xae>
 800e53a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e53e:	4299      	cmp	r1, r3
 800e540:	d002      	beq.n	800e548 <__sflush_r+0x8c>
 800e542:	4628      	mov	r0, r5
 800e544:	f7fe fd58 	bl	800cff8 <_free_r>
 800e548:	2300      	movs	r3, #0
 800e54a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e54c:	e00d      	b.n	800e56a <__sflush_r+0xae>
 800e54e:	2301      	movs	r3, #1
 800e550:	4628      	mov	r0, r5
 800e552:	47b0      	blx	r6
 800e554:	4602      	mov	r2, r0
 800e556:	1c50      	adds	r0, r2, #1
 800e558:	d1c9      	bne.n	800e4ee <__sflush_r+0x32>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d0c6      	beq.n	800e4ee <__sflush_r+0x32>
 800e560:	2b1d      	cmp	r3, #29
 800e562:	d001      	beq.n	800e568 <__sflush_r+0xac>
 800e564:	2b16      	cmp	r3, #22
 800e566:	d11e      	bne.n	800e5a6 <__sflush_r+0xea>
 800e568:	602f      	str	r7, [r5, #0]
 800e56a:	2000      	movs	r0, #0
 800e56c:	e022      	b.n	800e5b4 <__sflush_r+0xf8>
 800e56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e572:	b21b      	sxth	r3, r3
 800e574:	e01b      	b.n	800e5ae <__sflush_r+0xf2>
 800e576:	690f      	ldr	r7, [r1, #16]
 800e578:	2f00      	cmp	r7, #0
 800e57a:	d0f6      	beq.n	800e56a <__sflush_r+0xae>
 800e57c:	0793      	lsls	r3, r2, #30
 800e57e:	680e      	ldr	r6, [r1, #0]
 800e580:	bf08      	it	eq
 800e582:	694b      	ldreq	r3, [r1, #20]
 800e584:	600f      	str	r7, [r1, #0]
 800e586:	bf18      	it	ne
 800e588:	2300      	movne	r3, #0
 800e58a:	eba6 0807 	sub.w	r8, r6, r7
 800e58e:	608b      	str	r3, [r1, #8]
 800e590:	f1b8 0f00 	cmp.w	r8, #0
 800e594:	dde9      	ble.n	800e56a <__sflush_r+0xae>
 800e596:	6a21      	ldr	r1, [r4, #32]
 800e598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e59a:	4643      	mov	r3, r8
 800e59c:	463a      	mov	r2, r7
 800e59e:	4628      	mov	r0, r5
 800e5a0:	47b0      	blx	r6
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	dc08      	bgt.n	800e5b8 <__sflush_r+0xfc>
 800e5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5ae:	81a3      	strh	r3, [r4, #12]
 800e5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b8:	4407      	add	r7, r0
 800e5ba:	eba8 0800 	sub.w	r8, r8, r0
 800e5be:	e7e7      	b.n	800e590 <__sflush_r+0xd4>
 800e5c0:	dfbffffe 	.word	0xdfbffffe

0800e5c4 <_fflush_r>:
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	690b      	ldr	r3, [r1, #16]
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b913      	cbnz	r3, 800e5d4 <_fflush_r+0x10>
 800e5ce:	2500      	movs	r5, #0
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	bd38      	pop	{r3, r4, r5, pc}
 800e5d4:	b118      	cbz	r0, 800e5de <_fflush_r+0x1a>
 800e5d6:	6a03      	ldr	r3, [r0, #32]
 800e5d8:	b90b      	cbnz	r3, 800e5de <_fflush_r+0x1a>
 800e5da:	f7fd fd41 	bl	800c060 <__sinit>
 800e5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d0f3      	beq.n	800e5ce <_fflush_r+0xa>
 800e5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5e8:	07d0      	lsls	r0, r2, #31
 800e5ea:	d404      	bmi.n	800e5f6 <_fflush_r+0x32>
 800e5ec:	0599      	lsls	r1, r3, #22
 800e5ee:	d402      	bmi.n	800e5f6 <_fflush_r+0x32>
 800e5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5f2:	f7fd fe94 	bl	800c31e <__retarget_lock_acquire_recursive>
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	f7ff ff5f 	bl	800e4bc <__sflush_r>
 800e5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e600:	07da      	lsls	r2, r3, #31
 800e602:	4605      	mov	r5, r0
 800e604:	d4e4      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	059b      	lsls	r3, r3, #22
 800e60a:	d4e1      	bmi.n	800e5d0 <_fflush_r+0xc>
 800e60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e60e:	f7fd fe87 	bl	800c320 <__retarget_lock_release_recursive>
 800e612:	e7dd      	b.n	800e5d0 <_fflush_r+0xc>

0800e614 <memmove>:
 800e614:	4288      	cmp	r0, r1
 800e616:	b510      	push	{r4, lr}
 800e618:	eb01 0402 	add.w	r4, r1, r2
 800e61c:	d902      	bls.n	800e624 <memmove+0x10>
 800e61e:	4284      	cmp	r4, r0
 800e620:	4623      	mov	r3, r4
 800e622:	d807      	bhi.n	800e634 <memmove+0x20>
 800e624:	1e43      	subs	r3, r0, #1
 800e626:	42a1      	cmp	r1, r4
 800e628:	d008      	beq.n	800e63c <memmove+0x28>
 800e62a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e62e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e632:	e7f8      	b.n	800e626 <memmove+0x12>
 800e634:	4402      	add	r2, r0
 800e636:	4601      	mov	r1, r0
 800e638:	428a      	cmp	r2, r1
 800e63a:	d100      	bne.n	800e63e <memmove+0x2a>
 800e63c:	bd10      	pop	{r4, pc}
 800e63e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e646:	e7f7      	b.n	800e638 <memmove+0x24>

0800e648 <_sbrk_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d06      	ldr	r5, [pc, #24]	@ (800e664 <_sbrk_r+0x1c>)
 800e64c:	2300      	movs	r3, #0
 800e64e:	4604      	mov	r4, r0
 800e650:	4608      	mov	r0, r1
 800e652:	602b      	str	r3, [r5, #0]
 800e654:	f7f7 f970 	bl	8005938 <_sbrk>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d102      	bne.n	800e662 <_sbrk_r+0x1a>
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	b103      	cbz	r3, 800e662 <_sbrk_r+0x1a>
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	20000c90 	.word	0x20000c90

0800e668 <__assert_func>:
 800e668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e66a:	4614      	mov	r4, r2
 800e66c:	461a      	mov	r2, r3
 800e66e:	4b09      	ldr	r3, [pc, #36]	@ (800e694 <__assert_func+0x2c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4605      	mov	r5, r0
 800e674:	68d8      	ldr	r0, [r3, #12]
 800e676:	b954      	cbnz	r4, 800e68e <__assert_func+0x26>
 800e678:	4b07      	ldr	r3, [pc, #28]	@ (800e698 <__assert_func+0x30>)
 800e67a:	461c      	mov	r4, r3
 800e67c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e680:	9100      	str	r1, [sp, #0]
 800e682:	462b      	mov	r3, r5
 800e684:	4905      	ldr	r1, [pc, #20]	@ (800e69c <__assert_func+0x34>)
 800e686:	f000 f84f 	bl	800e728 <fiprintf>
 800e68a:	f000 f85f 	bl	800e74c <abort>
 800e68e:	4b04      	ldr	r3, [pc, #16]	@ (800e6a0 <__assert_func+0x38>)
 800e690:	e7f4      	b.n	800e67c <__assert_func+0x14>
 800e692:	bf00      	nop
 800e694:	20000250 	.word	0x20000250
 800e698:	0801030c 	.word	0x0801030c
 800e69c:	080102de 	.word	0x080102de
 800e6a0:	080102d1 	.word	0x080102d1

0800e6a4 <_calloc_r>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	fba1 5402 	umull	r5, r4, r1, r2
 800e6aa:	b93c      	cbnz	r4, 800e6bc <_calloc_r+0x18>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	f7ff f851 	bl	800d754 <_malloc_r>
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	b928      	cbnz	r0, 800e6c2 <_calloc_r+0x1e>
 800e6b6:	2600      	movs	r6, #0
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	220c      	movs	r2, #12
 800e6be:	6002      	str	r2, [r0, #0]
 800e6c0:	e7f9      	b.n	800e6b6 <_calloc_r+0x12>
 800e6c2:	462a      	mov	r2, r5
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	f7fd fd78 	bl	800c1ba <memset>
 800e6ca:	e7f5      	b.n	800e6b8 <_calloc_r+0x14>

0800e6cc <_realloc_r>:
 800e6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d0:	4680      	mov	r8, r0
 800e6d2:	4615      	mov	r5, r2
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	b921      	cbnz	r1, 800e6e2 <_realloc_r+0x16>
 800e6d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6dc:	4611      	mov	r1, r2
 800e6de:	f7ff b839 	b.w	800d754 <_malloc_r>
 800e6e2:	b92a      	cbnz	r2, 800e6f0 <_realloc_r+0x24>
 800e6e4:	f7fe fc88 	bl	800cff8 <_free_r>
 800e6e8:	2400      	movs	r4, #0
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f0:	f000 f833 	bl	800e75a <_malloc_usable_size_r>
 800e6f4:	4285      	cmp	r5, r0
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	d802      	bhi.n	800e700 <_realloc_r+0x34>
 800e6fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e6fe:	d8f4      	bhi.n	800e6ea <_realloc_r+0x1e>
 800e700:	4629      	mov	r1, r5
 800e702:	4640      	mov	r0, r8
 800e704:	f7ff f826 	bl	800d754 <_malloc_r>
 800e708:	4607      	mov	r7, r0
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0ec      	beq.n	800e6e8 <_realloc_r+0x1c>
 800e70e:	42b5      	cmp	r5, r6
 800e710:	462a      	mov	r2, r5
 800e712:	4621      	mov	r1, r4
 800e714:	bf28      	it	cs
 800e716:	4632      	movcs	r2, r6
 800e718:	f7fd fe0b 	bl	800c332 <memcpy>
 800e71c:	4621      	mov	r1, r4
 800e71e:	4640      	mov	r0, r8
 800e720:	f7fe fc6a 	bl	800cff8 <_free_r>
 800e724:	463c      	mov	r4, r7
 800e726:	e7e0      	b.n	800e6ea <_realloc_r+0x1e>

0800e728 <fiprintf>:
 800e728:	b40e      	push	{r1, r2, r3}
 800e72a:	b503      	push	{r0, r1, lr}
 800e72c:	4601      	mov	r1, r0
 800e72e:	ab03      	add	r3, sp, #12
 800e730:	4805      	ldr	r0, [pc, #20]	@ (800e748 <fiprintf+0x20>)
 800e732:	f853 2b04 	ldr.w	r2, [r3], #4
 800e736:	6800      	ldr	r0, [r0, #0]
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	f000 f83f 	bl	800e7bc <_vfiprintf_r>
 800e73e:	b002      	add	sp, #8
 800e740:	f85d eb04 	ldr.w	lr, [sp], #4
 800e744:	b003      	add	sp, #12
 800e746:	4770      	bx	lr
 800e748:	20000250 	.word	0x20000250

0800e74c <abort>:
 800e74c:	b508      	push	{r3, lr}
 800e74e:	2006      	movs	r0, #6
 800e750:	f000 fa08 	bl	800eb64 <raise>
 800e754:	2001      	movs	r0, #1
 800e756:	f7f7 f877 	bl	8005848 <_exit>

0800e75a <_malloc_usable_size_r>:
 800e75a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e75e:	1f18      	subs	r0, r3, #4
 800e760:	2b00      	cmp	r3, #0
 800e762:	bfbc      	itt	lt
 800e764:	580b      	ldrlt	r3, [r1, r0]
 800e766:	18c0      	addlt	r0, r0, r3
 800e768:	4770      	bx	lr

0800e76a <__sfputc_r>:
 800e76a:	6893      	ldr	r3, [r2, #8]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	b410      	push	{r4}
 800e772:	6093      	str	r3, [r2, #8]
 800e774:	da08      	bge.n	800e788 <__sfputc_r+0x1e>
 800e776:	6994      	ldr	r4, [r2, #24]
 800e778:	42a3      	cmp	r3, r4
 800e77a:	db01      	blt.n	800e780 <__sfputc_r+0x16>
 800e77c:	290a      	cmp	r1, #10
 800e77e:	d103      	bne.n	800e788 <__sfputc_r+0x1e>
 800e780:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e784:	f000 b932 	b.w	800e9ec <__swbuf_r>
 800e788:	6813      	ldr	r3, [r2, #0]
 800e78a:	1c58      	adds	r0, r3, #1
 800e78c:	6010      	str	r0, [r2, #0]
 800e78e:	7019      	strb	r1, [r3, #0]
 800e790:	4608      	mov	r0, r1
 800e792:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <__sfputs_r>:
 800e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79a:	4606      	mov	r6, r0
 800e79c:	460f      	mov	r7, r1
 800e79e:	4614      	mov	r4, r2
 800e7a0:	18d5      	adds	r5, r2, r3
 800e7a2:	42ac      	cmp	r4, r5
 800e7a4:	d101      	bne.n	800e7aa <__sfputs_r+0x12>
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	e007      	b.n	800e7ba <__sfputs_r+0x22>
 800e7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ae:	463a      	mov	r2, r7
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f7ff ffda 	bl	800e76a <__sfputc_r>
 800e7b6:	1c43      	adds	r3, r0, #1
 800e7b8:	d1f3      	bne.n	800e7a2 <__sfputs_r+0xa>
 800e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7bc <_vfiprintf_r>:
 800e7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	b09d      	sub	sp, #116	@ 0x74
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	4698      	mov	r8, r3
 800e7c8:	4606      	mov	r6, r0
 800e7ca:	b118      	cbz	r0, 800e7d4 <_vfiprintf_r+0x18>
 800e7cc:	6a03      	ldr	r3, [r0, #32]
 800e7ce:	b90b      	cbnz	r3, 800e7d4 <_vfiprintf_r+0x18>
 800e7d0:	f7fd fc46 	bl	800c060 <__sinit>
 800e7d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7d6:	07d9      	lsls	r1, r3, #31
 800e7d8:	d405      	bmi.n	800e7e6 <_vfiprintf_r+0x2a>
 800e7da:	89ab      	ldrh	r3, [r5, #12]
 800e7dc:	059a      	lsls	r2, r3, #22
 800e7de:	d402      	bmi.n	800e7e6 <_vfiprintf_r+0x2a>
 800e7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7e2:	f7fd fd9c 	bl	800c31e <__retarget_lock_acquire_recursive>
 800e7e6:	89ab      	ldrh	r3, [r5, #12]
 800e7e8:	071b      	lsls	r3, r3, #28
 800e7ea:	d501      	bpl.n	800e7f0 <_vfiprintf_r+0x34>
 800e7ec:	692b      	ldr	r3, [r5, #16]
 800e7ee:	b99b      	cbnz	r3, 800e818 <_vfiprintf_r+0x5c>
 800e7f0:	4629      	mov	r1, r5
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	f000 f938 	bl	800ea68 <__swsetup_r>
 800e7f8:	b170      	cbz	r0, 800e818 <_vfiprintf_r+0x5c>
 800e7fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7fc:	07dc      	lsls	r4, r3, #31
 800e7fe:	d504      	bpl.n	800e80a <_vfiprintf_r+0x4e>
 800e800:	f04f 30ff 	mov.w	r0, #4294967295
 800e804:	b01d      	add	sp, #116	@ 0x74
 800e806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80a:	89ab      	ldrh	r3, [r5, #12]
 800e80c:	0598      	lsls	r0, r3, #22
 800e80e:	d4f7      	bmi.n	800e800 <_vfiprintf_r+0x44>
 800e810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e812:	f7fd fd85 	bl	800c320 <__retarget_lock_release_recursive>
 800e816:	e7f3      	b.n	800e800 <_vfiprintf_r+0x44>
 800e818:	2300      	movs	r3, #0
 800e81a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e81c:	2320      	movs	r3, #32
 800e81e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e822:	f8cd 800c 	str.w	r8, [sp, #12]
 800e826:	2330      	movs	r3, #48	@ 0x30
 800e828:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9d8 <_vfiprintf_r+0x21c>
 800e82c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e830:	f04f 0901 	mov.w	r9, #1
 800e834:	4623      	mov	r3, r4
 800e836:	469a      	mov	sl, r3
 800e838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e83c:	b10a      	cbz	r2, 800e842 <_vfiprintf_r+0x86>
 800e83e:	2a25      	cmp	r2, #37	@ 0x25
 800e840:	d1f9      	bne.n	800e836 <_vfiprintf_r+0x7a>
 800e842:	ebba 0b04 	subs.w	fp, sl, r4
 800e846:	d00b      	beq.n	800e860 <_vfiprintf_r+0xa4>
 800e848:	465b      	mov	r3, fp
 800e84a:	4622      	mov	r2, r4
 800e84c:	4629      	mov	r1, r5
 800e84e:	4630      	mov	r0, r6
 800e850:	f7ff ffa2 	bl	800e798 <__sfputs_r>
 800e854:	3001      	adds	r0, #1
 800e856:	f000 80a7 	beq.w	800e9a8 <_vfiprintf_r+0x1ec>
 800e85a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e85c:	445a      	add	r2, fp
 800e85e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e860:	f89a 3000 	ldrb.w	r3, [sl]
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 809f 	beq.w	800e9a8 <_vfiprintf_r+0x1ec>
 800e86a:	2300      	movs	r3, #0
 800e86c:	f04f 32ff 	mov.w	r2, #4294967295
 800e870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e874:	f10a 0a01 	add.w	sl, sl, #1
 800e878:	9304      	str	r3, [sp, #16]
 800e87a:	9307      	str	r3, [sp, #28]
 800e87c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e880:	931a      	str	r3, [sp, #104]	@ 0x68
 800e882:	4654      	mov	r4, sl
 800e884:	2205      	movs	r2, #5
 800e886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e88a:	4853      	ldr	r0, [pc, #332]	@ (800e9d8 <_vfiprintf_r+0x21c>)
 800e88c:	f7f1 fcc0 	bl	8000210 <memchr>
 800e890:	9a04      	ldr	r2, [sp, #16]
 800e892:	b9d8      	cbnz	r0, 800e8cc <_vfiprintf_r+0x110>
 800e894:	06d1      	lsls	r1, r2, #27
 800e896:	bf44      	itt	mi
 800e898:	2320      	movmi	r3, #32
 800e89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e89e:	0713      	lsls	r3, r2, #28
 800e8a0:	bf44      	itt	mi
 800e8a2:	232b      	movmi	r3, #43	@ 0x2b
 800e8a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8ae:	d015      	beq.n	800e8dc <_vfiprintf_r+0x120>
 800e8b0:	9a07      	ldr	r2, [sp, #28]
 800e8b2:	4654      	mov	r4, sl
 800e8b4:	2000      	movs	r0, #0
 800e8b6:	f04f 0c0a 	mov.w	ip, #10
 800e8ba:	4621      	mov	r1, r4
 800e8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8c0:	3b30      	subs	r3, #48	@ 0x30
 800e8c2:	2b09      	cmp	r3, #9
 800e8c4:	d94b      	bls.n	800e95e <_vfiprintf_r+0x1a2>
 800e8c6:	b1b0      	cbz	r0, 800e8f6 <_vfiprintf_r+0x13a>
 800e8c8:	9207      	str	r2, [sp, #28]
 800e8ca:	e014      	b.n	800e8f6 <_vfiprintf_r+0x13a>
 800e8cc:	eba0 0308 	sub.w	r3, r0, r8
 800e8d0:	fa09 f303 	lsl.w	r3, r9, r3
 800e8d4:	4313      	orrs	r3, r2
 800e8d6:	9304      	str	r3, [sp, #16]
 800e8d8:	46a2      	mov	sl, r4
 800e8da:	e7d2      	b.n	800e882 <_vfiprintf_r+0xc6>
 800e8dc:	9b03      	ldr	r3, [sp, #12]
 800e8de:	1d19      	adds	r1, r3, #4
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	9103      	str	r1, [sp, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	bfbb      	ittet	lt
 800e8e8:	425b      	neglt	r3, r3
 800e8ea:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ee:	9307      	strge	r3, [sp, #28]
 800e8f0:	9307      	strlt	r3, [sp, #28]
 800e8f2:	bfb8      	it	lt
 800e8f4:	9204      	strlt	r2, [sp, #16]
 800e8f6:	7823      	ldrb	r3, [r4, #0]
 800e8f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8fa:	d10a      	bne.n	800e912 <_vfiprintf_r+0x156>
 800e8fc:	7863      	ldrb	r3, [r4, #1]
 800e8fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e900:	d132      	bne.n	800e968 <_vfiprintf_r+0x1ac>
 800e902:	9b03      	ldr	r3, [sp, #12]
 800e904:	1d1a      	adds	r2, r3, #4
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	9203      	str	r2, [sp, #12]
 800e90a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e90e:	3402      	adds	r4, #2
 800e910:	9305      	str	r3, [sp, #20]
 800e912:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9e8 <_vfiprintf_r+0x22c>
 800e916:	7821      	ldrb	r1, [r4, #0]
 800e918:	2203      	movs	r2, #3
 800e91a:	4650      	mov	r0, sl
 800e91c:	f7f1 fc78 	bl	8000210 <memchr>
 800e920:	b138      	cbz	r0, 800e932 <_vfiprintf_r+0x176>
 800e922:	9b04      	ldr	r3, [sp, #16]
 800e924:	eba0 000a 	sub.w	r0, r0, sl
 800e928:	2240      	movs	r2, #64	@ 0x40
 800e92a:	4082      	lsls	r2, r0
 800e92c:	4313      	orrs	r3, r2
 800e92e:	3401      	adds	r4, #1
 800e930:	9304      	str	r3, [sp, #16]
 800e932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e936:	4829      	ldr	r0, [pc, #164]	@ (800e9dc <_vfiprintf_r+0x220>)
 800e938:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e93c:	2206      	movs	r2, #6
 800e93e:	f7f1 fc67 	bl	8000210 <memchr>
 800e942:	2800      	cmp	r0, #0
 800e944:	d03f      	beq.n	800e9c6 <_vfiprintf_r+0x20a>
 800e946:	4b26      	ldr	r3, [pc, #152]	@ (800e9e0 <_vfiprintf_r+0x224>)
 800e948:	bb1b      	cbnz	r3, 800e992 <_vfiprintf_r+0x1d6>
 800e94a:	9b03      	ldr	r3, [sp, #12]
 800e94c:	3307      	adds	r3, #7
 800e94e:	f023 0307 	bic.w	r3, r3, #7
 800e952:	3308      	adds	r3, #8
 800e954:	9303      	str	r3, [sp, #12]
 800e956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e958:	443b      	add	r3, r7
 800e95a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e95c:	e76a      	b.n	800e834 <_vfiprintf_r+0x78>
 800e95e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e962:	460c      	mov	r4, r1
 800e964:	2001      	movs	r0, #1
 800e966:	e7a8      	b.n	800e8ba <_vfiprintf_r+0xfe>
 800e968:	2300      	movs	r3, #0
 800e96a:	3401      	adds	r4, #1
 800e96c:	9305      	str	r3, [sp, #20]
 800e96e:	4619      	mov	r1, r3
 800e970:	f04f 0c0a 	mov.w	ip, #10
 800e974:	4620      	mov	r0, r4
 800e976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e97a:	3a30      	subs	r2, #48	@ 0x30
 800e97c:	2a09      	cmp	r2, #9
 800e97e:	d903      	bls.n	800e988 <_vfiprintf_r+0x1cc>
 800e980:	2b00      	cmp	r3, #0
 800e982:	d0c6      	beq.n	800e912 <_vfiprintf_r+0x156>
 800e984:	9105      	str	r1, [sp, #20]
 800e986:	e7c4      	b.n	800e912 <_vfiprintf_r+0x156>
 800e988:	fb0c 2101 	mla	r1, ip, r1, r2
 800e98c:	4604      	mov	r4, r0
 800e98e:	2301      	movs	r3, #1
 800e990:	e7f0      	b.n	800e974 <_vfiprintf_r+0x1b8>
 800e992:	ab03      	add	r3, sp, #12
 800e994:	9300      	str	r3, [sp, #0]
 800e996:	462a      	mov	r2, r5
 800e998:	4b12      	ldr	r3, [pc, #72]	@ (800e9e4 <_vfiprintf_r+0x228>)
 800e99a:	a904      	add	r1, sp, #16
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7fc ff1b 	bl	800b7d8 <_printf_float>
 800e9a2:	4607      	mov	r7, r0
 800e9a4:	1c78      	adds	r0, r7, #1
 800e9a6:	d1d6      	bne.n	800e956 <_vfiprintf_r+0x19a>
 800e9a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9aa:	07d9      	lsls	r1, r3, #31
 800e9ac:	d405      	bmi.n	800e9ba <_vfiprintf_r+0x1fe>
 800e9ae:	89ab      	ldrh	r3, [r5, #12]
 800e9b0:	059a      	lsls	r2, r3, #22
 800e9b2:	d402      	bmi.n	800e9ba <_vfiprintf_r+0x1fe>
 800e9b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9b6:	f7fd fcb3 	bl	800c320 <__retarget_lock_release_recursive>
 800e9ba:	89ab      	ldrh	r3, [r5, #12]
 800e9bc:	065b      	lsls	r3, r3, #25
 800e9be:	f53f af1f 	bmi.w	800e800 <_vfiprintf_r+0x44>
 800e9c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9c4:	e71e      	b.n	800e804 <_vfiprintf_r+0x48>
 800e9c6:	ab03      	add	r3, sp, #12
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	462a      	mov	r2, r5
 800e9cc:	4b05      	ldr	r3, [pc, #20]	@ (800e9e4 <_vfiprintf_r+0x228>)
 800e9ce:	a904      	add	r1, sp, #16
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f7fd f999 	bl	800bd08 <_printf_i>
 800e9d6:	e7e4      	b.n	800e9a2 <_vfiprintf_r+0x1e6>
 800e9d8:	080102c0 	.word	0x080102c0
 800e9dc:	080102ca 	.word	0x080102ca
 800e9e0:	0800b7d9 	.word	0x0800b7d9
 800e9e4:	0800e799 	.word	0x0800e799
 800e9e8:	080102c6 	.word	0x080102c6

0800e9ec <__swbuf_r>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	460e      	mov	r6, r1
 800e9f0:	4614      	mov	r4, r2
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	b118      	cbz	r0, 800e9fe <__swbuf_r+0x12>
 800e9f6:	6a03      	ldr	r3, [r0, #32]
 800e9f8:	b90b      	cbnz	r3, 800e9fe <__swbuf_r+0x12>
 800e9fa:	f7fd fb31 	bl	800c060 <__sinit>
 800e9fe:	69a3      	ldr	r3, [r4, #24]
 800ea00:	60a3      	str	r3, [r4, #8]
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	071a      	lsls	r2, r3, #28
 800ea06:	d501      	bpl.n	800ea0c <__swbuf_r+0x20>
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	b943      	cbnz	r3, 800ea1e <__swbuf_r+0x32>
 800ea0c:	4621      	mov	r1, r4
 800ea0e:	4628      	mov	r0, r5
 800ea10:	f000 f82a 	bl	800ea68 <__swsetup_r>
 800ea14:	b118      	cbz	r0, 800ea1e <__swbuf_r+0x32>
 800ea16:	f04f 37ff 	mov.w	r7, #4294967295
 800ea1a:	4638      	mov	r0, r7
 800ea1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	6922      	ldr	r2, [r4, #16]
 800ea22:	1a98      	subs	r0, r3, r2
 800ea24:	6963      	ldr	r3, [r4, #20]
 800ea26:	b2f6      	uxtb	r6, r6
 800ea28:	4283      	cmp	r3, r0
 800ea2a:	4637      	mov	r7, r6
 800ea2c:	dc05      	bgt.n	800ea3a <__swbuf_r+0x4e>
 800ea2e:	4621      	mov	r1, r4
 800ea30:	4628      	mov	r0, r5
 800ea32:	f7ff fdc7 	bl	800e5c4 <_fflush_r>
 800ea36:	2800      	cmp	r0, #0
 800ea38:	d1ed      	bne.n	800ea16 <__swbuf_r+0x2a>
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	60a3      	str	r3, [r4, #8]
 800ea40:	6823      	ldr	r3, [r4, #0]
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	6022      	str	r2, [r4, #0]
 800ea46:	701e      	strb	r6, [r3, #0]
 800ea48:	6962      	ldr	r2, [r4, #20]
 800ea4a:	1c43      	adds	r3, r0, #1
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d004      	beq.n	800ea5a <__swbuf_r+0x6e>
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	07db      	lsls	r3, r3, #31
 800ea54:	d5e1      	bpl.n	800ea1a <__swbuf_r+0x2e>
 800ea56:	2e0a      	cmp	r6, #10
 800ea58:	d1df      	bne.n	800ea1a <__swbuf_r+0x2e>
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	f7ff fdb1 	bl	800e5c4 <_fflush_r>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	d0d9      	beq.n	800ea1a <__swbuf_r+0x2e>
 800ea66:	e7d6      	b.n	800ea16 <__swbuf_r+0x2a>

0800ea68 <__swsetup_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4b29      	ldr	r3, [pc, #164]	@ (800eb10 <__swsetup_r+0xa8>)
 800ea6c:	4605      	mov	r5, r0
 800ea6e:	6818      	ldr	r0, [r3, #0]
 800ea70:	460c      	mov	r4, r1
 800ea72:	b118      	cbz	r0, 800ea7c <__swsetup_r+0x14>
 800ea74:	6a03      	ldr	r3, [r0, #32]
 800ea76:	b90b      	cbnz	r3, 800ea7c <__swsetup_r+0x14>
 800ea78:	f7fd faf2 	bl	800c060 <__sinit>
 800ea7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea80:	0719      	lsls	r1, r3, #28
 800ea82:	d422      	bmi.n	800eaca <__swsetup_r+0x62>
 800ea84:	06da      	lsls	r2, r3, #27
 800ea86:	d407      	bmi.n	800ea98 <__swsetup_r+0x30>
 800ea88:	2209      	movs	r2, #9
 800ea8a:	602a      	str	r2, [r5, #0]
 800ea8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea90:	81a3      	strh	r3, [r4, #12]
 800ea92:	f04f 30ff 	mov.w	r0, #4294967295
 800ea96:	e033      	b.n	800eb00 <__swsetup_r+0x98>
 800ea98:	0758      	lsls	r0, r3, #29
 800ea9a:	d512      	bpl.n	800eac2 <__swsetup_r+0x5a>
 800ea9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea9e:	b141      	cbz	r1, 800eab2 <__swsetup_r+0x4a>
 800eaa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eaa4:	4299      	cmp	r1, r3
 800eaa6:	d002      	beq.n	800eaae <__swsetup_r+0x46>
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7fe faa5 	bl	800cff8 <_free_r>
 800eaae:	2300      	movs	r3, #0
 800eab0:	6363      	str	r3, [r4, #52]	@ 0x34
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	2300      	movs	r3, #0
 800eabc:	6063      	str	r3, [r4, #4]
 800eabe:	6923      	ldr	r3, [r4, #16]
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	f043 0308 	orr.w	r3, r3, #8
 800eac8:	81a3      	strh	r3, [r4, #12]
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	b94b      	cbnz	r3, 800eae2 <__swsetup_r+0x7a>
 800eace:	89a3      	ldrh	r3, [r4, #12]
 800ead0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ead4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ead8:	d003      	beq.n	800eae2 <__swsetup_r+0x7a>
 800eada:	4621      	mov	r1, r4
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f883 	bl	800ebe8 <__smakebuf_r>
 800eae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eae6:	f013 0201 	ands.w	r2, r3, #1
 800eaea:	d00a      	beq.n	800eb02 <__swsetup_r+0x9a>
 800eaec:	2200      	movs	r2, #0
 800eaee:	60a2      	str	r2, [r4, #8]
 800eaf0:	6962      	ldr	r2, [r4, #20]
 800eaf2:	4252      	negs	r2, r2
 800eaf4:	61a2      	str	r2, [r4, #24]
 800eaf6:	6922      	ldr	r2, [r4, #16]
 800eaf8:	b942      	cbnz	r2, 800eb0c <__swsetup_r+0xa4>
 800eafa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eafe:	d1c5      	bne.n	800ea8c <__swsetup_r+0x24>
 800eb00:	bd38      	pop	{r3, r4, r5, pc}
 800eb02:	0799      	lsls	r1, r3, #30
 800eb04:	bf58      	it	pl
 800eb06:	6962      	ldrpl	r2, [r4, #20]
 800eb08:	60a2      	str	r2, [r4, #8]
 800eb0a:	e7f4      	b.n	800eaf6 <__swsetup_r+0x8e>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	e7f7      	b.n	800eb00 <__swsetup_r+0x98>
 800eb10:	20000250 	.word	0x20000250

0800eb14 <_raise_r>:
 800eb14:	291f      	cmp	r1, #31
 800eb16:	b538      	push	{r3, r4, r5, lr}
 800eb18:	4605      	mov	r5, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	d904      	bls.n	800eb28 <_raise_r+0x14>
 800eb1e:	2316      	movs	r3, #22
 800eb20:	6003      	str	r3, [r0, #0]
 800eb22:	f04f 30ff 	mov.w	r0, #4294967295
 800eb26:	bd38      	pop	{r3, r4, r5, pc}
 800eb28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb2a:	b112      	cbz	r2, 800eb32 <_raise_r+0x1e>
 800eb2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb30:	b94b      	cbnz	r3, 800eb46 <_raise_r+0x32>
 800eb32:	4628      	mov	r0, r5
 800eb34:	f000 f830 	bl	800eb98 <_getpid_r>
 800eb38:	4622      	mov	r2, r4
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb42:	f000 b817 	b.w	800eb74 <_kill_r>
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d00a      	beq.n	800eb60 <_raise_r+0x4c>
 800eb4a:	1c59      	adds	r1, r3, #1
 800eb4c:	d103      	bne.n	800eb56 <_raise_r+0x42>
 800eb4e:	2316      	movs	r3, #22
 800eb50:	6003      	str	r3, [r0, #0]
 800eb52:	2001      	movs	r0, #1
 800eb54:	e7e7      	b.n	800eb26 <_raise_r+0x12>
 800eb56:	2100      	movs	r1, #0
 800eb58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	4798      	blx	r3
 800eb60:	2000      	movs	r0, #0
 800eb62:	e7e0      	b.n	800eb26 <_raise_r+0x12>

0800eb64 <raise>:
 800eb64:	4b02      	ldr	r3, [pc, #8]	@ (800eb70 <raise+0xc>)
 800eb66:	4601      	mov	r1, r0
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	f7ff bfd3 	b.w	800eb14 <_raise_r>
 800eb6e:	bf00      	nop
 800eb70:	20000250 	.word	0x20000250

0800eb74 <_kill_r>:
 800eb74:	b538      	push	{r3, r4, r5, lr}
 800eb76:	4d07      	ldr	r5, [pc, #28]	@ (800eb94 <_kill_r+0x20>)
 800eb78:	2300      	movs	r3, #0
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	4608      	mov	r0, r1
 800eb7e:	4611      	mov	r1, r2
 800eb80:	602b      	str	r3, [r5, #0]
 800eb82:	f7f6 fe51 	bl	8005828 <_kill>
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	d102      	bne.n	800eb90 <_kill_r+0x1c>
 800eb8a:	682b      	ldr	r3, [r5, #0]
 800eb8c:	b103      	cbz	r3, 800eb90 <_kill_r+0x1c>
 800eb8e:	6023      	str	r3, [r4, #0]
 800eb90:	bd38      	pop	{r3, r4, r5, pc}
 800eb92:	bf00      	nop
 800eb94:	20000c90 	.word	0x20000c90

0800eb98 <_getpid_r>:
 800eb98:	f7f6 be3e 	b.w	8005818 <_getpid>

0800eb9c <__swhatbuf_r>:
 800eb9c:	b570      	push	{r4, r5, r6, lr}
 800eb9e:	460c      	mov	r4, r1
 800eba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba4:	2900      	cmp	r1, #0
 800eba6:	b096      	sub	sp, #88	@ 0x58
 800eba8:	4615      	mov	r5, r2
 800ebaa:	461e      	mov	r6, r3
 800ebac:	da0d      	bge.n	800ebca <__swhatbuf_r+0x2e>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ebb4:	f04f 0100 	mov.w	r1, #0
 800ebb8:	bf14      	ite	ne
 800ebba:	2340      	movne	r3, #64	@ 0x40
 800ebbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	6031      	str	r1, [r6, #0]
 800ebc4:	602b      	str	r3, [r5, #0]
 800ebc6:	b016      	add	sp, #88	@ 0x58
 800ebc8:	bd70      	pop	{r4, r5, r6, pc}
 800ebca:	466a      	mov	r2, sp
 800ebcc:	f000 f848 	bl	800ec60 <_fstat_r>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	dbec      	blt.n	800ebae <__swhatbuf_r+0x12>
 800ebd4:	9901      	ldr	r1, [sp, #4]
 800ebd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ebda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ebde:	4259      	negs	r1, r3
 800ebe0:	4159      	adcs	r1, r3
 800ebe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebe6:	e7eb      	b.n	800ebc0 <__swhatbuf_r+0x24>

0800ebe8 <__smakebuf_r>:
 800ebe8:	898b      	ldrh	r3, [r1, #12]
 800ebea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebec:	079d      	lsls	r5, r3, #30
 800ebee:	4606      	mov	r6, r0
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	d507      	bpl.n	800ec04 <__smakebuf_r+0x1c>
 800ebf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ebf8:	6023      	str	r3, [r4, #0]
 800ebfa:	6123      	str	r3, [r4, #16]
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	6163      	str	r3, [r4, #20]
 800ec00:	b003      	add	sp, #12
 800ec02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec04:	ab01      	add	r3, sp, #4
 800ec06:	466a      	mov	r2, sp
 800ec08:	f7ff ffc8 	bl	800eb9c <__swhatbuf_r>
 800ec0c:	9f00      	ldr	r7, [sp, #0]
 800ec0e:	4605      	mov	r5, r0
 800ec10:	4639      	mov	r1, r7
 800ec12:	4630      	mov	r0, r6
 800ec14:	f7fe fd9e 	bl	800d754 <_malloc_r>
 800ec18:	b948      	cbnz	r0, 800ec2e <__smakebuf_r+0x46>
 800ec1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec1e:	059a      	lsls	r2, r3, #22
 800ec20:	d4ee      	bmi.n	800ec00 <__smakebuf_r+0x18>
 800ec22:	f023 0303 	bic.w	r3, r3, #3
 800ec26:	f043 0302 	orr.w	r3, r3, #2
 800ec2a:	81a3      	strh	r3, [r4, #12]
 800ec2c:	e7e2      	b.n	800ebf4 <__smakebuf_r+0xc>
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	6020      	str	r0, [r4, #0]
 800ec32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec36:	81a3      	strh	r3, [r4, #12]
 800ec38:	9b01      	ldr	r3, [sp, #4]
 800ec3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ec3e:	b15b      	cbz	r3, 800ec58 <__smakebuf_r+0x70>
 800ec40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec44:	4630      	mov	r0, r6
 800ec46:	f000 f81d 	bl	800ec84 <_isatty_r>
 800ec4a:	b128      	cbz	r0, 800ec58 <__smakebuf_r+0x70>
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	f023 0303 	bic.w	r3, r3, #3
 800ec52:	f043 0301 	orr.w	r3, r3, #1
 800ec56:	81a3      	strh	r3, [r4, #12]
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	431d      	orrs	r5, r3
 800ec5c:	81a5      	strh	r5, [r4, #12]
 800ec5e:	e7cf      	b.n	800ec00 <__smakebuf_r+0x18>

0800ec60 <_fstat_r>:
 800ec60:	b538      	push	{r3, r4, r5, lr}
 800ec62:	4d07      	ldr	r5, [pc, #28]	@ (800ec80 <_fstat_r+0x20>)
 800ec64:	2300      	movs	r3, #0
 800ec66:	4604      	mov	r4, r0
 800ec68:	4608      	mov	r0, r1
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	602b      	str	r3, [r5, #0]
 800ec6e:	f7f6 fe3b 	bl	80058e8 <_fstat>
 800ec72:	1c43      	adds	r3, r0, #1
 800ec74:	d102      	bne.n	800ec7c <_fstat_r+0x1c>
 800ec76:	682b      	ldr	r3, [r5, #0]
 800ec78:	b103      	cbz	r3, 800ec7c <_fstat_r+0x1c>
 800ec7a:	6023      	str	r3, [r4, #0]
 800ec7c:	bd38      	pop	{r3, r4, r5, pc}
 800ec7e:	bf00      	nop
 800ec80:	20000c90 	.word	0x20000c90

0800ec84 <_isatty_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d06      	ldr	r5, [pc, #24]	@ (800eca0 <_isatty_r+0x1c>)
 800ec88:	2300      	movs	r3, #0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	4608      	mov	r0, r1
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	f7f6 fe3a 	bl	8005908 <_isatty>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d102      	bne.n	800ec9e <_isatty_r+0x1a>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	b103      	cbz	r3, 800ec9e <_isatty_r+0x1a>
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	bd38      	pop	{r3, r4, r5, pc}
 800eca0:	20000c90 	.word	0x20000c90

0800eca4 <atan2>:
 800eca4:	f000 b9d0 	b.w	800f048 <__ieee754_atan2>

0800eca8 <sqrt>:
 800eca8:	b538      	push	{r3, r4, r5, lr}
 800ecaa:	ed2d 8b02 	vpush	{d8}
 800ecae:	ec55 4b10 	vmov	r4, r5, d0
 800ecb2:	f000 f8a5 	bl	800ee00 <__ieee754_sqrt>
 800ecb6:	4622      	mov	r2, r4
 800ecb8:	462b      	mov	r3, r5
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	eeb0 8a40 	vmov.f32	s16, s0
 800ecc2:	eef0 8a60 	vmov.f32	s17, s1
 800ecc6:	f7f1 ff51 	bl	8000b6c <__aeabi_dcmpun>
 800ecca:	b990      	cbnz	r0, 800ecf2 <sqrt+0x4a>
 800eccc:	2200      	movs	r2, #0
 800ecce:	2300      	movs	r3, #0
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	f7f1 ff22 	bl	8000b1c <__aeabi_dcmplt>
 800ecd8:	b158      	cbz	r0, 800ecf2 <sqrt+0x4a>
 800ecda:	f7fd faf5 	bl	800c2c8 <__errno>
 800ecde:	2321      	movs	r3, #33	@ 0x21
 800ece0:	6003      	str	r3, [r0, #0]
 800ece2:	2200      	movs	r2, #0
 800ece4:	2300      	movs	r3, #0
 800ece6:	4610      	mov	r0, r2
 800ece8:	4619      	mov	r1, r3
 800ecea:	f7f1 fdcf 	bl	800088c <__aeabi_ddiv>
 800ecee:	ec41 0b18 	vmov	d8, r0, r1
 800ecf2:	eeb0 0a48 	vmov.f32	s0, s16
 800ecf6:	eef0 0a68 	vmov.f32	s1, s17
 800ecfa:	ecbd 8b02 	vpop	{d8}
 800ecfe:	bd38      	pop	{r3, r4, r5, pc}

0800ed00 <powf>:
 800ed00:	b508      	push	{r3, lr}
 800ed02:	ed2d 8b04 	vpush	{d8-d9}
 800ed06:	eeb0 8a60 	vmov.f32	s16, s1
 800ed0a:	eeb0 9a40 	vmov.f32	s18, s0
 800ed0e:	f000 fc03 	bl	800f518 <__ieee754_powf>
 800ed12:	eeb4 8a48 	vcmp.f32	s16, s16
 800ed16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1a:	eef0 8a40 	vmov.f32	s17, s0
 800ed1e:	d63e      	bvs.n	800ed9e <powf+0x9e>
 800ed20:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ed24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed28:	d112      	bne.n	800ed50 <powf+0x50>
 800ed2a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	d039      	beq.n	800eda8 <powf+0xa8>
 800ed34:	eeb0 0a48 	vmov.f32	s0, s16
 800ed38:	f000 f858 	bl	800edec <finitef>
 800ed3c:	b378      	cbz	r0, 800ed9e <powf+0x9e>
 800ed3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ed42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed46:	d52a      	bpl.n	800ed9e <powf+0x9e>
 800ed48:	f7fd fabe 	bl	800c2c8 <__errno>
 800ed4c:	2322      	movs	r3, #34	@ 0x22
 800ed4e:	e014      	b.n	800ed7a <powf+0x7a>
 800ed50:	f000 f84c 	bl	800edec <finitef>
 800ed54:	b998      	cbnz	r0, 800ed7e <powf+0x7e>
 800ed56:	eeb0 0a49 	vmov.f32	s0, s18
 800ed5a:	f000 f847 	bl	800edec <finitef>
 800ed5e:	b170      	cbz	r0, 800ed7e <powf+0x7e>
 800ed60:	eeb0 0a48 	vmov.f32	s0, s16
 800ed64:	f000 f842 	bl	800edec <finitef>
 800ed68:	b148      	cbz	r0, 800ed7e <powf+0x7e>
 800ed6a:	eef4 8a68 	vcmp.f32	s17, s17
 800ed6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed72:	d7e9      	bvc.n	800ed48 <powf+0x48>
 800ed74:	f7fd faa8 	bl	800c2c8 <__errno>
 800ed78:	2321      	movs	r3, #33	@ 0x21
 800ed7a:	6003      	str	r3, [r0, #0]
 800ed7c:	e00f      	b.n	800ed9e <powf+0x9e>
 800ed7e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	d10a      	bne.n	800ed9e <powf+0x9e>
 800ed88:	eeb0 0a49 	vmov.f32	s0, s18
 800ed8c:	f000 f82e 	bl	800edec <finitef>
 800ed90:	b128      	cbz	r0, 800ed9e <powf+0x9e>
 800ed92:	eeb0 0a48 	vmov.f32	s0, s16
 800ed96:	f000 f829 	bl	800edec <finitef>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d1d4      	bne.n	800ed48 <powf+0x48>
 800ed9e:	eeb0 0a68 	vmov.f32	s0, s17
 800eda2:	ecbd 8b04 	vpop	{d8-d9}
 800eda6:	bd08      	pop	{r3, pc}
 800eda8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800edac:	e7f7      	b.n	800ed9e <powf+0x9e>
	...

0800edb0 <sqrtf>:
 800edb0:	b508      	push	{r3, lr}
 800edb2:	ed2d 8b02 	vpush	{d8}
 800edb6:	eeb0 8a40 	vmov.f32	s16, s0
 800edba:	f000 f8fb 	bl	800efb4 <__ieee754_sqrtf>
 800edbe:	eeb4 8a48 	vcmp.f32	s16, s16
 800edc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc6:	d60c      	bvs.n	800ede2 <sqrtf+0x32>
 800edc8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ede8 <sqrtf+0x38>
 800edcc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800edd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd4:	d505      	bpl.n	800ede2 <sqrtf+0x32>
 800edd6:	f7fd fa77 	bl	800c2c8 <__errno>
 800edda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800edde:	2321      	movs	r3, #33	@ 0x21
 800ede0:	6003      	str	r3, [r0, #0]
 800ede2:	ecbd 8b02 	vpop	{d8}
 800ede6:	bd08      	pop	{r3, pc}
 800ede8:	00000000 	.word	0x00000000

0800edec <finitef>:
 800edec:	ee10 3a10 	vmov	r3, s0
 800edf0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800edf4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800edf8:	bfac      	ite	ge
 800edfa:	2000      	movge	r0, #0
 800edfc:	2001      	movlt	r0, #1
 800edfe:	4770      	bx	lr

0800ee00 <__ieee754_sqrt>:
 800ee00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	4a68      	ldr	r2, [pc, #416]	@ (800efa8 <__ieee754_sqrt+0x1a8>)
 800ee06:	ec55 4b10 	vmov	r4, r5, d0
 800ee0a:	43aa      	bics	r2, r5
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	4621      	mov	r1, r4
 800ee10:	d110      	bne.n	800ee34 <__ieee754_sqrt+0x34>
 800ee12:	4622      	mov	r2, r4
 800ee14:	4620      	mov	r0, r4
 800ee16:	4629      	mov	r1, r5
 800ee18:	f7f1 fc0e 	bl	8000638 <__aeabi_dmul>
 800ee1c:	4602      	mov	r2, r0
 800ee1e:	460b      	mov	r3, r1
 800ee20:	4620      	mov	r0, r4
 800ee22:	4629      	mov	r1, r5
 800ee24:	f7f1 fa52 	bl	80002cc <__adddf3>
 800ee28:	4604      	mov	r4, r0
 800ee2a:	460d      	mov	r5, r1
 800ee2c:	ec45 4b10 	vmov	d0, r4, r5
 800ee30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee34:	2d00      	cmp	r5, #0
 800ee36:	dc0e      	bgt.n	800ee56 <__ieee754_sqrt+0x56>
 800ee38:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ee3c:	4322      	orrs	r2, r4
 800ee3e:	d0f5      	beq.n	800ee2c <__ieee754_sqrt+0x2c>
 800ee40:	b19d      	cbz	r5, 800ee6a <__ieee754_sqrt+0x6a>
 800ee42:	4622      	mov	r2, r4
 800ee44:	4620      	mov	r0, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	f7f1 fa3e 	bl	80002c8 <__aeabi_dsub>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	f7f1 fd1c 	bl	800088c <__aeabi_ddiv>
 800ee54:	e7e8      	b.n	800ee28 <__ieee754_sqrt+0x28>
 800ee56:	152a      	asrs	r2, r5, #20
 800ee58:	d115      	bne.n	800ee86 <__ieee754_sqrt+0x86>
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	e009      	b.n	800ee72 <__ieee754_sqrt+0x72>
 800ee5e:	0acb      	lsrs	r3, r1, #11
 800ee60:	3a15      	subs	r2, #21
 800ee62:	0549      	lsls	r1, r1, #21
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d0fa      	beq.n	800ee5e <__ieee754_sqrt+0x5e>
 800ee68:	e7f7      	b.n	800ee5a <__ieee754_sqrt+0x5a>
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	e7fa      	b.n	800ee64 <__ieee754_sqrt+0x64>
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	3001      	adds	r0, #1
 800ee72:	02dc      	lsls	r4, r3, #11
 800ee74:	d5fb      	bpl.n	800ee6e <__ieee754_sqrt+0x6e>
 800ee76:	1e44      	subs	r4, r0, #1
 800ee78:	1b12      	subs	r2, r2, r4
 800ee7a:	f1c0 0420 	rsb	r4, r0, #32
 800ee7e:	fa21 f404 	lsr.w	r4, r1, r4
 800ee82:	4323      	orrs	r3, r4
 800ee84:	4081      	lsls	r1, r0
 800ee86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee8a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ee8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ee92:	07d2      	lsls	r2, r2, #31
 800ee94:	bf5c      	itt	pl
 800ee96:	005b      	lslpl	r3, r3, #1
 800ee98:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ee9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eea0:	bf58      	it	pl
 800eea2:	0049      	lslpl	r1, r1, #1
 800eea4:	2600      	movs	r6, #0
 800eea6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800eeaa:	106d      	asrs	r5, r5, #1
 800eeac:	0049      	lsls	r1, r1, #1
 800eeae:	2016      	movs	r0, #22
 800eeb0:	4632      	mov	r2, r6
 800eeb2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eeb6:	1917      	adds	r7, r2, r4
 800eeb8:	429f      	cmp	r7, r3
 800eeba:	bfde      	ittt	le
 800eebc:	193a      	addle	r2, r7, r4
 800eebe:	1bdb      	suble	r3, r3, r7
 800eec0:	1936      	addle	r6, r6, r4
 800eec2:	0fcf      	lsrs	r7, r1, #31
 800eec4:	3801      	subs	r0, #1
 800eec6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800eeca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eece:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eed2:	d1f0      	bne.n	800eeb6 <__ieee754_sqrt+0xb6>
 800eed4:	4604      	mov	r4, r0
 800eed6:	2720      	movs	r7, #32
 800eed8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eedc:	429a      	cmp	r2, r3
 800eede:	eb00 0e0c 	add.w	lr, r0, ip
 800eee2:	db02      	blt.n	800eeea <__ieee754_sqrt+0xea>
 800eee4:	d113      	bne.n	800ef0e <__ieee754_sqrt+0x10e>
 800eee6:	458e      	cmp	lr, r1
 800eee8:	d811      	bhi.n	800ef0e <__ieee754_sqrt+0x10e>
 800eeea:	f1be 0f00 	cmp.w	lr, #0
 800eeee:	eb0e 000c 	add.w	r0, lr, ip
 800eef2:	da42      	bge.n	800ef7a <__ieee754_sqrt+0x17a>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	db40      	blt.n	800ef7a <__ieee754_sqrt+0x17a>
 800eef8:	f102 0801 	add.w	r8, r2, #1
 800eefc:	1a9b      	subs	r3, r3, r2
 800eefe:	458e      	cmp	lr, r1
 800ef00:	bf88      	it	hi
 800ef02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ef06:	eba1 010e 	sub.w	r1, r1, lr
 800ef0a:	4464      	add	r4, ip
 800ef0c:	4642      	mov	r2, r8
 800ef0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ef12:	3f01      	subs	r7, #1
 800ef14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ef18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ef1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ef20:	d1dc      	bne.n	800eedc <__ieee754_sqrt+0xdc>
 800ef22:	4319      	orrs	r1, r3
 800ef24:	d01b      	beq.n	800ef5e <__ieee754_sqrt+0x15e>
 800ef26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800efac <__ieee754_sqrt+0x1ac>
 800ef2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800efb0 <__ieee754_sqrt+0x1b0>
 800ef2e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ef32:	e9db 2300 	ldrd	r2, r3, [fp]
 800ef36:	f7f1 f9c7 	bl	80002c8 <__aeabi_dsub>
 800ef3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef3e:	4602      	mov	r2, r0
 800ef40:	460b      	mov	r3, r1
 800ef42:	4640      	mov	r0, r8
 800ef44:	4649      	mov	r1, r9
 800ef46:	f7f1 fdf3 	bl	8000b30 <__aeabi_dcmple>
 800ef4a:	b140      	cbz	r0, 800ef5e <__ieee754_sqrt+0x15e>
 800ef4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ef50:	e9da 0100 	ldrd	r0, r1, [sl]
 800ef54:	e9db 2300 	ldrd	r2, r3, [fp]
 800ef58:	d111      	bne.n	800ef7e <__ieee754_sqrt+0x17e>
 800ef5a:	3601      	adds	r6, #1
 800ef5c:	463c      	mov	r4, r7
 800ef5e:	1072      	asrs	r2, r6, #1
 800ef60:	0863      	lsrs	r3, r4, #1
 800ef62:	07f1      	lsls	r1, r6, #31
 800ef64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ef68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ef6c:	bf48      	it	mi
 800ef6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ef72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ef76:	4618      	mov	r0, r3
 800ef78:	e756      	b.n	800ee28 <__ieee754_sqrt+0x28>
 800ef7a:	4690      	mov	r8, r2
 800ef7c:	e7be      	b.n	800eefc <__ieee754_sqrt+0xfc>
 800ef7e:	f7f1 f9a5 	bl	80002cc <__adddf3>
 800ef82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef86:	4602      	mov	r2, r0
 800ef88:	460b      	mov	r3, r1
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	f7f1 fdc5 	bl	8000b1c <__aeabi_dcmplt>
 800ef92:	b120      	cbz	r0, 800ef9e <__ieee754_sqrt+0x19e>
 800ef94:	1ca0      	adds	r0, r4, #2
 800ef96:	bf08      	it	eq
 800ef98:	3601      	addeq	r6, #1
 800ef9a:	3402      	adds	r4, #2
 800ef9c:	e7df      	b.n	800ef5e <__ieee754_sqrt+0x15e>
 800ef9e:	1c63      	adds	r3, r4, #1
 800efa0:	f023 0401 	bic.w	r4, r3, #1
 800efa4:	e7db      	b.n	800ef5e <__ieee754_sqrt+0x15e>
 800efa6:	bf00      	nop
 800efa8:	7ff00000 	.word	0x7ff00000
 800efac:	200002a8 	.word	0x200002a8
 800efb0:	200002a0 	.word	0x200002a0

0800efb4 <__ieee754_sqrtf>:
 800efb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800efb8:	4770      	bx	lr
	...

0800efbc <round>:
 800efbc:	ec51 0b10 	vmov	r0, r1, d0
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800efc6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800efca:	2a13      	cmp	r2, #19
 800efcc:	460b      	mov	r3, r1
 800efce:	4605      	mov	r5, r0
 800efd0:	dc1b      	bgt.n	800f00a <round+0x4e>
 800efd2:	2a00      	cmp	r2, #0
 800efd4:	da0b      	bge.n	800efee <round+0x32>
 800efd6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800efda:	3201      	adds	r2, #1
 800efdc:	bf04      	itt	eq
 800efde:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800efe2:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800efe6:	2200      	movs	r2, #0
 800efe8:	4619      	mov	r1, r3
 800efea:	4610      	mov	r0, r2
 800efec:	e015      	b.n	800f01a <round+0x5e>
 800efee:	4c15      	ldr	r4, [pc, #84]	@ (800f044 <round+0x88>)
 800eff0:	4114      	asrs	r4, r2
 800eff2:	ea04 0601 	and.w	r6, r4, r1
 800eff6:	4306      	orrs	r6, r0
 800eff8:	d00f      	beq.n	800f01a <round+0x5e>
 800effa:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800effe:	fa41 f202 	asr.w	r2, r1, r2
 800f002:	4413      	add	r3, r2
 800f004:	ea23 0304 	bic.w	r3, r3, r4
 800f008:	e7ed      	b.n	800efe6 <round+0x2a>
 800f00a:	2a33      	cmp	r2, #51	@ 0x33
 800f00c:	dd08      	ble.n	800f020 <round+0x64>
 800f00e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800f012:	d102      	bne.n	800f01a <round+0x5e>
 800f014:	4602      	mov	r2, r0
 800f016:	f7f1 f959 	bl	80002cc <__adddf3>
 800f01a:	ec41 0b10 	vmov	d0, r0, r1
 800f01e:	bd70      	pop	{r4, r5, r6, pc}
 800f020:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800f024:	f04f 34ff 	mov.w	r4, #4294967295
 800f028:	40f4      	lsrs	r4, r6
 800f02a:	4204      	tst	r4, r0
 800f02c:	d0f5      	beq.n	800f01a <round+0x5e>
 800f02e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800f032:	2201      	movs	r2, #1
 800f034:	408a      	lsls	r2, r1
 800f036:	1952      	adds	r2, r2, r5
 800f038:	bf28      	it	cs
 800f03a:	3301      	addcs	r3, #1
 800f03c:	ea22 0204 	bic.w	r2, r2, r4
 800f040:	e7d2      	b.n	800efe8 <round+0x2c>
 800f042:	bf00      	nop
 800f044:	000fffff 	.word	0x000fffff

0800f048 <__ieee754_atan2>:
 800f048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f04c:	ec57 6b11 	vmov	r6, r7, d1
 800f050:	4273      	negs	r3, r6
 800f052:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f1d0 <__ieee754_atan2+0x188>
 800f056:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f05a:	4333      	orrs	r3, r6
 800f05c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f060:	4543      	cmp	r3, r8
 800f062:	ec51 0b10 	vmov	r0, r1, d0
 800f066:	4635      	mov	r5, r6
 800f068:	d809      	bhi.n	800f07e <__ieee754_atan2+0x36>
 800f06a:	4244      	negs	r4, r0
 800f06c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f070:	4304      	orrs	r4, r0
 800f072:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f076:	4544      	cmp	r4, r8
 800f078:	468e      	mov	lr, r1
 800f07a:	4681      	mov	r9, r0
 800f07c:	d907      	bls.n	800f08e <__ieee754_atan2+0x46>
 800f07e:	4632      	mov	r2, r6
 800f080:	463b      	mov	r3, r7
 800f082:	f7f1 f923 	bl	80002cc <__adddf3>
 800f086:	ec41 0b10 	vmov	d0, r0, r1
 800f08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f08e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f092:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f096:	4334      	orrs	r4, r6
 800f098:	d103      	bne.n	800f0a2 <__ieee754_atan2+0x5a>
 800f09a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f09e:	f000 b89b 	b.w	800f1d8 <atan>
 800f0a2:	17bc      	asrs	r4, r7, #30
 800f0a4:	f004 0402 	and.w	r4, r4, #2
 800f0a8:	ea53 0909 	orrs.w	r9, r3, r9
 800f0ac:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f0b0:	d107      	bne.n	800f0c2 <__ieee754_atan2+0x7a>
 800f0b2:	2c02      	cmp	r4, #2
 800f0b4:	d05f      	beq.n	800f176 <__ieee754_atan2+0x12e>
 800f0b6:	2c03      	cmp	r4, #3
 800f0b8:	d1e5      	bne.n	800f086 <__ieee754_atan2+0x3e>
 800f0ba:	a141      	add	r1, pc, #260	@ (adr r1, 800f1c0 <__ieee754_atan2+0x178>)
 800f0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0c0:	e7e1      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f0c2:	4315      	orrs	r5, r2
 800f0c4:	d106      	bne.n	800f0d4 <__ieee754_atan2+0x8c>
 800f0c6:	f1be 0f00 	cmp.w	lr, #0
 800f0ca:	da5f      	bge.n	800f18c <__ieee754_atan2+0x144>
 800f0cc:	a13e      	add	r1, pc, #248	@ (adr r1, 800f1c8 <__ieee754_atan2+0x180>)
 800f0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0d2:	e7d8      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f0d4:	4542      	cmp	r2, r8
 800f0d6:	d10f      	bne.n	800f0f8 <__ieee754_atan2+0xb0>
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	f104 34ff 	add.w	r4, r4, #4294967295
 800f0de:	d107      	bne.n	800f0f0 <__ieee754_atan2+0xa8>
 800f0e0:	2c02      	cmp	r4, #2
 800f0e2:	d84c      	bhi.n	800f17e <__ieee754_atan2+0x136>
 800f0e4:	4b34      	ldr	r3, [pc, #208]	@ (800f1b8 <__ieee754_atan2+0x170>)
 800f0e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f0ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f0ee:	e7ca      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f0f0:	2c02      	cmp	r4, #2
 800f0f2:	d848      	bhi.n	800f186 <__ieee754_atan2+0x13e>
 800f0f4:	4b31      	ldr	r3, [pc, #196]	@ (800f1bc <__ieee754_atan2+0x174>)
 800f0f6:	e7f6      	b.n	800f0e6 <__ieee754_atan2+0x9e>
 800f0f8:	4543      	cmp	r3, r8
 800f0fa:	d0e4      	beq.n	800f0c6 <__ieee754_atan2+0x7e>
 800f0fc:	1a9b      	subs	r3, r3, r2
 800f0fe:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f102:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f106:	da1e      	bge.n	800f146 <__ieee754_atan2+0xfe>
 800f108:	2f00      	cmp	r7, #0
 800f10a:	da01      	bge.n	800f110 <__ieee754_atan2+0xc8>
 800f10c:	323c      	adds	r2, #60	@ 0x3c
 800f10e:	db1e      	blt.n	800f14e <__ieee754_atan2+0x106>
 800f110:	4632      	mov	r2, r6
 800f112:	463b      	mov	r3, r7
 800f114:	f7f1 fbba 	bl	800088c <__aeabi_ddiv>
 800f118:	ec41 0b10 	vmov	d0, r0, r1
 800f11c:	f000 f9f4 	bl	800f508 <fabs>
 800f120:	f000 f85a 	bl	800f1d8 <atan>
 800f124:	ec51 0b10 	vmov	r0, r1, d0
 800f128:	2c01      	cmp	r4, #1
 800f12a:	d013      	beq.n	800f154 <__ieee754_atan2+0x10c>
 800f12c:	2c02      	cmp	r4, #2
 800f12e:	d015      	beq.n	800f15c <__ieee754_atan2+0x114>
 800f130:	2c00      	cmp	r4, #0
 800f132:	d0a8      	beq.n	800f086 <__ieee754_atan2+0x3e>
 800f134:	a318      	add	r3, pc, #96	@ (adr r3, 800f198 <__ieee754_atan2+0x150>)
 800f136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13a:	f7f1 f8c5 	bl	80002c8 <__aeabi_dsub>
 800f13e:	a318      	add	r3, pc, #96	@ (adr r3, 800f1a0 <__ieee754_atan2+0x158>)
 800f140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f144:	e014      	b.n	800f170 <__ieee754_atan2+0x128>
 800f146:	a118      	add	r1, pc, #96	@ (adr r1, 800f1a8 <__ieee754_atan2+0x160>)
 800f148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f14c:	e7ec      	b.n	800f128 <__ieee754_atan2+0xe0>
 800f14e:	2000      	movs	r0, #0
 800f150:	2100      	movs	r1, #0
 800f152:	e7e9      	b.n	800f128 <__ieee754_atan2+0xe0>
 800f154:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f158:	4619      	mov	r1, r3
 800f15a:	e794      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f15c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f198 <__ieee754_atan2+0x150>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	f7f1 f8b1 	bl	80002c8 <__aeabi_dsub>
 800f166:	4602      	mov	r2, r0
 800f168:	460b      	mov	r3, r1
 800f16a:	a10d      	add	r1, pc, #52	@ (adr r1, 800f1a0 <__ieee754_atan2+0x158>)
 800f16c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f170:	f7f1 f8aa 	bl	80002c8 <__aeabi_dsub>
 800f174:	e787      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f176:	a10a      	add	r1, pc, #40	@ (adr r1, 800f1a0 <__ieee754_atan2+0x158>)
 800f178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17c:	e783      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f17e:	a10c      	add	r1, pc, #48	@ (adr r1, 800f1b0 <__ieee754_atan2+0x168>)
 800f180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f184:	e77f      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f186:	2000      	movs	r0, #0
 800f188:	2100      	movs	r1, #0
 800f18a:	e77c      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f18c:	a106      	add	r1, pc, #24	@ (adr r1, 800f1a8 <__ieee754_atan2+0x160>)
 800f18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f192:	e778      	b.n	800f086 <__ieee754_atan2+0x3e>
 800f194:	f3af 8000 	nop.w
 800f198:	33145c07 	.word	0x33145c07
 800f19c:	3ca1a626 	.word	0x3ca1a626
 800f1a0:	54442d18 	.word	0x54442d18
 800f1a4:	400921fb 	.word	0x400921fb
 800f1a8:	54442d18 	.word	0x54442d18
 800f1ac:	3ff921fb 	.word	0x3ff921fb
 800f1b0:	54442d18 	.word	0x54442d18
 800f1b4:	3fe921fb 	.word	0x3fe921fb
 800f1b8:	08010328 	.word	0x08010328
 800f1bc:	08010310 	.word	0x08010310
 800f1c0:	54442d18 	.word	0x54442d18
 800f1c4:	c00921fb 	.word	0xc00921fb
 800f1c8:	54442d18 	.word	0x54442d18
 800f1cc:	bff921fb 	.word	0xbff921fb
 800f1d0:	7ff00000 	.word	0x7ff00000
 800f1d4:	00000000 	.word	0x00000000

0800f1d8 <atan>:
 800f1d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	ec55 4b10 	vmov	r4, r5, d0
 800f1e0:	4bbf      	ldr	r3, [pc, #764]	@ (800f4e0 <atan+0x308>)
 800f1e2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f1e6:	429e      	cmp	r6, r3
 800f1e8:	46ab      	mov	fp, r5
 800f1ea:	d918      	bls.n	800f21e <atan+0x46>
 800f1ec:	4bbd      	ldr	r3, [pc, #756]	@ (800f4e4 <atan+0x30c>)
 800f1ee:	429e      	cmp	r6, r3
 800f1f0:	d801      	bhi.n	800f1f6 <atan+0x1e>
 800f1f2:	d109      	bne.n	800f208 <atan+0x30>
 800f1f4:	b144      	cbz	r4, 800f208 <atan+0x30>
 800f1f6:	4622      	mov	r2, r4
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	f7f1 f865 	bl	80002cc <__adddf3>
 800f202:	4604      	mov	r4, r0
 800f204:	460d      	mov	r5, r1
 800f206:	e006      	b.n	800f216 <atan+0x3e>
 800f208:	f1bb 0f00 	cmp.w	fp, #0
 800f20c:	f340 812b 	ble.w	800f466 <atan+0x28e>
 800f210:	a597      	add	r5, pc, #604	@ (adr r5, 800f470 <atan+0x298>)
 800f212:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f216:	ec45 4b10 	vmov	d0, r4, r5
 800f21a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21e:	4bb2      	ldr	r3, [pc, #712]	@ (800f4e8 <atan+0x310>)
 800f220:	429e      	cmp	r6, r3
 800f222:	d813      	bhi.n	800f24c <atan+0x74>
 800f224:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f228:	429e      	cmp	r6, r3
 800f22a:	d80c      	bhi.n	800f246 <atan+0x6e>
 800f22c:	a392      	add	r3, pc, #584	@ (adr r3, 800f478 <atan+0x2a0>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	4620      	mov	r0, r4
 800f234:	4629      	mov	r1, r5
 800f236:	f7f1 f849 	bl	80002cc <__adddf3>
 800f23a:	4bac      	ldr	r3, [pc, #688]	@ (800f4ec <atan+0x314>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	f7f1 fc8b 	bl	8000b58 <__aeabi_dcmpgt>
 800f242:	2800      	cmp	r0, #0
 800f244:	d1e7      	bne.n	800f216 <atan+0x3e>
 800f246:	f04f 3aff 	mov.w	sl, #4294967295
 800f24a:	e029      	b.n	800f2a0 <atan+0xc8>
 800f24c:	f000 f95c 	bl	800f508 <fabs>
 800f250:	4ba7      	ldr	r3, [pc, #668]	@ (800f4f0 <atan+0x318>)
 800f252:	429e      	cmp	r6, r3
 800f254:	ec55 4b10 	vmov	r4, r5, d0
 800f258:	f200 80bc 	bhi.w	800f3d4 <atan+0x1fc>
 800f25c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f260:	429e      	cmp	r6, r3
 800f262:	f200 809e 	bhi.w	800f3a2 <atan+0x1ca>
 800f266:	4622      	mov	r2, r4
 800f268:	462b      	mov	r3, r5
 800f26a:	4620      	mov	r0, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	f7f1 f82d 	bl	80002cc <__adddf3>
 800f272:	4b9e      	ldr	r3, [pc, #632]	@ (800f4ec <atan+0x314>)
 800f274:	2200      	movs	r2, #0
 800f276:	f7f1 f827 	bl	80002c8 <__aeabi_dsub>
 800f27a:	2200      	movs	r2, #0
 800f27c:	4606      	mov	r6, r0
 800f27e:	460f      	mov	r7, r1
 800f280:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f284:	4620      	mov	r0, r4
 800f286:	4629      	mov	r1, r5
 800f288:	f7f1 f820 	bl	80002cc <__adddf3>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	4630      	mov	r0, r6
 800f292:	4639      	mov	r1, r7
 800f294:	f7f1 fafa 	bl	800088c <__aeabi_ddiv>
 800f298:	f04f 0a00 	mov.w	sl, #0
 800f29c:	4604      	mov	r4, r0
 800f29e:	460d      	mov	r5, r1
 800f2a0:	4622      	mov	r2, r4
 800f2a2:	462b      	mov	r3, r5
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	4629      	mov	r1, r5
 800f2a8:	f7f1 f9c6 	bl	8000638 <__aeabi_dmul>
 800f2ac:	4602      	mov	r2, r0
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	4680      	mov	r8, r0
 800f2b2:	4689      	mov	r9, r1
 800f2b4:	f7f1 f9c0 	bl	8000638 <__aeabi_dmul>
 800f2b8:	a371      	add	r3, pc, #452	@ (adr r3, 800f480 <atan+0x2a8>)
 800f2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2be:	4606      	mov	r6, r0
 800f2c0:	460f      	mov	r7, r1
 800f2c2:	f7f1 f9b9 	bl	8000638 <__aeabi_dmul>
 800f2c6:	a370      	add	r3, pc, #448	@ (adr r3, 800f488 <atan+0x2b0>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	f7f0 fffe 	bl	80002cc <__adddf3>
 800f2d0:	4632      	mov	r2, r6
 800f2d2:	463b      	mov	r3, r7
 800f2d4:	f7f1 f9b0 	bl	8000638 <__aeabi_dmul>
 800f2d8:	a36d      	add	r3, pc, #436	@ (adr r3, 800f490 <atan+0x2b8>)
 800f2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2de:	f7f0 fff5 	bl	80002cc <__adddf3>
 800f2e2:	4632      	mov	r2, r6
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	f7f1 f9a7 	bl	8000638 <__aeabi_dmul>
 800f2ea:	a36b      	add	r3, pc, #428	@ (adr r3, 800f498 <atan+0x2c0>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f7f0 ffec 	bl	80002cc <__adddf3>
 800f2f4:	4632      	mov	r2, r6
 800f2f6:	463b      	mov	r3, r7
 800f2f8:	f7f1 f99e 	bl	8000638 <__aeabi_dmul>
 800f2fc:	a368      	add	r3, pc, #416	@ (adr r3, 800f4a0 <atan+0x2c8>)
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	f7f0 ffe3 	bl	80002cc <__adddf3>
 800f306:	4632      	mov	r2, r6
 800f308:	463b      	mov	r3, r7
 800f30a:	f7f1 f995 	bl	8000638 <__aeabi_dmul>
 800f30e:	a366      	add	r3, pc, #408	@ (adr r3, 800f4a8 <atan+0x2d0>)
 800f310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f314:	f7f0 ffda 	bl	80002cc <__adddf3>
 800f318:	4642      	mov	r2, r8
 800f31a:	464b      	mov	r3, r9
 800f31c:	f7f1 f98c 	bl	8000638 <__aeabi_dmul>
 800f320:	a363      	add	r3, pc, #396	@ (adr r3, 800f4b0 <atan+0x2d8>)
 800f322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f326:	4680      	mov	r8, r0
 800f328:	4689      	mov	r9, r1
 800f32a:	4630      	mov	r0, r6
 800f32c:	4639      	mov	r1, r7
 800f32e:	f7f1 f983 	bl	8000638 <__aeabi_dmul>
 800f332:	a361      	add	r3, pc, #388	@ (adr r3, 800f4b8 <atan+0x2e0>)
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	f7f0 ffc6 	bl	80002c8 <__aeabi_dsub>
 800f33c:	4632      	mov	r2, r6
 800f33e:	463b      	mov	r3, r7
 800f340:	f7f1 f97a 	bl	8000638 <__aeabi_dmul>
 800f344:	a35e      	add	r3, pc, #376	@ (adr r3, 800f4c0 <atan+0x2e8>)
 800f346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34a:	f7f0 ffbd 	bl	80002c8 <__aeabi_dsub>
 800f34e:	4632      	mov	r2, r6
 800f350:	463b      	mov	r3, r7
 800f352:	f7f1 f971 	bl	8000638 <__aeabi_dmul>
 800f356:	a35c      	add	r3, pc, #368	@ (adr r3, 800f4c8 <atan+0x2f0>)
 800f358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35c:	f7f0 ffb4 	bl	80002c8 <__aeabi_dsub>
 800f360:	4632      	mov	r2, r6
 800f362:	463b      	mov	r3, r7
 800f364:	f7f1 f968 	bl	8000638 <__aeabi_dmul>
 800f368:	a359      	add	r3, pc, #356	@ (adr r3, 800f4d0 <atan+0x2f8>)
 800f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f36e:	f7f0 ffab 	bl	80002c8 <__aeabi_dsub>
 800f372:	4632      	mov	r2, r6
 800f374:	463b      	mov	r3, r7
 800f376:	f7f1 f95f 	bl	8000638 <__aeabi_dmul>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4640      	mov	r0, r8
 800f380:	4649      	mov	r1, r9
 800f382:	f7f0 ffa3 	bl	80002cc <__adddf3>
 800f386:	4622      	mov	r2, r4
 800f388:	462b      	mov	r3, r5
 800f38a:	f7f1 f955 	bl	8000638 <__aeabi_dmul>
 800f38e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f392:	4602      	mov	r2, r0
 800f394:	460b      	mov	r3, r1
 800f396:	d148      	bne.n	800f42a <atan+0x252>
 800f398:	4620      	mov	r0, r4
 800f39a:	4629      	mov	r1, r5
 800f39c:	f7f0 ff94 	bl	80002c8 <__aeabi_dsub>
 800f3a0:	e72f      	b.n	800f202 <atan+0x2a>
 800f3a2:	4b52      	ldr	r3, [pc, #328]	@ (800f4ec <atan+0x314>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	f7f0 ff8d 	bl	80002c8 <__aeabi_dsub>
 800f3ae:	4b4f      	ldr	r3, [pc, #316]	@ (800f4ec <atan+0x314>)
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	460f      	mov	r7, r1
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	f7f0 ff87 	bl	80002cc <__adddf3>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	f7f1 fa61 	bl	800088c <__aeabi_ddiv>
 800f3ca:	f04f 0a01 	mov.w	sl, #1
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	e765      	b.n	800f2a0 <atan+0xc8>
 800f3d4:	4b47      	ldr	r3, [pc, #284]	@ (800f4f4 <atan+0x31c>)
 800f3d6:	429e      	cmp	r6, r3
 800f3d8:	d21c      	bcs.n	800f414 <atan+0x23c>
 800f3da:	4b47      	ldr	r3, [pc, #284]	@ (800f4f8 <atan+0x320>)
 800f3dc:	2200      	movs	r2, #0
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f0 ff71 	bl	80002c8 <__aeabi_dsub>
 800f3e6:	4b44      	ldr	r3, [pc, #272]	@ (800f4f8 <atan+0x320>)
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	460f      	mov	r7, r1
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	4629      	mov	r1, r5
 800f3f2:	f7f1 f921 	bl	8000638 <__aeabi_dmul>
 800f3f6:	4b3d      	ldr	r3, [pc, #244]	@ (800f4ec <atan+0x314>)
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	f7f0 ff67 	bl	80002cc <__adddf3>
 800f3fe:	4602      	mov	r2, r0
 800f400:	460b      	mov	r3, r1
 800f402:	4630      	mov	r0, r6
 800f404:	4639      	mov	r1, r7
 800f406:	f7f1 fa41 	bl	800088c <__aeabi_ddiv>
 800f40a:	f04f 0a02 	mov.w	sl, #2
 800f40e:	4604      	mov	r4, r0
 800f410:	460d      	mov	r5, r1
 800f412:	e745      	b.n	800f2a0 <atan+0xc8>
 800f414:	4622      	mov	r2, r4
 800f416:	462b      	mov	r3, r5
 800f418:	4938      	ldr	r1, [pc, #224]	@ (800f4fc <atan+0x324>)
 800f41a:	2000      	movs	r0, #0
 800f41c:	f7f1 fa36 	bl	800088c <__aeabi_ddiv>
 800f420:	f04f 0a03 	mov.w	sl, #3
 800f424:	4604      	mov	r4, r0
 800f426:	460d      	mov	r5, r1
 800f428:	e73a      	b.n	800f2a0 <atan+0xc8>
 800f42a:	4b35      	ldr	r3, [pc, #212]	@ (800f500 <atan+0x328>)
 800f42c:	4e35      	ldr	r6, [pc, #212]	@ (800f504 <atan+0x32c>)
 800f42e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f436:	f7f0 ff47 	bl	80002c8 <__aeabi_dsub>
 800f43a:	4622      	mov	r2, r4
 800f43c:	462b      	mov	r3, r5
 800f43e:	f7f0 ff43 	bl	80002c8 <__aeabi_dsub>
 800f442:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f44e:	f7f0 ff3b 	bl	80002c8 <__aeabi_dsub>
 800f452:	f1bb 0f00 	cmp.w	fp, #0
 800f456:	4604      	mov	r4, r0
 800f458:	460d      	mov	r5, r1
 800f45a:	f6bf aedc 	bge.w	800f216 <atan+0x3e>
 800f45e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f462:	461d      	mov	r5, r3
 800f464:	e6d7      	b.n	800f216 <atan+0x3e>
 800f466:	a51c      	add	r5, pc, #112	@ (adr r5, 800f4d8 <atan+0x300>)
 800f468:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f46c:	e6d3      	b.n	800f216 <atan+0x3e>
 800f46e:	bf00      	nop
 800f470:	54442d18 	.word	0x54442d18
 800f474:	3ff921fb 	.word	0x3ff921fb
 800f478:	8800759c 	.word	0x8800759c
 800f47c:	7e37e43c 	.word	0x7e37e43c
 800f480:	e322da11 	.word	0xe322da11
 800f484:	3f90ad3a 	.word	0x3f90ad3a
 800f488:	24760deb 	.word	0x24760deb
 800f48c:	3fa97b4b 	.word	0x3fa97b4b
 800f490:	a0d03d51 	.word	0xa0d03d51
 800f494:	3fb10d66 	.word	0x3fb10d66
 800f498:	c54c206e 	.word	0xc54c206e
 800f49c:	3fb745cd 	.word	0x3fb745cd
 800f4a0:	920083ff 	.word	0x920083ff
 800f4a4:	3fc24924 	.word	0x3fc24924
 800f4a8:	5555550d 	.word	0x5555550d
 800f4ac:	3fd55555 	.word	0x3fd55555
 800f4b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f4b4:	bfa2b444 	.word	0xbfa2b444
 800f4b8:	52defd9a 	.word	0x52defd9a
 800f4bc:	3fadde2d 	.word	0x3fadde2d
 800f4c0:	af749a6d 	.word	0xaf749a6d
 800f4c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f4c8:	fe231671 	.word	0xfe231671
 800f4cc:	3fbc71c6 	.word	0x3fbc71c6
 800f4d0:	9998ebc4 	.word	0x9998ebc4
 800f4d4:	3fc99999 	.word	0x3fc99999
 800f4d8:	54442d18 	.word	0x54442d18
 800f4dc:	bff921fb 	.word	0xbff921fb
 800f4e0:	440fffff 	.word	0x440fffff
 800f4e4:	7ff00000 	.word	0x7ff00000
 800f4e8:	3fdbffff 	.word	0x3fdbffff
 800f4ec:	3ff00000 	.word	0x3ff00000
 800f4f0:	3ff2ffff 	.word	0x3ff2ffff
 800f4f4:	40038000 	.word	0x40038000
 800f4f8:	3ff80000 	.word	0x3ff80000
 800f4fc:	bff00000 	.word	0xbff00000
 800f500:	08010340 	.word	0x08010340
 800f504:	08010360 	.word	0x08010360

0800f508 <fabs>:
 800f508:	ec51 0b10 	vmov	r0, r1, d0
 800f50c:	4602      	mov	r2, r0
 800f50e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f512:	ec43 2b10 	vmov	d0, r2, r3
 800f516:	4770      	bx	lr

0800f518 <__ieee754_powf>:
 800f518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f51c:	ee10 4a90 	vmov	r4, s1
 800f520:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f524:	ed2d 8b02 	vpush	{d8}
 800f528:	ee10 6a10 	vmov	r6, s0
 800f52c:	eeb0 8a40 	vmov.f32	s16, s0
 800f530:	eef0 8a60 	vmov.f32	s17, s1
 800f534:	d10c      	bne.n	800f550 <__ieee754_powf+0x38>
 800f536:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f53a:	0076      	lsls	r6, r6, #1
 800f53c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f540:	f240 829c 	bls.w	800fa7c <__ieee754_powf+0x564>
 800f544:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f548:	ecbd 8b02 	vpop	{d8}
 800f54c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f550:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f554:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f558:	d802      	bhi.n	800f560 <__ieee754_powf+0x48>
 800f55a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f55e:	d908      	bls.n	800f572 <__ieee754_powf+0x5a>
 800f560:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f564:	d1ee      	bne.n	800f544 <__ieee754_powf+0x2c>
 800f566:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f56a:	0064      	lsls	r4, r4, #1
 800f56c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f570:	e7e6      	b.n	800f540 <__ieee754_powf+0x28>
 800f572:	2e00      	cmp	r6, #0
 800f574:	da1e      	bge.n	800f5b4 <__ieee754_powf+0x9c>
 800f576:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f57a:	d22b      	bcs.n	800f5d4 <__ieee754_powf+0xbc>
 800f57c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f580:	d332      	bcc.n	800f5e8 <__ieee754_powf+0xd0>
 800f582:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f586:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f58a:	fa49 f503 	asr.w	r5, r9, r3
 800f58e:	fa05 f303 	lsl.w	r3, r5, r3
 800f592:	454b      	cmp	r3, r9
 800f594:	d126      	bne.n	800f5e4 <__ieee754_powf+0xcc>
 800f596:	f005 0501 	and.w	r5, r5, #1
 800f59a:	f1c5 0502 	rsb	r5, r5, #2
 800f59e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f5a2:	d122      	bne.n	800f5ea <__ieee754_powf+0xd2>
 800f5a4:	2c00      	cmp	r4, #0
 800f5a6:	f280 826f 	bge.w	800fa88 <__ieee754_powf+0x570>
 800f5aa:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f5ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f5b2:	e7c9      	b.n	800f548 <__ieee754_powf+0x30>
 800f5b4:	2500      	movs	r5, #0
 800f5b6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f5ba:	d1f0      	bne.n	800f59e <__ieee754_powf+0x86>
 800f5bc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f5c0:	f000 825c 	beq.w	800fa7c <__ieee754_powf+0x564>
 800f5c4:	d908      	bls.n	800f5d8 <__ieee754_powf+0xc0>
 800f5c6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800f928 <__ieee754_powf+0x410>
 800f5ca:	2c00      	cmp	r4, #0
 800f5cc:	bfa8      	it	ge
 800f5ce:	eeb0 0a68 	vmovge.f32	s0, s17
 800f5d2:	e7b9      	b.n	800f548 <__ieee754_powf+0x30>
 800f5d4:	2502      	movs	r5, #2
 800f5d6:	e7ee      	b.n	800f5b6 <__ieee754_powf+0x9e>
 800f5d8:	2c00      	cmp	r4, #0
 800f5da:	f280 8252 	bge.w	800fa82 <__ieee754_powf+0x56a>
 800f5de:	eeb1 0a68 	vneg.f32	s0, s17
 800f5e2:	e7b1      	b.n	800f548 <__ieee754_powf+0x30>
 800f5e4:	2500      	movs	r5, #0
 800f5e6:	e7da      	b.n	800f59e <__ieee754_powf+0x86>
 800f5e8:	2500      	movs	r5, #0
 800f5ea:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f5ee:	d102      	bne.n	800f5f6 <__ieee754_powf+0xde>
 800f5f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f5f4:	e7a8      	b.n	800f548 <__ieee754_powf+0x30>
 800f5f6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f5fa:	d109      	bne.n	800f610 <__ieee754_powf+0xf8>
 800f5fc:	2e00      	cmp	r6, #0
 800f5fe:	db07      	blt.n	800f610 <__ieee754_powf+0xf8>
 800f600:	eeb0 0a48 	vmov.f32	s0, s16
 800f604:	ecbd 8b02 	vpop	{d8}
 800f608:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f60c:	f7ff bcd2 	b.w	800efb4 <__ieee754_sqrtf>
 800f610:	eeb0 0a48 	vmov.f32	s0, s16
 800f614:	f000 fa50 	bl	800fab8 <fabsf>
 800f618:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f61c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f620:	4647      	mov	r7, r8
 800f622:	d002      	beq.n	800f62a <__ieee754_powf+0x112>
 800f624:	f1b8 0f00 	cmp.w	r8, #0
 800f628:	d117      	bne.n	800f65a <__ieee754_powf+0x142>
 800f62a:	2c00      	cmp	r4, #0
 800f62c:	bfbc      	itt	lt
 800f62e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f632:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f636:	2e00      	cmp	r6, #0
 800f638:	da86      	bge.n	800f548 <__ieee754_powf+0x30>
 800f63a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f63e:	ea58 0805 	orrs.w	r8, r8, r5
 800f642:	d104      	bne.n	800f64e <__ieee754_powf+0x136>
 800f644:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f648:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f64c:	e77c      	b.n	800f548 <__ieee754_powf+0x30>
 800f64e:	2d01      	cmp	r5, #1
 800f650:	f47f af7a 	bne.w	800f548 <__ieee754_powf+0x30>
 800f654:	eeb1 0a40 	vneg.f32	s0, s0
 800f658:	e776      	b.n	800f548 <__ieee754_powf+0x30>
 800f65a:	0ff0      	lsrs	r0, r6, #31
 800f65c:	3801      	subs	r0, #1
 800f65e:	ea55 0300 	orrs.w	r3, r5, r0
 800f662:	d104      	bne.n	800f66e <__ieee754_powf+0x156>
 800f664:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f668:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f66c:	e76c      	b.n	800f548 <__ieee754_powf+0x30>
 800f66e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f672:	d973      	bls.n	800f75c <__ieee754_powf+0x244>
 800f674:	4bad      	ldr	r3, [pc, #692]	@ (800f92c <__ieee754_powf+0x414>)
 800f676:	4598      	cmp	r8, r3
 800f678:	d808      	bhi.n	800f68c <__ieee754_powf+0x174>
 800f67a:	2c00      	cmp	r4, #0
 800f67c:	da0b      	bge.n	800f696 <__ieee754_powf+0x17e>
 800f67e:	2000      	movs	r0, #0
 800f680:	ecbd 8b02 	vpop	{d8}
 800f684:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f688:	f000 baa4 	b.w	800fbd4 <__math_oflowf>
 800f68c:	4ba8      	ldr	r3, [pc, #672]	@ (800f930 <__ieee754_powf+0x418>)
 800f68e:	4598      	cmp	r8, r3
 800f690:	d908      	bls.n	800f6a4 <__ieee754_powf+0x18c>
 800f692:	2c00      	cmp	r4, #0
 800f694:	dcf3      	bgt.n	800f67e <__ieee754_powf+0x166>
 800f696:	2000      	movs	r0, #0
 800f698:	ecbd 8b02 	vpop	{d8}
 800f69c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6a0:	f000 ba92 	b.w	800fbc8 <__math_uflowf>
 800f6a4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f6a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6ac:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800f934 <__ieee754_powf+0x41c>
 800f6b0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f6b4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f6b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f6bc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f6c0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f6c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6c8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800f938 <__ieee754_powf+0x420>
 800f6cc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f6d0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800f93c <__ieee754_powf+0x424>
 800f6d4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f6d8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f940 <__ieee754_powf+0x428>
 800f6dc:	eef0 6a67 	vmov.f32	s13, s15
 800f6e0:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f6e4:	ee16 3a90 	vmov	r3, s13
 800f6e8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f6ec:	f023 030f 	bic.w	r3, r3, #15
 800f6f0:	ee06 3a90 	vmov	s13, r3
 800f6f4:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f6f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f6fc:	3d01      	subs	r5, #1
 800f6fe:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800f702:	4305      	orrs	r5, r0
 800f704:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f708:	f024 040f 	bic.w	r4, r4, #15
 800f70c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f710:	bf18      	it	ne
 800f712:	eeb0 8a47 	vmovne.f32	s16, s14
 800f716:	ee07 4a10 	vmov	s14, r4
 800f71a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f71e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f722:	ee07 3a90 	vmov	s15, r3
 800f726:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f72a:	ee07 4a10 	vmov	s14, r4
 800f72e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f732:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f736:	ee17 1a10 	vmov	r1, s14
 800f73a:	2900      	cmp	r1, #0
 800f73c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f740:	f340 80dd 	ble.w	800f8fe <__ieee754_powf+0x3e6>
 800f744:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f748:	f240 80ca 	bls.w	800f8e0 <__ieee754_powf+0x3c8>
 800f74c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f754:	bf4c      	ite	mi
 800f756:	2001      	movmi	r0, #1
 800f758:	2000      	movpl	r0, #0
 800f75a:	e791      	b.n	800f680 <__ieee754_powf+0x168>
 800f75c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f760:	bf01      	itttt	eq
 800f762:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f944 <__ieee754_powf+0x42c>
 800f766:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f76a:	f06f 0317 	mvneq.w	r3, #23
 800f76e:	ee17 7a90 	vmoveq	r7, s15
 800f772:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f776:	bf18      	it	ne
 800f778:	2300      	movne	r3, #0
 800f77a:	3a7f      	subs	r2, #127	@ 0x7f
 800f77c:	441a      	add	r2, r3
 800f77e:	4b72      	ldr	r3, [pc, #456]	@ (800f948 <__ieee754_powf+0x430>)
 800f780:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f784:	429f      	cmp	r7, r3
 800f786:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f78a:	dd06      	ble.n	800f79a <__ieee754_powf+0x282>
 800f78c:	4b6f      	ldr	r3, [pc, #444]	@ (800f94c <__ieee754_powf+0x434>)
 800f78e:	429f      	cmp	r7, r3
 800f790:	f340 80a4 	ble.w	800f8dc <__ieee754_powf+0x3c4>
 800f794:	3201      	adds	r2, #1
 800f796:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f79a:	2600      	movs	r6, #0
 800f79c:	4b6c      	ldr	r3, [pc, #432]	@ (800f950 <__ieee754_powf+0x438>)
 800f79e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f7a2:	ee07 1a10 	vmov	s14, r1
 800f7a6:	edd3 5a00 	vldr	s11, [r3]
 800f7aa:	4b6a      	ldr	r3, [pc, #424]	@ (800f954 <__ieee754_powf+0x43c>)
 800f7ac:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f7b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7b4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f7b8:	1049      	asrs	r1, r1, #1
 800f7ba:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f7be:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f7c2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f7c6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f7ca:	ee07 1a90 	vmov	s15, r1
 800f7ce:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f7d2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f7d6:	ee15 7a10 	vmov	r7, s10
 800f7da:	401f      	ands	r7, r3
 800f7dc:	ee06 7a90 	vmov	s13, r7
 800f7e0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f7e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f7e8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f7ec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f7f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f958 <__ieee754_powf+0x440>
 800f7f4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f95c <__ieee754_powf+0x444>
 800f7f8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f7fc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f960 <__ieee754_powf+0x448>
 800f800:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f804:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f934 <__ieee754_powf+0x41c>
 800f808:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f80c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f964 <__ieee754_powf+0x44c>
 800f810:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f814:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f968 <__ieee754_powf+0x450>
 800f818:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f81c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f820:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f824:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f828:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f82c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f830:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f834:	eef0 5a67 	vmov.f32	s11, s15
 800f838:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f83c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f840:	ee15 1a90 	vmov	r1, s11
 800f844:	4019      	ands	r1, r3
 800f846:	ee05 1a90 	vmov	s11, r1
 800f84a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f84e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f852:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f856:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f85a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f85e:	eeb0 6a67 	vmov.f32	s12, s15
 800f862:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f866:	ee16 1a10 	vmov	r1, s12
 800f86a:	4019      	ands	r1, r3
 800f86c:	ee06 1a10 	vmov	s12, r1
 800f870:	eeb0 7a46 	vmov.f32	s14, s12
 800f874:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f878:	493c      	ldr	r1, [pc, #240]	@ (800f96c <__ieee754_powf+0x454>)
 800f87a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f882:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f970 <__ieee754_powf+0x458>
 800f886:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f974 <__ieee754_powf+0x45c>
 800f88a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f88e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f978 <__ieee754_powf+0x460>
 800f892:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f896:	ed91 7a00 	vldr	s14, [r1]
 800f89a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f89e:	ee07 2a10 	vmov	s14, r2
 800f8a2:	eef0 6a67 	vmov.f32	s13, s15
 800f8a6:	4a35      	ldr	r2, [pc, #212]	@ (800f97c <__ieee754_powf+0x464>)
 800f8a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f8ac:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f8b0:	ed92 5a00 	vldr	s10, [r2]
 800f8b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f8b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f8bc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f8c0:	ee16 2a90 	vmov	r2, s13
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	ee06 3a90 	vmov	s13, r3
 800f8ca:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f8ce:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f8d2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f8d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8da:	e70f      	b.n	800f6fc <__ieee754_powf+0x1e4>
 800f8dc:	2601      	movs	r6, #1
 800f8de:	e75d      	b.n	800f79c <__ieee754_powf+0x284>
 800f8e0:	d152      	bne.n	800f988 <__ieee754_powf+0x470>
 800f8e2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f980 <__ieee754_powf+0x468>
 800f8e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f8ea:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f8ee:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f6:	f73f af29 	bgt.w	800f74c <__ieee754_powf+0x234>
 800f8fa:	2386      	movs	r3, #134	@ 0x86
 800f8fc:	e048      	b.n	800f990 <__ieee754_powf+0x478>
 800f8fe:	4a21      	ldr	r2, [pc, #132]	@ (800f984 <__ieee754_powf+0x46c>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d907      	bls.n	800f914 <__ieee754_powf+0x3fc>
 800f904:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90c:	bf4c      	ite	mi
 800f90e:	2001      	movmi	r0, #1
 800f910:	2000      	movpl	r0, #0
 800f912:	e6c1      	b.n	800f698 <__ieee754_powf+0x180>
 800f914:	d138      	bne.n	800f988 <__ieee754_powf+0x470>
 800f916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f91a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	dbea      	blt.n	800f8fa <__ieee754_powf+0x3e2>
 800f924:	e7ee      	b.n	800f904 <__ieee754_powf+0x3ec>
 800f926:	bf00      	nop
 800f928:	00000000 	.word	0x00000000
 800f92c:	3f7ffff3 	.word	0x3f7ffff3
 800f930:	3f800007 	.word	0x3f800007
 800f934:	3eaaaaab 	.word	0x3eaaaaab
 800f938:	3fb8aa3b 	.word	0x3fb8aa3b
 800f93c:	36eca570 	.word	0x36eca570
 800f940:	3fb8aa00 	.word	0x3fb8aa00
 800f944:	4b800000 	.word	0x4b800000
 800f948:	001cc471 	.word	0x001cc471
 800f94c:	005db3d6 	.word	0x005db3d6
 800f950:	08010390 	.word	0x08010390
 800f954:	fffff000 	.word	0xfffff000
 800f958:	3e6c3255 	.word	0x3e6c3255
 800f95c:	3e53f142 	.word	0x3e53f142
 800f960:	3e8ba305 	.word	0x3e8ba305
 800f964:	3edb6db7 	.word	0x3edb6db7
 800f968:	3f19999a 	.word	0x3f19999a
 800f96c:	08010380 	.word	0x08010380
 800f970:	3f76384f 	.word	0x3f76384f
 800f974:	3f763800 	.word	0x3f763800
 800f978:	369dc3a0 	.word	0x369dc3a0
 800f97c:	08010388 	.word	0x08010388
 800f980:	3338aa3c 	.word	0x3338aa3c
 800f984:	43160000 	.word	0x43160000
 800f988:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f98c:	d971      	bls.n	800fa72 <__ieee754_powf+0x55a>
 800f98e:	15db      	asrs	r3, r3, #23
 800f990:	3b7e      	subs	r3, #126	@ 0x7e
 800f992:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f996:	4118      	asrs	r0, r3
 800f998:	4408      	add	r0, r1
 800f99a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f99e:	4a3c      	ldr	r2, [pc, #240]	@ (800fa90 <__ieee754_powf+0x578>)
 800f9a0:	3b7f      	subs	r3, #127	@ 0x7f
 800f9a2:	411a      	asrs	r2, r3
 800f9a4:	4002      	ands	r2, r0
 800f9a6:	ee07 2a10 	vmov	s14, r2
 800f9aa:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f9ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f9b2:	f1c3 0317 	rsb	r3, r3, #23
 800f9b6:	4118      	asrs	r0, r3
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f9be:	bfb8      	it	lt
 800f9c0:	4240      	neglt	r0, r0
 800f9c2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f9c6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800fa94 <__ieee754_powf+0x57c>
 800f9ca:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800fa98 <__ieee754_powf+0x580>
 800f9ce:	ee17 3a10 	vmov	r3, s14
 800f9d2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800f9d6:	f023 030f 	bic.w	r3, r3, #15
 800f9da:	ee07 3a10 	vmov	s14, r3
 800f9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f9e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f9ea:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800fa9c <__ieee754_powf+0x584>
 800f9ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9f2:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f9f6:	eef0 6a67 	vmov.f32	s13, s15
 800f9fa:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f9fe:	eef0 5a66 	vmov.f32	s11, s13
 800fa02:	eee7 5a46 	vfms.f32	s11, s14, s12
 800fa06:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fa0a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fa0e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800faa0 <__ieee754_powf+0x588>
 800fa12:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800faa4 <__ieee754_powf+0x58c>
 800fa16:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fa1a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800faa8 <__ieee754_powf+0x590>
 800fa1e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fa22:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800faac <__ieee754_powf+0x594>
 800fa26:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fa2a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800fab0 <__ieee754_powf+0x598>
 800fa2e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fa32:	eeb0 6a66 	vmov.f32	s12, s13
 800fa36:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800fa3a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800fa3e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800fa42:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fa46:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800fa4a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800fa4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fa56:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa5a:	ee10 3a10 	vmov	r3, s0
 800fa5e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fa62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fa66:	da06      	bge.n	800fa76 <__ieee754_powf+0x55e>
 800fa68:	f000 f82e 	bl	800fac8 <scalbnf>
 800fa6c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fa70:	e56a      	b.n	800f548 <__ieee754_powf+0x30>
 800fa72:	2000      	movs	r0, #0
 800fa74:	e7a5      	b.n	800f9c2 <__ieee754_powf+0x4aa>
 800fa76:	ee00 3a10 	vmov	s0, r3
 800fa7a:	e7f7      	b.n	800fa6c <__ieee754_powf+0x554>
 800fa7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fa80:	e562      	b.n	800f548 <__ieee754_powf+0x30>
 800fa82:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800fab4 <__ieee754_powf+0x59c>
 800fa86:	e55f      	b.n	800f548 <__ieee754_powf+0x30>
 800fa88:	eeb0 0a48 	vmov.f32	s0, s16
 800fa8c:	e55c      	b.n	800f548 <__ieee754_powf+0x30>
 800fa8e:	bf00      	nop
 800fa90:	ff800000 	.word	0xff800000
 800fa94:	3f317218 	.word	0x3f317218
 800fa98:	3f317200 	.word	0x3f317200
 800fa9c:	35bfbe8c 	.word	0x35bfbe8c
 800faa0:	b5ddea0e 	.word	0xb5ddea0e
 800faa4:	3331bb4c 	.word	0x3331bb4c
 800faa8:	388ab355 	.word	0x388ab355
 800faac:	bb360b61 	.word	0xbb360b61
 800fab0:	3e2aaaab 	.word	0x3e2aaaab
 800fab4:	00000000 	.word	0x00000000

0800fab8 <fabsf>:
 800fab8:	ee10 3a10 	vmov	r3, s0
 800fabc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fac0:	ee00 3a10 	vmov	s0, r3
 800fac4:	4770      	bx	lr
	...

0800fac8 <scalbnf>:
 800fac8:	ee10 3a10 	vmov	r3, s0
 800facc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fad0:	d02b      	beq.n	800fb2a <scalbnf+0x62>
 800fad2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fad6:	d302      	bcc.n	800fade <scalbnf+0x16>
 800fad8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fadc:	4770      	bx	lr
 800fade:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fae2:	d123      	bne.n	800fb2c <scalbnf+0x64>
 800fae4:	4b24      	ldr	r3, [pc, #144]	@ (800fb78 <scalbnf+0xb0>)
 800fae6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fb7c <scalbnf+0xb4>
 800faea:	4298      	cmp	r0, r3
 800faec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800faf0:	db17      	blt.n	800fb22 <scalbnf+0x5a>
 800faf2:	ee10 3a10 	vmov	r3, s0
 800faf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fafa:	3a19      	subs	r2, #25
 800fafc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fb00:	4288      	cmp	r0, r1
 800fb02:	dd15      	ble.n	800fb30 <scalbnf+0x68>
 800fb04:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fb80 <scalbnf+0xb8>
 800fb08:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fb84 <scalbnf+0xbc>
 800fb0c:	ee10 3a10 	vmov	r3, s0
 800fb10:	eeb0 7a67 	vmov.f32	s14, s15
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	bfb8      	it	lt
 800fb18:	eef0 7a66 	vmovlt.f32	s15, s13
 800fb1c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fb20:	4770      	bx	lr
 800fb22:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fb88 <scalbnf+0xc0>
 800fb26:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb2a:	4770      	bx	lr
 800fb2c:	0dd2      	lsrs	r2, r2, #23
 800fb2e:	e7e5      	b.n	800fafc <scalbnf+0x34>
 800fb30:	4410      	add	r0, r2
 800fb32:	28fe      	cmp	r0, #254	@ 0xfe
 800fb34:	dce6      	bgt.n	800fb04 <scalbnf+0x3c>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	dd06      	ble.n	800fb48 <scalbnf+0x80>
 800fb3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb3e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fb42:	ee00 3a10 	vmov	s0, r3
 800fb46:	4770      	bx	lr
 800fb48:	f110 0f16 	cmn.w	r0, #22
 800fb4c:	da09      	bge.n	800fb62 <scalbnf+0x9a>
 800fb4e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fb88 <scalbnf+0xc0>
 800fb52:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fb8c <scalbnf+0xc4>
 800fb56:	ee10 3a10 	vmov	r3, s0
 800fb5a:	eeb0 7a67 	vmov.f32	s14, s15
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	e7d9      	b.n	800fb16 <scalbnf+0x4e>
 800fb62:	3019      	adds	r0, #25
 800fb64:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb68:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fb6c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fb90 <scalbnf+0xc8>
 800fb70:	ee07 3a90 	vmov	s15, r3
 800fb74:	e7d7      	b.n	800fb26 <scalbnf+0x5e>
 800fb76:	bf00      	nop
 800fb78:	ffff3cb0 	.word	0xffff3cb0
 800fb7c:	4c000000 	.word	0x4c000000
 800fb80:	7149f2ca 	.word	0x7149f2ca
 800fb84:	f149f2ca 	.word	0xf149f2ca
 800fb88:	0da24260 	.word	0x0da24260
 800fb8c:	8da24260 	.word	0x8da24260
 800fb90:	33000000 	.word	0x33000000

0800fb94 <with_errnof>:
 800fb94:	b510      	push	{r4, lr}
 800fb96:	ed2d 8b02 	vpush	{d8}
 800fb9a:	eeb0 8a40 	vmov.f32	s16, s0
 800fb9e:	4604      	mov	r4, r0
 800fba0:	f7fc fb92 	bl	800c2c8 <__errno>
 800fba4:	eeb0 0a48 	vmov.f32	s0, s16
 800fba8:	ecbd 8b02 	vpop	{d8}
 800fbac:	6004      	str	r4, [r0, #0]
 800fbae:	bd10      	pop	{r4, pc}

0800fbb0 <xflowf>:
 800fbb0:	b130      	cbz	r0, 800fbc0 <xflowf+0x10>
 800fbb2:	eef1 7a40 	vneg.f32	s15, s0
 800fbb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fbba:	2022      	movs	r0, #34	@ 0x22
 800fbbc:	f7ff bfea 	b.w	800fb94 <with_errnof>
 800fbc0:	eef0 7a40 	vmov.f32	s15, s0
 800fbc4:	e7f7      	b.n	800fbb6 <xflowf+0x6>
	...

0800fbc8 <__math_uflowf>:
 800fbc8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fbd0 <__math_uflowf+0x8>
 800fbcc:	f7ff bff0 	b.w	800fbb0 <xflowf>
 800fbd0:	10000000 	.word	0x10000000

0800fbd4 <__math_oflowf>:
 800fbd4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fbdc <__math_oflowf+0x8>
 800fbd8:	f7ff bfea 	b.w	800fbb0 <xflowf>
 800fbdc:	70000000 	.word	0x70000000

0800fbe0 <_init>:
 800fbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe2:	bf00      	nop
 800fbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbe6:	bc08      	pop	{r3}
 800fbe8:	469e      	mov	lr, r3
 800fbea:	4770      	bx	lr

0800fbec <_fini>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	bf00      	nop
 800fbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbf2:	bc08      	pop	{r3}
 800fbf4:	469e      	mov	lr, r3
 800fbf6:	4770      	bx	lr
